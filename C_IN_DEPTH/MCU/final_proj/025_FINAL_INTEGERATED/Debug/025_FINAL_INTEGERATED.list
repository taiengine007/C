
025_FINAL_INTEGERATED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  08007db8  08007db8  00008db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c8  080082c8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080082c8  080082c8  000092c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d0  080082d0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d0  080082d0  000092d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082d4  080082d4  000092d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080082d8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006cc  200001d4  080084ac  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  080084ac  0000a8a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc0c  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002312  00000000  00000000  00015e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00018120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000942  00000000  00000000  00018d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194ed  00000000  00000000  00019682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcbc  00000000  00000000  00032b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be33  00000000  00000000  0004282b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce65e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044fc  00000000  00000000  000ce6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000d2ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d9c 	.word	0x08007d9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007d9c 	.word	0x08007d9c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <main>:




int main(void)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b08f      	sub	sp, #60	@ 0x3c
 8001160:	af02      	add	r7, sp, #8
	volatile uint32_t value;
	//char mytext[] = "hello oled";
	//char retval;


  HAL_Init();
 8001162:	f000 fff9 	bl	8002158 <HAL_Init>


  /* Configure the system clock */
  SystemClock_Config();
 8001166:	f000 f94b 	bl	8001400 <SystemClock_Config>



  MX_GPIO_Init();
 800116a:	f000 fa6d 	bl	8001648 <MX_GPIO_Init>
  MX_ADC1_Init();
 800116e:	f000 f999 	bl	80014a4 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001172:	f000 fa03 	bl	800157c <MX_I2C2_Init>
  MX_I2C1_Init();
 8001176:	f000 f9d3 	bl	8001520 <MX_I2C1_Init>
  MX_SPI2_Init();
 800117a:	f000 fa2d 	bl	80015d8 <MX_SPI2_Init>

  InitThermocouple1();
 800117e:	f000 f929 	bl	80013d4 <InitThermocouple1>
  HAL_ADC_Start (&hadc1);
 8001182:	4882      	ldr	r0, [pc, #520]	@ (800138c <main+0x230>)
 8001184:	f001 f946 	bl	8002414 <HAL_ADC_Start>



  printf("hello world\n");
 8001188:	4881      	ldr	r0, [pc, #516]	@ (8001390 <main+0x234>)
 800118a:	f004 fcb3 	bl	8005af4 <puts>

  ssd1306_Init();                                           // OLED_INIT
 800118e:	f000 ff07 	bl	8001fa0 <ssd1306_Init>

  // Second, initilaize the MCP4725 object:
  myMCP4725 = MCP4725_init(&hi2c2, MCP4725A0_ADDR_A01, 5.0);
 8001192:	4c80      	ldr	r4, [pc, #512]	@ (8001394 <main+0x238>)
 8001194:	4638      	mov	r0, r7
 8001196:	4b80      	ldr	r3, [pc, #512]	@ (8001398 <main+0x23c>)
 8001198:	2261      	movs	r2, #97	@ 0x61
 800119a:	4980      	ldr	r1, [pc, #512]	@ (800139c <main+0x240>)
 800119c:	f000 fdc4 	bl	8001d28 <MCP4725_init>
 80011a0:	463b      	mov	r3, r7
 80011a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}



  ////////////////////////////// initialisations end

  printf("hello world\n");
 80011a8:	4879      	ldr	r0, [pc, #484]	@ (8001390 <main+0x234>)
 80011aa:	f004 fca3 	bl	8005af4 <puts>
  	//  SPI2  THERMO COUPLE
  	//
  	///////////////////////////////////////////////////////////////


    float Th1_temp =0;
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //char txt1[11];
    char txt1[12];


  	// Check the connection:
  	if(MCP4725_isConnected(&myMCP4725)){
 80011b4:	4877      	ldr	r0, [pc, #476]	@ (8001394 <main+0x238>)
 80011b6:	f000 fdd7 	bl	8001d68 <MCP4725_isConnected>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <main+0x6c>

  		// Print that the DAC is coonected
  		printf("dac is connected -- \n");
 80011c0:	4877      	ldr	r0, [pc, #476]	@ (80013a0 <main+0x244>)
 80011c2:	f004 fc97 	bl	8005af4 <puts>
 80011c6:	e002      	b.n	80011ce <main+0x72>

  	}
  	else{

  		// Print that the DAC is NOT coonected
  		printf("not connected\n");
 80011c8:	4876      	ldr	r0, [pc, #472]	@ (80013a4 <main+0x248>)
 80011ca:	f004 fc93 	bl	8005af4 <puts>

  	}

  	HAL_Delay(5000);
 80011ce:	f241 3088 	movw	r0, #5000	@ 0x1388
 80011d2:	f001 f823 	bl	800221c <HAL_Delay>
  	printf("delay 5sec after dac is connected \n");
 80011d6:	4874      	ldr	r0, [pc, #464]	@ (80013a8 <main+0x24c>)
 80011d8:	f004 fc8c 	bl	8005af4 <puts>
	  //
	  //        SPI THERMOCOUPLE SENSOR
	  //
	  ////////////////////////////////////////////////////////////////

	 		  ReadThermoCouple(&sensor_th1);
 80011dc:	4873      	ldr	r0, [pc, #460]	@ (80013ac <main+0x250>)
 80011de:	f000 fd51 	bl	8001c84 <ReadThermoCouple>
	 	 	  if (sensor_th1.connected){
 80011e2:	4b72      	ldr	r3, [pc, #456]	@ (80013ac <main+0x250>)
 80011e4:	7c1b      	ldrb	r3, [r3, #16]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d02a      	beq.n	8001240 <main+0xe4>
	 	 		  Th1_temp = sensor_th1.Thx_celcius;
 80011ea:	4b70      	ldr	r3, [pc, #448]	@ (80013ac <main+0x250>)
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	 	 		  intpart = (int)Th1_temp;
 80011f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80011f2:	f7ff ff6d 	bl	80010d0 <__aeabi_f2iz>
 80011f6:	4603      	mov	r3, r0
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	 	 		  fracpart = (int)((Th1_temp - intpart) * 100);
 80011fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80011fc:	f7ff fd4e 	bl	8000c9c <__aeabi_i2f>
 8001200:	4603      	mov	r3, r0
 8001202:	4619      	mov	r1, r3
 8001204:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001206:	f7ff fc93 	bl	8000b30 <__aeabi_fsub>
 800120a:	4603      	mov	r3, r0
 800120c:	4968      	ldr	r1, [pc, #416]	@ (80013b0 <main+0x254>)
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fd98 	bl	8000d44 <__aeabi_fmul>
 8001214:	4603      	mov	r3, r0
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff5a 	bl	80010d0 <__aeabi_f2iz>
 800121c:	4603      	mov	r3, r0
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
	 	 		  snprintf(txt1, 11, "%3d.%02d", intpart, fracpart);
 8001220:	f107 0010 	add.w	r0, r7, #16
 8001224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800122a:	4a62      	ldr	r2, [pc, #392]	@ (80013b4 <main+0x258>)
 800122c:	210b      	movs	r1, #11
 800122e:	f004 fc69 	bl	8005b04 <sniprintf>
	 	 		  txt1[11]='\0';
 8001232:	2300      	movs	r3, #0
 8001234:	76fb      	strb	r3, [r7, #27]
	 	 		  printf("%s\n",txt1);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4618      	mov	r0, r3
 800123c:	f004 fc5a 	bl	8005af4 <puts>
	 	 	  // else {
	 	 	  // 	 SSD1306_GotoXY (1, 1);
	 	 	  // 	 SSD1306_Puts ("disconnected", &Font_7x10, 1);
	 	 	  // 	 SSD1306_UpdateScreen(); // update screen
	 	 	  // }
	 		  HAL_Delay(300);
 8001240:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001244:	f000 ffea 	bl	800221c <HAL_Delay>
	 		  //
	 		  //
	 		  ///////////////////////////////////////////////////////////////////////////


	 	   	  HAL_ADC_PollForConversion (&hadc1, 100);
 8001248:	2164      	movs	r1, #100	@ 0x64
 800124a:	4850      	ldr	r0, [pc, #320]	@ (800138c <main+0x230>)
 800124c:	f001 f990 	bl	8002570 <HAL_ADC_PollForConversion>
	 	    	  value = HAL_ADC_GetValue (&hadc1);
 8001250:	484e      	ldr	r0, [pc, #312]	@ (800138c <main+0x230>)
 8001252:	f001 fa93 	bl	800277c <HAL_ADC_GetValue>
 8001256:	4603      	mov	r3, r0
 8001258:	61fb      	str	r3, [r7, #28]
	 	    	  // printf("value = %ld\n",value);
	 	    	  float voltage = (value * 5.0f) / 4096.0f;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fd19 	bl	8000c94 <__aeabi_ui2f>
 8001262:	4603      	mov	r3, r0
 8001264:	494c      	ldr	r1, [pc, #304]	@ (8001398 <main+0x23c>)
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fd6c 	bl	8000d44 <__aeabi_fmul>
 800126c:	4603      	mov	r3, r0
 800126e:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fe1a 	bl	8000eac <__aeabi_fdiv>
 8001278:	4603      	mov	r3, r0
 800127a:	623b      	str	r3, [r7, #32]

	 	    	  // Print voltage
	 	    		         // printf("ADC Value: %lu, Voltage: %.2f V\n", value, voltage);
	 	    	  //printf(" adc value == %ld  ---  Voltage: %.2f V\n",value, voltage);
	 	    	  printf(" %ld     %.2f V\n",value, voltage);
 800127c:	69fc      	ldr	r4, [r7, #28]
 800127e:	6a38      	ldr	r0, [r7, #32]
 8001280:	f7ff f8d2 	bl	8000428 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4621      	mov	r1, r4
 800128a:	484b      	ldr	r0, [pc, #300]	@ (80013b8 <main+0x25c>)
 800128c:	f004 fbca 	bl	8005a24 <iprintf>
	 	    	  //MCP4725_setVoltage(&myMCP4725,voltage, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
	 	    	  HAL_Delay(4000);
 8001290:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001294:	f000 ffc2 	bl	800221c <HAL_Delay>
	 	    	  ////////////////////////////////////



	 	      	  if(voltage <= 1.0){
 8001298:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800129c:	6a38      	ldr	r0, [r7, #32]
 800129e:	f7ff fef9 	bl	8001094 <__aeabi_fcmple>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00a      	beq.n	80012be <main+0x162>
	 	      		  MCP4725_setVoltage(&myMCP4725,1.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80012a8:	2300      	movs	r3, #0
 80012aa:	2200      	movs	r2, #0
 80012ac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012b0:	4838      	ldr	r0, [pc, #224]	@ (8001394 <main+0x238>)
 80012b2:	f000 fdad 	bl	8001e10 <MCP4725_setVoltage>
	 	      		  printf("if voltage <=1 --> mcp_setvoltgae(1)\n");
 80012b6:	4841      	ldr	r0, [pc, #260]	@ (80013bc <main+0x260>)
 80012b8:	f004 fc1c 	bl	8005af4 <puts>
 80012bc:	e78e      	b.n	80011dc <main+0x80>
	 	      	  }else if(voltage >1.0 && voltage <=2.0){
 80012be:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012c2:	6a38      	ldr	r0, [r7, #32]
 80012c4:	f7ff fefa 	bl	80010bc <__aeabi_fcmpgt>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d012      	beq.n	80012f4 <main+0x198>
 80012ce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012d2:	6a38      	ldr	r0, [r7, #32]
 80012d4:	f7ff fede 	bl	8001094 <__aeabi_fcmple>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00a      	beq.n	80012f4 <main+0x198>
	 	      		  MCP4725_setVoltage(&myMCP4725,2.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80012de:	2300      	movs	r3, #0
 80012e0:	2200      	movs	r2, #0
 80012e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012e6:	482b      	ldr	r0, [pc, #172]	@ (8001394 <main+0x238>)
 80012e8:	f000 fd92 	bl	8001e10 <MCP4725_setVoltage>
	 	      		 		  printf("if voltage <=2 --> mcp_setvoltgae(2)\n");
 80012ec:	4834      	ldr	r0, [pc, #208]	@ (80013c0 <main+0x264>)
 80012ee:	f004 fc01 	bl	8005af4 <puts>
 80012f2:	e04a      	b.n	800138a <main+0x22e>

	 	      	  }else if(voltage >2.0 && voltage <=3.0){
 80012f4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012f8:	6a38      	ldr	r0, [r7, #32]
 80012fa:	f7ff fedf 	bl	80010bc <__aeabi_fcmpgt>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d010      	beq.n	8001326 <main+0x1ca>
 8001304:	492f      	ldr	r1, [pc, #188]	@ (80013c4 <main+0x268>)
 8001306:	6a38      	ldr	r0, [r7, #32]
 8001308:	f7ff fec4 	bl	8001094 <__aeabi_fcmple>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d009      	beq.n	8001326 <main+0x1ca>
	 	      		  MCP4725_setVoltage(&myMCP4725,3.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001312:	2300      	movs	r3, #0
 8001314:	2200      	movs	r2, #0
 8001316:	492b      	ldr	r1, [pc, #172]	@ (80013c4 <main+0x268>)
 8001318:	481e      	ldr	r0, [pc, #120]	@ (8001394 <main+0x238>)
 800131a:	f000 fd79 	bl	8001e10 <MCP4725_setVoltage>
	 	      		 		  printf("if voltage <=3 --> mcp_setvoltgae(3)\n");
 800131e:	482a      	ldr	r0, [pc, #168]	@ (80013c8 <main+0x26c>)
 8001320:	f004 fbe8 	bl	8005af4 <puts>
 8001324:	e031      	b.n	800138a <main+0x22e>

	 	      	  }else if(voltage >3.0 && voltage <=4.0){
 8001326:	4927      	ldr	r1, [pc, #156]	@ (80013c4 <main+0x268>)
 8001328:	6a38      	ldr	r0, [r7, #32]
 800132a:	f7ff fec7 	bl	80010bc <__aeabi_fcmpgt>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d012      	beq.n	800135a <main+0x1fe>
 8001334:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001338:	6a38      	ldr	r0, [r7, #32]
 800133a:	f7ff feab 	bl	8001094 <__aeabi_fcmple>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00a      	beq.n	800135a <main+0x1fe>
	 	      		  MCP4725_setVoltage(&myMCP4725,4.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001344:	2300      	movs	r3, #0
 8001346:	2200      	movs	r2, #0
 8001348:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800134c:	4811      	ldr	r0, [pc, #68]	@ (8001394 <main+0x238>)
 800134e:	f000 fd5f 	bl	8001e10 <MCP4725_setVoltage>
	 	      		 		  printf("if voltage <=4 --> mcp_setvoltgae(4)\n");
 8001352:	481e      	ldr	r0, [pc, #120]	@ (80013cc <main+0x270>)
 8001354:	f004 fbce 	bl	8005af4 <puts>
 8001358:	e017      	b.n	800138a <main+0x22e>

	 	      	  }else if(voltage >4.0 && voltage <=5.0){
 800135a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800135e:	6a38      	ldr	r0, [r7, #32]
 8001360:	f7ff feac 	bl	80010bc <__aeabi_fcmpgt>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00f      	beq.n	800138a <main+0x22e>
 800136a:	490b      	ldr	r1, [pc, #44]	@ (8001398 <main+0x23c>)
 800136c:	6a38      	ldr	r0, [r7, #32]
 800136e:	f7ff fe91 	bl	8001094 <__aeabi_fcmple>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d008      	beq.n	800138a <main+0x22e>
	 	      		  MCP4725_setVoltage(&myMCP4725,5.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001378:	2300      	movs	r3, #0
 800137a:	2200      	movs	r2, #0
 800137c:	4906      	ldr	r1, [pc, #24]	@ (8001398 <main+0x23c>)
 800137e:	4805      	ldr	r0, [pc, #20]	@ (8001394 <main+0x238>)
 8001380:	f000 fd46 	bl	8001e10 <MCP4725_setVoltage>
	 	      		 		  printf("if voltage <=5 --> mcp_setvoltgae(5)\n");
 8001384:	4812      	ldr	r0, [pc, #72]	@ (80013d0 <main+0x274>)
 8001386:	f004 fbb5 	bl	8005af4 <puts>
  {
 800138a:	e727      	b.n	80011dc <main+0x80>
 800138c:	200001f0 	.word	0x200001f0
 8001390:	08007db8 	.word	0x08007db8
 8001394:	20000334 	.word	0x20000334
 8001398:	40a00000 	.word	0x40a00000
 800139c:	20000274 	.word	0x20000274
 80013a0:	08007dc4 	.word	0x08007dc4
 80013a4:	08007ddc 	.word	0x08007ddc
 80013a8:	08007dec 	.word	0x08007dec
 80013ac:	20000320 	.word	0x20000320
 80013b0:	42c80000 	.word	0x42c80000
 80013b4:	08007e10 	.word	0x08007e10
 80013b8:	08007e1c 	.word	0x08007e1c
 80013bc:	08007e30 	.word	0x08007e30
 80013c0:	08007e58 	.word	0x08007e58
 80013c4:	40400000 	.word	0x40400000
 80013c8:	08007e80 	.word	0x08007e80
 80013cc:	08007ea8 	.word	0x08007ea8
 80013d0:	08007ed0 	.word	0x08007ed0

080013d4 <InitThermocouple1>:




void InitThermocouple1(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
	  sensor_th1.Thx_CS_Pin = GPIO_PIN_6;				// CS Pin
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <InitThermocouple1+0x20>)
 80013da:	2240      	movs	r2, #64	@ 0x40
 80013dc:	811a      	strh	r2, [r3, #8]
	  sensor_th1.Thx_CS_Port = GPIOC;					// CS GPIO PORT
 80013de:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <InitThermocouple1+0x20>)
 80013e0:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <InitThermocouple1+0x24>)
 80013e2:	605a      	str	r2, [r3, #4]
	  sensor_th1.hspi = &hspi2;							// SPI1
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <InitThermocouple1+0x20>)
 80013e6:	4a05      	ldr	r2, [pc, #20]	@ (80013fc <InitThermocouple1+0x28>)
 80013e8:	601a      	str	r2, [r3, #0]
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000320 	.word	0x20000320
 80013f8:	40011000 	.word	0x40011000
 80013fc:	200002c8 	.word	0x200002c8

08001400 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	@ 0x50
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800140a:	2228      	movs	r2, #40	@ 0x28
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f004 fc84 	bl	8005d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001430:	2302      	movs	r3, #2
 8001432:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001434:	2301      	movs	r3, #1
 8001436:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001438:	2310      	movs	r3, #16
 800143a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800143c:	2300      	movs	r3, #0
 800143e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fd5f 	bl	8003f08 <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001450:	f000 f976 	bl	8001740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	230f      	movs	r3, #15
 8001456:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001460:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001464:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f002 ffcb 	bl	800440c <HAL_RCC_ClockConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800147c:	f000 f960 	bl	8001740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001480:	2302      	movs	r3, #2
 8001482:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4618      	mov	r0, r3
 800148c:	f003 f94c 	bl	8004728 <HAL_RCCEx_PeriphCLKConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001496:	f000 f953 	bl	8001740 <Error_Handler>
  }
}
 800149a:	bf00      	nop
 800149c:	3750      	adds	r7, #80	@ 0x50
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014b4:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <MX_ADC1_Init+0x74>)
 80014b6:	4a19      	ldr	r2, [pc, #100]	@ (800151c <MX_ADC1_Init+0x78>)
 80014b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ba:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <MX_ADC1_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014c0:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <MX_ADC1_Init+0x74>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014c6:	4b14      	ldr	r3, [pc, #80]	@ (8001518 <MX_ADC1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <MX_ADC1_Init+0x74>)
 80014ce:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80014d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d4:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <MX_ADC1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <MX_ADC1_Init+0x74>)
 80014dc:	2201      	movs	r2, #1
 80014de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014e0:	480d      	ldr	r0, [pc, #52]	@ (8001518 <MX_ADC1_Init+0x74>)
 80014e2:	f000 febf 	bl	8002264 <HAL_ADC_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80014ec:	f000 f928 	bl	8001740 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	@ (8001518 <MX_ADC1_Init+0x74>)
 8001502:	f001 f947 	bl	8002794 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800150c:	f000 f918 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200001f0 	.word	0x200001f0
 800151c:	40012400 	.word	0x40012400

08001520 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <MX_I2C1_Init+0x50>)
 8001526:	4a13      	ldr	r2, [pc, #76]	@ (8001574 <MX_I2C1_Init+0x54>)
 8001528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_I2C1_Init+0x50>)
 800152c:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <MX_I2C1_Init+0x58>)
 800152e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001530:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <MX_I2C1_Init+0x50>)
 800153e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001542:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <MX_I2C1_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <MX_I2C1_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <MX_I2C1_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <MX_I2C1_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	@ (8001570 <MX_I2C1_Init+0x50>)
 800155e:	f001 fd79 	bl	8003054 <HAL_I2C_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001568:	f000 f8ea 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000220 	.word	0x20000220
 8001574:	40005400 	.word	0x40005400
 8001578:	000186a0 	.word	0x000186a0

0800157c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <MX_I2C2_Init+0x50>)
 8001582:	4a13      	ldr	r2, [pc, #76]	@ (80015d0 <MX_I2C2_Init+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_I2C2_Init+0x50>)
 8001588:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <MX_I2C2_Init+0x58>)
 800158a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_I2C2_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_I2C2_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <MX_I2C2_Init+0x50>)
 800159a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800159e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <MX_I2C2_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <MX_I2C2_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ac:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <MX_I2C2_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_I2C2_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	@ (80015cc <MX_I2C2_Init+0x50>)
 80015ba:	f001 fd4b 	bl	8003054 <HAL_I2C_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015c4:	f000 f8bc 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000274 	.word	0x20000274
 80015d0:	40005800 	.word	0x40005800
 80015d4:	000186a0 	.word	0x000186a0

080015d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015dc:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <MX_SPI2_Init+0x68>)
 80015de:	4a19      	ldr	r2, [pc, #100]	@ (8001644 <MX_SPI2_Init+0x6c>)
 80015e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015e2:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <MX_SPI2_Init+0x68>)
 80015e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <MX_SPI2_Init+0x68>)
 80015ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015f0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80015f2:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <MX_SPI2_Init+0x68>)
 80015f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fa:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <MX_SPI2_Init+0x68>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001600:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <MX_SPI2_Init+0x68>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <MX_SPI2_Init+0x68>)
 8001608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800160c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <MX_SPI2_Init+0x68>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001614:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <MX_SPI2_Init+0x68>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <MX_SPI2_Init+0x68>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001620:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <MX_SPI2_Init+0x68>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <MX_SPI2_Init+0x68>)
 8001628:	220a      	movs	r2, #10
 800162a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	@ (8001640 <MX_SPI2_Init+0x68>)
 800162e:	f003 f9e7 	bl	8004a00 <HAL_SPI_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8001638:	f000 f882 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200002c8 	.word	0x200002c8
 8001644:	40003800 	.word	0x40003800

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165c:	4b35      	ldr	r3, [pc, #212]	@ (8001734 <MX_GPIO_Init+0xec>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a34      	ldr	r2, [pc, #208]	@ (8001734 <MX_GPIO_Init+0xec>)
 8001662:	f043 0310 	orr.w	r3, r3, #16
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b32      	ldr	r3, [pc, #200]	@ (8001734 <MX_GPIO_Init+0xec>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001674:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <MX_GPIO_Init+0xec>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a2e      	ldr	r2, [pc, #184]	@ (8001734 <MX_GPIO_Init+0xec>)
 800167a:	f043 0320 	orr.w	r3, r3, #32
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <MX_GPIO_Init+0xec>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b29      	ldr	r3, [pc, #164]	@ (8001734 <MX_GPIO_Init+0xec>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a28      	ldr	r2, [pc, #160]	@ (8001734 <MX_GPIO_Init+0xec>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b26      	ldr	r3, [pc, #152]	@ (8001734 <MX_GPIO_Init+0xec>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a4:	4b23      	ldr	r3, [pc, #140]	@ (8001734 <MX_GPIO_Init+0xec>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a22      	ldr	r2, [pc, #136]	@ (8001734 <MX_GPIO_Init+0xec>)
 80016aa:	f043 0308 	orr.w	r3, r3, #8
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <MX_GPIO_Init+0xec>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|RELAY_BUTTON_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80016c2:	481d      	ldr	r0, [pc, #116]	@ (8001738 <MX_GPIO_Init+0xf0>)
 80016c4:	f001 fc8c 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <MX_GPIO_Init+0xf4>)
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4619      	mov	r1, r3
 80016dc:	4816      	ldr	r0, [pc, #88]	@ (8001738 <MX_GPIO_Init+0xf0>)
 80016de:	f001 fafb 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016e2:	2340      	movs	r3, #64	@ 0x40
 80016e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	4619      	mov	r1, r3
 80016f8:	480f      	ldr	r0, [pc, #60]	@ (8001738 <MX_GPIO_Init+0xf0>)
 80016fa:	f001 faed 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = RELAY_BUTTON_Pin;
 80016fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001704:	2311      	movs	r3, #17
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2302      	movs	r3, #2
 800170e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4619      	mov	r1, r3
 8001716:	4808      	ldr	r0, [pc, #32]	@ (8001738 <MX_GPIO_Init+0xf0>)
 8001718:	f001 fade 	bl	8002cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2028      	movs	r0, #40	@ 0x28
 8001722:	f001 faa2 	bl	8002c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001726:	2028      	movs	r0, #40	@ 0x28
 8001728:	f001 fabb 	bl	8002ca2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	40011000 	.word	0x40011000
 800173c:	10110000 	.word	0x10110000

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <Error_Handler+0x8>

0800174c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <HAL_MspInit+0x5c>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <HAL_MspInit+0x5c>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6193      	str	r3, [r2, #24]
 800175e:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_MspInit+0x5c>)
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <HAL_MspInit+0x5c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a0e      	ldr	r2, [pc, #56]	@ (80017a8 <HAL_MspInit+0x5c>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <HAL_MspInit+0x5c>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <HAL_MspInit+0x60>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <HAL_MspInit+0x60>)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010000 	.word	0x40010000

080017b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a14      	ldr	r2, [pc, #80]	@ (800181c <HAL_ADC_MspInit+0x6c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d121      	bne.n	8001814 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <HAL_ADC_MspInit+0x70>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <HAL_ADC_MspInit+0x70>)
 80017d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <HAL_ADC_MspInit+0x70>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001820 <HAL_ADC_MspInit+0x70>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001820 <HAL_ADC_MspInit+0x70>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <HAL_ADC_MspInit+0x70>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001800:	2302      	movs	r3, #2
 8001802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001804:	2303      	movs	r3, #3
 8001806:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	4805      	ldr	r0, [pc, #20]	@ (8001824 <HAL_ADC_MspInit+0x74>)
 8001810:	f001 fa62 	bl	8002cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40012400 	.word	0x40012400
 8001820:	40021000 	.word	0x40021000
 8001824:	40010800 	.word	0x40010800

08001828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	@ 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a32      	ldr	r2, [pc, #200]	@ (800190c <HAL_I2C_MspInit+0xe4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d133      	bne.n	80018b0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001848:	4b31      	ldr	r3, [pc, #196]	@ (8001910 <HAL_I2C_MspInit+0xe8>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a30      	ldr	r2, [pc, #192]	@ (8001910 <HAL_I2C_MspInit+0xe8>)
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <HAL_I2C_MspInit+0xe8>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001860:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001866:	2312      	movs	r3, #18
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4619      	mov	r1, r3
 8001874:	4827      	ldr	r0, [pc, #156]	@ (8001914 <HAL_I2C_MspInit+0xec>)
 8001876:	f001 fa2f 	bl	8002cd8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800187a:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <HAL_I2C_MspInit+0xf0>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001882:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001890:	4a21      	ldr	r2, [pc, #132]	@ (8001918 <HAL_I2C_MspInit+0xf0>)
 8001892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001894:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001896:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <HAL_I2C_MspInit+0xe8>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a1d      	ldr	r2, [pc, #116]	@ (8001910 <HAL_I2C_MspInit+0xe8>)
 800189c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <HAL_I2C_MspInit+0xe8>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018ae:	e029      	b.n	8001904 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a19      	ldr	r2, [pc, #100]	@ (800191c <HAL_I2C_MspInit+0xf4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d124      	bne.n	8001904 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_I2C_MspInit+0xe8>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <HAL_I2C_MspInit+0xe8>)
 80018c0:	f043 0308 	orr.w	r3, r3, #8
 80018c4:	6193      	str	r3, [r2, #24]
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_I2C_MspInit+0xe8>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d8:	2312      	movs	r3, #18
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4619      	mov	r1, r3
 80018e6:	480b      	ldr	r0, [pc, #44]	@ (8001914 <HAL_I2C_MspInit+0xec>)
 80018e8:	f001 f9f6 	bl	8002cd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <HAL_I2C_MspInit+0xe8>)
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	4a07      	ldr	r2, [pc, #28]	@ (8001910 <HAL_I2C_MspInit+0xe8>)
 80018f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018f6:	61d3      	str	r3, [r2, #28]
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <HAL_I2C_MspInit+0xe8>)
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	bf00      	nop
 8001906:	3730      	adds	r7, #48	@ 0x30
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40005400 	.word	0x40005400
 8001910:	40021000 	.word	0x40021000
 8001914:	40010c00 	.word	0x40010c00
 8001918:	40010000 	.word	0x40010000
 800191c:	40005800 	.word	0x40005800

08001920 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1c      	ldr	r2, [pc, #112]	@ (80019ac <HAL_SPI_MspInit+0x8c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d131      	bne.n	80019a4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001940:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <HAL_SPI_MspInit+0x90>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	4a1a      	ldr	r2, [pc, #104]	@ (80019b0 <HAL_SPI_MspInit+0x90>)
 8001946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194a:	61d3      	str	r3, [r2, #28]
 800194c:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <HAL_SPI_MspInit+0x90>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001958:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_SPI_MspInit+0x90>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a14      	ldr	r2, [pc, #80]	@ (80019b0 <HAL_SPI_MspInit+0x90>)
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_SPI_MspInit+0x90>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001974:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 0310 	add.w	r3, r7, #16
 8001982:	4619      	mov	r1, r3
 8001984:	480b      	ldr	r0, [pc, #44]	@ (80019b4 <HAL_SPI_MspInit+0x94>)
 8001986:	f001 f9a7 	bl	8002cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800198a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800198e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	4619      	mov	r1, r3
 800199e:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <HAL_SPI_MspInit+0x94>)
 80019a0:	f001 f99a 	bl	8002cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40003800 	.word	0x40003800
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010c00 	.word	0x40010c00

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <NMI_Handler+0x4>

080019c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <MemManage_Handler+0x4>

080019d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <UsageFault_Handler+0x4>

080019e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a08:	f000 fbec 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a14:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a18:	f001 fafa 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <ITM_SendChar+0x44>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <ITM_SendChar+0x44>)
 8001a30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a34:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <ITM_SendChar+0x48>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <ITM_SendChar+0x48>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001a42:	bf00      	nop
 8001a44:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f8      	beq.n	8001a44 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001a52:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	6013      	str	r3, [r2, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	e000edfc 	.word	0xe000edfc
 8001a68:	e0000e00 	.word	0xe0000e00

08001a6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return 1;
 8001a70:	2301      	movs	r3, #1
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <_kill>:

int _kill(int pid, int sig)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a84:	f004 f99c 	bl	8005dc0 <__errno>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2216      	movs	r2, #22
 8001a8c:	601a      	str	r2, [r3, #0]
  return -1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_exit>:

void _exit (int status)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aa2:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffe7 	bl	8001a7a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <_exit+0x12>

08001ab0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e00a      	b.n	8001ad8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ac2:	f3af 8000 	nop.w
 8001ac6:	4601      	mov	r1, r0
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	60ba      	str	r2, [r7, #8]
 8001ace:	b2ca      	uxtb	r2, r1
 8001ad0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dbf0      	blt.n	8001ac2 <_read+0x12>
  }

  return len;
 8001ae0:	687b      	ldr	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e009      	b.n	8001b10 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	60ba      	str	r2, [r7, #8]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff8b 	bl	8001a20 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dbf1      	blt.n	8001afc <_write+0x12>
  }
  return len;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_close>:

int _close(int file)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b48:	605a      	str	r2, [r3, #4]
  return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <_isatty>:

int _isatty(int file)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
	...

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	@ (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	@ (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f004 f904 	bl	8005dc0 <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	@ (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20005000 	.word	0x20005000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	20000344 	.word	0x20000344
 8001bec:	200008a0 	.word	0x200008a0

08001bf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bfc:	f7ff fff8 	bl	8001bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c00:	480b      	ldr	r0, [pc, #44]	@ (8001c30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c02:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c04:	4a0c      	ldr	r2, [pc, #48]	@ (8001c38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c08:	e002      	b.n	8001c10 <LoopCopyDataInit>

08001c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0e:	3304      	adds	r3, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c14:	d3f9      	bcc.n	8001c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c16:	4a09      	ldr	r2, [pc, #36]	@ (8001c3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c18:	4c09      	ldr	r4, [pc, #36]	@ (8001c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c1c:	e001      	b.n	8001c22 <LoopFillZerobss>

08001c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c20:	3204      	adds	r2, #4

08001c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c24:	d3fb      	bcc.n	8001c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c26:	f004 f8d1 	bl	8005dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c2a:	f7ff fa97 	bl	800115c <main>
  bx lr
 8001c2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c38:	080082d8 	.word	0x080082d8
  ldr r2, =_sbss
 8001c3c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c40:	200008a0 	.word	0x200008a0

08001c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC1_2_IRQHandler>

08001c46 <SPI_RxByte>:



/* SPI Receive one Byte */
static uint8_t SPI_RxByte(SPI_HandleTypeDef *hspi)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af02      	add	r7, sp, #8
 8001c4c:	6078      	str	r0, [r7, #4]
  uint8_t dummy, data;
  dummy = 0xFF;
 8001c4e:	23ff      	movs	r3, #255	@ 0xff
 8001c50:	73fb      	strb	r3, [r7, #15]
  data = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73bb      	strb	r3, [r7, #14]

  while ((HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY));
 8001c56:	bf00      	nop
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f003 f8fe 	bl	8004e5a <HAL_SPI_GetState>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d1f9      	bne.n	8001c58 <SPI_RxByte+0x12>
  HAL_SPI_TransmitReceive(hspi, &dummy, &data, 1, SPI_TIMEOUT);
 8001c64:	f107 020e 	add.w	r2, r7, #14
 8001c68:	f107 010f 	add.w	r1, r7, #15
 8001c6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2301      	movs	r3, #1
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f002 ff47 	bl	8004b08 <HAL_SPI_TransmitReceive>

  return data;
 8001c7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <ReadThermoCouple>:

void ReadThermoCouple(ThermoCouple *Th)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	unsigned short data;


	HAL_GPIO_WritePin(Th->Thx_CS_Port, Th->Thx_CS_Pin, GPIO_PIN_RESET);	//Chip Select level low
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6858      	ldr	r0, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	891b      	ldrh	r3, [r3, #8]
 8001c94:	2200      	movs	r2, #0
 8001c96:	4619      	mov	r1, r3
 8001c98:	f001 f9a2 	bl	8002fe0 <HAL_GPIO_WritePin>

	data = SPI_RxByte(Th->hspi);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ffd0 	bl	8001c46 <SPI_RxByte>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	81fb      	strh	r3, [r7, #14]
	data <<= 8;
 8001caa:	89fb      	ldrh	r3, [r7, #14]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	81fb      	strh	r3, [r7, #14]
	data |= SPI_RxByte(Th->hspi);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ffc6 	bl	8001c46 <SPI_RxByte>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	81fb      	strh	r3, [r7, #14]
	//printf("data = %");

	HAL_GPIO_WritePin(Th->Thx_CS_Port, Th->Thx_CS_Pin, GPIO_PIN_SET);	//Chip select level high
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6858      	ldr	r0, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	891b      	ldrh	r3, [r3, #8]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f001 f986 	bl	8002fe0 <HAL_GPIO_WritePin>

	Th->Thx_rawdata = data;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	89fa      	ldrh	r2, [r7, #14]
 8001cd8:	815a      	strh	r2, [r3, #10]

	if (data & 4) Th->connected = FALSE;
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <ReadThermoCouple+0x68>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	741a      	strb	r2, [r3, #16]
 8001cea:	e002      	b.n	8001cf2 <ReadThermoCouple+0x6e>
	else Th->connected = TRUE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	741a      	strb	r2, [r3, #16]

	data  >>= 3;
 8001cf2:	89fb      	ldrh	r3, [r7, #14]
 8001cf4:	08db      	lsrs	r3, r3, #3
 8001cf6:	81fb      	strh	r3, [r7, #14]
	Th->Thx_celcius = data * 0.25;
 8001cf8:	89fb      	ldrh	r3, [r7, #14]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fb82 	bl	8000404 <__aeabi_i2d>
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <ReadThermoCouple+0xa0>)
 8001d06:	f7fe fbe7 	bl	80004d8 <__aeabi_dmul>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe feb9 	bl	8000a88 <__aeabi_d2f>
 8001d16:	4602      	mov	r2, r0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	60da      	str	r2, [r3, #12]

}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	3fd00000 	.word	0x3fd00000

08001d28 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b089      	sub	sp, #36	@ 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	6839      	ldr	r1, [r7, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f836 	bl	8001dbc <MCP4725_setReferenceVoltage>
	//printf("set ref voltage to 3.3\n");

	return _MCP4725;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	461c      	mov	r4, r3
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	3724      	adds	r7, #36	@ 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd90      	pop	{r4, r7, pc}
	...

08001d68 <MCP4725_isConnected>:

    Check the connection
*/
/**************************************************************************/
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	//printf("mcp4725_is connectde ??\n");
	int x = HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, HAL_MAX_DELAY);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	791b      	ldrb	r3, [r3, #4]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f001 fca4 	bl	80036cc <HAL_I2C_IsDeviceReady>
 8001d84:	4603      	mov	r3, r0
 8001d86:	60fb      	str	r3, [r7, #12]
	printf("hal i2c is  device ready == %d\n",x);
 8001d88:	68f9      	ldr	r1, [r7, #12]
 8001d8a:	480b      	ldr	r0, [pc, #44]	@ (8001db8 <MCP4725_isConnected+0x50>)
 8001d8c:	f003 fe4a 	bl	8005a24 <iprintf>

	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	791b      	ldrb	r3, [r3, #4]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	2364      	movs	r3, #100	@ 0x64
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	f001 fc95 	bl	80036cc <HAL_I2C_IsDeviceReady>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	08007ef8 	.word	0x08007ef8

08001dbc <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8001dc6:	f04f 0100 	mov.w	r1, #0
 8001dca:	6838      	ldr	r0, [r7, #0]
 8001dcc:	f7ff f94e 	bl	800106c <__aeabi_fcmpeq>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <MCP4725_setReferenceVoltage+0x22>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001e0c <MCP4725_setReferenceVoltage+0x50>)
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	e002      	b.n	8001de4 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f04f 408b 	mov.w	r0, #1166016512	@ 0x45800000
 8001dee:	f7ff f85d 	bl	8000eac <__aeabi_fdiv>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f991 	bl	800111c <__aeabi_f2uiz>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	819a      	strh	r2, [r3, #12]
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40533333 	.word	0x40533333

08001e10 <MCP4725_setVoltage>:

    Set output voltage to a fraction of Vref
*/
/**************************************************************************/
uint8_t MCP4725_setVoltage(MCP4725* _MCP4725, float voltage, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	460b      	mov	r3, r1
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	4613      	mov	r3, r2
 8001e24:	71bb      	strb	r3, [r7, #6]
  uint16_t value = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	82fb      	strh	r3, [r7, #22]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if      (voltage >= _MCP4725->_refVoltage) value = MCP4725_MAX_VALUE;      					 //make sure value never exceeds threshold
  else if (voltage <= 0)					           value = 0;
  else                            					 value = voltage * _MCP4725->_bitsPerVolt; //xx,xx,xx,xx,D11,D10,D9,D8 ,D7,D6,D4,D3,D2,D9,D1,D0
  #else
  value = voltage * _MCP4725->_bitsPerVolt;                                											 //xx,xx,xx,xx,D11,D10,D9,D8 ,D7,D6,D4,D3,D2,D9,D1,D0
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	899b      	ldrh	r3, [r3, #12]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe ff34 	bl	8000c9c <__aeabi_i2f>
 8001e34:	4603      	mov	r3, r0
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe ff83 	bl	8000d44 <__aeabi_fmul>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f96b 	bl	800111c <__aeabi_f2uiz>
 8001e46:	4603      	mov	r3, r0
 8001e48:	82fb      	strh	r3, [r7, #22]
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8001e4a:	79bb      	ldrb	r3, [r7, #6]
 8001e4c:	79fa      	ldrb	r2, [r7, #7]
 8001e4e:	8af9      	ldrh	r1, [r7, #22]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 f805 	bl	8001e60 <MCP4725_writeComand>
 8001e56:	4603      	mov	r3, r0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	4608      	mov	r0, r1
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	807b      	strh	r3, [r7, #2]
 8001e72:	460b      	mov	r3, r1
 8001e74:	707b      	strb	r3, [r7, #1]
 8001e76:	4613      	mov	r3, r2
 8001e78:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8001e7a:	787b      	ldrb	r3, [r7, #1]
 8001e7c:	2b60      	cmp	r3, #96	@ 0x60
 8001e7e:	d028      	beq.n	8001ed2 <MCP4725_writeComand+0x72>
 8001e80:	2b60      	cmp	r3, #96	@ 0x60
 8001e82:	dc4a      	bgt.n	8001f1a <MCP4725_writeComand+0xba>
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <MCP4725_writeComand+0x2e>
 8001e88:	2b40      	cmp	r3, #64	@ 0x40
 8001e8a:	d022      	beq.n	8001ed2 <MCP4725_writeComand+0x72>
 8001e8c:	e045      	b.n	8001f1a <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18

      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8001e8e:	783b      	ldrb	r3, [r7, #0]
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	b25a      	sxtb	r2, r3
 8001e94:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	b25a      	sxtb	r2, r3
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	b25b      	sxtb	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8001eac:	887b      	ldrh	r3, [r7, #2]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	737b      	strb	r3, [r7, #13]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	791b      	ldrb	r3, [r3, #4]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f107 020c 	add.w	r2, r7, #12
 8001ec0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	f001 fa08 	bl	80032dc <HAL_I2C_Master_Transmit>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	73fb      	strb	r3, [r7, #15]

      break;
 8001ed0:	e023      	b.n	8001f1a <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode  | (powerType << 1);
 8001ed8:	783b      	ldrb	r3, [r7, #0]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	b25a      	sxtb	r2, r3
 8001ede:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 8001ef4:	887b      	ldrh	r3, [r7, #2]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	73bb      	strb	r3, [r7, #14]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	791b      	ldrb	r3, [r3, #4]
 8001f02:	4619      	mov	r1, r3
 8001f04:	f107 020c 	add.w	r2, r7, #12
 8001f08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2303      	movs	r3, #3
 8001f10:	f001 f9e4 	bl	80032dc <HAL_I2C_Master_Transmit>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]

			break;
 8001f18:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MCP4725_writeComand+0xc4>
 8001f20:	2300      	movs	r3, #0
 8001f22:	e000      	b.n	8001f26 <MCP4725_writeComand+0xc6>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
  }
*/  //LATER ON EEEPRROM
  return 1;                                                         //success!!!
 8001f24:	2301      	movs	r3, #1
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
	...

08001f3c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af04      	add	r7, sp, #16
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	9302      	str	r3, [sp, #8]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2301      	movs	r3, #1
 8001f56:	2200      	movs	r2, #0
 8001f58:	2178      	movs	r1, #120	@ 0x78
 8001f5a:	4803      	ldr	r0, [pc, #12]	@ (8001f68 <ssd1306_WriteCommand+0x2c>)
 8001f5c:	f001 fabc 	bl	80034d8 <HAL_I2C_Mem_Write>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000220 	.word	0x20000220

08001f6c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af04      	add	r7, sp, #16
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7e:	9202      	str	r2, [sp, #8]
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2301      	movs	r3, #1
 8001f88:	2240      	movs	r2, #64	@ 0x40
 8001f8a:	2178      	movs	r1, #120	@ 0x78
 8001f8c:	4803      	ldr	r0, [pc, #12]	@ (8001f9c <ssd1306_WriteData+0x30>)
 8001f8e:	f001 faa3 	bl	80034d8 <HAL_I2C_Mem_Write>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000220 	.word	0x20000220

08001fa0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001fa4:	f7ff ffc3 	bl	8001f2e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001fa8:	2064      	movs	r0, #100	@ 0x64
 8001faa:	f000 f937 	bl	800221c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f000 f8b4 	bl	800211c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001fb4:	2020      	movs	r0, #32
 8001fb6:	f7ff ffc1 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff ffbe 	bl	8001f3c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001fc0:	20b0      	movs	r0, #176	@ 0xb0
 8001fc2:	f7ff ffbb 	bl	8001f3c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001fc6:	20c8      	movs	r0, #200	@ 0xc8
 8001fc8:	f7ff ffb8 	bl	8001f3c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff ffb5 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001fd2:	2010      	movs	r0, #16
 8001fd4:	f7ff ffb2 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001fd8:	2040      	movs	r0, #64	@ 0x40
 8001fda:	f7ff ffaf 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001fde:	20ff      	movs	r0, #255	@ 0xff
 8001fe0:	f000 f888 	bl	80020f4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001fe4:	20a1      	movs	r0, #161	@ 0xa1
 8001fe6:	f7ff ffa9 	bl	8001f3c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001fea:	20a6      	movs	r0, #166	@ 0xa6
 8001fec:	f7ff ffa6 	bl	8001f3c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ff0:	20a8      	movs	r0, #168	@ 0xa8
 8001ff2:	f7ff ffa3 	bl	8001f3c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001ff6:	203f      	movs	r0, #63	@ 0x3f
 8001ff8:	f7ff ffa0 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ffc:	20a4      	movs	r0, #164	@ 0xa4
 8001ffe:	f7ff ff9d 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002002:	20d3      	movs	r0, #211	@ 0xd3
 8002004:	f7ff ff9a 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff ff97 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800200e:	20d5      	movs	r0, #213	@ 0xd5
 8002010:	f7ff ff94 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002014:	20f0      	movs	r0, #240	@ 0xf0
 8002016:	f7ff ff91 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800201a:	20d9      	movs	r0, #217	@ 0xd9
 800201c:	f7ff ff8e 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002020:	2022      	movs	r0, #34	@ 0x22
 8002022:	f7ff ff8b 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002026:	20da      	movs	r0, #218	@ 0xda
 8002028:	f7ff ff88 	bl	8001f3c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800202c:	2012      	movs	r0, #18
 800202e:	f7ff ff85 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002032:	20db      	movs	r0, #219	@ 0xdb
 8002034:	f7ff ff82 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002038:	2020      	movs	r0, #32
 800203a:	f7ff ff7f 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800203e:	208d      	movs	r0, #141	@ 0x8d
 8002040:	f7ff ff7c 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002044:	2014      	movs	r0, #20
 8002046:	f7ff ff79 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800204a:	2001      	movs	r0, #1
 800204c:	f000 f866 	bl	800211c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002050:	2000      	movs	r0, #0
 8002052:	f000 f80f 	bl	8002074 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002056:	f000 f825 	bl	80020a4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800205a:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <ssd1306_Init+0xd0>)
 800205c:	2200      	movs	r2, #0
 800205e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002060:	4b03      	ldr	r3, [pc, #12]	@ (8002070 <ssd1306_Init+0xd0>)
 8002062:	2200      	movs	r2, #0
 8002064:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002066:	4b02      	ldr	r3, [pc, #8]	@ (8002070 <ssd1306_Init+0xd0>)
 8002068:	2201      	movs	r2, #1
 800206a:	711a      	strb	r2, [r3, #4]
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000748 	.word	0x20000748

08002074 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <ssd1306_Fill+0x14>
 8002084:	2300      	movs	r3, #0
 8002086:	e000      	b.n	800208a <ssd1306_Fill+0x16>
 8002088:	23ff      	movs	r3, #255	@ 0xff
 800208a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800208e:	4619      	mov	r1, r3
 8002090:	4803      	ldr	r0, [pc, #12]	@ (80020a0 <ssd1306_Fill+0x2c>)
 8002092:	f003 fe43 	bl	8005d1c <memset>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000348 	.word	0x20000348

080020a4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020aa:	2300      	movs	r3, #0
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	e016      	b.n	80020de <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	3b50      	subs	r3, #80	@ 0x50
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff40 	bl	8001f3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80020bc:	2000      	movs	r0, #0
 80020be:	f7ff ff3d 	bl	8001f3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80020c2:	2010      	movs	r0, #16
 80020c4:	f7ff ff3a 	bl	8001f3c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	01db      	lsls	r3, r3, #7
 80020cc:	4a08      	ldr	r2, [pc, #32]	@ (80020f0 <ssd1306_UpdateScreen+0x4c>)
 80020ce:	4413      	add	r3, r2
 80020d0:	2180      	movs	r1, #128	@ 0x80
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff4a 	bl	8001f6c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	3301      	adds	r3, #1
 80020dc:	71fb      	strb	r3, [r7, #7]
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b07      	cmp	r3, #7
 80020e2:	d9e5      	bls.n	80020b0 <ssd1306_UpdateScreen+0xc>
    }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000348 	.word	0x20000348

080020f4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80020fe:	2381      	movs	r3, #129	@ 0x81
 8002100:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff19 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff15 	bl	8001f3c <ssd1306_WriteCommand>
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800212c:	23af      	movs	r3, #175	@ 0xaf
 800212e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <ssd1306_SetDisplayOn+0x38>)
 8002132:	2201      	movs	r2, #1
 8002134:	715a      	strb	r2, [r3, #5]
 8002136:	e004      	b.n	8002142 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002138:	23ae      	movs	r3, #174	@ 0xae
 800213a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <ssd1306_SetDisplayOn+0x38>)
 800213e:	2200      	movs	r2, #0
 8002140:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fef9 	bl	8001f3c <ssd1306_WriteCommand>
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000748 	.word	0x20000748

08002158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800215c:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <HAL_Init+0x28>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a07      	ldr	r2, [pc, #28]	@ (8002180 <HAL_Init+0x28>)
 8002162:	f043 0310 	orr.w	r3, r3, #16
 8002166:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002168:	2003      	movs	r0, #3
 800216a:	f000 fd73 	bl	8002c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216e:	2000      	movs	r0, #0
 8002170:	f000 f808 	bl	8002184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002174:	f7ff faea 	bl	800174c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40022000 	.word	0x40022000

08002184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_InitTick+0x54>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HAL_InitTick+0x58>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800219a:	fbb3 f3f1 	udiv	r3, r3, r1
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fd8b 	bl	8002cbe <HAL_SYSTICK_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00e      	b.n	80021d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0f      	cmp	r3, #15
 80021b6:	d80a      	bhi.n	80021ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b8:	2200      	movs	r2, #0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f000 fd53 	bl	8002c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c4:	4a06      	ldr	r2, [pc, #24]	@ (80021e0 <HAL_InitTick+0x5c>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000000 	.word	0x20000000
 80021dc:	20000008 	.word	0x20000008
 80021e0:	20000004 	.word	0x20000004

080021e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_IncTick+0x1c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <HAL_IncTick+0x20>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a03      	ldr	r2, [pc, #12]	@ (8002204 <HAL_IncTick+0x20>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	20000008 	.word	0x20000008
 8002204:	20000750 	.word	0x20000750

08002208 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b02      	ldr	r3, [pc, #8]	@ (8002218 <HAL_GetTick+0x10>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	20000750 	.word	0x20000750

0800221c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff fff0 	bl	8002208 <HAL_GetTick>
 8002228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d005      	beq.n	8002242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_Delay+0x44>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002242:	bf00      	nop
 8002244:	f7ff ffe0 	bl	8002208 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d8f7      	bhi.n	8002244 <HAL_Delay+0x28>
  {
  }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000008 	.word	0x20000008

08002264 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0be      	b.n	8002404 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff fa84 	bl	80017b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 fbc5 	bl	8002a38 <ADC_ConversionStop_Disable>
 80022ae:	4603      	mov	r3, r0
 80022b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f040 8099 	bne.w	80023f2 <HAL_ADC_Init+0x18e>
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 8095 	bne.w	80023f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022d0:	f023 0302 	bic.w	r3, r3, #2
 80022d4:	f043 0202 	orr.w	r2, r3, #2
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7b1b      	ldrb	r3, [r3, #12]
 80022ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022fc:	d003      	beq.n	8002306 <HAL_ADC_Init+0xa2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d102      	bne.n	800230c <HAL_ADC_Init+0xa8>
 8002306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800230a:	e000      	b.n	800230e <HAL_ADC_Init+0xaa>
 800230c:	2300      	movs	r3, #0
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7d1b      	ldrb	r3, [r3, #20]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d119      	bne.n	8002350 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7b1b      	ldrb	r3, [r3, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	3b01      	subs	r3, #1
 800232a:	035a      	lsls	r2, r3, #13
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	e00b      	b.n	8002350 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002348:	f043 0201 	orr.w	r2, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	430a      	orrs	r2, r1
 8002362:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	4b28      	ldr	r3, [pc, #160]	@ (800240c <HAL_ADC_Init+0x1a8>)
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	430b      	orrs	r3, r1
 8002376:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002380:	d003      	beq.n	800238a <HAL_ADC_Init+0x126>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d104      	bne.n	8002394 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	3b01      	subs	r3, #1
 8002390:	051b      	lsls	r3, r3, #20
 8002392:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <HAL_ADC_Init+0x1ac>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d10b      	bne.n	80023d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023ce:	e018      	b.n	8002402 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	f023 0312 	bic.w	r3, r3, #18
 80023d8:	f043 0210 	orr.w	r2, r3, #16
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e4:	f043 0201 	orr.w	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023f0:	e007      	b.n	8002402 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f6:	f043 0210 	orr.w	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002402:	7dfb      	ldrb	r3, [r7, #23]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	ffe1f7fd 	.word	0xffe1f7fd
 8002410:	ff1f0efe 	.word	0xff1f0efe

08002414 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_ADC_Start+0x1a>
 800242a:	2302      	movs	r3, #2
 800242c:	e098      	b.n	8002560 <HAL_ADC_Start+0x14c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 faa4 	bl	8002984 <ADC_Enable>
 800243c:	4603      	mov	r3, r0
 800243e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 8087 	bne.w	8002556 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a41      	ldr	r2, [pc, #260]	@ (8002568 <HAL_ADC_Start+0x154>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d105      	bne.n	8002472 <HAL_ADC_Start+0x5e>
 8002466:	4b41      	ldr	r3, [pc, #260]	@ (800256c <HAL_ADC_Start+0x158>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d115      	bne.n	800249e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002476:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002488:	2b00      	cmp	r3, #0
 800248a:	d026      	beq.n	80024da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002490:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002494:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800249c:	e01d      	b.n	80024da <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2f      	ldr	r2, [pc, #188]	@ (800256c <HAL_ADC_Start+0x158>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d004      	beq.n	80024be <HAL_ADC_Start+0xaa>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002568 <HAL_ADC_Start+0x154>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10d      	bne.n	80024da <HAL_ADC_Start+0xc6>
 80024be:	4b2b      	ldr	r3, [pc, #172]	@ (800256c <HAL_ADC_Start+0x158>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ea:	f023 0206 	bic.w	r2, r3, #6
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024f2:	e002      	b.n	80024fa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f06f 0202 	mvn.w	r2, #2
 800250a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002516:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800251a:	d113      	bne.n	8002544 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002520:	4a11      	ldr	r2, [pc, #68]	@ (8002568 <HAL_ADC_Start+0x154>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d105      	bne.n	8002532 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002526:	4b11      	ldr	r3, [pc, #68]	@ (800256c <HAL_ADC_Start+0x158>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800252e:	2b00      	cmp	r3, #0
 8002530:	d108      	bne.n	8002544 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	e00c      	b.n	800255e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	e003      	b.n	800255e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40012800 	.word	0x40012800
 800256c:	40012400 	.word	0x40012400

08002570 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002586:	f7ff fe3f 	bl	8002208 <HAL_GetTick>
 800258a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259e:	f043 0220 	orr.w	r2, r3, #32
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0d3      	b.n	800275a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d131      	bne.n	8002624 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d12a      	bne.n	8002624 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025ce:	e021      	b.n	8002614 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d6:	d01d      	beq.n	8002614 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_ADC_PollForConversion+0x7e>
 80025de:	f7ff fe13 	bl	8002208 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d212      	bcs.n	8002614 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002600:	f043 0204 	orr.w	r2, r3, #4
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0a2      	b.n	800275a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0d6      	beq.n	80025d0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002622:	e070      	b.n	8002706 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002624:	4b4f      	ldr	r3, [pc, #316]	@ (8002764 <HAL_ADC_PollForConversion+0x1f4>)
 8002626:	681c      	ldr	r4, [r3, #0]
 8002628:	2002      	movs	r0, #2
 800262a:	f002 f933 	bl	8004894 <HAL_RCCEx_GetPeriphCLKFreq>
 800262e:	4603      	mov	r3, r0
 8002630:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6919      	ldr	r1, [r3, #16]
 800263a:	4b4b      	ldr	r3, [pc, #300]	@ (8002768 <HAL_ADC_PollForConversion+0x1f8>)
 800263c:	400b      	ands	r3, r1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d118      	bne.n	8002674 <HAL_ADC_PollForConversion+0x104>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68d9      	ldr	r1, [r3, #12]
 8002648:	4b48      	ldr	r3, [pc, #288]	@ (800276c <HAL_ADC_PollForConversion+0x1fc>)
 800264a:	400b      	ands	r3, r1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d111      	bne.n	8002674 <HAL_ADC_PollForConversion+0x104>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6919      	ldr	r1, [r3, #16]
 8002656:	4b46      	ldr	r3, [pc, #280]	@ (8002770 <HAL_ADC_PollForConversion+0x200>)
 8002658:	400b      	ands	r3, r1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d108      	bne.n	8002670 <HAL_ADC_PollForConversion+0x100>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68d9      	ldr	r1, [r3, #12]
 8002664:	4b43      	ldr	r3, [pc, #268]	@ (8002774 <HAL_ADC_PollForConversion+0x204>)
 8002666:	400b      	ands	r3, r1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_ADC_PollForConversion+0x100>
 800266c:	2314      	movs	r3, #20
 800266e:	e020      	b.n	80026b2 <HAL_ADC_PollForConversion+0x142>
 8002670:	2329      	movs	r3, #41	@ 0x29
 8002672:	e01e      	b.n	80026b2 <HAL_ADC_PollForConversion+0x142>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6919      	ldr	r1, [r3, #16]
 800267a:	4b3d      	ldr	r3, [pc, #244]	@ (8002770 <HAL_ADC_PollForConversion+0x200>)
 800267c:	400b      	ands	r3, r1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_ADC_PollForConversion+0x120>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68d9      	ldr	r1, [r3, #12]
 8002688:	4b3a      	ldr	r3, [pc, #232]	@ (8002774 <HAL_ADC_PollForConversion+0x204>)
 800268a:	400b      	ands	r3, r1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00d      	beq.n	80026ac <HAL_ADC_PollForConversion+0x13c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6919      	ldr	r1, [r3, #16]
 8002696:	4b38      	ldr	r3, [pc, #224]	@ (8002778 <HAL_ADC_PollForConversion+0x208>)
 8002698:	400b      	ands	r3, r1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d108      	bne.n	80026b0 <HAL_ADC_PollForConversion+0x140>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68d9      	ldr	r1, [r3, #12]
 80026a4:	4b34      	ldr	r3, [pc, #208]	@ (8002778 <HAL_ADC_PollForConversion+0x208>)
 80026a6:	400b      	ands	r3, r1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_PollForConversion+0x140>
 80026ac:	2354      	movs	r3, #84	@ 0x54
 80026ae:	e000      	b.n	80026b2 <HAL_ADC_PollForConversion+0x142>
 80026b0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026b8:	e021      	b.n	80026fe <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d01a      	beq.n	80026f8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_ADC_PollForConversion+0x168>
 80026c8:	f7ff fd9e 	bl	8002208 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d20f      	bcs.n	80026f8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d90b      	bls.n	80026f8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	f043 0204 	orr.w	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e030      	b.n	800275a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3301      	adds	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	429a      	cmp	r2, r3
 8002704:	d8d9      	bhi.n	80026ba <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f06f 0212 	mvn.w	r2, #18
 800270e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002714:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002726:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800272a:	d115      	bne.n	8002758 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002730:	2b00      	cmp	r3, #0
 8002732:	d111      	bne.n	8002758 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002738:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd90      	pop	{r4, r7, pc}
 8002762:	bf00      	nop
 8002764:	20000000 	.word	0x20000000
 8002768:	24924924 	.word	0x24924924
 800276c:	00924924 	.word	0x00924924
 8002770:	12492492 	.word	0x12492492
 8002774:	00492492 	.word	0x00492492
 8002778:	00249249 	.word	0x00249249

0800277c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x20>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e0dc      	b.n	800296e <HAL_ADC_ConfigChannel+0x1da>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b06      	cmp	r3, #6
 80027c2:	d81c      	bhi.n	80027fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3b05      	subs	r3, #5
 80027d6:	221f      	movs	r2, #31
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	4019      	ands	r1, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	3b05      	subs	r3, #5
 80027f0:	fa00 f203 	lsl.w	r2, r0, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80027fc:	e03c      	b.n	8002878 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b0c      	cmp	r3, #12
 8002804:	d81c      	bhi.n	8002840 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	3b23      	subs	r3, #35	@ 0x23
 8002818:	221f      	movs	r2, #31
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	4019      	ands	r1, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	3b23      	subs	r3, #35	@ 0x23
 8002832:	fa00 f203 	lsl.w	r2, r0, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	631a      	str	r2, [r3, #48]	@ 0x30
 800283e:	e01b      	b.n	8002878 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	3b41      	subs	r3, #65	@ 0x41
 8002852:	221f      	movs	r2, #31
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	4019      	ands	r1, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	3b41      	subs	r3, #65	@ 0x41
 800286c:	fa00 f203 	lsl.w	r2, r0, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b09      	cmp	r3, #9
 800287e:	d91c      	bls.n	80028ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68d9      	ldr	r1, [r3, #12]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	3b1e      	subs	r3, #30
 8002892:	2207      	movs	r2, #7
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	4019      	ands	r1, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6898      	ldr	r0, [r3, #8]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	3b1e      	subs	r3, #30
 80028ac:	fa00 f203 	lsl.w	r2, r0, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	e019      	b.n	80028ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6919      	ldr	r1, [r3, #16]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	2207      	movs	r2, #7
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	4019      	ands	r1, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6898      	ldr	r0, [r3, #8]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	fa00 f203 	lsl.w	r2, r0, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d003      	beq.n	80028fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028fa:	2b11      	cmp	r3, #17
 80028fc:	d132      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1d      	ldr	r2, [pc, #116]	@ (8002978 <HAL_ADC_ConfigChannel+0x1e4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d125      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d126      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002924:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b10      	cmp	r3, #16
 800292c:	d11a      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800292e:	4b13      	ldr	r3, [pc, #76]	@ (800297c <HAL_ADC_ConfigChannel+0x1e8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a13      	ldr	r2, [pc, #76]	@ (8002980 <HAL_ADC_ConfigChannel+0x1ec>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	0c9a      	lsrs	r2, r3, #18
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002944:	e002      	b.n	800294c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	3b01      	subs	r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f9      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x1b2>
 8002952:	e007      	b.n	8002964 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002958:	f043 0220 	orr.w	r2, r3, #32
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40012400 	.word	0x40012400
 800297c:	20000000 	.word	0x20000000
 8002980:	431bde83 	.word	0x431bde83

08002984 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d040      	beq.n	8002a24 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a30 <ADC_Enable+0xac>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a34 <ADC_Enable+0xb0>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	0c9b      	lsrs	r3, r3, #18
 80029be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029c0:	e002      	b.n	80029c8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f9      	bne.n	80029c2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029ce:	f7ff fc1b 	bl	8002208 <HAL_GetTick>
 80029d2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029d4:	e01f      	b.n	8002a16 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029d6:	f7ff fc17 	bl	8002208 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d918      	bls.n	8002a16 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d011      	beq.n	8002a16 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f6:	f043 0210 	orr.w	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e007      	b.n	8002a26 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d1d8      	bne.n	80029d6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000000 	.word	0x20000000
 8002a34:	431bde83 	.word	0x431bde83

08002a38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d12e      	bne.n	8002ab0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0201 	bic.w	r2, r2, #1
 8002a60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a62:	f7ff fbd1 	bl	8002208 <HAL_GetTick>
 8002a66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a68:	e01b      	b.n	8002aa2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a6a:	f7ff fbcd 	bl	8002208 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d914      	bls.n	8002aa2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d10d      	bne.n	8002aa2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8a:	f043 0210 	orr.w	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	f043 0201 	orr.w	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e007      	b.n	8002ab2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d0dc      	beq.n	8002a6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002acc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aee:	4a04      	ldr	r2, [pc, #16]	@ (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	60d3      	str	r3, [r2, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b08:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <__NVIC_GetPriorityGrouping+0x18>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	f003 0307 	and.w	r3, r3, #7
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	db0b      	blt.n	8002b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	4906      	ldr	r1, [pc, #24]	@ (8002b54 <__NVIC_EnableIRQ+0x34>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2001      	movs	r0, #1
 8002b42:	fa00 f202 	lsl.w	r2, r0, r2
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	@ (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	@ (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	@ 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	@ 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c20:	d301      	bcc.n	8002c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00f      	b.n	8002c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c26:	4a0a      	ldr	r2, [pc, #40]	@ (8002c50 <SysTick_Config+0x40>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2e:	210f      	movs	r1, #15
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295
 8002c34:	f7ff ff90 	bl	8002b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <SysTick_Config+0x40>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3e:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <SysTick_Config+0x40>)
 8002c40:	2207      	movs	r2, #7
 8002c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	e000e010 	.word	0xe000e010

08002c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ff2d 	bl	8002abc <__NVIC_SetPriorityGrouping>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c7c:	f7ff ff42 	bl	8002b04 <__NVIC_GetPriorityGrouping>
 8002c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f7ff ff90 	bl	8002bac <NVIC_EncodePriority>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff5f 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff35 	bl	8002b20 <__NVIC_EnableIRQ>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ffa2 	bl	8002c10 <SysTick_Config>
 8002ccc:	4603      	mov	r3, r0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b08b      	sub	sp, #44	@ 0x2c
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cea:	e169      	b.n	8002fc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cec:	2201      	movs	r2, #1
 8002cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	f040 8158 	bne.w	8002fba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4a9a      	ldr	r2, [pc, #616]	@ (8002f78 <HAL_GPIO_Init+0x2a0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d05e      	beq.n	8002dd2 <HAL_GPIO_Init+0xfa>
 8002d14:	4a98      	ldr	r2, [pc, #608]	@ (8002f78 <HAL_GPIO_Init+0x2a0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d875      	bhi.n	8002e06 <HAL_GPIO_Init+0x12e>
 8002d1a:	4a98      	ldr	r2, [pc, #608]	@ (8002f7c <HAL_GPIO_Init+0x2a4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d058      	beq.n	8002dd2 <HAL_GPIO_Init+0xfa>
 8002d20:	4a96      	ldr	r2, [pc, #600]	@ (8002f7c <HAL_GPIO_Init+0x2a4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d86f      	bhi.n	8002e06 <HAL_GPIO_Init+0x12e>
 8002d26:	4a96      	ldr	r2, [pc, #600]	@ (8002f80 <HAL_GPIO_Init+0x2a8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d052      	beq.n	8002dd2 <HAL_GPIO_Init+0xfa>
 8002d2c:	4a94      	ldr	r2, [pc, #592]	@ (8002f80 <HAL_GPIO_Init+0x2a8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d869      	bhi.n	8002e06 <HAL_GPIO_Init+0x12e>
 8002d32:	4a94      	ldr	r2, [pc, #592]	@ (8002f84 <HAL_GPIO_Init+0x2ac>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d04c      	beq.n	8002dd2 <HAL_GPIO_Init+0xfa>
 8002d38:	4a92      	ldr	r2, [pc, #584]	@ (8002f84 <HAL_GPIO_Init+0x2ac>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d863      	bhi.n	8002e06 <HAL_GPIO_Init+0x12e>
 8002d3e:	4a92      	ldr	r2, [pc, #584]	@ (8002f88 <HAL_GPIO_Init+0x2b0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d046      	beq.n	8002dd2 <HAL_GPIO_Init+0xfa>
 8002d44:	4a90      	ldr	r2, [pc, #576]	@ (8002f88 <HAL_GPIO_Init+0x2b0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d85d      	bhi.n	8002e06 <HAL_GPIO_Init+0x12e>
 8002d4a:	2b12      	cmp	r3, #18
 8002d4c:	d82a      	bhi.n	8002da4 <HAL_GPIO_Init+0xcc>
 8002d4e:	2b12      	cmp	r3, #18
 8002d50:	d859      	bhi.n	8002e06 <HAL_GPIO_Init+0x12e>
 8002d52:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <HAL_GPIO_Init+0x80>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002dd3 	.word	0x08002dd3
 8002d5c:	08002dad 	.word	0x08002dad
 8002d60:	08002dbf 	.word	0x08002dbf
 8002d64:	08002e01 	.word	0x08002e01
 8002d68:	08002e07 	.word	0x08002e07
 8002d6c:	08002e07 	.word	0x08002e07
 8002d70:	08002e07 	.word	0x08002e07
 8002d74:	08002e07 	.word	0x08002e07
 8002d78:	08002e07 	.word	0x08002e07
 8002d7c:	08002e07 	.word	0x08002e07
 8002d80:	08002e07 	.word	0x08002e07
 8002d84:	08002e07 	.word	0x08002e07
 8002d88:	08002e07 	.word	0x08002e07
 8002d8c:	08002e07 	.word	0x08002e07
 8002d90:	08002e07 	.word	0x08002e07
 8002d94:	08002e07 	.word	0x08002e07
 8002d98:	08002e07 	.word	0x08002e07
 8002d9c:	08002db5 	.word	0x08002db5
 8002da0:	08002dc9 	.word	0x08002dc9
 8002da4:	4a79      	ldr	r2, [pc, #484]	@ (8002f8c <HAL_GPIO_Init+0x2b4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002daa:	e02c      	b.n	8002e06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	623b      	str	r3, [r7, #32]
          break;
 8002db2:	e029      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	3304      	adds	r3, #4
 8002dba:	623b      	str	r3, [r7, #32]
          break;
 8002dbc:	e024      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	623b      	str	r3, [r7, #32]
          break;
 8002dc6:	e01f      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	330c      	adds	r3, #12
 8002dce:	623b      	str	r3, [r7, #32]
          break;
 8002dd0:	e01a      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dda:	2304      	movs	r3, #4
 8002ddc:	623b      	str	r3, [r7, #32]
          break;
 8002dde:	e013      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002de8:	2308      	movs	r3, #8
 8002dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	611a      	str	r2, [r3, #16]
          break;
 8002df2:	e009      	b.n	8002e08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002df4:	2308      	movs	r3, #8
 8002df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	615a      	str	r2, [r3, #20]
          break;
 8002dfe:	e003      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e00:	2300      	movs	r3, #0
 8002e02:	623b      	str	r3, [r7, #32]
          break;
 8002e04:	e000      	b.n	8002e08 <HAL_GPIO_Init+0x130>
          break;
 8002e06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2bff      	cmp	r3, #255	@ 0xff
 8002e0c:	d801      	bhi.n	8002e12 <HAL_GPIO_Init+0x13a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	e001      	b.n	8002e16 <HAL_GPIO_Init+0x13e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3304      	adds	r3, #4
 8002e16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2bff      	cmp	r3, #255	@ 0xff
 8002e1c:	d802      	bhi.n	8002e24 <HAL_GPIO_Init+0x14c>
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	e002      	b.n	8002e2a <HAL_GPIO_Init+0x152>
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	3b08      	subs	r3, #8
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	210f      	movs	r1, #15
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	6a39      	ldr	r1, [r7, #32]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	431a      	orrs	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80b1 	beq.w	8002fba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e58:	4b4d      	ldr	r3, [pc, #308]	@ (8002f90 <HAL_GPIO_Init+0x2b8>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002f90 <HAL_GPIO_Init+0x2b8>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6193      	str	r3, [r2, #24]
 8002e64:	4b4a      	ldr	r3, [pc, #296]	@ (8002f90 <HAL_GPIO_Init+0x2b8>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e70:	4a48      	ldr	r2, [pc, #288]	@ (8002f94 <HAL_GPIO_Init+0x2bc>)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	089b      	lsrs	r3, r3, #2
 8002e76:	3302      	adds	r3, #2
 8002e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4013      	ands	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a40      	ldr	r2, [pc, #256]	@ (8002f98 <HAL_GPIO_Init+0x2c0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d013      	beq.n	8002ec4 <HAL_GPIO_Init+0x1ec>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f9c <HAL_GPIO_Init+0x2c4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00d      	beq.n	8002ec0 <HAL_GPIO_Init+0x1e8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a3e      	ldr	r2, [pc, #248]	@ (8002fa0 <HAL_GPIO_Init+0x2c8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d007      	beq.n	8002ebc <HAL_GPIO_Init+0x1e4>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a3d      	ldr	r2, [pc, #244]	@ (8002fa4 <HAL_GPIO_Init+0x2cc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d101      	bne.n	8002eb8 <HAL_GPIO_Init+0x1e0>
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e006      	b.n	8002ec6 <HAL_GPIO_Init+0x1ee>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	e004      	b.n	8002ec6 <HAL_GPIO_Init+0x1ee>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e002      	b.n	8002ec6 <HAL_GPIO_Init+0x1ee>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <HAL_GPIO_Init+0x1ee>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec8:	f002 0203 	and.w	r2, r2, #3
 8002ecc:	0092      	lsls	r2, r2, #2
 8002ece:	4093      	lsls	r3, r2
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ed6:	492f      	ldr	r1, [pc, #188]	@ (8002f94 <HAL_GPIO_Init+0x2bc>)
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	3302      	adds	r3, #2
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d006      	beq.n	8002efe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	492c      	ldr	r1, [pc, #176]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	608b      	str	r3, [r1, #8]
 8002efc:	e006      	b.n	8002f0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002efe:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	4928      	ldr	r1, [pc, #160]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d006      	beq.n	8002f26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f18:	4b23      	ldr	r3, [pc, #140]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	4922      	ldr	r1, [pc, #136]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60cb      	str	r3, [r1, #12]
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f26:	4b20      	ldr	r3, [pc, #128]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	491e      	ldr	r1, [pc, #120]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f40:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4918      	ldr	r1, [pc, #96]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]
 8002f4c:	e006      	b.n	8002f5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f4e:	4b16      	ldr	r3, [pc, #88]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	4914      	ldr	r1, [pc, #80]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d021      	beq.n	8002fac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f68:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	490e      	ldr	r1, [pc, #56]	@ (8002fa8 <HAL_GPIO_Init+0x2d0>)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]
 8002f74:	e021      	b.n	8002fba <HAL_GPIO_Init+0x2e2>
 8002f76:	bf00      	nop
 8002f78:	10320000 	.word	0x10320000
 8002f7c:	10310000 	.word	0x10310000
 8002f80:	10220000 	.word	0x10220000
 8002f84:	10210000 	.word	0x10210000
 8002f88:	10120000 	.word	0x10120000
 8002f8c:	10110000 	.word	0x10110000
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40010000 	.word	0x40010000
 8002f98:	40010800 	.word	0x40010800
 8002f9c:	40010c00 	.word	0x40010c00
 8002fa0:	40011000 	.word	0x40011000
 8002fa4:	40011400 	.word	0x40011400
 8002fa8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <HAL_GPIO_Init+0x304>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	4909      	ldr	r1, [pc, #36]	@ (8002fdc <HAL_GPIO_Init+0x304>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f47f ae8e 	bne.w	8002cec <HAL_GPIO_Init+0x14>
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	372c      	adds	r7, #44	@ 0x2c
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
 8002fec:	4613      	mov	r3, r2
 8002fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ff0:	787b      	ldrb	r3, [r7, #1]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ffc:	e003      	b.n	8003006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	041a      	lsls	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	611a      	str	r2, [r3, #16]
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800301a:	4b08      	ldr	r3, [pc, #32]	@ (800303c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d006      	beq.n	8003034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003026:	4a05      	ldr	r2, [pc, #20]	@ (800303c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 f806 	bl	8003040 <HAL_GPIO_EXTI_Callback>
  }
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40010400 	.word	0x40010400

08003040 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e12b      	b.n	80032be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe fbd4 	bl	8001828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2224      	movs	r2, #36	@ 0x24
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030b8:	f001 faf0 	bl	800469c <HAL_RCC_GetPCLK1Freq>
 80030bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	4a81      	ldr	r2, [pc, #516]	@ (80032c8 <HAL_I2C_Init+0x274>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d807      	bhi.n	80030d8 <HAL_I2C_Init+0x84>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a80      	ldr	r2, [pc, #512]	@ (80032cc <HAL_I2C_Init+0x278>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	bf94      	ite	ls
 80030d0:	2301      	movls	r3, #1
 80030d2:	2300      	movhi	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	e006      	b.n	80030e6 <HAL_I2C_Init+0x92>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4a7d      	ldr	r2, [pc, #500]	@ (80032d0 <HAL_I2C_Init+0x27c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	bf94      	ite	ls
 80030e0:	2301      	movls	r3, #1
 80030e2:	2300      	movhi	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0e7      	b.n	80032be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a78      	ldr	r2, [pc, #480]	@ (80032d4 <HAL_I2C_Init+0x280>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	0c9b      	lsrs	r3, r3, #18
 80030f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a6a      	ldr	r2, [pc, #424]	@ (80032c8 <HAL_I2C_Init+0x274>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d802      	bhi.n	8003128 <HAL_I2C_Init+0xd4>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	3301      	adds	r3, #1
 8003126:	e009      	b.n	800313c <HAL_I2C_Init+0xe8>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800312e:	fb02 f303 	mul.w	r3, r2, r3
 8003132:	4a69      	ldr	r2, [pc, #420]	@ (80032d8 <HAL_I2C_Init+0x284>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	099b      	lsrs	r3, r3, #6
 800313a:	3301      	adds	r3, #1
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	430b      	orrs	r3, r1
 8003142:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800314e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	495c      	ldr	r1, [pc, #368]	@ (80032c8 <HAL_I2C_Init+0x274>)
 8003158:	428b      	cmp	r3, r1
 800315a:	d819      	bhi.n	8003190 <HAL_I2C_Init+0x13c>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1e59      	subs	r1, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	fbb1 f3f3 	udiv	r3, r1, r3
 800316a:	1c59      	adds	r1, r3, #1
 800316c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003170:	400b      	ands	r3, r1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_I2C_Init+0x138>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1e59      	subs	r1, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fbb1 f3f3 	udiv	r3, r1, r3
 8003184:	3301      	adds	r3, #1
 8003186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318a:	e051      	b.n	8003230 <HAL_I2C_Init+0x1dc>
 800318c:	2304      	movs	r3, #4
 800318e:	e04f      	b.n	8003230 <HAL_I2C_Init+0x1dc>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d111      	bne.n	80031bc <HAL_I2C_Init+0x168>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1e58      	subs	r0, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	440b      	add	r3, r1
 80031a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031aa:	3301      	adds	r3, #1
 80031ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	e012      	b.n	80031e2 <HAL_I2C_Init+0x18e>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1e58      	subs	r0, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	0099      	lsls	r1, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Init+0x196>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e022      	b.n	8003230 <HAL_I2C_Init+0x1dc>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10e      	bne.n	8003210 <HAL_I2C_Init+0x1bc>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1e58      	subs	r0, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6859      	ldr	r1, [r3, #4]
 80031fa:	460b      	mov	r3, r1
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	440b      	add	r3, r1
 8003200:	fbb0 f3f3 	udiv	r3, r0, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800320e:	e00f      	b.n	8003230 <HAL_I2C_Init+0x1dc>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1e58      	subs	r0, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	0099      	lsls	r1, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	fbb0 f3f3 	udiv	r3, r0, r3
 8003226:	3301      	adds	r3, #1
 8003228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	6809      	ldr	r1, [r1, #0]
 8003234:	4313      	orrs	r3, r2
 8003236:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800325e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6911      	ldr	r1, [r2, #16]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68d2      	ldr	r2, [r2, #12]
 800326a:	4311      	orrs	r1, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	430b      	orrs	r3, r1
 8003272:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	000186a0 	.word	0x000186a0
 80032cc:	001e847f 	.word	0x001e847f
 80032d0:	003d08ff 	.word	0x003d08ff
 80032d4:	431bde83 	.word	0x431bde83
 80032d8:	10624dd3 	.word	0x10624dd3

080032dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	461a      	mov	r2, r3
 80032e8:	460b      	mov	r3, r1
 80032ea:	817b      	strh	r3, [r7, #10]
 80032ec:	4613      	mov	r3, r2
 80032ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032f0:	f7fe ff8a 	bl	8002208 <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b20      	cmp	r3, #32
 8003300:	f040 80e0 	bne.w	80034c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2319      	movs	r3, #25
 800330a:	2201      	movs	r2, #1
 800330c:	4970      	ldr	r1, [pc, #448]	@ (80034d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fc22 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800331a:	2302      	movs	r3, #2
 800331c:	e0d3      	b.n	80034c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_I2C_Master_Transmit+0x50>
 8003328:	2302      	movs	r3, #2
 800332a:	e0cc      	b.n	80034c6 <HAL_I2C_Master_Transmit+0x1ea>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b01      	cmp	r3, #1
 8003340:	d007      	beq.n	8003352 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003360:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2221      	movs	r2, #33	@ 0x21
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2210      	movs	r2, #16
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	893a      	ldrh	r2, [r7, #8]
 8003382:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a50      	ldr	r2, [pc, #320]	@ (80034d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003392:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003394:	8979      	ldrh	r1, [r7, #10]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 fac4 	bl	8003928 <I2C_MasterRequestWrite>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e08d      	b.n	80034c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033c0:	e066      	b.n	8003490 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	6a39      	ldr	r1, [r7, #32]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fce0 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00d      	beq.n	80033ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d107      	bne.n	80033ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e06b      	b.n	80034c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	781a      	ldrb	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b04      	cmp	r3, #4
 800342a:	d11b      	bne.n	8003464 <HAL_I2C_Master_Transmit+0x188>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d017      	beq.n	8003464 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	6a39      	ldr	r1, [r7, #32]
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fcd7 	bl	8003e1c <I2C_WaitOnBTFFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	2b04      	cmp	r3, #4
 800347a:	d107      	bne.n	800348c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800348a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e01a      	b.n	80034c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	d194      	bne.n	80033c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e000      	b.n	80034c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	00100002 	.word	0x00100002
 80034d4:	ffff0000 	.word	0xffff0000

080034d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af02      	add	r7, sp, #8
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	4608      	mov	r0, r1
 80034e2:	4611      	mov	r1, r2
 80034e4:	461a      	mov	r2, r3
 80034e6:	4603      	mov	r3, r0
 80034e8:	817b      	strh	r3, [r7, #10]
 80034ea:	460b      	mov	r3, r1
 80034ec:	813b      	strh	r3, [r7, #8]
 80034ee:	4613      	mov	r3, r2
 80034f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034f2:	f7fe fe89 	bl	8002208 <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b20      	cmp	r3, #32
 8003502:	f040 80d9 	bne.w	80036b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	2319      	movs	r3, #25
 800350c:	2201      	movs	r2, #1
 800350e:	496d      	ldr	r1, [pc, #436]	@ (80036c4 <HAL_I2C_Mem_Write+0x1ec>)
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fb21 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
 800351e:	e0cc      	b.n	80036ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_I2C_Mem_Write+0x56>
 800352a:	2302      	movs	r3, #2
 800352c:	e0c5      	b.n	80036ba <HAL_I2C_Mem_Write+0x1e2>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d007      	beq.n	8003554 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003562:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2221      	movs	r2, #33	@ 0x21
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2240      	movs	r2, #64	@ 0x40
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a3a      	ldr	r2, [r7, #32]
 800357e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003584:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4a4d      	ldr	r2, [pc, #308]	@ (80036c8 <HAL_I2C_Mem_Write+0x1f0>)
 8003594:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003596:	88f8      	ldrh	r0, [r7, #6]
 8003598:	893a      	ldrh	r2, [r7, #8]
 800359a:	8979      	ldrh	r1, [r7, #10]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	4603      	mov	r3, r0
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fa40 	bl	8003a2c <I2C_RequestMemoryWrite>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d052      	beq.n	8003658 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e081      	b.n	80036ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fbe6 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d107      	bne.n	80035de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e06b      	b.n	80036ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	781a      	ldrb	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b04      	cmp	r3, #4
 800361e:	d11b      	bne.n	8003658 <HAL_I2C_Mem_Write+0x180>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	d017      	beq.n	8003658 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	781a      	ldrb	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1aa      	bne.n	80035b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 fbd9 	bl	8003e1c <I2C_WaitOnBTFFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00d      	beq.n	800368c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	2b04      	cmp	r3, #4
 8003676:	d107      	bne.n	8003688 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003686:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e016      	b.n	80036ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e000      	b.n	80036ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
  }
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	00100002 	.word	0x00100002
 80036c8:	ffff0000 	.word	0xffff0000

080036cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	@ 0x28
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	460b      	mov	r3, r1
 80036da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80036dc:	f7fe fd94 	bl	8002208 <HAL_GetTick>
 80036e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	f040 8111 	bne.w	8003916 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2319      	movs	r3, #25
 80036fa:	2201      	movs	r2, #1
 80036fc:	4988      	ldr	r1, [pc, #544]	@ (8003920 <HAL_I2C_IsDeviceReady+0x254>)
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fa2a 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800370a:	2302      	movs	r3, #2
 800370c:	e104      	b.n	8003918 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_I2C_IsDeviceReady+0x50>
 8003718:	2302      	movs	r3, #2
 800371a:	e0fd      	b.n	8003918 <HAL_I2C_IsDeviceReady+0x24c>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d007      	beq.n	8003742 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003750:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2224      	movs	r2, #36	@ 0x24
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4a70      	ldr	r2, [pc, #448]	@ (8003924 <HAL_I2C_IsDeviceReady+0x258>)
 8003764:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003774:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2200      	movs	r2, #0
 800377e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f9e8 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800379c:	d103      	bne.n	80037a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037a4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e0b6      	b.n	8003918 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037aa:	897b      	ldrh	r3, [r7, #10]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80037ba:	f7fe fd25 	bl	8002208 <HAL_GetTick>
 80037be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	bf0c      	ite	eq
 80037ce:	2301      	moveq	r3, #1
 80037d0:	2300      	movne	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e4:	bf0c      	ite	eq
 80037e6:	2301      	moveq	r3, #1
 80037e8:	2300      	movne	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037ee:	e025      	b.n	800383c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037f0:	f7fe fd0a 	bl	8002208 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d302      	bcc.n	8003806 <HAL_I2C_IsDeviceReady+0x13a>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d103      	bne.n	800380e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	22a0      	movs	r2, #160	@ 0xa0
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b02      	cmp	r3, #2
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2ba0      	cmp	r3, #160	@ 0xa0
 8003846:	d005      	beq.n	8003854 <HAL_I2C_IsDeviceReady+0x188>
 8003848:	7dfb      	ldrb	r3, [r7, #23]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <HAL_I2C_IsDeviceReady+0x188>
 800384e:	7dbb      	ldrb	r3, [r7, #22]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0cd      	beq.n	80037f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b02      	cmp	r3, #2
 8003868:	d129      	bne.n	80038be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003878:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	2319      	movs	r3, #25
 8003896:	2201      	movs	r2, #1
 8003898:	4921      	ldr	r1, [pc, #132]	@ (8003920 <HAL_I2C_IsDeviceReady+0x254>)
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f95c 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e036      	b.n	8003918 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e02c      	b.n	8003918 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	2319      	movs	r3, #25
 80038de:	2201      	movs	r2, #1
 80038e0:	490f      	ldr	r1, [pc, #60]	@ (8003920 <HAL_I2C_IsDeviceReady+0x254>)
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f938 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e012      	b.n	8003918 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	3301      	adds	r3, #1
 80038f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	f4ff af32 	bcc.w	8003766 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003916:	2302      	movs	r3, #2
  }
}
 8003918:	4618      	mov	r0, r3
 800391a:	3720      	adds	r7, #32
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	00100002 	.word	0x00100002
 8003924:	ffff0000 	.word	0xffff0000

08003928 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	460b      	mov	r3, r1
 8003936:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d006      	beq.n	8003952 <I2C_MasterRequestWrite+0x2a>
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d003      	beq.n	8003952 <I2C_MasterRequestWrite+0x2a>
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003950:	d108      	bne.n	8003964 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e00b      	b.n	800397c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003968:	2b12      	cmp	r3, #18
 800396a:	d107      	bne.n	800397c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800397a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f8e5 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00d      	beq.n	80039b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a2:	d103      	bne.n	80039ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e035      	b.n	8003a1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039b8:	d108      	bne.n	80039cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ba:	897b      	ldrh	r3, [r7, #10]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039c8:	611a      	str	r2, [r3, #16]
 80039ca:	e01b      	b.n	8003a04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039cc:	897b      	ldrh	r3, [r7, #10]
 80039ce:	11db      	asrs	r3, r3, #7
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f003 0306 	and.w	r3, r3, #6
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f063 030f 	orn	r3, r3, #15
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	490e      	ldr	r1, [pc, #56]	@ (8003a24 <I2C_MasterRequestWrite+0xfc>)
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f92e 	bl	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e010      	b.n	8003a1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039fa:	897b      	ldrh	r3, [r7, #10]
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4907      	ldr	r1, [pc, #28]	@ (8003a28 <I2C_MasterRequestWrite+0x100>)
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f91e 	bl	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	00010008 	.word	0x00010008
 8003a28:	00010002 	.word	0x00010002

08003a2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	4608      	mov	r0, r1
 8003a36:	4611      	mov	r1, r2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	817b      	strh	r3, [r7, #10]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	813b      	strh	r3, [r7, #8]
 8003a42:	4613      	mov	r3, r2
 8003a44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f878 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7c:	d103      	bne.n	8003a86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e05f      	b.n	8003b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a8a:	897b      	ldrh	r3, [r7, #10]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	6a3a      	ldr	r2, [r7, #32]
 8003a9e:	492d      	ldr	r1, [pc, #180]	@ (8003b54 <I2C_RequestMemoryWrite+0x128>)
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f8d3 	bl	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e04c      	b.n	8003b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac8:	6a39      	ldr	r1, [r7, #32]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f95e 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00d      	beq.n	8003af2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d107      	bne.n	8003aee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e02b      	b.n	8003b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003af8:	893b      	ldrh	r3, [r7, #8]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	611a      	str	r2, [r3, #16]
 8003b02:	e021      	b.n	8003b48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b04:	893b      	ldrh	r3, [r7, #8]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b14:	6a39      	ldr	r1, [r7, #32]
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f938 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00d      	beq.n	8003b3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d107      	bne.n	8003b3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e005      	b.n	8003b4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b3e:	893b      	ldrh	r3, [r7, #8]
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	00010002 	.word	0x00010002

08003b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b68:	e048      	b.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d044      	beq.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fe fb49 	bl	8002208 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d139      	bne.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	0c1b      	lsrs	r3, r3, #16
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d10d      	bne.n	8003bae <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	43da      	mvns	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	e00c      	b.n	8003bc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	43da      	mvns	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d116      	bne.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	f043 0220 	orr.w	r2, r3, #32
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e023      	b.n	8003c44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	0c1b      	lsrs	r3, r3, #16
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d10d      	bne.n	8003c22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	43da      	mvns	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4013      	ands	r3, r2
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	e00c      	b.n	8003c3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	43da      	mvns	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d093      	beq.n	8003b6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c5a:	e071      	b.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c6a:	d123      	bne.n	8003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca0:	f043 0204 	orr.w	r2, r3, #4
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e067      	b.n	8003d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cba:	d041      	beq.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cbc:	f7fe faa4 	bl	8002208 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d302      	bcc.n	8003cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d136      	bne.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	0c1b      	lsrs	r3, r3, #16
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d10c      	bne.n	8003cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf14      	ite	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	2300      	moveq	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	e00b      	b.n	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	43da      	mvns	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4013      	ands	r3, r2
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d016      	beq.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e021      	b.n	8003d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	0c1b      	lsrs	r3, r3, #16
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d10c      	bne.n	8003d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	43da      	mvns	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4013      	ands	r3, r2
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf14      	ite	ne
 8003d5c:	2301      	movne	r3, #1
 8003d5e:	2300      	moveq	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e00b      	b.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	43da      	mvns	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf14      	ite	ne
 8003d76:	2301      	movne	r3, #1
 8003d78:	2300      	moveq	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f47f af6d 	bne.w	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d98:	e034      	b.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f886 	bl	8003eac <I2C_IsAcknowledgeFailed>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e034      	b.n	8003e14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d028      	beq.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db2:	f7fe fa29 	bl	8002208 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d302      	bcc.n	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d11d      	bne.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd2:	2b80      	cmp	r3, #128	@ 0x80
 8003dd4:	d016      	beq.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e007      	b.n	8003e14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e0e:	2b80      	cmp	r3, #128	@ 0x80
 8003e10:	d1c3      	bne.n	8003d9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e28:	e034      	b.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f83e 	bl	8003eac <I2C_IsAcknowledgeFailed>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e034      	b.n	8003ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d028      	beq.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fe f9e1 	bl	8002208 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d11d      	bne.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d016      	beq.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	f043 0220 	orr.w	r2, r3, #32
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e007      	b.n	8003ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d1c3      	bne.n	8003e2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ec2:	d11b      	bne.n	8003efc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ecc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee8:	f043 0204 	orr.w	r2, r3, #4
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e272      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8087 	beq.w	8004036 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f28:	4b92      	ldr	r3, [pc, #584]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 030c 	and.w	r3, r3, #12
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d00c      	beq.n	8003f4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f34:	4b8f      	ldr	r3, [pc, #572]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 030c 	and.w	r3, r3, #12
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d112      	bne.n	8003f66 <HAL_RCC_OscConfig+0x5e>
 8003f40:	4b8c      	ldr	r3, [pc, #560]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f4c:	d10b      	bne.n	8003f66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4e:	4b89      	ldr	r3, [pc, #548]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d06c      	beq.n	8004034 <HAL_RCC_OscConfig+0x12c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d168      	bne.n	8004034 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e24c      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCC_OscConfig+0x76>
 8003f70:	4b80      	ldr	r3, [pc, #512]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a7f      	ldr	r2, [pc, #508]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	e02e      	b.n	8003fdc <HAL_RCC_OscConfig+0xd4>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x98>
 8003f86:	4b7b      	ldr	r3, [pc, #492]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a7a      	ldr	r2, [pc, #488]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b78      	ldr	r3, [pc, #480]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a77      	ldr	r2, [pc, #476]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e01d      	b.n	8003fdc <HAL_RCC_OscConfig+0xd4>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0xbc>
 8003faa:	4b72      	ldr	r3, [pc, #456]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a71      	ldr	r2, [pc, #452]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	4b6f      	ldr	r3, [pc, #444]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a6e      	ldr	r2, [pc, #440]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e00b      	b.n	8003fdc <HAL_RCC_OscConfig+0xd4>
 8003fc4:	4b6b      	ldr	r3, [pc, #428]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a6a      	ldr	r2, [pc, #424]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	4b68      	ldr	r3, [pc, #416]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a67      	ldr	r2, [pc, #412]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d013      	beq.n	800400c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fe f910 	bl	8002208 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fec:	f7fe f90c 	bl	8002208 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	@ 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e200      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	4b5d      	ldr	r3, [pc, #372]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0xe4>
 800400a:	e014      	b.n	8004036 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fe f8fc 	bl	8002208 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004014:	f7fe f8f8 	bl	8002208 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	@ 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e1ec      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004026:	4b53      	ldr	r3, [pc, #332]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x10c>
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d063      	beq.n	800410a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004042:	4b4c      	ldr	r3, [pc, #304]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800404e:	4b49      	ldr	r3, [pc, #292]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b08      	cmp	r3, #8
 8004058:	d11c      	bne.n	8004094 <HAL_RCC_OscConfig+0x18c>
 800405a:	4b46      	ldr	r3, [pc, #280]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d116      	bne.n	8004094 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004066:	4b43      	ldr	r3, [pc, #268]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <HAL_RCC_OscConfig+0x176>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d001      	beq.n	800407e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e1c0      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407e:	4b3d      	ldr	r3, [pc, #244]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4939      	ldr	r1, [pc, #228]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004092:	e03a      	b.n	800410a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d020      	beq.n	80040de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800409c:	4b36      	ldr	r3, [pc, #216]	@ (8004178 <HAL_RCC_OscConfig+0x270>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fe f8b1 	bl	8002208 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040aa:	f7fe f8ad 	bl	8002208 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e1a1      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4927      	ldr	r1, [pc, #156]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	600b      	str	r3, [r1, #0]
 80040dc:	e015      	b.n	800410a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040de:	4b26      	ldr	r3, [pc, #152]	@ (8004178 <HAL_RCC_OscConfig+0x270>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fe f890 	bl	8002208 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ec:	f7fe f88c 	bl	8002208 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e180      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d03a      	beq.n	800418c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d019      	beq.n	8004152 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800411e:	4b17      	ldr	r3, [pc, #92]	@ (800417c <HAL_RCC_OscConfig+0x274>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004124:	f7fe f870 	bl	8002208 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412c:	f7fe f86c 	bl	8002208 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e160      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413e:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800414a:	2001      	movs	r0, #1
 800414c:	f000 face 	bl	80046ec <RCC_Delay>
 8004150:	e01c      	b.n	800418c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004152:	4b0a      	ldr	r3, [pc, #40]	@ (800417c <HAL_RCC_OscConfig+0x274>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004158:	f7fe f856 	bl	8002208 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800415e:	e00f      	b.n	8004180 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004160:	f7fe f852 	bl	8002208 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d908      	bls.n	8004180 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e146      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	42420000 	.word	0x42420000
 800417c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004180:	4b92      	ldr	r3, [pc, #584]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e9      	bne.n	8004160 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80a6 	beq.w	80042e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419e:	4b8b      	ldr	r3, [pc, #556]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	4b88      	ldr	r3, [pc, #544]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4a87      	ldr	r2, [pc, #540]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b4:	61d3      	str	r3, [r2, #28]
 80041b6:	4b85      	ldr	r3, [pc, #532]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c2:	2301      	movs	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c6:	4b82      	ldr	r3, [pc, #520]	@ (80043d0 <HAL_RCC_OscConfig+0x4c8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d118      	bne.n	8004204 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d2:	4b7f      	ldr	r3, [pc, #508]	@ (80043d0 <HAL_RCC_OscConfig+0x4c8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a7e      	ldr	r2, [pc, #504]	@ (80043d0 <HAL_RCC_OscConfig+0x4c8>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041de:	f7fe f813 	bl	8002208 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e6:	f7fe f80f 	bl	8002208 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b64      	cmp	r3, #100	@ 0x64
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e103      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	4b75      	ldr	r3, [pc, #468]	@ (80043d0 <HAL_RCC_OscConfig+0x4c8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d106      	bne.n	800421a <HAL_RCC_OscConfig+0x312>
 800420c:	4b6f      	ldr	r3, [pc, #444]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4a6e      	ldr	r2, [pc, #440]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6213      	str	r3, [r2, #32]
 8004218:	e02d      	b.n	8004276 <HAL_RCC_OscConfig+0x36e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10c      	bne.n	800423c <HAL_RCC_OscConfig+0x334>
 8004222:	4b6a      	ldr	r3, [pc, #424]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	4a69      	ldr	r2, [pc, #420]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	6213      	str	r3, [r2, #32]
 800422e:	4b67      	ldr	r3, [pc, #412]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4a66      	ldr	r2, [pc, #408]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004234:	f023 0304 	bic.w	r3, r3, #4
 8004238:	6213      	str	r3, [r2, #32]
 800423a:	e01c      	b.n	8004276 <HAL_RCC_OscConfig+0x36e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	2b05      	cmp	r3, #5
 8004242:	d10c      	bne.n	800425e <HAL_RCC_OscConfig+0x356>
 8004244:	4b61      	ldr	r3, [pc, #388]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	4a60      	ldr	r2, [pc, #384]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 800424a:	f043 0304 	orr.w	r3, r3, #4
 800424e:	6213      	str	r3, [r2, #32]
 8004250:	4b5e      	ldr	r3, [pc, #376]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	4a5d      	ldr	r2, [pc, #372]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6213      	str	r3, [r2, #32]
 800425c:	e00b      	b.n	8004276 <HAL_RCC_OscConfig+0x36e>
 800425e:	4b5b      	ldr	r3, [pc, #364]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	4a5a      	ldr	r2, [pc, #360]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004264:	f023 0301 	bic.w	r3, r3, #1
 8004268:	6213      	str	r3, [r2, #32]
 800426a:	4b58      	ldr	r3, [pc, #352]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4a57      	ldr	r2, [pc, #348]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004270:	f023 0304 	bic.w	r3, r3, #4
 8004274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d015      	beq.n	80042aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427e:	f7fd ffc3 	bl	8002208 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	e00a      	b.n	800429c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fd ffbf 	bl	8002208 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e0b1      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	4b4b      	ldr	r3, [pc, #300]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ee      	beq.n	8004286 <HAL_RCC_OscConfig+0x37e>
 80042a8:	e014      	b.n	80042d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042aa:	f7fd ffad 	bl	8002208 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b0:	e00a      	b.n	80042c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b2:	f7fd ffa9 	bl	8002208 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e09b      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c8:	4b40      	ldr	r3, [pc, #256]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1ee      	bne.n	80042b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d105      	bne.n	80042e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042da:	4b3c      	ldr	r3, [pc, #240]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	4a3b      	ldr	r2, [pc, #236]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8087 	beq.w	80043fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042f0:	4b36      	ldr	r3, [pc, #216]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d061      	beq.n	80043c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d146      	bne.n	8004392 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004304:	4b33      	ldr	r3, [pc, #204]	@ (80043d4 <HAL_RCC_OscConfig+0x4cc>)
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430a:	f7fd ff7d 	bl	8002208 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004312:	f7fd ff79 	bl	8002208 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e06d      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004324:	4b29      	ldr	r3, [pc, #164]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004338:	d108      	bne.n	800434c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800433a:	4b24      	ldr	r3, [pc, #144]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	4921      	ldr	r1, [pc, #132]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004348:	4313      	orrs	r3, r2
 800434a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800434c:	4b1f      	ldr	r3, [pc, #124]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a19      	ldr	r1, [r3, #32]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	430b      	orrs	r3, r1
 800435e:	491b      	ldr	r1, [pc, #108]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004360:	4313      	orrs	r3, r2
 8004362:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004364:	4b1b      	ldr	r3, [pc, #108]	@ (80043d4 <HAL_RCC_OscConfig+0x4cc>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436a:	f7fd ff4d 	bl	8002208 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004372:	f7fd ff49 	bl	8002208 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e03d      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004384:	4b11      	ldr	r3, [pc, #68]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x46a>
 8004390:	e035      	b.n	80043fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004392:	4b10      	ldr	r3, [pc, #64]	@ (80043d4 <HAL_RCC_OscConfig+0x4cc>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fd ff36 	bl	8002208 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd ff32 	bl	8002208 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e026      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b2:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x498>
 80043be:	e01e      	b.n	80043fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d107      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e019      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
 80043cc:	40021000 	.word	0x40021000
 80043d0:	40007000 	.word	0x40007000
 80043d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004408 <HAL_RCC_OscConfig+0x500>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d106      	bne.n	80043fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d001      	beq.n	80043fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000

0800440c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0d0      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004420:	4b6a      	ldr	r3, [pc, #424]	@ (80045cc <HAL_RCC_ClockConfig+0x1c0>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d910      	bls.n	8004450 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442e:	4b67      	ldr	r3, [pc, #412]	@ (80045cc <HAL_RCC_ClockConfig+0x1c0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 0207 	bic.w	r2, r3, #7
 8004436:	4965      	ldr	r1, [pc, #404]	@ (80045cc <HAL_RCC_ClockConfig+0x1c0>)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800443e:	4b63      	ldr	r3, [pc, #396]	@ (80045cc <HAL_RCC_ClockConfig+0x1c0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0b8      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d020      	beq.n	800449e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004468:	4b59      	ldr	r3, [pc, #356]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	4a58      	ldr	r2, [pc, #352]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 800446e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004472:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004480:	4b53      	ldr	r3, [pc, #332]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4a52      	ldr	r2, [pc, #328]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004486:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800448a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800448c:	4b50      	ldr	r3, [pc, #320]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	494d      	ldr	r1, [pc, #308]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d040      	beq.n	800452c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d107      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	4b47      	ldr	r3, [pc, #284]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d115      	bne.n	80044ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e07f      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d107      	bne.n	80044da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ca:	4b41      	ldr	r3, [pc, #260]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e073      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044da:	4b3d      	ldr	r3, [pc, #244]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e06b      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ea:	4b39      	ldr	r3, [pc, #228]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f023 0203 	bic.w	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4936      	ldr	r1, [pc, #216]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044fc:	f7fd fe84 	bl	8002208 <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004502:	e00a      	b.n	800451a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004504:	f7fd fe80 	bl	8002208 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e053      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451a:	4b2d      	ldr	r3, [pc, #180]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 020c 	and.w	r2, r3, #12
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	429a      	cmp	r2, r3
 800452a:	d1eb      	bne.n	8004504 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800452c:	4b27      	ldr	r3, [pc, #156]	@ (80045cc <HAL_RCC_ClockConfig+0x1c0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d210      	bcs.n	800455c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453a:	4b24      	ldr	r3, [pc, #144]	@ (80045cc <HAL_RCC_ClockConfig+0x1c0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 0207 	bic.w	r2, r3, #7
 8004542:	4922      	ldr	r1, [pc, #136]	@ (80045cc <HAL_RCC_ClockConfig+0x1c0>)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454a:	4b20      	ldr	r3, [pc, #128]	@ (80045cc <HAL_RCC_ClockConfig+0x1c0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e032      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004568:	4b19      	ldr	r3, [pc, #100]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4916      	ldr	r1, [pc, #88]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004576:	4313      	orrs	r3, r2
 8004578:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004586:	4b12      	ldr	r3, [pc, #72]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	490e      	ldr	r1, [pc, #56]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004596:	4313      	orrs	r3, r2
 8004598:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800459a:	f000 f821 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 800459e:	4602      	mov	r2, r0
 80045a0:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	490a      	ldr	r1, [pc, #40]	@ (80045d4 <HAL_RCC_ClockConfig+0x1c8>)
 80045ac:	5ccb      	ldrb	r3, [r1, r3]
 80045ae:	fa22 f303 	lsr.w	r3, r2, r3
 80045b2:	4a09      	ldr	r2, [pc, #36]	@ (80045d8 <HAL_RCC_ClockConfig+0x1cc>)
 80045b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045b6:	4b09      	ldr	r3, [pc, #36]	@ (80045dc <HAL_RCC_ClockConfig+0x1d0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fde2 	bl	8002184 <HAL_InitTick>

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40022000 	.word	0x40022000
 80045d0:	40021000 	.word	0x40021000
 80045d4:	08007f18 	.word	0x08007f18
 80045d8:	20000000 	.word	0x20000000
 80045dc:	20000004 	.word	0x20000004

080045e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	2300      	movs	r3, #0
 80045f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x94>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b04      	cmp	r3, #4
 8004608:	d002      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x30>
 800460a:	2b08      	cmp	r3, #8
 800460c:	d003      	beq.n	8004616 <HAL_RCC_GetSysClockFreq+0x36>
 800460e:	e027      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004610:	4b19      	ldr	r3, [pc, #100]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x98>)
 8004612:	613b      	str	r3, [r7, #16]
      break;
 8004614:	e027      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	0c9b      	lsrs	r3, r3, #18
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	4a17      	ldr	r2, [pc, #92]	@ (800467c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004620:	5cd3      	ldrb	r3, [r2, r3]
 8004622:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d010      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800462e:	4b11      	ldr	r3, [pc, #68]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x94>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	0c5b      	lsrs	r3, r3, #17
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	4a11      	ldr	r2, [pc, #68]	@ (8004680 <HAL_RCC_GetSysClockFreq+0xa0>)
 800463a:	5cd3      	ldrb	r3, [r2, r3]
 800463c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a0d      	ldr	r2, [pc, #52]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x98>)
 8004642:	fb03 f202 	mul.w	r2, r3, r2
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e004      	b.n	800465a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a0c      	ldr	r2, [pc, #48]	@ (8004684 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004654:	fb02 f303 	mul.w	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	613b      	str	r3, [r7, #16]
      break;
 800465e:	e002      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004660:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x98>)
 8004662:	613b      	str	r3, [r7, #16]
      break;
 8004664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004666:	693b      	ldr	r3, [r7, #16]
}
 8004668:	4618      	mov	r0, r3
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	007a1200 	.word	0x007a1200
 800467c:	08007f30 	.word	0x08007f30
 8004680:	08007f40 	.word	0x08007f40
 8004684:	003d0900 	.word	0x003d0900

08004688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800468c:	4b02      	ldr	r3, [pc, #8]	@ (8004698 <HAL_RCC_GetHCLKFreq+0x10>)
 800468e:	681b      	ldr	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr
 8004698:	20000000 	.word	0x20000000

0800469c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046a0:	f7ff fff2 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	4903      	ldr	r1, [pc, #12]	@ (80046c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b2:	5ccb      	ldrb	r3, [r1, r3]
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40021000 	.word	0x40021000
 80046c0:	08007f28 	.word	0x08007f28

080046c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046c8:	f7ff ffde 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	0adb      	lsrs	r3, r3, #11
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4903      	ldr	r1, [pc, #12]	@ (80046e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40021000 	.word	0x40021000
 80046e8:	08007f28 	.word	0x08007f28

080046ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004720 <RCC_Delay+0x34>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004724 <RCC_Delay+0x38>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	0a5b      	lsrs	r3, r3, #9
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004708:	bf00      	nop
  }
  while (Delay --);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1e5a      	subs	r2, r3, #1
 800470e:	60fa      	str	r2, [r7, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f9      	bne.n	8004708 <RCC_Delay+0x1c>
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	20000000 	.word	0x20000000
 8004724:	10624dd3 	.word	0x10624dd3

08004728 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d07d      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004744:	2300      	movs	r3, #0
 8004746:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004748:	4b4f      	ldr	r3, [pc, #316]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10d      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004754:	4b4c      	ldr	r3, [pc, #304]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	4a4b      	ldr	r2, [pc, #300]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800475e:	61d3      	str	r3, [r2, #28]
 8004760:	4b49      	ldr	r3, [pc, #292]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476c:	2301      	movs	r3, #1
 800476e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004770:	4b46      	ldr	r3, [pc, #280]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d118      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477c:	4b43      	ldr	r3, [pc, #268]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a42      	ldr	r2, [pc, #264]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004788:	f7fd fd3e 	bl	8002208 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478e:	e008      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004790:	f7fd fd3a 	bl	8002208 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	@ 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e06d      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a2:	4b3a      	ldr	r3, [pc, #232]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ae:	4b36      	ldr	r3, [pc, #216]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d02e      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d027      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047d6:	4b2e      	ldr	r3, [pc, #184]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047e2:	4a29      	ldr	r2, [pc, #164]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d014      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fd fd09 	bl	8002208 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f8:	e00a      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fa:	f7fd fd05 	bl	8002208 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004808:	4293      	cmp	r3, r2
 800480a:	d901      	bls.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e036      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004810:	4b1d      	ldr	r3, [pc, #116]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0ee      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800481c:	4b1a      	ldr	r3, [pc, #104]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	4917      	ldr	r1, [pc, #92]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482a:	4313      	orrs	r3, r2
 800482c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800482e:	7dfb      	ldrb	r3, [r7, #23]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d105      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004834:	4b14      	ldr	r3, [pc, #80]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	4a13      	ldr	r2, [pc, #76]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800483e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800484c:	4b0e      	ldr	r3, [pc, #56]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	490b      	ldr	r1, [pc, #44]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485a:	4313      	orrs	r3, r2
 800485c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800486a:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	4904      	ldr	r1, [pc, #16]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
 800488c:	40007000 	.word	0x40007000
 8004890:	42420440 	.word	0x42420440

08004894 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	2300      	movs	r3, #0
 80048ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b10      	cmp	r3, #16
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	f200 808a 	bhi.w	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d045      	beq.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d075      	beq.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80048ca:	e082      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80048cc:	4b46      	ldr	r3, [pc, #280]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80048d2:	4b45      	ldr	r3, [pc, #276]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d07b      	beq.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	0c9b      	lsrs	r3, r3, #18
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	4a41      	ldr	r2, [pc, #260]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80048e8:	5cd3      	ldrb	r3, [r2, r3]
 80048ea:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d015      	beq.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048f6:	4b3c      	ldr	r3, [pc, #240]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	0c5b      	lsrs	r3, r3, #17
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	4a3b      	ldr	r2, [pc, #236]	@ (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004902:	5cd3      	ldrb	r3, [r2, r3]
 8004904:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00d      	beq.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004910:	4a38      	ldr	r2, [pc, #224]	@ (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	fbb2 f2f3 	udiv	r2, r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	e004      	b.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4a34      	ldr	r2, [pc, #208]	@ (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004926:	fb02 f303 	mul.w	r3, r2, r3
 800492a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800492c:	4b2e      	ldr	r3, [pc, #184]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004934:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004938:	d102      	bne.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	61bb      	str	r3, [r7, #24]
      break;
 800493e:	e04a      	b.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	4a2d      	ldr	r2, [pc, #180]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	61bb      	str	r3, [r7, #24]
      break;
 800494e:	e042      	b.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004950:	4b25      	ldr	r3, [pc, #148]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800495c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004960:	d108      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800496c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	e01f      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800497a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800497e:	d109      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004980:	4b19      	ldr	r3, [pc, #100]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800498c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e00f      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800499a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800499e:	d11c      	bne.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80049a0:	4b11      	ldr	r3, [pc, #68]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d016      	beq.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80049ac:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80049b0:	61bb      	str	r3, [r7, #24]
      break;
 80049b2:	e012      	b.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80049b4:	e011      	b.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80049b6:	f7ff fe85 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 80049ba:	4602      	mov	r2, r0
 80049bc:	4b0a      	ldr	r3, [pc, #40]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	0b9b      	lsrs	r3, r3, #14
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	3301      	adds	r3, #1
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	61bb      	str	r3, [r7, #24]
      break;
 80049d0:	e004      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049d2:	bf00      	nop
 80049d4:	e002      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049da:	bf00      	nop
    }
  }
  return (frequency);
 80049dc:	69bb      	ldr	r3, [r7, #24]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40021000 	.word	0x40021000
 80049ec:	08007f44 	.word	0x08007f44
 80049f0:	08007f54 	.word	0x08007f54
 80049f4:	007a1200 	.word	0x007a1200
 80049f8:	003d0900 	.word	0x003d0900
 80049fc:	aaaaaaab 	.word	0xaaaaaaab

08004a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e076      	b.n	8004b00 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d108      	bne.n	8004a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a22:	d009      	beq.n	8004a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	61da      	str	r2, [r3, #28]
 8004a2a:	e005      	b.n	8004a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fc ff64 	bl	8001920 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004abc:	ea42 0103 	orr.w	r1, r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	0c1a      	lsrs	r2, r3, #16
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f002 0204 	and.w	r2, r2, #4
 8004ade:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69da      	ldr	r2, [r3, #28]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	@ 0x28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b16:	2301      	movs	r3, #1
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b1a:	f7fd fb75 	bl	8002208 <HAL_GetTick>
 8004b1e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b26:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004b2e:	887b      	ldrh	r3, [r7, #2]
 8004b30:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b32:	7ffb      	ldrb	r3, [r7, #31]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d00c      	beq.n	8004b52 <HAL_SPI_TransmitReceive+0x4a>
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b3e:	d106      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x46>
 8004b48:	7ffb      	ldrb	r3, [r7, #31]
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d001      	beq.n	8004b52 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e17f      	b.n	8004e52 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_SPI_TransmitReceive+0x5c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_SPI_TransmitReceive+0x5c>
 8004b5e:	887b      	ldrh	r3, [r7, #2]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e174      	b.n	8004e52 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_SPI_TransmitReceive+0x6e>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e16d      	b.n	8004e52 <HAL_SPI_TransmitReceive+0x34a>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d003      	beq.n	8004b92 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2205      	movs	r2, #5
 8004b8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	887a      	ldrh	r2, [r7, #2]
 8004ba2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	887a      	ldrh	r2, [r7, #2]
 8004bb4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	887a      	ldrh	r2, [r7, #2]
 8004bba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd2:	2b40      	cmp	r3, #64	@ 0x40
 8004bd4:	d007      	beq.n	8004be6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004be4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bee:	d17e      	bne.n	8004cee <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_SPI_TransmitReceive+0xf6>
 8004bf8:	8afb      	ldrh	r3, [r7, #22]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d16c      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	881a      	ldrh	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	1c9a      	adds	r2, r3, #2
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c22:	e059      	b.n	8004cd8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d11b      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x162>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d016      	beq.n	8004c6a <HAL_SPI_TransmitReceive+0x162>
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d113      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	881a      	ldrh	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c52:	1c9a      	adds	r2, r3, #2
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d119      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x1a4>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d014      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8c:	b292      	uxth	r2, r2
 8004c8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c94:	1c9a      	adds	r2, r3, #2
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cac:	f7fd faac 	bl	8002208 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d80d      	bhi.n	8004cd8 <HAL_SPI_TransmitReceive+0x1d0>
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d009      	beq.n	8004cd8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e0bc      	b.n	8004e52 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1a0      	bne.n	8004c24 <HAL_SPI_TransmitReceive+0x11c>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d19b      	bne.n	8004c24 <HAL_SPI_TransmitReceive+0x11c>
 8004cec:	e082      	b.n	8004df4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_SPI_TransmitReceive+0x1f4>
 8004cf6:	8afb      	ldrh	r3, [r7, #22]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d171      	bne.n	8004de0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d22:	e05d      	b.n	8004de0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d11c      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x264>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d017      	beq.n	8004d6c <HAL_SPI_TransmitReceive+0x264>
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d114      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	7812      	ldrb	r2, [r2, #0]
 8004d4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d119      	bne.n	8004dae <HAL_SPI_TransmitReceive+0x2a6>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d014      	beq.n	8004dae <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004daa:	2301      	movs	r3, #1
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004dae:	f7fd fa2b 	bl	8002208 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d803      	bhi.n	8004dc6 <HAL_SPI_TransmitReceive+0x2be>
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d102      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x2c4>
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d109      	bne.n	8004de0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e038      	b.n	8004e52 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d19c      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x21c>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d197      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004df4:	6a3a      	ldr	r2, [r7, #32]
 8004df6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f8c3 	bl	8004f84 <SPI_EndRxTxTransaction>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e01d      	b.n	8004e52 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004e50:	2300      	movs	r3, #0
  }
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3728      	adds	r7, #40	@ 0x28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e68:	b2db      	uxtb	r3, r3
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr

08004e74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	4613      	mov	r3, r2
 8004e82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e84:	f7fd f9c0 	bl	8002208 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	4413      	add	r3, r2
 8004e92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e94:	f7fd f9b8 	bl	8002208 <HAL_GetTick>
 8004e98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e9a:	4b39      	ldr	r3, [pc, #228]	@ (8004f80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	015b      	lsls	r3, r3, #5
 8004ea0:	0d1b      	lsrs	r3, r3, #20
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	fb02 f303 	mul.w	r3, r2, r3
 8004ea8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eaa:	e054      	b.n	8004f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb2:	d050      	beq.n	8004f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004eb4:	f7fd f9a8 	bl	8002208 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d902      	bls.n	8004eca <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d13d      	bne.n	8004f46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ed8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ee2:	d111      	bne.n	8004f08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eec:	d004      	beq.n	8004ef8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef6:	d107      	bne.n	8004f08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f10:	d10f      	bne.n	8004f32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e017      	b.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	bf0c      	ite	eq
 8004f66:	2301      	moveq	r3, #1
 8004f68:	2300      	movne	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d19b      	bne.n	8004eac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000000 	.word	0x20000000

08004f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2201      	movs	r2, #1
 8004f98:	2102      	movs	r1, #2
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f7ff ff6a 	bl	8004e74 <SPI_WaitFlagStateUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004faa:	f043 0220 	orr.w	r2, r3, #32
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e013      	b.n	8004fde <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2180      	movs	r1, #128	@ 0x80
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7ff ff57 	bl	8004e74 <SPI_WaitFlagStateUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd0:	f043 0220 	orr.w	r2, r3, #32
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e000      	b.n	8004fde <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <__cvt>:
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	461d      	mov	r5, r3
 8004fee:	bfbb      	ittet	lt
 8004ff0:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004ff4:	461d      	movlt	r5, r3
 8004ff6:	2300      	movge	r3, #0
 8004ff8:	232d      	movlt	r3, #45	@ 0x2d
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	bfb8      	it	lt
 8005000:	4614      	movlt	r4, r2
 8005002:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005004:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005006:	7013      	strb	r3, [r2, #0]
 8005008:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800500a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800500e:	f023 0820 	bic.w	r8, r3, #32
 8005012:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005016:	d005      	beq.n	8005024 <__cvt+0x3e>
 8005018:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800501c:	d100      	bne.n	8005020 <__cvt+0x3a>
 800501e:	3601      	adds	r6, #1
 8005020:	2302      	movs	r3, #2
 8005022:	e000      	b.n	8005026 <__cvt+0x40>
 8005024:	2303      	movs	r3, #3
 8005026:	aa07      	add	r2, sp, #28
 8005028:	9204      	str	r2, [sp, #16]
 800502a:	aa06      	add	r2, sp, #24
 800502c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005030:	e9cd 3600 	strd	r3, r6, [sp]
 8005034:	4622      	mov	r2, r4
 8005036:	462b      	mov	r3, r5
 8005038:	f000 ff96 	bl	8005f68 <_dtoa_r>
 800503c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005040:	4607      	mov	r7, r0
 8005042:	d119      	bne.n	8005078 <__cvt+0x92>
 8005044:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005046:	07db      	lsls	r3, r3, #31
 8005048:	d50e      	bpl.n	8005068 <__cvt+0x82>
 800504a:	eb00 0906 	add.w	r9, r0, r6
 800504e:	2200      	movs	r2, #0
 8005050:	2300      	movs	r3, #0
 8005052:	4620      	mov	r0, r4
 8005054:	4629      	mov	r1, r5
 8005056:	f7fb fca7 	bl	80009a8 <__aeabi_dcmpeq>
 800505a:	b108      	cbz	r0, 8005060 <__cvt+0x7a>
 800505c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005060:	2230      	movs	r2, #48	@ 0x30
 8005062:	9b07      	ldr	r3, [sp, #28]
 8005064:	454b      	cmp	r3, r9
 8005066:	d31e      	bcc.n	80050a6 <__cvt+0xc0>
 8005068:	4638      	mov	r0, r7
 800506a:	9b07      	ldr	r3, [sp, #28]
 800506c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800506e:	1bdb      	subs	r3, r3, r7
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	b008      	add	sp, #32
 8005074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005078:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800507c:	eb00 0906 	add.w	r9, r0, r6
 8005080:	d1e5      	bne.n	800504e <__cvt+0x68>
 8005082:	7803      	ldrb	r3, [r0, #0]
 8005084:	2b30      	cmp	r3, #48	@ 0x30
 8005086:	d10a      	bne.n	800509e <__cvt+0xb8>
 8005088:	2200      	movs	r2, #0
 800508a:	2300      	movs	r3, #0
 800508c:	4620      	mov	r0, r4
 800508e:	4629      	mov	r1, r5
 8005090:	f7fb fc8a 	bl	80009a8 <__aeabi_dcmpeq>
 8005094:	b918      	cbnz	r0, 800509e <__cvt+0xb8>
 8005096:	f1c6 0601 	rsb	r6, r6, #1
 800509a:	f8ca 6000 	str.w	r6, [sl]
 800509e:	f8da 3000 	ldr.w	r3, [sl]
 80050a2:	4499      	add	r9, r3
 80050a4:	e7d3      	b.n	800504e <__cvt+0x68>
 80050a6:	1c59      	adds	r1, r3, #1
 80050a8:	9107      	str	r1, [sp, #28]
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	e7d9      	b.n	8005062 <__cvt+0x7c>

080050ae <__exponent>:
 80050ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050b0:	2900      	cmp	r1, #0
 80050b2:	bfb6      	itet	lt
 80050b4:	232d      	movlt	r3, #45	@ 0x2d
 80050b6:	232b      	movge	r3, #43	@ 0x2b
 80050b8:	4249      	neglt	r1, r1
 80050ba:	2909      	cmp	r1, #9
 80050bc:	7002      	strb	r2, [r0, #0]
 80050be:	7043      	strb	r3, [r0, #1]
 80050c0:	dd29      	ble.n	8005116 <__exponent+0x68>
 80050c2:	f10d 0307 	add.w	r3, sp, #7
 80050c6:	461d      	mov	r5, r3
 80050c8:	270a      	movs	r7, #10
 80050ca:	fbb1 f6f7 	udiv	r6, r1, r7
 80050ce:	461a      	mov	r2, r3
 80050d0:	fb07 1416 	mls	r4, r7, r6, r1
 80050d4:	3430      	adds	r4, #48	@ 0x30
 80050d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80050da:	460c      	mov	r4, r1
 80050dc:	2c63      	cmp	r4, #99	@ 0x63
 80050de:	4631      	mov	r1, r6
 80050e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80050e4:	dcf1      	bgt.n	80050ca <__exponent+0x1c>
 80050e6:	3130      	adds	r1, #48	@ 0x30
 80050e8:	1e94      	subs	r4, r2, #2
 80050ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80050ee:	4623      	mov	r3, r4
 80050f0:	1c41      	adds	r1, r0, #1
 80050f2:	42ab      	cmp	r3, r5
 80050f4:	d30a      	bcc.n	800510c <__exponent+0x5e>
 80050f6:	f10d 0309 	add.w	r3, sp, #9
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	42ac      	cmp	r4, r5
 80050fe:	bf88      	it	hi
 8005100:	2300      	movhi	r3, #0
 8005102:	3302      	adds	r3, #2
 8005104:	4403      	add	r3, r0
 8005106:	1a18      	subs	r0, r3, r0
 8005108:	b003      	add	sp, #12
 800510a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800510c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005110:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005114:	e7ed      	b.n	80050f2 <__exponent+0x44>
 8005116:	2330      	movs	r3, #48	@ 0x30
 8005118:	3130      	adds	r1, #48	@ 0x30
 800511a:	7083      	strb	r3, [r0, #2]
 800511c:	70c1      	strb	r1, [r0, #3]
 800511e:	1d03      	adds	r3, r0, #4
 8005120:	e7f1      	b.n	8005106 <__exponent+0x58>
	...

08005124 <_printf_float>:
 8005124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005128:	b091      	sub	sp, #68	@ 0x44
 800512a:	460c      	mov	r4, r1
 800512c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005130:	4616      	mov	r6, r2
 8005132:	461f      	mov	r7, r3
 8005134:	4605      	mov	r5, r0
 8005136:	f000 fdf9 	bl	8005d2c <_localeconv_r>
 800513a:	6803      	ldr	r3, [r0, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	9308      	str	r3, [sp, #32]
 8005140:	f7fb f806 	bl	8000150 <strlen>
 8005144:	2300      	movs	r3, #0
 8005146:	930e      	str	r3, [sp, #56]	@ 0x38
 8005148:	f8d8 3000 	ldr.w	r3, [r8]
 800514c:	9009      	str	r0, [sp, #36]	@ 0x24
 800514e:	3307      	adds	r3, #7
 8005150:	f023 0307 	bic.w	r3, r3, #7
 8005154:	f103 0208 	add.w	r2, r3, #8
 8005158:	f894 a018 	ldrb.w	sl, [r4, #24]
 800515c:	f8d4 b000 	ldr.w	fp, [r4]
 8005160:	f8c8 2000 	str.w	r2, [r8]
 8005164:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005168:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800516c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800516e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005172:	f04f 32ff 	mov.w	r2, #4294967295
 8005176:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800517a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800517e:	4b9c      	ldr	r3, [pc, #624]	@ (80053f0 <_printf_float+0x2cc>)
 8005180:	f7fb fc44 	bl	8000a0c <__aeabi_dcmpun>
 8005184:	bb70      	cbnz	r0, 80051e4 <_printf_float+0xc0>
 8005186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800518a:	f04f 32ff 	mov.w	r2, #4294967295
 800518e:	4b98      	ldr	r3, [pc, #608]	@ (80053f0 <_printf_float+0x2cc>)
 8005190:	f7fb fc1e 	bl	80009d0 <__aeabi_dcmple>
 8005194:	bb30      	cbnz	r0, 80051e4 <_printf_float+0xc0>
 8005196:	2200      	movs	r2, #0
 8005198:	2300      	movs	r3, #0
 800519a:	4640      	mov	r0, r8
 800519c:	4649      	mov	r1, r9
 800519e:	f7fb fc0d 	bl	80009bc <__aeabi_dcmplt>
 80051a2:	b110      	cbz	r0, 80051aa <_printf_float+0x86>
 80051a4:	232d      	movs	r3, #45	@ 0x2d
 80051a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051aa:	4a92      	ldr	r2, [pc, #584]	@ (80053f4 <_printf_float+0x2d0>)
 80051ac:	4b92      	ldr	r3, [pc, #584]	@ (80053f8 <_printf_float+0x2d4>)
 80051ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80051b2:	bf94      	ite	ls
 80051b4:	4690      	movls	r8, r2
 80051b6:	4698      	movhi	r8, r3
 80051b8:	2303      	movs	r3, #3
 80051ba:	f04f 0900 	mov.w	r9, #0
 80051be:	6123      	str	r3, [r4, #16]
 80051c0:	f02b 0304 	bic.w	r3, fp, #4
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	4633      	mov	r3, r6
 80051c8:	4621      	mov	r1, r4
 80051ca:	4628      	mov	r0, r5
 80051cc:	9700      	str	r7, [sp, #0]
 80051ce:	aa0f      	add	r2, sp, #60	@ 0x3c
 80051d0:	f000 f9d4 	bl	800557c <_printf_common>
 80051d4:	3001      	adds	r0, #1
 80051d6:	f040 8090 	bne.w	80052fa <_printf_float+0x1d6>
 80051da:	f04f 30ff 	mov.w	r0, #4294967295
 80051de:	b011      	add	sp, #68	@ 0x44
 80051e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e4:	4642      	mov	r2, r8
 80051e6:	464b      	mov	r3, r9
 80051e8:	4640      	mov	r0, r8
 80051ea:	4649      	mov	r1, r9
 80051ec:	f7fb fc0e 	bl	8000a0c <__aeabi_dcmpun>
 80051f0:	b148      	cbz	r0, 8005206 <_printf_float+0xe2>
 80051f2:	464b      	mov	r3, r9
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bfb8      	it	lt
 80051f8:	232d      	movlt	r3, #45	@ 0x2d
 80051fa:	4a80      	ldr	r2, [pc, #512]	@ (80053fc <_printf_float+0x2d8>)
 80051fc:	bfb8      	it	lt
 80051fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005202:	4b7f      	ldr	r3, [pc, #508]	@ (8005400 <_printf_float+0x2dc>)
 8005204:	e7d3      	b.n	80051ae <_printf_float+0x8a>
 8005206:	6863      	ldr	r3, [r4, #4]
 8005208:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	d13f      	bne.n	8005290 <_printf_float+0x16c>
 8005210:	2306      	movs	r3, #6
 8005212:	6063      	str	r3, [r4, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	9206      	str	r2, [sp, #24]
 800521e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005220:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005224:	aa0d      	add	r2, sp, #52	@ 0x34
 8005226:	9203      	str	r2, [sp, #12]
 8005228:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800522c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005230:	6863      	ldr	r3, [r4, #4]
 8005232:	4642      	mov	r2, r8
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	4628      	mov	r0, r5
 8005238:	464b      	mov	r3, r9
 800523a:	910a      	str	r1, [sp, #40]	@ 0x28
 800523c:	f7ff fed3 	bl	8004fe6 <__cvt>
 8005240:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005242:	4680      	mov	r8, r0
 8005244:	2947      	cmp	r1, #71	@ 0x47
 8005246:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005248:	d128      	bne.n	800529c <_printf_float+0x178>
 800524a:	1cc8      	adds	r0, r1, #3
 800524c:	db02      	blt.n	8005254 <_printf_float+0x130>
 800524e:	6863      	ldr	r3, [r4, #4]
 8005250:	4299      	cmp	r1, r3
 8005252:	dd40      	ble.n	80052d6 <_printf_float+0x1b2>
 8005254:	f1aa 0a02 	sub.w	sl, sl, #2
 8005258:	fa5f fa8a 	uxtb.w	sl, sl
 800525c:	4652      	mov	r2, sl
 800525e:	3901      	subs	r1, #1
 8005260:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005264:	910d      	str	r1, [sp, #52]	@ 0x34
 8005266:	f7ff ff22 	bl	80050ae <__exponent>
 800526a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800526c:	4681      	mov	r9, r0
 800526e:	1813      	adds	r3, r2, r0
 8005270:	2a01      	cmp	r2, #1
 8005272:	6123      	str	r3, [r4, #16]
 8005274:	dc02      	bgt.n	800527c <_printf_float+0x158>
 8005276:	6822      	ldr	r2, [r4, #0]
 8005278:	07d2      	lsls	r2, r2, #31
 800527a:	d501      	bpl.n	8005280 <_printf_float+0x15c>
 800527c:	3301      	adds	r3, #1
 800527e:	6123      	str	r3, [r4, #16]
 8005280:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005284:	2b00      	cmp	r3, #0
 8005286:	d09e      	beq.n	80051c6 <_printf_float+0xa2>
 8005288:	232d      	movs	r3, #45	@ 0x2d
 800528a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800528e:	e79a      	b.n	80051c6 <_printf_float+0xa2>
 8005290:	2947      	cmp	r1, #71	@ 0x47
 8005292:	d1bf      	bne.n	8005214 <_printf_float+0xf0>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1bd      	bne.n	8005214 <_printf_float+0xf0>
 8005298:	2301      	movs	r3, #1
 800529a:	e7ba      	b.n	8005212 <_printf_float+0xee>
 800529c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80052a0:	d9dc      	bls.n	800525c <_printf_float+0x138>
 80052a2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80052a6:	d118      	bne.n	80052da <_printf_float+0x1b6>
 80052a8:	2900      	cmp	r1, #0
 80052aa:	6863      	ldr	r3, [r4, #4]
 80052ac:	dd0b      	ble.n	80052c6 <_printf_float+0x1a2>
 80052ae:	6121      	str	r1, [r4, #16]
 80052b0:	b913      	cbnz	r3, 80052b8 <_printf_float+0x194>
 80052b2:	6822      	ldr	r2, [r4, #0]
 80052b4:	07d0      	lsls	r0, r2, #31
 80052b6:	d502      	bpl.n	80052be <_printf_float+0x19a>
 80052b8:	3301      	adds	r3, #1
 80052ba:	440b      	add	r3, r1
 80052bc:	6123      	str	r3, [r4, #16]
 80052be:	f04f 0900 	mov.w	r9, #0
 80052c2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80052c4:	e7dc      	b.n	8005280 <_printf_float+0x15c>
 80052c6:	b913      	cbnz	r3, 80052ce <_printf_float+0x1aa>
 80052c8:	6822      	ldr	r2, [r4, #0]
 80052ca:	07d2      	lsls	r2, r2, #31
 80052cc:	d501      	bpl.n	80052d2 <_printf_float+0x1ae>
 80052ce:	3302      	adds	r3, #2
 80052d0:	e7f4      	b.n	80052bc <_printf_float+0x198>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e7f2      	b.n	80052bc <_printf_float+0x198>
 80052d6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80052da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052dc:	4299      	cmp	r1, r3
 80052de:	db05      	blt.n	80052ec <_printf_float+0x1c8>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	6121      	str	r1, [r4, #16]
 80052e4:	07d8      	lsls	r0, r3, #31
 80052e6:	d5ea      	bpl.n	80052be <_printf_float+0x19a>
 80052e8:	1c4b      	adds	r3, r1, #1
 80052ea:	e7e7      	b.n	80052bc <_printf_float+0x198>
 80052ec:	2900      	cmp	r1, #0
 80052ee:	bfcc      	ite	gt
 80052f0:	2201      	movgt	r2, #1
 80052f2:	f1c1 0202 	rsble	r2, r1, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	e7e0      	b.n	80052bc <_printf_float+0x198>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	055a      	lsls	r2, r3, #21
 80052fe:	d407      	bmi.n	8005310 <_printf_float+0x1ec>
 8005300:	6923      	ldr	r3, [r4, #16]
 8005302:	4642      	mov	r2, r8
 8005304:	4631      	mov	r1, r6
 8005306:	4628      	mov	r0, r5
 8005308:	47b8      	blx	r7
 800530a:	3001      	adds	r0, #1
 800530c:	d12b      	bne.n	8005366 <_printf_float+0x242>
 800530e:	e764      	b.n	80051da <_printf_float+0xb6>
 8005310:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005314:	f240 80dc 	bls.w	80054d0 <_printf_float+0x3ac>
 8005318:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800531c:	2200      	movs	r2, #0
 800531e:	2300      	movs	r3, #0
 8005320:	f7fb fb42 	bl	80009a8 <__aeabi_dcmpeq>
 8005324:	2800      	cmp	r0, #0
 8005326:	d033      	beq.n	8005390 <_printf_float+0x26c>
 8005328:	2301      	movs	r3, #1
 800532a:	4631      	mov	r1, r6
 800532c:	4628      	mov	r0, r5
 800532e:	4a35      	ldr	r2, [pc, #212]	@ (8005404 <_printf_float+0x2e0>)
 8005330:	47b8      	blx	r7
 8005332:	3001      	adds	r0, #1
 8005334:	f43f af51 	beq.w	80051da <_printf_float+0xb6>
 8005338:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800533c:	4543      	cmp	r3, r8
 800533e:	db02      	blt.n	8005346 <_printf_float+0x222>
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	07d8      	lsls	r0, r3, #31
 8005344:	d50f      	bpl.n	8005366 <_printf_float+0x242>
 8005346:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800534a:	4631      	mov	r1, r6
 800534c:	4628      	mov	r0, r5
 800534e:	47b8      	blx	r7
 8005350:	3001      	adds	r0, #1
 8005352:	f43f af42 	beq.w	80051da <_printf_float+0xb6>
 8005356:	f04f 0900 	mov.w	r9, #0
 800535a:	f108 38ff 	add.w	r8, r8, #4294967295
 800535e:	f104 0a1a 	add.w	sl, r4, #26
 8005362:	45c8      	cmp	r8, r9
 8005364:	dc09      	bgt.n	800537a <_printf_float+0x256>
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	079b      	lsls	r3, r3, #30
 800536a:	f100 8102 	bmi.w	8005572 <_printf_float+0x44e>
 800536e:	68e0      	ldr	r0, [r4, #12]
 8005370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005372:	4298      	cmp	r0, r3
 8005374:	bfb8      	it	lt
 8005376:	4618      	movlt	r0, r3
 8005378:	e731      	b.n	80051de <_printf_float+0xba>
 800537a:	2301      	movs	r3, #1
 800537c:	4652      	mov	r2, sl
 800537e:	4631      	mov	r1, r6
 8005380:	4628      	mov	r0, r5
 8005382:	47b8      	blx	r7
 8005384:	3001      	adds	r0, #1
 8005386:	f43f af28 	beq.w	80051da <_printf_float+0xb6>
 800538a:	f109 0901 	add.w	r9, r9, #1
 800538e:	e7e8      	b.n	8005362 <_printf_float+0x23e>
 8005390:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005392:	2b00      	cmp	r3, #0
 8005394:	dc38      	bgt.n	8005408 <_printf_float+0x2e4>
 8005396:	2301      	movs	r3, #1
 8005398:	4631      	mov	r1, r6
 800539a:	4628      	mov	r0, r5
 800539c:	4a19      	ldr	r2, [pc, #100]	@ (8005404 <_printf_float+0x2e0>)
 800539e:	47b8      	blx	r7
 80053a0:	3001      	adds	r0, #1
 80053a2:	f43f af1a 	beq.w	80051da <_printf_float+0xb6>
 80053a6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80053aa:	ea59 0303 	orrs.w	r3, r9, r3
 80053ae:	d102      	bne.n	80053b6 <_printf_float+0x292>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	07d9      	lsls	r1, r3, #31
 80053b4:	d5d7      	bpl.n	8005366 <_printf_float+0x242>
 80053b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053ba:	4631      	mov	r1, r6
 80053bc:	4628      	mov	r0, r5
 80053be:	47b8      	blx	r7
 80053c0:	3001      	adds	r0, #1
 80053c2:	f43f af0a 	beq.w	80051da <_printf_float+0xb6>
 80053c6:	f04f 0a00 	mov.w	sl, #0
 80053ca:	f104 0b1a 	add.w	fp, r4, #26
 80053ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053d0:	425b      	negs	r3, r3
 80053d2:	4553      	cmp	r3, sl
 80053d4:	dc01      	bgt.n	80053da <_printf_float+0x2b6>
 80053d6:	464b      	mov	r3, r9
 80053d8:	e793      	b.n	8005302 <_printf_float+0x1de>
 80053da:	2301      	movs	r3, #1
 80053dc:	465a      	mov	r2, fp
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	f43f aef8 	beq.w	80051da <_printf_float+0xb6>
 80053ea:	f10a 0a01 	add.w	sl, sl, #1
 80053ee:	e7ee      	b.n	80053ce <_printf_float+0x2aa>
 80053f0:	7fefffff 	.word	0x7fefffff
 80053f4:	08007f56 	.word	0x08007f56
 80053f8:	08007f5a 	.word	0x08007f5a
 80053fc:	08007f5e 	.word	0x08007f5e
 8005400:	08007f62 	.word	0x08007f62
 8005404:	08007f66 	.word	0x08007f66
 8005408:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800540a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800540e:	4553      	cmp	r3, sl
 8005410:	bfa8      	it	ge
 8005412:	4653      	movge	r3, sl
 8005414:	2b00      	cmp	r3, #0
 8005416:	4699      	mov	r9, r3
 8005418:	dc36      	bgt.n	8005488 <_printf_float+0x364>
 800541a:	f04f 0b00 	mov.w	fp, #0
 800541e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005422:	f104 021a 	add.w	r2, r4, #26
 8005426:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005428:	930a      	str	r3, [sp, #40]	@ 0x28
 800542a:	eba3 0309 	sub.w	r3, r3, r9
 800542e:	455b      	cmp	r3, fp
 8005430:	dc31      	bgt.n	8005496 <_printf_float+0x372>
 8005432:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005434:	459a      	cmp	sl, r3
 8005436:	dc3a      	bgt.n	80054ae <_printf_float+0x38a>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	07da      	lsls	r2, r3, #31
 800543c:	d437      	bmi.n	80054ae <_printf_float+0x38a>
 800543e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005440:	ebaa 0903 	sub.w	r9, sl, r3
 8005444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005446:	ebaa 0303 	sub.w	r3, sl, r3
 800544a:	4599      	cmp	r9, r3
 800544c:	bfa8      	it	ge
 800544e:	4699      	movge	r9, r3
 8005450:	f1b9 0f00 	cmp.w	r9, #0
 8005454:	dc33      	bgt.n	80054be <_printf_float+0x39a>
 8005456:	f04f 0800 	mov.w	r8, #0
 800545a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800545e:	f104 0b1a 	add.w	fp, r4, #26
 8005462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005464:	ebaa 0303 	sub.w	r3, sl, r3
 8005468:	eba3 0309 	sub.w	r3, r3, r9
 800546c:	4543      	cmp	r3, r8
 800546e:	f77f af7a 	ble.w	8005366 <_printf_float+0x242>
 8005472:	2301      	movs	r3, #1
 8005474:	465a      	mov	r2, fp
 8005476:	4631      	mov	r1, r6
 8005478:	4628      	mov	r0, r5
 800547a:	47b8      	blx	r7
 800547c:	3001      	adds	r0, #1
 800547e:	f43f aeac 	beq.w	80051da <_printf_float+0xb6>
 8005482:	f108 0801 	add.w	r8, r8, #1
 8005486:	e7ec      	b.n	8005462 <_printf_float+0x33e>
 8005488:	4642      	mov	r2, r8
 800548a:	4631      	mov	r1, r6
 800548c:	4628      	mov	r0, r5
 800548e:	47b8      	blx	r7
 8005490:	3001      	adds	r0, #1
 8005492:	d1c2      	bne.n	800541a <_printf_float+0x2f6>
 8005494:	e6a1      	b.n	80051da <_printf_float+0xb6>
 8005496:	2301      	movs	r3, #1
 8005498:	4631      	mov	r1, r6
 800549a:	4628      	mov	r0, r5
 800549c:	920a      	str	r2, [sp, #40]	@ 0x28
 800549e:	47b8      	blx	r7
 80054a0:	3001      	adds	r0, #1
 80054a2:	f43f ae9a 	beq.w	80051da <_printf_float+0xb6>
 80054a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054a8:	f10b 0b01 	add.w	fp, fp, #1
 80054ac:	e7bb      	b.n	8005426 <_printf_float+0x302>
 80054ae:	4631      	mov	r1, r6
 80054b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054b4:	4628      	mov	r0, r5
 80054b6:	47b8      	blx	r7
 80054b8:	3001      	adds	r0, #1
 80054ba:	d1c0      	bne.n	800543e <_printf_float+0x31a>
 80054bc:	e68d      	b.n	80051da <_printf_float+0xb6>
 80054be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054c0:	464b      	mov	r3, r9
 80054c2:	4631      	mov	r1, r6
 80054c4:	4628      	mov	r0, r5
 80054c6:	4442      	add	r2, r8
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	d1c3      	bne.n	8005456 <_printf_float+0x332>
 80054ce:	e684      	b.n	80051da <_printf_float+0xb6>
 80054d0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80054d4:	f1ba 0f01 	cmp.w	sl, #1
 80054d8:	dc01      	bgt.n	80054de <_printf_float+0x3ba>
 80054da:	07db      	lsls	r3, r3, #31
 80054dc:	d536      	bpl.n	800554c <_printf_float+0x428>
 80054de:	2301      	movs	r3, #1
 80054e0:	4642      	mov	r2, r8
 80054e2:	4631      	mov	r1, r6
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b8      	blx	r7
 80054e8:	3001      	adds	r0, #1
 80054ea:	f43f ae76 	beq.w	80051da <_printf_float+0xb6>
 80054ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054f2:	4631      	mov	r1, r6
 80054f4:	4628      	mov	r0, r5
 80054f6:	47b8      	blx	r7
 80054f8:	3001      	adds	r0, #1
 80054fa:	f43f ae6e 	beq.w	80051da <_printf_float+0xb6>
 80054fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005502:	2200      	movs	r2, #0
 8005504:	2300      	movs	r3, #0
 8005506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800550a:	f7fb fa4d 	bl	80009a8 <__aeabi_dcmpeq>
 800550e:	b9c0      	cbnz	r0, 8005542 <_printf_float+0x41e>
 8005510:	4653      	mov	r3, sl
 8005512:	f108 0201 	add.w	r2, r8, #1
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	47b8      	blx	r7
 800551c:	3001      	adds	r0, #1
 800551e:	d10c      	bne.n	800553a <_printf_float+0x416>
 8005520:	e65b      	b.n	80051da <_printf_float+0xb6>
 8005522:	2301      	movs	r3, #1
 8005524:	465a      	mov	r2, fp
 8005526:	4631      	mov	r1, r6
 8005528:	4628      	mov	r0, r5
 800552a:	47b8      	blx	r7
 800552c:	3001      	adds	r0, #1
 800552e:	f43f ae54 	beq.w	80051da <_printf_float+0xb6>
 8005532:	f108 0801 	add.w	r8, r8, #1
 8005536:	45d0      	cmp	r8, sl
 8005538:	dbf3      	blt.n	8005522 <_printf_float+0x3fe>
 800553a:	464b      	mov	r3, r9
 800553c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005540:	e6e0      	b.n	8005304 <_printf_float+0x1e0>
 8005542:	f04f 0800 	mov.w	r8, #0
 8005546:	f104 0b1a 	add.w	fp, r4, #26
 800554a:	e7f4      	b.n	8005536 <_printf_float+0x412>
 800554c:	2301      	movs	r3, #1
 800554e:	4642      	mov	r2, r8
 8005550:	e7e1      	b.n	8005516 <_printf_float+0x3f2>
 8005552:	2301      	movs	r3, #1
 8005554:	464a      	mov	r2, r9
 8005556:	4631      	mov	r1, r6
 8005558:	4628      	mov	r0, r5
 800555a:	47b8      	blx	r7
 800555c:	3001      	adds	r0, #1
 800555e:	f43f ae3c 	beq.w	80051da <_printf_float+0xb6>
 8005562:	f108 0801 	add.w	r8, r8, #1
 8005566:	68e3      	ldr	r3, [r4, #12]
 8005568:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800556a:	1a5b      	subs	r3, r3, r1
 800556c:	4543      	cmp	r3, r8
 800556e:	dcf0      	bgt.n	8005552 <_printf_float+0x42e>
 8005570:	e6fd      	b.n	800536e <_printf_float+0x24a>
 8005572:	f04f 0800 	mov.w	r8, #0
 8005576:	f104 0919 	add.w	r9, r4, #25
 800557a:	e7f4      	b.n	8005566 <_printf_float+0x442>

0800557c <_printf_common>:
 800557c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005580:	4616      	mov	r6, r2
 8005582:	4698      	mov	r8, r3
 8005584:	688a      	ldr	r2, [r1, #8]
 8005586:	690b      	ldr	r3, [r1, #16]
 8005588:	4607      	mov	r7, r0
 800558a:	4293      	cmp	r3, r2
 800558c:	bfb8      	it	lt
 800558e:	4613      	movlt	r3, r2
 8005590:	6033      	str	r3, [r6, #0]
 8005592:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005596:	460c      	mov	r4, r1
 8005598:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800559c:	b10a      	cbz	r2, 80055a2 <_printf_common+0x26>
 800559e:	3301      	adds	r3, #1
 80055a0:	6033      	str	r3, [r6, #0]
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	0699      	lsls	r1, r3, #26
 80055a6:	bf42      	ittt	mi
 80055a8:	6833      	ldrmi	r3, [r6, #0]
 80055aa:	3302      	addmi	r3, #2
 80055ac:	6033      	strmi	r3, [r6, #0]
 80055ae:	6825      	ldr	r5, [r4, #0]
 80055b0:	f015 0506 	ands.w	r5, r5, #6
 80055b4:	d106      	bne.n	80055c4 <_printf_common+0x48>
 80055b6:	f104 0a19 	add.w	sl, r4, #25
 80055ba:	68e3      	ldr	r3, [r4, #12]
 80055bc:	6832      	ldr	r2, [r6, #0]
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	42ab      	cmp	r3, r5
 80055c2:	dc2b      	bgt.n	800561c <_printf_common+0xa0>
 80055c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055c8:	6822      	ldr	r2, [r4, #0]
 80055ca:	3b00      	subs	r3, #0
 80055cc:	bf18      	it	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	0692      	lsls	r2, r2, #26
 80055d2:	d430      	bmi.n	8005636 <_printf_common+0xba>
 80055d4:	4641      	mov	r1, r8
 80055d6:	4638      	mov	r0, r7
 80055d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055dc:	47c8      	blx	r9
 80055de:	3001      	adds	r0, #1
 80055e0:	d023      	beq.n	800562a <_printf_common+0xae>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	6922      	ldr	r2, [r4, #16]
 80055e6:	f003 0306 	and.w	r3, r3, #6
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	bf14      	ite	ne
 80055ee:	2500      	movne	r5, #0
 80055f0:	6833      	ldreq	r3, [r6, #0]
 80055f2:	f04f 0600 	mov.w	r6, #0
 80055f6:	bf08      	it	eq
 80055f8:	68e5      	ldreq	r5, [r4, #12]
 80055fa:	f104 041a 	add.w	r4, r4, #26
 80055fe:	bf08      	it	eq
 8005600:	1aed      	subeq	r5, r5, r3
 8005602:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005606:	bf08      	it	eq
 8005608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800560c:	4293      	cmp	r3, r2
 800560e:	bfc4      	itt	gt
 8005610:	1a9b      	subgt	r3, r3, r2
 8005612:	18ed      	addgt	r5, r5, r3
 8005614:	42b5      	cmp	r5, r6
 8005616:	d11a      	bne.n	800564e <_printf_common+0xd2>
 8005618:	2000      	movs	r0, #0
 800561a:	e008      	b.n	800562e <_printf_common+0xb2>
 800561c:	2301      	movs	r3, #1
 800561e:	4652      	mov	r2, sl
 8005620:	4641      	mov	r1, r8
 8005622:	4638      	mov	r0, r7
 8005624:	47c8      	blx	r9
 8005626:	3001      	adds	r0, #1
 8005628:	d103      	bne.n	8005632 <_printf_common+0xb6>
 800562a:	f04f 30ff 	mov.w	r0, #4294967295
 800562e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005632:	3501      	adds	r5, #1
 8005634:	e7c1      	b.n	80055ba <_printf_common+0x3e>
 8005636:	2030      	movs	r0, #48	@ 0x30
 8005638:	18e1      	adds	r1, r4, r3
 800563a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005644:	4422      	add	r2, r4
 8005646:	3302      	adds	r3, #2
 8005648:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800564c:	e7c2      	b.n	80055d4 <_printf_common+0x58>
 800564e:	2301      	movs	r3, #1
 8005650:	4622      	mov	r2, r4
 8005652:	4641      	mov	r1, r8
 8005654:	4638      	mov	r0, r7
 8005656:	47c8      	blx	r9
 8005658:	3001      	adds	r0, #1
 800565a:	d0e6      	beq.n	800562a <_printf_common+0xae>
 800565c:	3601      	adds	r6, #1
 800565e:	e7d9      	b.n	8005614 <_printf_common+0x98>

08005660 <_printf_i>:
 8005660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005664:	7e0f      	ldrb	r7, [r1, #24]
 8005666:	4691      	mov	r9, r2
 8005668:	2f78      	cmp	r7, #120	@ 0x78
 800566a:	4680      	mov	r8, r0
 800566c:	460c      	mov	r4, r1
 800566e:	469a      	mov	sl, r3
 8005670:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005672:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005676:	d807      	bhi.n	8005688 <_printf_i+0x28>
 8005678:	2f62      	cmp	r7, #98	@ 0x62
 800567a:	d80a      	bhi.n	8005692 <_printf_i+0x32>
 800567c:	2f00      	cmp	r7, #0
 800567e:	f000 80d3 	beq.w	8005828 <_printf_i+0x1c8>
 8005682:	2f58      	cmp	r7, #88	@ 0x58
 8005684:	f000 80ba 	beq.w	80057fc <_printf_i+0x19c>
 8005688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800568c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005690:	e03a      	b.n	8005708 <_printf_i+0xa8>
 8005692:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005696:	2b15      	cmp	r3, #21
 8005698:	d8f6      	bhi.n	8005688 <_printf_i+0x28>
 800569a:	a101      	add	r1, pc, #4	@ (adr r1, 80056a0 <_printf_i+0x40>)
 800569c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056a0:	080056f9 	.word	0x080056f9
 80056a4:	0800570d 	.word	0x0800570d
 80056a8:	08005689 	.word	0x08005689
 80056ac:	08005689 	.word	0x08005689
 80056b0:	08005689 	.word	0x08005689
 80056b4:	08005689 	.word	0x08005689
 80056b8:	0800570d 	.word	0x0800570d
 80056bc:	08005689 	.word	0x08005689
 80056c0:	08005689 	.word	0x08005689
 80056c4:	08005689 	.word	0x08005689
 80056c8:	08005689 	.word	0x08005689
 80056cc:	0800580f 	.word	0x0800580f
 80056d0:	08005737 	.word	0x08005737
 80056d4:	080057c9 	.word	0x080057c9
 80056d8:	08005689 	.word	0x08005689
 80056dc:	08005689 	.word	0x08005689
 80056e0:	08005831 	.word	0x08005831
 80056e4:	08005689 	.word	0x08005689
 80056e8:	08005737 	.word	0x08005737
 80056ec:	08005689 	.word	0x08005689
 80056f0:	08005689 	.word	0x08005689
 80056f4:	080057d1 	.word	0x080057d1
 80056f8:	6833      	ldr	r3, [r6, #0]
 80056fa:	1d1a      	adds	r2, r3, #4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6032      	str	r2, [r6, #0]
 8005700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005704:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005708:	2301      	movs	r3, #1
 800570a:	e09e      	b.n	800584a <_printf_i+0x1ea>
 800570c:	6833      	ldr	r3, [r6, #0]
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	1d19      	adds	r1, r3, #4
 8005712:	6031      	str	r1, [r6, #0]
 8005714:	0606      	lsls	r6, r0, #24
 8005716:	d501      	bpl.n	800571c <_printf_i+0xbc>
 8005718:	681d      	ldr	r5, [r3, #0]
 800571a:	e003      	b.n	8005724 <_printf_i+0xc4>
 800571c:	0645      	lsls	r5, r0, #25
 800571e:	d5fb      	bpl.n	8005718 <_printf_i+0xb8>
 8005720:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005724:	2d00      	cmp	r5, #0
 8005726:	da03      	bge.n	8005730 <_printf_i+0xd0>
 8005728:	232d      	movs	r3, #45	@ 0x2d
 800572a:	426d      	negs	r5, r5
 800572c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005730:	230a      	movs	r3, #10
 8005732:	4859      	ldr	r0, [pc, #356]	@ (8005898 <_printf_i+0x238>)
 8005734:	e011      	b.n	800575a <_printf_i+0xfa>
 8005736:	6821      	ldr	r1, [r4, #0]
 8005738:	6833      	ldr	r3, [r6, #0]
 800573a:	0608      	lsls	r0, r1, #24
 800573c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005740:	d402      	bmi.n	8005748 <_printf_i+0xe8>
 8005742:	0649      	lsls	r1, r1, #25
 8005744:	bf48      	it	mi
 8005746:	b2ad      	uxthmi	r5, r5
 8005748:	2f6f      	cmp	r7, #111	@ 0x6f
 800574a:	6033      	str	r3, [r6, #0]
 800574c:	bf14      	ite	ne
 800574e:	230a      	movne	r3, #10
 8005750:	2308      	moveq	r3, #8
 8005752:	4851      	ldr	r0, [pc, #324]	@ (8005898 <_printf_i+0x238>)
 8005754:	2100      	movs	r1, #0
 8005756:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800575a:	6866      	ldr	r6, [r4, #4]
 800575c:	2e00      	cmp	r6, #0
 800575e:	bfa8      	it	ge
 8005760:	6821      	ldrge	r1, [r4, #0]
 8005762:	60a6      	str	r6, [r4, #8]
 8005764:	bfa4      	itt	ge
 8005766:	f021 0104 	bicge.w	r1, r1, #4
 800576a:	6021      	strge	r1, [r4, #0]
 800576c:	b90d      	cbnz	r5, 8005772 <_printf_i+0x112>
 800576e:	2e00      	cmp	r6, #0
 8005770:	d04b      	beq.n	800580a <_printf_i+0x1aa>
 8005772:	4616      	mov	r6, r2
 8005774:	fbb5 f1f3 	udiv	r1, r5, r3
 8005778:	fb03 5711 	mls	r7, r3, r1, r5
 800577c:	5dc7      	ldrb	r7, [r0, r7]
 800577e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005782:	462f      	mov	r7, r5
 8005784:	42bb      	cmp	r3, r7
 8005786:	460d      	mov	r5, r1
 8005788:	d9f4      	bls.n	8005774 <_printf_i+0x114>
 800578a:	2b08      	cmp	r3, #8
 800578c:	d10b      	bne.n	80057a6 <_printf_i+0x146>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	07df      	lsls	r7, r3, #31
 8005792:	d508      	bpl.n	80057a6 <_printf_i+0x146>
 8005794:	6923      	ldr	r3, [r4, #16]
 8005796:	6861      	ldr	r1, [r4, #4]
 8005798:	4299      	cmp	r1, r3
 800579a:	bfde      	ittt	le
 800579c:	2330      	movle	r3, #48	@ 0x30
 800579e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057a6:	1b92      	subs	r2, r2, r6
 80057a8:	6122      	str	r2, [r4, #16]
 80057aa:	464b      	mov	r3, r9
 80057ac:	4621      	mov	r1, r4
 80057ae:	4640      	mov	r0, r8
 80057b0:	f8cd a000 	str.w	sl, [sp]
 80057b4:	aa03      	add	r2, sp, #12
 80057b6:	f7ff fee1 	bl	800557c <_printf_common>
 80057ba:	3001      	adds	r0, #1
 80057bc:	d14a      	bne.n	8005854 <_printf_i+0x1f4>
 80057be:	f04f 30ff 	mov.w	r0, #4294967295
 80057c2:	b004      	add	sp, #16
 80057c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	f043 0320 	orr.w	r3, r3, #32
 80057ce:	6023      	str	r3, [r4, #0]
 80057d0:	2778      	movs	r7, #120	@ 0x78
 80057d2:	4832      	ldr	r0, [pc, #200]	@ (800589c <_printf_i+0x23c>)
 80057d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	6831      	ldr	r1, [r6, #0]
 80057dc:	061f      	lsls	r7, r3, #24
 80057de:	f851 5b04 	ldr.w	r5, [r1], #4
 80057e2:	d402      	bmi.n	80057ea <_printf_i+0x18a>
 80057e4:	065f      	lsls	r7, r3, #25
 80057e6:	bf48      	it	mi
 80057e8:	b2ad      	uxthmi	r5, r5
 80057ea:	6031      	str	r1, [r6, #0]
 80057ec:	07d9      	lsls	r1, r3, #31
 80057ee:	bf44      	itt	mi
 80057f0:	f043 0320 	orrmi.w	r3, r3, #32
 80057f4:	6023      	strmi	r3, [r4, #0]
 80057f6:	b11d      	cbz	r5, 8005800 <_printf_i+0x1a0>
 80057f8:	2310      	movs	r3, #16
 80057fa:	e7ab      	b.n	8005754 <_printf_i+0xf4>
 80057fc:	4826      	ldr	r0, [pc, #152]	@ (8005898 <_printf_i+0x238>)
 80057fe:	e7e9      	b.n	80057d4 <_printf_i+0x174>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	f023 0320 	bic.w	r3, r3, #32
 8005806:	6023      	str	r3, [r4, #0]
 8005808:	e7f6      	b.n	80057f8 <_printf_i+0x198>
 800580a:	4616      	mov	r6, r2
 800580c:	e7bd      	b.n	800578a <_printf_i+0x12a>
 800580e:	6833      	ldr	r3, [r6, #0]
 8005810:	6825      	ldr	r5, [r4, #0]
 8005812:	1d18      	adds	r0, r3, #4
 8005814:	6961      	ldr	r1, [r4, #20]
 8005816:	6030      	str	r0, [r6, #0]
 8005818:	062e      	lsls	r6, r5, #24
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	d501      	bpl.n	8005822 <_printf_i+0x1c2>
 800581e:	6019      	str	r1, [r3, #0]
 8005820:	e002      	b.n	8005828 <_printf_i+0x1c8>
 8005822:	0668      	lsls	r0, r5, #25
 8005824:	d5fb      	bpl.n	800581e <_printf_i+0x1be>
 8005826:	8019      	strh	r1, [r3, #0]
 8005828:	2300      	movs	r3, #0
 800582a:	4616      	mov	r6, r2
 800582c:	6123      	str	r3, [r4, #16]
 800582e:	e7bc      	b.n	80057aa <_printf_i+0x14a>
 8005830:	6833      	ldr	r3, [r6, #0]
 8005832:	2100      	movs	r1, #0
 8005834:	1d1a      	adds	r2, r3, #4
 8005836:	6032      	str	r2, [r6, #0]
 8005838:	681e      	ldr	r6, [r3, #0]
 800583a:	6862      	ldr	r2, [r4, #4]
 800583c:	4630      	mov	r0, r6
 800583e:	f000 faec 	bl	8005e1a <memchr>
 8005842:	b108      	cbz	r0, 8005848 <_printf_i+0x1e8>
 8005844:	1b80      	subs	r0, r0, r6
 8005846:	6060      	str	r0, [r4, #4]
 8005848:	6863      	ldr	r3, [r4, #4]
 800584a:	6123      	str	r3, [r4, #16]
 800584c:	2300      	movs	r3, #0
 800584e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005852:	e7aa      	b.n	80057aa <_printf_i+0x14a>
 8005854:	4632      	mov	r2, r6
 8005856:	4649      	mov	r1, r9
 8005858:	4640      	mov	r0, r8
 800585a:	6923      	ldr	r3, [r4, #16]
 800585c:	47d0      	blx	sl
 800585e:	3001      	adds	r0, #1
 8005860:	d0ad      	beq.n	80057be <_printf_i+0x15e>
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	079b      	lsls	r3, r3, #30
 8005866:	d413      	bmi.n	8005890 <_printf_i+0x230>
 8005868:	68e0      	ldr	r0, [r4, #12]
 800586a:	9b03      	ldr	r3, [sp, #12]
 800586c:	4298      	cmp	r0, r3
 800586e:	bfb8      	it	lt
 8005870:	4618      	movlt	r0, r3
 8005872:	e7a6      	b.n	80057c2 <_printf_i+0x162>
 8005874:	2301      	movs	r3, #1
 8005876:	4632      	mov	r2, r6
 8005878:	4649      	mov	r1, r9
 800587a:	4640      	mov	r0, r8
 800587c:	47d0      	blx	sl
 800587e:	3001      	adds	r0, #1
 8005880:	d09d      	beq.n	80057be <_printf_i+0x15e>
 8005882:	3501      	adds	r5, #1
 8005884:	68e3      	ldr	r3, [r4, #12]
 8005886:	9903      	ldr	r1, [sp, #12]
 8005888:	1a5b      	subs	r3, r3, r1
 800588a:	42ab      	cmp	r3, r5
 800588c:	dcf2      	bgt.n	8005874 <_printf_i+0x214>
 800588e:	e7eb      	b.n	8005868 <_printf_i+0x208>
 8005890:	2500      	movs	r5, #0
 8005892:	f104 0619 	add.w	r6, r4, #25
 8005896:	e7f5      	b.n	8005884 <_printf_i+0x224>
 8005898:	08007f68 	.word	0x08007f68
 800589c:	08007f79 	.word	0x08007f79

080058a0 <std>:
 80058a0:	2300      	movs	r3, #0
 80058a2:	b510      	push	{r4, lr}
 80058a4:	4604      	mov	r4, r0
 80058a6:	e9c0 3300 	strd	r3, r3, [r0]
 80058aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058ae:	6083      	str	r3, [r0, #8]
 80058b0:	8181      	strh	r1, [r0, #12]
 80058b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80058b4:	81c2      	strh	r2, [r0, #14]
 80058b6:	6183      	str	r3, [r0, #24]
 80058b8:	4619      	mov	r1, r3
 80058ba:	2208      	movs	r2, #8
 80058bc:	305c      	adds	r0, #92	@ 0x5c
 80058be:	f000 fa2d 	bl	8005d1c <memset>
 80058c2:	4b0d      	ldr	r3, [pc, #52]	@ (80058f8 <std+0x58>)
 80058c4:	6224      	str	r4, [r4, #32]
 80058c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80058c8:	4b0c      	ldr	r3, [pc, #48]	@ (80058fc <std+0x5c>)
 80058ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005900 <std+0x60>)
 80058ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005904 <std+0x64>)
 80058d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80058d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005908 <std+0x68>)
 80058d6:	429c      	cmp	r4, r3
 80058d8:	d006      	beq.n	80058e8 <std+0x48>
 80058da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058de:	4294      	cmp	r4, r2
 80058e0:	d002      	beq.n	80058e8 <std+0x48>
 80058e2:	33d0      	adds	r3, #208	@ 0xd0
 80058e4:	429c      	cmp	r4, r3
 80058e6:	d105      	bne.n	80058f4 <std+0x54>
 80058e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f0:	f000 ba90 	b.w	8005e14 <__retarget_lock_init_recursive>
 80058f4:	bd10      	pop	{r4, pc}
 80058f6:	bf00      	nop
 80058f8:	08005b6d 	.word	0x08005b6d
 80058fc:	08005b8f 	.word	0x08005b8f
 8005900:	08005bc7 	.word	0x08005bc7
 8005904:	08005beb 	.word	0x08005beb
 8005908:	20000754 	.word	0x20000754

0800590c <stdio_exit_handler>:
 800590c:	4a02      	ldr	r2, [pc, #8]	@ (8005918 <stdio_exit_handler+0xc>)
 800590e:	4903      	ldr	r1, [pc, #12]	@ (800591c <stdio_exit_handler+0x10>)
 8005910:	4803      	ldr	r0, [pc, #12]	@ (8005920 <stdio_exit_handler+0x14>)
 8005912:	f000 b869 	b.w	80059e8 <_fwalk_sglue>
 8005916:	bf00      	nop
 8005918:	2000000c 	.word	0x2000000c
 800591c:	08007a25 	.word	0x08007a25
 8005920:	2000001c 	.word	0x2000001c

08005924 <cleanup_stdio>:
 8005924:	6841      	ldr	r1, [r0, #4]
 8005926:	4b0c      	ldr	r3, [pc, #48]	@ (8005958 <cleanup_stdio+0x34>)
 8005928:	b510      	push	{r4, lr}
 800592a:	4299      	cmp	r1, r3
 800592c:	4604      	mov	r4, r0
 800592e:	d001      	beq.n	8005934 <cleanup_stdio+0x10>
 8005930:	f002 f878 	bl	8007a24 <_fflush_r>
 8005934:	68a1      	ldr	r1, [r4, #8]
 8005936:	4b09      	ldr	r3, [pc, #36]	@ (800595c <cleanup_stdio+0x38>)
 8005938:	4299      	cmp	r1, r3
 800593a:	d002      	beq.n	8005942 <cleanup_stdio+0x1e>
 800593c:	4620      	mov	r0, r4
 800593e:	f002 f871 	bl	8007a24 <_fflush_r>
 8005942:	68e1      	ldr	r1, [r4, #12]
 8005944:	4b06      	ldr	r3, [pc, #24]	@ (8005960 <cleanup_stdio+0x3c>)
 8005946:	4299      	cmp	r1, r3
 8005948:	d004      	beq.n	8005954 <cleanup_stdio+0x30>
 800594a:	4620      	mov	r0, r4
 800594c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005950:	f002 b868 	b.w	8007a24 <_fflush_r>
 8005954:	bd10      	pop	{r4, pc}
 8005956:	bf00      	nop
 8005958:	20000754 	.word	0x20000754
 800595c:	200007bc 	.word	0x200007bc
 8005960:	20000824 	.word	0x20000824

08005964 <global_stdio_init.part.0>:
 8005964:	b510      	push	{r4, lr}
 8005966:	4b0b      	ldr	r3, [pc, #44]	@ (8005994 <global_stdio_init.part.0+0x30>)
 8005968:	4c0b      	ldr	r4, [pc, #44]	@ (8005998 <global_stdio_init.part.0+0x34>)
 800596a:	4a0c      	ldr	r2, [pc, #48]	@ (800599c <global_stdio_init.part.0+0x38>)
 800596c:	4620      	mov	r0, r4
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	2104      	movs	r1, #4
 8005972:	2200      	movs	r2, #0
 8005974:	f7ff ff94 	bl	80058a0 <std>
 8005978:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800597c:	2201      	movs	r2, #1
 800597e:	2109      	movs	r1, #9
 8005980:	f7ff ff8e 	bl	80058a0 <std>
 8005984:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005988:	2202      	movs	r2, #2
 800598a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800598e:	2112      	movs	r1, #18
 8005990:	f7ff bf86 	b.w	80058a0 <std>
 8005994:	2000088c 	.word	0x2000088c
 8005998:	20000754 	.word	0x20000754
 800599c:	0800590d 	.word	0x0800590d

080059a0 <__sfp_lock_acquire>:
 80059a0:	4801      	ldr	r0, [pc, #4]	@ (80059a8 <__sfp_lock_acquire+0x8>)
 80059a2:	f000 ba38 	b.w	8005e16 <__retarget_lock_acquire_recursive>
 80059a6:	bf00      	nop
 80059a8:	20000895 	.word	0x20000895

080059ac <__sfp_lock_release>:
 80059ac:	4801      	ldr	r0, [pc, #4]	@ (80059b4 <__sfp_lock_release+0x8>)
 80059ae:	f000 ba33 	b.w	8005e18 <__retarget_lock_release_recursive>
 80059b2:	bf00      	nop
 80059b4:	20000895 	.word	0x20000895

080059b8 <__sinit>:
 80059b8:	b510      	push	{r4, lr}
 80059ba:	4604      	mov	r4, r0
 80059bc:	f7ff fff0 	bl	80059a0 <__sfp_lock_acquire>
 80059c0:	6a23      	ldr	r3, [r4, #32]
 80059c2:	b11b      	cbz	r3, 80059cc <__sinit+0x14>
 80059c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c8:	f7ff bff0 	b.w	80059ac <__sfp_lock_release>
 80059cc:	4b04      	ldr	r3, [pc, #16]	@ (80059e0 <__sinit+0x28>)
 80059ce:	6223      	str	r3, [r4, #32]
 80059d0:	4b04      	ldr	r3, [pc, #16]	@ (80059e4 <__sinit+0x2c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1f5      	bne.n	80059c4 <__sinit+0xc>
 80059d8:	f7ff ffc4 	bl	8005964 <global_stdio_init.part.0>
 80059dc:	e7f2      	b.n	80059c4 <__sinit+0xc>
 80059de:	bf00      	nop
 80059e0:	08005925 	.word	0x08005925
 80059e4:	2000088c 	.word	0x2000088c

080059e8 <_fwalk_sglue>:
 80059e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059ec:	4607      	mov	r7, r0
 80059ee:	4688      	mov	r8, r1
 80059f0:	4614      	mov	r4, r2
 80059f2:	2600      	movs	r6, #0
 80059f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059f8:	f1b9 0901 	subs.w	r9, r9, #1
 80059fc:	d505      	bpl.n	8005a0a <_fwalk_sglue+0x22>
 80059fe:	6824      	ldr	r4, [r4, #0]
 8005a00:	2c00      	cmp	r4, #0
 8005a02:	d1f7      	bne.n	80059f4 <_fwalk_sglue+0xc>
 8005a04:	4630      	mov	r0, r6
 8005a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a0a:	89ab      	ldrh	r3, [r5, #12]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d907      	bls.n	8005a20 <_fwalk_sglue+0x38>
 8005a10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a14:	3301      	adds	r3, #1
 8005a16:	d003      	beq.n	8005a20 <_fwalk_sglue+0x38>
 8005a18:	4629      	mov	r1, r5
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	47c0      	blx	r8
 8005a1e:	4306      	orrs	r6, r0
 8005a20:	3568      	adds	r5, #104	@ 0x68
 8005a22:	e7e9      	b.n	80059f8 <_fwalk_sglue+0x10>

08005a24 <iprintf>:
 8005a24:	b40f      	push	{r0, r1, r2, r3}
 8005a26:	b507      	push	{r0, r1, r2, lr}
 8005a28:	4906      	ldr	r1, [pc, #24]	@ (8005a44 <iprintf+0x20>)
 8005a2a:	ab04      	add	r3, sp, #16
 8005a2c:	6808      	ldr	r0, [r1, #0]
 8005a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a32:	6881      	ldr	r1, [r0, #8]
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	f001 fe5d 	bl	80076f4 <_vfiprintf_r>
 8005a3a:	b003      	add	sp, #12
 8005a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a40:	b004      	add	sp, #16
 8005a42:	4770      	bx	lr
 8005a44:	20000018 	.word	0x20000018

08005a48 <_puts_r>:
 8005a48:	6a03      	ldr	r3, [r0, #32]
 8005a4a:	b570      	push	{r4, r5, r6, lr}
 8005a4c:	4605      	mov	r5, r0
 8005a4e:	460e      	mov	r6, r1
 8005a50:	6884      	ldr	r4, [r0, #8]
 8005a52:	b90b      	cbnz	r3, 8005a58 <_puts_r+0x10>
 8005a54:	f7ff ffb0 	bl	80059b8 <__sinit>
 8005a58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a5a:	07db      	lsls	r3, r3, #31
 8005a5c:	d405      	bmi.n	8005a6a <_puts_r+0x22>
 8005a5e:	89a3      	ldrh	r3, [r4, #12]
 8005a60:	0598      	lsls	r0, r3, #22
 8005a62:	d402      	bmi.n	8005a6a <_puts_r+0x22>
 8005a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a66:	f000 f9d6 	bl	8005e16 <__retarget_lock_acquire_recursive>
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	0719      	lsls	r1, r3, #28
 8005a6e:	d502      	bpl.n	8005a76 <_puts_r+0x2e>
 8005a70:	6923      	ldr	r3, [r4, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d135      	bne.n	8005ae2 <_puts_r+0x9a>
 8005a76:	4621      	mov	r1, r4
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 f8f9 	bl	8005c70 <__swsetup_r>
 8005a7e:	b380      	cbz	r0, 8005ae2 <_puts_r+0x9a>
 8005a80:	f04f 35ff 	mov.w	r5, #4294967295
 8005a84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a86:	07da      	lsls	r2, r3, #31
 8005a88:	d405      	bmi.n	8005a96 <_puts_r+0x4e>
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	059b      	lsls	r3, r3, #22
 8005a8e:	d402      	bmi.n	8005a96 <_puts_r+0x4e>
 8005a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a92:	f000 f9c1 	bl	8005e18 <__retarget_lock_release_recursive>
 8005a96:	4628      	mov	r0, r5
 8005a98:	bd70      	pop	{r4, r5, r6, pc}
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	da04      	bge.n	8005aa8 <_puts_r+0x60>
 8005a9e:	69a2      	ldr	r2, [r4, #24]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	dc17      	bgt.n	8005ad4 <_puts_r+0x8c>
 8005aa4:	290a      	cmp	r1, #10
 8005aa6:	d015      	beq.n	8005ad4 <_puts_r+0x8c>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	6022      	str	r2, [r4, #0]
 8005aae:	7019      	strb	r1, [r3, #0]
 8005ab0:	68a3      	ldr	r3, [r4, #8]
 8005ab2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	60a3      	str	r3, [r4, #8]
 8005aba:	2900      	cmp	r1, #0
 8005abc:	d1ed      	bne.n	8005a9a <_puts_r+0x52>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	da11      	bge.n	8005ae6 <_puts_r+0x9e>
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	210a      	movs	r1, #10
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 f893 	bl	8005bf2 <__swbuf_r>
 8005acc:	3001      	adds	r0, #1
 8005ace:	d0d7      	beq.n	8005a80 <_puts_r+0x38>
 8005ad0:	250a      	movs	r5, #10
 8005ad2:	e7d7      	b.n	8005a84 <_puts_r+0x3c>
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 f88b 	bl	8005bf2 <__swbuf_r>
 8005adc:	3001      	adds	r0, #1
 8005ade:	d1e7      	bne.n	8005ab0 <_puts_r+0x68>
 8005ae0:	e7ce      	b.n	8005a80 <_puts_r+0x38>
 8005ae2:	3e01      	subs	r6, #1
 8005ae4:	e7e4      	b.n	8005ab0 <_puts_r+0x68>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	6022      	str	r2, [r4, #0]
 8005aec:	220a      	movs	r2, #10
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	e7ee      	b.n	8005ad0 <_puts_r+0x88>
	...

08005af4 <puts>:
 8005af4:	4b02      	ldr	r3, [pc, #8]	@ (8005b00 <puts+0xc>)
 8005af6:	4601      	mov	r1, r0
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	f7ff bfa5 	b.w	8005a48 <_puts_r>
 8005afe:	bf00      	nop
 8005b00:	20000018 	.word	0x20000018

08005b04 <sniprintf>:
 8005b04:	b40c      	push	{r2, r3}
 8005b06:	b530      	push	{r4, r5, lr}
 8005b08:	4b17      	ldr	r3, [pc, #92]	@ (8005b68 <sniprintf+0x64>)
 8005b0a:	1e0c      	subs	r4, r1, #0
 8005b0c:	681d      	ldr	r5, [r3, #0]
 8005b0e:	b09d      	sub	sp, #116	@ 0x74
 8005b10:	da08      	bge.n	8005b24 <sniprintf+0x20>
 8005b12:	238b      	movs	r3, #139	@ 0x8b
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295
 8005b18:	602b      	str	r3, [r5, #0]
 8005b1a:	b01d      	add	sp, #116	@ 0x74
 8005b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b20:	b002      	add	sp, #8
 8005b22:	4770      	bx	lr
 8005b24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005b28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b2c:	bf0c      	ite	eq
 8005b2e:	4623      	moveq	r3, r4
 8005b30:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	9307      	str	r3, [sp, #28]
 8005b38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b3c:	9002      	str	r0, [sp, #8]
 8005b3e:	9006      	str	r0, [sp, #24]
 8005b40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b44:	4628      	mov	r0, r5
 8005b46:	ab21      	add	r3, sp, #132	@ 0x84
 8005b48:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b4a:	a902      	add	r1, sp, #8
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	f001 fcad 	bl	80074ac <_svfiprintf_r>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	bfbc      	itt	lt
 8005b56:	238b      	movlt	r3, #139	@ 0x8b
 8005b58:	602b      	strlt	r3, [r5, #0]
 8005b5a:	2c00      	cmp	r4, #0
 8005b5c:	d0dd      	beq.n	8005b1a <sniprintf+0x16>
 8005b5e:	2200      	movs	r2, #0
 8005b60:	9b02      	ldr	r3, [sp, #8]
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	e7d9      	b.n	8005b1a <sniprintf+0x16>
 8005b66:	bf00      	nop
 8005b68:	20000018 	.word	0x20000018

08005b6c <__sread>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	460c      	mov	r4, r1
 8005b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b74:	f000 f900 	bl	8005d78 <_read_r>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	bfab      	itete	ge
 8005b7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b80:	181b      	addge	r3, r3, r0
 8005b82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b86:	bfac      	ite	ge
 8005b88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b8a:	81a3      	strhlt	r3, [r4, #12]
 8005b8c:	bd10      	pop	{r4, pc}

08005b8e <__swrite>:
 8005b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b92:	461f      	mov	r7, r3
 8005b94:	898b      	ldrh	r3, [r1, #12]
 8005b96:	4605      	mov	r5, r0
 8005b98:	05db      	lsls	r3, r3, #23
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	4616      	mov	r6, r2
 8005b9e:	d505      	bpl.n	8005bac <__swrite+0x1e>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba8:	f000 f8d4 	bl	8005d54 <_lseek_r>
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	4632      	mov	r2, r6
 8005bb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bb4:	81a3      	strh	r3, [r4, #12]
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	463b      	mov	r3, r7
 8005bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc2:	f000 b8eb 	b.w	8005d9c <_write_r>

08005bc6 <__sseek>:
 8005bc6:	b510      	push	{r4, lr}
 8005bc8:	460c      	mov	r4, r1
 8005bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bce:	f000 f8c1 	bl	8005d54 <_lseek_r>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	bf15      	itete	ne
 8005bd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005bda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005bde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005be2:	81a3      	strheq	r3, [r4, #12]
 8005be4:	bf18      	it	ne
 8005be6:	81a3      	strhne	r3, [r4, #12]
 8005be8:	bd10      	pop	{r4, pc}

08005bea <__sclose>:
 8005bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bee:	f000 b8a1 	b.w	8005d34 <_close_r>

08005bf2 <__swbuf_r>:
 8005bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf4:	460e      	mov	r6, r1
 8005bf6:	4614      	mov	r4, r2
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	b118      	cbz	r0, 8005c04 <__swbuf_r+0x12>
 8005bfc:	6a03      	ldr	r3, [r0, #32]
 8005bfe:	b90b      	cbnz	r3, 8005c04 <__swbuf_r+0x12>
 8005c00:	f7ff feda 	bl	80059b8 <__sinit>
 8005c04:	69a3      	ldr	r3, [r4, #24]
 8005c06:	60a3      	str	r3, [r4, #8]
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	071a      	lsls	r2, r3, #28
 8005c0c:	d501      	bpl.n	8005c12 <__swbuf_r+0x20>
 8005c0e:	6923      	ldr	r3, [r4, #16]
 8005c10:	b943      	cbnz	r3, 8005c24 <__swbuf_r+0x32>
 8005c12:	4621      	mov	r1, r4
 8005c14:	4628      	mov	r0, r5
 8005c16:	f000 f82b 	bl	8005c70 <__swsetup_r>
 8005c1a:	b118      	cbz	r0, 8005c24 <__swbuf_r+0x32>
 8005c1c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c20:	4638      	mov	r0, r7
 8005c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	6922      	ldr	r2, [r4, #16]
 8005c28:	b2f6      	uxtb	r6, r6
 8005c2a:	1a98      	subs	r0, r3, r2
 8005c2c:	6963      	ldr	r3, [r4, #20]
 8005c2e:	4637      	mov	r7, r6
 8005c30:	4283      	cmp	r3, r0
 8005c32:	dc05      	bgt.n	8005c40 <__swbuf_r+0x4e>
 8005c34:	4621      	mov	r1, r4
 8005c36:	4628      	mov	r0, r5
 8005c38:	f001 fef4 	bl	8007a24 <_fflush_r>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	d1ed      	bne.n	8005c1c <__swbuf_r+0x2a>
 8005c40:	68a3      	ldr	r3, [r4, #8]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	60a3      	str	r3, [r4, #8]
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	6022      	str	r2, [r4, #0]
 8005c4c:	701e      	strb	r6, [r3, #0]
 8005c4e:	6962      	ldr	r2, [r4, #20]
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d004      	beq.n	8005c60 <__swbuf_r+0x6e>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	07db      	lsls	r3, r3, #31
 8005c5a:	d5e1      	bpl.n	8005c20 <__swbuf_r+0x2e>
 8005c5c:	2e0a      	cmp	r6, #10
 8005c5e:	d1df      	bne.n	8005c20 <__swbuf_r+0x2e>
 8005c60:	4621      	mov	r1, r4
 8005c62:	4628      	mov	r0, r5
 8005c64:	f001 fede 	bl	8007a24 <_fflush_r>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d0d9      	beq.n	8005c20 <__swbuf_r+0x2e>
 8005c6c:	e7d6      	b.n	8005c1c <__swbuf_r+0x2a>
	...

08005c70 <__swsetup_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4b29      	ldr	r3, [pc, #164]	@ (8005d18 <__swsetup_r+0xa8>)
 8005c74:	4605      	mov	r5, r0
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	460c      	mov	r4, r1
 8005c7a:	b118      	cbz	r0, 8005c84 <__swsetup_r+0x14>
 8005c7c:	6a03      	ldr	r3, [r0, #32]
 8005c7e:	b90b      	cbnz	r3, 8005c84 <__swsetup_r+0x14>
 8005c80:	f7ff fe9a 	bl	80059b8 <__sinit>
 8005c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c88:	0719      	lsls	r1, r3, #28
 8005c8a:	d422      	bmi.n	8005cd2 <__swsetup_r+0x62>
 8005c8c:	06da      	lsls	r2, r3, #27
 8005c8e:	d407      	bmi.n	8005ca0 <__swsetup_r+0x30>
 8005c90:	2209      	movs	r2, #9
 8005c92:	602a      	str	r2, [r5, #0]
 8005c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c98:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	e033      	b.n	8005d08 <__swsetup_r+0x98>
 8005ca0:	0758      	lsls	r0, r3, #29
 8005ca2:	d512      	bpl.n	8005cca <__swsetup_r+0x5a>
 8005ca4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ca6:	b141      	cbz	r1, 8005cba <__swsetup_r+0x4a>
 8005ca8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cac:	4299      	cmp	r1, r3
 8005cae:	d002      	beq.n	8005cb6 <__swsetup_r+0x46>
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f000 ff21 	bl	8006af8 <_free_r>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cba:	89a3      	ldrh	r3, [r4, #12]
 8005cbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005cc0:	81a3      	strh	r3, [r4, #12]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6063      	str	r3, [r4, #4]
 8005cc6:	6923      	ldr	r3, [r4, #16]
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	89a3      	ldrh	r3, [r4, #12]
 8005ccc:	f043 0308 	orr.w	r3, r3, #8
 8005cd0:	81a3      	strh	r3, [r4, #12]
 8005cd2:	6923      	ldr	r3, [r4, #16]
 8005cd4:	b94b      	cbnz	r3, 8005cea <__swsetup_r+0x7a>
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ce0:	d003      	beq.n	8005cea <__swsetup_r+0x7a>
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f001 feea 	bl	8007abe <__smakebuf_r>
 8005cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cee:	f013 0201 	ands.w	r2, r3, #1
 8005cf2:	d00a      	beq.n	8005d0a <__swsetup_r+0x9a>
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	60a2      	str	r2, [r4, #8]
 8005cf8:	6962      	ldr	r2, [r4, #20]
 8005cfa:	4252      	negs	r2, r2
 8005cfc:	61a2      	str	r2, [r4, #24]
 8005cfe:	6922      	ldr	r2, [r4, #16]
 8005d00:	b942      	cbnz	r2, 8005d14 <__swsetup_r+0xa4>
 8005d02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d06:	d1c5      	bne.n	8005c94 <__swsetup_r+0x24>
 8005d08:	bd38      	pop	{r3, r4, r5, pc}
 8005d0a:	0799      	lsls	r1, r3, #30
 8005d0c:	bf58      	it	pl
 8005d0e:	6962      	ldrpl	r2, [r4, #20]
 8005d10:	60a2      	str	r2, [r4, #8]
 8005d12:	e7f4      	b.n	8005cfe <__swsetup_r+0x8e>
 8005d14:	2000      	movs	r0, #0
 8005d16:	e7f7      	b.n	8005d08 <__swsetup_r+0x98>
 8005d18:	20000018 	.word	0x20000018

08005d1c <memset>:
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	4402      	add	r2, r0
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d100      	bne.n	8005d26 <memset+0xa>
 8005d24:	4770      	bx	lr
 8005d26:	f803 1b01 	strb.w	r1, [r3], #1
 8005d2a:	e7f9      	b.n	8005d20 <memset+0x4>

08005d2c <_localeconv_r>:
 8005d2c:	4800      	ldr	r0, [pc, #0]	@ (8005d30 <_localeconv_r+0x4>)
 8005d2e:	4770      	bx	lr
 8005d30:	20000158 	.word	0x20000158

08005d34 <_close_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	2300      	movs	r3, #0
 8005d38:	4d05      	ldr	r5, [pc, #20]	@ (8005d50 <_close_r+0x1c>)
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	f7fb feef 	bl	8001b22 <_close>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d102      	bne.n	8005d4e <_close_r+0x1a>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	b103      	cbz	r3, 8005d4e <_close_r+0x1a>
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	20000890 	.word	0x20000890

08005d54 <_lseek_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	4d05      	ldr	r5, [pc, #20]	@ (8005d74 <_lseek_r+0x20>)
 8005d60:	602a      	str	r2, [r5, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	f7fb ff01 	bl	8001b6a <_lseek>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_lseek_r+0x1e>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_lseek_r+0x1e>
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	20000890 	.word	0x20000890

08005d78 <_read_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	2200      	movs	r2, #0
 8005d82:	4d05      	ldr	r5, [pc, #20]	@ (8005d98 <_read_r+0x20>)
 8005d84:	602a      	str	r2, [r5, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	f7fb fe92 	bl	8001ab0 <_read>
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d102      	bne.n	8005d96 <_read_r+0x1e>
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	b103      	cbz	r3, 8005d96 <_read_r+0x1e>
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	bd38      	pop	{r3, r4, r5, pc}
 8005d98:	20000890 	.word	0x20000890

08005d9c <_write_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	4611      	mov	r1, r2
 8005da4:	2200      	movs	r2, #0
 8005da6:	4d05      	ldr	r5, [pc, #20]	@ (8005dbc <_write_r+0x20>)
 8005da8:	602a      	str	r2, [r5, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	f7fb fe9d 	bl	8001aea <_write>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d102      	bne.n	8005dba <_write_r+0x1e>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	b103      	cbz	r3, 8005dba <_write_r+0x1e>
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	20000890 	.word	0x20000890

08005dc0 <__errno>:
 8005dc0:	4b01      	ldr	r3, [pc, #4]	@ (8005dc8 <__errno+0x8>)
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	20000018 	.word	0x20000018

08005dcc <__libc_init_array>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	2600      	movs	r6, #0
 8005dd0:	4d0c      	ldr	r5, [pc, #48]	@ (8005e04 <__libc_init_array+0x38>)
 8005dd2:	4c0d      	ldr	r4, [pc, #52]	@ (8005e08 <__libc_init_array+0x3c>)
 8005dd4:	1b64      	subs	r4, r4, r5
 8005dd6:	10a4      	asrs	r4, r4, #2
 8005dd8:	42a6      	cmp	r6, r4
 8005dda:	d109      	bne.n	8005df0 <__libc_init_array+0x24>
 8005ddc:	f001 ffde 	bl	8007d9c <_init>
 8005de0:	2600      	movs	r6, #0
 8005de2:	4d0a      	ldr	r5, [pc, #40]	@ (8005e0c <__libc_init_array+0x40>)
 8005de4:	4c0a      	ldr	r4, [pc, #40]	@ (8005e10 <__libc_init_array+0x44>)
 8005de6:	1b64      	subs	r4, r4, r5
 8005de8:	10a4      	asrs	r4, r4, #2
 8005dea:	42a6      	cmp	r6, r4
 8005dec:	d105      	bne.n	8005dfa <__libc_init_array+0x2e>
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df4:	4798      	blx	r3
 8005df6:	3601      	adds	r6, #1
 8005df8:	e7ee      	b.n	8005dd8 <__libc_init_array+0xc>
 8005dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfe:	4798      	blx	r3
 8005e00:	3601      	adds	r6, #1
 8005e02:	e7f2      	b.n	8005dea <__libc_init_array+0x1e>
 8005e04:	080082d0 	.word	0x080082d0
 8005e08:	080082d0 	.word	0x080082d0
 8005e0c:	080082d0 	.word	0x080082d0
 8005e10:	080082d4 	.word	0x080082d4

08005e14 <__retarget_lock_init_recursive>:
 8005e14:	4770      	bx	lr

08005e16 <__retarget_lock_acquire_recursive>:
 8005e16:	4770      	bx	lr

08005e18 <__retarget_lock_release_recursive>:
 8005e18:	4770      	bx	lr

08005e1a <memchr>:
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	b2c9      	uxtb	r1, r1
 8005e20:	4402      	add	r2, r0
 8005e22:	4293      	cmp	r3, r2
 8005e24:	4618      	mov	r0, r3
 8005e26:	d101      	bne.n	8005e2c <memchr+0x12>
 8005e28:	2000      	movs	r0, #0
 8005e2a:	e003      	b.n	8005e34 <memchr+0x1a>
 8005e2c:	7804      	ldrb	r4, [r0, #0]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	428c      	cmp	r4, r1
 8005e32:	d1f6      	bne.n	8005e22 <memchr+0x8>
 8005e34:	bd10      	pop	{r4, pc}

08005e36 <memcpy>:
 8005e36:	440a      	add	r2, r1
 8005e38:	4291      	cmp	r1, r2
 8005e3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e3e:	d100      	bne.n	8005e42 <memcpy+0xc>
 8005e40:	4770      	bx	lr
 8005e42:	b510      	push	{r4, lr}
 8005e44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e48:	4291      	cmp	r1, r2
 8005e4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e4e:	d1f9      	bne.n	8005e44 <memcpy+0xe>
 8005e50:	bd10      	pop	{r4, pc}

08005e52 <quorem>:
 8005e52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e56:	6903      	ldr	r3, [r0, #16]
 8005e58:	690c      	ldr	r4, [r1, #16]
 8005e5a:	4607      	mov	r7, r0
 8005e5c:	42a3      	cmp	r3, r4
 8005e5e:	db7e      	blt.n	8005f5e <quorem+0x10c>
 8005e60:	3c01      	subs	r4, #1
 8005e62:	00a3      	lsls	r3, r4, #2
 8005e64:	f100 0514 	add.w	r5, r0, #20
 8005e68:	f101 0814 	add.w	r8, r1, #20
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e88:	d32e      	bcc.n	8005ee8 <quorem+0x96>
 8005e8a:	f04f 0a00 	mov.w	sl, #0
 8005e8e:	46c4      	mov	ip, r8
 8005e90:	46ae      	mov	lr, r5
 8005e92:	46d3      	mov	fp, sl
 8005e94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e98:	b298      	uxth	r0, r3
 8005e9a:	fb06 a000 	mla	r0, r6, r0, sl
 8005e9e:	0c1b      	lsrs	r3, r3, #16
 8005ea0:	0c02      	lsrs	r2, r0, #16
 8005ea2:	fb06 2303 	mla	r3, r6, r3, r2
 8005ea6:	f8de 2000 	ldr.w	r2, [lr]
 8005eaa:	b280      	uxth	r0, r0
 8005eac:	b292      	uxth	r2, r2
 8005eae:	1a12      	subs	r2, r2, r0
 8005eb0:	445a      	add	r2, fp
 8005eb2:	f8de 0000 	ldr.w	r0, [lr]
 8005eb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005ec0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005ec4:	b292      	uxth	r2, r2
 8005ec6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005eca:	45e1      	cmp	r9, ip
 8005ecc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005ed0:	f84e 2b04 	str.w	r2, [lr], #4
 8005ed4:	d2de      	bcs.n	8005e94 <quorem+0x42>
 8005ed6:	9b00      	ldr	r3, [sp, #0]
 8005ed8:	58eb      	ldr	r3, [r5, r3]
 8005eda:	b92b      	cbnz	r3, 8005ee8 <quorem+0x96>
 8005edc:	9b01      	ldr	r3, [sp, #4]
 8005ede:	3b04      	subs	r3, #4
 8005ee0:	429d      	cmp	r5, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	d32f      	bcc.n	8005f46 <quorem+0xf4>
 8005ee6:	613c      	str	r4, [r7, #16]
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f001 f97b 	bl	80071e4 <__mcmp>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	db25      	blt.n	8005f3e <quorem+0xec>
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	f858 2b04 	ldr.w	r2, [r8], #4
 8005efa:	f8d1 c000 	ldr.w	ip, [r1]
 8005efe:	fa1f fe82 	uxth.w	lr, r2
 8005f02:	fa1f f38c 	uxth.w	r3, ip
 8005f06:	eba3 030e 	sub.w	r3, r3, lr
 8005f0a:	4403      	add	r3, r0
 8005f0c:	0c12      	lsrs	r2, r2, #16
 8005f0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005f12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f1c:	45c1      	cmp	r9, r8
 8005f1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f22:	f841 3b04 	str.w	r3, [r1], #4
 8005f26:	d2e6      	bcs.n	8005ef6 <quorem+0xa4>
 8005f28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f30:	b922      	cbnz	r2, 8005f3c <quorem+0xea>
 8005f32:	3b04      	subs	r3, #4
 8005f34:	429d      	cmp	r5, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	d30b      	bcc.n	8005f52 <quorem+0x100>
 8005f3a:	613c      	str	r4, [r7, #16]
 8005f3c:	3601      	adds	r6, #1
 8005f3e:	4630      	mov	r0, r6
 8005f40:	b003      	add	sp, #12
 8005f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	3b04      	subs	r3, #4
 8005f4a:	2a00      	cmp	r2, #0
 8005f4c:	d1cb      	bne.n	8005ee6 <quorem+0x94>
 8005f4e:	3c01      	subs	r4, #1
 8005f50:	e7c6      	b.n	8005ee0 <quorem+0x8e>
 8005f52:	6812      	ldr	r2, [r2, #0]
 8005f54:	3b04      	subs	r3, #4
 8005f56:	2a00      	cmp	r2, #0
 8005f58:	d1ef      	bne.n	8005f3a <quorem+0xe8>
 8005f5a:	3c01      	subs	r4, #1
 8005f5c:	e7ea      	b.n	8005f34 <quorem+0xe2>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	e7ee      	b.n	8005f40 <quorem+0xee>
 8005f62:	0000      	movs	r0, r0
 8005f64:	0000      	movs	r0, r0
	...

08005f68 <_dtoa_r>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	4614      	mov	r4, r2
 8005f6e:	461d      	mov	r5, r3
 8005f70:	69c7      	ldr	r7, [r0, #28]
 8005f72:	b097      	sub	sp, #92	@ 0x5c
 8005f74:	4683      	mov	fp, r0
 8005f76:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005f7a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005f7c:	b97f      	cbnz	r7, 8005f9e <_dtoa_r+0x36>
 8005f7e:	2010      	movs	r0, #16
 8005f80:	f000 fe02 	bl	8006b88 <malloc>
 8005f84:	4602      	mov	r2, r0
 8005f86:	f8cb 001c 	str.w	r0, [fp, #28]
 8005f8a:	b920      	cbnz	r0, 8005f96 <_dtoa_r+0x2e>
 8005f8c:	21ef      	movs	r1, #239	@ 0xef
 8005f8e:	4ba8      	ldr	r3, [pc, #672]	@ (8006230 <_dtoa_r+0x2c8>)
 8005f90:	48a8      	ldr	r0, [pc, #672]	@ (8006234 <_dtoa_r+0x2cc>)
 8005f92:	f001 fe1d 	bl	8007bd0 <__assert_func>
 8005f96:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005f9a:	6007      	str	r7, [r0, #0]
 8005f9c:	60c7      	str	r7, [r0, #12]
 8005f9e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	b159      	cbz	r1, 8005fbe <_dtoa_r+0x56>
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	2301      	movs	r3, #1
 8005faa:	4093      	lsls	r3, r2
 8005fac:	604a      	str	r2, [r1, #4]
 8005fae:	608b      	str	r3, [r1, #8]
 8005fb0:	4658      	mov	r0, fp
 8005fb2:	f000 fedf 	bl	8006d74 <_Bfree>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	1e2b      	subs	r3, r5, #0
 8005fc0:	bfaf      	iteee	ge
 8005fc2:	2300      	movge	r3, #0
 8005fc4:	2201      	movlt	r2, #1
 8005fc6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005fca:	9303      	strlt	r3, [sp, #12]
 8005fcc:	bfa8      	it	ge
 8005fce:	6033      	strge	r3, [r6, #0]
 8005fd0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005fd4:	4b98      	ldr	r3, [pc, #608]	@ (8006238 <_dtoa_r+0x2d0>)
 8005fd6:	bfb8      	it	lt
 8005fd8:	6032      	strlt	r2, [r6, #0]
 8005fda:	ea33 0308 	bics.w	r3, r3, r8
 8005fde:	d112      	bne.n	8006006 <_dtoa_r+0x9e>
 8005fe0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005fe4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005fec:	4323      	orrs	r3, r4
 8005fee:	f000 8550 	beq.w	8006a92 <_dtoa_r+0xb2a>
 8005ff2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ff4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800623c <_dtoa_r+0x2d4>
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8552 	beq.w	8006aa2 <_dtoa_r+0xb3a>
 8005ffe:	f10a 0303 	add.w	r3, sl, #3
 8006002:	f000 bd4c 	b.w	8006a9e <_dtoa_r+0xb36>
 8006006:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800600a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800600e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006012:	2200      	movs	r2, #0
 8006014:	2300      	movs	r3, #0
 8006016:	f7fa fcc7 	bl	80009a8 <__aeabi_dcmpeq>
 800601a:	4607      	mov	r7, r0
 800601c:	b158      	cbz	r0, 8006036 <_dtoa_r+0xce>
 800601e:	2301      	movs	r3, #1
 8006020:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006026:	b113      	cbz	r3, 800602e <_dtoa_r+0xc6>
 8006028:	4b85      	ldr	r3, [pc, #532]	@ (8006240 <_dtoa_r+0x2d8>)
 800602a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006244 <_dtoa_r+0x2dc>
 8006032:	f000 bd36 	b.w	8006aa2 <_dtoa_r+0xb3a>
 8006036:	ab14      	add	r3, sp, #80	@ 0x50
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	ab15      	add	r3, sp, #84	@ 0x54
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	4658      	mov	r0, fp
 8006040:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006044:	f001 f97e 	bl	8007344 <__d2b>
 8006048:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800604c:	4681      	mov	r9, r0
 800604e:	2e00      	cmp	r6, #0
 8006050:	d077      	beq.n	8006142 <_dtoa_r+0x1da>
 8006052:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006058:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800605c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006060:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006064:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006068:	9712      	str	r7, [sp, #72]	@ 0x48
 800606a:	4619      	mov	r1, r3
 800606c:	2200      	movs	r2, #0
 800606e:	4b76      	ldr	r3, [pc, #472]	@ (8006248 <_dtoa_r+0x2e0>)
 8006070:	f7fa f87a 	bl	8000168 <__aeabi_dsub>
 8006074:	a368      	add	r3, pc, #416	@ (adr r3, 8006218 <_dtoa_r+0x2b0>)
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f7fa fa2d 	bl	80004d8 <__aeabi_dmul>
 800607e:	a368      	add	r3, pc, #416	@ (adr r3, 8006220 <_dtoa_r+0x2b8>)
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	f7fa f872 	bl	800016c <__adddf3>
 8006088:	4604      	mov	r4, r0
 800608a:	4630      	mov	r0, r6
 800608c:	460d      	mov	r5, r1
 800608e:	f7fa f9b9 	bl	8000404 <__aeabi_i2d>
 8006092:	a365      	add	r3, pc, #404	@ (adr r3, 8006228 <_dtoa_r+0x2c0>)
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	f7fa fa1e 	bl	80004d8 <__aeabi_dmul>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4620      	mov	r0, r4
 80060a2:	4629      	mov	r1, r5
 80060a4:	f7fa f862 	bl	800016c <__adddf3>
 80060a8:	4604      	mov	r4, r0
 80060aa:	460d      	mov	r5, r1
 80060ac:	f7fa fcc4 	bl	8000a38 <__aeabi_d2iz>
 80060b0:	2200      	movs	r2, #0
 80060b2:	4607      	mov	r7, r0
 80060b4:	2300      	movs	r3, #0
 80060b6:	4620      	mov	r0, r4
 80060b8:	4629      	mov	r1, r5
 80060ba:	f7fa fc7f 	bl	80009bc <__aeabi_dcmplt>
 80060be:	b140      	cbz	r0, 80060d2 <_dtoa_r+0x16a>
 80060c0:	4638      	mov	r0, r7
 80060c2:	f7fa f99f 	bl	8000404 <__aeabi_i2d>
 80060c6:	4622      	mov	r2, r4
 80060c8:	462b      	mov	r3, r5
 80060ca:	f7fa fc6d 	bl	80009a8 <__aeabi_dcmpeq>
 80060ce:	b900      	cbnz	r0, 80060d2 <_dtoa_r+0x16a>
 80060d0:	3f01      	subs	r7, #1
 80060d2:	2f16      	cmp	r7, #22
 80060d4:	d853      	bhi.n	800617e <_dtoa_r+0x216>
 80060d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060da:	4b5c      	ldr	r3, [pc, #368]	@ (800624c <_dtoa_r+0x2e4>)
 80060dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	f7fa fc6a 	bl	80009bc <__aeabi_dcmplt>
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d04a      	beq.n	8006182 <_dtoa_r+0x21a>
 80060ec:	2300      	movs	r3, #0
 80060ee:	3f01      	subs	r7, #1
 80060f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80060f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80060f4:	1b9b      	subs	r3, r3, r6
 80060f6:	1e5a      	subs	r2, r3, #1
 80060f8:	bf46      	itte	mi
 80060fa:	f1c3 0801 	rsbmi	r8, r3, #1
 80060fe:	2300      	movmi	r3, #0
 8006100:	f04f 0800 	movpl.w	r8, #0
 8006104:	9209      	str	r2, [sp, #36]	@ 0x24
 8006106:	bf48      	it	mi
 8006108:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800610a:	2f00      	cmp	r7, #0
 800610c:	db3b      	blt.n	8006186 <_dtoa_r+0x21e>
 800610e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006110:	970e      	str	r7, [sp, #56]	@ 0x38
 8006112:	443b      	add	r3, r7
 8006114:	9309      	str	r3, [sp, #36]	@ 0x24
 8006116:	2300      	movs	r3, #0
 8006118:	930a      	str	r3, [sp, #40]	@ 0x28
 800611a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800611c:	2b09      	cmp	r3, #9
 800611e:	d866      	bhi.n	80061ee <_dtoa_r+0x286>
 8006120:	2b05      	cmp	r3, #5
 8006122:	bfc4      	itt	gt
 8006124:	3b04      	subgt	r3, #4
 8006126:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006128:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800612a:	bfc8      	it	gt
 800612c:	2400      	movgt	r4, #0
 800612e:	f1a3 0302 	sub.w	r3, r3, #2
 8006132:	bfd8      	it	le
 8006134:	2401      	movle	r4, #1
 8006136:	2b03      	cmp	r3, #3
 8006138:	d864      	bhi.n	8006204 <_dtoa_r+0x29c>
 800613a:	e8df f003 	tbb	[pc, r3]
 800613e:	382b      	.short	0x382b
 8006140:	5636      	.short	0x5636
 8006142:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006146:	441e      	add	r6, r3
 8006148:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800614c:	2b20      	cmp	r3, #32
 800614e:	bfc1      	itttt	gt
 8006150:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006154:	fa08 f803 	lslgt.w	r8, r8, r3
 8006158:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800615c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006160:	bfd6      	itet	le
 8006162:	f1c3 0320 	rsble	r3, r3, #32
 8006166:	ea48 0003 	orrgt.w	r0, r8, r3
 800616a:	fa04 f003 	lslle.w	r0, r4, r3
 800616e:	f7fa f939 	bl	80003e4 <__aeabi_ui2d>
 8006172:	2201      	movs	r2, #1
 8006174:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006178:	3e01      	subs	r6, #1
 800617a:	9212      	str	r2, [sp, #72]	@ 0x48
 800617c:	e775      	b.n	800606a <_dtoa_r+0x102>
 800617e:	2301      	movs	r3, #1
 8006180:	e7b6      	b.n	80060f0 <_dtoa_r+0x188>
 8006182:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006184:	e7b5      	b.n	80060f2 <_dtoa_r+0x18a>
 8006186:	427b      	negs	r3, r7
 8006188:	930a      	str	r3, [sp, #40]	@ 0x28
 800618a:	2300      	movs	r3, #0
 800618c:	eba8 0807 	sub.w	r8, r8, r7
 8006190:	930e      	str	r3, [sp, #56]	@ 0x38
 8006192:	e7c2      	b.n	800611a <_dtoa_r+0x1b2>
 8006194:	2300      	movs	r3, #0
 8006196:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006198:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800619a:	2b00      	cmp	r3, #0
 800619c:	dc35      	bgt.n	800620a <_dtoa_r+0x2a2>
 800619e:	2301      	movs	r3, #1
 80061a0:	461a      	mov	r2, r3
 80061a2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80061a6:	9221      	str	r2, [sp, #132]	@ 0x84
 80061a8:	e00b      	b.n	80061c2 <_dtoa_r+0x25a>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e7f3      	b.n	8006196 <_dtoa_r+0x22e>
 80061ae:	2300      	movs	r3, #0
 80061b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061b4:	18fb      	adds	r3, r7, r3
 80061b6:	9308      	str	r3, [sp, #32]
 80061b8:	3301      	adds	r3, #1
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	9307      	str	r3, [sp, #28]
 80061be:	bfb8      	it	lt
 80061c0:	2301      	movlt	r3, #1
 80061c2:	2100      	movs	r1, #0
 80061c4:	2204      	movs	r2, #4
 80061c6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80061ca:	f102 0514 	add.w	r5, r2, #20
 80061ce:	429d      	cmp	r5, r3
 80061d0:	d91f      	bls.n	8006212 <_dtoa_r+0x2aa>
 80061d2:	6041      	str	r1, [r0, #4]
 80061d4:	4658      	mov	r0, fp
 80061d6:	f000 fd8d 	bl	8006cf4 <_Balloc>
 80061da:	4682      	mov	sl, r0
 80061dc:	2800      	cmp	r0, #0
 80061de:	d139      	bne.n	8006254 <_dtoa_r+0x2ec>
 80061e0:	4602      	mov	r2, r0
 80061e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80061e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006250 <_dtoa_r+0x2e8>)
 80061e8:	e6d2      	b.n	8005f90 <_dtoa_r+0x28>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e7e0      	b.n	80061b0 <_dtoa_r+0x248>
 80061ee:	2401      	movs	r4, #1
 80061f0:	2300      	movs	r3, #0
 80061f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80061f4:	9320      	str	r3, [sp, #128]	@ 0x80
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295
 80061fa:	2200      	movs	r2, #0
 80061fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006200:	2312      	movs	r3, #18
 8006202:	e7d0      	b.n	80061a6 <_dtoa_r+0x23e>
 8006204:	2301      	movs	r3, #1
 8006206:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006208:	e7f5      	b.n	80061f6 <_dtoa_r+0x28e>
 800620a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800620c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006210:	e7d7      	b.n	80061c2 <_dtoa_r+0x25a>
 8006212:	3101      	adds	r1, #1
 8006214:	0052      	lsls	r2, r2, #1
 8006216:	e7d8      	b.n	80061ca <_dtoa_r+0x262>
 8006218:	636f4361 	.word	0x636f4361
 800621c:	3fd287a7 	.word	0x3fd287a7
 8006220:	8b60c8b3 	.word	0x8b60c8b3
 8006224:	3fc68a28 	.word	0x3fc68a28
 8006228:	509f79fb 	.word	0x509f79fb
 800622c:	3fd34413 	.word	0x3fd34413
 8006230:	08007f97 	.word	0x08007f97
 8006234:	08007fae 	.word	0x08007fae
 8006238:	7ff00000 	.word	0x7ff00000
 800623c:	08007f93 	.word	0x08007f93
 8006240:	08007f67 	.word	0x08007f67
 8006244:	08007f66 	.word	0x08007f66
 8006248:	3ff80000 	.word	0x3ff80000
 800624c:	080080a8 	.word	0x080080a8
 8006250:	08008006 	.word	0x08008006
 8006254:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006258:	6018      	str	r0, [r3, #0]
 800625a:	9b07      	ldr	r3, [sp, #28]
 800625c:	2b0e      	cmp	r3, #14
 800625e:	f200 80a4 	bhi.w	80063aa <_dtoa_r+0x442>
 8006262:	2c00      	cmp	r4, #0
 8006264:	f000 80a1 	beq.w	80063aa <_dtoa_r+0x442>
 8006268:	2f00      	cmp	r7, #0
 800626a:	dd33      	ble.n	80062d4 <_dtoa_r+0x36c>
 800626c:	4b86      	ldr	r3, [pc, #536]	@ (8006488 <_dtoa_r+0x520>)
 800626e:	f007 020f 	and.w	r2, r7, #15
 8006272:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006276:	05f8      	lsls	r0, r7, #23
 8006278:	e9d3 3400 	ldrd	r3, r4, [r3]
 800627c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006280:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006284:	d516      	bpl.n	80062b4 <_dtoa_r+0x34c>
 8006286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800628a:	4b80      	ldr	r3, [pc, #512]	@ (800648c <_dtoa_r+0x524>)
 800628c:	2603      	movs	r6, #3
 800628e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006292:	f7fa fa4b 	bl	800072c <__aeabi_ddiv>
 8006296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800629a:	f004 040f 	and.w	r4, r4, #15
 800629e:	4d7b      	ldr	r5, [pc, #492]	@ (800648c <_dtoa_r+0x524>)
 80062a0:	b954      	cbnz	r4, 80062b8 <_dtoa_r+0x350>
 80062a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062aa:	f7fa fa3f 	bl	800072c <__aeabi_ddiv>
 80062ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b2:	e028      	b.n	8006306 <_dtoa_r+0x39e>
 80062b4:	2602      	movs	r6, #2
 80062b6:	e7f2      	b.n	800629e <_dtoa_r+0x336>
 80062b8:	07e1      	lsls	r1, r4, #31
 80062ba:	d508      	bpl.n	80062ce <_dtoa_r+0x366>
 80062bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062c4:	f7fa f908 	bl	80004d8 <__aeabi_dmul>
 80062c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062cc:	3601      	adds	r6, #1
 80062ce:	1064      	asrs	r4, r4, #1
 80062d0:	3508      	adds	r5, #8
 80062d2:	e7e5      	b.n	80062a0 <_dtoa_r+0x338>
 80062d4:	f000 80d2 	beq.w	800647c <_dtoa_r+0x514>
 80062d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062dc:	427c      	negs	r4, r7
 80062de:	4b6a      	ldr	r3, [pc, #424]	@ (8006488 <_dtoa_r+0x520>)
 80062e0:	f004 020f 	and.w	r2, r4, #15
 80062e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	f7fa f8f4 	bl	80004d8 <__aeabi_dmul>
 80062f0:	2602      	movs	r6, #2
 80062f2:	2300      	movs	r3, #0
 80062f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062f8:	4d64      	ldr	r5, [pc, #400]	@ (800648c <_dtoa_r+0x524>)
 80062fa:	1124      	asrs	r4, r4, #4
 80062fc:	2c00      	cmp	r4, #0
 80062fe:	f040 80b2 	bne.w	8006466 <_dtoa_r+0x4fe>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1d3      	bne.n	80062ae <_dtoa_r+0x346>
 8006306:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800630a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80b7 	beq.w	8006480 <_dtoa_r+0x518>
 8006312:	2200      	movs	r2, #0
 8006314:	4620      	mov	r0, r4
 8006316:	4629      	mov	r1, r5
 8006318:	4b5d      	ldr	r3, [pc, #372]	@ (8006490 <_dtoa_r+0x528>)
 800631a:	f7fa fb4f 	bl	80009bc <__aeabi_dcmplt>
 800631e:	2800      	cmp	r0, #0
 8006320:	f000 80ae 	beq.w	8006480 <_dtoa_r+0x518>
 8006324:	9b07      	ldr	r3, [sp, #28]
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 80aa 	beq.w	8006480 <_dtoa_r+0x518>
 800632c:	9b08      	ldr	r3, [sp, #32]
 800632e:	2b00      	cmp	r3, #0
 8006330:	dd37      	ble.n	80063a2 <_dtoa_r+0x43a>
 8006332:	1e7b      	subs	r3, r7, #1
 8006334:	4620      	mov	r0, r4
 8006336:	9304      	str	r3, [sp, #16]
 8006338:	2200      	movs	r2, #0
 800633a:	4629      	mov	r1, r5
 800633c:	4b55      	ldr	r3, [pc, #340]	@ (8006494 <_dtoa_r+0x52c>)
 800633e:	f7fa f8cb 	bl	80004d8 <__aeabi_dmul>
 8006342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006346:	9c08      	ldr	r4, [sp, #32]
 8006348:	3601      	adds	r6, #1
 800634a:	4630      	mov	r0, r6
 800634c:	f7fa f85a 	bl	8000404 <__aeabi_i2d>
 8006350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006354:	f7fa f8c0 	bl	80004d8 <__aeabi_dmul>
 8006358:	2200      	movs	r2, #0
 800635a:	4b4f      	ldr	r3, [pc, #316]	@ (8006498 <_dtoa_r+0x530>)
 800635c:	f7f9 ff06 	bl	800016c <__adddf3>
 8006360:	4605      	mov	r5, r0
 8006362:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006366:	2c00      	cmp	r4, #0
 8006368:	f040 809a 	bne.w	80064a0 <_dtoa_r+0x538>
 800636c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006370:	2200      	movs	r2, #0
 8006372:	4b4a      	ldr	r3, [pc, #296]	@ (800649c <_dtoa_r+0x534>)
 8006374:	f7f9 fef8 	bl	8000168 <__aeabi_dsub>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006380:	462a      	mov	r2, r5
 8006382:	4633      	mov	r3, r6
 8006384:	f7fa fb38 	bl	80009f8 <__aeabi_dcmpgt>
 8006388:	2800      	cmp	r0, #0
 800638a:	f040 828e 	bne.w	80068aa <_dtoa_r+0x942>
 800638e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006392:	462a      	mov	r2, r5
 8006394:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006398:	f7fa fb10 	bl	80009bc <__aeabi_dcmplt>
 800639c:	2800      	cmp	r0, #0
 800639e:	f040 8127 	bne.w	80065f0 <_dtoa_r+0x688>
 80063a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80063a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80063aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f2c0 8163 	blt.w	8006678 <_dtoa_r+0x710>
 80063b2:	2f0e      	cmp	r7, #14
 80063b4:	f300 8160 	bgt.w	8006678 <_dtoa_r+0x710>
 80063b8:	4b33      	ldr	r3, [pc, #204]	@ (8006488 <_dtoa_r+0x520>)
 80063ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80063be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80063c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	da03      	bge.n	80063d4 <_dtoa_r+0x46c>
 80063cc:	9b07      	ldr	r3, [sp, #28]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f340 8100 	ble.w	80065d4 <_dtoa_r+0x66c>
 80063d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80063d8:	4656      	mov	r6, sl
 80063da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7fa f9a3 	bl	800072c <__aeabi_ddiv>
 80063e6:	f7fa fb27 	bl	8000a38 <__aeabi_d2iz>
 80063ea:	4680      	mov	r8, r0
 80063ec:	f7fa f80a 	bl	8000404 <__aeabi_i2d>
 80063f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063f4:	f7fa f870 	bl	80004d8 <__aeabi_dmul>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4620      	mov	r0, r4
 80063fe:	4629      	mov	r1, r5
 8006400:	f7f9 feb2 	bl	8000168 <__aeabi_dsub>
 8006404:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006408:	9d07      	ldr	r5, [sp, #28]
 800640a:	f806 4b01 	strb.w	r4, [r6], #1
 800640e:	eba6 040a 	sub.w	r4, r6, sl
 8006412:	42a5      	cmp	r5, r4
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	f040 8116 	bne.w	8006648 <_dtoa_r+0x6e0>
 800641c:	f7f9 fea6 	bl	800016c <__adddf3>
 8006420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006424:	4604      	mov	r4, r0
 8006426:	460d      	mov	r5, r1
 8006428:	f7fa fae6 	bl	80009f8 <__aeabi_dcmpgt>
 800642c:	2800      	cmp	r0, #0
 800642e:	f040 80f8 	bne.w	8006622 <_dtoa_r+0x6ba>
 8006432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006436:	4620      	mov	r0, r4
 8006438:	4629      	mov	r1, r5
 800643a:	f7fa fab5 	bl	80009a8 <__aeabi_dcmpeq>
 800643e:	b118      	cbz	r0, 8006448 <_dtoa_r+0x4e0>
 8006440:	f018 0f01 	tst.w	r8, #1
 8006444:	f040 80ed 	bne.w	8006622 <_dtoa_r+0x6ba>
 8006448:	4649      	mov	r1, r9
 800644a:	4658      	mov	r0, fp
 800644c:	f000 fc92 	bl	8006d74 <_Bfree>
 8006450:	2300      	movs	r3, #0
 8006452:	7033      	strb	r3, [r6, #0]
 8006454:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006456:	3701      	adds	r7, #1
 8006458:	601f      	str	r7, [r3, #0]
 800645a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8320 	beq.w	8006aa2 <_dtoa_r+0xb3a>
 8006462:	601e      	str	r6, [r3, #0]
 8006464:	e31d      	b.n	8006aa2 <_dtoa_r+0xb3a>
 8006466:	07e2      	lsls	r2, r4, #31
 8006468:	d505      	bpl.n	8006476 <_dtoa_r+0x50e>
 800646a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800646e:	f7fa f833 	bl	80004d8 <__aeabi_dmul>
 8006472:	2301      	movs	r3, #1
 8006474:	3601      	adds	r6, #1
 8006476:	1064      	asrs	r4, r4, #1
 8006478:	3508      	adds	r5, #8
 800647a:	e73f      	b.n	80062fc <_dtoa_r+0x394>
 800647c:	2602      	movs	r6, #2
 800647e:	e742      	b.n	8006306 <_dtoa_r+0x39e>
 8006480:	9c07      	ldr	r4, [sp, #28]
 8006482:	9704      	str	r7, [sp, #16]
 8006484:	e761      	b.n	800634a <_dtoa_r+0x3e2>
 8006486:	bf00      	nop
 8006488:	080080a8 	.word	0x080080a8
 800648c:	08008080 	.word	0x08008080
 8006490:	3ff00000 	.word	0x3ff00000
 8006494:	40240000 	.word	0x40240000
 8006498:	401c0000 	.word	0x401c0000
 800649c:	40140000 	.word	0x40140000
 80064a0:	4b70      	ldr	r3, [pc, #448]	@ (8006664 <_dtoa_r+0x6fc>)
 80064a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064ac:	4454      	add	r4, sl
 80064ae:	2900      	cmp	r1, #0
 80064b0:	d045      	beq.n	800653e <_dtoa_r+0x5d6>
 80064b2:	2000      	movs	r0, #0
 80064b4:	496c      	ldr	r1, [pc, #432]	@ (8006668 <_dtoa_r+0x700>)
 80064b6:	f7fa f939 	bl	800072c <__aeabi_ddiv>
 80064ba:	4633      	mov	r3, r6
 80064bc:	462a      	mov	r2, r5
 80064be:	f7f9 fe53 	bl	8000168 <__aeabi_dsub>
 80064c2:	4656      	mov	r6, sl
 80064c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064cc:	f7fa fab4 	bl	8000a38 <__aeabi_d2iz>
 80064d0:	4605      	mov	r5, r0
 80064d2:	f7f9 ff97 	bl	8000404 <__aeabi_i2d>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064de:	f7f9 fe43 	bl	8000168 <__aeabi_dsub>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	3530      	adds	r5, #48	@ 0x30
 80064e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064f0:	f806 5b01 	strb.w	r5, [r6], #1
 80064f4:	f7fa fa62 	bl	80009bc <__aeabi_dcmplt>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d163      	bne.n	80065c4 <_dtoa_r+0x65c>
 80064fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006500:	2000      	movs	r0, #0
 8006502:	495a      	ldr	r1, [pc, #360]	@ (800666c <_dtoa_r+0x704>)
 8006504:	f7f9 fe30 	bl	8000168 <__aeabi_dsub>
 8006508:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800650c:	f7fa fa56 	bl	80009bc <__aeabi_dcmplt>
 8006510:	2800      	cmp	r0, #0
 8006512:	f040 8087 	bne.w	8006624 <_dtoa_r+0x6bc>
 8006516:	42a6      	cmp	r6, r4
 8006518:	f43f af43 	beq.w	80063a2 <_dtoa_r+0x43a>
 800651c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006520:	2200      	movs	r2, #0
 8006522:	4b53      	ldr	r3, [pc, #332]	@ (8006670 <_dtoa_r+0x708>)
 8006524:	f7f9 ffd8 	bl	80004d8 <__aeabi_dmul>
 8006528:	2200      	movs	r2, #0
 800652a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800652e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006532:	4b4f      	ldr	r3, [pc, #316]	@ (8006670 <_dtoa_r+0x708>)
 8006534:	f7f9 ffd0 	bl	80004d8 <__aeabi_dmul>
 8006538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800653c:	e7c4      	b.n	80064c8 <_dtoa_r+0x560>
 800653e:	4631      	mov	r1, r6
 8006540:	4628      	mov	r0, r5
 8006542:	f7f9 ffc9 	bl	80004d8 <__aeabi_dmul>
 8006546:	4656      	mov	r6, sl
 8006548:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800654c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800654e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006552:	f7fa fa71 	bl	8000a38 <__aeabi_d2iz>
 8006556:	4605      	mov	r5, r0
 8006558:	f7f9 ff54 	bl	8000404 <__aeabi_i2d>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006564:	f7f9 fe00 	bl	8000168 <__aeabi_dsub>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	3530      	adds	r5, #48	@ 0x30
 800656e:	f806 5b01 	strb.w	r5, [r6], #1
 8006572:	42a6      	cmp	r6, r4
 8006574:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	d124      	bne.n	80065c8 <_dtoa_r+0x660>
 800657e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006582:	4b39      	ldr	r3, [pc, #228]	@ (8006668 <_dtoa_r+0x700>)
 8006584:	f7f9 fdf2 	bl	800016c <__adddf3>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006590:	f7fa fa32 	bl	80009f8 <__aeabi_dcmpgt>
 8006594:	2800      	cmp	r0, #0
 8006596:	d145      	bne.n	8006624 <_dtoa_r+0x6bc>
 8006598:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800659c:	2000      	movs	r0, #0
 800659e:	4932      	ldr	r1, [pc, #200]	@ (8006668 <_dtoa_r+0x700>)
 80065a0:	f7f9 fde2 	bl	8000168 <__aeabi_dsub>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ac:	f7fa fa06 	bl	80009bc <__aeabi_dcmplt>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	f43f aef6 	beq.w	80063a2 <_dtoa_r+0x43a>
 80065b6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80065b8:	1e73      	subs	r3, r6, #1
 80065ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80065bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80065c0:	2b30      	cmp	r3, #48	@ 0x30
 80065c2:	d0f8      	beq.n	80065b6 <_dtoa_r+0x64e>
 80065c4:	9f04      	ldr	r7, [sp, #16]
 80065c6:	e73f      	b.n	8006448 <_dtoa_r+0x4e0>
 80065c8:	4b29      	ldr	r3, [pc, #164]	@ (8006670 <_dtoa_r+0x708>)
 80065ca:	f7f9 ff85 	bl	80004d8 <__aeabi_dmul>
 80065ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065d2:	e7bc      	b.n	800654e <_dtoa_r+0x5e6>
 80065d4:	d10c      	bne.n	80065f0 <_dtoa_r+0x688>
 80065d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065da:	2200      	movs	r2, #0
 80065dc:	4b25      	ldr	r3, [pc, #148]	@ (8006674 <_dtoa_r+0x70c>)
 80065de:	f7f9 ff7b 	bl	80004d8 <__aeabi_dmul>
 80065e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065e6:	f7fa f9fd 	bl	80009e4 <__aeabi_dcmpge>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f000 815b 	beq.w	80068a6 <_dtoa_r+0x93e>
 80065f0:	2400      	movs	r4, #0
 80065f2:	4625      	mov	r5, r4
 80065f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065f6:	4656      	mov	r6, sl
 80065f8:	43db      	mvns	r3, r3
 80065fa:	9304      	str	r3, [sp, #16]
 80065fc:	2700      	movs	r7, #0
 80065fe:	4621      	mov	r1, r4
 8006600:	4658      	mov	r0, fp
 8006602:	f000 fbb7 	bl	8006d74 <_Bfree>
 8006606:	2d00      	cmp	r5, #0
 8006608:	d0dc      	beq.n	80065c4 <_dtoa_r+0x65c>
 800660a:	b12f      	cbz	r7, 8006618 <_dtoa_r+0x6b0>
 800660c:	42af      	cmp	r7, r5
 800660e:	d003      	beq.n	8006618 <_dtoa_r+0x6b0>
 8006610:	4639      	mov	r1, r7
 8006612:	4658      	mov	r0, fp
 8006614:	f000 fbae 	bl	8006d74 <_Bfree>
 8006618:	4629      	mov	r1, r5
 800661a:	4658      	mov	r0, fp
 800661c:	f000 fbaa 	bl	8006d74 <_Bfree>
 8006620:	e7d0      	b.n	80065c4 <_dtoa_r+0x65c>
 8006622:	9704      	str	r7, [sp, #16]
 8006624:	4633      	mov	r3, r6
 8006626:	461e      	mov	r6, r3
 8006628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800662c:	2a39      	cmp	r2, #57	@ 0x39
 800662e:	d107      	bne.n	8006640 <_dtoa_r+0x6d8>
 8006630:	459a      	cmp	sl, r3
 8006632:	d1f8      	bne.n	8006626 <_dtoa_r+0x6be>
 8006634:	9a04      	ldr	r2, [sp, #16]
 8006636:	3201      	adds	r2, #1
 8006638:	9204      	str	r2, [sp, #16]
 800663a:	2230      	movs	r2, #48	@ 0x30
 800663c:	f88a 2000 	strb.w	r2, [sl]
 8006640:	781a      	ldrb	r2, [r3, #0]
 8006642:	3201      	adds	r2, #1
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	e7bd      	b.n	80065c4 <_dtoa_r+0x65c>
 8006648:	2200      	movs	r2, #0
 800664a:	4b09      	ldr	r3, [pc, #36]	@ (8006670 <_dtoa_r+0x708>)
 800664c:	f7f9 ff44 	bl	80004d8 <__aeabi_dmul>
 8006650:	2200      	movs	r2, #0
 8006652:	2300      	movs	r3, #0
 8006654:	4604      	mov	r4, r0
 8006656:	460d      	mov	r5, r1
 8006658:	f7fa f9a6 	bl	80009a8 <__aeabi_dcmpeq>
 800665c:	2800      	cmp	r0, #0
 800665e:	f43f aebc 	beq.w	80063da <_dtoa_r+0x472>
 8006662:	e6f1      	b.n	8006448 <_dtoa_r+0x4e0>
 8006664:	080080a8 	.word	0x080080a8
 8006668:	3fe00000 	.word	0x3fe00000
 800666c:	3ff00000 	.word	0x3ff00000
 8006670:	40240000 	.word	0x40240000
 8006674:	40140000 	.word	0x40140000
 8006678:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800667a:	2a00      	cmp	r2, #0
 800667c:	f000 80db 	beq.w	8006836 <_dtoa_r+0x8ce>
 8006680:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006682:	2a01      	cmp	r2, #1
 8006684:	f300 80bf 	bgt.w	8006806 <_dtoa_r+0x89e>
 8006688:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800668a:	2a00      	cmp	r2, #0
 800668c:	f000 80b7 	beq.w	80067fe <_dtoa_r+0x896>
 8006690:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006694:	4646      	mov	r6, r8
 8006696:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006698:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800669a:	2101      	movs	r1, #1
 800669c:	441a      	add	r2, r3
 800669e:	4658      	mov	r0, fp
 80066a0:	4498      	add	r8, r3
 80066a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80066a4:	f000 fc1a 	bl	8006edc <__i2b>
 80066a8:	4605      	mov	r5, r0
 80066aa:	b15e      	cbz	r6, 80066c4 <_dtoa_r+0x75c>
 80066ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	dd08      	ble.n	80066c4 <_dtoa_r+0x75c>
 80066b2:	42b3      	cmp	r3, r6
 80066b4:	bfa8      	it	ge
 80066b6:	4633      	movge	r3, r6
 80066b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066ba:	eba8 0803 	sub.w	r8, r8, r3
 80066be:	1af6      	subs	r6, r6, r3
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80066c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066c6:	b1f3      	cbz	r3, 8006706 <_dtoa_r+0x79e>
 80066c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 80b7 	beq.w	800683e <_dtoa_r+0x8d6>
 80066d0:	b18c      	cbz	r4, 80066f6 <_dtoa_r+0x78e>
 80066d2:	4629      	mov	r1, r5
 80066d4:	4622      	mov	r2, r4
 80066d6:	4658      	mov	r0, fp
 80066d8:	f000 fcbe 	bl	8007058 <__pow5mult>
 80066dc:	464a      	mov	r2, r9
 80066de:	4601      	mov	r1, r0
 80066e0:	4605      	mov	r5, r0
 80066e2:	4658      	mov	r0, fp
 80066e4:	f000 fc10 	bl	8006f08 <__multiply>
 80066e8:	4649      	mov	r1, r9
 80066ea:	9004      	str	r0, [sp, #16]
 80066ec:	4658      	mov	r0, fp
 80066ee:	f000 fb41 	bl	8006d74 <_Bfree>
 80066f2:	9b04      	ldr	r3, [sp, #16]
 80066f4:	4699      	mov	r9, r3
 80066f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066f8:	1b1a      	subs	r2, r3, r4
 80066fa:	d004      	beq.n	8006706 <_dtoa_r+0x79e>
 80066fc:	4649      	mov	r1, r9
 80066fe:	4658      	mov	r0, fp
 8006700:	f000 fcaa 	bl	8007058 <__pow5mult>
 8006704:	4681      	mov	r9, r0
 8006706:	2101      	movs	r1, #1
 8006708:	4658      	mov	r0, fp
 800670a:	f000 fbe7 	bl	8006edc <__i2b>
 800670e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006710:	4604      	mov	r4, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 81c9 	beq.w	8006aaa <_dtoa_r+0xb42>
 8006718:	461a      	mov	r2, r3
 800671a:	4601      	mov	r1, r0
 800671c:	4658      	mov	r0, fp
 800671e:	f000 fc9b 	bl	8007058 <__pow5mult>
 8006722:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006724:	4604      	mov	r4, r0
 8006726:	2b01      	cmp	r3, #1
 8006728:	f300 808f 	bgt.w	800684a <_dtoa_r+0x8e2>
 800672c:	9b02      	ldr	r3, [sp, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	f040 8087 	bne.w	8006842 <_dtoa_r+0x8da>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800673a:	2b00      	cmp	r3, #0
 800673c:	f040 8083 	bne.w	8006846 <_dtoa_r+0x8de>
 8006740:	9b03      	ldr	r3, [sp, #12]
 8006742:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006746:	0d1b      	lsrs	r3, r3, #20
 8006748:	051b      	lsls	r3, r3, #20
 800674a:	b12b      	cbz	r3, 8006758 <_dtoa_r+0x7f0>
 800674c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800674e:	f108 0801 	add.w	r8, r8, #1
 8006752:	3301      	adds	r3, #1
 8006754:	9309      	str	r3, [sp, #36]	@ 0x24
 8006756:	2301      	movs	r3, #1
 8006758:	930a      	str	r3, [sp, #40]	@ 0x28
 800675a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 81aa 	beq.w	8006ab6 <_dtoa_r+0xb4e>
 8006762:	6923      	ldr	r3, [r4, #16]
 8006764:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006768:	6918      	ldr	r0, [r3, #16]
 800676a:	f000 fb6b 	bl	8006e44 <__hi0bits>
 800676e:	f1c0 0020 	rsb	r0, r0, #32
 8006772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006774:	4418      	add	r0, r3
 8006776:	f010 001f 	ands.w	r0, r0, #31
 800677a:	d071      	beq.n	8006860 <_dtoa_r+0x8f8>
 800677c:	f1c0 0320 	rsb	r3, r0, #32
 8006780:	2b04      	cmp	r3, #4
 8006782:	dd65      	ble.n	8006850 <_dtoa_r+0x8e8>
 8006784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006786:	f1c0 001c 	rsb	r0, r0, #28
 800678a:	4403      	add	r3, r0
 800678c:	4480      	add	r8, r0
 800678e:	4406      	add	r6, r0
 8006790:	9309      	str	r3, [sp, #36]	@ 0x24
 8006792:	f1b8 0f00 	cmp.w	r8, #0
 8006796:	dd05      	ble.n	80067a4 <_dtoa_r+0x83c>
 8006798:	4649      	mov	r1, r9
 800679a:	4642      	mov	r2, r8
 800679c:	4658      	mov	r0, fp
 800679e:	f000 fcb5 	bl	800710c <__lshift>
 80067a2:	4681      	mov	r9, r0
 80067a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	dd05      	ble.n	80067b6 <_dtoa_r+0x84e>
 80067aa:	4621      	mov	r1, r4
 80067ac:	461a      	mov	r2, r3
 80067ae:	4658      	mov	r0, fp
 80067b0:	f000 fcac 	bl	800710c <__lshift>
 80067b4:	4604      	mov	r4, r0
 80067b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d053      	beq.n	8006864 <_dtoa_r+0x8fc>
 80067bc:	4621      	mov	r1, r4
 80067be:	4648      	mov	r0, r9
 80067c0:	f000 fd10 	bl	80071e4 <__mcmp>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	da4d      	bge.n	8006864 <_dtoa_r+0x8fc>
 80067c8:	1e7b      	subs	r3, r7, #1
 80067ca:	4649      	mov	r1, r9
 80067cc:	9304      	str	r3, [sp, #16]
 80067ce:	220a      	movs	r2, #10
 80067d0:	2300      	movs	r3, #0
 80067d2:	4658      	mov	r0, fp
 80067d4:	f000 faf0 	bl	8006db8 <__multadd>
 80067d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067da:	4681      	mov	r9, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 816c 	beq.w	8006aba <_dtoa_r+0xb52>
 80067e2:	2300      	movs	r3, #0
 80067e4:	4629      	mov	r1, r5
 80067e6:	220a      	movs	r2, #10
 80067e8:	4658      	mov	r0, fp
 80067ea:	f000 fae5 	bl	8006db8 <__multadd>
 80067ee:	9b08      	ldr	r3, [sp, #32]
 80067f0:	4605      	mov	r5, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	dc61      	bgt.n	80068ba <_dtoa_r+0x952>
 80067f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	dc3b      	bgt.n	8006874 <_dtoa_r+0x90c>
 80067fc:	e05d      	b.n	80068ba <_dtoa_r+0x952>
 80067fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006800:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006804:	e746      	b.n	8006694 <_dtoa_r+0x72c>
 8006806:	9b07      	ldr	r3, [sp, #28]
 8006808:	1e5c      	subs	r4, r3, #1
 800680a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800680c:	42a3      	cmp	r3, r4
 800680e:	bfbf      	itttt	lt
 8006810:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006812:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006814:	1ae3      	sublt	r3, r4, r3
 8006816:	18d2      	addlt	r2, r2, r3
 8006818:	bfa8      	it	ge
 800681a:	1b1c      	subge	r4, r3, r4
 800681c:	9b07      	ldr	r3, [sp, #28]
 800681e:	bfbe      	ittt	lt
 8006820:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006822:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006824:	2400      	movlt	r4, #0
 8006826:	2b00      	cmp	r3, #0
 8006828:	bfb5      	itete	lt
 800682a:	eba8 0603 	sublt.w	r6, r8, r3
 800682e:	4646      	movge	r6, r8
 8006830:	2300      	movlt	r3, #0
 8006832:	9b07      	ldrge	r3, [sp, #28]
 8006834:	e730      	b.n	8006698 <_dtoa_r+0x730>
 8006836:	4646      	mov	r6, r8
 8006838:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800683a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800683c:	e735      	b.n	80066aa <_dtoa_r+0x742>
 800683e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006840:	e75c      	b.n	80066fc <_dtoa_r+0x794>
 8006842:	2300      	movs	r3, #0
 8006844:	e788      	b.n	8006758 <_dtoa_r+0x7f0>
 8006846:	9b02      	ldr	r3, [sp, #8]
 8006848:	e786      	b.n	8006758 <_dtoa_r+0x7f0>
 800684a:	2300      	movs	r3, #0
 800684c:	930a      	str	r3, [sp, #40]	@ 0x28
 800684e:	e788      	b.n	8006762 <_dtoa_r+0x7fa>
 8006850:	d09f      	beq.n	8006792 <_dtoa_r+0x82a>
 8006852:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006854:	331c      	adds	r3, #28
 8006856:	441a      	add	r2, r3
 8006858:	4498      	add	r8, r3
 800685a:	441e      	add	r6, r3
 800685c:	9209      	str	r2, [sp, #36]	@ 0x24
 800685e:	e798      	b.n	8006792 <_dtoa_r+0x82a>
 8006860:	4603      	mov	r3, r0
 8006862:	e7f6      	b.n	8006852 <_dtoa_r+0x8ea>
 8006864:	9b07      	ldr	r3, [sp, #28]
 8006866:	9704      	str	r7, [sp, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	dc20      	bgt.n	80068ae <_dtoa_r+0x946>
 800686c:	9308      	str	r3, [sp, #32]
 800686e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006870:	2b02      	cmp	r3, #2
 8006872:	dd1e      	ble.n	80068b2 <_dtoa_r+0x94a>
 8006874:	9b08      	ldr	r3, [sp, #32]
 8006876:	2b00      	cmp	r3, #0
 8006878:	f47f aebc 	bne.w	80065f4 <_dtoa_r+0x68c>
 800687c:	4621      	mov	r1, r4
 800687e:	2205      	movs	r2, #5
 8006880:	4658      	mov	r0, fp
 8006882:	f000 fa99 	bl	8006db8 <__multadd>
 8006886:	4601      	mov	r1, r0
 8006888:	4604      	mov	r4, r0
 800688a:	4648      	mov	r0, r9
 800688c:	f000 fcaa 	bl	80071e4 <__mcmp>
 8006890:	2800      	cmp	r0, #0
 8006892:	f77f aeaf 	ble.w	80065f4 <_dtoa_r+0x68c>
 8006896:	2331      	movs	r3, #49	@ 0x31
 8006898:	4656      	mov	r6, sl
 800689a:	f806 3b01 	strb.w	r3, [r6], #1
 800689e:	9b04      	ldr	r3, [sp, #16]
 80068a0:	3301      	adds	r3, #1
 80068a2:	9304      	str	r3, [sp, #16]
 80068a4:	e6aa      	b.n	80065fc <_dtoa_r+0x694>
 80068a6:	9c07      	ldr	r4, [sp, #28]
 80068a8:	9704      	str	r7, [sp, #16]
 80068aa:	4625      	mov	r5, r4
 80068ac:	e7f3      	b.n	8006896 <_dtoa_r+0x92e>
 80068ae:	9b07      	ldr	r3, [sp, #28]
 80068b0:	9308      	str	r3, [sp, #32]
 80068b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 8104 	beq.w	8006ac2 <_dtoa_r+0xb5a>
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	dd05      	ble.n	80068ca <_dtoa_r+0x962>
 80068be:	4629      	mov	r1, r5
 80068c0:	4632      	mov	r2, r6
 80068c2:	4658      	mov	r0, fp
 80068c4:	f000 fc22 	bl	800710c <__lshift>
 80068c8:	4605      	mov	r5, r0
 80068ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d05a      	beq.n	8006986 <_dtoa_r+0xa1e>
 80068d0:	4658      	mov	r0, fp
 80068d2:	6869      	ldr	r1, [r5, #4]
 80068d4:	f000 fa0e 	bl	8006cf4 <_Balloc>
 80068d8:	4606      	mov	r6, r0
 80068da:	b928      	cbnz	r0, 80068e8 <_dtoa_r+0x980>
 80068dc:	4602      	mov	r2, r0
 80068de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80068e2:	4b83      	ldr	r3, [pc, #524]	@ (8006af0 <_dtoa_r+0xb88>)
 80068e4:	f7ff bb54 	b.w	8005f90 <_dtoa_r+0x28>
 80068e8:	692a      	ldr	r2, [r5, #16]
 80068ea:	f105 010c 	add.w	r1, r5, #12
 80068ee:	3202      	adds	r2, #2
 80068f0:	0092      	lsls	r2, r2, #2
 80068f2:	300c      	adds	r0, #12
 80068f4:	f7ff fa9f 	bl	8005e36 <memcpy>
 80068f8:	2201      	movs	r2, #1
 80068fa:	4631      	mov	r1, r6
 80068fc:	4658      	mov	r0, fp
 80068fe:	f000 fc05 	bl	800710c <__lshift>
 8006902:	462f      	mov	r7, r5
 8006904:	4605      	mov	r5, r0
 8006906:	f10a 0301 	add.w	r3, sl, #1
 800690a:	9307      	str	r3, [sp, #28]
 800690c:	9b08      	ldr	r3, [sp, #32]
 800690e:	4453      	add	r3, sl
 8006910:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006912:	9b02      	ldr	r3, [sp, #8]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	930a      	str	r3, [sp, #40]	@ 0x28
 800691a:	9b07      	ldr	r3, [sp, #28]
 800691c:	4621      	mov	r1, r4
 800691e:	3b01      	subs	r3, #1
 8006920:	4648      	mov	r0, r9
 8006922:	9302      	str	r3, [sp, #8]
 8006924:	f7ff fa95 	bl	8005e52 <quorem>
 8006928:	4639      	mov	r1, r7
 800692a:	9008      	str	r0, [sp, #32]
 800692c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006930:	4648      	mov	r0, r9
 8006932:	f000 fc57 	bl	80071e4 <__mcmp>
 8006936:	462a      	mov	r2, r5
 8006938:	9009      	str	r0, [sp, #36]	@ 0x24
 800693a:	4621      	mov	r1, r4
 800693c:	4658      	mov	r0, fp
 800693e:	f000 fc6d 	bl	800721c <__mdiff>
 8006942:	68c2      	ldr	r2, [r0, #12]
 8006944:	4606      	mov	r6, r0
 8006946:	bb02      	cbnz	r2, 800698a <_dtoa_r+0xa22>
 8006948:	4601      	mov	r1, r0
 800694a:	4648      	mov	r0, r9
 800694c:	f000 fc4a 	bl	80071e4 <__mcmp>
 8006950:	4602      	mov	r2, r0
 8006952:	4631      	mov	r1, r6
 8006954:	4658      	mov	r0, fp
 8006956:	920c      	str	r2, [sp, #48]	@ 0x30
 8006958:	f000 fa0c 	bl	8006d74 <_Bfree>
 800695c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800695e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006960:	9e07      	ldr	r6, [sp, #28]
 8006962:	ea43 0102 	orr.w	r1, r3, r2
 8006966:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006968:	4319      	orrs	r1, r3
 800696a:	d110      	bne.n	800698e <_dtoa_r+0xa26>
 800696c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006970:	d029      	beq.n	80069c6 <_dtoa_r+0xa5e>
 8006972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006974:	2b00      	cmp	r3, #0
 8006976:	dd02      	ble.n	800697e <_dtoa_r+0xa16>
 8006978:	9b08      	ldr	r3, [sp, #32]
 800697a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800697e:	9b02      	ldr	r3, [sp, #8]
 8006980:	f883 8000 	strb.w	r8, [r3]
 8006984:	e63b      	b.n	80065fe <_dtoa_r+0x696>
 8006986:	4628      	mov	r0, r5
 8006988:	e7bb      	b.n	8006902 <_dtoa_r+0x99a>
 800698a:	2201      	movs	r2, #1
 800698c:	e7e1      	b.n	8006952 <_dtoa_r+0x9ea>
 800698e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006990:	2b00      	cmp	r3, #0
 8006992:	db04      	blt.n	800699e <_dtoa_r+0xa36>
 8006994:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006996:	430b      	orrs	r3, r1
 8006998:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800699a:	430b      	orrs	r3, r1
 800699c:	d120      	bne.n	80069e0 <_dtoa_r+0xa78>
 800699e:	2a00      	cmp	r2, #0
 80069a0:	dded      	ble.n	800697e <_dtoa_r+0xa16>
 80069a2:	4649      	mov	r1, r9
 80069a4:	2201      	movs	r2, #1
 80069a6:	4658      	mov	r0, fp
 80069a8:	f000 fbb0 	bl	800710c <__lshift>
 80069ac:	4621      	mov	r1, r4
 80069ae:	4681      	mov	r9, r0
 80069b0:	f000 fc18 	bl	80071e4 <__mcmp>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	dc03      	bgt.n	80069c0 <_dtoa_r+0xa58>
 80069b8:	d1e1      	bne.n	800697e <_dtoa_r+0xa16>
 80069ba:	f018 0f01 	tst.w	r8, #1
 80069be:	d0de      	beq.n	800697e <_dtoa_r+0xa16>
 80069c0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80069c4:	d1d8      	bne.n	8006978 <_dtoa_r+0xa10>
 80069c6:	2339      	movs	r3, #57	@ 0x39
 80069c8:	9a02      	ldr	r2, [sp, #8]
 80069ca:	7013      	strb	r3, [r2, #0]
 80069cc:	4633      	mov	r3, r6
 80069ce:	461e      	mov	r6, r3
 80069d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	2a39      	cmp	r2, #57	@ 0x39
 80069d8:	d052      	beq.n	8006a80 <_dtoa_r+0xb18>
 80069da:	3201      	adds	r2, #1
 80069dc:	701a      	strb	r2, [r3, #0]
 80069de:	e60e      	b.n	80065fe <_dtoa_r+0x696>
 80069e0:	2a00      	cmp	r2, #0
 80069e2:	dd07      	ble.n	80069f4 <_dtoa_r+0xa8c>
 80069e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80069e8:	d0ed      	beq.n	80069c6 <_dtoa_r+0xa5e>
 80069ea:	9a02      	ldr	r2, [sp, #8]
 80069ec:	f108 0301 	add.w	r3, r8, #1
 80069f0:	7013      	strb	r3, [r2, #0]
 80069f2:	e604      	b.n	80065fe <_dtoa_r+0x696>
 80069f4:	9b07      	ldr	r3, [sp, #28]
 80069f6:	9a07      	ldr	r2, [sp, #28]
 80069f8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80069fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d028      	beq.n	8006a54 <_dtoa_r+0xaec>
 8006a02:	4649      	mov	r1, r9
 8006a04:	2300      	movs	r3, #0
 8006a06:	220a      	movs	r2, #10
 8006a08:	4658      	mov	r0, fp
 8006a0a:	f000 f9d5 	bl	8006db8 <__multadd>
 8006a0e:	42af      	cmp	r7, r5
 8006a10:	4681      	mov	r9, r0
 8006a12:	f04f 0300 	mov.w	r3, #0
 8006a16:	f04f 020a 	mov.w	r2, #10
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	4658      	mov	r0, fp
 8006a1e:	d107      	bne.n	8006a30 <_dtoa_r+0xac8>
 8006a20:	f000 f9ca 	bl	8006db8 <__multadd>
 8006a24:	4607      	mov	r7, r0
 8006a26:	4605      	mov	r5, r0
 8006a28:	9b07      	ldr	r3, [sp, #28]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	9307      	str	r3, [sp, #28]
 8006a2e:	e774      	b.n	800691a <_dtoa_r+0x9b2>
 8006a30:	f000 f9c2 	bl	8006db8 <__multadd>
 8006a34:	4629      	mov	r1, r5
 8006a36:	4607      	mov	r7, r0
 8006a38:	2300      	movs	r3, #0
 8006a3a:	220a      	movs	r2, #10
 8006a3c:	4658      	mov	r0, fp
 8006a3e:	f000 f9bb 	bl	8006db8 <__multadd>
 8006a42:	4605      	mov	r5, r0
 8006a44:	e7f0      	b.n	8006a28 <_dtoa_r+0xac0>
 8006a46:	9b08      	ldr	r3, [sp, #32]
 8006a48:	2700      	movs	r7, #0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	bfcc      	ite	gt
 8006a4e:	461e      	movgt	r6, r3
 8006a50:	2601      	movle	r6, #1
 8006a52:	4456      	add	r6, sl
 8006a54:	4649      	mov	r1, r9
 8006a56:	2201      	movs	r2, #1
 8006a58:	4658      	mov	r0, fp
 8006a5a:	f000 fb57 	bl	800710c <__lshift>
 8006a5e:	4621      	mov	r1, r4
 8006a60:	4681      	mov	r9, r0
 8006a62:	f000 fbbf 	bl	80071e4 <__mcmp>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	dcb0      	bgt.n	80069cc <_dtoa_r+0xa64>
 8006a6a:	d102      	bne.n	8006a72 <_dtoa_r+0xb0a>
 8006a6c:	f018 0f01 	tst.w	r8, #1
 8006a70:	d1ac      	bne.n	80069cc <_dtoa_r+0xa64>
 8006a72:	4633      	mov	r3, r6
 8006a74:	461e      	mov	r6, r3
 8006a76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a7a:	2a30      	cmp	r2, #48	@ 0x30
 8006a7c:	d0fa      	beq.n	8006a74 <_dtoa_r+0xb0c>
 8006a7e:	e5be      	b.n	80065fe <_dtoa_r+0x696>
 8006a80:	459a      	cmp	sl, r3
 8006a82:	d1a4      	bne.n	80069ce <_dtoa_r+0xa66>
 8006a84:	9b04      	ldr	r3, [sp, #16]
 8006a86:	3301      	adds	r3, #1
 8006a88:	9304      	str	r3, [sp, #16]
 8006a8a:	2331      	movs	r3, #49	@ 0x31
 8006a8c:	f88a 3000 	strb.w	r3, [sl]
 8006a90:	e5b5      	b.n	80065fe <_dtoa_r+0x696>
 8006a92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006a94:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006af4 <_dtoa_r+0xb8c>
 8006a98:	b11b      	cbz	r3, 8006aa2 <_dtoa_r+0xb3a>
 8006a9a:	f10a 0308 	add.w	r3, sl, #8
 8006a9e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	4650      	mov	r0, sl
 8006aa4:	b017      	add	sp, #92	@ 0x5c
 8006aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	f77f ae3d 	ble.w	800672c <_dtoa_r+0x7c4>
 8006ab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ab4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ab6:	2001      	movs	r0, #1
 8006ab8:	e65b      	b.n	8006772 <_dtoa_r+0x80a>
 8006aba:	9b08      	ldr	r3, [sp, #32]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f77f aed6 	ble.w	800686e <_dtoa_r+0x906>
 8006ac2:	4656      	mov	r6, sl
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4648      	mov	r0, r9
 8006ac8:	f7ff f9c3 	bl	8005e52 <quorem>
 8006acc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ad0:	9b08      	ldr	r3, [sp, #32]
 8006ad2:	f806 8b01 	strb.w	r8, [r6], #1
 8006ad6:	eba6 020a 	sub.w	r2, r6, sl
 8006ada:	4293      	cmp	r3, r2
 8006adc:	ddb3      	ble.n	8006a46 <_dtoa_r+0xade>
 8006ade:	4649      	mov	r1, r9
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	220a      	movs	r2, #10
 8006ae4:	4658      	mov	r0, fp
 8006ae6:	f000 f967 	bl	8006db8 <__multadd>
 8006aea:	4681      	mov	r9, r0
 8006aec:	e7ea      	b.n	8006ac4 <_dtoa_r+0xb5c>
 8006aee:	bf00      	nop
 8006af0:	08008006 	.word	0x08008006
 8006af4:	08007f8a 	.word	0x08007f8a

08006af8 <_free_r>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	4605      	mov	r5, r0
 8006afc:	2900      	cmp	r1, #0
 8006afe:	d040      	beq.n	8006b82 <_free_r+0x8a>
 8006b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b04:	1f0c      	subs	r4, r1, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	bfb8      	it	lt
 8006b0a:	18e4      	addlt	r4, r4, r3
 8006b0c:	f000 f8e6 	bl	8006cdc <__malloc_lock>
 8006b10:	4a1c      	ldr	r2, [pc, #112]	@ (8006b84 <_free_r+0x8c>)
 8006b12:	6813      	ldr	r3, [r2, #0]
 8006b14:	b933      	cbnz	r3, 8006b24 <_free_r+0x2c>
 8006b16:	6063      	str	r3, [r4, #4]
 8006b18:	6014      	str	r4, [r2, #0]
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b20:	f000 b8e2 	b.w	8006ce8 <__malloc_unlock>
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	d908      	bls.n	8006b3a <_free_r+0x42>
 8006b28:	6820      	ldr	r0, [r4, #0]
 8006b2a:	1821      	adds	r1, r4, r0
 8006b2c:	428b      	cmp	r3, r1
 8006b2e:	bf01      	itttt	eq
 8006b30:	6819      	ldreq	r1, [r3, #0]
 8006b32:	685b      	ldreq	r3, [r3, #4]
 8006b34:	1809      	addeq	r1, r1, r0
 8006b36:	6021      	streq	r1, [r4, #0]
 8006b38:	e7ed      	b.n	8006b16 <_free_r+0x1e>
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	b10b      	cbz	r3, 8006b44 <_free_r+0x4c>
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	d9fa      	bls.n	8006b3a <_free_r+0x42>
 8006b44:	6811      	ldr	r1, [r2, #0]
 8006b46:	1850      	adds	r0, r2, r1
 8006b48:	42a0      	cmp	r0, r4
 8006b4a:	d10b      	bne.n	8006b64 <_free_r+0x6c>
 8006b4c:	6820      	ldr	r0, [r4, #0]
 8006b4e:	4401      	add	r1, r0
 8006b50:	1850      	adds	r0, r2, r1
 8006b52:	4283      	cmp	r3, r0
 8006b54:	6011      	str	r1, [r2, #0]
 8006b56:	d1e0      	bne.n	8006b1a <_free_r+0x22>
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	4408      	add	r0, r1
 8006b5e:	6010      	str	r0, [r2, #0]
 8006b60:	6053      	str	r3, [r2, #4]
 8006b62:	e7da      	b.n	8006b1a <_free_r+0x22>
 8006b64:	d902      	bls.n	8006b6c <_free_r+0x74>
 8006b66:	230c      	movs	r3, #12
 8006b68:	602b      	str	r3, [r5, #0]
 8006b6a:	e7d6      	b.n	8006b1a <_free_r+0x22>
 8006b6c:	6820      	ldr	r0, [r4, #0]
 8006b6e:	1821      	adds	r1, r4, r0
 8006b70:	428b      	cmp	r3, r1
 8006b72:	bf01      	itttt	eq
 8006b74:	6819      	ldreq	r1, [r3, #0]
 8006b76:	685b      	ldreq	r3, [r3, #4]
 8006b78:	1809      	addeq	r1, r1, r0
 8006b7a:	6021      	streq	r1, [r4, #0]
 8006b7c:	6063      	str	r3, [r4, #4]
 8006b7e:	6054      	str	r4, [r2, #4]
 8006b80:	e7cb      	b.n	8006b1a <_free_r+0x22>
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	2000089c 	.word	0x2000089c

08006b88 <malloc>:
 8006b88:	4b02      	ldr	r3, [pc, #8]	@ (8006b94 <malloc+0xc>)
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	f000 b825 	b.w	8006bdc <_malloc_r>
 8006b92:	bf00      	nop
 8006b94:	20000018 	.word	0x20000018

08006b98 <sbrk_aligned>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	4e0f      	ldr	r6, [pc, #60]	@ (8006bd8 <sbrk_aligned+0x40>)
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	6831      	ldr	r1, [r6, #0]
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	b911      	cbnz	r1, 8006baa <sbrk_aligned+0x12>
 8006ba4:	f001 f804 	bl	8007bb0 <_sbrk_r>
 8006ba8:	6030      	str	r0, [r6, #0]
 8006baa:	4621      	mov	r1, r4
 8006bac:	4628      	mov	r0, r5
 8006bae:	f000 ffff 	bl	8007bb0 <_sbrk_r>
 8006bb2:	1c43      	adds	r3, r0, #1
 8006bb4:	d103      	bne.n	8006bbe <sbrk_aligned+0x26>
 8006bb6:	f04f 34ff 	mov.w	r4, #4294967295
 8006bba:	4620      	mov	r0, r4
 8006bbc:	bd70      	pop	{r4, r5, r6, pc}
 8006bbe:	1cc4      	adds	r4, r0, #3
 8006bc0:	f024 0403 	bic.w	r4, r4, #3
 8006bc4:	42a0      	cmp	r0, r4
 8006bc6:	d0f8      	beq.n	8006bba <sbrk_aligned+0x22>
 8006bc8:	1a21      	subs	r1, r4, r0
 8006bca:	4628      	mov	r0, r5
 8006bcc:	f000 fff0 	bl	8007bb0 <_sbrk_r>
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d1f2      	bne.n	8006bba <sbrk_aligned+0x22>
 8006bd4:	e7ef      	b.n	8006bb6 <sbrk_aligned+0x1e>
 8006bd6:	bf00      	nop
 8006bd8:	20000898 	.word	0x20000898

08006bdc <_malloc_r>:
 8006bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be0:	1ccd      	adds	r5, r1, #3
 8006be2:	f025 0503 	bic.w	r5, r5, #3
 8006be6:	3508      	adds	r5, #8
 8006be8:	2d0c      	cmp	r5, #12
 8006bea:	bf38      	it	cc
 8006bec:	250c      	movcc	r5, #12
 8006bee:	2d00      	cmp	r5, #0
 8006bf0:	4606      	mov	r6, r0
 8006bf2:	db01      	blt.n	8006bf8 <_malloc_r+0x1c>
 8006bf4:	42a9      	cmp	r1, r5
 8006bf6:	d904      	bls.n	8006c02 <_malloc_r+0x26>
 8006bf8:	230c      	movs	r3, #12
 8006bfa:	6033      	str	r3, [r6, #0]
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006cd8 <_malloc_r+0xfc>
 8006c06:	f000 f869 	bl	8006cdc <__malloc_lock>
 8006c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c0e:	461c      	mov	r4, r3
 8006c10:	bb44      	cbnz	r4, 8006c64 <_malloc_r+0x88>
 8006c12:	4629      	mov	r1, r5
 8006c14:	4630      	mov	r0, r6
 8006c16:	f7ff ffbf 	bl	8006b98 <sbrk_aligned>
 8006c1a:	1c43      	adds	r3, r0, #1
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	d158      	bne.n	8006cd2 <_malloc_r+0xf6>
 8006c20:	f8d8 4000 	ldr.w	r4, [r8]
 8006c24:	4627      	mov	r7, r4
 8006c26:	2f00      	cmp	r7, #0
 8006c28:	d143      	bne.n	8006cb2 <_malloc_r+0xd6>
 8006c2a:	2c00      	cmp	r4, #0
 8006c2c:	d04b      	beq.n	8006cc6 <_malloc_r+0xea>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	4639      	mov	r1, r7
 8006c32:	4630      	mov	r0, r6
 8006c34:	eb04 0903 	add.w	r9, r4, r3
 8006c38:	f000 ffba 	bl	8007bb0 <_sbrk_r>
 8006c3c:	4581      	cmp	r9, r0
 8006c3e:	d142      	bne.n	8006cc6 <_malloc_r+0xea>
 8006c40:	6821      	ldr	r1, [r4, #0]
 8006c42:	4630      	mov	r0, r6
 8006c44:	1a6d      	subs	r5, r5, r1
 8006c46:	4629      	mov	r1, r5
 8006c48:	f7ff ffa6 	bl	8006b98 <sbrk_aligned>
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d03a      	beq.n	8006cc6 <_malloc_r+0xea>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	442b      	add	r3, r5
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	f8d8 3000 	ldr.w	r3, [r8]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	bb62      	cbnz	r2, 8006cb8 <_malloc_r+0xdc>
 8006c5e:	f8c8 7000 	str.w	r7, [r8]
 8006c62:	e00f      	b.n	8006c84 <_malloc_r+0xa8>
 8006c64:	6822      	ldr	r2, [r4, #0]
 8006c66:	1b52      	subs	r2, r2, r5
 8006c68:	d420      	bmi.n	8006cac <_malloc_r+0xd0>
 8006c6a:	2a0b      	cmp	r2, #11
 8006c6c:	d917      	bls.n	8006c9e <_malloc_r+0xc2>
 8006c6e:	1961      	adds	r1, r4, r5
 8006c70:	42a3      	cmp	r3, r4
 8006c72:	6025      	str	r5, [r4, #0]
 8006c74:	bf18      	it	ne
 8006c76:	6059      	strne	r1, [r3, #4]
 8006c78:	6863      	ldr	r3, [r4, #4]
 8006c7a:	bf08      	it	eq
 8006c7c:	f8c8 1000 	streq.w	r1, [r8]
 8006c80:	5162      	str	r2, [r4, r5]
 8006c82:	604b      	str	r3, [r1, #4]
 8006c84:	4630      	mov	r0, r6
 8006c86:	f000 f82f 	bl	8006ce8 <__malloc_unlock>
 8006c8a:	f104 000b 	add.w	r0, r4, #11
 8006c8e:	1d23      	adds	r3, r4, #4
 8006c90:	f020 0007 	bic.w	r0, r0, #7
 8006c94:	1ac2      	subs	r2, r0, r3
 8006c96:	bf1c      	itt	ne
 8006c98:	1a1b      	subne	r3, r3, r0
 8006c9a:	50a3      	strne	r3, [r4, r2]
 8006c9c:	e7af      	b.n	8006bfe <_malloc_r+0x22>
 8006c9e:	6862      	ldr	r2, [r4, #4]
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	bf0c      	ite	eq
 8006ca4:	f8c8 2000 	streq.w	r2, [r8]
 8006ca8:	605a      	strne	r2, [r3, #4]
 8006caa:	e7eb      	b.n	8006c84 <_malloc_r+0xa8>
 8006cac:	4623      	mov	r3, r4
 8006cae:	6864      	ldr	r4, [r4, #4]
 8006cb0:	e7ae      	b.n	8006c10 <_malloc_r+0x34>
 8006cb2:	463c      	mov	r4, r7
 8006cb4:	687f      	ldr	r7, [r7, #4]
 8006cb6:	e7b6      	b.n	8006c26 <_malloc_r+0x4a>
 8006cb8:	461a      	mov	r2, r3
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	42a3      	cmp	r3, r4
 8006cbe:	d1fb      	bne.n	8006cb8 <_malloc_r+0xdc>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	6053      	str	r3, [r2, #4]
 8006cc4:	e7de      	b.n	8006c84 <_malloc_r+0xa8>
 8006cc6:	230c      	movs	r3, #12
 8006cc8:	4630      	mov	r0, r6
 8006cca:	6033      	str	r3, [r6, #0]
 8006ccc:	f000 f80c 	bl	8006ce8 <__malloc_unlock>
 8006cd0:	e794      	b.n	8006bfc <_malloc_r+0x20>
 8006cd2:	6005      	str	r5, [r0, #0]
 8006cd4:	e7d6      	b.n	8006c84 <_malloc_r+0xa8>
 8006cd6:	bf00      	nop
 8006cd8:	2000089c 	.word	0x2000089c

08006cdc <__malloc_lock>:
 8006cdc:	4801      	ldr	r0, [pc, #4]	@ (8006ce4 <__malloc_lock+0x8>)
 8006cde:	f7ff b89a 	b.w	8005e16 <__retarget_lock_acquire_recursive>
 8006ce2:	bf00      	nop
 8006ce4:	20000894 	.word	0x20000894

08006ce8 <__malloc_unlock>:
 8006ce8:	4801      	ldr	r0, [pc, #4]	@ (8006cf0 <__malloc_unlock+0x8>)
 8006cea:	f7ff b895 	b.w	8005e18 <__retarget_lock_release_recursive>
 8006cee:	bf00      	nop
 8006cf0:	20000894 	.word	0x20000894

08006cf4 <_Balloc>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	69c6      	ldr	r6, [r0, #28]
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	460d      	mov	r5, r1
 8006cfc:	b976      	cbnz	r6, 8006d1c <_Balloc+0x28>
 8006cfe:	2010      	movs	r0, #16
 8006d00:	f7ff ff42 	bl	8006b88 <malloc>
 8006d04:	4602      	mov	r2, r0
 8006d06:	61e0      	str	r0, [r4, #28]
 8006d08:	b920      	cbnz	r0, 8006d14 <_Balloc+0x20>
 8006d0a:	216b      	movs	r1, #107	@ 0x6b
 8006d0c:	4b17      	ldr	r3, [pc, #92]	@ (8006d6c <_Balloc+0x78>)
 8006d0e:	4818      	ldr	r0, [pc, #96]	@ (8006d70 <_Balloc+0x7c>)
 8006d10:	f000 ff5e 	bl	8007bd0 <__assert_func>
 8006d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d18:	6006      	str	r6, [r0, #0]
 8006d1a:	60c6      	str	r6, [r0, #12]
 8006d1c:	69e6      	ldr	r6, [r4, #28]
 8006d1e:	68f3      	ldr	r3, [r6, #12]
 8006d20:	b183      	cbz	r3, 8006d44 <_Balloc+0x50>
 8006d22:	69e3      	ldr	r3, [r4, #28]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d2a:	b9b8      	cbnz	r0, 8006d5c <_Balloc+0x68>
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	fa01 f605 	lsl.w	r6, r1, r5
 8006d32:	1d72      	adds	r2, r6, #5
 8006d34:	4620      	mov	r0, r4
 8006d36:	0092      	lsls	r2, r2, #2
 8006d38:	f000 ff68 	bl	8007c0c <_calloc_r>
 8006d3c:	b160      	cbz	r0, 8006d58 <_Balloc+0x64>
 8006d3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d42:	e00e      	b.n	8006d62 <_Balloc+0x6e>
 8006d44:	2221      	movs	r2, #33	@ 0x21
 8006d46:	2104      	movs	r1, #4
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 ff5f 	bl	8007c0c <_calloc_r>
 8006d4e:	69e3      	ldr	r3, [r4, #28]
 8006d50:	60f0      	str	r0, [r6, #12]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e4      	bne.n	8006d22 <_Balloc+0x2e>
 8006d58:	2000      	movs	r0, #0
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
 8006d5c:	6802      	ldr	r2, [r0, #0]
 8006d5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d62:	2300      	movs	r3, #0
 8006d64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d68:	e7f7      	b.n	8006d5a <_Balloc+0x66>
 8006d6a:	bf00      	nop
 8006d6c:	08007f97 	.word	0x08007f97
 8006d70:	08008017 	.word	0x08008017

08006d74 <_Bfree>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	69c6      	ldr	r6, [r0, #28]
 8006d78:	4605      	mov	r5, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	b976      	cbnz	r6, 8006d9c <_Bfree+0x28>
 8006d7e:	2010      	movs	r0, #16
 8006d80:	f7ff ff02 	bl	8006b88 <malloc>
 8006d84:	4602      	mov	r2, r0
 8006d86:	61e8      	str	r0, [r5, #28]
 8006d88:	b920      	cbnz	r0, 8006d94 <_Bfree+0x20>
 8006d8a:	218f      	movs	r1, #143	@ 0x8f
 8006d8c:	4b08      	ldr	r3, [pc, #32]	@ (8006db0 <_Bfree+0x3c>)
 8006d8e:	4809      	ldr	r0, [pc, #36]	@ (8006db4 <_Bfree+0x40>)
 8006d90:	f000 ff1e 	bl	8007bd0 <__assert_func>
 8006d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d98:	6006      	str	r6, [r0, #0]
 8006d9a:	60c6      	str	r6, [r0, #12]
 8006d9c:	b13c      	cbz	r4, 8006dae <_Bfree+0x3a>
 8006d9e:	69eb      	ldr	r3, [r5, #28]
 8006da0:	6862      	ldr	r2, [r4, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006da8:	6021      	str	r1, [r4, #0]
 8006daa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006dae:	bd70      	pop	{r4, r5, r6, pc}
 8006db0:	08007f97 	.word	0x08007f97
 8006db4:	08008017 	.word	0x08008017

08006db8 <__multadd>:
 8006db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbc:	4607      	mov	r7, r0
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	461e      	mov	r6, r3
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	690d      	ldr	r5, [r1, #16]
 8006dc6:	f101 0c14 	add.w	ip, r1, #20
 8006dca:	f8dc 3000 	ldr.w	r3, [ip]
 8006dce:	3001      	adds	r0, #1
 8006dd0:	b299      	uxth	r1, r3
 8006dd2:	fb02 6101 	mla	r1, r2, r1, r6
 8006dd6:	0c1e      	lsrs	r6, r3, #16
 8006dd8:	0c0b      	lsrs	r3, r1, #16
 8006dda:	fb02 3306 	mla	r3, r2, r6, r3
 8006dde:	b289      	uxth	r1, r1
 8006de0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006de4:	4285      	cmp	r5, r0
 8006de6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006dea:	f84c 1b04 	str.w	r1, [ip], #4
 8006dee:	dcec      	bgt.n	8006dca <__multadd+0x12>
 8006df0:	b30e      	cbz	r6, 8006e36 <__multadd+0x7e>
 8006df2:	68a3      	ldr	r3, [r4, #8]
 8006df4:	42ab      	cmp	r3, r5
 8006df6:	dc19      	bgt.n	8006e2c <__multadd+0x74>
 8006df8:	6861      	ldr	r1, [r4, #4]
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	3101      	adds	r1, #1
 8006dfe:	f7ff ff79 	bl	8006cf4 <_Balloc>
 8006e02:	4680      	mov	r8, r0
 8006e04:	b928      	cbnz	r0, 8006e12 <__multadd+0x5a>
 8006e06:	4602      	mov	r2, r0
 8006e08:	21ba      	movs	r1, #186	@ 0xba
 8006e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e3c <__multadd+0x84>)
 8006e0c:	480c      	ldr	r0, [pc, #48]	@ (8006e40 <__multadd+0x88>)
 8006e0e:	f000 fedf 	bl	8007bd0 <__assert_func>
 8006e12:	6922      	ldr	r2, [r4, #16]
 8006e14:	f104 010c 	add.w	r1, r4, #12
 8006e18:	3202      	adds	r2, #2
 8006e1a:	0092      	lsls	r2, r2, #2
 8006e1c:	300c      	adds	r0, #12
 8006e1e:	f7ff f80a 	bl	8005e36 <memcpy>
 8006e22:	4621      	mov	r1, r4
 8006e24:	4638      	mov	r0, r7
 8006e26:	f7ff ffa5 	bl	8006d74 <_Bfree>
 8006e2a:	4644      	mov	r4, r8
 8006e2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e30:	3501      	adds	r5, #1
 8006e32:	615e      	str	r6, [r3, #20]
 8006e34:	6125      	str	r5, [r4, #16]
 8006e36:	4620      	mov	r0, r4
 8006e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e3c:	08008006 	.word	0x08008006
 8006e40:	08008017 	.word	0x08008017

08006e44 <__hi0bits>:
 8006e44:	4603      	mov	r3, r0
 8006e46:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006e4a:	bf3a      	itte	cc
 8006e4c:	0403      	lslcc	r3, r0, #16
 8006e4e:	2010      	movcc	r0, #16
 8006e50:	2000      	movcs	r0, #0
 8006e52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e56:	bf3c      	itt	cc
 8006e58:	021b      	lslcc	r3, r3, #8
 8006e5a:	3008      	addcc	r0, #8
 8006e5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e60:	bf3c      	itt	cc
 8006e62:	011b      	lslcc	r3, r3, #4
 8006e64:	3004      	addcc	r0, #4
 8006e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e6a:	bf3c      	itt	cc
 8006e6c:	009b      	lslcc	r3, r3, #2
 8006e6e:	3002      	addcc	r0, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	db05      	blt.n	8006e80 <__hi0bits+0x3c>
 8006e74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006e78:	f100 0001 	add.w	r0, r0, #1
 8006e7c:	bf08      	it	eq
 8006e7e:	2020      	moveq	r0, #32
 8006e80:	4770      	bx	lr

08006e82 <__lo0bits>:
 8006e82:	6803      	ldr	r3, [r0, #0]
 8006e84:	4602      	mov	r2, r0
 8006e86:	f013 0007 	ands.w	r0, r3, #7
 8006e8a:	d00b      	beq.n	8006ea4 <__lo0bits+0x22>
 8006e8c:	07d9      	lsls	r1, r3, #31
 8006e8e:	d421      	bmi.n	8006ed4 <__lo0bits+0x52>
 8006e90:	0798      	lsls	r0, r3, #30
 8006e92:	bf49      	itett	mi
 8006e94:	085b      	lsrmi	r3, r3, #1
 8006e96:	089b      	lsrpl	r3, r3, #2
 8006e98:	2001      	movmi	r0, #1
 8006e9a:	6013      	strmi	r3, [r2, #0]
 8006e9c:	bf5c      	itt	pl
 8006e9e:	2002      	movpl	r0, #2
 8006ea0:	6013      	strpl	r3, [r2, #0]
 8006ea2:	4770      	bx	lr
 8006ea4:	b299      	uxth	r1, r3
 8006ea6:	b909      	cbnz	r1, 8006eac <__lo0bits+0x2a>
 8006ea8:	2010      	movs	r0, #16
 8006eaa:	0c1b      	lsrs	r3, r3, #16
 8006eac:	b2d9      	uxtb	r1, r3
 8006eae:	b909      	cbnz	r1, 8006eb4 <__lo0bits+0x32>
 8006eb0:	3008      	adds	r0, #8
 8006eb2:	0a1b      	lsrs	r3, r3, #8
 8006eb4:	0719      	lsls	r1, r3, #28
 8006eb6:	bf04      	itt	eq
 8006eb8:	091b      	lsreq	r3, r3, #4
 8006eba:	3004      	addeq	r0, #4
 8006ebc:	0799      	lsls	r1, r3, #30
 8006ebe:	bf04      	itt	eq
 8006ec0:	089b      	lsreq	r3, r3, #2
 8006ec2:	3002      	addeq	r0, #2
 8006ec4:	07d9      	lsls	r1, r3, #31
 8006ec6:	d403      	bmi.n	8006ed0 <__lo0bits+0x4e>
 8006ec8:	085b      	lsrs	r3, r3, #1
 8006eca:	f100 0001 	add.w	r0, r0, #1
 8006ece:	d003      	beq.n	8006ed8 <__lo0bits+0x56>
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	4770      	bx	lr
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	4770      	bx	lr
 8006ed8:	2020      	movs	r0, #32
 8006eda:	4770      	bx	lr

08006edc <__i2b>:
 8006edc:	b510      	push	{r4, lr}
 8006ede:	460c      	mov	r4, r1
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	f7ff ff07 	bl	8006cf4 <_Balloc>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	b928      	cbnz	r0, 8006ef6 <__i2b+0x1a>
 8006eea:	f240 1145 	movw	r1, #325	@ 0x145
 8006eee:	4b04      	ldr	r3, [pc, #16]	@ (8006f00 <__i2b+0x24>)
 8006ef0:	4804      	ldr	r0, [pc, #16]	@ (8006f04 <__i2b+0x28>)
 8006ef2:	f000 fe6d 	bl	8007bd0 <__assert_func>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	6144      	str	r4, [r0, #20]
 8006efa:	6103      	str	r3, [r0, #16]
 8006efc:	bd10      	pop	{r4, pc}
 8006efe:	bf00      	nop
 8006f00:	08008006 	.word	0x08008006
 8006f04:	08008017 	.word	0x08008017

08006f08 <__multiply>:
 8006f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	690a      	ldr	r2, [r1, #16]
 8006f10:	6923      	ldr	r3, [r4, #16]
 8006f12:	460f      	mov	r7, r1
 8006f14:	429a      	cmp	r2, r3
 8006f16:	bfa2      	ittt	ge
 8006f18:	4623      	movge	r3, r4
 8006f1a:	460c      	movge	r4, r1
 8006f1c:	461f      	movge	r7, r3
 8006f1e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006f22:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006f26:	68a3      	ldr	r3, [r4, #8]
 8006f28:	6861      	ldr	r1, [r4, #4]
 8006f2a:	eb0a 0609 	add.w	r6, sl, r9
 8006f2e:	42b3      	cmp	r3, r6
 8006f30:	b085      	sub	sp, #20
 8006f32:	bfb8      	it	lt
 8006f34:	3101      	addlt	r1, #1
 8006f36:	f7ff fedd 	bl	8006cf4 <_Balloc>
 8006f3a:	b930      	cbnz	r0, 8006f4a <__multiply+0x42>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006f42:	4b43      	ldr	r3, [pc, #268]	@ (8007050 <__multiply+0x148>)
 8006f44:	4843      	ldr	r0, [pc, #268]	@ (8007054 <__multiply+0x14c>)
 8006f46:	f000 fe43 	bl	8007bd0 <__assert_func>
 8006f4a:	f100 0514 	add.w	r5, r0, #20
 8006f4e:	462b      	mov	r3, r5
 8006f50:	2200      	movs	r2, #0
 8006f52:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f56:	4543      	cmp	r3, r8
 8006f58:	d321      	bcc.n	8006f9e <__multiply+0x96>
 8006f5a:	f107 0114 	add.w	r1, r7, #20
 8006f5e:	f104 0214 	add.w	r2, r4, #20
 8006f62:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006f66:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006f6a:	9302      	str	r3, [sp, #8]
 8006f6c:	1b13      	subs	r3, r2, r4
 8006f6e:	3b15      	subs	r3, #21
 8006f70:	f023 0303 	bic.w	r3, r3, #3
 8006f74:	3304      	adds	r3, #4
 8006f76:	f104 0715 	add.w	r7, r4, #21
 8006f7a:	42ba      	cmp	r2, r7
 8006f7c:	bf38      	it	cc
 8006f7e:	2304      	movcc	r3, #4
 8006f80:	9301      	str	r3, [sp, #4]
 8006f82:	9b02      	ldr	r3, [sp, #8]
 8006f84:	9103      	str	r1, [sp, #12]
 8006f86:	428b      	cmp	r3, r1
 8006f88:	d80c      	bhi.n	8006fa4 <__multiply+0x9c>
 8006f8a:	2e00      	cmp	r6, #0
 8006f8c:	dd03      	ble.n	8006f96 <__multiply+0x8e>
 8006f8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d05a      	beq.n	800704c <__multiply+0x144>
 8006f96:	6106      	str	r6, [r0, #16]
 8006f98:	b005      	add	sp, #20
 8006f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f9e:	f843 2b04 	str.w	r2, [r3], #4
 8006fa2:	e7d8      	b.n	8006f56 <__multiply+0x4e>
 8006fa4:	f8b1 a000 	ldrh.w	sl, [r1]
 8006fa8:	f1ba 0f00 	cmp.w	sl, #0
 8006fac:	d023      	beq.n	8006ff6 <__multiply+0xee>
 8006fae:	46a9      	mov	r9, r5
 8006fb0:	f04f 0c00 	mov.w	ip, #0
 8006fb4:	f104 0e14 	add.w	lr, r4, #20
 8006fb8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006fbc:	f8d9 3000 	ldr.w	r3, [r9]
 8006fc0:	fa1f fb87 	uxth.w	fp, r7
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	fb0a 330b 	mla	r3, sl, fp, r3
 8006fca:	4463      	add	r3, ip
 8006fcc:	f8d9 c000 	ldr.w	ip, [r9]
 8006fd0:	0c3f      	lsrs	r7, r7, #16
 8006fd2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006fd6:	fb0a c707 	mla	r7, sl, r7, ip
 8006fda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006fe4:	4572      	cmp	r2, lr
 8006fe6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006fea:	f849 3b04 	str.w	r3, [r9], #4
 8006fee:	d8e3      	bhi.n	8006fb8 <__multiply+0xb0>
 8006ff0:	9b01      	ldr	r3, [sp, #4]
 8006ff2:	f845 c003 	str.w	ip, [r5, r3]
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	3104      	adds	r1, #4
 8006ffa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006ffe:	f1b9 0f00 	cmp.w	r9, #0
 8007002:	d021      	beq.n	8007048 <__multiply+0x140>
 8007004:	46ae      	mov	lr, r5
 8007006:	f04f 0a00 	mov.w	sl, #0
 800700a:	682b      	ldr	r3, [r5, #0]
 800700c:	f104 0c14 	add.w	ip, r4, #20
 8007010:	f8bc b000 	ldrh.w	fp, [ip]
 8007014:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007018:	b29b      	uxth	r3, r3
 800701a:	fb09 770b 	mla	r7, r9, fp, r7
 800701e:	4457      	add	r7, sl
 8007020:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007024:	f84e 3b04 	str.w	r3, [lr], #4
 8007028:	f85c 3b04 	ldr.w	r3, [ip], #4
 800702c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007030:	f8be 3000 	ldrh.w	r3, [lr]
 8007034:	4562      	cmp	r2, ip
 8007036:	fb09 330a 	mla	r3, r9, sl, r3
 800703a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800703e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007042:	d8e5      	bhi.n	8007010 <__multiply+0x108>
 8007044:	9f01      	ldr	r7, [sp, #4]
 8007046:	51eb      	str	r3, [r5, r7]
 8007048:	3504      	adds	r5, #4
 800704a:	e79a      	b.n	8006f82 <__multiply+0x7a>
 800704c:	3e01      	subs	r6, #1
 800704e:	e79c      	b.n	8006f8a <__multiply+0x82>
 8007050:	08008006 	.word	0x08008006
 8007054:	08008017 	.word	0x08008017

08007058 <__pow5mult>:
 8007058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800705c:	4615      	mov	r5, r2
 800705e:	f012 0203 	ands.w	r2, r2, #3
 8007062:	4607      	mov	r7, r0
 8007064:	460e      	mov	r6, r1
 8007066:	d007      	beq.n	8007078 <__pow5mult+0x20>
 8007068:	4c25      	ldr	r4, [pc, #148]	@ (8007100 <__pow5mult+0xa8>)
 800706a:	3a01      	subs	r2, #1
 800706c:	2300      	movs	r3, #0
 800706e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007072:	f7ff fea1 	bl	8006db8 <__multadd>
 8007076:	4606      	mov	r6, r0
 8007078:	10ad      	asrs	r5, r5, #2
 800707a:	d03d      	beq.n	80070f8 <__pow5mult+0xa0>
 800707c:	69fc      	ldr	r4, [r7, #28]
 800707e:	b97c      	cbnz	r4, 80070a0 <__pow5mult+0x48>
 8007080:	2010      	movs	r0, #16
 8007082:	f7ff fd81 	bl	8006b88 <malloc>
 8007086:	4602      	mov	r2, r0
 8007088:	61f8      	str	r0, [r7, #28]
 800708a:	b928      	cbnz	r0, 8007098 <__pow5mult+0x40>
 800708c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007090:	4b1c      	ldr	r3, [pc, #112]	@ (8007104 <__pow5mult+0xac>)
 8007092:	481d      	ldr	r0, [pc, #116]	@ (8007108 <__pow5mult+0xb0>)
 8007094:	f000 fd9c 	bl	8007bd0 <__assert_func>
 8007098:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800709c:	6004      	str	r4, [r0, #0]
 800709e:	60c4      	str	r4, [r0, #12]
 80070a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80070a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070a8:	b94c      	cbnz	r4, 80070be <__pow5mult+0x66>
 80070aa:	f240 2171 	movw	r1, #625	@ 0x271
 80070ae:	4638      	mov	r0, r7
 80070b0:	f7ff ff14 	bl	8006edc <__i2b>
 80070b4:	2300      	movs	r3, #0
 80070b6:	4604      	mov	r4, r0
 80070b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80070bc:	6003      	str	r3, [r0, #0]
 80070be:	f04f 0900 	mov.w	r9, #0
 80070c2:	07eb      	lsls	r3, r5, #31
 80070c4:	d50a      	bpl.n	80070dc <__pow5mult+0x84>
 80070c6:	4631      	mov	r1, r6
 80070c8:	4622      	mov	r2, r4
 80070ca:	4638      	mov	r0, r7
 80070cc:	f7ff ff1c 	bl	8006f08 <__multiply>
 80070d0:	4680      	mov	r8, r0
 80070d2:	4631      	mov	r1, r6
 80070d4:	4638      	mov	r0, r7
 80070d6:	f7ff fe4d 	bl	8006d74 <_Bfree>
 80070da:	4646      	mov	r6, r8
 80070dc:	106d      	asrs	r5, r5, #1
 80070de:	d00b      	beq.n	80070f8 <__pow5mult+0xa0>
 80070e0:	6820      	ldr	r0, [r4, #0]
 80070e2:	b938      	cbnz	r0, 80070f4 <__pow5mult+0x9c>
 80070e4:	4622      	mov	r2, r4
 80070e6:	4621      	mov	r1, r4
 80070e8:	4638      	mov	r0, r7
 80070ea:	f7ff ff0d 	bl	8006f08 <__multiply>
 80070ee:	6020      	str	r0, [r4, #0]
 80070f0:	f8c0 9000 	str.w	r9, [r0]
 80070f4:	4604      	mov	r4, r0
 80070f6:	e7e4      	b.n	80070c2 <__pow5mult+0x6a>
 80070f8:	4630      	mov	r0, r6
 80070fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070fe:	bf00      	nop
 8007100:	08008070 	.word	0x08008070
 8007104:	08007f97 	.word	0x08007f97
 8007108:	08008017 	.word	0x08008017

0800710c <__lshift>:
 800710c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007110:	460c      	mov	r4, r1
 8007112:	4607      	mov	r7, r0
 8007114:	4691      	mov	r9, r2
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	6849      	ldr	r1, [r1, #4]
 800711a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800711e:	68a3      	ldr	r3, [r4, #8]
 8007120:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007124:	f108 0601 	add.w	r6, r8, #1
 8007128:	42b3      	cmp	r3, r6
 800712a:	db0b      	blt.n	8007144 <__lshift+0x38>
 800712c:	4638      	mov	r0, r7
 800712e:	f7ff fde1 	bl	8006cf4 <_Balloc>
 8007132:	4605      	mov	r5, r0
 8007134:	b948      	cbnz	r0, 800714a <__lshift+0x3e>
 8007136:	4602      	mov	r2, r0
 8007138:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800713c:	4b27      	ldr	r3, [pc, #156]	@ (80071dc <__lshift+0xd0>)
 800713e:	4828      	ldr	r0, [pc, #160]	@ (80071e0 <__lshift+0xd4>)
 8007140:	f000 fd46 	bl	8007bd0 <__assert_func>
 8007144:	3101      	adds	r1, #1
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	e7ee      	b.n	8007128 <__lshift+0x1c>
 800714a:	2300      	movs	r3, #0
 800714c:	f100 0114 	add.w	r1, r0, #20
 8007150:	f100 0210 	add.w	r2, r0, #16
 8007154:	4618      	mov	r0, r3
 8007156:	4553      	cmp	r3, sl
 8007158:	db33      	blt.n	80071c2 <__lshift+0xb6>
 800715a:	6920      	ldr	r0, [r4, #16]
 800715c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007160:	f104 0314 	add.w	r3, r4, #20
 8007164:	f019 091f 	ands.w	r9, r9, #31
 8007168:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800716c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007170:	d02b      	beq.n	80071ca <__lshift+0xbe>
 8007172:	468a      	mov	sl, r1
 8007174:	2200      	movs	r2, #0
 8007176:	f1c9 0e20 	rsb	lr, r9, #32
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	fa00 f009 	lsl.w	r0, r0, r9
 8007180:	4310      	orrs	r0, r2
 8007182:	f84a 0b04 	str.w	r0, [sl], #4
 8007186:	f853 2b04 	ldr.w	r2, [r3], #4
 800718a:	459c      	cmp	ip, r3
 800718c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007190:	d8f3      	bhi.n	800717a <__lshift+0x6e>
 8007192:	ebac 0304 	sub.w	r3, ip, r4
 8007196:	3b15      	subs	r3, #21
 8007198:	f023 0303 	bic.w	r3, r3, #3
 800719c:	3304      	adds	r3, #4
 800719e:	f104 0015 	add.w	r0, r4, #21
 80071a2:	4584      	cmp	ip, r0
 80071a4:	bf38      	it	cc
 80071a6:	2304      	movcc	r3, #4
 80071a8:	50ca      	str	r2, [r1, r3]
 80071aa:	b10a      	cbz	r2, 80071b0 <__lshift+0xa4>
 80071ac:	f108 0602 	add.w	r6, r8, #2
 80071b0:	3e01      	subs	r6, #1
 80071b2:	4638      	mov	r0, r7
 80071b4:	4621      	mov	r1, r4
 80071b6:	612e      	str	r6, [r5, #16]
 80071b8:	f7ff fddc 	bl	8006d74 <_Bfree>
 80071bc:	4628      	mov	r0, r5
 80071be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80071c6:	3301      	adds	r3, #1
 80071c8:	e7c5      	b.n	8007156 <__lshift+0x4a>
 80071ca:	3904      	subs	r1, #4
 80071cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d0:	459c      	cmp	ip, r3
 80071d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80071d6:	d8f9      	bhi.n	80071cc <__lshift+0xc0>
 80071d8:	e7ea      	b.n	80071b0 <__lshift+0xa4>
 80071da:	bf00      	nop
 80071dc:	08008006 	.word	0x08008006
 80071e0:	08008017 	.word	0x08008017

080071e4 <__mcmp>:
 80071e4:	4603      	mov	r3, r0
 80071e6:	690a      	ldr	r2, [r1, #16]
 80071e8:	6900      	ldr	r0, [r0, #16]
 80071ea:	b530      	push	{r4, r5, lr}
 80071ec:	1a80      	subs	r0, r0, r2
 80071ee:	d10e      	bne.n	800720e <__mcmp+0x2a>
 80071f0:	3314      	adds	r3, #20
 80071f2:	3114      	adds	r1, #20
 80071f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80071f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80071fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007200:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007204:	4295      	cmp	r5, r2
 8007206:	d003      	beq.n	8007210 <__mcmp+0x2c>
 8007208:	d205      	bcs.n	8007216 <__mcmp+0x32>
 800720a:	f04f 30ff 	mov.w	r0, #4294967295
 800720e:	bd30      	pop	{r4, r5, pc}
 8007210:	42a3      	cmp	r3, r4
 8007212:	d3f3      	bcc.n	80071fc <__mcmp+0x18>
 8007214:	e7fb      	b.n	800720e <__mcmp+0x2a>
 8007216:	2001      	movs	r0, #1
 8007218:	e7f9      	b.n	800720e <__mcmp+0x2a>
	...

0800721c <__mdiff>:
 800721c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	4689      	mov	r9, r1
 8007222:	4606      	mov	r6, r0
 8007224:	4611      	mov	r1, r2
 8007226:	4648      	mov	r0, r9
 8007228:	4614      	mov	r4, r2
 800722a:	f7ff ffdb 	bl	80071e4 <__mcmp>
 800722e:	1e05      	subs	r5, r0, #0
 8007230:	d112      	bne.n	8007258 <__mdiff+0x3c>
 8007232:	4629      	mov	r1, r5
 8007234:	4630      	mov	r0, r6
 8007236:	f7ff fd5d 	bl	8006cf4 <_Balloc>
 800723a:	4602      	mov	r2, r0
 800723c:	b928      	cbnz	r0, 800724a <__mdiff+0x2e>
 800723e:	f240 2137 	movw	r1, #567	@ 0x237
 8007242:	4b3e      	ldr	r3, [pc, #248]	@ (800733c <__mdiff+0x120>)
 8007244:	483e      	ldr	r0, [pc, #248]	@ (8007340 <__mdiff+0x124>)
 8007246:	f000 fcc3 	bl	8007bd0 <__assert_func>
 800724a:	2301      	movs	r3, #1
 800724c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007250:	4610      	mov	r0, r2
 8007252:	b003      	add	sp, #12
 8007254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007258:	bfbc      	itt	lt
 800725a:	464b      	movlt	r3, r9
 800725c:	46a1      	movlt	r9, r4
 800725e:	4630      	mov	r0, r6
 8007260:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007264:	bfba      	itte	lt
 8007266:	461c      	movlt	r4, r3
 8007268:	2501      	movlt	r5, #1
 800726a:	2500      	movge	r5, #0
 800726c:	f7ff fd42 	bl	8006cf4 <_Balloc>
 8007270:	4602      	mov	r2, r0
 8007272:	b918      	cbnz	r0, 800727c <__mdiff+0x60>
 8007274:	f240 2145 	movw	r1, #581	@ 0x245
 8007278:	4b30      	ldr	r3, [pc, #192]	@ (800733c <__mdiff+0x120>)
 800727a:	e7e3      	b.n	8007244 <__mdiff+0x28>
 800727c:	f100 0b14 	add.w	fp, r0, #20
 8007280:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007284:	f109 0310 	add.w	r3, r9, #16
 8007288:	60c5      	str	r5, [r0, #12]
 800728a:	f04f 0c00 	mov.w	ip, #0
 800728e:	f109 0514 	add.w	r5, r9, #20
 8007292:	46d9      	mov	r9, fp
 8007294:	6926      	ldr	r6, [r4, #16]
 8007296:	f104 0e14 	add.w	lr, r4, #20
 800729a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800729e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	9b01      	ldr	r3, [sp, #4]
 80072a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80072aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80072ae:	b281      	uxth	r1, r0
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	fa1f f38a 	uxth.w	r3, sl
 80072b6:	1a5b      	subs	r3, r3, r1
 80072b8:	0c00      	lsrs	r0, r0, #16
 80072ba:	4463      	add	r3, ip
 80072bc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80072c0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80072ca:	4576      	cmp	r6, lr
 80072cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072d0:	f849 3b04 	str.w	r3, [r9], #4
 80072d4:	d8e6      	bhi.n	80072a4 <__mdiff+0x88>
 80072d6:	1b33      	subs	r3, r6, r4
 80072d8:	3b15      	subs	r3, #21
 80072da:	f023 0303 	bic.w	r3, r3, #3
 80072de:	3415      	adds	r4, #21
 80072e0:	3304      	adds	r3, #4
 80072e2:	42a6      	cmp	r6, r4
 80072e4:	bf38      	it	cc
 80072e6:	2304      	movcc	r3, #4
 80072e8:	441d      	add	r5, r3
 80072ea:	445b      	add	r3, fp
 80072ec:	461e      	mov	r6, r3
 80072ee:	462c      	mov	r4, r5
 80072f0:	4544      	cmp	r4, r8
 80072f2:	d30e      	bcc.n	8007312 <__mdiff+0xf6>
 80072f4:	f108 0103 	add.w	r1, r8, #3
 80072f8:	1b49      	subs	r1, r1, r5
 80072fa:	f021 0103 	bic.w	r1, r1, #3
 80072fe:	3d03      	subs	r5, #3
 8007300:	45a8      	cmp	r8, r5
 8007302:	bf38      	it	cc
 8007304:	2100      	movcc	r1, #0
 8007306:	440b      	add	r3, r1
 8007308:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800730c:	b199      	cbz	r1, 8007336 <__mdiff+0x11a>
 800730e:	6117      	str	r7, [r2, #16]
 8007310:	e79e      	b.n	8007250 <__mdiff+0x34>
 8007312:	46e6      	mov	lr, ip
 8007314:	f854 1b04 	ldr.w	r1, [r4], #4
 8007318:	fa1f fc81 	uxth.w	ip, r1
 800731c:	44f4      	add	ip, lr
 800731e:	0c08      	lsrs	r0, r1, #16
 8007320:	4471      	add	r1, lr
 8007322:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007326:	b289      	uxth	r1, r1
 8007328:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800732c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007330:	f846 1b04 	str.w	r1, [r6], #4
 8007334:	e7dc      	b.n	80072f0 <__mdiff+0xd4>
 8007336:	3f01      	subs	r7, #1
 8007338:	e7e6      	b.n	8007308 <__mdiff+0xec>
 800733a:	bf00      	nop
 800733c:	08008006 	.word	0x08008006
 8007340:	08008017 	.word	0x08008017

08007344 <__d2b>:
 8007344:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007348:	2101      	movs	r1, #1
 800734a:	4690      	mov	r8, r2
 800734c:	4699      	mov	r9, r3
 800734e:	9e08      	ldr	r6, [sp, #32]
 8007350:	f7ff fcd0 	bl	8006cf4 <_Balloc>
 8007354:	4604      	mov	r4, r0
 8007356:	b930      	cbnz	r0, 8007366 <__d2b+0x22>
 8007358:	4602      	mov	r2, r0
 800735a:	f240 310f 	movw	r1, #783	@ 0x30f
 800735e:	4b23      	ldr	r3, [pc, #140]	@ (80073ec <__d2b+0xa8>)
 8007360:	4823      	ldr	r0, [pc, #140]	@ (80073f0 <__d2b+0xac>)
 8007362:	f000 fc35 	bl	8007bd0 <__assert_func>
 8007366:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800736a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800736e:	b10d      	cbz	r5, 8007374 <__d2b+0x30>
 8007370:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	f1b8 0300 	subs.w	r3, r8, #0
 800737a:	d024      	beq.n	80073c6 <__d2b+0x82>
 800737c:	4668      	mov	r0, sp
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	f7ff fd7f 	bl	8006e82 <__lo0bits>
 8007384:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007388:	b1d8      	cbz	r0, 80073c2 <__d2b+0x7e>
 800738a:	f1c0 0320 	rsb	r3, r0, #32
 800738e:	fa02 f303 	lsl.w	r3, r2, r3
 8007392:	430b      	orrs	r3, r1
 8007394:	40c2      	lsrs	r2, r0
 8007396:	6163      	str	r3, [r4, #20]
 8007398:	9201      	str	r2, [sp, #4]
 800739a:	9b01      	ldr	r3, [sp, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	bf0c      	ite	eq
 80073a0:	2201      	moveq	r2, #1
 80073a2:	2202      	movne	r2, #2
 80073a4:	61a3      	str	r3, [r4, #24]
 80073a6:	6122      	str	r2, [r4, #16]
 80073a8:	b1ad      	cbz	r5, 80073d6 <__d2b+0x92>
 80073aa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80073ae:	4405      	add	r5, r0
 80073b0:	6035      	str	r5, [r6, #0]
 80073b2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80073b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b8:	6018      	str	r0, [r3, #0]
 80073ba:	4620      	mov	r0, r4
 80073bc:	b002      	add	sp, #8
 80073be:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80073c2:	6161      	str	r1, [r4, #20]
 80073c4:	e7e9      	b.n	800739a <__d2b+0x56>
 80073c6:	a801      	add	r0, sp, #4
 80073c8:	f7ff fd5b 	bl	8006e82 <__lo0bits>
 80073cc:	9b01      	ldr	r3, [sp, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	6163      	str	r3, [r4, #20]
 80073d2:	3020      	adds	r0, #32
 80073d4:	e7e7      	b.n	80073a6 <__d2b+0x62>
 80073d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80073da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073de:	6030      	str	r0, [r6, #0]
 80073e0:	6918      	ldr	r0, [r3, #16]
 80073e2:	f7ff fd2f 	bl	8006e44 <__hi0bits>
 80073e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073ea:	e7e4      	b.n	80073b6 <__d2b+0x72>
 80073ec:	08008006 	.word	0x08008006
 80073f0:	08008017 	.word	0x08008017

080073f4 <__ssputs_r>:
 80073f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	461f      	mov	r7, r3
 80073fa:	688e      	ldr	r6, [r1, #8]
 80073fc:	4682      	mov	sl, r0
 80073fe:	42be      	cmp	r6, r7
 8007400:	460c      	mov	r4, r1
 8007402:	4690      	mov	r8, r2
 8007404:	680b      	ldr	r3, [r1, #0]
 8007406:	d82d      	bhi.n	8007464 <__ssputs_r+0x70>
 8007408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800740c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007410:	d026      	beq.n	8007460 <__ssputs_r+0x6c>
 8007412:	6965      	ldr	r5, [r4, #20]
 8007414:	6909      	ldr	r1, [r1, #16]
 8007416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800741a:	eba3 0901 	sub.w	r9, r3, r1
 800741e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007422:	1c7b      	adds	r3, r7, #1
 8007424:	444b      	add	r3, r9
 8007426:	106d      	asrs	r5, r5, #1
 8007428:	429d      	cmp	r5, r3
 800742a:	bf38      	it	cc
 800742c:	461d      	movcc	r5, r3
 800742e:	0553      	lsls	r3, r2, #21
 8007430:	d527      	bpl.n	8007482 <__ssputs_r+0x8e>
 8007432:	4629      	mov	r1, r5
 8007434:	f7ff fbd2 	bl	8006bdc <_malloc_r>
 8007438:	4606      	mov	r6, r0
 800743a:	b360      	cbz	r0, 8007496 <__ssputs_r+0xa2>
 800743c:	464a      	mov	r2, r9
 800743e:	6921      	ldr	r1, [r4, #16]
 8007440:	f7fe fcf9 	bl	8005e36 <memcpy>
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800744a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800744e:	81a3      	strh	r3, [r4, #12]
 8007450:	6126      	str	r6, [r4, #16]
 8007452:	444e      	add	r6, r9
 8007454:	6026      	str	r6, [r4, #0]
 8007456:	463e      	mov	r6, r7
 8007458:	6165      	str	r5, [r4, #20]
 800745a:	eba5 0509 	sub.w	r5, r5, r9
 800745e:	60a5      	str	r5, [r4, #8]
 8007460:	42be      	cmp	r6, r7
 8007462:	d900      	bls.n	8007466 <__ssputs_r+0x72>
 8007464:	463e      	mov	r6, r7
 8007466:	4632      	mov	r2, r6
 8007468:	4641      	mov	r1, r8
 800746a:	6820      	ldr	r0, [r4, #0]
 800746c:	f000 fb63 	bl	8007b36 <memmove>
 8007470:	2000      	movs	r0, #0
 8007472:	68a3      	ldr	r3, [r4, #8]
 8007474:	1b9b      	subs	r3, r3, r6
 8007476:	60a3      	str	r3, [r4, #8]
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	4433      	add	r3, r6
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007482:	462a      	mov	r2, r5
 8007484:	f000 fbe8 	bl	8007c58 <_realloc_r>
 8007488:	4606      	mov	r6, r0
 800748a:	2800      	cmp	r0, #0
 800748c:	d1e0      	bne.n	8007450 <__ssputs_r+0x5c>
 800748e:	4650      	mov	r0, sl
 8007490:	6921      	ldr	r1, [r4, #16]
 8007492:	f7ff fb31 	bl	8006af8 <_free_r>
 8007496:	230c      	movs	r3, #12
 8007498:	f8ca 3000 	str.w	r3, [sl]
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	f04f 30ff 	mov.w	r0, #4294967295
 80074a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074a6:	81a3      	strh	r3, [r4, #12]
 80074a8:	e7e9      	b.n	800747e <__ssputs_r+0x8a>
	...

080074ac <_svfiprintf_r>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	4698      	mov	r8, r3
 80074b2:	898b      	ldrh	r3, [r1, #12]
 80074b4:	4607      	mov	r7, r0
 80074b6:	061b      	lsls	r3, r3, #24
 80074b8:	460d      	mov	r5, r1
 80074ba:	4614      	mov	r4, r2
 80074bc:	b09d      	sub	sp, #116	@ 0x74
 80074be:	d510      	bpl.n	80074e2 <_svfiprintf_r+0x36>
 80074c0:	690b      	ldr	r3, [r1, #16]
 80074c2:	b973      	cbnz	r3, 80074e2 <_svfiprintf_r+0x36>
 80074c4:	2140      	movs	r1, #64	@ 0x40
 80074c6:	f7ff fb89 	bl	8006bdc <_malloc_r>
 80074ca:	6028      	str	r0, [r5, #0]
 80074cc:	6128      	str	r0, [r5, #16]
 80074ce:	b930      	cbnz	r0, 80074de <_svfiprintf_r+0x32>
 80074d0:	230c      	movs	r3, #12
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	b01d      	add	sp, #116	@ 0x74
 80074da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074de:	2340      	movs	r3, #64	@ 0x40
 80074e0:	616b      	str	r3, [r5, #20]
 80074e2:	2300      	movs	r3, #0
 80074e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074e6:	2320      	movs	r3, #32
 80074e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074ec:	2330      	movs	r3, #48	@ 0x30
 80074ee:	f04f 0901 	mov.w	r9, #1
 80074f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80074f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007690 <_svfiprintf_r+0x1e4>
 80074fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074fe:	4623      	mov	r3, r4
 8007500:	469a      	mov	sl, r3
 8007502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007506:	b10a      	cbz	r2, 800750c <_svfiprintf_r+0x60>
 8007508:	2a25      	cmp	r2, #37	@ 0x25
 800750a:	d1f9      	bne.n	8007500 <_svfiprintf_r+0x54>
 800750c:	ebba 0b04 	subs.w	fp, sl, r4
 8007510:	d00b      	beq.n	800752a <_svfiprintf_r+0x7e>
 8007512:	465b      	mov	r3, fp
 8007514:	4622      	mov	r2, r4
 8007516:	4629      	mov	r1, r5
 8007518:	4638      	mov	r0, r7
 800751a:	f7ff ff6b 	bl	80073f4 <__ssputs_r>
 800751e:	3001      	adds	r0, #1
 8007520:	f000 80a7 	beq.w	8007672 <_svfiprintf_r+0x1c6>
 8007524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007526:	445a      	add	r2, fp
 8007528:	9209      	str	r2, [sp, #36]	@ 0x24
 800752a:	f89a 3000 	ldrb.w	r3, [sl]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 809f 	beq.w	8007672 <_svfiprintf_r+0x1c6>
 8007534:	2300      	movs	r3, #0
 8007536:	f04f 32ff 	mov.w	r2, #4294967295
 800753a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800753e:	f10a 0a01 	add.w	sl, sl, #1
 8007542:	9304      	str	r3, [sp, #16]
 8007544:	9307      	str	r3, [sp, #28]
 8007546:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800754a:	931a      	str	r3, [sp, #104]	@ 0x68
 800754c:	4654      	mov	r4, sl
 800754e:	2205      	movs	r2, #5
 8007550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007554:	484e      	ldr	r0, [pc, #312]	@ (8007690 <_svfiprintf_r+0x1e4>)
 8007556:	f7fe fc60 	bl	8005e1a <memchr>
 800755a:	9a04      	ldr	r2, [sp, #16]
 800755c:	b9d8      	cbnz	r0, 8007596 <_svfiprintf_r+0xea>
 800755e:	06d0      	lsls	r0, r2, #27
 8007560:	bf44      	itt	mi
 8007562:	2320      	movmi	r3, #32
 8007564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007568:	0711      	lsls	r1, r2, #28
 800756a:	bf44      	itt	mi
 800756c:	232b      	movmi	r3, #43	@ 0x2b
 800756e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007572:	f89a 3000 	ldrb.w	r3, [sl]
 8007576:	2b2a      	cmp	r3, #42	@ 0x2a
 8007578:	d015      	beq.n	80075a6 <_svfiprintf_r+0xfa>
 800757a:	4654      	mov	r4, sl
 800757c:	2000      	movs	r0, #0
 800757e:	f04f 0c0a 	mov.w	ip, #10
 8007582:	9a07      	ldr	r2, [sp, #28]
 8007584:	4621      	mov	r1, r4
 8007586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800758a:	3b30      	subs	r3, #48	@ 0x30
 800758c:	2b09      	cmp	r3, #9
 800758e:	d94b      	bls.n	8007628 <_svfiprintf_r+0x17c>
 8007590:	b1b0      	cbz	r0, 80075c0 <_svfiprintf_r+0x114>
 8007592:	9207      	str	r2, [sp, #28]
 8007594:	e014      	b.n	80075c0 <_svfiprintf_r+0x114>
 8007596:	eba0 0308 	sub.w	r3, r0, r8
 800759a:	fa09 f303 	lsl.w	r3, r9, r3
 800759e:	4313      	orrs	r3, r2
 80075a0:	46a2      	mov	sl, r4
 80075a2:	9304      	str	r3, [sp, #16]
 80075a4:	e7d2      	b.n	800754c <_svfiprintf_r+0xa0>
 80075a6:	9b03      	ldr	r3, [sp, #12]
 80075a8:	1d19      	adds	r1, r3, #4
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	9103      	str	r1, [sp, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	bfbb      	ittet	lt
 80075b2:	425b      	neglt	r3, r3
 80075b4:	f042 0202 	orrlt.w	r2, r2, #2
 80075b8:	9307      	strge	r3, [sp, #28]
 80075ba:	9307      	strlt	r3, [sp, #28]
 80075bc:	bfb8      	it	lt
 80075be:	9204      	strlt	r2, [sp, #16]
 80075c0:	7823      	ldrb	r3, [r4, #0]
 80075c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80075c4:	d10a      	bne.n	80075dc <_svfiprintf_r+0x130>
 80075c6:	7863      	ldrb	r3, [r4, #1]
 80075c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80075ca:	d132      	bne.n	8007632 <_svfiprintf_r+0x186>
 80075cc:	9b03      	ldr	r3, [sp, #12]
 80075ce:	3402      	adds	r4, #2
 80075d0:	1d1a      	adds	r2, r3, #4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	9203      	str	r2, [sp, #12]
 80075d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075da:	9305      	str	r3, [sp, #20]
 80075dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007694 <_svfiprintf_r+0x1e8>
 80075e0:	2203      	movs	r2, #3
 80075e2:	4650      	mov	r0, sl
 80075e4:	7821      	ldrb	r1, [r4, #0]
 80075e6:	f7fe fc18 	bl	8005e1a <memchr>
 80075ea:	b138      	cbz	r0, 80075fc <_svfiprintf_r+0x150>
 80075ec:	2240      	movs	r2, #64	@ 0x40
 80075ee:	9b04      	ldr	r3, [sp, #16]
 80075f0:	eba0 000a 	sub.w	r0, r0, sl
 80075f4:	4082      	lsls	r2, r0
 80075f6:	4313      	orrs	r3, r2
 80075f8:	3401      	adds	r4, #1
 80075fa:	9304      	str	r3, [sp, #16]
 80075fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007600:	2206      	movs	r2, #6
 8007602:	4825      	ldr	r0, [pc, #148]	@ (8007698 <_svfiprintf_r+0x1ec>)
 8007604:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007608:	f7fe fc07 	bl	8005e1a <memchr>
 800760c:	2800      	cmp	r0, #0
 800760e:	d036      	beq.n	800767e <_svfiprintf_r+0x1d2>
 8007610:	4b22      	ldr	r3, [pc, #136]	@ (800769c <_svfiprintf_r+0x1f0>)
 8007612:	bb1b      	cbnz	r3, 800765c <_svfiprintf_r+0x1b0>
 8007614:	9b03      	ldr	r3, [sp, #12]
 8007616:	3307      	adds	r3, #7
 8007618:	f023 0307 	bic.w	r3, r3, #7
 800761c:	3308      	adds	r3, #8
 800761e:	9303      	str	r3, [sp, #12]
 8007620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007622:	4433      	add	r3, r6
 8007624:	9309      	str	r3, [sp, #36]	@ 0x24
 8007626:	e76a      	b.n	80074fe <_svfiprintf_r+0x52>
 8007628:	460c      	mov	r4, r1
 800762a:	2001      	movs	r0, #1
 800762c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007630:	e7a8      	b.n	8007584 <_svfiprintf_r+0xd8>
 8007632:	2300      	movs	r3, #0
 8007634:	f04f 0c0a 	mov.w	ip, #10
 8007638:	4619      	mov	r1, r3
 800763a:	3401      	adds	r4, #1
 800763c:	9305      	str	r3, [sp, #20]
 800763e:	4620      	mov	r0, r4
 8007640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007644:	3a30      	subs	r2, #48	@ 0x30
 8007646:	2a09      	cmp	r2, #9
 8007648:	d903      	bls.n	8007652 <_svfiprintf_r+0x1a6>
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0c6      	beq.n	80075dc <_svfiprintf_r+0x130>
 800764e:	9105      	str	r1, [sp, #20]
 8007650:	e7c4      	b.n	80075dc <_svfiprintf_r+0x130>
 8007652:	4604      	mov	r4, r0
 8007654:	2301      	movs	r3, #1
 8007656:	fb0c 2101 	mla	r1, ip, r1, r2
 800765a:	e7f0      	b.n	800763e <_svfiprintf_r+0x192>
 800765c:	ab03      	add	r3, sp, #12
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	462a      	mov	r2, r5
 8007662:	4638      	mov	r0, r7
 8007664:	4b0e      	ldr	r3, [pc, #56]	@ (80076a0 <_svfiprintf_r+0x1f4>)
 8007666:	a904      	add	r1, sp, #16
 8007668:	f7fd fd5c 	bl	8005124 <_printf_float>
 800766c:	1c42      	adds	r2, r0, #1
 800766e:	4606      	mov	r6, r0
 8007670:	d1d6      	bne.n	8007620 <_svfiprintf_r+0x174>
 8007672:	89ab      	ldrh	r3, [r5, #12]
 8007674:	065b      	lsls	r3, r3, #25
 8007676:	f53f af2d 	bmi.w	80074d4 <_svfiprintf_r+0x28>
 800767a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800767c:	e72c      	b.n	80074d8 <_svfiprintf_r+0x2c>
 800767e:	ab03      	add	r3, sp, #12
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	462a      	mov	r2, r5
 8007684:	4638      	mov	r0, r7
 8007686:	4b06      	ldr	r3, [pc, #24]	@ (80076a0 <_svfiprintf_r+0x1f4>)
 8007688:	a904      	add	r1, sp, #16
 800768a:	f7fd ffe9 	bl	8005660 <_printf_i>
 800768e:	e7ed      	b.n	800766c <_svfiprintf_r+0x1c0>
 8007690:	08008170 	.word	0x08008170
 8007694:	08008176 	.word	0x08008176
 8007698:	0800817a 	.word	0x0800817a
 800769c:	08005125 	.word	0x08005125
 80076a0:	080073f5 	.word	0x080073f5

080076a4 <__sfputc_r>:
 80076a4:	6893      	ldr	r3, [r2, #8]
 80076a6:	b410      	push	{r4}
 80076a8:	3b01      	subs	r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	6093      	str	r3, [r2, #8]
 80076ae:	da07      	bge.n	80076c0 <__sfputc_r+0x1c>
 80076b0:	6994      	ldr	r4, [r2, #24]
 80076b2:	42a3      	cmp	r3, r4
 80076b4:	db01      	blt.n	80076ba <__sfputc_r+0x16>
 80076b6:	290a      	cmp	r1, #10
 80076b8:	d102      	bne.n	80076c0 <__sfputc_r+0x1c>
 80076ba:	bc10      	pop	{r4}
 80076bc:	f7fe ba99 	b.w	8005bf2 <__swbuf_r>
 80076c0:	6813      	ldr	r3, [r2, #0]
 80076c2:	1c58      	adds	r0, r3, #1
 80076c4:	6010      	str	r0, [r2, #0]
 80076c6:	7019      	strb	r1, [r3, #0]
 80076c8:	4608      	mov	r0, r1
 80076ca:	bc10      	pop	{r4}
 80076cc:	4770      	bx	lr

080076ce <__sfputs_r>:
 80076ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d0:	4606      	mov	r6, r0
 80076d2:	460f      	mov	r7, r1
 80076d4:	4614      	mov	r4, r2
 80076d6:	18d5      	adds	r5, r2, r3
 80076d8:	42ac      	cmp	r4, r5
 80076da:	d101      	bne.n	80076e0 <__sfputs_r+0x12>
 80076dc:	2000      	movs	r0, #0
 80076de:	e007      	b.n	80076f0 <__sfputs_r+0x22>
 80076e0:	463a      	mov	r2, r7
 80076e2:	4630      	mov	r0, r6
 80076e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e8:	f7ff ffdc 	bl	80076a4 <__sfputc_r>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d1f3      	bne.n	80076d8 <__sfputs_r+0xa>
 80076f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076f4 <_vfiprintf_r>:
 80076f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f8:	460d      	mov	r5, r1
 80076fa:	4614      	mov	r4, r2
 80076fc:	4698      	mov	r8, r3
 80076fe:	4606      	mov	r6, r0
 8007700:	b09d      	sub	sp, #116	@ 0x74
 8007702:	b118      	cbz	r0, 800770c <_vfiprintf_r+0x18>
 8007704:	6a03      	ldr	r3, [r0, #32]
 8007706:	b90b      	cbnz	r3, 800770c <_vfiprintf_r+0x18>
 8007708:	f7fe f956 	bl	80059b8 <__sinit>
 800770c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800770e:	07d9      	lsls	r1, r3, #31
 8007710:	d405      	bmi.n	800771e <_vfiprintf_r+0x2a>
 8007712:	89ab      	ldrh	r3, [r5, #12]
 8007714:	059a      	lsls	r2, r3, #22
 8007716:	d402      	bmi.n	800771e <_vfiprintf_r+0x2a>
 8007718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800771a:	f7fe fb7c 	bl	8005e16 <__retarget_lock_acquire_recursive>
 800771e:	89ab      	ldrh	r3, [r5, #12]
 8007720:	071b      	lsls	r3, r3, #28
 8007722:	d501      	bpl.n	8007728 <_vfiprintf_r+0x34>
 8007724:	692b      	ldr	r3, [r5, #16]
 8007726:	b99b      	cbnz	r3, 8007750 <_vfiprintf_r+0x5c>
 8007728:	4629      	mov	r1, r5
 800772a:	4630      	mov	r0, r6
 800772c:	f7fe faa0 	bl	8005c70 <__swsetup_r>
 8007730:	b170      	cbz	r0, 8007750 <_vfiprintf_r+0x5c>
 8007732:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007734:	07dc      	lsls	r4, r3, #31
 8007736:	d504      	bpl.n	8007742 <_vfiprintf_r+0x4e>
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	b01d      	add	sp, #116	@ 0x74
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007742:	89ab      	ldrh	r3, [r5, #12]
 8007744:	0598      	lsls	r0, r3, #22
 8007746:	d4f7      	bmi.n	8007738 <_vfiprintf_r+0x44>
 8007748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800774a:	f7fe fb65 	bl	8005e18 <__retarget_lock_release_recursive>
 800774e:	e7f3      	b.n	8007738 <_vfiprintf_r+0x44>
 8007750:	2300      	movs	r3, #0
 8007752:	9309      	str	r3, [sp, #36]	@ 0x24
 8007754:	2320      	movs	r3, #32
 8007756:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800775a:	2330      	movs	r3, #48	@ 0x30
 800775c:	f04f 0901 	mov.w	r9, #1
 8007760:	f8cd 800c 	str.w	r8, [sp, #12]
 8007764:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007910 <_vfiprintf_r+0x21c>
 8007768:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800776c:	4623      	mov	r3, r4
 800776e:	469a      	mov	sl, r3
 8007770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007774:	b10a      	cbz	r2, 800777a <_vfiprintf_r+0x86>
 8007776:	2a25      	cmp	r2, #37	@ 0x25
 8007778:	d1f9      	bne.n	800776e <_vfiprintf_r+0x7a>
 800777a:	ebba 0b04 	subs.w	fp, sl, r4
 800777e:	d00b      	beq.n	8007798 <_vfiprintf_r+0xa4>
 8007780:	465b      	mov	r3, fp
 8007782:	4622      	mov	r2, r4
 8007784:	4629      	mov	r1, r5
 8007786:	4630      	mov	r0, r6
 8007788:	f7ff ffa1 	bl	80076ce <__sfputs_r>
 800778c:	3001      	adds	r0, #1
 800778e:	f000 80a7 	beq.w	80078e0 <_vfiprintf_r+0x1ec>
 8007792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007794:	445a      	add	r2, fp
 8007796:	9209      	str	r2, [sp, #36]	@ 0x24
 8007798:	f89a 3000 	ldrb.w	r3, [sl]
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 809f 	beq.w	80078e0 <_vfiprintf_r+0x1ec>
 80077a2:	2300      	movs	r3, #0
 80077a4:	f04f 32ff 	mov.w	r2, #4294967295
 80077a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077ac:	f10a 0a01 	add.w	sl, sl, #1
 80077b0:	9304      	str	r3, [sp, #16]
 80077b2:	9307      	str	r3, [sp, #28]
 80077b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80077ba:	4654      	mov	r4, sl
 80077bc:	2205      	movs	r2, #5
 80077be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c2:	4853      	ldr	r0, [pc, #332]	@ (8007910 <_vfiprintf_r+0x21c>)
 80077c4:	f7fe fb29 	bl	8005e1a <memchr>
 80077c8:	9a04      	ldr	r2, [sp, #16]
 80077ca:	b9d8      	cbnz	r0, 8007804 <_vfiprintf_r+0x110>
 80077cc:	06d1      	lsls	r1, r2, #27
 80077ce:	bf44      	itt	mi
 80077d0:	2320      	movmi	r3, #32
 80077d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077d6:	0713      	lsls	r3, r2, #28
 80077d8:	bf44      	itt	mi
 80077da:	232b      	movmi	r3, #43	@ 0x2b
 80077dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077e0:	f89a 3000 	ldrb.w	r3, [sl]
 80077e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80077e6:	d015      	beq.n	8007814 <_vfiprintf_r+0x120>
 80077e8:	4654      	mov	r4, sl
 80077ea:	2000      	movs	r0, #0
 80077ec:	f04f 0c0a 	mov.w	ip, #10
 80077f0:	9a07      	ldr	r2, [sp, #28]
 80077f2:	4621      	mov	r1, r4
 80077f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077f8:	3b30      	subs	r3, #48	@ 0x30
 80077fa:	2b09      	cmp	r3, #9
 80077fc:	d94b      	bls.n	8007896 <_vfiprintf_r+0x1a2>
 80077fe:	b1b0      	cbz	r0, 800782e <_vfiprintf_r+0x13a>
 8007800:	9207      	str	r2, [sp, #28]
 8007802:	e014      	b.n	800782e <_vfiprintf_r+0x13a>
 8007804:	eba0 0308 	sub.w	r3, r0, r8
 8007808:	fa09 f303 	lsl.w	r3, r9, r3
 800780c:	4313      	orrs	r3, r2
 800780e:	46a2      	mov	sl, r4
 8007810:	9304      	str	r3, [sp, #16]
 8007812:	e7d2      	b.n	80077ba <_vfiprintf_r+0xc6>
 8007814:	9b03      	ldr	r3, [sp, #12]
 8007816:	1d19      	adds	r1, r3, #4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	9103      	str	r1, [sp, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	bfbb      	ittet	lt
 8007820:	425b      	neglt	r3, r3
 8007822:	f042 0202 	orrlt.w	r2, r2, #2
 8007826:	9307      	strge	r3, [sp, #28]
 8007828:	9307      	strlt	r3, [sp, #28]
 800782a:	bfb8      	it	lt
 800782c:	9204      	strlt	r2, [sp, #16]
 800782e:	7823      	ldrb	r3, [r4, #0]
 8007830:	2b2e      	cmp	r3, #46	@ 0x2e
 8007832:	d10a      	bne.n	800784a <_vfiprintf_r+0x156>
 8007834:	7863      	ldrb	r3, [r4, #1]
 8007836:	2b2a      	cmp	r3, #42	@ 0x2a
 8007838:	d132      	bne.n	80078a0 <_vfiprintf_r+0x1ac>
 800783a:	9b03      	ldr	r3, [sp, #12]
 800783c:	3402      	adds	r4, #2
 800783e:	1d1a      	adds	r2, r3, #4
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	9203      	str	r2, [sp, #12]
 8007844:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007848:	9305      	str	r3, [sp, #20]
 800784a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007914 <_vfiprintf_r+0x220>
 800784e:	2203      	movs	r2, #3
 8007850:	4650      	mov	r0, sl
 8007852:	7821      	ldrb	r1, [r4, #0]
 8007854:	f7fe fae1 	bl	8005e1a <memchr>
 8007858:	b138      	cbz	r0, 800786a <_vfiprintf_r+0x176>
 800785a:	2240      	movs	r2, #64	@ 0x40
 800785c:	9b04      	ldr	r3, [sp, #16]
 800785e:	eba0 000a 	sub.w	r0, r0, sl
 8007862:	4082      	lsls	r2, r0
 8007864:	4313      	orrs	r3, r2
 8007866:	3401      	adds	r4, #1
 8007868:	9304      	str	r3, [sp, #16]
 800786a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786e:	2206      	movs	r2, #6
 8007870:	4829      	ldr	r0, [pc, #164]	@ (8007918 <_vfiprintf_r+0x224>)
 8007872:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007876:	f7fe fad0 	bl	8005e1a <memchr>
 800787a:	2800      	cmp	r0, #0
 800787c:	d03f      	beq.n	80078fe <_vfiprintf_r+0x20a>
 800787e:	4b27      	ldr	r3, [pc, #156]	@ (800791c <_vfiprintf_r+0x228>)
 8007880:	bb1b      	cbnz	r3, 80078ca <_vfiprintf_r+0x1d6>
 8007882:	9b03      	ldr	r3, [sp, #12]
 8007884:	3307      	adds	r3, #7
 8007886:	f023 0307 	bic.w	r3, r3, #7
 800788a:	3308      	adds	r3, #8
 800788c:	9303      	str	r3, [sp, #12]
 800788e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007890:	443b      	add	r3, r7
 8007892:	9309      	str	r3, [sp, #36]	@ 0x24
 8007894:	e76a      	b.n	800776c <_vfiprintf_r+0x78>
 8007896:	460c      	mov	r4, r1
 8007898:	2001      	movs	r0, #1
 800789a:	fb0c 3202 	mla	r2, ip, r2, r3
 800789e:	e7a8      	b.n	80077f2 <_vfiprintf_r+0xfe>
 80078a0:	2300      	movs	r3, #0
 80078a2:	f04f 0c0a 	mov.w	ip, #10
 80078a6:	4619      	mov	r1, r3
 80078a8:	3401      	adds	r4, #1
 80078aa:	9305      	str	r3, [sp, #20]
 80078ac:	4620      	mov	r0, r4
 80078ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078b2:	3a30      	subs	r2, #48	@ 0x30
 80078b4:	2a09      	cmp	r2, #9
 80078b6:	d903      	bls.n	80078c0 <_vfiprintf_r+0x1cc>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0c6      	beq.n	800784a <_vfiprintf_r+0x156>
 80078bc:	9105      	str	r1, [sp, #20]
 80078be:	e7c4      	b.n	800784a <_vfiprintf_r+0x156>
 80078c0:	4604      	mov	r4, r0
 80078c2:	2301      	movs	r3, #1
 80078c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80078c8:	e7f0      	b.n	80078ac <_vfiprintf_r+0x1b8>
 80078ca:	ab03      	add	r3, sp, #12
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	462a      	mov	r2, r5
 80078d0:	4630      	mov	r0, r6
 80078d2:	4b13      	ldr	r3, [pc, #76]	@ (8007920 <_vfiprintf_r+0x22c>)
 80078d4:	a904      	add	r1, sp, #16
 80078d6:	f7fd fc25 	bl	8005124 <_printf_float>
 80078da:	4607      	mov	r7, r0
 80078dc:	1c78      	adds	r0, r7, #1
 80078de:	d1d6      	bne.n	800788e <_vfiprintf_r+0x19a>
 80078e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078e2:	07d9      	lsls	r1, r3, #31
 80078e4:	d405      	bmi.n	80078f2 <_vfiprintf_r+0x1fe>
 80078e6:	89ab      	ldrh	r3, [r5, #12]
 80078e8:	059a      	lsls	r2, r3, #22
 80078ea:	d402      	bmi.n	80078f2 <_vfiprintf_r+0x1fe>
 80078ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ee:	f7fe fa93 	bl	8005e18 <__retarget_lock_release_recursive>
 80078f2:	89ab      	ldrh	r3, [r5, #12]
 80078f4:	065b      	lsls	r3, r3, #25
 80078f6:	f53f af1f 	bmi.w	8007738 <_vfiprintf_r+0x44>
 80078fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078fc:	e71e      	b.n	800773c <_vfiprintf_r+0x48>
 80078fe:	ab03      	add	r3, sp, #12
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	462a      	mov	r2, r5
 8007904:	4630      	mov	r0, r6
 8007906:	4b06      	ldr	r3, [pc, #24]	@ (8007920 <_vfiprintf_r+0x22c>)
 8007908:	a904      	add	r1, sp, #16
 800790a:	f7fd fea9 	bl	8005660 <_printf_i>
 800790e:	e7e4      	b.n	80078da <_vfiprintf_r+0x1e6>
 8007910:	08008170 	.word	0x08008170
 8007914:	08008176 	.word	0x08008176
 8007918:	0800817a 	.word	0x0800817a
 800791c:	08005125 	.word	0x08005125
 8007920:	080076cf 	.word	0x080076cf

08007924 <__sflush_r>:
 8007924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792a:	0716      	lsls	r6, r2, #28
 800792c:	4605      	mov	r5, r0
 800792e:	460c      	mov	r4, r1
 8007930:	d454      	bmi.n	80079dc <__sflush_r+0xb8>
 8007932:	684b      	ldr	r3, [r1, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	dc02      	bgt.n	800793e <__sflush_r+0x1a>
 8007938:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	dd48      	ble.n	80079d0 <__sflush_r+0xac>
 800793e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007940:	2e00      	cmp	r6, #0
 8007942:	d045      	beq.n	80079d0 <__sflush_r+0xac>
 8007944:	2300      	movs	r3, #0
 8007946:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800794a:	682f      	ldr	r7, [r5, #0]
 800794c:	6a21      	ldr	r1, [r4, #32]
 800794e:	602b      	str	r3, [r5, #0]
 8007950:	d030      	beq.n	80079b4 <__sflush_r+0x90>
 8007952:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	0759      	lsls	r1, r3, #29
 8007958:	d505      	bpl.n	8007966 <__sflush_r+0x42>
 800795a:	6863      	ldr	r3, [r4, #4]
 800795c:	1ad2      	subs	r2, r2, r3
 800795e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007960:	b10b      	cbz	r3, 8007966 <__sflush_r+0x42>
 8007962:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007964:	1ad2      	subs	r2, r2, r3
 8007966:	2300      	movs	r3, #0
 8007968:	4628      	mov	r0, r5
 800796a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800796c:	6a21      	ldr	r1, [r4, #32]
 800796e:	47b0      	blx	r6
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	d106      	bne.n	8007984 <__sflush_r+0x60>
 8007976:	6829      	ldr	r1, [r5, #0]
 8007978:	291d      	cmp	r1, #29
 800797a:	d82b      	bhi.n	80079d4 <__sflush_r+0xb0>
 800797c:	4a28      	ldr	r2, [pc, #160]	@ (8007a20 <__sflush_r+0xfc>)
 800797e:	410a      	asrs	r2, r1
 8007980:	07d6      	lsls	r6, r2, #31
 8007982:	d427      	bmi.n	80079d4 <__sflush_r+0xb0>
 8007984:	2200      	movs	r2, #0
 8007986:	6062      	str	r2, [r4, #4]
 8007988:	6922      	ldr	r2, [r4, #16]
 800798a:	04d9      	lsls	r1, r3, #19
 800798c:	6022      	str	r2, [r4, #0]
 800798e:	d504      	bpl.n	800799a <__sflush_r+0x76>
 8007990:	1c42      	adds	r2, r0, #1
 8007992:	d101      	bne.n	8007998 <__sflush_r+0x74>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	b903      	cbnz	r3, 800799a <__sflush_r+0x76>
 8007998:	6560      	str	r0, [r4, #84]	@ 0x54
 800799a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800799c:	602f      	str	r7, [r5, #0]
 800799e:	b1b9      	cbz	r1, 80079d0 <__sflush_r+0xac>
 80079a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079a4:	4299      	cmp	r1, r3
 80079a6:	d002      	beq.n	80079ae <__sflush_r+0x8a>
 80079a8:	4628      	mov	r0, r5
 80079aa:	f7ff f8a5 	bl	8006af8 <_free_r>
 80079ae:	2300      	movs	r3, #0
 80079b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80079b2:	e00d      	b.n	80079d0 <__sflush_r+0xac>
 80079b4:	2301      	movs	r3, #1
 80079b6:	4628      	mov	r0, r5
 80079b8:	47b0      	blx	r6
 80079ba:	4602      	mov	r2, r0
 80079bc:	1c50      	adds	r0, r2, #1
 80079be:	d1c9      	bne.n	8007954 <__sflush_r+0x30>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0c6      	beq.n	8007954 <__sflush_r+0x30>
 80079c6:	2b1d      	cmp	r3, #29
 80079c8:	d001      	beq.n	80079ce <__sflush_r+0xaa>
 80079ca:	2b16      	cmp	r3, #22
 80079cc:	d11d      	bne.n	8007a0a <__sflush_r+0xe6>
 80079ce:	602f      	str	r7, [r5, #0]
 80079d0:	2000      	movs	r0, #0
 80079d2:	e021      	b.n	8007a18 <__sflush_r+0xf4>
 80079d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079d8:	b21b      	sxth	r3, r3
 80079da:	e01a      	b.n	8007a12 <__sflush_r+0xee>
 80079dc:	690f      	ldr	r7, [r1, #16]
 80079de:	2f00      	cmp	r7, #0
 80079e0:	d0f6      	beq.n	80079d0 <__sflush_r+0xac>
 80079e2:	0793      	lsls	r3, r2, #30
 80079e4:	bf18      	it	ne
 80079e6:	2300      	movne	r3, #0
 80079e8:	680e      	ldr	r6, [r1, #0]
 80079ea:	bf08      	it	eq
 80079ec:	694b      	ldreq	r3, [r1, #20]
 80079ee:	1bf6      	subs	r6, r6, r7
 80079f0:	600f      	str	r7, [r1, #0]
 80079f2:	608b      	str	r3, [r1, #8]
 80079f4:	2e00      	cmp	r6, #0
 80079f6:	ddeb      	ble.n	80079d0 <__sflush_r+0xac>
 80079f8:	4633      	mov	r3, r6
 80079fa:	463a      	mov	r2, r7
 80079fc:	4628      	mov	r0, r5
 80079fe:	6a21      	ldr	r1, [r4, #32]
 8007a00:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007a04:	47e0      	blx	ip
 8007a06:	2800      	cmp	r0, #0
 8007a08:	dc07      	bgt.n	8007a1a <__sflush_r+0xf6>
 8007a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a12:	f04f 30ff 	mov.w	r0, #4294967295
 8007a16:	81a3      	strh	r3, [r4, #12]
 8007a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a1a:	4407      	add	r7, r0
 8007a1c:	1a36      	subs	r6, r6, r0
 8007a1e:	e7e9      	b.n	80079f4 <__sflush_r+0xd0>
 8007a20:	dfbffffe 	.word	0xdfbffffe

08007a24 <_fflush_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	690b      	ldr	r3, [r1, #16]
 8007a28:	4605      	mov	r5, r0
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	b913      	cbnz	r3, 8007a34 <_fflush_r+0x10>
 8007a2e:	2500      	movs	r5, #0
 8007a30:	4628      	mov	r0, r5
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	b118      	cbz	r0, 8007a3e <_fflush_r+0x1a>
 8007a36:	6a03      	ldr	r3, [r0, #32]
 8007a38:	b90b      	cbnz	r3, 8007a3e <_fflush_r+0x1a>
 8007a3a:	f7fd ffbd 	bl	80059b8 <__sinit>
 8007a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0f3      	beq.n	8007a2e <_fflush_r+0xa>
 8007a46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a48:	07d0      	lsls	r0, r2, #31
 8007a4a:	d404      	bmi.n	8007a56 <_fflush_r+0x32>
 8007a4c:	0599      	lsls	r1, r3, #22
 8007a4e:	d402      	bmi.n	8007a56 <_fflush_r+0x32>
 8007a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a52:	f7fe f9e0 	bl	8005e16 <__retarget_lock_acquire_recursive>
 8007a56:	4628      	mov	r0, r5
 8007a58:	4621      	mov	r1, r4
 8007a5a:	f7ff ff63 	bl	8007924 <__sflush_r>
 8007a5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a60:	4605      	mov	r5, r0
 8007a62:	07da      	lsls	r2, r3, #31
 8007a64:	d4e4      	bmi.n	8007a30 <_fflush_r+0xc>
 8007a66:	89a3      	ldrh	r3, [r4, #12]
 8007a68:	059b      	lsls	r3, r3, #22
 8007a6a:	d4e1      	bmi.n	8007a30 <_fflush_r+0xc>
 8007a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a6e:	f7fe f9d3 	bl	8005e18 <__retarget_lock_release_recursive>
 8007a72:	e7dd      	b.n	8007a30 <_fflush_r+0xc>

08007a74 <__swhatbuf_r>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	460c      	mov	r4, r1
 8007a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a7c:	4615      	mov	r5, r2
 8007a7e:	2900      	cmp	r1, #0
 8007a80:	461e      	mov	r6, r3
 8007a82:	b096      	sub	sp, #88	@ 0x58
 8007a84:	da0c      	bge.n	8007aa0 <__swhatbuf_r+0x2c>
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	2100      	movs	r1, #0
 8007a8a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a8e:	bf14      	ite	ne
 8007a90:	2340      	movne	r3, #64	@ 0x40
 8007a92:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a96:	2000      	movs	r0, #0
 8007a98:	6031      	str	r1, [r6, #0]
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	b016      	add	sp, #88	@ 0x58
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
 8007aa0:	466a      	mov	r2, sp
 8007aa2:	f000 f863 	bl	8007b6c <_fstat_r>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	dbed      	blt.n	8007a86 <__swhatbuf_r+0x12>
 8007aaa:	9901      	ldr	r1, [sp, #4]
 8007aac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ab0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ab4:	4259      	negs	r1, r3
 8007ab6:	4159      	adcs	r1, r3
 8007ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007abc:	e7eb      	b.n	8007a96 <__swhatbuf_r+0x22>

08007abe <__smakebuf_r>:
 8007abe:	898b      	ldrh	r3, [r1, #12]
 8007ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ac2:	079d      	lsls	r5, r3, #30
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	d507      	bpl.n	8007ada <__smakebuf_r+0x1c>
 8007aca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	6123      	str	r3, [r4, #16]
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	6163      	str	r3, [r4, #20]
 8007ad6:	b003      	add	sp, #12
 8007ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ada:	466a      	mov	r2, sp
 8007adc:	ab01      	add	r3, sp, #4
 8007ade:	f7ff ffc9 	bl	8007a74 <__swhatbuf_r>
 8007ae2:	9f00      	ldr	r7, [sp, #0]
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	4630      	mov	r0, r6
 8007aea:	f7ff f877 	bl	8006bdc <_malloc_r>
 8007aee:	b948      	cbnz	r0, 8007b04 <__smakebuf_r+0x46>
 8007af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007af4:	059a      	lsls	r2, r3, #22
 8007af6:	d4ee      	bmi.n	8007ad6 <__smakebuf_r+0x18>
 8007af8:	f023 0303 	bic.w	r3, r3, #3
 8007afc:	f043 0302 	orr.w	r3, r3, #2
 8007b00:	81a3      	strh	r3, [r4, #12]
 8007b02:	e7e2      	b.n	8007aca <__smakebuf_r+0xc>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b0e:	81a3      	strh	r3, [r4, #12]
 8007b10:	9b01      	ldr	r3, [sp, #4]
 8007b12:	6020      	str	r0, [r4, #0]
 8007b14:	b15b      	cbz	r3, 8007b2e <__smakebuf_r+0x70>
 8007b16:	4630      	mov	r0, r6
 8007b18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b1c:	f000 f838 	bl	8007b90 <_isatty_r>
 8007b20:	b128      	cbz	r0, 8007b2e <__smakebuf_r+0x70>
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	f023 0303 	bic.w	r3, r3, #3
 8007b28:	f043 0301 	orr.w	r3, r3, #1
 8007b2c:	81a3      	strh	r3, [r4, #12]
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	431d      	orrs	r5, r3
 8007b32:	81a5      	strh	r5, [r4, #12]
 8007b34:	e7cf      	b.n	8007ad6 <__smakebuf_r+0x18>

08007b36 <memmove>:
 8007b36:	4288      	cmp	r0, r1
 8007b38:	b510      	push	{r4, lr}
 8007b3a:	eb01 0402 	add.w	r4, r1, r2
 8007b3e:	d902      	bls.n	8007b46 <memmove+0x10>
 8007b40:	4284      	cmp	r4, r0
 8007b42:	4623      	mov	r3, r4
 8007b44:	d807      	bhi.n	8007b56 <memmove+0x20>
 8007b46:	1e43      	subs	r3, r0, #1
 8007b48:	42a1      	cmp	r1, r4
 8007b4a:	d008      	beq.n	8007b5e <memmove+0x28>
 8007b4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b54:	e7f8      	b.n	8007b48 <memmove+0x12>
 8007b56:	4601      	mov	r1, r0
 8007b58:	4402      	add	r2, r0
 8007b5a:	428a      	cmp	r2, r1
 8007b5c:	d100      	bne.n	8007b60 <memmove+0x2a>
 8007b5e:	bd10      	pop	{r4, pc}
 8007b60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b64:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b68:	e7f7      	b.n	8007b5a <memmove+0x24>
	...

08007b6c <_fstat_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	2300      	movs	r3, #0
 8007b70:	4d06      	ldr	r5, [pc, #24]	@ (8007b8c <_fstat_r+0x20>)
 8007b72:	4604      	mov	r4, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	4611      	mov	r1, r2
 8007b78:	602b      	str	r3, [r5, #0]
 8007b7a:	f7f9 ffdd 	bl	8001b38 <_fstat>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	d102      	bne.n	8007b88 <_fstat_r+0x1c>
 8007b82:	682b      	ldr	r3, [r5, #0]
 8007b84:	b103      	cbz	r3, 8007b88 <_fstat_r+0x1c>
 8007b86:	6023      	str	r3, [r4, #0]
 8007b88:	bd38      	pop	{r3, r4, r5, pc}
 8007b8a:	bf00      	nop
 8007b8c:	20000890 	.word	0x20000890

08007b90 <_isatty_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	2300      	movs	r3, #0
 8007b94:	4d05      	ldr	r5, [pc, #20]	@ (8007bac <_isatty_r+0x1c>)
 8007b96:	4604      	mov	r4, r0
 8007b98:	4608      	mov	r0, r1
 8007b9a:	602b      	str	r3, [r5, #0]
 8007b9c:	f7f9 ffdb 	bl	8001b56 <_isatty>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d102      	bne.n	8007baa <_isatty_r+0x1a>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	b103      	cbz	r3, 8007baa <_isatty_r+0x1a>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	20000890 	.word	0x20000890

08007bb0 <_sbrk_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4d05      	ldr	r5, [pc, #20]	@ (8007bcc <_sbrk_r+0x1c>)
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	602b      	str	r3, [r5, #0]
 8007bbc:	f7f9 ffe2 	bl	8001b84 <_sbrk>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_sbrk_r+0x1a>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_sbrk_r+0x1a>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	20000890 	.word	0x20000890

08007bd0 <__assert_func>:
 8007bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bd2:	4614      	mov	r4, r2
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4b09      	ldr	r3, [pc, #36]	@ (8007bfc <__assert_func+0x2c>)
 8007bd8:	4605      	mov	r5, r0
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68d8      	ldr	r0, [r3, #12]
 8007bde:	b954      	cbnz	r4, 8007bf6 <__assert_func+0x26>
 8007be0:	4b07      	ldr	r3, [pc, #28]	@ (8007c00 <__assert_func+0x30>)
 8007be2:	461c      	mov	r4, r3
 8007be4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007be8:	9100      	str	r1, [sp, #0]
 8007bea:	462b      	mov	r3, r5
 8007bec:	4905      	ldr	r1, [pc, #20]	@ (8007c04 <__assert_func+0x34>)
 8007bee:	f000 f86f 	bl	8007cd0 <fiprintf>
 8007bf2:	f000 f87f 	bl	8007cf4 <abort>
 8007bf6:	4b04      	ldr	r3, [pc, #16]	@ (8007c08 <__assert_func+0x38>)
 8007bf8:	e7f4      	b.n	8007be4 <__assert_func+0x14>
 8007bfa:	bf00      	nop
 8007bfc:	20000018 	.word	0x20000018
 8007c00:	080081c6 	.word	0x080081c6
 8007c04:	08008198 	.word	0x08008198
 8007c08:	0800818b 	.word	0x0800818b

08007c0c <_calloc_r>:
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	fba1 5402 	umull	r5, r4, r1, r2
 8007c12:	b93c      	cbnz	r4, 8007c24 <_calloc_r+0x18>
 8007c14:	4629      	mov	r1, r5
 8007c16:	f7fe ffe1 	bl	8006bdc <_malloc_r>
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	b928      	cbnz	r0, 8007c2a <_calloc_r+0x1e>
 8007c1e:	2600      	movs	r6, #0
 8007c20:	4630      	mov	r0, r6
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	220c      	movs	r2, #12
 8007c26:	6002      	str	r2, [r0, #0]
 8007c28:	e7f9      	b.n	8007c1e <_calloc_r+0x12>
 8007c2a:	462a      	mov	r2, r5
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	f7fe f875 	bl	8005d1c <memset>
 8007c32:	e7f5      	b.n	8007c20 <_calloc_r+0x14>

08007c34 <__ascii_mbtowc>:
 8007c34:	b082      	sub	sp, #8
 8007c36:	b901      	cbnz	r1, 8007c3a <__ascii_mbtowc+0x6>
 8007c38:	a901      	add	r1, sp, #4
 8007c3a:	b142      	cbz	r2, 8007c4e <__ascii_mbtowc+0x1a>
 8007c3c:	b14b      	cbz	r3, 8007c52 <__ascii_mbtowc+0x1e>
 8007c3e:	7813      	ldrb	r3, [r2, #0]
 8007c40:	600b      	str	r3, [r1, #0]
 8007c42:	7812      	ldrb	r2, [r2, #0]
 8007c44:	1e10      	subs	r0, r2, #0
 8007c46:	bf18      	it	ne
 8007c48:	2001      	movne	r0, #1
 8007c4a:	b002      	add	sp, #8
 8007c4c:	4770      	bx	lr
 8007c4e:	4610      	mov	r0, r2
 8007c50:	e7fb      	b.n	8007c4a <__ascii_mbtowc+0x16>
 8007c52:	f06f 0001 	mvn.w	r0, #1
 8007c56:	e7f8      	b.n	8007c4a <__ascii_mbtowc+0x16>

08007c58 <_realloc_r>:
 8007c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5c:	4680      	mov	r8, r0
 8007c5e:	4615      	mov	r5, r2
 8007c60:	460c      	mov	r4, r1
 8007c62:	b921      	cbnz	r1, 8007c6e <_realloc_r+0x16>
 8007c64:	4611      	mov	r1, r2
 8007c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6a:	f7fe bfb7 	b.w	8006bdc <_malloc_r>
 8007c6e:	b92a      	cbnz	r2, 8007c7c <_realloc_r+0x24>
 8007c70:	f7fe ff42 	bl	8006af8 <_free_r>
 8007c74:	2400      	movs	r4, #0
 8007c76:	4620      	mov	r0, r4
 8007c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c7c:	f000 f841 	bl	8007d02 <_malloc_usable_size_r>
 8007c80:	4285      	cmp	r5, r0
 8007c82:	4606      	mov	r6, r0
 8007c84:	d802      	bhi.n	8007c8c <_realloc_r+0x34>
 8007c86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c8a:	d8f4      	bhi.n	8007c76 <_realloc_r+0x1e>
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	4640      	mov	r0, r8
 8007c90:	f7fe ffa4 	bl	8006bdc <_malloc_r>
 8007c94:	4607      	mov	r7, r0
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d0ec      	beq.n	8007c74 <_realloc_r+0x1c>
 8007c9a:	42b5      	cmp	r5, r6
 8007c9c:	462a      	mov	r2, r5
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	bf28      	it	cs
 8007ca2:	4632      	movcs	r2, r6
 8007ca4:	f7fe f8c7 	bl	8005e36 <memcpy>
 8007ca8:	4621      	mov	r1, r4
 8007caa:	4640      	mov	r0, r8
 8007cac:	f7fe ff24 	bl	8006af8 <_free_r>
 8007cb0:	463c      	mov	r4, r7
 8007cb2:	e7e0      	b.n	8007c76 <_realloc_r+0x1e>

08007cb4 <__ascii_wctomb>:
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	4608      	mov	r0, r1
 8007cb8:	b141      	cbz	r1, 8007ccc <__ascii_wctomb+0x18>
 8007cba:	2aff      	cmp	r2, #255	@ 0xff
 8007cbc:	d904      	bls.n	8007cc8 <__ascii_wctomb+0x14>
 8007cbe:	228a      	movs	r2, #138	@ 0x8a
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	4770      	bx	lr
 8007cc8:	2001      	movs	r0, #1
 8007cca:	700a      	strb	r2, [r1, #0]
 8007ccc:	4770      	bx	lr
	...

08007cd0 <fiprintf>:
 8007cd0:	b40e      	push	{r1, r2, r3}
 8007cd2:	b503      	push	{r0, r1, lr}
 8007cd4:	4601      	mov	r1, r0
 8007cd6:	ab03      	add	r3, sp, #12
 8007cd8:	4805      	ldr	r0, [pc, #20]	@ (8007cf0 <fiprintf+0x20>)
 8007cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cde:	6800      	ldr	r0, [r0, #0]
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	f7ff fd07 	bl	80076f4 <_vfiprintf_r>
 8007ce6:	b002      	add	sp, #8
 8007ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cec:	b003      	add	sp, #12
 8007cee:	4770      	bx	lr
 8007cf0:	20000018 	.word	0x20000018

08007cf4 <abort>:
 8007cf4:	2006      	movs	r0, #6
 8007cf6:	b508      	push	{r3, lr}
 8007cf8:	f000 f834 	bl	8007d64 <raise>
 8007cfc:	2001      	movs	r0, #1
 8007cfe:	f7f9 fecc 	bl	8001a9a <_exit>

08007d02 <_malloc_usable_size_r>:
 8007d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d06:	1f18      	subs	r0, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	bfbc      	itt	lt
 8007d0c:	580b      	ldrlt	r3, [r1, r0]
 8007d0e:	18c0      	addlt	r0, r0, r3
 8007d10:	4770      	bx	lr

08007d12 <_raise_r>:
 8007d12:	291f      	cmp	r1, #31
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4605      	mov	r5, r0
 8007d18:	460c      	mov	r4, r1
 8007d1a:	d904      	bls.n	8007d26 <_raise_r+0x14>
 8007d1c:	2316      	movs	r3, #22
 8007d1e:	6003      	str	r3, [r0, #0]
 8007d20:	f04f 30ff 	mov.w	r0, #4294967295
 8007d24:	bd38      	pop	{r3, r4, r5, pc}
 8007d26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007d28:	b112      	cbz	r2, 8007d30 <_raise_r+0x1e>
 8007d2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d2e:	b94b      	cbnz	r3, 8007d44 <_raise_r+0x32>
 8007d30:	4628      	mov	r0, r5
 8007d32:	f000 f831 	bl	8007d98 <_getpid_r>
 8007d36:	4622      	mov	r2, r4
 8007d38:	4601      	mov	r1, r0
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d40:	f000 b818 	b.w	8007d74 <_kill_r>
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d00a      	beq.n	8007d5e <_raise_r+0x4c>
 8007d48:	1c59      	adds	r1, r3, #1
 8007d4a:	d103      	bne.n	8007d54 <_raise_r+0x42>
 8007d4c:	2316      	movs	r3, #22
 8007d4e:	6003      	str	r3, [r0, #0]
 8007d50:	2001      	movs	r0, #1
 8007d52:	e7e7      	b.n	8007d24 <_raise_r+0x12>
 8007d54:	2100      	movs	r1, #0
 8007d56:	4620      	mov	r0, r4
 8007d58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007d5c:	4798      	blx	r3
 8007d5e:	2000      	movs	r0, #0
 8007d60:	e7e0      	b.n	8007d24 <_raise_r+0x12>
	...

08007d64 <raise>:
 8007d64:	4b02      	ldr	r3, [pc, #8]	@ (8007d70 <raise+0xc>)
 8007d66:	4601      	mov	r1, r0
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	f7ff bfd2 	b.w	8007d12 <_raise_r>
 8007d6e:	bf00      	nop
 8007d70:	20000018 	.word	0x20000018

08007d74 <_kill_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	2300      	movs	r3, #0
 8007d78:	4d06      	ldr	r5, [pc, #24]	@ (8007d94 <_kill_r+0x20>)
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	4611      	mov	r1, r2
 8007d80:	602b      	str	r3, [r5, #0]
 8007d82:	f7f9 fe7a 	bl	8001a7a <_kill>
 8007d86:	1c43      	adds	r3, r0, #1
 8007d88:	d102      	bne.n	8007d90 <_kill_r+0x1c>
 8007d8a:	682b      	ldr	r3, [r5, #0]
 8007d8c:	b103      	cbz	r3, 8007d90 <_kill_r+0x1c>
 8007d8e:	6023      	str	r3, [r4, #0]
 8007d90:	bd38      	pop	{r3, r4, r5, pc}
 8007d92:	bf00      	nop
 8007d94:	20000890 	.word	0x20000890

08007d98 <_getpid_r>:
 8007d98:	f7f9 be68 	b.w	8001a6c <_getpid>

08007d9c <_init>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	bf00      	nop
 8007da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da2:	bc08      	pop	{r3}
 8007da4:	469e      	mov	lr, r3
 8007da6:	4770      	bx	lr

08007da8 <_fini>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	bf00      	nop
 8007dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dae:	bc08      	pop	{r3}
 8007db0:	469e      	mov	lr, r3
 8007db2:	4770      	bx	lr
