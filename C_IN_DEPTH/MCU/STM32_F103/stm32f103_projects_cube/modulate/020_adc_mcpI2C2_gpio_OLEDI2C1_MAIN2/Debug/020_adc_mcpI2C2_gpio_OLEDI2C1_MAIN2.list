
020_adc_mcpI2C2_gpio_OLEDI2C1_MAIN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007164  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08007278  08007278  00008278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007770  08007770  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007770  08007770  00008770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007778  08007778  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007778  08007778  00008778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800777c  0800777c  0000877c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007780  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  200001d4  08007954  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  08007954  0000988c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b390  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213e  00000000  00000000  0001458d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  000166d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000923  00000000  00000000  000172c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019316  00000000  00000000  00017be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f586  00000000  00000000  00030ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd7c  00000000  00000000  0004047f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc1fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042ac  00000000  00000000  000cc240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d04ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800725c 	.word	0x0800725c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800725c 	.word	0x0800725c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f000 ff1d 	bl	8001eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f8ed 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f000 fa11 	bl	80014a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001082:	f000 f93b 	bl	80012fc <MX_ADC1_Init>
  MX_I2C2_Init();
 8001086:	f000 f9a7 	bl	80013d8 <MX_I2C2_Init>
  MX_I2C1_Init();
 800108a:	f000 f977 	bl	800137c <MX_I2C1_Init>
  MX_SPI2_Init();
 800108e:	f000 f9d1 	bl	8001434 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start (&hadc1);
 8001092:	4863      	ldr	r0, [pc, #396]	@ (8001220 <main+0x1b0>)
 8001094:	f001 f86c 	bl	8002170 <HAL_ADC_Start>

// OLED INIT
  ssd1306_Init();
 8001098:	f000 fe30 	bl	8001cfc <ssd1306_Init>

  // Second, initilaize the MCP4725 object:
  	myMCP4725 = MCP4725_init(&hi2c2, MCP4725A0_ADDR_A01, 5.0);
 800109c:	4c61      	ldr	r4, [pc, #388]	@ (8001224 <main+0x1b4>)
 800109e:	4638      	mov	r0, r7
 80010a0:	4b61      	ldr	r3, [pc, #388]	@ (8001228 <main+0x1b8>)
 80010a2:	2261      	movs	r2, #97	@ 0x61
 80010a4:	4961      	ldr	r1, [pc, #388]	@ (800122c <main+0x1bc>)
 80010a6:	f000 fcee 	bl	8001a86 <MCP4725_init>
 80010aa:	463b      	mov	r3, r7
 80010ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}




  	// Check the connection:
  	if(MCP4725_isConnected(&myMCP4725)){
 80010b2:	485c      	ldr	r0, [pc, #368]	@ (8001224 <main+0x1b4>)
 80010b4:	f000 fd06 	bl	8001ac4 <MCP4725_isConnected>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <main+0x56>

  		// Print that the DAC is coonected
  		printf("dac is connected -- \n");
 80010be:	485c      	ldr	r0, [pc, #368]	@ (8001230 <main+0x1c0>)
 80010c0:	f004 f956 	bl	8005370 <puts>
 80010c4:	e002      	b.n	80010cc <main+0x5c>

  	}
  	else{

  		// Print that the DAC is NOT coonected
  		printf("not connected\n");
 80010c6:	485b      	ldr	r0, [pc, #364]	@ (8001234 <main+0x1c4>)
 80010c8:	f004 f952 	bl	8005370 <puts>

  	}

  	HAL_Delay(5000);
 80010cc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80010d0:	f000 ff52 	bl	8001f78 <HAL_Delay>
  	printf("delay 5sec after dac is connected \n");
 80010d4:	4858      	ldr	r0, [pc, #352]	@ (8001238 <main+0x1c8>)
 80010d6:	f004 f94b 	bl	8005370 <puts>
    {

    	/////////////  while begin


    	  HAL_ADC_PollForConversion (&hadc1, 100);
 80010da:	2164      	movs	r1, #100	@ 0x64
 80010dc:	4850      	ldr	r0, [pc, #320]	@ (8001220 <main+0x1b0>)
 80010de:	f001 f8f5 	bl	80022cc <HAL_ADC_PollForConversion>
    	  value = HAL_ADC_GetValue (&hadc1);
 80010e2:	484f      	ldr	r0, [pc, #316]	@ (8001220 <main+0x1b0>)
 80010e4:	f001 f9f8 	bl	80024d8 <HAL_ADC_GetValue>
 80010e8:	4603      	mov	r3, r0
 80010ea:	613b      	str	r3, [r7, #16]
    	  // printf("value = %ld\n",value);
    	  float voltage = (value * 5.0f) / 4096.0f;
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fd80 	bl	8000bf4 <__aeabi_ui2f>
 80010f4:	4603      	mov	r3, r0
 80010f6:	494c      	ldr	r1, [pc, #304]	@ (8001228 <main+0x1b8>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fdd3 	bl	8000ca4 <__aeabi_fmul>
 80010fe:	4603      	mov	r3, r0
 8001100:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fe81 	bl	8000e0c <__aeabi_fdiv>
 800110a:	4603      	mov	r3, r0
 800110c:	617b      	str	r3, [r7, #20]

    	  // Print voltage
    		         // printf("ADC Value: %lu, Voltage: %.2f V\n", value, voltage);
    	  //printf(" adc value == %ld  ---  Voltage: %.2f V\n",value, voltage);
    	  printf(" %ld     %.2f V\n",value, voltage);
 800110e:	693c      	ldr	r4, [r7, #16]
 8001110:	6978      	ldr	r0, [r7, #20]
 8001112:	f7ff f989 	bl	8000428 <__aeabi_f2d>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4621      	mov	r1, r4
 800111c:	4847      	ldr	r0, [pc, #284]	@ (800123c <main+0x1cc>)
 800111e:	f004 f8bf 	bl	80052a0 <iprintf>
    	  //MCP4725_setVoltage(&myMCP4725,voltage, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
    	  HAL_Delay(4000);
 8001122:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001126:	f000 ff27 	bl	8001f78 <HAL_Delay>
    	  ////////////////////////////////////



      	  if(voltage <= 1.0){
 800112a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff60 	bl	8000ff4 <__aeabi_fcmple>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00a      	beq.n	8001150 <main+0xe0>
      		  MCP4725_setVoltage(&myMCP4725,1.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 800113a:	2300      	movs	r3, #0
 800113c:	2200      	movs	r2, #0
 800113e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001142:	4838      	ldr	r0, [pc, #224]	@ (8001224 <main+0x1b4>)
 8001144:	f000 fd12 	bl	8001b6c <MCP4725_setVoltage>
      		  printf("if voltage <=1 --> mcp_setvoltgae(1)\n");
 8001148:	483d      	ldr	r0, [pc, #244]	@ (8001240 <main+0x1d0>)
 800114a:	f004 f911 	bl	8005370 <puts>
 800114e:	e7c4      	b.n	80010da <main+0x6a>
      	  }else if(voltage >1.0 && voltage <=2.0){
 8001150:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001154:	6978      	ldr	r0, [r7, #20]
 8001156:	f7ff ff61 	bl	800101c <__aeabi_fcmpgt>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d012      	beq.n	8001186 <main+0x116>
 8001160:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001164:	6978      	ldr	r0, [r7, #20]
 8001166:	f7ff ff45 	bl	8000ff4 <__aeabi_fcmple>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00a      	beq.n	8001186 <main+0x116>
      		  MCP4725_setVoltage(&myMCP4725,2.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001170:	2300      	movs	r3, #0
 8001172:	2200      	movs	r2, #0
 8001174:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001178:	482a      	ldr	r0, [pc, #168]	@ (8001224 <main+0x1b4>)
 800117a:	f000 fcf7 	bl	8001b6c <MCP4725_setVoltage>
      		 		  printf("if voltage <=2 --> mcp_setvoltgae(2)\n");
 800117e:	4831      	ldr	r0, [pc, #196]	@ (8001244 <main+0x1d4>)
 8001180:	f004 f8f6 	bl	8005370 <puts>
 8001184:	e04a      	b.n	800121c <main+0x1ac>

      	  }else if(voltage >2.0 && voltage <=3.0){
 8001186:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff46 	bl	800101c <__aeabi_fcmpgt>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d010      	beq.n	80011b8 <main+0x148>
 8001196:	492c      	ldr	r1, [pc, #176]	@ (8001248 <main+0x1d8>)
 8001198:	6978      	ldr	r0, [r7, #20]
 800119a:	f7ff ff2b 	bl	8000ff4 <__aeabi_fcmple>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d009      	beq.n	80011b8 <main+0x148>
      		  MCP4725_setVoltage(&myMCP4725,3.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80011a4:	2300      	movs	r3, #0
 80011a6:	2200      	movs	r2, #0
 80011a8:	4927      	ldr	r1, [pc, #156]	@ (8001248 <main+0x1d8>)
 80011aa:	481e      	ldr	r0, [pc, #120]	@ (8001224 <main+0x1b4>)
 80011ac:	f000 fcde 	bl	8001b6c <MCP4725_setVoltage>
      		 		  printf("if voltage <=3 --> mcp_setvoltgae(3)\n");
 80011b0:	4826      	ldr	r0, [pc, #152]	@ (800124c <main+0x1dc>)
 80011b2:	f004 f8dd 	bl	8005370 <puts>
 80011b6:	e031      	b.n	800121c <main+0x1ac>

      	  }else if(voltage >3.0 && voltage <=4.0){
 80011b8:	4923      	ldr	r1, [pc, #140]	@ (8001248 <main+0x1d8>)
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff2e 	bl	800101c <__aeabi_fcmpgt>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d012      	beq.n	80011ec <main+0x17c>
 80011c6:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff12 	bl	8000ff4 <__aeabi_fcmple>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00a      	beq.n	80011ec <main+0x17c>
      		  MCP4725_setVoltage(&myMCP4725,4.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80011d6:	2300      	movs	r3, #0
 80011d8:	2200      	movs	r2, #0
 80011da:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80011de:	4811      	ldr	r0, [pc, #68]	@ (8001224 <main+0x1b4>)
 80011e0:	f000 fcc4 	bl	8001b6c <MCP4725_setVoltage>
      		 		  printf("if voltage <=4 --> mcp_setvoltgae(4)\n");
 80011e4:	481a      	ldr	r0, [pc, #104]	@ (8001250 <main+0x1e0>)
 80011e6:	f004 f8c3 	bl	8005370 <puts>
 80011ea:	e017      	b.n	800121c <main+0x1ac>

      	  }else if(voltage >4.0 && voltage <=5.0){
 80011ec:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80011f0:	6978      	ldr	r0, [r7, #20]
 80011f2:	f7ff ff13 	bl	800101c <__aeabi_fcmpgt>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00f      	beq.n	800121c <main+0x1ac>
 80011fc:	490a      	ldr	r1, [pc, #40]	@ (8001228 <main+0x1b8>)
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff fef8 	bl	8000ff4 <__aeabi_fcmple>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d008      	beq.n	800121c <main+0x1ac>
      		  MCP4725_setVoltage(&myMCP4725,5.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 800120a:	2300      	movs	r3, #0
 800120c:	2200      	movs	r2, #0
 800120e:	4906      	ldr	r1, [pc, #24]	@ (8001228 <main+0x1b8>)
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <main+0x1b4>)
 8001212:	f000 fcab 	bl	8001b6c <MCP4725_setVoltage>
      		 		  printf("if voltage <=5 --> mcp_setvoltgae(5)\n");
 8001216:	480f      	ldr	r0, [pc, #60]	@ (8001254 <main+0x1e4>)
 8001218:	f004 f8aa 	bl	8005370 <puts>
    {
 800121c:	e75d      	b.n	80010da <main+0x6a>
 800121e:	bf00      	nop
 8001220:	200001f0 	.word	0x200001f0
 8001224:	20000320 	.word	0x20000320
 8001228:	40a00000 	.word	0x40a00000
 800122c:	20000274 	.word	0x20000274
 8001230:	08007278 	.word	0x08007278
 8001234:	08007290 	.word	0x08007290
 8001238:	080072a0 	.word	0x080072a0
 800123c:	080072c4 	.word	0x080072c4
 8001240:	080072d8 	.word	0x080072d8
 8001244:	08007300 	.word	0x08007300
 8001248:	40400000 	.word	0x40400000
 800124c:	08007328 	.word	0x08007328
 8001250:	08007350 	.word	0x08007350
 8001254:	08007378 	.word	0x08007378

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	@ 0x50
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001262:	2228      	movs	r2, #40	@ 0x28
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f004 f962 	bl	8005530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001288:	2302      	movs	r3, #2
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001298:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800129c:	4618      	mov	r0, r3
 800129e:	f002 fce1 	bl	8003c64 <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0x54>
  {
    Error_Handler();
 80012a8:	f000 f96a 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ac:	230f      	movs	r3, #15
 80012ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 ff4d 	bl	8004168 <HAL_RCC_ClockConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012d4:	f000 f954 	bl	8001580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012d8:	2302      	movs	r3, #2
 80012da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 f8ce 	bl	8004484 <HAL_RCCEx_PeriphCLKConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012ee:	f000 f947 	bl	8001580 <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	3750      	adds	r7, #80	@ 0x50
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800130c:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <MX_ADC1_Init+0x78>)
 800130e:	4a1a      	ldr	r2, [pc, #104]	@ (8001378 <MX_ADC1_Init+0x7c>)
 8001310:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001312:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <MX_ADC1_Init+0x78>)
 8001314:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001318:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <MX_ADC1_Init+0x78>)
 800131c:	2201      	movs	r2, #1
 800131e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001320:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <MX_ADC1_Init+0x78>)
 8001322:	2200      	movs	r2, #0
 8001324:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <MX_ADC1_Init+0x78>)
 8001328:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800132c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <MX_ADC1_Init+0x78>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <MX_ADC1_Init+0x78>)
 8001336:	2201      	movs	r2, #1
 8001338:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800133a:	480e      	ldr	r0, [pc, #56]	@ (8001374 <MX_ADC1_Init+0x78>)
 800133c:	f000 fe40 	bl	8001fc0 <HAL_ADC_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001346:	f000 f91b 	bl	8001580 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800134a:	2301      	movs	r3, #1
 800134c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800134e:	2301      	movs	r3, #1
 8001350:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	@ (8001374 <MX_ADC1_Init+0x78>)
 800135c:	f001 f8c8 	bl	80024f0 <HAL_ADC_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001366:	f000 f90b 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200001f0 	.word	0x200001f0
 8001378:	40012400 	.word	0x40012400

0800137c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_I2C1_Init+0x50>)
 8001382:	4a13      	ldr	r2, [pc, #76]	@ (80013d0 <MX_I2C1_Init+0x54>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_I2C1_Init+0x50>)
 8001388:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <MX_I2C1_Init+0x58>)
 800138a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_I2C1_Init+0x50>)
 800139a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800139e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013ba:	f001 fcf9 	bl	8002db0 <HAL_I2C_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013c4:	f000 f8dc 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000220 	.word	0x20000220
 80013d0:	40005400 	.word	0x40005400
 80013d4:	000186a0 	.word	0x000186a0

080013d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <MX_I2C2_Init+0x50>)
 80013de:	4a13      	ldr	r2, [pc, #76]	@ (800142c <MX_I2C2_Init+0x54>)
 80013e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_I2C2_Init+0x50>)
 80013e4:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <MX_I2C2_Init+0x58>)
 80013e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_I2C2_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <MX_I2C2_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_I2C2_Init+0x50>)
 80013f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <MX_I2C2_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_I2C2_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <MX_I2C2_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_I2C2_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_I2C2_Init+0x50>)
 8001416:	f001 fccb 	bl	8002db0 <HAL_I2C_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001420:	f000 f8ae 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000274 	.word	0x20000274
 800142c:	40005800 	.word	0x40005800
 8001430:	000186a0 	.word	0x000186a0

08001434 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001438:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_SPI2_Init+0x68>)
 800143a:	4a19      	ldr	r2, [pc, #100]	@ (80014a0 <MX_SPI2_Init+0x6c>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <MX_SPI2_Init+0x68>)
 8001440:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001444:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <MX_SPI2_Init+0x68>)
 8001448:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800144c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800144e:	4b13      	ldr	r3, [pc, #76]	@ (800149c <MX_SPI2_Init+0x68>)
 8001450:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001454:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_SPI2_Init+0x68>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_SPI2_Init+0x68>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_SPI2_Init+0x68>)
 8001464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001468:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_SPI2_Init+0x68>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001470:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <MX_SPI2_Init+0x68>)
 8001472:	2200      	movs	r2, #0
 8001474:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_SPI2_Init+0x68>)
 8001478:	2200      	movs	r2, #0
 800147a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800147c:	4b07      	ldr	r3, [pc, #28]	@ (800149c <MX_SPI2_Init+0x68>)
 800147e:	2200      	movs	r2, #0
 8001480:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_SPI2_Init+0x68>)
 8001484:	220a      	movs	r2, #10
 8001486:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	@ (800149c <MX_SPI2_Init+0x68>)
 800148a:	f003 f967 	bl	800475c <HAL_SPI_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8001494:	f000 f874 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200002c8 	.word	0x200002c8
 80014a0:	40003800 	.word	0x40003800

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d0:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a27      	ldr	r2, [pc, #156]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014d6:	f043 0320 	orr.w	r3, r3, #32
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b25      	ldr	r3, [pc, #148]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0320 	and.w	r3, r3, #32
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	4b22      	ldr	r3, [pc, #136]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a21      	ldr	r2, [pc, #132]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	4b1c      	ldr	r3, [pc, #112]	@ (8001574 <MX_GPIO_Init+0xd0>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a1b      	ldr	r2, [pc, #108]	@ (8001574 <MX_GPIO_Init+0xd0>)
 8001506:	f043 0308 	orr.w	r3, r3, #8
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <MX_GPIO_Init+0xd0>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_BUTTON_GPIO_Port, RELAY_BUTTON_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800151e:	4816      	ldr	r0, [pc, #88]	@ (8001578 <MX_GPIO_Init+0xd4>)
 8001520:	f001 fc0c 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001524:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_GPIO_Init+0xd8>)
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	4619      	mov	r1, r3
 8001538:	480f      	ldr	r0, [pc, #60]	@ (8001578 <MX_GPIO_Init+0xd4>)
 800153a:	f001 fa7b 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = RELAY_BUTTON_Pin;
 800153e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001544:	2311      	movs	r3, #17
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2302      	movs	r3, #2
 800154e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	4619      	mov	r1, r3
 8001556:	4808      	ldr	r0, [pc, #32]	@ (8001578 <MX_GPIO_Init+0xd4>)
 8001558:	f001 fa6c 	bl	8002a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	2028      	movs	r0, #40	@ 0x28
 8001562:	f001 fa30 	bl	80029c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001566:	2028      	movs	r0, #40	@ 0x28
 8001568:	f001 fa49 	bl	80029fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800156c:	bf00      	nop
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000
 8001578:	40011000 	.word	0x40011000
 800157c:	10110000 	.word	0x10110000

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <Error_Handler+0x8>

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <HAL_MspInit+0x5c>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4a14      	ldr	r2, [pc, #80]	@ (80015e8 <HAL_MspInit+0x5c>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6193      	str	r3, [r2, #24]
 800159e:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_MspInit+0x5c>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <HAL_MspInit+0x5c>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a0e      	ldr	r2, [pc, #56]	@ (80015e8 <HAL_MspInit+0x5c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <HAL_MspInit+0x5c>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_MspInit+0x60>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <HAL_MspInit+0x60>)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000

080015f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a14      	ldr	r2, [pc, #80]	@ (800165c <HAL_ADC_MspInit+0x6c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d121      	bne.n	8001654 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001610:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <HAL_ADC_MspInit+0x70>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a12      	ldr	r2, [pc, #72]	@ (8001660 <HAL_ADC_MspInit+0x70>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_ADC_MspInit+0x70>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <HAL_ADC_MspInit+0x70>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <HAL_ADC_MspInit+0x70>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_ADC_MspInit+0x70>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001640:	2302      	movs	r3, #2
 8001642:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001644:	2303      	movs	r3, #3
 8001646:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4619      	mov	r1, r3
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <HAL_ADC_MspInit+0x74>)
 8001650:	f001 f9f0 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40012400 	.word	0x40012400
 8001660:	40021000 	.word	0x40021000
 8001664:	40010800 	.word	0x40010800

08001668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	@ 0x30
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a32      	ldr	r2, [pc, #200]	@ (800174c <HAL_I2C_MspInit+0xe4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d133      	bne.n	80016f0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	4b31      	ldr	r3, [pc, #196]	@ (8001750 <HAL_I2C_MspInit+0xe8>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a30      	ldr	r2, [pc, #192]	@ (8001750 <HAL_I2C_MspInit+0xe8>)
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b2e      	ldr	r3, [pc, #184]	@ (8001750 <HAL_I2C_MspInit+0xe8>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a6:	2312      	movs	r3, #18
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4827      	ldr	r0, [pc, #156]	@ (8001754 <HAL_I2C_MspInit+0xec>)
 80016b6:	f001 f9bd 	bl	8002a34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80016ba:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <HAL_I2C_MspInit+0xf0>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016d0:	4a21      	ldr	r2, [pc, #132]	@ (8001758 <HAL_I2C_MspInit+0xf0>)
 80016d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_I2C_MspInit+0xe8>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a1d      	ldr	r2, [pc, #116]	@ (8001750 <HAL_I2C_MspInit+0xe8>)
 80016dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_I2C_MspInit+0xe8>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016ee:	e029      	b.n	8001744 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a19      	ldr	r2, [pc, #100]	@ (800175c <HAL_I2C_MspInit+0xf4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d124      	bne.n	8001744 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_I2C_MspInit+0xe8>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	4a14      	ldr	r2, [pc, #80]	@ (8001750 <HAL_I2C_MspInit+0xe8>)
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	6193      	str	r3, [r2, #24]
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_I2C_MspInit+0xe8>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001712:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001718:	2312      	movs	r3, #18
 800171a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4619      	mov	r1, r3
 8001726:	480b      	ldr	r0, [pc, #44]	@ (8001754 <HAL_I2C_MspInit+0xec>)
 8001728:	f001 f984 	bl	8002a34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800172c:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <HAL_I2C_MspInit+0xe8>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	4a07      	ldr	r2, [pc, #28]	@ (8001750 <HAL_I2C_MspInit+0xe8>)
 8001732:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001736:	61d3      	str	r3, [r2, #28]
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <HAL_I2C_MspInit+0xe8>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	bf00      	nop
 8001746:	3730      	adds	r7, #48	@ 0x30
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40005400 	.word	0x40005400
 8001750:	40021000 	.word	0x40021000
 8001754:	40010c00 	.word	0x40010c00
 8001758:	40010000 	.word	0x40010000
 800175c:	40005800 	.word	0x40005800

08001760 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1c      	ldr	r2, [pc, #112]	@ (80017ec <HAL_SPI_MspInit+0x8c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d131      	bne.n	80017e4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001780:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <HAL_SPI_MspInit+0x90>)
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	4a1a      	ldr	r2, [pc, #104]	@ (80017f0 <HAL_SPI_MspInit+0x90>)
 8001786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800178a:	61d3      	str	r3, [r2, #28]
 800178c:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <HAL_SPI_MspInit+0x90>)
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001798:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_SPI_MspInit+0x90>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <HAL_SPI_MspInit+0x90>)
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_SPI_MspInit+0x90>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	4619      	mov	r1, r3
 80017c4:	480b      	ldr	r0, [pc, #44]	@ (80017f4 <HAL_SPI_MspInit+0x94>)
 80017c6:	f001 f935 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	4619      	mov	r1, r3
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <HAL_SPI_MspInit+0x94>)
 80017e0:	f001 f928 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017e4:	bf00      	nop
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40003800 	.word	0x40003800
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010c00 	.word	0x40010c00

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <NMI_Handler+0x4>

08001800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <MemManage_Handler+0x4>

08001810 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <UsageFault_Handler+0x4>

08001820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001848:	f000 fb7a 	bl	8001f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001854:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001858:	f001 fa88 	bl	8002d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <ITM_SendChar+0x44>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a0d      	ldr	r2, [pc, #52]	@ (80018a4 <ITM_SendChar+0x44>)
 8001870:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001874:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <ITM_SendChar+0x48>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a0b      	ldr	r2, [pc, #44]	@ (80018a8 <ITM_SendChar+0x48>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001882:	bf00      	nop
 8001884:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f8      	beq.n	8001884 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001892:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	6013      	str	r3, [r2, #0]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	e000edfc 	.word	0xe000edfc
 80018a8:	e0000e00 	.word	0xe0000e00

080018ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <_kill>:

int _kill(int pid, int sig)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018c4:	f003 fe86 	bl	80055d4 <__errno>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2216      	movs	r2, #22
 80018cc:	601a      	str	r2, [r3, #0]
  return -1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_exit>:

void _exit (int status)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e2:	f04f 31ff 	mov.w	r1, #4294967295
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffe7 	bl	80018ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <_exit+0x12>

080018f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	e00a      	b.n	8001918 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001902:	f3af 8000 	nop.w
 8001906:	4601      	mov	r1, r0
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	b2ca      	uxtb	r2, r1
 8001910:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf0      	blt.n	8001902 <_read+0x12>
  }

  return len;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e009      	b.n	8001950 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff8b 	bl	8001860 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf1      	blt.n	800193c <_write+0x12>
  }
  return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_close>:

int _close(int file)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001988:	605a      	str	r2, [r3, #4]
  return 0;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <_isatty>:

int _isatty(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
	...

080019c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019cc:	4a14      	ldr	r2, [pc, #80]	@ (8001a20 <_sbrk+0x5c>)
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <_sbrk+0x60>)
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <_sbrk+0x64>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <_sbrk+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d207      	bcs.n	8001a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f4:	f003 fdee 	bl	80055d4 <__errno>
 80019f8:	4603      	mov	r3, r0
 80019fa:	220c      	movs	r2, #12
 80019fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	e009      	b.n	8001a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a04:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	4a05      	ldr	r2, [pc, #20]	@ (8001a28 <_sbrk+0x64>)
 8001a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20005000 	.word	0x20005000
 8001a24:	00000400 	.word	0x00000400
 8001a28:	20000330 	.word	0x20000330
 8001a2c:	20000890 	.word	0x20000890

08001a30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a3c:	f7ff fff8 	bl	8001a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a40:	480b      	ldr	r0, [pc, #44]	@ (8001a70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a42:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a44:	4a0c      	ldr	r2, [pc, #48]	@ (8001a78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a09      	ldr	r2, [pc, #36]	@ (8001a7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a58:	4c09      	ldr	r4, [pc, #36]	@ (8001a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a66:	f003 fdbb 	bl	80055e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a6a:	f7ff fb01 	bl	8001070 <main>
  bx lr
 8001a6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a74:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a78:	08007780 	.word	0x08007780
  ldr r2, =_sbss
 8001a7c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a80:	2000088c 	.word	0x2000088c

08001a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC1_2_IRQHandler>

08001a86 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8001a86:	b590      	push	{r4, r7, lr}
 8001a88:	b089      	sub	sp, #36	@ 0x24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	4613      	mov	r3, r2
 8001a94:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8001aa2:	f107 0310 	add.w	r3, r7, #16
 8001aa6:	6839      	ldr	r1, [r7, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f835 	bl	8001b18 <MCP4725_setReferenceVoltage>
	//printf("set ref voltage to 3.3\n");

	return _MCP4725;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	461c      	mov	r4, r3
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	3724      	adds	r7, #36	@ 0x24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}

08001ac4 <MCP4725_isConnected>:

    Check the connection
*/
/**************************************************************************/
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	//printf("mcp4725_is connectde ??\n");
	int x = HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, HAL_MAX_DELAY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	791b      	ldrb	r3, [r3, #4]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ada:	2202      	movs	r2, #2
 8001adc:	f001 fca4 	bl	8003428 <HAL_I2C_IsDeviceReady>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60fb      	str	r3, [r7, #12]
	printf("hal i2c is  device ready == %d\n",x);
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	480b      	ldr	r0, [pc, #44]	@ (8001b14 <MCP4725_isConnected+0x50>)
 8001ae8:	f003 fbda 	bl	80052a0 <iprintf>

	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	791b      	ldrb	r3, [r3, #4]
 8001af4:	4619      	mov	r1, r3
 8001af6:	2364      	movs	r3, #100	@ 0x64
 8001af8:	2202      	movs	r2, #2
 8001afa:	f001 fc95 	bl	8003428 <HAL_I2C_IsDeviceReady>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	080073a0 	.word	0x080073a0

08001b18 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8001b22:	f04f 0100 	mov.w	r1, #0
 8001b26:	6838      	ldr	r0, [r7, #0]
 8001b28:	f7ff fa50 	bl	8000fcc <__aeabi_fcmpeq>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <MCP4725_setReferenceVoltage+0x22>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a0c      	ldr	r2, [pc, #48]	@ (8001b68 <MCP4725_setReferenceVoltage+0x50>)
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	e002      	b.n	8001b40 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f04f 408b 	mov.w	r0, #1166016512	@ 0x45800000
 8001b4a:	f7ff f95f 	bl	8000e0c <__aeabi_fdiv>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fa6d 	bl	8001030 <__aeabi_f2uiz>
 8001b56:	4603      	mov	r3, r0
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	819a      	strh	r2, [r3, #12]
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40533333 	.word	0x40533333

08001b6c <MCP4725_setVoltage>:

    Set output voltage to a fraction of Vref
*/
/**************************************************************************/
uint8_t MCP4725_setVoltage(MCP4725* _MCP4725, float voltage, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	4611      	mov	r1, r2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	71fb      	strb	r3, [r7, #7]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	71bb      	strb	r3, [r7, #6]
  uint16_t value = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	82fb      	strh	r3, [r7, #22]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if      (voltage >= _MCP4725->_refVoltage) value = MCP4725_MAX_VALUE;      					 //make sure value never exceeds threshold
  else if (voltage <= 0)					           value = 0;
  else                            					 value = voltage * _MCP4725->_bitsPerVolt; //xx,xx,xx,xx,D11,D10,D9,D8 ,D7,D6,D4,D3,D2,D9,D1,D0
  #else
  value = voltage * _MCP4725->_bitsPerVolt;                                											 //xx,xx,xx,xx,D11,D10,D9,D8 ,D7,D6,D4,D3,D2,D9,D1,D0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	899b      	ldrh	r3, [r3, #12]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f836 	bl	8000bfc <__aeabi_i2f>
 8001b90:	4603      	mov	r3, r0
 8001b92:	68b9      	ldr	r1, [r7, #8]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f885 	bl	8000ca4 <__aeabi_fmul>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fa47 	bl	8001030 <__aeabi_f2uiz>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	82fb      	strh	r3, [r7, #22]
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8001ba6:	79bb      	ldrb	r3, [r7, #6]
 8001ba8:	79fa      	ldrb	r2, [r7, #7]
 8001baa:	8af9      	ldrh	r1, [r7, #22]
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f805 	bl	8001bbc <MCP4725_writeComand>
 8001bb2:	4603      	mov	r3, r0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	807b      	strh	r3, [r7, #2]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	707b      	strb	r3, [r7, #1]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8001bd6:	787b      	ldrb	r3, [r7, #1]
 8001bd8:	2b60      	cmp	r3, #96	@ 0x60
 8001bda:	d028      	beq.n	8001c2e <MCP4725_writeComand+0x72>
 8001bdc:	2b60      	cmp	r3, #96	@ 0x60
 8001bde:	dc4a      	bgt.n	8001c76 <MCP4725_writeComand+0xba>
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <MCP4725_writeComand+0x2e>
 8001be4:	2b40      	cmp	r3, #64	@ 0x40
 8001be6:	d022      	beq.n	8001c2e <MCP4725_writeComand+0x72>
 8001be8:	e045      	b.n	8001c76 <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18

      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8001bea:	783b      	ldrb	r3, [r7, #0]
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	b25a      	sxtb	r2, r3
 8001bf0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	b25a      	sxtb	r2, r3
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	4313      	orrs	r3, r2
 8001c02:	b25b      	sxtb	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	737b      	strb	r3, [r7, #13]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	791b      	ldrb	r3, [r3, #4]
 8001c16:	4619      	mov	r1, r3
 8001c18:	f107 020c 	add.w	r2, r7, #12
 8001c1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2302      	movs	r3, #2
 8001c24:	f001 fa08 	bl	8003038 <HAL_I2C_Master_Transmit>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	73fb      	strb	r3, [r7, #15]

      break;
 8001c2c:	e023      	b.n	8001c76 <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode  | (powerType << 1);
 8001c34:	783b      	ldrb	r3, [r7, #0]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	b25a      	sxtb	r2, r3
 8001c3a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 8001c46:	887b      	ldrh	r3, [r7, #2]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 8001c50:	887b      	ldrh	r3, [r7, #2]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	73bb      	strb	r3, [r7, #14]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	791b      	ldrb	r3, [r3, #4]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f107 020c 	add.w	r2, r7, #12
 8001c64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	f001 f9e4 	bl	8003038 <HAL_I2C_Master_Transmit>
 8001c70:	4603      	mov	r3, r0
 8001c72:	73fb      	strb	r3, [r7, #15]

			break;
 8001c74:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MCP4725_writeComand+0xc4>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e000      	b.n	8001c82 <MCP4725_writeComand+0xc6>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
  }
*/  //LATER ON EEEPRROM
  return 1;                                                         //success!!!
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
	...

08001c98 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af04      	add	r7, sp, #16
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	1dfb      	adds	r3, r7, #7
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2178      	movs	r1, #120	@ 0x78
 8001cb6:	4803      	ldr	r0, [pc, #12]	@ (8001cc4 <ssd1306_WriteCommand+0x2c>)
 8001cb8:	f001 fabc 	bl	8003234 <HAL_I2C_Mem_Write>
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000220 	.word	0x20000220

08001cc8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af04      	add	r7, sp, #16
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cda:	9202      	str	r2, [sp, #8]
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	2240      	movs	r2, #64	@ 0x40
 8001ce6:	2178      	movs	r1, #120	@ 0x78
 8001ce8:	4803      	ldr	r0, [pc, #12]	@ (8001cf8 <ssd1306_WriteData+0x30>)
 8001cea:	f001 faa3 	bl	8003234 <HAL_I2C_Mem_Write>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000220 	.word	0x20000220

08001cfc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001d00:	f7ff ffc3 	bl	8001c8a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001d04:	2064      	movs	r0, #100	@ 0x64
 8001d06:	f000 f937 	bl	8001f78 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f000 f8b4 	bl	8001e78 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d10:	2020      	movs	r0, #32
 8001d12:	f7ff ffc1 	bl	8001c98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff ffbe 	bl	8001c98 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d1c:	20b0      	movs	r0, #176	@ 0xb0
 8001d1e:	f7ff ffbb 	bl	8001c98 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d22:	20c8      	movs	r0, #200	@ 0xc8
 8001d24:	f7ff ffb8 	bl	8001c98 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff ffb5 	bl	8001c98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d2e:	2010      	movs	r0, #16
 8001d30:	f7ff ffb2 	bl	8001c98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d34:	2040      	movs	r0, #64	@ 0x40
 8001d36:	f7ff ffaf 	bl	8001c98 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d3a:	20ff      	movs	r0, #255	@ 0xff
 8001d3c:	f000 f888 	bl	8001e50 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d40:	20a1      	movs	r0, #161	@ 0xa1
 8001d42:	f7ff ffa9 	bl	8001c98 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d46:	20a6      	movs	r0, #166	@ 0xa6
 8001d48:	f7ff ffa6 	bl	8001c98 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d4c:	20a8      	movs	r0, #168	@ 0xa8
 8001d4e:	f7ff ffa3 	bl	8001c98 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001d52:	203f      	movs	r0, #63	@ 0x3f
 8001d54:	f7ff ffa0 	bl	8001c98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d58:	20a4      	movs	r0, #164	@ 0xa4
 8001d5a:	f7ff ff9d 	bl	8001c98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d5e:	20d3      	movs	r0, #211	@ 0xd3
 8001d60:	f7ff ff9a 	bl	8001c98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff ff97 	bl	8001c98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d6a:	20d5      	movs	r0, #213	@ 0xd5
 8001d6c:	f7ff ff94 	bl	8001c98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d70:	20f0      	movs	r0, #240	@ 0xf0
 8001d72:	f7ff ff91 	bl	8001c98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001d76:	20d9      	movs	r0, #217	@ 0xd9
 8001d78:	f7ff ff8e 	bl	8001c98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001d7c:	2022      	movs	r0, #34	@ 0x22
 8001d7e:	f7ff ff8b 	bl	8001c98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001d82:	20da      	movs	r0, #218	@ 0xda
 8001d84:	f7ff ff88 	bl	8001c98 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001d88:	2012      	movs	r0, #18
 8001d8a:	f7ff ff85 	bl	8001c98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001d8e:	20db      	movs	r0, #219	@ 0xdb
 8001d90:	f7ff ff82 	bl	8001c98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001d94:	2020      	movs	r0, #32
 8001d96:	f7ff ff7f 	bl	8001c98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001d9a:	208d      	movs	r0, #141	@ 0x8d
 8001d9c:	f7ff ff7c 	bl	8001c98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001da0:	2014      	movs	r0, #20
 8001da2:	f7ff ff79 	bl	8001c98 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 f866 	bl	8001e78 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001dac:	2000      	movs	r0, #0
 8001dae:	f000 f80f 	bl	8001dd0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001db2:	f000 f825 	bl	8001e00 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001db6:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <ssd1306_Init+0xd0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	@ (8001dcc <ssd1306_Init+0xd0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001dc2:	4b02      	ldr	r3, [pc, #8]	@ (8001dcc <ssd1306_Init+0xd0>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	711a      	strb	r2, [r3, #4]
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000734 	.word	0x20000734

08001dd0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <ssd1306_Fill+0x14>
 8001de0:	2300      	movs	r3, #0
 8001de2:	e000      	b.n	8001de6 <ssd1306_Fill+0x16>
 8001de4:	23ff      	movs	r3, #255	@ 0xff
 8001de6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dea:	4619      	mov	r1, r3
 8001dec:	4803      	ldr	r0, [pc, #12]	@ (8001dfc <ssd1306_Fill+0x2c>)
 8001dee:	f003 fb9f 	bl	8005530 <memset>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000334 	.word	0x20000334

08001e00 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e06:	2300      	movs	r3, #0
 8001e08:	71fb      	strb	r3, [r7, #7]
 8001e0a:	e016      	b.n	8001e3a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	3b50      	subs	r3, #80	@ 0x50
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff40 	bl	8001c98 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff ff3d 	bl	8001c98 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001e1e:	2010      	movs	r0, #16
 8001e20:	f7ff ff3a 	bl	8001c98 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	01db      	lsls	r3, r3, #7
 8001e28:	4a08      	ldr	r2, [pc, #32]	@ (8001e4c <ssd1306_UpdateScreen+0x4c>)
 8001e2a:	4413      	add	r3, r2
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff4a 	bl	8001cc8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	3301      	adds	r3, #1
 8001e38:	71fb      	strb	r3, [r7, #7]
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b07      	cmp	r3, #7
 8001e3e:	d9e5      	bls.n	8001e0c <ssd1306_UpdateScreen+0xc>
    }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000334 	.word	0x20000334

08001e50 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001e5a:	2381      	movs	r3, #129	@ 0x81
 8001e5c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff19 	bl	8001c98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff15 	bl	8001c98 <ssd1306_WriteCommand>
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001e88:	23af      	movs	r3, #175	@ 0xaf
 8001e8a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <ssd1306_SetDisplayOn+0x38>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	715a      	strb	r2, [r3, #5]
 8001e92:	e004      	b.n	8001e9e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001e94:	23ae      	movs	r3, #174	@ 0xae
 8001e96:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <ssd1306_SetDisplayOn+0x38>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fef9 	bl	8001c98 <ssd1306_WriteCommand>
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000734 	.word	0x20000734

08001eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_Init+0x28>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	@ (8001edc <HAL_Init+0x28>)
 8001ebe:	f043 0310 	orr.w	r3, r3, #16
 8001ec2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f000 fd73 	bl	80029b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f000 f808 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed0:	f7ff fb5c 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40022000 	.word	0x40022000

08001ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <HAL_InitTick+0x54>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <HAL_InitTick+0x58>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fd8b 	bl	8002a1a <HAL_SYSTICK_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00e      	b.n	8001f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b0f      	cmp	r3, #15
 8001f12:	d80a      	bhi.n	8001f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f14:	2200      	movs	r2, #0
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f000 fd53 	bl	80029c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f20:	4a06      	ldr	r2, [pc, #24]	@ (8001f3c <HAL_InitTick+0x5c>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e000      	b.n	8001f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <HAL_IncTick+0x1c>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <HAL_IncTick+0x20>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a03      	ldr	r2, [pc, #12]	@ (8001f60 <HAL_IncTick+0x20>)
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	2000073c 	.word	0x2000073c

08001f64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b02      	ldr	r3, [pc, #8]	@ (8001f74 <HAL_GetTick+0x10>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	2000073c 	.word	0x2000073c

08001f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff fff0 	bl	8001f64 <HAL_GetTick>
 8001f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f90:	d005      	beq.n	8001f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_Delay+0x44>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f9e:	bf00      	nop
 8001fa0:	f7ff ffe0 	bl	8001f64 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d8f7      	bhi.n	8001fa0 <HAL_Delay+0x28>
  {
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008

08001fc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0be      	b.n	8002160 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff faf6 	bl	80015f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fbc5 	bl	8002794 <ADC_ConversionStop_Disable>
 800200a:	4603      	mov	r3, r0
 800200c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 8099 	bne.w	800214e <HAL_ADC_Init+0x18e>
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 8095 	bne.w	800214e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002028:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800202c:	f023 0302 	bic.w	r3, r3, #2
 8002030:	f043 0202 	orr.w	r2, r3, #2
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002040:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7b1b      	ldrb	r3, [r3, #12]
 8002046:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002048:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	4313      	orrs	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002058:	d003      	beq.n	8002062 <HAL_ADC_Init+0xa2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d102      	bne.n	8002068 <HAL_ADC_Init+0xa8>
 8002062:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002066:	e000      	b.n	800206a <HAL_ADC_Init+0xaa>
 8002068:	2300      	movs	r3, #0
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7d1b      	ldrb	r3, [r3, #20]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d119      	bne.n	80020ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7b1b      	ldrb	r3, [r3, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d109      	bne.n	8002094 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	3b01      	subs	r3, #1
 8002086:	035a      	lsls	r2, r3, #13
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	e00b      	b.n	80020ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	430a      	orrs	r2, r1
 80020be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	4b28      	ldr	r3, [pc, #160]	@ (8002168 <HAL_ADC_Init+0x1a8>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	430b      	orrs	r3, r1
 80020d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020dc:	d003      	beq.n	80020e6 <HAL_ADC_Init+0x126>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d104      	bne.n	80020f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	051b      	lsls	r3, r3, #20
 80020ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	430a      	orrs	r2, r1
 8002102:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	4b18      	ldr	r3, [pc, #96]	@ (800216c <HAL_ADC_Init+0x1ac>)
 800210c:	4013      	ands	r3, r2
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	429a      	cmp	r2, r3
 8002112:	d10b      	bne.n	800212c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211e:	f023 0303 	bic.w	r3, r3, #3
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800212a:	e018      	b.n	800215e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	f023 0312 	bic.w	r3, r3, #18
 8002134:	f043 0210 	orr.w	r2, r3, #16
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800214c:	e007      	b.n	800215e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002152:	f043 0210 	orr.w	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800215e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	ffe1f7fd 	.word	0xffe1f7fd
 800216c:	ff1f0efe 	.word	0xff1f0efe

08002170 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_ADC_Start+0x1a>
 8002186:	2302      	movs	r3, #2
 8002188:	e098      	b.n	80022bc <HAL_ADC_Start+0x14c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 faa4 	bl	80026e0 <ADC_Enable>
 8002198:	4603      	mov	r3, r0
 800219a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 8087 	bne.w	80022b2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a41      	ldr	r2, [pc, #260]	@ (80022c4 <HAL_ADC_Start+0x154>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d105      	bne.n	80021ce <HAL_ADC_Start+0x5e>
 80021c2:	4b41      	ldr	r3, [pc, #260]	@ (80022c8 <HAL_ADC_Start+0x158>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d115      	bne.n	80021fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d026      	beq.n	8002236 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021f8:	e01d      	b.n	8002236 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2f      	ldr	r2, [pc, #188]	@ (80022c8 <HAL_ADC_Start+0x158>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d004      	beq.n	800221a <HAL_ADC_Start+0xaa>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a2b      	ldr	r2, [pc, #172]	@ (80022c4 <HAL_ADC_Start+0x154>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10d      	bne.n	8002236 <HAL_ADC_Start+0xc6>
 800221a:	4b2b      	ldr	r3, [pc, #172]	@ (80022c8 <HAL_ADC_Start+0x158>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800222e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002246:	f023 0206 	bic.w	r2, r3, #6
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800224e:	e002      	b.n	8002256 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f06f 0202 	mvn.w	r2, #2
 8002266:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002272:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002276:	d113      	bne.n	80022a0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800227c:	4a11      	ldr	r2, [pc, #68]	@ (80022c4 <HAL_ADC_Start+0x154>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d105      	bne.n	800228e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002282:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <HAL_ADC_Start+0x158>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d108      	bne.n	80022a0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	e00c      	b.n	80022ba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	e003      	b.n	80022ba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40012800 	.word	0x40012800
 80022c8:	40012400 	.word	0x40012400

080022cc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80022e2:	f7ff fe3f 	bl	8001f64 <HAL_GetTick>
 80022e6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fa:	f043 0220 	orr.w	r2, r3, #32
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0d3      	b.n	80024b6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d131      	bne.n	8002380 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002326:	2b00      	cmp	r3, #0
 8002328:	d12a      	bne.n	8002380 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800232a:	e021      	b.n	8002370 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002332:	d01d      	beq.n	8002370 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <HAL_ADC_PollForConversion+0x7e>
 800233a:	f7ff fe13 	bl	8001f64 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d212      	bcs.n	8002370 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10b      	bne.n	8002370 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	f043 0204 	orr.w	r2, r3, #4
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e0a2      	b.n	80024b6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0d6      	beq.n	800232c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800237e:	e070      	b.n	8002462 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002380:	4b4f      	ldr	r3, [pc, #316]	@ (80024c0 <HAL_ADC_PollForConversion+0x1f4>)
 8002382:	681c      	ldr	r4, [r3, #0]
 8002384:	2002      	movs	r0, #2
 8002386:	f002 f933 	bl	80045f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800238a:	4603      	mov	r3, r0
 800238c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6919      	ldr	r1, [r3, #16]
 8002396:	4b4b      	ldr	r3, [pc, #300]	@ (80024c4 <HAL_ADC_PollForConversion+0x1f8>)
 8002398:	400b      	ands	r3, r1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d118      	bne.n	80023d0 <HAL_ADC_PollForConversion+0x104>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68d9      	ldr	r1, [r3, #12]
 80023a4:	4b48      	ldr	r3, [pc, #288]	@ (80024c8 <HAL_ADC_PollForConversion+0x1fc>)
 80023a6:	400b      	ands	r3, r1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d111      	bne.n	80023d0 <HAL_ADC_PollForConversion+0x104>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6919      	ldr	r1, [r3, #16]
 80023b2:	4b46      	ldr	r3, [pc, #280]	@ (80024cc <HAL_ADC_PollForConversion+0x200>)
 80023b4:	400b      	ands	r3, r1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_ADC_PollForConversion+0x100>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68d9      	ldr	r1, [r3, #12]
 80023c0:	4b43      	ldr	r3, [pc, #268]	@ (80024d0 <HAL_ADC_PollForConversion+0x204>)
 80023c2:	400b      	ands	r3, r1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_PollForConversion+0x100>
 80023c8:	2314      	movs	r3, #20
 80023ca:	e020      	b.n	800240e <HAL_ADC_PollForConversion+0x142>
 80023cc:	2329      	movs	r3, #41	@ 0x29
 80023ce:	e01e      	b.n	800240e <HAL_ADC_PollForConversion+0x142>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6919      	ldr	r1, [r3, #16]
 80023d6:	4b3d      	ldr	r3, [pc, #244]	@ (80024cc <HAL_ADC_PollForConversion+0x200>)
 80023d8:	400b      	ands	r3, r1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_ADC_PollForConversion+0x120>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68d9      	ldr	r1, [r3, #12]
 80023e4:	4b3a      	ldr	r3, [pc, #232]	@ (80024d0 <HAL_ADC_PollForConversion+0x204>)
 80023e6:	400b      	ands	r3, r1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <HAL_ADC_PollForConversion+0x13c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6919      	ldr	r1, [r3, #16]
 80023f2:	4b38      	ldr	r3, [pc, #224]	@ (80024d4 <HAL_ADC_PollForConversion+0x208>)
 80023f4:	400b      	ands	r3, r1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d108      	bne.n	800240c <HAL_ADC_PollForConversion+0x140>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68d9      	ldr	r1, [r3, #12]
 8002400:	4b34      	ldr	r3, [pc, #208]	@ (80024d4 <HAL_ADC_PollForConversion+0x208>)
 8002402:	400b      	ands	r3, r1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_PollForConversion+0x140>
 8002408:	2354      	movs	r3, #84	@ 0x54
 800240a:	e000      	b.n	800240e <HAL_ADC_PollForConversion+0x142>
 800240c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002414:	e021      	b.n	800245a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	d01a      	beq.n	8002454 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_ADC_PollForConversion+0x168>
 8002424:	f7ff fd9e 	bl	8001f64 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d20f      	bcs.n	8002454 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d90b      	bls.n	8002454 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002440:	f043 0204 	orr.w	r2, r3, #4
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e030      	b.n	80024b6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3301      	adds	r3, #1
 8002458:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	429a      	cmp	r2, r3
 8002460:	d8d9      	bhi.n	8002416 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f06f 0212 	mvn.w	r2, #18
 800246a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002482:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002486:	d115      	bne.n	80024b4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800248c:	2b00      	cmp	r3, #0
 800248e:	d111      	bne.n	80024b4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002494:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000000 	.word	0x20000000
 80024c4:	24924924 	.word	0x24924924
 80024c8:	00924924 	.word	0x00924924
 80024cc:	12492492 	.word	0x12492492
 80024d0:	00492492 	.word	0x00492492
 80024d4:	00249249 	.word	0x00249249

080024d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x20>
 800250c:	2302      	movs	r3, #2
 800250e:	e0dc      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1da>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b06      	cmp	r3, #6
 800251e:	d81c      	bhi.n	800255a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	3b05      	subs	r3, #5
 8002532:	221f      	movs	r2, #31
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	4019      	ands	r1, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	3b05      	subs	r3, #5
 800254c:	fa00 f203 	lsl.w	r2, r0, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	635a      	str	r2, [r3, #52]	@ 0x34
 8002558:	e03c      	b.n	80025d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d81c      	bhi.n	800259c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	3b23      	subs	r3, #35	@ 0x23
 8002574:	221f      	movs	r2, #31
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	4019      	ands	r1, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	3b23      	subs	r3, #35	@ 0x23
 800258e:	fa00 f203 	lsl.w	r2, r0, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	631a      	str	r2, [r3, #48]	@ 0x30
 800259a:	e01b      	b.n	80025d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	3b41      	subs	r3, #65	@ 0x41
 80025ae:	221f      	movs	r2, #31
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	4019      	ands	r1, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	3b41      	subs	r3, #65	@ 0x41
 80025c8:	fa00 f203 	lsl.w	r2, r0, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b09      	cmp	r3, #9
 80025da:	d91c      	bls.n	8002616 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68d9      	ldr	r1, [r3, #12]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4613      	mov	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	3b1e      	subs	r3, #30
 80025ee:	2207      	movs	r2, #7
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	4019      	ands	r1, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6898      	ldr	r0, [r3, #8]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	3b1e      	subs	r3, #30
 8002608:	fa00 f203 	lsl.w	r2, r0, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	e019      	b.n	800264a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6919      	ldr	r1, [r3, #16]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	2207      	movs	r2, #7
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	4019      	ands	r1, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6898      	ldr	r0, [r3, #8]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	fa00 f203 	lsl.w	r2, r0, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b10      	cmp	r3, #16
 8002650:	d003      	beq.n	800265a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002656:	2b11      	cmp	r3, #17
 8002658:	d132      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1d      	ldr	r2, [pc, #116]	@ (80026d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d125      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d126      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002680:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b10      	cmp	r3, #16
 8002688:	d11a      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800268a:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <HAL_ADC_ConfigChannel+0x1ec>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	0c9a      	lsrs	r2, r3, #18
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026a0:	e002      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f9      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x1b2>
 80026ae:	e007      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b4:	f043 0220 	orr.w	r2, r3, #32
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40012400 	.word	0x40012400
 80026d8:	20000000 	.word	0x20000000
 80026dc:	431bde83 	.word	0x431bde83

080026e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d040      	beq.n	8002780 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0201 	orr.w	r2, r2, #1
 800270c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800270e:	4b1f      	ldr	r3, [pc, #124]	@ (800278c <ADC_Enable+0xac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1f      	ldr	r2, [pc, #124]	@ (8002790 <ADC_Enable+0xb0>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	0c9b      	lsrs	r3, r3, #18
 800271a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800271c:	e002      	b.n	8002724 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3b01      	subs	r3, #1
 8002722:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f9      	bne.n	800271e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800272a:	f7ff fc1b 	bl	8001f64 <HAL_GetTick>
 800272e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002730:	e01f      	b.n	8002772 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002732:	f7ff fc17 	bl	8001f64 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d918      	bls.n	8002772 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d011      	beq.n	8002772 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	f043 0210 	orr.w	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e007      	b.n	8002782 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d1d8      	bne.n	8002732 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000000 	.word	0x20000000
 8002790:	431bde83 	.word	0x431bde83

08002794 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d12e      	bne.n	800280c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027be:	f7ff fbd1 	bl	8001f64 <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027c4:	e01b      	b.n	80027fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027c6:	f7ff fbcd 	bl	8001f64 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d914      	bls.n	80027fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d10d      	bne.n	80027fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e007      	b.n	800280e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d0dc      	beq.n	80027c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002828:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002834:	4013      	ands	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002840:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284a:	4a04      	ldr	r2, [pc, #16]	@ (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60d3      	str	r3, [r2, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002864:	4b04      	ldr	r3, [pc, #16]	@ (8002878 <__NVIC_GetPriorityGrouping+0x18>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f003 0307 	and.w	r3, r3, #7
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	db0b      	blt.n	80028a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	f003 021f 	and.w	r2, r3, #31
 8002894:	4906      	ldr	r1, [pc, #24]	@ (80028b0 <__NVIC_EnableIRQ+0x34>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2001      	movs	r0, #1
 800289e:	fa00 f202 	lsl.w	r2, r0, r2
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	e000e100 	.word	0xe000e100

080028b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	6039      	str	r1, [r7, #0]
 80028be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	db0a      	blt.n	80028de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	490c      	ldr	r1, [pc, #48]	@ (8002900 <__NVIC_SetPriority+0x4c>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	0112      	lsls	r2, r2, #4
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	440b      	add	r3, r1
 80028d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028dc:	e00a      	b.n	80028f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4908      	ldr	r1, [pc, #32]	@ (8002904 <__NVIC_SetPriority+0x50>)
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3b04      	subs	r3, #4
 80028ec:	0112      	lsls	r2, r2, #4
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	440b      	add	r3, r1
 80028f2:	761a      	strb	r2, [r3, #24]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000e100 	.word	0xe000e100
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	@ 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f1c3 0307 	rsb	r3, r3, #7
 8002922:	2b04      	cmp	r3, #4
 8002924:	bf28      	it	cs
 8002926:	2304      	movcs	r3, #4
 8002928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3304      	adds	r3, #4
 800292e:	2b06      	cmp	r3, #6
 8002930:	d902      	bls.n	8002938 <NVIC_EncodePriority+0x30>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3b03      	subs	r3, #3
 8002936:	e000      	b.n	800293a <NVIC_EncodePriority+0x32>
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	f04f 32ff 	mov.w	r2, #4294967295
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	401a      	ands	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002950:	f04f 31ff 	mov.w	r1, #4294967295
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43d9      	mvns	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	4313      	orrs	r3, r2
         );
}
 8002962:	4618      	mov	r0, r3
 8002964:	3724      	adds	r7, #36	@ 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800297c:	d301      	bcc.n	8002982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297e:	2301      	movs	r3, #1
 8002980:	e00f      	b.n	80029a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <SysTick_Config+0x40>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298a:	210f      	movs	r1, #15
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	f7ff ff90 	bl	80028b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <SysTick_Config+0x40>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299a:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <SysTick_Config+0x40>)
 800299c:	2207      	movs	r2, #7
 800299e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	e000e010 	.word	0xe000e010

080029b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff2d 	bl	8002818 <__NVIC_SetPriorityGrouping>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d8:	f7ff ff42 	bl	8002860 <__NVIC_GetPriorityGrouping>
 80029dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	6978      	ldr	r0, [r7, #20]
 80029e4:	f7ff ff90 	bl	8002908 <NVIC_EncodePriority>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff5f 	bl	80028b4 <__NVIC_SetPriority>
}
 80029f6:	bf00      	nop
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff35 	bl	800287c <__NVIC_EnableIRQ>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ffa2 	bl	800296c <SysTick_Config>
 8002a28:	4603      	mov	r3, r0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b08b      	sub	sp, #44	@ 0x2c
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a46:	e169      	b.n	8002d1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	f040 8158 	bne.w	8002d16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4a9a      	ldr	r2, [pc, #616]	@ (8002cd4 <HAL_GPIO_Init+0x2a0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d05e      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002a70:	4a98      	ldr	r2, [pc, #608]	@ (8002cd4 <HAL_GPIO_Init+0x2a0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d875      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002a76:	4a98      	ldr	r2, [pc, #608]	@ (8002cd8 <HAL_GPIO_Init+0x2a4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d058      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002a7c:	4a96      	ldr	r2, [pc, #600]	@ (8002cd8 <HAL_GPIO_Init+0x2a4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d86f      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002a82:	4a96      	ldr	r2, [pc, #600]	@ (8002cdc <HAL_GPIO_Init+0x2a8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d052      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002a88:	4a94      	ldr	r2, [pc, #592]	@ (8002cdc <HAL_GPIO_Init+0x2a8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d869      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002a8e:	4a94      	ldr	r2, [pc, #592]	@ (8002ce0 <HAL_GPIO_Init+0x2ac>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d04c      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002a94:	4a92      	ldr	r2, [pc, #584]	@ (8002ce0 <HAL_GPIO_Init+0x2ac>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d863      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002a9a:	4a92      	ldr	r2, [pc, #584]	@ (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d046      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002aa0:	4a90      	ldr	r2, [pc, #576]	@ (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d85d      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002aa6:	2b12      	cmp	r3, #18
 8002aa8:	d82a      	bhi.n	8002b00 <HAL_GPIO_Init+0xcc>
 8002aaa:	2b12      	cmp	r3, #18
 8002aac:	d859      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002aae:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab4 <HAL_GPIO_Init+0x80>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002b2f 	.word	0x08002b2f
 8002ab8:	08002b09 	.word	0x08002b09
 8002abc:	08002b1b 	.word	0x08002b1b
 8002ac0:	08002b5d 	.word	0x08002b5d
 8002ac4:	08002b63 	.word	0x08002b63
 8002ac8:	08002b63 	.word	0x08002b63
 8002acc:	08002b63 	.word	0x08002b63
 8002ad0:	08002b63 	.word	0x08002b63
 8002ad4:	08002b63 	.word	0x08002b63
 8002ad8:	08002b63 	.word	0x08002b63
 8002adc:	08002b63 	.word	0x08002b63
 8002ae0:	08002b63 	.word	0x08002b63
 8002ae4:	08002b63 	.word	0x08002b63
 8002ae8:	08002b63 	.word	0x08002b63
 8002aec:	08002b63 	.word	0x08002b63
 8002af0:	08002b63 	.word	0x08002b63
 8002af4:	08002b63 	.word	0x08002b63
 8002af8:	08002b11 	.word	0x08002b11
 8002afc:	08002b25 	.word	0x08002b25
 8002b00:	4a79      	ldr	r2, [pc, #484]	@ (8002ce8 <HAL_GPIO_Init+0x2b4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b06:	e02c      	b.n	8002b62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	623b      	str	r3, [r7, #32]
          break;
 8002b0e:	e029      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	3304      	adds	r3, #4
 8002b16:	623b      	str	r3, [r7, #32]
          break;
 8002b18:	e024      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	3308      	adds	r3, #8
 8002b20:	623b      	str	r3, [r7, #32]
          break;
 8002b22:	e01f      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	623b      	str	r3, [r7, #32]
          break;
 8002b2c:	e01a      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d102      	bne.n	8002b3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b36:	2304      	movs	r3, #4
 8002b38:	623b      	str	r3, [r7, #32]
          break;
 8002b3a:	e013      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b44:	2308      	movs	r3, #8
 8002b46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	611a      	str	r2, [r3, #16]
          break;
 8002b4e:	e009      	b.n	8002b64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b50:	2308      	movs	r3, #8
 8002b52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	615a      	str	r2, [r3, #20]
          break;
 8002b5a:	e003      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	623b      	str	r3, [r7, #32]
          break;
 8002b60:	e000      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          break;
 8002b62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2bff      	cmp	r3, #255	@ 0xff
 8002b68:	d801      	bhi.n	8002b6e <HAL_GPIO_Init+0x13a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	e001      	b.n	8002b72 <HAL_GPIO_Init+0x13e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3304      	adds	r3, #4
 8002b72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2bff      	cmp	r3, #255	@ 0xff
 8002b78:	d802      	bhi.n	8002b80 <HAL_GPIO_Init+0x14c>
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	e002      	b.n	8002b86 <HAL_GPIO_Init+0x152>
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	3b08      	subs	r3, #8
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	210f      	movs	r1, #15
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	401a      	ands	r2, r3
 8002b98:	6a39      	ldr	r1, [r7, #32]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80b1 	beq.w	8002d16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8002cec <HAL_GPIO_Init+0x2b8>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	4a4c      	ldr	r2, [pc, #304]	@ (8002cec <HAL_GPIO_Init+0x2b8>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6193      	str	r3, [r2, #24]
 8002bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8002cec <HAL_GPIO_Init+0x2b8>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bcc:	4a48      	ldr	r2, [pc, #288]	@ (8002cf0 <HAL_GPIO_Init+0x2bc>)
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a40      	ldr	r2, [pc, #256]	@ (8002cf4 <HAL_GPIO_Init+0x2c0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_GPIO_Init+0x1ec>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8002cf8 <HAL_GPIO_Init+0x2c4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00d      	beq.n	8002c1c <HAL_GPIO_Init+0x1e8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3e      	ldr	r2, [pc, #248]	@ (8002cfc <HAL_GPIO_Init+0x2c8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d007      	beq.n	8002c18 <HAL_GPIO_Init+0x1e4>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d00 <HAL_GPIO_Init+0x2cc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d101      	bne.n	8002c14 <HAL_GPIO_Init+0x1e0>
 8002c10:	2303      	movs	r3, #3
 8002c12:	e006      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c14:	2304      	movs	r3, #4
 8002c16:	e004      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e002      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c20:	2300      	movs	r3, #0
 8002c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c24:	f002 0203 	and.w	r2, r2, #3
 8002c28:	0092      	lsls	r2, r2, #2
 8002c2a:	4093      	lsls	r3, r2
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c32:	492f      	ldr	r1, [pc, #188]	@ (8002cf0 <HAL_GPIO_Init+0x2bc>)
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3302      	adds	r3, #2
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	492c      	ldr	r1, [pc, #176]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]
 8002c58:	e006      	b.n	8002c68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	4928      	ldr	r1, [pc, #160]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c74:	4b23      	ldr	r3, [pc, #140]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	4922      	ldr	r1, [pc, #136]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60cb      	str	r3, [r1, #12]
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c82:	4b20      	ldr	r3, [pc, #128]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	491e      	ldr	r1, [pc, #120]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c9c:	4b19      	ldr	r3, [pc, #100]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	4918      	ldr	r1, [pc, #96]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
 8002ca8:	e006      	b.n	8002cb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002caa:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	4914      	ldr	r1, [pc, #80]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d021      	beq.n	8002d08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	490e      	ldr	r1, [pc, #56]	@ (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]
 8002cd0:	e021      	b.n	8002d16 <HAL_GPIO_Init+0x2e2>
 8002cd2:	bf00      	nop
 8002cd4:	10320000 	.word	0x10320000
 8002cd8:	10310000 	.word	0x10310000
 8002cdc:	10220000 	.word	0x10220000
 8002ce0:	10210000 	.word	0x10210000
 8002ce4:	10120000 	.word	0x10120000
 8002ce8:	10110000 	.word	0x10110000
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40010800 	.word	0x40010800
 8002cf8:	40010c00 	.word	0x40010c00
 8002cfc:	40011000 	.word	0x40011000
 8002d00:	40011400 	.word	0x40011400
 8002d04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <HAL_GPIO_Init+0x304>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	4909      	ldr	r1, [pc, #36]	@ (8002d38 <HAL_GPIO_Init+0x304>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	3301      	adds	r3, #1
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f47f ae8e 	bne.w	8002a48 <HAL_GPIO_Init+0x14>
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	372c      	adds	r7, #44	@ 0x2c
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	40010400 	.word	0x40010400

08002d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d4c:	787b      	ldrb	r3, [r7, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d58:	e003      	b.n	8002d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d5a:	887b      	ldrh	r3, [r7, #2]
 8002d5c:	041a      	lsls	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	611a      	str	r2, [r3, #16]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d76:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d82:	4a05      	ldr	r2, [pc, #20]	@ (8002d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f806 	bl	8002d9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40010400 	.word	0x40010400

08002d9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e12b      	b.n	800301a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe fc46 	bl	8001668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	@ 0x24
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e14:	f001 faf0 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 8002e18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4a81      	ldr	r2, [pc, #516]	@ (8003024 <HAL_I2C_Init+0x274>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d807      	bhi.n	8002e34 <HAL_I2C_Init+0x84>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a80      	ldr	r2, [pc, #512]	@ (8003028 <HAL_I2C_Init+0x278>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	bf94      	ite	ls
 8002e2c:	2301      	movls	r3, #1
 8002e2e:	2300      	movhi	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	e006      	b.n	8002e42 <HAL_I2C_Init+0x92>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4a7d      	ldr	r2, [pc, #500]	@ (800302c <HAL_I2C_Init+0x27c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	bf94      	ite	ls
 8002e3c:	2301      	movls	r3, #1
 8002e3e:	2300      	movhi	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0e7      	b.n	800301a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a78      	ldr	r2, [pc, #480]	@ (8003030 <HAL_I2C_Init+0x280>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	0c9b      	lsrs	r3, r3, #18
 8002e54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4a6a      	ldr	r2, [pc, #424]	@ (8003024 <HAL_I2C_Init+0x274>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d802      	bhi.n	8002e84 <HAL_I2C_Init+0xd4>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	3301      	adds	r3, #1
 8002e82:	e009      	b.n	8002e98 <HAL_I2C_Init+0xe8>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	4a69      	ldr	r2, [pc, #420]	@ (8003034 <HAL_I2C_Init+0x284>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	099b      	lsrs	r3, r3, #6
 8002e96:	3301      	adds	r3, #1
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002eaa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	495c      	ldr	r1, [pc, #368]	@ (8003024 <HAL_I2C_Init+0x274>)
 8002eb4:	428b      	cmp	r3, r1
 8002eb6:	d819      	bhi.n	8002eec <HAL_I2C_Init+0x13c>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1e59      	subs	r1, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec6:	1c59      	adds	r1, r3, #1
 8002ec8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ecc:	400b      	ands	r3, r1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_I2C_Init+0x138>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1e59      	subs	r1, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee6:	e051      	b.n	8002f8c <HAL_I2C_Init+0x1dc>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	e04f      	b.n	8002f8c <HAL_I2C_Init+0x1dc>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d111      	bne.n	8002f18 <HAL_I2C_Init+0x168>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e58      	subs	r0, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	440b      	add	r3, r1
 8002f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	e012      	b.n	8002f3e <HAL_I2C_Init+0x18e>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1e58      	subs	r0, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	0099      	lsls	r1, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Init+0x196>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e022      	b.n	8002f8c <HAL_I2C_Init+0x1dc>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10e      	bne.n	8002f6c <HAL_I2C_Init+0x1bc>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1e58      	subs	r0, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6859      	ldr	r1, [r3, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	440b      	add	r3, r1
 8002f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f60:	3301      	adds	r3, #1
 8002f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f6a:	e00f      	b.n	8002f8c <HAL_I2C_Init+0x1dc>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e58      	subs	r0, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	0099      	lsls	r1, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	6809      	ldr	r1, [r1, #0]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6911      	ldr	r1, [r2, #16]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68d2      	ldr	r2, [r2, #12]
 8002fc6:	4311      	orrs	r1, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	000186a0 	.word	0x000186a0
 8003028:	001e847f 	.word	0x001e847f
 800302c:	003d08ff 	.word	0x003d08ff
 8003030:	431bde83 	.word	0x431bde83
 8003034:	10624dd3 	.word	0x10624dd3

08003038 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	461a      	mov	r2, r3
 8003044:	460b      	mov	r3, r1
 8003046:	817b      	strh	r3, [r7, #10]
 8003048:	4613      	mov	r3, r2
 800304a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800304c:	f7fe ff8a 	bl	8001f64 <HAL_GetTick>
 8003050:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b20      	cmp	r3, #32
 800305c:	f040 80e0 	bne.w	8003220 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2319      	movs	r3, #25
 8003066:	2201      	movs	r2, #1
 8003068:	4970      	ldr	r1, [pc, #448]	@ (800322c <HAL_I2C_Master_Transmit+0x1f4>)
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fc22 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003076:	2302      	movs	r3, #2
 8003078:	e0d3      	b.n	8003222 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_I2C_Master_Transmit+0x50>
 8003084:	2302      	movs	r3, #2
 8003086:	e0cc      	b.n	8003222 <HAL_I2C_Master_Transmit+0x1ea>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d007      	beq.n	80030ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2221      	movs	r2, #33	@ 0x21
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2210      	movs	r2, #16
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	893a      	ldrh	r2, [r7, #8]
 80030de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a50      	ldr	r2, [pc, #320]	@ (8003230 <HAL_I2C_Master_Transmit+0x1f8>)
 80030ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030f0:	8979      	ldrh	r1, [r7, #10]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	6a3a      	ldr	r2, [r7, #32]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fac4 	bl	8003684 <I2C_MasterRequestWrite>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e08d      	b.n	8003222 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800311c:	e066      	b.n	80031ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	6a39      	ldr	r1, [r7, #32]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fce0 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00d      	beq.n	800314a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	2b04      	cmp	r3, #4
 8003134:	d107      	bne.n	8003146 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003144:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e06b      	b.n	8003222 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	781a      	ldrb	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b04      	cmp	r3, #4
 8003186:	d11b      	bne.n	80031c0 <HAL_I2C_Master_Transmit+0x188>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	d017      	beq.n	80031c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	781a      	ldrb	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	6a39      	ldr	r1, [r7, #32]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fcd7 	bl	8003b78 <I2C_WaitOnBTFFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00d      	beq.n	80031ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d107      	bne.n	80031e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e01a      	b.n	8003222 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d194      	bne.n	800311e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	e000      	b.n	8003222 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003220:	2302      	movs	r3, #2
  }
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	00100002 	.word	0x00100002
 8003230:	ffff0000 	.word	0xffff0000

08003234 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af02      	add	r7, sp, #8
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	4608      	mov	r0, r1
 800323e:	4611      	mov	r1, r2
 8003240:	461a      	mov	r2, r3
 8003242:	4603      	mov	r3, r0
 8003244:	817b      	strh	r3, [r7, #10]
 8003246:	460b      	mov	r3, r1
 8003248:	813b      	strh	r3, [r7, #8]
 800324a:	4613      	mov	r3, r2
 800324c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800324e:	f7fe fe89 	bl	8001f64 <HAL_GetTick>
 8003252:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b20      	cmp	r3, #32
 800325e:	f040 80d9 	bne.w	8003414 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2319      	movs	r3, #25
 8003268:	2201      	movs	r2, #1
 800326a:	496d      	ldr	r1, [pc, #436]	@ (8003420 <HAL_I2C_Mem_Write+0x1ec>)
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fb21 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
 800327a:	e0cc      	b.n	8003416 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_I2C_Mem_Write+0x56>
 8003286:	2302      	movs	r3, #2
 8003288:	e0c5      	b.n	8003416 <HAL_I2C_Mem_Write+0x1e2>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d007      	beq.n	80032b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2221      	movs	r2, #33	@ 0x21
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2240      	movs	r2, #64	@ 0x40
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a3a      	ldr	r2, [r7, #32]
 80032da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a4d      	ldr	r2, [pc, #308]	@ (8003424 <HAL_I2C_Mem_Write+0x1f0>)
 80032f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032f2:	88f8      	ldrh	r0, [r7, #6]
 80032f4:	893a      	ldrh	r2, [r7, #8]
 80032f6:	8979      	ldrh	r1, [r7, #10]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	4603      	mov	r3, r0
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fa40 	bl	8003788 <I2C_RequestMemoryWrite>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d052      	beq.n	80033b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e081      	b.n	8003416 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fbe6 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00d      	beq.n	800333e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	2b04      	cmp	r3, #4
 8003328:	d107      	bne.n	800333a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003338:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e06b      	b.n	8003416 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	d11b      	bne.n	80033b4 <HAL_I2C_Mem_Write+0x180>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003380:	2b00      	cmp	r3, #0
 8003382:	d017      	beq.n	80033b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	781a      	ldrb	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1aa      	bne.n	8003312 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fbd9 	bl	8003b78 <I2C_WaitOnBTFFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d107      	bne.n	80033e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e016      	b.n	8003416 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	00100002 	.word	0x00100002
 8003424:	ffff0000 	.word	0xffff0000

08003428 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	@ 0x28
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	460b      	mov	r3, r1
 8003436:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003438:	f7fe fd94 	bl	8001f64 <HAL_GetTick>
 800343c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b20      	cmp	r3, #32
 800344c:	f040 8111 	bne.w	8003672 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2319      	movs	r3, #25
 8003456:	2201      	movs	r2, #1
 8003458:	4988      	ldr	r1, [pc, #544]	@ (800367c <HAL_I2C_IsDeviceReady+0x254>)
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fa2a 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003466:	2302      	movs	r3, #2
 8003468:	e104      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_I2C_IsDeviceReady+0x50>
 8003474:	2302      	movs	r3, #2
 8003476:	e0fd      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x24c>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d007      	beq.n	800349e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2224      	movs	r2, #36	@ 0x24
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a70      	ldr	r2, [pc, #448]	@ (8003680 <HAL_I2C_IsDeviceReady+0x258>)
 80034c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2200      	movs	r2, #0
 80034da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f9e8 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00d      	beq.n	8003506 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f8:	d103      	bne.n	8003502 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003500:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e0b6      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003506:	897b      	ldrh	r3, [r7, #10]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003514:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003516:	f7fe fd25 	bl	8001f64 <HAL_GetTick>
 800351a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b02      	cmp	r3, #2
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800354a:	e025      	b.n	8003598 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800354c:	f7fe fd0a 	bl	8001f64 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d302      	bcc.n	8003562 <HAL_I2C_IsDeviceReady+0x13a>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	22a0      	movs	r2, #160	@ 0xa0
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b02      	cmp	r3, #2
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80035a2:	d005      	beq.n	80035b0 <HAL_I2C_IsDeviceReady+0x188>
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <HAL_I2C_IsDeviceReady+0x188>
 80035aa:	7dbb      	ldrb	r3, [r7, #22]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0cd      	beq.n	800354c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d129      	bne.n	800361a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	2319      	movs	r3, #25
 80035f2:	2201      	movs	r2, #1
 80035f4:	4921      	ldr	r1, [pc, #132]	@ (800367c <HAL_I2C_IsDeviceReady+0x254>)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f95c 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e036      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	e02c      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003628:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003632:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2319      	movs	r3, #25
 800363a:	2201      	movs	r2, #1
 800363c:	490f      	ldr	r1, [pc, #60]	@ (800367c <HAL_I2C_IsDeviceReady+0x254>)
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f938 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e012      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	3301      	adds	r3, #1
 8003652:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	f4ff af32 	bcc.w	80034c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003672:	2302      	movs	r3, #2
  }
}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	00100002 	.word	0x00100002
 8003680:	ffff0000 	.word	0xffff0000

08003684 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	460b      	mov	r3, r1
 8003692:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003698:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d006      	beq.n	80036ae <I2C_MasterRequestWrite+0x2a>
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d003      	beq.n	80036ae <I2C_MasterRequestWrite+0x2a>
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036ac:	d108      	bne.n	80036c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e00b      	b.n	80036d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c4:	2b12      	cmp	r3, #18
 80036c6:	d107      	bne.n	80036d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f8e5 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036fe:	d103      	bne.n	8003708 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003706:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e035      	b.n	8003778 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003714:	d108      	bne.n	8003728 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003716:	897b      	ldrh	r3, [r7, #10]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003724:	611a      	str	r2, [r3, #16]
 8003726:	e01b      	b.n	8003760 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003728:	897b      	ldrh	r3, [r7, #10]
 800372a:	11db      	asrs	r3, r3, #7
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f003 0306 	and.w	r3, r3, #6
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f063 030f 	orn	r3, r3, #15
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	490e      	ldr	r1, [pc, #56]	@ (8003780 <I2C_MasterRequestWrite+0xfc>)
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f92e 	bl	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e010      	b.n	8003778 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003756:	897b      	ldrh	r3, [r7, #10]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4907      	ldr	r1, [pc, #28]	@ (8003784 <I2C_MasterRequestWrite+0x100>)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f91e 	bl	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	00010008 	.word	0x00010008
 8003784:	00010002 	.word	0x00010002

08003788 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	461a      	mov	r2, r3
 8003796:	4603      	mov	r3, r0
 8003798:	817b      	strh	r3, [r7, #10]
 800379a:	460b      	mov	r3, r1
 800379c:	813b      	strh	r3, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f878 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00d      	beq.n	80037e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d8:	d103      	bne.n	80037e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e05f      	b.n	80038a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037e6:	897b      	ldrh	r3, [r7, #10]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	6a3a      	ldr	r2, [r7, #32]
 80037fa:	492d      	ldr	r1, [pc, #180]	@ (80038b0 <I2C_RequestMemoryWrite+0x128>)
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f8d3 	bl	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e04c      	b.n	80038a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003824:	6a39      	ldr	r1, [r7, #32]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f95e 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00d      	beq.n	800384e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	2b04      	cmp	r3, #4
 8003838:	d107      	bne.n	800384a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003848:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e02b      	b.n	80038a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d105      	bne.n	8003860 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003854:	893b      	ldrh	r3, [r7, #8]
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	611a      	str	r2, [r3, #16]
 800385e:	e021      	b.n	80038a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003860:	893b      	ldrh	r3, [r7, #8]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	b29b      	uxth	r3, r3
 8003866:	b2da      	uxtb	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800386e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003870:	6a39      	ldr	r1, [r7, #32]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f938 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00d      	beq.n	800389a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	2b04      	cmp	r3, #4
 8003884:	d107      	bne.n	8003896 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003894:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e005      	b.n	80038a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800389a:	893b      	ldrh	r3, [r7, #8]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	00010002 	.word	0x00010002

080038b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c4:	e048      	b.n	8003958 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d044      	beq.n	8003958 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fe fb49 	bl	8001f64 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d139      	bne.n	8003958 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	0c1b      	lsrs	r3, r3, #16
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d10d      	bne.n	800390a <I2C_WaitOnFlagUntilTimeout+0x56>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	43da      	mvns	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4013      	ands	r3, r2
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	e00c      	b.n	8003924 <I2C_WaitOnFlagUntilTimeout+0x70>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	43da      	mvns	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4013      	ands	r3, r2
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	429a      	cmp	r2, r3
 8003928:	d116      	bne.n	8003958 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e023      	b.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	0c1b      	lsrs	r3, r3, #16
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d10d      	bne.n	800397e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	43da      	mvns	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4013      	ands	r3, r2
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	461a      	mov	r2, r3
 800397c:	e00c      	b.n	8003998 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	43da      	mvns	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4013      	ands	r3, r2
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf0c      	ite	eq
 8003990:	2301      	moveq	r3, #1
 8003992:	2300      	movne	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	429a      	cmp	r2, r3
 800399c:	d093      	beq.n	80038c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039b6:	e071      	b.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c6:	d123      	bne.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	f043 0204 	orr.w	r2, r3, #4
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e067      	b.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d041      	beq.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a18:	f7fe faa4 	bl	8001f64 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d302      	bcc.n	8003a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d136      	bne.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d10c      	bne.n	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4013      	ands	r3, r2
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bf14      	ite	ne
 8003a4a:	2301      	movne	r3, #1
 8003a4c:	2300      	moveq	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	e00b      	b.n	8003a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	43da      	mvns	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d016      	beq.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	f043 0220 	orr.w	r2, r3, #32
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e021      	b.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	0c1b      	lsrs	r3, r3, #16
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d10c      	bne.n	8003ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	43da      	mvns	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e00b      	b.n	8003ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4013      	ands	r3, r2
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f47f af6d 	bne.w	80039b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af4:	e034      	b.n	8003b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f886 	bl	8003c08 <I2C_IsAcknowledgeFailed>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e034      	b.n	8003b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d028      	beq.n	8003b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fe fa29 	bl	8001f64 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d11d      	bne.n	8003b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2e:	2b80      	cmp	r3, #128	@ 0x80
 8003b30:	d016      	beq.n	8003b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e007      	b.n	8003b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6a:	2b80      	cmp	r3, #128	@ 0x80
 8003b6c:	d1c3      	bne.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b84:	e034      	b.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f83e 	bl	8003c08 <I2C_IsAcknowledgeFailed>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e034      	b.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d028      	beq.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9e:	f7fe f9e1 	bl	8001f64 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d11d      	bne.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d016      	beq.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e007      	b.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d1c3      	bne.n	8003b86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1e:	d11b      	bne.n	8003c58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c44:	f043 0204 	orr.w	r2, r3, #4
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e272      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8087 	beq.w	8003d92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c84:	4b92      	ldr	r3, [pc, #584]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d00c      	beq.n	8003caa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c90:	4b8f      	ldr	r3, [pc, #572]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d112      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x5e>
 8003c9c:	4b8c      	ldr	r3, [pc, #560]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca8:	d10b      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003caa:	4b89      	ldr	r3, [pc, #548]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d06c      	beq.n	8003d90 <HAL_RCC_OscConfig+0x12c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d168      	bne.n	8003d90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e24c      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cca:	d106      	bne.n	8003cda <HAL_RCC_OscConfig+0x76>
 8003ccc:	4b80      	ldr	r3, [pc, #512]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a7f      	ldr	r2, [pc, #508]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	e02e      	b.n	8003d38 <HAL_RCC_OscConfig+0xd4>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x98>
 8003ce2:	4b7b      	ldr	r3, [pc, #492]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a7a      	ldr	r2, [pc, #488]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b78      	ldr	r3, [pc, #480]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a77      	ldr	r2, [pc, #476]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e01d      	b.n	8003d38 <HAL_RCC_OscConfig+0xd4>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0xbc>
 8003d06:	4b72      	ldr	r3, [pc, #456]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a71      	ldr	r2, [pc, #452]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4b6f      	ldr	r3, [pc, #444]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6e      	ldr	r2, [pc, #440]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e00b      	b.n	8003d38 <HAL_RCC_OscConfig+0xd4>
 8003d20:	4b6b      	ldr	r3, [pc, #428]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a6a      	ldr	r2, [pc, #424]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	4b68      	ldr	r3, [pc, #416]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a67      	ldr	r2, [pc, #412]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d013      	beq.n	8003d68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fe f910 	bl	8001f64 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d48:	f7fe f90c 	bl	8001f64 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b64      	cmp	r3, #100	@ 0x64
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e200      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0xe4>
 8003d66:	e014      	b.n	8003d92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fe f8fc 	bl	8001f64 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fe f8f8 	bl	8001f64 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	@ 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e1ec      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d82:	4b53      	ldr	r3, [pc, #332]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x10c>
 8003d8e:	e000      	b.n	8003d92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d063      	beq.n	8003e66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003daa:	4b49      	ldr	r3, [pc, #292]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d11c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x18c>
 8003db6:	4b46      	ldr	r3, [pc, #280]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d116      	bne.n	8003df0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc2:	4b43      	ldr	r3, [pc, #268]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_RCC_OscConfig+0x176>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d001      	beq.n	8003dda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e1c0      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dda:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4939      	ldr	r1, [pc, #228]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	e03a      	b.n	8003e66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d020      	beq.n	8003e3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df8:	4b36      	ldr	r3, [pc, #216]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfe:	f7fe f8b1 	bl	8001f64 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e06:	f7fe f8ad 	bl	8001f64 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e1a1      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e18:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e24:	4b2a      	ldr	r3, [pc, #168]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4927      	ldr	r1, [pc, #156]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	600b      	str	r3, [r1, #0]
 8003e38:	e015      	b.n	8003e66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e3a:	4b26      	ldr	r3, [pc, #152]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fe f890 	bl	8001f64 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e48:	f7fe f88c 	bl	8001f64 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e180      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d03a      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d019      	beq.n	8003eae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e7a:	4b17      	ldr	r3, [pc, #92]	@ (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e80:	f7fe f870 	bl	8001f64 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e88:	f7fe f86c 	bl	8001f64 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e160      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	f000 face 	bl	8004448 <RCC_Delay>
 8003eac:	e01c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eae:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb4:	f7fe f856 	bl	8001f64 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eba:	e00f      	b.n	8003edc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ebc:	f7fe f852 	bl	8001f64 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d908      	bls.n	8003edc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e146      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	42420000 	.word	0x42420000
 8003ed8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003edc:	4b92      	ldr	r3, [pc, #584]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e9      	bne.n	8003ebc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80a6 	beq.w	8004042 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efa:	4b8b      	ldr	r3, [pc, #556]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10d      	bne.n	8003f22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f06:	4b88      	ldr	r3, [pc, #544]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4a87      	ldr	r2, [pc, #540]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f10:	61d3      	str	r3, [r2, #28]
 8003f12:	4b85      	ldr	r3, [pc, #532]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f22:	4b82      	ldr	r3, [pc, #520]	@ (800412c <HAL_RCC_OscConfig+0x4c8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d118      	bne.n	8003f60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f2e:	4b7f      	ldr	r3, [pc, #508]	@ (800412c <HAL_RCC_OscConfig+0x4c8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a7e      	ldr	r2, [pc, #504]	@ (800412c <HAL_RCC_OscConfig+0x4c8>)
 8003f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3a:	f7fe f813 	bl	8001f64 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f42:	f7fe f80f 	bl	8001f64 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b64      	cmp	r3, #100	@ 0x64
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e103      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f54:	4b75      	ldr	r3, [pc, #468]	@ (800412c <HAL_RCC_OscConfig+0x4c8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d106      	bne.n	8003f76 <HAL_RCC_OscConfig+0x312>
 8003f68:	4b6f      	ldr	r3, [pc, #444]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6213      	str	r3, [r2, #32]
 8003f74:	e02d      	b.n	8003fd2 <HAL_RCC_OscConfig+0x36e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x334>
 8003f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	4a69      	ldr	r2, [pc, #420]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	6213      	str	r3, [r2, #32]
 8003f8a:	4b67      	ldr	r3, [pc, #412]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	4a66      	ldr	r2, [pc, #408]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	f023 0304 	bic.w	r3, r3, #4
 8003f94:	6213      	str	r3, [r2, #32]
 8003f96:	e01c      	b.n	8003fd2 <HAL_RCC_OscConfig+0x36e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b05      	cmp	r3, #5
 8003f9e:	d10c      	bne.n	8003fba <HAL_RCC_OscConfig+0x356>
 8003fa0:	4b61      	ldr	r3, [pc, #388]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	4a60      	ldr	r2, [pc, #384]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	f043 0304 	orr.w	r3, r3, #4
 8003faa:	6213      	str	r3, [r2, #32]
 8003fac:	4b5e      	ldr	r3, [pc, #376]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	4a5d      	ldr	r2, [pc, #372]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6213      	str	r3, [r2, #32]
 8003fb8:	e00b      	b.n	8003fd2 <HAL_RCC_OscConfig+0x36e>
 8003fba:	4b5b      	ldr	r3, [pc, #364]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	4a5a      	ldr	r2, [pc, #360]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	6213      	str	r3, [r2, #32]
 8003fc6:	4b58      	ldr	r3, [pc, #352]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	4a57      	ldr	r2, [pc, #348]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fcc:	f023 0304 	bic.w	r3, r3, #4
 8003fd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d015      	beq.n	8004006 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fda:	f7fd ffc3 	bl	8001f64 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fd ffbf 	bl	8001f64 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e0b1      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff8:	4b4b      	ldr	r3, [pc, #300]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ee      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x37e>
 8004004:	e014      	b.n	8004030 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004006:	f7fd ffad 	bl	8001f64 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400c:	e00a      	b.n	8004024 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fd ffa9 	bl	8001f64 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e09b      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004024:	4b40      	ldr	r3, [pc, #256]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1ee      	bne.n	800400e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d105      	bne.n	8004042 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004036:	4b3c      	ldr	r3, [pc, #240]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	4a3b      	ldr	r2, [pc, #236]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 800403c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004040:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8087 	beq.w	800415a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800404c:	4b36      	ldr	r3, [pc, #216]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 030c 	and.w	r3, r3, #12
 8004054:	2b08      	cmp	r3, #8
 8004056:	d061      	beq.n	800411c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d146      	bne.n	80040ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004060:	4b33      	ldr	r3, [pc, #204]	@ (8004130 <HAL_RCC_OscConfig+0x4cc>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004066:	f7fd ff7d 	bl	8001f64 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406e:	f7fd ff79 	bl	8001f64 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e06d      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004080:	4b29      	ldr	r3, [pc, #164]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004094:	d108      	bne.n	80040a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004096:	4b24      	ldr	r3, [pc, #144]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	4921      	ldr	r1, [pc, #132]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a19      	ldr	r1, [r3, #32]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	430b      	orrs	r3, r1
 80040ba:	491b      	ldr	r1, [pc, #108]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004130 <HAL_RCC_OscConfig+0x4cc>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7fd ff4d 	bl	8001f64 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fd ff49 	bl	8001f64 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e03d      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040e0:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x46a>
 80040ec:	e035      	b.n	800415a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <HAL_RCC_OscConfig+0x4cc>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fd ff36 	bl	8001f64 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fd ff32 	bl	8001f64 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e026      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800410e:	4b06      	ldr	r3, [pc, #24]	@ (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x498>
 800411a:	e01e      	b.n	800415a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d107      	bne.n	8004134 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e019      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
 8004128:	40021000 	.word	0x40021000
 800412c:	40007000 	.word	0x40007000
 8004130:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004134:	4b0b      	ldr	r3, [pc, #44]	@ (8004164 <HAL_RCC_OscConfig+0x500>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	429a      	cmp	r2, r3
 8004146:	d106      	bne.n	8004156 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d001      	beq.n	800415a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40021000 	.word	0x40021000

08004168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0d0      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800417c:	4b6a      	ldr	r3, [pc, #424]	@ (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d910      	bls.n	80041ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b67      	ldr	r3, [pc, #412]	@ (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 0207 	bic.w	r2, r3, #7
 8004192:	4965      	ldr	r1, [pc, #404]	@ (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b63      	ldr	r3, [pc, #396]	@ (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0b8      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d020      	beq.n	80041fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c4:	4b59      	ldr	r3, [pc, #356]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4a58      	ldr	r2, [pc, #352]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80041ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80041ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041dc:	4b53      	ldr	r3, [pc, #332]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4a52      	ldr	r2, [pc, #328]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80041e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80041e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e8:	4b50      	ldr	r3, [pc, #320]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	494d      	ldr	r1, [pc, #308]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d040      	beq.n	8004288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d107      	bne.n	800421e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420e:	4b47      	ldr	r3, [pc, #284]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d115      	bne.n	8004246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e07f      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d107      	bne.n	8004236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004226:	4b41      	ldr	r3, [pc, #260]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e073      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004236:	4b3d      	ldr	r3, [pc, #244]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e06b      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004246:	4b39      	ldr	r3, [pc, #228]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f023 0203 	bic.w	r2, r3, #3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4936      	ldr	r1, [pc, #216]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004258:	f7fd fe84 	bl	8001f64 <HAL_GetTick>
 800425c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	e00a      	b.n	8004276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004260:	f7fd fe80 	bl	8001f64 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e053      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004276:	4b2d      	ldr	r3, [pc, #180]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 020c 	and.w	r2, r3, #12
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	429a      	cmp	r2, r3
 8004286:	d1eb      	bne.n	8004260 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004288:	4b27      	ldr	r3, [pc, #156]	@ (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d210      	bcs.n	80042b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4b24      	ldr	r3, [pc, #144]	@ (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 0207 	bic.w	r2, r3, #7
 800429e:	4922      	ldr	r1, [pc, #136]	@ (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b20      	ldr	r3, [pc, #128]	@ (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e032      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c4:	4b19      	ldr	r3, [pc, #100]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4916      	ldr	r1, [pc, #88]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042e2:	4b12      	ldr	r3, [pc, #72]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	490e      	ldr	r1, [pc, #56]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042f6:	f000 f821 	bl	800433c <HAL_RCC_GetSysClockFreq>
 80042fa:	4602      	mov	r2, r0
 80042fc:	4b0b      	ldr	r3, [pc, #44]	@ (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	490a      	ldr	r1, [pc, #40]	@ (8004330 <HAL_RCC_ClockConfig+0x1c8>)
 8004308:	5ccb      	ldrb	r3, [r1, r3]
 800430a:	fa22 f303 	lsr.w	r3, r2, r3
 800430e:	4a09      	ldr	r2, [pc, #36]	@ (8004334 <HAL_RCC_ClockConfig+0x1cc>)
 8004310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004312:	4b09      	ldr	r3, [pc, #36]	@ (8004338 <HAL_RCC_ClockConfig+0x1d0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fd fde2 	bl	8001ee0 <HAL_InitTick>

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40022000 	.word	0x40022000
 800432c:	40021000 	.word	0x40021000
 8004330:	080073c0 	.word	0x080073c0
 8004334:	20000000 	.word	0x20000000
 8004338:	20000004 	.word	0x20000004

0800433c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004356:	4b1e      	ldr	r3, [pc, #120]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b04      	cmp	r3, #4
 8004364:	d002      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x30>
 8004366:	2b08      	cmp	r3, #8
 8004368:	d003      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x36>
 800436a:	e027      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800436c:	4b19      	ldr	r3, [pc, #100]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800436e:	613b      	str	r3, [r7, #16]
      break;
 8004370:	e027      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	0c9b      	lsrs	r3, r3, #18
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	4a17      	ldr	r2, [pc, #92]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800437c:	5cd3      	ldrb	r3, [r2, r3]
 800437e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d010      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800438a:	4b11      	ldr	r3, [pc, #68]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	0c5b      	lsrs	r3, r3, #17
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	4a11      	ldr	r2, [pc, #68]	@ (80043dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004396:	5cd3      	ldrb	r3, [r2, r3]
 8004398:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a0d      	ldr	r2, [pc, #52]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800439e:	fb03 f202 	mul.w	r2, r3, r2
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e004      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a0c      	ldr	r2, [pc, #48]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043b0:	fb02 f303 	mul.w	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	613b      	str	r3, [r7, #16]
      break;
 80043ba:	e002      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043bc:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80043be:	613b      	str	r3, [r7, #16]
      break;
 80043c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c2:	693b      	ldr	r3, [r7, #16]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000
 80043d4:	007a1200 	.word	0x007a1200
 80043d8:	080073d8 	.word	0x080073d8
 80043dc:	080073e8 	.word	0x080073e8
 80043e0:	003d0900 	.word	0x003d0900

080043e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e8:	4b02      	ldr	r3, [pc, #8]	@ (80043f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	20000000 	.word	0x20000000

080043f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043fc:	f7ff fff2 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b05      	ldr	r3, [pc, #20]	@ (8004418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	4903      	ldr	r1, [pc, #12]	@ (800441c <HAL_RCC_GetPCLK1Freq+0x24>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	080073d0 	.word	0x080073d0

08004420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004424:	f7ff ffde 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	0adb      	lsrs	r3, r3, #11
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4903      	ldr	r1, [pc, #12]	@ (8004444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004436:	5ccb      	ldrb	r3, [r1, r3]
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40021000 	.word	0x40021000
 8004444:	080073d0 	.word	0x080073d0

08004448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004450:	4b0a      	ldr	r3, [pc, #40]	@ (800447c <RCC_Delay+0x34>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a0a      	ldr	r2, [pc, #40]	@ (8004480 <RCC_Delay+0x38>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	0a5b      	lsrs	r3, r3, #9
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004464:	bf00      	nop
  }
  while (Delay --);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1e5a      	subs	r2, r3, #1
 800446a:	60fa      	str	r2, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f9      	bne.n	8004464 <RCC_Delay+0x1c>
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr
 800447c:	20000000 	.word	0x20000000
 8004480:	10624dd3 	.word	0x10624dd3

08004484 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d07d      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044a0:	2300      	movs	r3, #0
 80044a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a4:	4b4f      	ldr	r3, [pc, #316]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10d      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b0:	4b4c      	ldr	r3, [pc, #304]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	4a4b      	ldr	r2, [pc, #300]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	61d3      	str	r3, [r2, #28]
 80044bc:	4b49      	ldr	r3, [pc, #292]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c8:	2301      	movs	r3, #1
 80044ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044cc:	4b46      	ldr	r3, [pc, #280]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d118      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d8:	4b43      	ldr	r3, [pc, #268]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a42      	ldr	r2, [pc, #264]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e4:	f7fd fd3e 	bl	8001f64 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ea:	e008      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ec:	f7fd fd3a 	bl	8001f64 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	@ 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e06d      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fe:	4b3a      	ldr	r3, [pc, #232]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800450a:	4b36      	ldr	r3, [pc, #216]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004512:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d02e      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	429a      	cmp	r2, r3
 8004526:	d027      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004528:	4b2e      	ldr	r3, [pc, #184]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004530:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004532:	4b2e      	ldr	r3, [pc, #184]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004538:	4b2c      	ldr	r3, [pc, #176]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800453e:	4a29      	ldr	r2, [pc, #164]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d014      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454e:	f7fd fd09 	bl	8001f64 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004554:	e00a      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004556:	f7fd fd05 	bl	8001f64 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004564:	4293      	cmp	r3, r2
 8004566:	d901      	bls.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e036      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456c:	4b1d      	ldr	r3, [pc, #116]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ee      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004578:	4b1a      	ldr	r3, [pc, #104]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4917      	ldr	r1, [pc, #92]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	4313      	orrs	r3, r2
 8004588:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004590:	4b14      	ldr	r3, [pc, #80]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	4a13      	ldr	r2, [pc, #76]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045a8:	4b0e      	ldr	r3, [pc, #56]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	490b      	ldr	r1, [pc, #44]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045c6:	4b07      	ldr	r3, [pc, #28]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	4904      	ldr	r1, [pc, #16]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40007000 	.word	0x40007000
 80045ec:	42420440 	.word	0x42420440

080045f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	2300      	movs	r3, #0
 8004602:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	2300      	movs	r3, #0
 800460a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b10      	cmp	r3, #16
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b10      	cmp	r3, #16
 8004616:	f200 808a 	bhi.w	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d045      	beq.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d075      	beq.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004626:	e082      	b.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004628:	4b46      	ldr	r3, [pc, #280]	@ (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800462e:	4b45      	ldr	r3, [pc, #276]	@ (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d07b      	beq.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	0c9b      	lsrs	r3, r3, #18
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	4a41      	ldr	r2, [pc, #260]	@ (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004644:	5cd3      	ldrb	r3, [r2, r3]
 8004646:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d015      	beq.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004652:	4b3c      	ldr	r3, [pc, #240]	@ (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	0c5b      	lsrs	r3, r3, #17
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	4a3b      	ldr	r2, [pc, #236]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800465e:	5cd3      	ldrb	r3, [r2, r3]
 8004660:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00d      	beq.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800466c:	4a38      	ldr	r2, [pc, #224]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	fbb2 f2f3 	udiv	r2, r2, r3
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	e004      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4a34      	ldr	r2, [pc, #208]	@ (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004688:	4b2e      	ldr	r3, [pc, #184]	@ (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004690:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004694:	d102      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	61bb      	str	r3, [r7, #24]
      break;
 800469a:	e04a      	b.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	61bb      	str	r3, [r7, #24]
      break;
 80046aa:	e042      	b.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80046ac:	4b25      	ldr	r3, [pc, #148]	@ (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046bc:	d108      	bne.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80046c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	e01f      	b.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046da:	d109      	bne.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80046dc:	4b19      	ldr	r3, [pc, #100]	@ (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80046e8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e00f      	b.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046fa:	d11c      	bne.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80046fc:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d016      	beq.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004708:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800470c:	61bb      	str	r3, [r7, #24]
      break;
 800470e:	e012      	b.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004710:	e011      	b.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004712:	f7ff fe85 	bl	8004420 <HAL_RCC_GetPCLK2Freq>
 8004716:	4602      	mov	r2, r0
 8004718:	4b0a      	ldr	r3, [pc, #40]	@ (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	0b9b      	lsrs	r3, r3, #14
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	3301      	adds	r3, #1
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	61bb      	str	r3, [r7, #24]
      break;
 800472c:	e004      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004736:	bf00      	nop
    }
  }
  return (frequency);
 8004738:	69bb      	ldr	r3, [r7, #24]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40021000 	.word	0x40021000
 8004748:	080073ec 	.word	0x080073ec
 800474c:	080073fc 	.word	0x080073fc
 8004750:	007a1200 	.word	0x007a1200
 8004754:	003d0900 	.word	0x003d0900
 8004758:	aaaaaaab 	.word	0xaaaaaaab

0800475c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e076      	b.n	800485c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	2b00      	cmp	r3, #0
 8004774:	d108      	bne.n	8004788 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800477e:	d009      	beq.n	8004794 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	61da      	str	r2, [r3, #28]
 8004786:	e005      	b.n	8004794 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fc ffd6 	bl	8001760 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004818:	ea42 0103 	orr.w	r1, r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	0c1a      	lsrs	r2, r3, #16
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f002 0204 	and.w	r2, r2, #4
 800483a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69da      	ldr	r2, [r3, #28]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800484a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <__cvt>:
 8004864:	2b00      	cmp	r3, #0
 8004866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800486a:	461d      	mov	r5, r3
 800486c:	bfbb      	ittet	lt
 800486e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004872:	461d      	movlt	r5, r3
 8004874:	2300      	movge	r3, #0
 8004876:	232d      	movlt	r3, #45	@ 0x2d
 8004878:	b088      	sub	sp, #32
 800487a:	4614      	mov	r4, r2
 800487c:	bfb8      	it	lt
 800487e:	4614      	movlt	r4, r2
 8004880:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004882:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004884:	7013      	strb	r3, [r2, #0]
 8004886:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004888:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800488c:	f023 0820 	bic.w	r8, r3, #32
 8004890:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004894:	d005      	beq.n	80048a2 <__cvt+0x3e>
 8004896:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800489a:	d100      	bne.n	800489e <__cvt+0x3a>
 800489c:	3601      	adds	r6, #1
 800489e:	2302      	movs	r3, #2
 80048a0:	e000      	b.n	80048a4 <__cvt+0x40>
 80048a2:	2303      	movs	r3, #3
 80048a4:	aa07      	add	r2, sp, #28
 80048a6:	9204      	str	r2, [sp, #16]
 80048a8:	aa06      	add	r2, sp, #24
 80048aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048ae:	e9cd 3600 	strd	r3, r6, [sp]
 80048b2:	4622      	mov	r2, r4
 80048b4:	462b      	mov	r3, r5
 80048b6:	f000 ff5f 	bl	8005778 <_dtoa_r>
 80048ba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80048be:	4607      	mov	r7, r0
 80048c0:	d119      	bne.n	80048f6 <__cvt+0x92>
 80048c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80048c4:	07db      	lsls	r3, r3, #31
 80048c6:	d50e      	bpl.n	80048e6 <__cvt+0x82>
 80048c8:	eb00 0906 	add.w	r9, r0, r6
 80048cc:	2200      	movs	r2, #0
 80048ce:	2300      	movs	r3, #0
 80048d0:	4620      	mov	r0, r4
 80048d2:	4629      	mov	r1, r5
 80048d4:	f7fc f868 	bl	80009a8 <__aeabi_dcmpeq>
 80048d8:	b108      	cbz	r0, 80048de <__cvt+0x7a>
 80048da:	f8cd 901c 	str.w	r9, [sp, #28]
 80048de:	2230      	movs	r2, #48	@ 0x30
 80048e0:	9b07      	ldr	r3, [sp, #28]
 80048e2:	454b      	cmp	r3, r9
 80048e4:	d31e      	bcc.n	8004924 <__cvt+0xc0>
 80048e6:	4638      	mov	r0, r7
 80048e8:	9b07      	ldr	r3, [sp, #28]
 80048ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80048ec:	1bdb      	subs	r3, r3, r7
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	b008      	add	sp, #32
 80048f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048fa:	eb00 0906 	add.w	r9, r0, r6
 80048fe:	d1e5      	bne.n	80048cc <__cvt+0x68>
 8004900:	7803      	ldrb	r3, [r0, #0]
 8004902:	2b30      	cmp	r3, #48	@ 0x30
 8004904:	d10a      	bne.n	800491c <__cvt+0xb8>
 8004906:	2200      	movs	r2, #0
 8004908:	2300      	movs	r3, #0
 800490a:	4620      	mov	r0, r4
 800490c:	4629      	mov	r1, r5
 800490e:	f7fc f84b 	bl	80009a8 <__aeabi_dcmpeq>
 8004912:	b918      	cbnz	r0, 800491c <__cvt+0xb8>
 8004914:	f1c6 0601 	rsb	r6, r6, #1
 8004918:	f8ca 6000 	str.w	r6, [sl]
 800491c:	f8da 3000 	ldr.w	r3, [sl]
 8004920:	4499      	add	r9, r3
 8004922:	e7d3      	b.n	80048cc <__cvt+0x68>
 8004924:	1c59      	adds	r1, r3, #1
 8004926:	9107      	str	r1, [sp, #28]
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	e7d9      	b.n	80048e0 <__cvt+0x7c>

0800492c <__exponent>:
 800492c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800492e:	2900      	cmp	r1, #0
 8004930:	bfb6      	itet	lt
 8004932:	232d      	movlt	r3, #45	@ 0x2d
 8004934:	232b      	movge	r3, #43	@ 0x2b
 8004936:	4249      	neglt	r1, r1
 8004938:	2909      	cmp	r1, #9
 800493a:	7002      	strb	r2, [r0, #0]
 800493c:	7043      	strb	r3, [r0, #1]
 800493e:	dd29      	ble.n	8004994 <__exponent+0x68>
 8004940:	f10d 0307 	add.w	r3, sp, #7
 8004944:	461d      	mov	r5, r3
 8004946:	270a      	movs	r7, #10
 8004948:	fbb1 f6f7 	udiv	r6, r1, r7
 800494c:	461a      	mov	r2, r3
 800494e:	fb07 1416 	mls	r4, r7, r6, r1
 8004952:	3430      	adds	r4, #48	@ 0x30
 8004954:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004958:	460c      	mov	r4, r1
 800495a:	2c63      	cmp	r4, #99	@ 0x63
 800495c:	4631      	mov	r1, r6
 800495e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004962:	dcf1      	bgt.n	8004948 <__exponent+0x1c>
 8004964:	3130      	adds	r1, #48	@ 0x30
 8004966:	1e94      	subs	r4, r2, #2
 8004968:	f803 1c01 	strb.w	r1, [r3, #-1]
 800496c:	4623      	mov	r3, r4
 800496e:	1c41      	adds	r1, r0, #1
 8004970:	42ab      	cmp	r3, r5
 8004972:	d30a      	bcc.n	800498a <__exponent+0x5e>
 8004974:	f10d 0309 	add.w	r3, sp, #9
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	42ac      	cmp	r4, r5
 800497c:	bf88      	it	hi
 800497e:	2300      	movhi	r3, #0
 8004980:	3302      	adds	r3, #2
 8004982:	4403      	add	r3, r0
 8004984:	1a18      	subs	r0, r3, r0
 8004986:	b003      	add	sp, #12
 8004988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800498a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800498e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004992:	e7ed      	b.n	8004970 <__exponent+0x44>
 8004994:	2330      	movs	r3, #48	@ 0x30
 8004996:	3130      	adds	r1, #48	@ 0x30
 8004998:	7083      	strb	r3, [r0, #2]
 800499a:	70c1      	strb	r1, [r0, #3]
 800499c:	1d03      	adds	r3, r0, #4
 800499e:	e7f1      	b.n	8004984 <__exponent+0x58>

080049a0 <_printf_float>:
 80049a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	b091      	sub	sp, #68	@ 0x44
 80049a6:	460c      	mov	r4, r1
 80049a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80049ac:	4616      	mov	r6, r2
 80049ae:	461f      	mov	r7, r3
 80049b0:	4605      	mov	r5, r0
 80049b2:	f000 fdc5 	bl	8005540 <_localeconv_r>
 80049b6:	6803      	ldr	r3, [r0, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	9308      	str	r3, [sp, #32]
 80049bc:	f7fb fbc8 	bl	8000150 <strlen>
 80049c0:	2300      	movs	r3, #0
 80049c2:	930e      	str	r3, [sp, #56]	@ 0x38
 80049c4:	f8d8 3000 	ldr.w	r3, [r8]
 80049c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80049ca:	3307      	adds	r3, #7
 80049cc:	f023 0307 	bic.w	r3, r3, #7
 80049d0:	f103 0208 	add.w	r2, r3, #8
 80049d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80049d8:	f8d4 b000 	ldr.w	fp, [r4]
 80049dc:	f8c8 2000 	str.w	r2, [r8]
 80049e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80049e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049ea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80049ee:	f04f 32ff 	mov.w	r2, #4294967295
 80049f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80049f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80049fa:	4b9c      	ldr	r3, [pc, #624]	@ (8004c6c <_printf_float+0x2cc>)
 80049fc:	f7fc f806 	bl	8000a0c <__aeabi_dcmpun>
 8004a00:	bb70      	cbnz	r0, 8004a60 <_printf_float+0xc0>
 8004a02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	4b98      	ldr	r3, [pc, #608]	@ (8004c6c <_printf_float+0x2cc>)
 8004a0c:	f7fb ffe0 	bl	80009d0 <__aeabi_dcmple>
 8004a10:	bb30      	cbnz	r0, 8004a60 <_printf_float+0xc0>
 8004a12:	2200      	movs	r2, #0
 8004a14:	2300      	movs	r3, #0
 8004a16:	4640      	mov	r0, r8
 8004a18:	4649      	mov	r1, r9
 8004a1a:	f7fb ffcf 	bl	80009bc <__aeabi_dcmplt>
 8004a1e:	b110      	cbz	r0, 8004a26 <_printf_float+0x86>
 8004a20:	232d      	movs	r3, #45	@ 0x2d
 8004a22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a26:	4a92      	ldr	r2, [pc, #584]	@ (8004c70 <_printf_float+0x2d0>)
 8004a28:	4b92      	ldr	r3, [pc, #584]	@ (8004c74 <_printf_float+0x2d4>)
 8004a2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a2e:	bf94      	ite	ls
 8004a30:	4690      	movls	r8, r2
 8004a32:	4698      	movhi	r8, r3
 8004a34:	2303      	movs	r3, #3
 8004a36:	f04f 0900 	mov.w	r9, #0
 8004a3a:	6123      	str	r3, [r4, #16]
 8004a3c:	f02b 0304 	bic.w	r3, fp, #4
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	4633      	mov	r3, r6
 8004a44:	4621      	mov	r1, r4
 8004a46:	4628      	mov	r0, r5
 8004a48:	9700      	str	r7, [sp, #0]
 8004a4a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004a4c:	f000 f9d4 	bl	8004df8 <_printf_common>
 8004a50:	3001      	adds	r0, #1
 8004a52:	f040 8090 	bne.w	8004b76 <_printf_float+0x1d6>
 8004a56:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5a:	b011      	add	sp, #68	@ 0x44
 8004a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a60:	4642      	mov	r2, r8
 8004a62:	464b      	mov	r3, r9
 8004a64:	4640      	mov	r0, r8
 8004a66:	4649      	mov	r1, r9
 8004a68:	f7fb ffd0 	bl	8000a0c <__aeabi_dcmpun>
 8004a6c:	b148      	cbz	r0, 8004a82 <_printf_float+0xe2>
 8004a6e:	464b      	mov	r3, r9
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	bfb8      	it	lt
 8004a74:	232d      	movlt	r3, #45	@ 0x2d
 8004a76:	4a80      	ldr	r2, [pc, #512]	@ (8004c78 <_printf_float+0x2d8>)
 8004a78:	bfb8      	it	lt
 8004a7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c7c <_printf_float+0x2dc>)
 8004a80:	e7d3      	b.n	8004a2a <_printf_float+0x8a>
 8004a82:	6863      	ldr	r3, [r4, #4]
 8004a84:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	d13f      	bne.n	8004b0c <_printf_float+0x16c>
 8004a8c:	2306      	movs	r3, #6
 8004a8e:	6063      	str	r3, [r4, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004a96:	6023      	str	r3, [r4, #0]
 8004a98:	9206      	str	r2, [sp, #24]
 8004a9a:	aa0e      	add	r2, sp, #56	@ 0x38
 8004a9c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004aa0:	aa0d      	add	r2, sp, #52	@ 0x34
 8004aa2:	9203      	str	r2, [sp, #12]
 8004aa4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004aa8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004aac:	6863      	ldr	r3, [r4, #4]
 8004aae:	4642      	mov	r2, r8
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	464b      	mov	r3, r9
 8004ab6:	910a      	str	r1, [sp, #40]	@ 0x28
 8004ab8:	f7ff fed4 	bl	8004864 <__cvt>
 8004abc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004abe:	4680      	mov	r8, r0
 8004ac0:	2947      	cmp	r1, #71	@ 0x47
 8004ac2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004ac4:	d128      	bne.n	8004b18 <_printf_float+0x178>
 8004ac6:	1cc8      	adds	r0, r1, #3
 8004ac8:	db02      	blt.n	8004ad0 <_printf_float+0x130>
 8004aca:	6863      	ldr	r3, [r4, #4]
 8004acc:	4299      	cmp	r1, r3
 8004ace:	dd40      	ble.n	8004b52 <_printf_float+0x1b2>
 8004ad0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ad4:	fa5f fa8a 	uxtb.w	sl, sl
 8004ad8:	4652      	mov	r2, sl
 8004ada:	3901      	subs	r1, #1
 8004adc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ae0:	910d      	str	r1, [sp, #52]	@ 0x34
 8004ae2:	f7ff ff23 	bl	800492c <__exponent>
 8004ae6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ae8:	4681      	mov	r9, r0
 8004aea:	1813      	adds	r3, r2, r0
 8004aec:	2a01      	cmp	r2, #1
 8004aee:	6123      	str	r3, [r4, #16]
 8004af0:	dc02      	bgt.n	8004af8 <_printf_float+0x158>
 8004af2:	6822      	ldr	r2, [r4, #0]
 8004af4:	07d2      	lsls	r2, r2, #31
 8004af6:	d501      	bpl.n	8004afc <_printf_float+0x15c>
 8004af8:	3301      	adds	r3, #1
 8004afa:	6123      	str	r3, [r4, #16]
 8004afc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d09e      	beq.n	8004a42 <_printf_float+0xa2>
 8004b04:	232d      	movs	r3, #45	@ 0x2d
 8004b06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b0a:	e79a      	b.n	8004a42 <_printf_float+0xa2>
 8004b0c:	2947      	cmp	r1, #71	@ 0x47
 8004b0e:	d1bf      	bne.n	8004a90 <_printf_float+0xf0>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1bd      	bne.n	8004a90 <_printf_float+0xf0>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e7ba      	b.n	8004a8e <_printf_float+0xee>
 8004b18:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b1c:	d9dc      	bls.n	8004ad8 <_printf_float+0x138>
 8004b1e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b22:	d118      	bne.n	8004b56 <_printf_float+0x1b6>
 8004b24:	2900      	cmp	r1, #0
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	dd0b      	ble.n	8004b42 <_printf_float+0x1a2>
 8004b2a:	6121      	str	r1, [r4, #16]
 8004b2c:	b913      	cbnz	r3, 8004b34 <_printf_float+0x194>
 8004b2e:	6822      	ldr	r2, [r4, #0]
 8004b30:	07d0      	lsls	r0, r2, #31
 8004b32:	d502      	bpl.n	8004b3a <_printf_float+0x19a>
 8004b34:	3301      	adds	r3, #1
 8004b36:	440b      	add	r3, r1
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	f04f 0900 	mov.w	r9, #0
 8004b3e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b40:	e7dc      	b.n	8004afc <_printf_float+0x15c>
 8004b42:	b913      	cbnz	r3, 8004b4a <_printf_float+0x1aa>
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	07d2      	lsls	r2, r2, #31
 8004b48:	d501      	bpl.n	8004b4e <_printf_float+0x1ae>
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	e7f4      	b.n	8004b38 <_printf_float+0x198>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e7f2      	b.n	8004b38 <_printf_float+0x198>
 8004b52:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b58:	4299      	cmp	r1, r3
 8004b5a:	db05      	blt.n	8004b68 <_printf_float+0x1c8>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	6121      	str	r1, [r4, #16]
 8004b60:	07d8      	lsls	r0, r3, #31
 8004b62:	d5ea      	bpl.n	8004b3a <_printf_float+0x19a>
 8004b64:	1c4b      	adds	r3, r1, #1
 8004b66:	e7e7      	b.n	8004b38 <_printf_float+0x198>
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	bfcc      	ite	gt
 8004b6c:	2201      	movgt	r2, #1
 8004b6e:	f1c1 0202 	rsble	r2, r1, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	e7e0      	b.n	8004b38 <_printf_float+0x198>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	055a      	lsls	r2, r3, #21
 8004b7a:	d407      	bmi.n	8004b8c <_printf_float+0x1ec>
 8004b7c:	6923      	ldr	r3, [r4, #16]
 8004b7e:	4642      	mov	r2, r8
 8004b80:	4631      	mov	r1, r6
 8004b82:	4628      	mov	r0, r5
 8004b84:	47b8      	blx	r7
 8004b86:	3001      	adds	r0, #1
 8004b88:	d12b      	bne.n	8004be2 <_printf_float+0x242>
 8004b8a:	e764      	b.n	8004a56 <_printf_float+0xb6>
 8004b8c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b90:	f240 80dc 	bls.w	8004d4c <_printf_float+0x3ac>
 8004b94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f7fb ff04 	bl	80009a8 <__aeabi_dcmpeq>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d033      	beq.n	8004c0c <_printf_float+0x26c>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	4628      	mov	r0, r5
 8004baa:	4a35      	ldr	r2, [pc, #212]	@ (8004c80 <_printf_float+0x2e0>)
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	f43f af51 	beq.w	8004a56 <_printf_float+0xb6>
 8004bb4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004bb8:	4543      	cmp	r3, r8
 8004bba:	db02      	blt.n	8004bc2 <_printf_float+0x222>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	07d8      	lsls	r0, r3, #31
 8004bc0:	d50f      	bpl.n	8004be2 <_printf_float+0x242>
 8004bc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4628      	mov	r0, r5
 8004bca:	47b8      	blx	r7
 8004bcc:	3001      	adds	r0, #1
 8004bce:	f43f af42 	beq.w	8004a56 <_printf_float+0xb6>
 8004bd2:	f04f 0900 	mov.w	r9, #0
 8004bd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8004bda:	f104 0a1a 	add.w	sl, r4, #26
 8004bde:	45c8      	cmp	r8, r9
 8004be0:	dc09      	bgt.n	8004bf6 <_printf_float+0x256>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	079b      	lsls	r3, r3, #30
 8004be6:	f100 8102 	bmi.w	8004dee <_printf_float+0x44e>
 8004bea:	68e0      	ldr	r0, [r4, #12]
 8004bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004bee:	4298      	cmp	r0, r3
 8004bf0:	bfb8      	it	lt
 8004bf2:	4618      	movlt	r0, r3
 8004bf4:	e731      	b.n	8004a5a <_printf_float+0xba>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	4652      	mov	r2, sl
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	47b8      	blx	r7
 8004c00:	3001      	adds	r0, #1
 8004c02:	f43f af28 	beq.w	8004a56 <_printf_float+0xb6>
 8004c06:	f109 0901 	add.w	r9, r9, #1
 8004c0a:	e7e8      	b.n	8004bde <_printf_float+0x23e>
 8004c0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	dc38      	bgt.n	8004c84 <_printf_float+0x2e4>
 8004c12:	2301      	movs	r3, #1
 8004c14:	4631      	mov	r1, r6
 8004c16:	4628      	mov	r0, r5
 8004c18:	4a19      	ldr	r2, [pc, #100]	@ (8004c80 <_printf_float+0x2e0>)
 8004c1a:	47b8      	blx	r7
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	f43f af1a 	beq.w	8004a56 <_printf_float+0xb6>
 8004c22:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004c26:	ea59 0303 	orrs.w	r3, r9, r3
 8004c2a:	d102      	bne.n	8004c32 <_printf_float+0x292>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	07d9      	lsls	r1, r3, #31
 8004c30:	d5d7      	bpl.n	8004be2 <_printf_float+0x242>
 8004c32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c36:	4631      	mov	r1, r6
 8004c38:	4628      	mov	r0, r5
 8004c3a:	47b8      	blx	r7
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	f43f af0a 	beq.w	8004a56 <_printf_float+0xb6>
 8004c42:	f04f 0a00 	mov.w	sl, #0
 8004c46:	f104 0b1a 	add.w	fp, r4, #26
 8004c4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c4c:	425b      	negs	r3, r3
 8004c4e:	4553      	cmp	r3, sl
 8004c50:	dc01      	bgt.n	8004c56 <_printf_float+0x2b6>
 8004c52:	464b      	mov	r3, r9
 8004c54:	e793      	b.n	8004b7e <_printf_float+0x1de>
 8004c56:	2301      	movs	r3, #1
 8004c58:	465a      	mov	r2, fp
 8004c5a:	4631      	mov	r1, r6
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	47b8      	blx	r7
 8004c60:	3001      	adds	r0, #1
 8004c62:	f43f aef8 	beq.w	8004a56 <_printf_float+0xb6>
 8004c66:	f10a 0a01 	add.w	sl, sl, #1
 8004c6a:	e7ee      	b.n	8004c4a <_printf_float+0x2aa>
 8004c6c:	7fefffff 	.word	0x7fefffff
 8004c70:	080073fe 	.word	0x080073fe
 8004c74:	08007402 	.word	0x08007402
 8004c78:	08007406 	.word	0x08007406
 8004c7c:	0800740a 	.word	0x0800740a
 8004c80:	0800740e 	.word	0x0800740e
 8004c84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c86:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004c8a:	4553      	cmp	r3, sl
 8004c8c:	bfa8      	it	ge
 8004c8e:	4653      	movge	r3, sl
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	4699      	mov	r9, r3
 8004c94:	dc36      	bgt.n	8004d04 <_printf_float+0x364>
 8004c96:	f04f 0b00 	mov.w	fp, #0
 8004c9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c9e:	f104 021a 	add.w	r2, r4, #26
 8004ca2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ca6:	eba3 0309 	sub.w	r3, r3, r9
 8004caa:	455b      	cmp	r3, fp
 8004cac:	dc31      	bgt.n	8004d12 <_printf_float+0x372>
 8004cae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cb0:	459a      	cmp	sl, r3
 8004cb2:	dc3a      	bgt.n	8004d2a <_printf_float+0x38a>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	07da      	lsls	r2, r3, #31
 8004cb8:	d437      	bmi.n	8004d2a <_printf_float+0x38a>
 8004cba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cbc:	ebaa 0903 	sub.w	r9, sl, r3
 8004cc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cc2:	ebaa 0303 	sub.w	r3, sl, r3
 8004cc6:	4599      	cmp	r9, r3
 8004cc8:	bfa8      	it	ge
 8004cca:	4699      	movge	r9, r3
 8004ccc:	f1b9 0f00 	cmp.w	r9, #0
 8004cd0:	dc33      	bgt.n	8004d3a <_printf_float+0x39a>
 8004cd2:	f04f 0800 	mov.w	r8, #0
 8004cd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cda:	f104 0b1a 	add.w	fp, r4, #26
 8004cde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ce0:	ebaa 0303 	sub.w	r3, sl, r3
 8004ce4:	eba3 0309 	sub.w	r3, r3, r9
 8004ce8:	4543      	cmp	r3, r8
 8004cea:	f77f af7a 	ble.w	8004be2 <_printf_float+0x242>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	465a      	mov	r2, fp
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	47b8      	blx	r7
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	f43f aeac 	beq.w	8004a56 <_printf_float+0xb6>
 8004cfe:	f108 0801 	add.w	r8, r8, #1
 8004d02:	e7ec      	b.n	8004cde <_printf_float+0x33e>
 8004d04:	4642      	mov	r2, r8
 8004d06:	4631      	mov	r1, r6
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b8      	blx	r7
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d1c2      	bne.n	8004c96 <_printf_float+0x2f6>
 8004d10:	e6a1      	b.n	8004a56 <_printf_float+0xb6>
 8004d12:	2301      	movs	r3, #1
 8004d14:	4631      	mov	r1, r6
 8004d16:	4628      	mov	r0, r5
 8004d18:	920a      	str	r2, [sp, #40]	@ 0x28
 8004d1a:	47b8      	blx	r7
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	f43f ae9a 	beq.w	8004a56 <_printf_float+0xb6>
 8004d22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d24:	f10b 0b01 	add.w	fp, fp, #1
 8004d28:	e7bb      	b.n	8004ca2 <_printf_float+0x302>
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d30:	4628      	mov	r0, r5
 8004d32:	47b8      	blx	r7
 8004d34:	3001      	adds	r0, #1
 8004d36:	d1c0      	bne.n	8004cba <_printf_float+0x31a>
 8004d38:	e68d      	b.n	8004a56 <_printf_float+0xb6>
 8004d3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	4631      	mov	r1, r6
 8004d40:	4628      	mov	r0, r5
 8004d42:	4442      	add	r2, r8
 8004d44:	47b8      	blx	r7
 8004d46:	3001      	adds	r0, #1
 8004d48:	d1c3      	bne.n	8004cd2 <_printf_float+0x332>
 8004d4a:	e684      	b.n	8004a56 <_printf_float+0xb6>
 8004d4c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004d50:	f1ba 0f01 	cmp.w	sl, #1
 8004d54:	dc01      	bgt.n	8004d5a <_printf_float+0x3ba>
 8004d56:	07db      	lsls	r3, r3, #31
 8004d58:	d536      	bpl.n	8004dc8 <_printf_float+0x428>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	4631      	mov	r1, r6
 8004d60:	4628      	mov	r0, r5
 8004d62:	47b8      	blx	r7
 8004d64:	3001      	adds	r0, #1
 8004d66:	f43f ae76 	beq.w	8004a56 <_printf_float+0xb6>
 8004d6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	f43f ae6e 	beq.w	8004a56 <_printf_float+0xb6>
 8004d7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2300      	movs	r3, #0
 8004d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d86:	f7fb fe0f 	bl	80009a8 <__aeabi_dcmpeq>
 8004d8a:	b9c0      	cbnz	r0, 8004dbe <_printf_float+0x41e>
 8004d8c:	4653      	mov	r3, sl
 8004d8e:	f108 0201 	add.w	r2, r8, #1
 8004d92:	4631      	mov	r1, r6
 8004d94:	4628      	mov	r0, r5
 8004d96:	47b8      	blx	r7
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d10c      	bne.n	8004db6 <_printf_float+0x416>
 8004d9c:	e65b      	b.n	8004a56 <_printf_float+0xb6>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	465a      	mov	r2, fp
 8004da2:	4631      	mov	r1, r6
 8004da4:	4628      	mov	r0, r5
 8004da6:	47b8      	blx	r7
 8004da8:	3001      	adds	r0, #1
 8004daa:	f43f ae54 	beq.w	8004a56 <_printf_float+0xb6>
 8004dae:	f108 0801 	add.w	r8, r8, #1
 8004db2:	45d0      	cmp	r8, sl
 8004db4:	dbf3      	blt.n	8004d9e <_printf_float+0x3fe>
 8004db6:	464b      	mov	r3, r9
 8004db8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004dbc:	e6e0      	b.n	8004b80 <_printf_float+0x1e0>
 8004dbe:	f04f 0800 	mov.w	r8, #0
 8004dc2:	f104 0b1a 	add.w	fp, r4, #26
 8004dc6:	e7f4      	b.n	8004db2 <_printf_float+0x412>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	4642      	mov	r2, r8
 8004dcc:	e7e1      	b.n	8004d92 <_printf_float+0x3f2>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	464a      	mov	r2, r9
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	47b8      	blx	r7
 8004dd8:	3001      	adds	r0, #1
 8004dda:	f43f ae3c 	beq.w	8004a56 <_printf_float+0xb6>
 8004dde:	f108 0801 	add.w	r8, r8, #1
 8004de2:	68e3      	ldr	r3, [r4, #12]
 8004de4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004de6:	1a5b      	subs	r3, r3, r1
 8004de8:	4543      	cmp	r3, r8
 8004dea:	dcf0      	bgt.n	8004dce <_printf_float+0x42e>
 8004dec:	e6fd      	b.n	8004bea <_printf_float+0x24a>
 8004dee:	f04f 0800 	mov.w	r8, #0
 8004df2:	f104 0919 	add.w	r9, r4, #25
 8004df6:	e7f4      	b.n	8004de2 <_printf_float+0x442>

08004df8 <_printf_common>:
 8004df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dfc:	4616      	mov	r6, r2
 8004dfe:	4698      	mov	r8, r3
 8004e00:	688a      	ldr	r2, [r1, #8]
 8004e02:	690b      	ldr	r3, [r1, #16]
 8004e04:	4607      	mov	r7, r0
 8004e06:	4293      	cmp	r3, r2
 8004e08:	bfb8      	it	lt
 8004e0a:	4613      	movlt	r3, r2
 8004e0c:	6033      	str	r3, [r6, #0]
 8004e0e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e12:	460c      	mov	r4, r1
 8004e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e18:	b10a      	cbz	r2, 8004e1e <_printf_common+0x26>
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	6033      	str	r3, [r6, #0]
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	0699      	lsls	r1, r3, #26
 8004e22:	bf42      	ittt	mi
 8004e24:	6833      	ldrmi	r3, [r6, #0]
 8004e26:	3302      	addmi	r3, #2
 8004e28:	6033      	strmi	r3, [r6, #0]
 8004e2a:	6825      	ldr	r5, [r4, #0]
 8004e2c:	f015 0506 	ands.w	r5, r5, #6
 8004e30:	d106      	bne.n	8004e40 <_printf_common+0x48>
 8004e32:	f104 0a19 	add.w	sl, r4, #25
 8004e36:	68e3      	ldr	r3, [r4, #12]
 8004e38:	6832      	ldr	r2, [r6, #0]
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	42ab      	cmp	r3, r5
 8004e3e:	dc2b      	bgt.n	8004e98 <_printf_common+0xa0>
 8004e40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e44:	6822      	ldr	r2, [r4, #0]
 8004e46:	3b00      	subs	r3, #0
 8004e48:	bf18      	it	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	0692      	lsls	r2, r2, #26
 8004e4e:	d430      	bmi.n	8004eb2 <_printf_common+0xba>
 8004e50:	4641      	mov	r1, r8
 8004e52:	4638      	mov	r0, r7
 8004e54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e58:	47c8      	blx	r9
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d023      	beq.n	8004ea6 <_printf_common+0xae>
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	6922      	ldr	r2, [r4, #16]
 8004e62:	f003 0306 	and.w	r3, r3, #6
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	bf14      	ite	ne
 8004e6a:	2500      	movne	r5, #0
 8004e6c:	6833      	ldreq	r3, [r6, #0]
 8004e6e:	f04f 0600 	mov.w	r6, #0
 8004e72:	bf08      	it	eq
 8004e74:	68e5      	ldreq	r5, [r4, #12]
 8004e76:	f104 041a 	add.w	r4, r4, #26
 8004e7a:	bf08      	it	eq
 8004e7c:	1aed      	subeq	r5, r5, r3
 8004e7e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e82:	bf08      	it	eq
 8004e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	bfc4      	itt	gt
 8004e8c:	1a9b      	subgt	r3, r3, r2
 8004e8e:	18ed      	addgt	r5, r5, r3
 8004e90:	42b5      	cmp	r5, r6
 8004e92:	d11a      	bne.n	8004eca <_printf_common+0xd2>
 8004e94:	2000      	movs	r0, #0
 8004e96:	e008      	b.n	8004eaa <_printf_common+0xb2>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	4652      	mov	r2, sl
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	47c8      	blx	r9
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d103      	bne.n	8004eae <_printf_common+0xb6>
 8004ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eae:	3501      	adds	r5, #1
 8004eb0:	e7c1      	b.n	8004e36 <_printf_common+0x3e>
 8004eb2:	2030      	movs	r0, #48	@ 0x30
 8004eb4:	18e1      	adds	r1, r4, r3
 8004eb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ec0:	4422      	add	r2, r4
 8004ec2:	3302      	adds	r3, #2
 8004ec4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ec8:	e7c2      	b.n	8004e50 <_printf_common+0x58>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4622      	mov	r2, r4
 8004ece:	4641      	mov	r1, r8
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	47c8      	blx	r9
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d0e6      	beq.n	8004ea6 <_printf_common+0xae>
 8004ed8:	3601      	adds	r6, #1
 8004eda:	e7d9      	b.n	8004e90 <_printf_common+0x98>

08004edc <_printf_i>:
 8004edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee0:	7e0f      	ldrb	r7, [r1, #24]
 8004ee2:	4691      	mov	r9, r2
 8004ee4:	2f78      	cmp	r7, #120	@ 0x78
 8004ee6:	4680      	mov	r8, r0
 8004ee8:	460c      	mov	r4, r1
 8004eea:	469a      	mov	sl, r3
 8004eec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004eee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ef2:	d807      	bhi.n	8004f04 <_printf_i+0x28>
 8004ef4:	2f62      	cmp	r7, #98	@ 0x62
 8004ef6:	d80a      	bhi.n	8004f0e <_printf_i+0x32>
 8004ef8:	2f00      	cmp	r7, #0
 8004efa:	f000 80d3 	beq.w	80050a4 <_printf_i+0x1c8>
 8004efe:	2f58      	cmp	r7, #88	@ 0x58
 8004f00:	f000 80ba 	beq.w	8005078 <_printf_i+0x19c>
 8004f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f0c:	e03a      	b.n	8004f84 <_printf_i+0xa8>
 8004f0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f12:	2b15      	cmp	r3, #21
 8004f14:	d8f6      	bhi.n	8004f04 <_printf_i+0x28>
 8004f16:	a101      	add	r1, pc, #4	@ (adr r1, 8004f1c <_printf_i+0x40>)
 8004f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f1c:	08004f75 	.word	0x08004f75
 8004f20:	08004f89 	.word	0x08004f89
 8004f24:	08004f05 	.word	0x08004f05
 8004f28:	08004f05 	.word	0x08004f05
 8004f2c:	08004f05 	.word	0x08004f05
 8004f30:	08004f05 	.word	0x08004f05
 8004f34:	08004f89 	.word	0x08004f89
 8004f38:	08004f05 	.word	0x08004f05
 8004f3c:	08004f05 	.word	0x08004f05
 8004f40:	08004f05 	.word	0x08004f05
 8004f44:	08004f05 	.word	0x08004f05
 8004f48:	0800508b 	.word	0x0800508b
 8004f4c:	08004fb3 	.word	0x08004fb3
 8004f50:	08005045 	.word	0x08005045
 8004f54:	08004f05 	.word	0x08004f05
 8004f58:	08004f05 	.word	0x08004f05
 8004f5c:	080050ad 	.word	0x080050ad
 8004f60:	08004f05 	.word	0x08004f05
 8004f64:	08004fb3 	.word	0x08004fb3
 8004f68:	08004f05 	.word	0x08004f05
 8004f6c:	08004f05 	.word	0x08004f05
 8004f70:	0800504d 	.word	0x0800504d
 8004f74:	6833      	ldr	r3, [r6, #0]
 8004f76:	1d1a      	adds	r2, r3, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6032      	str	r2, [r6, #0]
 8004f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f84:	2301      	movs	r3, #1
 8004f86:	e09e      	b.n	80050c6 <_printf_i+0x1ea>
 8004f88:	6833      	ldr	r3, [r6, #0]
 8004f8a:	6820      	ldr	r0, [r4, #0]
 8004f8c:	1d19      	adds	r1, r3, #4
 8004f8e:	6031      	str	r1, [r6, #0]
 8004f90:	0606      	lsls	r6, r0, #24
 8004f92:	d501      	bpl.n	8004f98 <_printf_i+0xbc>
 8004f94:	681d      	ldr	r5, [r3, #0]
 8004f96:	e003      	b.n	8004fa0 <_printf_i+0xc4>
 8004f98:	0645      	lsls	r5, r0, #25
 8004f9a:	d5fb      	bpl.n	8004f94 <_printf_i+0xb8>
 8004f9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fa0:	2d00      	cmp	r5, #0
 8004fa2:	da03      	bge.n	8004fac <_printf_i+0xd0>
 8004fa4:	232d      	movs	r3, #45	@ 0x2d
 8004fa6:	426d      	negs	r5, r5
 8004fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fac:	230a      	movs	r3, #10
 8004fae:	4859      	ldr	r0, [pc, #356]	@ (8005114 <_printf_i+0x238>)
 8004fb0:	e011      	b.n	8004fd6 <_printf_i+0xfa>
 8004fb2:	6821      	ldr	r1, [r4, #0]
 8004fb4:	6833      	ldr	r3, [r6, #0]
 8004fb6:	0608      	lsls	r0, r1, #24
 8004fb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fbc:	d402      	bmi.n	8004fc4 <_printf_i+0xe8>
 8004fbe:	0649      	lsls	r1, r1, #25
 8004fc0:	bf48      	it	mi
 8004fc2:	b2ad      	uxthmi	r5, r5
 8004fc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fc6:	6033      	str	r3, [r6, #0]
 8004fc8:	bf14      	ite	ne
 8004fca:	230a      	movne	r3, #10
 8004fcc:	2308      	moveq	r3, #8
 8004fce:	4851      	ldr	r0, [pc, #324]	@ (8005114 <_printf_i+0x238>)
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fd6:	6866      	ldr	r6, [r4, #4]
 8004fd8:	2e00      	cmp	r6, #0
 8004fda:	bfa8      	it	ge
 8004fdc:	6821      	ldrge	r1, [r4, #0]
 8004fde:	60a6      	str	r6, [r4, #8]
 8004fe0:	bfa4      	itt	ge
 8004fe2:	f021 0104 	bicge.w	r1, r1, #4
 8004fe6:	6021      	strge	r1, [r4, #0]
 8004fe8:	b90d      	cbnz	r5, 8004fee <_printf_i+0x112>
 8004fea:	2e00      	cmp	r6, #0
 8004fec:	d04b      	beq.n	8005086 <_printf_i+0x1aa>
 8004fee:	4616      	mov	r6, r2
 8004ff0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ff4:	fb03 5711 	mls	r7, r3, r1, r5
 8004ff8:	5dc7      	ldrb	r7, [r0, r7]
 8004ffa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ffe:	462f      	mov	r7, r5
 8005000:	42bb      	cmp	r3, r7
 8005002:	460d      	mov	r5, r1
 8005004:	d9f4      	bls.n	8004ff0 <_printf_i+0x114>
 8005006:	2b08      	cmp	r3, #8
 8005008:	d10b      	bne.n	8005022 <_printf_i+0x146>
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	07df      	lsls	r7, r3, #31
 800500e:	d508      	bpl.n	8005022 <_printf_i+0x146>
 8005010:	6923      	ldr	r3, [r4, #16]
 8005012:	6861      	ldr	r1, [r4, #4]
 8005014:	4299      	cmp	r1, r3
 8005016:	bfde      	ittt	le
 8005018:	2330      	movle	r3, #48	@ 0x30
 800501a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800501e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005022:	1b92      	subs	r2, r2, r6
 8005024:	6122      	str	r2, [r4, #16]
 8005026:	464b      	mov	r3, r9
 8005028:	4621      	mov	r1, r4
 800502a:	4640      	mov	r0, r8
 800502c:	f8cd a000 	str.w	sl, [sp]
 8005030:	aa03      	add	r2, sp, #12
 8005032:	f7ff fee1 	bl	8004df8 <_printf_common>
 8005036:	3001      	adds	r0, #1
 8005038:	d14a      	bne.n	80050d0 <_printf_i+0x1f4>
 800503a:	f04f 30ff 	mov.w	r0, #4294967295
 800503e:	b004      	add	sp, #16
 8005040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	f043 0320 	orr.w	r3, r3, #32
 800504a:	6023      	str	r3, [r4, #0]
 800504c:	2778      	movs	r7, #120	@ 0x78
 800504e:	4832      	ldr	r0, [pc, #200]	@ (8005118 <_printf_i+0x23c>)
 8005050:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	6831      	ldr	r1, [r6, #0]
 8005058:	061f      	lsls	r7, r3, #24
 800505a:	f851 5b04 	ldr.w	r5, [r1], #4
 800505e:	d402      	bmi.n	8005066 <_printf_i+0x18a>
 8005060:	065f      	lsls	r7, r3, #25
 8005062:	bf48      	it	mi
 8005064:	b2ad      	uxthmi	r5, r5
 8005066:	6031      	str	r1, [r6, #0]
 8005068:	07d9      	lsls	r1, r3, #31
 800506a:	bf44      	itt	mi
 800506c:	f043 0320 	orrmi.w	r3, r3, #32
 8005070:	6023      	strmi	r3, [r4, #0]
 8005072:	b11d      	cbz	r5, 800507c <_printf_i+0x1a0>
 8005074:	2310      	movs	r3, #16
 8005076:	e7ab      	b.n	8004fd0 <_printf_i+0xf4>
 8005078:	4826      	ldr	r0, [pc, #152]	@ (8005114 <_printf_i+0x238>)
 800507a:	e7e9      	b.n	8005050 <_printf_i+0x174>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	f023 0320 	bic.w	r3, r3, #32
 8005082:	6023      	str	r3, [r4, #0]
 8005084:	e7f6      	b.n	8005074 <_printf_i+0x198>
 8005086:	4616      	mov	r6, r2
 8005088:	e7bd      	b.n	8005006 <_printf_i+0x12a>
 800508a:	6833      	ldr	r3, [r6, #0]
 800508c:	6825      	ldr	r5, [r4, #0]
 800508e:	1d18      	adds	r0, r3, #4
 8005090:	6961      	ldr	r1, [r4, #20]
 8005092:	6030      	str	r0, [r6, #0]
 8005094:	062e      	lsls	r6, r5, #24
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	d501      	bpl.n	800509e <_printf_i+0x1c2>
 800509a:	6019      	str	r1, [r3, #0]
 800509c:	e002      	b.n	80050a4 <_printf_i+0x1c8>
 800509e:	0668      	lsls	r0, r5, #25
 80050a0:	d5fb      	bpl.n	800509a <_printf_i+0x1be>
 80050a2:	8019      	strh	r1, [r3, #0]
 80050a4:	2300      	movs	r3, #0
 80050a6:	4616      	mov	r6, r2
 80050a8:	6123      	str	r3, [r4, #16]
 80050aa:	e7bc      	b.n	8005026 <_printf_i+0x14a>
 80050ac:	6833      	ldr	r3, [r6, #0]
 80050ae:	2100      	movs	r1, #0
 80050b0:	1d1a      	adds	r2, r3, #4
 80050b2:	6032      	str	r2, [r6, #0]
 80050b4:	681e      	ldr	r6, [r3, #0]
 80050b6:	6862      	ldr	r2, [r4, #4]
 80050b8:	4630      	mov	r0, r6
 80050ba:	f000 fab8 	bl	800562e <memchr>
 80050be:	b108      	cbz	r0, 80050c4 <_printf_i+0x1e8>
 80050c0:	1b80      	subs	r0, r0, r6
 80050c2:	6060      	str	r0, [r4, #4]
 80050c4:	6863      	ldr	r3, [r4, #4]
 80050c6:	6123      	str	r3, [r4, #16]
 80050c8:	2300      	movs	r3, #0
 80050ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ce:	e7aa      	b.n	8005026 <_printf_i+0x14a>
 80050d0:	4632      	mov	r2, r6
 80050d2:	4649      	mov	r1, r9
 80050d4:	4640      	mov	r0, r8
 80050d6:	6923      	ldr	r3, [r4, #16]
 80050d8:	47d0      	blx	sl
 80050da:	3001      	adds	r0, #1
 80050dc:	d0ad      	beq.n	800503a <_printf_i+0x15e>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	079b      	lsls	r3, r3, #30
 80050e2:	d413      	bmi.n	800510c <_printf_i+0x230>
 80050e4:	68e0      	ldr	r0, [r4, #12]
 80050e6:	9b03      	ldr	r3, [sp, #12]
 80050e8:	4298      	cmp	r0, r3
 80050ea:	bfb8      	it	lt
 80050ec:	4618      	movlt	r0, r3
 80050ee:	e7a6      	b.n	800503e <_printf_i+0x162>
 80050f0:	2301      	movs	r3, #1
 80050f2:	4632      	mov	r2, r6
 80050f4:	4649      	mov	r1, r9
 80050f6:	4640      	mov	r0, r8
 80050f8:	47d0      	blx	sl
 80050fa:	3001      	adds	r0, #1
 80050fc:	d09d      	beq.n	800503a <_printf_i+0x15e>
 80050fe:	3501      	adds	r5, #1
 8005100:	68e3      	ldr	r3, [r4, #12]
 8005102:	9903      	ldr	r1, [sp, #12]
 8005104:	1a5b      	subs	r3, r3, r1
 8005106:	42ab      	cmp	r3, r5
 8005108:	dcf2      	bgt.n	80050f0 <_printf_i+0x214>
 800510a:	e7eb      	b.n	80050e4 <_printf_i+0x208>
 800510c:	2500      	movs	r5, #0
 800510e:	f104 0619 	add.w	r6, r4, #25
 8005112:	e7f5      	b.n	8005100 <_printf_i+0x224>
 8005114:	08007410 	.word	0x08007410
 8005118:	08007421 	.word	0x08007421

0800511c <std>:
 800511c:	2300      	movs	r3, #0
 800511e:	b510      	push	{r4, lr}
 8005120:	4604      	mov	r4, r0
 8005122:	e9c0 3300 	strd	r3, r3, [r0]
 8005126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800512a:	6083      	str	r3, [r0, #8]
 800512c:	8181      	strh	r1, [r0, #12]
 800512e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005130:	81c2      	strh	r2, [r0, #14]
 8005132:	6183      	str	r3, [r0, #24]
 8005134:	4619      	mov	r1, r3
 8005136:	2208      	movs	r2, #8
 8005138:	305c      	adds	r0, #92	@ 0x5c
 800513a:	f000 f9f9 	bl	8005530 <memset>
 800513e:	4b0d      	ldr	r3, [pc, #52]	@ (8005174 <std+0x58>)
 8005140:	6224      	str	r4, [r4, #32]
 8005142:	6263      	str	r3, [r4, #36]	@ 0x24
 8005144:	4b0c      	ldr	r3, [pc, #48]	@ (8005178 <std+0x5c>)
 8005146:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005148:	4b0c      	ldr	r3, [pc, #48]	@ (800517c <std+0x60>)
 800514a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800514c:	4b0c      	ldr	r3, [pc, #48]	@ (8005180 <std+0x64>)
 800514e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005150:	4b0c      	ldr	r3, [pc, #48]	@ (8005184 <std+0x68>)
 8005152:	429c      	cmp	r4, r3
 8005154:	d006      	beq.n	8005164 <std+0x48>
 8005156:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800515a:	4294      	cmp	r4, r2
 800515c:	d002      	beq.n	8005164 <std+0x48>
 800515e:	33d0      	adds	r3, #208	@ 0xd0
 8005160:	429c      	cmp	r4, r3
 8005162:	d105      	bne.n	8005170 <std+0x54>
 8005164:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800516c:	f000 ba5c 	b.w	8005628 <__retarget_lock_init_recursive>
 8005170:	bd10      	pop	{r4, pc}
 8005172:	bf00      	nop
 8005174:	08005381 	.word	0x08005381
 8005178:	080053a3 	.word	0x080053a3
 800517c:	080053db 	.word	0x080053db
 8005180:	080053ff 	.word	0x080053ff
 8005184:	20000740 	.word	0x20000740

08005188 <stdio_exit_handler>:
 8005188:	4a02      	ldr	r2, [pc, #8]	@ (8005194 <stdio_exit_handler+0xc>)
 800518a:	4903      	ldr	r1, [pc, #12]	@ (8005198 <stdio_exit_handler+0x10>)
 800518c:	4803      	ldr	r0, [pc, #12]	@ (800519c <stdio_exit_handler+0x14>)
 800518e:	f000 b869 	b.w	8005264 <_fwalk_sglue>
 8005192:	bf00      	nop
 8005194:	2000000c 	.word	0x2000000c
 8005198:	08006f85 	.word	0x08006f85
 800519c:	2000001c 	.word	0x2000001c

080051a0 <cleanup_stdio>:
 80051a0:	6841      	ldr	r1, [r0, #4]
 80051a2:	4b0c      	ldr	r3, [pc, #48]	@ (80051d4 <cleanup_stdio+0x34>)
 80051a4:	b510      	push	{r4, lr}
 80051a6:	4299      	cmp	r1, r3
 80051a8:	4604      	mov	r4, r0
 80051aa:	d001      	beq.n	80051b0 <cleanup_stdio+0x10>
 80051ac:	f001 feea 	bl	8006f84 <_fflush_r>
 80051b0:	68a1      	ldr	r1, [r4, #8]
 80051b2:	4b09      	ldr	r3, [pc, #36]	@ (80051d8 <cleanup_stdio+0x38>)
 80051b4:	4299      	cmp	r1, r3
 80051b6:	d002      	beq.n	80051be <cleanup_stdio+0x1e>
 80051b8:	4620      	mov	r0, r4
 80051ba:	f001 fee3 	bl	8006f84 <_fflush_r>
 80051be:	68e1      	ldr	r1, [r4, #12]
 80051c0:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <cleanup_stdio+0x3c>)
 80051c2:	4299      	cmp	r1, r3
 80051c4:	d004      	beq.n	80051d0 <cleanup_stdio+0x30>
 80051c6:	4620      	mov	r0, r4
 80051c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051cc:	f001 beda 	b.w	8006f84 <_fflush_r>
 80051d0:	bd10      	pop	{r4, pc}
 80051d2:	bf00      	nop
 80051d4:	20000740 	.word	0x20000740
 80051d8:	200007a8 	.word	0x200007a8
 80051dc:	20000810 	.word	0x20000810

080051e0 <global_stdio_init.part.0>:
 80051e0:	b510      	push	{r4, lr}
 80051e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005210 <global_stdio_init.part.0+0x30>)
 80051e4:	4c0b      	ldr	r4, [pc, #44]	@ (8005214 <global_stdio_init.part.0+0x34>)
 80051e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005218 <global_stdio_init.part.0+0x38>)
 80051e8:	4620      	mov	r0, r4
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	2104      	movs	r1, #4
 80051ee:	2200      	movs	r2, #0
 80051f0:	f7ff ff94 	bl	800511c <std>
 80051f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051f8:	2201      	movs	r2, #1
 80051fa:	2109      	movs	r1, #9
 80051fc:	f7ff ff8e 	bl	800511c <std>
 8005200:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005204:	2202      	movs	r2, #2
 8005206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520a:	2112      	movs	r1, #18
 800520c:	f7ff bf86 	b.w	800511c <std>
 8005210:	20000878 	.word	0x20000878
 8005214:	20000740 	.word	0x20000740
 8005218:	08005189 	.word	0x08005189

0800521c <__sfp_lock_acquire>:
 800521c:	4801      	ldr	r0, [pc, #4]	@ (8005224 <__sfp_lock_acquire+0x8>)
 800521e:	f000 ba04 	b.w	800562a <__retarget_lock_acquire_recursive>
 8005222:	bf00      	nop
 8005224:	20000881 	.word	0x20000881

08005228 <__sfp_lock_release>:
 8005228:	4801      	ldr	r0, [pc, #4]	@ (8005230 <__sfp_lock_release+0x8>)
 800522a:	f000 b9ff 	b.w	800562c <__retarget_lock_release_recursive>
 800522e:	bf00      	nop
 8005230:	20000881 	.word	0x20000881

08005234 <__sinit>:
 8005234:	b510      	push	{r4, lr}
 8005236:	4604      	mov	r4, r0
 8005238:	f7ff fff0 	bl	800521c <__sfp_lock_acquire>
 800523c:	6a23      	ldr	r3, [r4, #32]
 800523e:	b11b      	cbz	r3, 8005248 <__sinit+0x14>
 8005240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005244:	f7ff bff0 	b.w	8005228 <__sfp_lock_release>
 8005248:	4b04      	ldr	r3, [pc, #16]	@ (800525c <__sinit+0x28>)
 800524a:	6223      	str	r3, [r4, #32]
 800524c:	4b04      	ldr	r3, [pc, #16]	@ (8005260 <__sinit+0x2c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f5      	bne.n	8005240 <__sinit+0xc>
 8005254:	f7ff ffc4 	bl	80051e0 <global_stdio_init.part.0>
 8005258:	e7f2      	b.n	8005240 <__sinit+0xc>
 800525a:	bf00      	nop
 800525c:	080051a1 	.word	0x080051a1
 8005260:	20000878 	.word	0x20000878

08005264 <_fwalk_sglue>:
 8005264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005268:	4607      	mov	r7, r0
 800526a:	4688      	mov	r8, r1
 800526c:	4614      	mov	r4, r2
 800526e:	2600      	movs	r6, #0
 8005270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005274:	f1b9 0901 	subs.w	r9, r9, #1
 8005278:	d505      	bpl.n	8005286 <_fwalk_sglue+0x22>
 800527a:	6824      	ldr	r4, [r4, #0]
 800527c:	2c00      	cmp	r4, #0
 800527e:	d1f7      	bne.n	8005270 <_fwalk_sglue+0xc>
 8005280:	4630      	mov	r0, r6
 8005282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005286:	89ab      	ldrh	r3, [r5, #12]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d907      	bls.n	800529c <_fwalk_sglue+0x38>
 800528c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005290:	3301      	adds	r3, #1
 8005292:	d003      	beq.n	800529c <_fwalk_sglue+0x38>
 8005294:	4629      	mov	r1, r5
 8005296:	4638      	mov	r0, r7
 8005298:	47c0      	blx	r8
 800529a:	4306      	orrs	r6, r0
 800529c:	3568      	adds	r5, #104	@ 0x68
 800529e:	e7e9      	b.n	8005274 <_fwalk_sglue+0x10>

080052a0 <iprintf>:
 80052a0:	b40f      	push	{r0, r1, r2, r3}
 80052a2:	b507      	push	{r0, r1, r2, lr}
 80052a4:	4906      	ldr	r1, [pc, #24]	@ (80052c0 <iprintf+0x20>)
 80052a6:	ab04      	add	r3, sp, #16
 80052a8:	6808      	ldr	r0, [r1, #0]
 80052aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80052ae:	6881      	ldr	r1, [r0, #8]
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	f001 fccf 	bl	8006c54 <_vfiprintf_r>
 80052b6:	b003      	add	sp, #12
 80052b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052bc:	b004      	add	sp, #16
 80052be:	4770      	bx	lr
 80052c0:	20000018 	.word	0x20000018

080052c4 <_puts_r>:
 80052c4:	6a03      	ldr	r3, [r0, #32]
 80052c6:	b570      	push	{r4, r5, r6, lr}
 80052c8:	4605      	mov	r5, r0
 80052ca:	460e      	mov	r6, r1
 80052cc:	6884      	ldr	r4, [r0, #8]
 80052ce:	b90b      	cbnz	r3, 80052d4 <_puts_r+0x10>
 80052d0:	f7ff ffb0 	bl	8005234 <__sinit>
 80052d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052d6:	07db      	lsls	r3, r3, #31
 80052d8:	d405      	bmi.n	80052e6 <_puts_r+0x22>
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	0598      	lsls	r0, r3, #22
 80052de:	d402      	bmi.n	80052e6 <_puts_r+0x22>
 80052e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052e2:	f000 f9a2 	bl	800562a <__retarget_lock_acquire_recursive>
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	0719      	lsls	r1, r3, #28
 80052ea:	d502      	bpl.n	80052f2 <_puts_r+0x2e>
 80052ec:	6923      	ldr	r3, [r4, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d135      	bne.n	800535e <_puts_r+0x9a>
 80052f2:	4621      	mov	r1, r4
 80052f4:	4628      	mov	r0, r5
 80052f6:	f000 f8c5 	bl	8005484 <__swsetup_r>
 80052fa:	b380      	cbz	r0, 800535e <_puts_r+0x9a>
 80052fc:	f04f 35ff 	mov.w	r5, #4294967295
 8005300:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005302:	07da      	lsls	r2, r3, #31
 8005304:	d405      	bmi.n	8005312 <_puts_r+0x4e>
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	059b      	lsls	r3, r3, #22
 800530a:	d402      	bmi.n	8005312 <_puts_r+0x4e>
 800530c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800530e:	f000 f98d 	bl	800562c <__retarget_lock_release_recursive>
 8005312:	4628      	mov	r0, r5
 8005314:	bd70      	pop	{r4, r5, r6, pc}
 8005316:	2b00      	cmp	r3, #0
 8005318:	da04      	bge.n	8005324 <_puts_r+0x60>
 800531a:	69a2      	ldr	r2, [r4, #24]
 800531c:	429a      	cmp	r2, r3
 800531e:	dc17      	bgt.n	8005350 <_puts_r+0x8c>
 8005320:	290a      	cmp	r1, #10
 8005322:	d015      	beq.n	8005350 <_puts_r+0x8c>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	6022      	str	r2, [r4, #0]
 800532a:	7019      	strb	r1, [r3, #0]
 800532c:	68a3      	ldr	r3, [r4, #8]
 800532e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005332:	3b01      	subs	r3, #1
 8005334:	60a3      	str	r3, [r4, #8]
 8005336:	2900      	cmp	r1, #0
 8005338:	d1ed      	bne.n	8005316 <_puts_r+0x52>
 800533a:	2b00      	cmp	r3, #0
 800533c:	da11      	bge.n	8005362 <_puts_r+0x9e>
 800533e:	4622      	mov	r2, r4
 8005340:	210a      	movs	r1, #10
 8005342:	4628      	mov	r0, r5
 8005344:	f000 f85f 	bl	8005406 <__swbuf_r>
 8005348:	3001      	adds	r0, #1
 800534a:	d0d7      	beq.n	80052fc <_puts_r+0x38>
 800534c:	250a      	movs	r5, #10
 800534e:	e7d7      	b.n	8005300 <_puts_r+0x3c>
 8005350:	4622      	mov	r2, r4
 8005352:	4628      	mov	r0, r5
 8005354:	f000 f857 	bl	8005406 <__swbuf_r>
 8005358:	3001      	adds	r0, #1
 800535a:	d1e7      	bne.n	800532c <_puts_r+0x68>
 800535c:	e7ce      	b.n	80052fc <_puts_r+0x38>
 800535e:	3e01      	subs	r6, #1
 8005360:	e7e4      	b.n	800532c <_puts_r+0x68>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	6022      	str	r2, [r4, #0]
 8005368:	220a      	movs	r2, #10
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	e7ee      	b.n	800534c <_puts_r+0x88>
	...

08005370 <puts>:
 8005370:	4b02      	ldr	r3, [pc, #8]	@ (800537c <puts+0xc>)
 8005372:	4601      	mov	r1, r0
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	f7ff bfa5 	b.w	80052c4 <_puts_r>
 800537a:	bf00      	nop
 800537c:	20000018 	.word	0x20000018

08005380 <__sread>:
 8005380:	b510      	push	{r4, lr}
 8005382:	460c      	mov	r4, r1
 8005384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005388:	f000 f900 	bl	800558c <_read_r>
 800538c:	2800      	cmp	r0, #0
 800538e:	bfab      	itete	ge
 8005390:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005392:	89a3      	ldrhlt	r3, [r4, #12]
 8005394:	181b      	addge	r3, r3, r0
 8005396:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800539a:	bfac      	ite	ge
 800539c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800539e:	81a3      	strhlt	r3, [r4, #12]
 80053a0:	bd10      	pop	{r4, pc}

080053a2 <__swrite>:
 80053a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a6:	461f      	mov	r7, r3
 80053a8:	898b      	ldrh	r3, [r1, #12]
 80053aa:	4605      	mov	r5, r0
 80053ac:	05db      	lsls	r3, r3, #23
 80053ae:	460c      	mov	r4, r1
 80053b0:	4616      	mov	r6, r2
 80053b2:	d505      	bpl.n	80053c0 <__swrite+0x1e>
 80053b4:	2302      	movs	r3, #2
 80053b6:	2200      	movs	r2, #0
 80053b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053bc:	f000 f8d4 	bl	8005568 <_lseek_r>
 80053c0:	89a3      	ldrh	r3, [r4, #12]
 80053c2:	4632      	mov	r2, r6
 80053c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053c8:	81a3      	strh	r3, [r4, #12]
 80053ca:	4628      	mov	r0, r5
 80053cc:	463b      	mov	r3, r7
 80053ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053d6:	f000 b8eb 	b.w	80055b0 <_write_r>

080053da <__sseek>:
 80053da:	b510      	push	{r4, lr}
 80053dc:	460c      	mov	r4, r1
 80053de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e2:	f000 f8c1 	bl	8005568 <_lseek_r>
 80053e6:	1c43      	adds	r3, r0, #1
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	bf15      	itete	ne
 80053ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053f6:	81a3      	strheq	r3, [r4, #12]
 80053f8:	bf18      	it	ne
 80053fa:	81a3      	strhne	r3, [r4, #12]
 80053fc:	bd10      	pop	{r4, pc}

080053fe <__sclose>:
 80053fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005402:	f000 b8a1 	b.w	8005548 <_close_r>

08005406 <__swbuf_r>:
 8005406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005408:	460e      	mov	r6, r1
 800540a:	4614      	mov	r4, r2
 800540c:	4605      	mov	r5, r0
 800540e:	b118      	cbz	r0, 8005418 <__swbuf_r+0x12>
 8005410:	6a03      	ldr	r3, [r0, #32]
 8005412:	b90b      	cbnz	r3, 8005418 <__swbuf_r+0x12>
 8005414:	f7ff ff0e 	bl	8005234 <__sinit>
 8005418:	69a3      	ldr	r3, [r4, #24]
 800541a:	60a3      	str	r3, [r4, #8]
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	071a      	lsls	r2, r3, #28
 8005420:	d501      	bpl.n	8005426 <__swbuf_r+0x20>
 8005422:	6923      	ldr	r3, [r4, #16]
 8005424:	b943      	cbnz	r3, 8005438 <__swbuf_r+0x32>
 8005426:	4621      	mov	r1, r4
 8005428:	4628      	mov	r0, r5
 800542a:	f000 f82b 	bl	8005484 <__swsetup_r>
 800542e:	b118      	cbz	r0, 8005438 <__swbuf_r+0x32>
 8005430:	f04f 37ff 	mov.w	r7, #4294967295
 8005434:	4638      	mov	r0, r7
 8005436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	6922      	ldr	r2, [r4, #16]
 800543c:	b2f6      	uxtb	r6, r6
 800543e:	1a98      	subs	r0, r3, r2
 8005440:	6963      	ldr	r3, [r4, #20]
 8005442:	4637      	mov	r7, r6
 8005444:	4283      	cmp	r3, r0
 8005446:	dc05      	bgt.n	8005454 <__swbuf_r+0x4e>
 8005448:	4621      	mov	r1, r4
 800544a:	4628      	mov	r0, r5
 800544c:	f001 fd9a 	bl	8006f84 <_fflush_r>
 8005450:	2800      	cmp	r0, #0
 8005452:	d1ed      	bne.n	8005430 <__swbuf_r+0x2a>
 8005454:	68a3      	ldr	r3, [r4, #8]
 8005456:	3b01      	subs	r3, #1
 8005458:	60a3      	str	r3, [r4, #8]
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	6022      	str	r2, [r4, #0]
 8005460:	701e      	strb	r6, [r3, #0]
 8005462:	6962      	ldr	r2, [r4, #20]
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	429a      	cmp	r2, r3
 8005468:	d004      	beq.n	8005474 <__swbuf_r+0x6e>
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	07db      	lsls	r3, r3, #31
 800546e:	d5e1      	bpl.n	8005434 <__swbuf_r+0x2e>
 8005470:	2e0a      	cmp	r6, #10
 8005472:	d1df      	bne.n	8005434 <__swbuf_r+0x2e>
 8005474:	4621      	mov	r1, r4
 8005476:	4628      	mov	r0, r5
 8005478:	f001 fd84 	bl	8006f84 <_fflush_r>
 800547c:	2800      	cmp	r0, #0
 800547e:	d0d9      	beq.n	8005434 <__swbuf_r+0x2e>
 8005480:	e7d6      	b.n	8005430 <__swbuf_r+0x2a>
	...

08005484 <__swsetup_r>:
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	4b29      	ldr	r3, [pc, #164]	@ (800552c <__swsetup_r+0xa8>)
 8005488:	4605      	mov	r5, r0
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	460c      	mov	r4, r1
 800548e:	b118      	cbz	r0, 8005498 <__swsetup_r+0x14>
 8005490:	6a03      	ldr	r3, [r0, #32]
 8005492:	b90b      	cbnz	r3, 8005498 <__swsetup_r+0x14>
 8005494:	f7ff fece 	bl	8005234 <__sinit>
 8005498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800549c:	0719      	lsls	r1, r3, #28
 800549e:	d422      	bmi.n	80054e6 <__swsetup_r+0x62>
 80054a0:	06da      	lsls	r2, r3, #27
 80054a2:	d407      	bmi.n	80054b4 <__swsetup_r+0x30>
 80054a4:	2209      	movs	r2, #9
 80054a6:	602a      	str	r2, [r5, #0]
 80054a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	81a3      	strh	r3, [r4, #12]
 80054b2:	e033      	b.n	800551c <__swsetup_r+0x98>
 80054b4:	0758      	lsls	r0, r3, #29
 80054b6:	d512      	bpl.n	80054de <__swsetup_r+0x5a>
 80054b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054ba:	b141      	cbz	r1, 80054ce <__swsetup_r+0x4a>
 80054bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054c0:	4299      	cmp	r1, r3
 80054c2:	d002      	beq.n	80054ca <__swsetup_r+0x46>
 80054c4:	4628      	mov	r0, r5
 80054c6:	f000 ff1f 	bl	8006308 <_free_r>
 80054ca:	2300      	movs	r3, #0
 80054cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80054ce:	89a3      	ldrh	r3, [r4, #12]
 80054d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80054d4:	81a3      	strh	r3, [r4, #12]
 80054d6:	2300      	movs	r3, #0
 80054d8:	6063      	str	r3, [r4, #4]
 80054da:	6923      	ldr	r3, [r4, #16]
 80054dc:	6023      	str	r3, [r4, #0]
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	f043 0308 	orr.w	r3, r3, #8
 80054e4:	81a3      	strh	r3, [r4, #12]
 80054e6:	6923      	ldr	r3, [r4, #16]
 80054e8:	b94b      	cbnz	r3, 80054fe <__swsetup_r+0x7a>
 80054ea:	89a3      	ldrh	r3, [r4, #12]
 80054ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054f4:	d003      	beq.n	80054fe <__swsetup_r+0x7a>
 80054f6:	4621      	mov	r1, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	f001 fd90 	bl	800701e <__smakebuf_r>
 80054fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005502:	f013 0201 	ands.w	r2, r3, #1
 8005506:	d00a      	beq.n	800551e <__swsetup_r+0x9a>
 8005508:	2200      	movs	r2, #0
 800550a:	60a2      	str	r2, [r4, #8]
 800550c:	6962      	ldr	r2, [r4, #20]
 800550e:	4252      	negs	r2, r2
 8005510:	61a2      	str	r2, [r4, #24]
 8005512:	6922      	ldr	r2, [r4, #16]
 8005514:	b942      	cbnz	r2, 8005528 <__swsetup_r+0xa4>
 8005516:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800551a:	d1c5      	bne.n	80054a8 <__swsetup_r+0x24>
 800551c:	bd38      	pop	{r3, r4, r5, pc}
 800551e:	0799      	lsls	r1, r3, #30
 8005520:	bf58      	it	pl
 8005522:	6962      	ldrpl	r2, [r4, #20]
 8005524:	60a2      	str	r2, [r4, #8]
 8005526:	e7f4      	b.n	8005512 <__swsetup_r+0x8e>
 8005528:	2000      	movs	r0, #0
 800552a:	e7f7      	b.n	800551c <__swsetup_r+0x98>
 800552c:	20000018 	.word	0x20000018

08005530 <memset>:
 8005530:	4603      	mov	r3, r0
 8005532:	4402      	add	r2, r0
 8005534:	4293      	cmp	r3, r2
 8005536:	d100      	bne.n	800553a <memset+0xa>
 8005538:	4770      	bx	lr
 800553a:	f803 1b01 	strb.w	r1, [r3], #1
 800553e:	e7f9      	b.n	8005534 <memset+0x4>

08005540 <_localeconv_r>:
 8005540:	4800      	ldr	r0, [pc, #0]	@ (8005544 <_localeconv_r+0x4>)
 8005542:	4770      	bx	lr
 8005544:	20000158 	.word	0x20000158

08005548 <_close_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	2300      	movs	r3, #0
 800554c:	4d05      	ldr	r5, [pc, #20]	@ (8005564 <_close_r+0x1c>)
 800554e:	4604      	mov	r4, r0
 8005550:	4608      	mov	r0, r1
 8005552:	602b      	str	r3, [r5, #0]
 8005554:	f7fc fa05 	bl	8001962 <_close>
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	d102      	bne.n	8005562 <_close_r+0x1a>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	b103      	cbz	r3, 8005562 <_close_r+0x1a>
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	bd38      	pop	{r3, r4, r5, pc}
 8005564:	2000087c 	.word	0x2000087c

08005568 <_lseek_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4604      	mov	r4, r0
 800556c:	4608      	mov	r0, r1
 800556e:	4611      	mov	r1, r2
 8005570:	2200      	movs	r2, #0
 8005572:	4d05      	ldr	r5, [pc, #20]	@ (8005588 <_lseek_r+0x20>)
 8005574:	602a      	str	r2, [r5, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	f7fc fa17 	bl	80019aa <_lseek>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d102      	bne.n	8005586 <_lseek_r+0x1e>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	b103      	cbz	r3, 8005586 <_lseek_r+0x1e>
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	2000087c 	.word	0x2000087c

0800558c <_read_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4604      	mov	r4, r0
 8005590:	4608      	mov	r0, r1
 8005592:	4611      	mov	r1, r2
 8005594:	2200      	movs	r2, #0
 8005596:	4d05      	ldr	r5, [pc, #20]	@ (80055ac <_read_r+0x20>)
 8005598:	602a      	str	r2, [r5, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	f7fc f9a8 	bl	80018f0 <_read>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_read_r+0x1e>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_read_r+0x1e>
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	2000087c 	.word	0x2000087c

080055b0 <_write_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	2200      	movs	r2, #0
 80055ba:	4d05      	ldr	r5, [pc, #20]	@ (80055d0 <_write_r+0x20>)
 80055bc:	602a      	str	r2, [r5, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	f7fc f9b3 	bl	800192a <_write>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d102      	bne.n	80055ce <_write_r+0x1e>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	b103      	cbz	r3, 80055ce <_write_r+0x1e>
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	2000087c 	.word	0x2000087c

080055d4 <__errno>:
 80055d4:	4b01      	ldr	r3, [pc, #4]	@ (80055dc <__errno+0x8>)
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000018 	.word	0x20000018

080055e0 <__libc_init_array>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	2600      	movs	r6, #0
 80055e4:	4d0c      	ldr	r5, [pc, #48]	@ (8005618 <__libc_init_array+0x38>)
 80055e6:	4c0d      	ldr	r4, [pc, #52]	@ (800561c <__libc_init_array+0x3c>)
 80055e8:	1b64      	subs	r4, r4, r5
 80055ea:	10a4      	asrs	r4, r4, #2
 80055ec:	42a6      	cmp	r6, r4
 80055ee:	d109      	bne.n	8005604 <__libc_init_array+0x24>
 80055f0:	f001 fe34 	bl	800725c <_init>
 80055f4:	2600      	movs	r6, #0
 80055f6:	4d0a      	ldr	r5, [pc, #40]	@ (8005620 <__libc_init_array+0x40>)
 80055f8:	4c0a      	ldr	r4, [pc, #40]	@ (8005624 <__libc_init_array+0x44>)
 80055fa:	1b64      	subs	r4, r4, r5
 80055fc:	10a4      	asrs	r4, r4, #2
 80055fe:	42a6      	cmp	r6, r4
 8005600:	d105      	bne.n	800560e <__libc_init_array+0x2e>
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	f855 3b04 	ldr.w	r3, [r5], #4
 8005608:	4798      	blx	r3
 800560a:	3601      	adds	r6, #1
 800560c:	e7ee      	b.n	80055ec <__libc_init_array+0xc>
 800560e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005612:	4798      	blx	r3
 8005614:	3601      	adds	r6, #1
 8005616:	e7f2      	b.n	80055fe <__libc_init_array+0x1e>
 8005618:	08007778 	.word	0x08007778
 800561c:	08007778 	.word	0x08007778
 8005620:	08007778 	.word	0x08007778
 8005624:	0800777c 	.word	0x0800777c

08005628 <__retarget_lock_init_recursive>:
 8005628:	4770      	bx	lr

0800562a <__retarget_lock_acquire_recursive>:
 800562a:	4770      	bx	lr

0800562c <__retarget_lock_release_recursive>:
 800562c:	4770      	bx	lr

0800562e <memchr>:
 800562e:	4603      	mov	r3, r0
 8005630:	b510      	push	{r4, lr}
 8005632:	b2c9      	uxtb	r1, r1
 8005634:	4402      	add	r2, r0
 8005636:	4293      	cmp	r3, r2
 8005638:	4618      	mov	r0, r3
 800563a:	d101      	bne.n	8005640 <memchr+0x12>
 800563c:	2000      	movs	r0, #0
 800563e:	e003      	b.n	8005648 <memchr+0x1a>
 8005640:	7804      	ldrb	r4, [r0, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	428c      	cmp	r4, r1
 8005646:	d1f6      	bne.n	8005636 <memchr+0x8>
 8005648:	bd10      	pop	{r4, pc}

0800564a <memcpy>:
 800564a:	440a      	add	r2, r1
 800564c:	4291      	cmp	r1, r2
 800564e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005652:	d100      	bne.n	8005656 <memcpy+0xc>
 8005654:	4770      	bx	lr
 8005656:	b510      	push	{r4, lr}
 8005658:	f811 4b01 	ldrb.w	r4, [r1], #1
 800565c:	4291      	cmp	r1, r2
 800565e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005662:	d1f9      	bne.n	8005658 <memcpy+0xe>
 8005664:	bd10      	pop	{r4, pc}

08005666 <quorem>:
 8005666:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566a:	6903      	ldr	r3, [r0, #16]
 800566c:	690c      	ldr	r4, [r1, #16]
 800566e:	4607      	mov	r7, r0
 8005670:	42a3      	cmp	r3, r4
 8005672:	db7e      	blt.n	8005772 <quorem+0x10c>
 8005674:	3c01      	subs	r4, #1
 8005676:	00a3      	lsls	r3, r4, #2
 8005678:	f100 0514 	add.w	r5, r0, #20
 800567c:	f101 0814 	add.w	r8, r1, #20
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800568c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005690:	3301      	adds	r3, #1
 8005692:	429a      	cmp	r2, r3
 8005694:	fbb2 f6f3 	udiv	r6, r2, r3
 8005698:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800569c:	d32e      	bcc.n	80056fc <quorem+0x96>
 800569e:	f04f 0a00 	mov.w	sl, #0
 80056a2:	46c4      	mov	ip, r8
 80056a4:	46ae      	mov	lr, r5
 80056a6:	46d3      	mov	fp, sl
 80056a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056ac:	b298      	uxth	r0, r3
 80056ae:	fb06 a000 	mla	r0, r6, r0, sl
 80056b2:	0c1b      	lsrs	r3, r3, #16
 80056b4:	0c02      	lsrs	r2, r0, #16
 80056b6:	fb06 2303 	mla	r3, r6, r3, r2
 80056ba:	f8de 2000 	ldr.w	r2, [lr]
 80056be:	b280      	uxth	r0, r0
 80056c0:	b292      	uxth	r2, r2
 80056c2:	1a12      	subs	r2, r2, r0
 80056c4:	445a      	add	r2, fp
 80056c6:	f8de 0000 	ldr.w	r0, [lr]
 80056ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80056d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80056d8:	b292      	uxth	r2, r2
 80056da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80056de:	45e1      	cmp	r9, ip
 80056e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80056e4:	f84e 2b04 	str.w	r2, [lr], #4
 80056e8:	d2de      	bcs.n	80056a8 <quorem+0x42>
 80056ea:	9b00      	ldr	r3, [sp, #0]
 80056ec:	58eb      	ldr	r3, [r5, r3]
 80056ee:	b92b      	cbnz	r3, 80056fc <quorem+0x96>
 80056f0:	9b01      	ldr	r3, [sp, #4]
 80056f2:	3b04      	subs	r3, #4
 80056f4:	429d      	cmp	r5, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	d32f      	bcc.n	800575a <quorem+0xf4>
 80056fa:	613c      	str	r4, [r7, #16]
 80056fc:	4638      	mov	r0, r7
 80056fe:	f001 f979 	bl	80069f4 <__mcmp>
 8005702:	2800      	cmp	r0, #0
 8005704:	db25      	blt.n	8005752 <quorem+0xec>
 8005706:	4629      	mov	r1, r5
 8005708:	2000      	movs	r0, #0
 800570a:	f858 2b04 	ldr.w	r2, [r8], #4
 800570e:	f8d1 c000 	ldr.w	ip, [r1]
 8005712:	fa1f fe82 	uxth.w	lr, r2
 8005716:	fa1f f38c 	uxth.w	r3, ip
 800571a:	eba3 030e 	sub.w	r3, r3, lr
 800571e:	4403      	add	r3, r0
 8005720:	0c12      	lsrs	r2, r2, #16
 8005722:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005726:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800572a:	b29b      	uxth	r3, r3
 800572c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005730:	45c1      	cmp	r9, r8
 8005732:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005736:	f841 3b04 	str.w	r3, [r1], #4
 800573a:	d2e6      	bcs.n	800570a <quorem+0xa4>
 800573c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005740:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005744:	b922      	cbnz	r2, 8005750 <quorem+0xea>
 8005746:	3b04      	subs	r3, #4
 8005748:	429d      	cmp	r5, r3
 800574a:	461a      	mov	r2, r3
 800574c:	d30b      	bcc.n	8005766 <quorem+0x100>
 800574e:	613c      	str	r4, [r7, #16]
 8005750:	3601      	adds	r6, #1
 8005752:	4630      	mov	r0, r6
 8005754:	b003      	add	sp, #12
 8005756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	3b04      	subs	r3, #4
 800575e:	2a00      	cmp	r2, #0
 8005760:	d1cb      	bne.n	80056fa <quorem+0x94>
 8005762:	3c01      	subs	r4, #1
 8005764:	e7c6      	b.n	80056f4 <quorem+0x8e>
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	3b04      	subs	r3, #4
 800576a:	2a00      	cmp	r2, #0
 800576c:	d1ef      	bne.n	800574e <quorem+0xe8>
 800576e:	3c01      	subs	r4, #1
 8005770:	e7ea      	b.n	8005748 <quorem+0xe2>
 8005772:	2000      	movs	r0, #0
 8005774:	e7ee      	b.n	8005754 <quorem+0xee>
	...

08005778 <_dtoa_r>:
 8005778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577c:	4614      	mov	r4, r2
 800577e:	461d      	mov	r5, r3
 8005780:	69c7      	ldr	r7, [r0, #28]
 8005782:	b097      	sub	sp, #92	@ 0x5c
 8005784:	4683      	mov	fp, r0
 8005786:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800578a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800578c:	b97f      	cbnz	r7, 80057ae <_dtoa_r+0x36>
 800578e:	2010      	movs	r0, #16
 8005790:	f000 fe02 	bl	8006398 <malloc>
 8005794:	4602      	mov	r2, r0
 8005796:	f8cb 001c 	str.w	r0, [fp, #28]
 800579a:	b920      	cbnz	r0, 80057a6 <_dtoa_r+0x2e>
 800579c:	21ef      	movs	r1, #239	@ 0xef
 800579e:	4ba8      	ldr	r3, [pc, #672]	@ (8005a40 <_dtoa_r+0x2c8>)
 80057a0:	48a8      	ldr	r0, [pc, #672]	@ (8005a44 <_dtoa_r+0x2cc>)
 80057a2:	f001 fcab 	bl	80070fc <__assert_func>
 80057a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80057aa:	6007      	str	r7, [r0, #0]
 80057ac:	60c7      	str	r7, [r0, #12]
 80057ae:	f8db 301c 	ldr.w	r3, [fp, #28]
 80057b2:	6819      	ldr	r1, [r3, #0]
 80057b4:	b159      	cbz	r1, 80057ce <_dtoa_r+0x56>
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	2301      	movs	r3, #1
 80057ba:	4093      	lsls	r3, r2
 80057bc:	604a      	str	r2, [r1, #4]
 80057be:	608b      	str	r3, [r1, #8]
 80057c0:	4658      	mov	r0, fp
 80057c2:	f000 fedf 	bl	8006584 <_Bfree>
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	1e2b      	subs	r3, r5, #0
 80057d0:	bfaf      	iteee	ge
 80057d2:	2300      	movge	r3, #0
 80057d4:	2201      	movlt	r2, #1
 80057d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80057da:	9303      	strlt	r3, [sp, #12]
 80057dc:	bfa8      	it	ge
 80057de:	6033      	strge	r3, [r6, #0]
 80057e0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80057e4:	4b98      	ldr	r3, [pc, #608]	@ (8005a48 <_dtoa_r+0x2d0>)
 80057e6:	bfb8      	it	lt
 80057e8:	6032      	strlt	r2, [r6, #0]
 80057ea:	ea33 0308 	bics.w	r3, r3, r8
 80057ee:	d112      	bne.n	8005816 <_dtoa_r+0x9e>
 80057f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80057f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80057fc:	4323      	orrs	r3, r4
 80057fe:	f000 8550 	beq.w	80062a2 <_dtoa_r+0xb2a>
 8005802:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005804:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005a4c <_dtoa_r+0x2d4>
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8552 	beq.w	80062b2 <_dtoa_r+0xb3a>
 800580e:	f10a 0303 	add.w	r3, sl, #3
 8005812:	f000 bd4c 	b.w	80062ae <_dtoa_r+0xb36>
 8005816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800581a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800581e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005822:	2200      	movs	r2, #0
 8005824:	2300      	movs	r3, #0
 8005826:	f7fb f8bf 	bl	80009a8 <__aeabi_dcmpeq>
 800582a:	4607      	mov	r7, r0
 800582c:	b158      	cbz	r0, 8005846 <_dtoa_r+0xce>
 800582e:	2301      	movs	r3, #1
 8005830:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005836:	b113      	cbz	r3, 800583e <_dtoa_r+0xc6>
 8005838:	4b85      	ldr	r3, [pc, #532]	@ (8005a50 <_dtoa_r+0x2d8>)
 800583a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005a54 <_dtoa_r+0x2dc>
 8005842:	f000 bd36 	b.w	80062b2 <_dtoa_r+0xb3a>
 8005846:	ab14      	add	r3, sp, #80	@ 0x50
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	ab15      	add	r3, sp, #84	@ 0x54
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	4658      	mov	r0, fp
 8005850:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005854:	f001 f97e 	bl	8006b54 <__d2b>
 8005858:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800585c:	4681      	mov	r9, r0
 800585e:	2e00      	cmp	r6, #0
 8005860:	d077      	beq.n	8005952 <_dtoa_r+0x1da>
 8005862:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005868:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800586c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005870:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005874:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005878:	9712      	str	r7, [sp, #72]	@ 0x48
 800587a:	4619      	mov	r1, r3
 800587c:	2200      	movs	r2, #0
 800587e:	4b76      	ldr	r3, [pc, #472]	@ (8005a58 <_dtoa_r+0x2e0>)
 8005880:	f7fa fc72 	bl	8000168 <__aeabi_dsub>
 8005884:	a368      	add	r3, pc, #416	@ (adr r3, 8005a28 <_dtoa_r+0x2b0>)
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f7fa fe25 	bl	80004d8 <__aeabi_dmul>
 800588e:	a368      	add	r3, pc, #416	@ (adr r3, 8005a30 <_dtoa_r+0x2b8>)
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	f7fa fc6a 	bl	800016c <__adddf3>
 8005898:	4604      	mov	r4, r0
 800589a:	4630      	mov	r0, r6
 800589c:	460d      	mov	r5, r1
 800589e:	f7fa fdb1 	bl	8000404 <__aeabi_i2d>
 80058a2:	a365      	add	r3, pc, #404	@ (adr r3, 8005a38 <_dtoa_r+0x2c0>)
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	f7fa fe16 	bl	80004d8 <__aeabi_dmul>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4620      	mov	r0, r4
 80058b2:	4629      	mov	r1, r5
 80058b4:	f7fa fc5a 	bl	800016c <__adddf3>
 80058b8:	4604      	mov	r4, r0
 80058ba:	460d      	mov	r5, r1
 80058bc:	f7fb f8bc 	bl	8000a38 <__aeabi_d2iz>
 80058c0:	2200      	movs	r2, #0
 80058c2:	4607      	mov	r7, r0
 80058c4:	2300      	movs	r3, #0
 80058c6:	4620      	mov	r0, r4
 80058c8:	4629      	mov	r1, r5
 80058ca:	f7fb f877 	bl	80009bc <__aeabi_dcmplt>
 80058ce:	b140      	cbz	r0, 80058e2 <_dtoa_r+0x16a>
 80058d0:	4638      	mov	r0, r7
 80058d2:	f7fa fd97 	bl	8000404 <__aeabi_i2d>
 80058d6:	4622      	mov	r2, r4
 80058d8:	462b      	mov	r3, r5
 80058da:	f7fb f865 	bl	80009a8 <__aeabi_dcmpeq>
 80058de:	b900      	cbnz	r0, 80058e2 <_dtoa_r+0x16a>
 80058e0:	3f01      	subs	r7, #1
 80058e2:	2f16      	cmp	r7, #22
 80058e4:	d853      	bhi.n	800598e <_dtoa_r+0x216>
 80058e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058ea:	4b5c      	ldr	r3, [pc, #368]	@ (8005a5c <_dtoa_r+0x2e4>)
 80058ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f7fb f862 	bl	80009bc <__aeabi_dcmplt>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d04a      	beq.n	8005992 <_dtoa_r+0x21a>
 80058fc:	2300      	movs	r3, #0
 80058fe:	3f01      	subs	r7, #1
 8005900:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005902:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005904:	1b9b      	subs	r3, r3, r6
 8005906:	1e5a      	subs	r2, r3, #1
 8005908:	bf46      	itte	mi
 800590a:	f1c3 0801 	rsbmi	r8, r3, #1
 800590e:	2300      	movmi	r3, #0
 8005910:	f04f 0800 	movpl.w	r8, #0
 8005914:	9209      	str	r2, [sp, #36]	@ 0x24
 8005916:	bf48      	it	mi
 8005918:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800591a:	2f00      	cmp	r7, #0
 800591c:	db3b      	blt.n	8005996 <_dtoa_r+0x21e>
 800591e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005920:	970e      	str	r7, [sp, #56]	@ 0x38
 8005922:	443b      	add	r3, r7
 8005924:	9309      	str	r3, [sp, #36]	@ 0x24
 8005926:	2300      	movs	r3, #0
 8005928:	930a      	str	r3, [sp, #40]	@ 0x28
 800592a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800592c:	2b09      	cmp	r3, #9
 800592e:	d866      	bhi.n	80059fe <_dtoa_r+0x286>
 8005930:	2b05      	cmp	r3, #5
 8005932:	bfc4      	itt	gt
 8005934:	3b04      	subgt	r3, #4
 8005936:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005938:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800593a:	bfc8      	it	gt
 800593c:	2400      	movgt	r4, #0
 800593e:	f1a3 0302 	sub.w	r3, r3, #2
 8005942:	bfd8      	it	le
 8005944:	2401      	movle	r4, #1
 8005946:	2b03      	cmp	r3, #3
 8005948:	d864      	bhi.n	8005a14 <_dtoa_r+0x29c>
 800594a:	e8df f003 	tbb	[pc, r3]
 800594e:	382b      	.short	0x382b
 8005950:	5636      	.short	0x5636
 8005952:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005956:	441e      	add	r6, r3
 8005958:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800595c:	2b20      	cmp	r3, #32
 800595e:	bfc1      	itttt	gt
 8005960:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005964:	fa08 f803 	lslgt.w	r8, r8, r3
 8005968:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800596c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005970:	bfd6      	itet	le
 8005972:	f1c3 0320 	rsble	r3, r3, #32
 8005976:	ea48 0003 	orrgt.w	r0, r8, r3
 800597a:	fa04 f003 	lslle.w	r0, r4, r3
 800597e:	f7fa fd31 	bl	80003e4 <__aeabi_ui2d>
 8005982:	2201      	movs	r2, #1
 8005984:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005988:	3e01      	subs	r6, #1
 800598a:	9212      	str	r2, [sp, #72]	@ 0x48
 800598c:	e775      	b.n	800587a <_dtoa_r+0x102>
 800598e:	2301      	movs	r3, #1
 8005990:	e7b6      	b.n	8005900 <_dtoa_r+0x188>
 8005992:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005994:	e7b5      	b.n	8005902 <_dtoa_r+0x18a>
 8005996:	427b      	negs	r3, r7
 8005998:	930a      	str	r3, [sp, #40]	@ 0x28
 800599a:	2300      	movs	r3, #0
 800599c:	eba8 0807 	sub.w	r8, r8, r7
 80059a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80059a2:	e7c2      	b.n	800592a <_dtoa_r+0x1b2>
 80059a4:	2300      	movs	r3, #0
 80059a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	dc35      	bgt.n	8005a1a <_dtoa_r+0x2a2>
 80059ae:	2301      	movs	r3, #1
 80059b0:	461a      	mov	r2, r3
 80059b2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80059b6:	9221      	str	r2, [sp, #132]	@ 0x84
 80059b8:	e00b      	b.n	80059d2 <_dtoa_r+0x25a>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e7f3      	b.n	80059a6 <_dtoa_r+0x22e>
 80059be:	2300      	movs	r3, #0
 80059c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	9308      	str	r3, [sp, #32]
 80059c8:	3301      	adds	r3, #1
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	9307      	str	r3, [sp, #28]
 80059ce:	bfb8      	it	lt
 80059d0:	2301      	movlt	r3, #1
 80059d2:	2100      	movs	r1, #0
 80059d4:	2204      	movs	r2, #4
 80059d6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80059da:	f102 0514 	add.w	r5, r2, #20
 80059de:	429d      	cmp	r5, r3
 80059e0:	d91f      	bls.n	8005a22 <_dtoa_r+0x2aa>
 80059e2:	6041      	str	r1, [r0, #4]
 80059e4:	4658      	mov	r0, fp
 80059e6:	f000 fd8d 	bl	8006504 <_Balloc>
 80059ea:	4682      	mov	sl, r0
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d139      	bne.n	8005a64 <_dtoa_r+0x2ec>
 80059f0:	4602      	mov	r2, r0
 80059f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80059f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a60 <_dtoa_r+0x2e8>)
 80059f8:	e6d2      	b.n	80057a0 <_dtoa_r+0x28>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e7e0      	b.n	80059c0 <_dtoa_r+0x248>
 80059fe:	2401      	movs	r4, #1
 8005a00:	2300      	movs	r3, #0
 8005a02:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005a04:	9320      	str	r3, [sp, #128]	@ 0x80
 8005a06:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005a10:	2312      	movs	r3, #18
 8005a12:	e7d0      	b.n	80059b6 <_dtoa_r+0x23e>
 8005a14:	2301      	movs	r3, #1
 8005a16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a18:	e7f5      	b.n	8005a06 <_dtoa_r+0x28e>
 8005a1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005a20:	e7d7      	b.n	80059d2 <_dtoa_r+0x25a>
 8005a22:	3101      	adds	r1, #1
 8005a24:	0052      	lsls	r2, r2, #1
 8005a26:	e7d8      	b.n	80059da <_dtoa_r+0x262>
 8005a28:	636f4361 	.word	0x636f4361
 8005a2c:	3fd287a7 	.word	0x3fd287a7
 8005a30:	8b60c8b3 	.word	0x8b60c8b3
 8005a34:	3fc68a28 	.word	0x3fc68a28
 8005a38:	509f79fb 	.word	0x509f79fb
 8005a3c:	3fd34413 	.word	0x3fd34413
 8005a40:	0800743f 	.word	0x0800743f
 8005a44:	08007456 	.word	0x08007456
 8005a48:	7ff00000 	.word	0x7ff00000
 8005a4c:	0800743b 	.word	0x0800743b
 8005a50:	0800740f 	.word	0x0800740f
 8005a54:	0800740e 	.word	0x0800740e
 8005a58:	3ff80000 	.word	0x3ff80000
 8005a5c:	08007550 	.word	0x08007550
 8005a60:	080074ae 	.word	0x080074ae
 8005a64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a68:	6018      	str	r0, [r3, #0]
 8005a6a:	9b07      	ldr	r3, [sp, #28]
 8005a6c:	2b0e      	cmp	r3, #14
 8005a6e:	f200 80a4 	bhi.w	8005bba <_dtoa_r+0x442>
 8005a72:	2c00      	cmp	r4, #0
 8005a74:	f000 80a1 	beq.w	8005bba <_dtoa_r+0x442>
 8005a78:	2f00      	cmp	r7, #0
 8005a7a:	dd33      	ble.n	8005ae4 <_dtoa_r+0x36c>
 8005a7c:	4b86      	ldr	r3, [pc, #536]	@ (8005c98 <_dtoa_r+0x520>)
 8005a7e:	f007 020f 	and.w	r2, r7, #15
 8005a82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a86:	05f8      	lsls	r0, r7, #23
 8005a88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a8c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a94:	d516      	bpl.n	8005ac4 <_dtoa_r+0x34c>
 8005a96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a9a:	4b80      	ldr	r3, [pc, #512]	@ (8005c9c <_dtoa_r+0x524>)
 8005a9c:	2603      	movs	r6, #3
 8005a9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005aa2:	f7fa fe43 	bl	800072c <__aeabi_ddiv>
 8005aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aaa:	f004 040f 	and.w	r4, r4, #15
 8005aae:	4d7b      	ldr	r5, [pc, #492]	@ (8005c9c <_dtoa_r+0x524>)
 8005ab0:	b954      	cbnz	r4, 8005ac8 <_dtoa_r+0x350>
 8005ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aba:	f7fa fe37 	bl	800072c <__aeabi_ddiv>
 8005abe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ac2:	e028      	b.n	8005b16 <_dtoa_r+0x39e>
 8005ac4:	2602      	movs	r6, #2
 8005ac6:	e7f2      	b.n	8005aae <_dtoa_r+0x336>
 8005ac8:	07e1      	lsls	r1, r4, #31
 8005aca:	d508      	bpl.n	8005ade <_dtoa_r+0x366>
 8005acc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ad0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ad4:	f7fa fd00 	bl	80004d8 <__aeabi_dmul>
 8005ad8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005adc:	3601      	adds	r6, #1
 8005ade:	1064      	asrs	r4, r4, #1
 8005ae0:	3508      	adds	r5, #8
 8005ae2:	e7e5      	b.n	8005ab0 <_dtoa_r+0x338>
 8005ae4:	f000 80d2 	beq.w	8005c8c <_dtoa_r+0x514>
 8005ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005aec:	427c      	negs	r4, r7
 8005aee:	4b6a      	ldr	r3, [pc, #424]	@ (8005c98 <_dtoa_r+0x520>)
 8005af0:	f004 020f 	and.w	r2, r4, #15
 8005af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	f7fa fcec 	bl	80004d8 <__aeabi_dmul>
 8005b00:	2602      	movs	r6, #2
 8005b02:	2300      	movs	r3, #0
 8005b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b08:	4d64      	ldr	r5, [pc, #400]	@ (8005c9c <_dtoa_r+0x524>)
 8005b0a:	1124      	asrs	r4, r4, #4
 8005b0c:	2c00      	cmp	r4, #0
 8005b0e:	f040 80b2 	bne.w	8005c76 <_dtoa_r+0x4fe>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1d3      	bne.n	8005abe <_dtoa_r+0x346>
 8005b16:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 80b7 	beq.w	8005c90 <_dtoa_r+0x518>
 8005b22:	2200      	movs	r2, #0
 8005b24:	4620      	mov	r0, r4
 8005b26:	4629      	mov	r1, r5
 8005b28:	4b5d      	ldr	r3, [pc, #372]	@ (8005ca0 <_dtoa_r+0x528>)
 8005b2a:	f7fa ff47 	bl	80009bc <__aeabi_dcmplt>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	f000 80ae 	beq.w	8005c90 <_dtoa_r+0x518>
 8005b34:	9b07      	ldr	r3, [sp, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 80aa 	beq.w	8005c90 <_dtoa_r+0x518>
 8005b3c:	9b08      	ldr	r3, [sp, #32]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	dd37      	ble.n	8005bb2 <_dtoa_r+0x43a>
 8005b42:	1e7b      	subs	r3, r7, #1
 8005b44:	4620      	mov	r0, r4
 8005b46:	9304      	str	r3, [sp, #16]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	4b55      	ldr	r3, [pc, #340]	@ (8005ca4 <_dtoa_r+0x52c>)
 8005b4e:	f7fa fcc3 	bl	80004d8 <__aeabi_dmul>
 8005b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b56:	9c08      	ldr	r4, [sp, #32]
 8005b58:	3601      	adds	r6, #1
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f7fa fc52 	bl	8000404 <__aeabi_i2d>
 8005b60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b64:	f7fa fcb8 	bl	80004d8 <__aeabi_dmul>
 8005b68:	2200      	movs	r2, #0
 8005b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8005ca8 <_dtoa_r+0x530>)
 8005b6c:	f7fa fafe 	bl	800016c <__adddf3>
 8005b70:	4605      	mov	r5, r0
 8005b72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005b76:	2c00      	cmp	r4, #0
 8005b78:	f040 809a 	bne.w	8005cb0 <_dtoa_r+0x538>
 8005b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b80:	2200      	movs	r2, #0
 8005b82:	4b4a      	ldr	r3, [pc, #296]	@ (8005cac <_dtoa_r+0x534>)
 8005b84:	f7fa faf0 	bl	8000168 <__aeabi_dsub>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b90:	462a      	mov	r2, r5
 8005b92:	4633      	mov	r3, r6
 8005b94:	f7fa ff30 	bl	80009f8 <__aeabi_dcmpgt>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	f040 828e 	bne.w	80060ba <_dtoa_r+0x942>
 8005b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ba2:	462a      	mov	r2, r5
 8005ba4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ba8:	f7fa ff08 	bl	80009bc <__aeabi_dcmplt>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	f040 8127 	bne.w	8005e00 <_dtoa_r+0x688>
 8005bb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005bb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005bba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f2c0 8163 	blt.w	8005e88 <_dtoa_r+0x710>
 8005bc2:	2f0e      	cmp	r7, #14
 8005bc4:	f300 8160 	bgt.w	8005e88 <_dtoa_r+0x710>
 8005bc8:	4b33      	ldr	r3, [pc, #204]	@ (8005c98 <_dtoa_r+0x520>)
 8005bca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005bce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bd2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005bd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	da03      	bge.n	8005be4 <_dtoa_r+0x46c>
 8005bdc:	9b07      	ldr	r3, [sp, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f340 8100 	ble.w	8005de4 <_dtoa_r+0x66c>
 8005be4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005be8:	4656      	mov	r6, sl
 8005bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f7fa fd9b 	bl	800072c <__aeabi_ddiv>
 8005bf6:	f7fa ff1f 	bl	8000a38 <__aeabi_d2iz>
 8005bfa:	4680      	mov	r8, r0
 8005bfc:	f7fa fc02 	bl	8000404 <__aeabi_i2d>
 8005c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c04:	f7fa fc68 	bl	80004d8 <__aeabi_dmul>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	4629      	mov	r1, r5
 8005c10:	f7fa faaa 	bl	8000168 <__aeabi_dsub>
 8005c14:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c18:	9d07      	ldr	r5, [sp, #28]
 8005c1a:	f806 4b01 	strb.w	r4, [r6], #1
 8005c1e:	eba6 040a 	sub.w	r4, r6, sl
 8005c22:	42a5      	cmp	r5, r4
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	f040 8116 	bne.w	8005e58 <_dtoa_r+0x6e0>
 8005c2c:	f7fa fa9e 	bl	800016c <__adddf3>
 8005c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c34:	4604      	mov	r4, r0
 8005c36:	460d      	mov	r5, r1
 8005c38:	f7fa fede 	bl	80009f8 <__aeabi_dcmpgt>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	f040 80f8 	bne.w	8005e32 <_dtoa_r+0x6ba>
 8005c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c46:	4620      	mov	r0, r4
 8005c48:	4629      	mov	r1, r5
 8005c4a:	f7fa fead 	bl	80009a8 <__aeabi_dcmpeq>
 8005c4e:	b118      	cbz	r0, 8005c58 <_dtoa_r+0x4e0>
 8005c50:	f018 0f01 	tst.w	r8, #1
 8005c54:	f040 80ed 	bne.w	8005e32 <_dtoa_r+0x6ba>
 8005c58:	4649      	mov	r1, r9
 8005c5a:	4658      	mov	r0, fp
 8005c5c:	f000 fc92 	bl	8006584 <_Bfree>
 8005c60:	2300      	movs	r3, #0
 8005c62:	7033      	strb	r3, [r6, #0]
 8005c64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005c66:	3701      	adds	r7, #1
 8005c68:	601f      	str	r7, [r3, #0]
 8005c6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 8320 	beq.w	80062b2 <_dtoa_r+0xb3a>
 8005c72:	601e      	str	r6, [r3, #0]
 8005c74:	e31d      	b.n	80062b2 <_dtoa_r+0xb3a>
 8005c76:	07e2      	lsls	r2, r4, #31
 8005c78:	d505      	bpl.n	8005c86 <_dtoa_r+0x50e>
 8005c7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c7e:	f7fa fc2b 	bl	80004d8 <__aeabi_dmul>
 8005c82:	2301      	movs	r3, #1
 8005c84:	3601      	adds	r6, #1
 8005c86:	1064      	asrs	r4, r4, #1
 8005c88:	3508      	adds	r5, #8
 8005c8a:	e73f      	b.n	8005b0c <_dtoa_r+0x394>
 8005c8c:	2602      	movs	r6, #2
 8005c8e:	e742      	b.n	8005b16 <_dtoa_r+0x39e>
 8005c90:	9c07      	ldr	r4, [sp, #28]
 8005c92:	9704      	str	r7, [sp, #16]
 8005c94:	e761      	b.n	8005b5a <_dtoa_r+0x3e2>
 8005c96:	bf00      	nop
 8005c98:	08007550 	.word	0x08007550
 8005c9c:	08007528 	.word	0x08007528
 8005ca0:	3ff00000 	.word	0x3ff00000
 8005ca4:	40240000 	.word	0x40240000
 8005ca8:	401c0000 	.word	0x401c0000
 8005cac:	40140000 	.word	0x40140000
 8005cb0:	4b70      	ldr	r3, [pc, #448]	@ (8005e74 <_dtoa_r+0x6fc>)
 8005cb2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cbc:	4454      	add	r4, sl
 8005cbe:	2900      	cmp	r1, #0
 8005cc0:	d045      	beq.n	8005d4e <_dtoa_r+0x5d6>
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	496c      	ldr	r1, [pc, #432]	@ (8005e78 <_dtoa_r+0x700>)
 8005cc6:	f7fa fd31 	bl	800072c <__aeabi_ddiv>
 8005cca:	4633      	mov	r3, r6
 8005ccc:	462a      	mov	r2, r5
 8005cce:	f7fa fa4b 	bl	8000168 <__aeabi_dsub>
 8005cd2:	4656      	mov	r6, sl
 8005cd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cdc:	f7fa feac 	bl	8000a38 <__aeabi_d2iz>
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	f7fa fb8f 	bl	8000404 <__aeabi_i2d>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cee:	f7fa fa3b 	bl	8000168 <__aeabi_dsub>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	3530      	adds	r5, #48	@ 0x30
 8005cf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d00:	f806 5b01 	strb.w	r5, [r6], #1
 8005d04:	f7fa fe5a 	bl	80009bc <__aeabi_dcmplt>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d163      	bne.n	8005dd4 <_dtoa_r+0x65c>
 8005d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d10:	2000      	movs	r0, #0
 8005d12:	495a      	ldr	r1, [pc, #360]	@ (8005e7c <_dtoa_r+0x704>)
 8005d14:	f7fa fa28 	bl	8000168 <__aeabi_dsub>
 8005d18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d1c:	f7fa fe4e 	bl	80009bc <__aeabi_dcmplt>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	f040 8087 	bne.w	8005e34 <_dtoa_r+0x6bc>
 8005d26:	42a6      	cmp	r6, r4
 8005d28:	f43f af43 	beq.w	8005bb2 <_dtoa_r+0x43a>
 8005d2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d30:	2200      	movs	r2, #0
 8005d32:	4b53      	ldr	r3, [pc, #332]	@ (8005e80 <_dtoa_r+0x708>)
 8005d34:	f7fa fbd0 	bl	80004d8 <__aeabi_dmul>
 8005d38:	2200      	movs	r2, #0
 8005d3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d42:	4b4f      	ldr	r3, [pc, #316]	@ (8005e80 <_dtoa_r+0x708>)
 8005d44:	f7fa fbc8 	bl	80004d8 <__aeabi_dmul>
 8005d48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d4c:	e7c4      	b.n	8005cd8 <_dtoa_r+0x560>
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4628      	mov	r0, r5
 8005d52:	f7fa fbc1 	bl	80004d8 <__aeabi_dmul>
 8005d56:	4656      	mov	r6, sl
 8005d58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d5c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d62:	f7fa fe69 	bl	8000a38 <__aeabi_d2iz>
 8005d66:	4605      	mov	r5, r0
 8005d68:	f7fa fb4c 	bl	8000404 <__aeabi_i2d>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d74:	f7fa f9f8 	bl	8000168 <__aeabi_dsub>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	3530      	adds	r5, #48	@ 0x30
 8005d7e:	f806 5b01 	strb.w	r5, [r6], #1
 8005d82:	42a6      	cmp	r6, r4
 8005d84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	d124      	bne.n	8005dd8 <_dtoa_r+0x660>
 8005d8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d92:	4b39      	ldr	r3, [pc, #228]	@ (8005e78 <_dtoa_r+0x700>)
 8005d94:	f7fa f9ea 	bl	800016c <__adddf3>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005da0:	f7fa fe2a 	bl	80009f8 <__aeabi_dcmpgt>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d145      	bne.n	8005e34 <_dtoa_r+0x6bc>
 8005da8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005dac:	2000      	movs	r0, #0
 8005dae:	4932      	ldr	r1, [pc, #200]	@ (8005e78 <_dtoa_r+0x700>)
 8005db0:	f7fa f9da 	bl	8000168 <__aeabi_dsub>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dbc:	f7fa fdfe 	bl	80009bc <__aeabi_dcmplt>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	f43f aef6 	beq.w	8005bb2 <_dtoa_r+0x43a>
 8005dc6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005dc8:	1e73      	subs	r3, r6, #1
 8005dca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005dcc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005dd0:	2b30      	cmp	r3, #48	@ 0x30
 8005dd2:	d0f8      	beq.n	8005dc6 <_dtoa_r+0x64e>
 8005dd4:	9f04      	ldr	r7, [sp, #16]
 8005dd6:	e73f      	b.n	8005c58 <_dtoa_r+0x4e0>
 8005dd8:	4b29      	ldr	r3, [pc, #164]	@ (8005e80 <_dtoa_r+0x708>)
 8005dda:	f7fa fb7d 	bl	80004d8 <__aeabi_dmul>
 8005dde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005de2:	e7bc      	b.n	8005d5e <_dtoa_r+0x5e6>
 8005de4:	d10c      	bne.n	8005e00 <_dtoa_r+0x688>
 8005de6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dea:	2200      	movs	r2, #0
 8005dec:	4b25      	ldr	r3, [pc, #148]	@ (8005e84 <_dtoa_r+0x70c>)
 8005dee:	f7fa fb73 	bl	80004d8 <__aeabi_dmul>
 8005df2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005df6:	f7fa fdf5 	bl	80009e4 <__aeabi_dcmpge>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	f000 815b 	beq.w	80060b6 <_dtoa_r+0x93e>
 8005e00:	2400      	movs	r4, #0
 8005e02:	4625      	mov	r5, r4
 8005e04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e06:	4656      	mov	r6, sl
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	9304      	str	r3, [sp, #16]
 8005e0c:	2700      	movs	r7, #0
 8005e0e:	4621      	mov	r1, r4
 8005e10:	4658      	mov	r0, fp
 8005e12:	f000 fbb7 	bl	8006584 <_Bfree>
 8005e16:	2d00      	cmp	r5, #0
 8005e18:	d0dc      	beq.n	8005dd4 <_dtoa_r+0x65c>
 8005e1a:	b12f      	cbz	r7, 8005e28 <_dtoa_r+0x6b0>
 8005e1c:	42af      	cmp	r7, r5
 8005e1e:	d003      	beq.n	8005e28 <_dtoa_r+0x6b0>
 8005e20:	4639      	mov	r1, r7
 8005e22:	4658      	mov	r0, fp
 8005e24:	f000 fbae 	bl	8006584 <_Bfree>
 8005e28:	4629      	mov	r1, r5
 8005e2a:	4658      	mov	r0, fp
 8005e2c:	f000 fbaa 	bl	8006584 <_Bfree>
 8005e30:	e7d0      	b.n	8005dd4 <_dtoa_r+0x65c>
 8005e32:	9704      	str	r7, [sp, #16]
 8005e34:	4633      	mov	r3, r6
 8005e36:	461e      	mov	r6, r3
 8005e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e3c:	2a39      	cmp	r2, #57	@ 0x39
 8005e3e:	d107      	bne.n	8005e50 <_dtoa_r+0x6d8>
 8005e40:	459a      	cmp	sl, r3
 8005e42:	d1f8      	bne.n	8005e36 <_dtoa_r+0x6be>
 8005e44:	9a04      	ldr	r2, [sp, #16]
 8005e46:	3201      	adds	r2, #1
 8005e48:	9204      	str	r2, [sp, #16]
 8005e4a:	2230      	movs	r2, #48	@ 0x30
 8005e4c:	f88a 2000 	strb.w	r2, [sl]
 8005e50:	781a      	ldrb	r2, [r3, #0]
 8005e52:	3201      	adds	r2, #1
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	e7bd      	b.n	8005dd4 <_dtoa_r+0x65c>
 8005e58:	2200      	movs	r2, #0
 8005e5a:	4b09      	ldr	r3, [pc, #36]	@ (8005e80 <_dtoa_r+0x708>)
 8005e5c:	f7fa fb3c 	bl	80004d8 <__aeabi_dmul>
 8005e60:	2200      	movs	r2, #0
 8005e62:	2300      	movs	r3, #0
 8005e64:	4604      	mov	r4, r0
 8005e66:	460d      	mov	r5, r1
 8005e68:	f7fa fd9e 	bl	80009a8 <__aeabi_dcmpeq>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	f43f aebc 	beq.w	8005bea <_dtoa_r+0x472>
 8005e72:	e6f1      	b.n	8005c58 <_dtoa_r+0x4e0>
 8005e74:	08007550 	.word	0x08007550
 8005e78:	3fe00000 	.word	0x3fe00000
 8005e7c:	3ff00000 	.word	0x3ff00000
 8005e80:	40240000 	.word	0x40240000
 8005e84:	40140000 	.word	0x40140000
 8005e88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	f000 80db 	beq.w	8006046 <_dtoa_r+0x8ce>
 8005e90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005e92:	2a01      	cmp	r2, #1
 8005e94:	f300 80bf 	bgt.w	8006016 <_dtoa_r+0x89e>
 8005e98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e9a:	2a00      	cmp	r2, #0
 8005e9c:	f000 80b7 	beq.w	800600e <_dtoa_r+0x896>
 8005ea0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005ea4:	4646      	mov	r6, r8
 8005ea6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ea8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eaa:	2101      	movs	r1, #1
 8005eac:	441a      	add	r2, r3
 8005eae:	4658      	mov	r0, fp
 8005eb0:	4498      	add	r8, r3
 8005eb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eb4:	f000 fc1a 	bl	80066ec <__i2b>
 8005eb8:	4605      	mov	r5, r0
 8005eba:	b15e      	cbz	r6, 8005ed4 <_dtoa_r+0x75c>
 8005ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	dd08      	ble.n	8005ed4 <_dtoa_r+0x75c>
 8005ec2:	42b3      	cmp	r3, r6
 8005ec4:	bfa8      	it	ge
 8005ec6:	4633      	movge	r3, r6
 8005ec8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eca:	eba8 0803 	sub.w	r8, r8, r3
 8005ece:	1af6      	subs	r6, r6, r3
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ed6:	b1f3      	cbz	r3, 8005f16 <_dtoa_r+0x79e>
 8005ed8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 80b7 	beq.w	800604e <_dtoa_r+0x8d6>
 8005ee0:	b18c      	cbz	r4, 8005f06 <_dtoa_r+0x78e>
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	4658      	mov	r0, fp
 8005ee8:	f000 fcbe 	bl	8006868 <__pow5mult>
 8005eec:	464a      	mov	r2, r9
 8005eee:	4601      	mov	r1, r0
 8005ef0:	4605      	mov	r5, r0
 8005ef2:	4658      	mov	r0, fp
 8005ef4:	f000 fc10 	bl	8006718 <__multiply>
 8005ef8:	4649      	mov	r1, r9
 8005efa:	9004      	str	r0, [sp, #16]
 8005efc:	4658      	mov	r0, fp
 8005efe:	f000 fb41 	bl	8006584 <_Bfree>
 8005f02:	9b04      	ldr	r3, [sp, #16]
 8005f04:	4699      	mov	r9, r3
 8005f06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f08:	1b1a      	subs	r2, r3, r4
 8005f0a:	d004      	beq.n	8005f16 <_dtoa_r+0x79e>
 8005f0c:	4649      	mov	r1, r9
 8005f0e:	4658      	mov	r0, fp
 8005f10:	f000 fcaa 	bl	8006868 <__pow5mult>
 8005f14:	4681      	mov	r9, r0
 8005f16:	2101      	movs	r1, #1
 8005f18:	4658      	mov	r0, fp
 8005f1a:	f000 fbe7 	bl	80066ec <__i2b>
 8005f1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f20:	4604      	mov	r4, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 81c9 	beq.w	80062ba <_dtoa_r+0xb42>
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	4658      	mov	r0, fp
 8005f2e:	f000 fc9b 	bl	8006868 <__pow5mult>
 8005f32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f34:	4604      	mov	r4, r0
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	f300 808f 	bgt.w	800605a <_dtoa_r+0x8e2>
 8005f3c:	9b02      	ldr	r3, [sp, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f040 8087 	bne.w	8006052 <_dtoa_r+0x8da>
 8005f44:	9b03      	ldr	r3, [sp, #12]
 8005f46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f040 8083 	bne.w	8006056 <_dtoa_r+0x8de>
 8005f50:	9b03      	ldr	r3, [sp, #12]
 8005f52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f56:	0d1b      	lsrs	r3, r3, #20
 8005f58:	051b      	lsls	r3, r3, #20
 8005f5a:	b12b      	cbz	r3, 8005f68 <_dtoa_r+0x7f0>
 8005f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f5e:	f108 0801 	add.w	r8, r8, #1
 8005f62:	3301      	adds	r3, #1
 8005f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f66:	2301      	movs	r3, #1
 8005f68:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 81aa 	beq.w	80062c6 <_dtoa_r+0xb4e>
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f78:	6918      	ldr	r0, [r3, #16]
 8005f7a:	f000 fb6b 	bl	8006654 <__hi0bits>
 8005f7e:	f1c0 0020 	rsb	r0, r0, #32
 8005f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f84:	4418      	add	r0, r3
 8005f86:	f010 001f 	ands.w	r0, r0, #31
 8005f8a:	d071      	beq.n	8006070 <_dtoa_r+0x8f8>
 8005f8c:	f1c0 0320 	rsb	r3, r0, #32
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	dd65      	ble.n	8006060 <_dtoa_r+0x8e8>
 8005f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f96:	f1c0 001c 	rsb	r0, r0, #28
 8005f9a:	4403      	add	r3, r0
 8005f9c:	4480      	add	r8, r0
 8005f9e:	4406      	add	r6, r0
 8005fa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa2:	f1b8 0f00 	cmp.w	r8, #0
 8005fa6:	dd05      	ble.n	8005fb4 <_dtoa_r+0x83c>
 8005fa8:	4649      	mov	r1, r9
 8005faa:	4642      	mov	r2, r8
 8005fac:	4658      	mov	r0, fp
 8005fae:	f000 fcb5 	bl	800691c <__lshift>
 8005fb2:	4681      	mov	r9, r0
 8005fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	dd05      	ble.n	8005fc6 <_dtoa_r+0x84e>
 8005fba:	4621      	mov	r1, r4
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4658      	mov	r0, fp
 8005fc0:	f000 fcac 	bl	800691c <__lshift>
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d053      	beq.n	8006074 <_dtoa_r+0x8fc>
 8005fcc:	4621      	mov	r1, r4
 8005fce:	4648      	mov	r0, r9
 8005fd0:	f000 fd10 	bl	80069f4 <__mcmp>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	da4d      	bge.n	8006074 <_dtoa_r+0x8fc>
 8005fd8:	1e7b      	subs	r3, r7, #1
 8005fda:	4649      	mov	r1, r9
 8005fdc:	9304      	str	r3, [sp, #16]
 8005fde:	220a      	movs	r2, #10
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4658      	mov	r0, fp
 8005fe4:	f000 faf0 	bl	80065c8 <__multadd>
 8005fe8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fea:	4681      	mov	r9, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 816c 	beq.w	80062ca <_dtoa_r+0xb52>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	220a      	movs	r2, #10
 8005ff8:	4658      	mov	r0, fp
 8005ffa:	f000 fae5 	bl	80065c8 <__multadd>
 8005ffe:	9b08      	ldr	r3, [sp, #32]
 8006000:	4605      	mov	r5, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	dc61      	bgt.n	80060ca <_dtoa_r+0x952>
 8006006:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006008:	2b02      	cmp	r3, #2
 800600a:	dc3b      	bgt.n	8006084 <_dtoa_r+0x90c>
 800600c:	e05d      	b.n	80060ca <_dtoa_r+0x952>
 800600e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006010:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006014:	e746      	b.n	8005ea4 <_dtoa_r+0x72c>
 8006016:	9b07      	ldr	r3, [sp, #28]
 8006018:	1e5c      	subs	r4, r3, #1
 800601a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800601c:	42a3      	cmp	r3, r4
 800601e:	bfbf      	itttt	lt
 8006020:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006022:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006024:	1ae3      	sublt	r3, r4, r3
 8006026:	18d2      	addlt	r2, r2, r3
 8006028:	bfa8      	it	ge
 800602a:	1b1c      	subge	r4, r3, r4
 800602c:	9b07      	ldr	r3, [sp, #28]
 800602e:	bfbe      	ittt	lt
 8006030:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006032:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006034:	2400      	movlt	r4, #0
 8006036:	2b00      	cmp	r3, #0
 8006038:	bfb5      	itete	lt
 800603a:	eba8 0603 	sublt.w	r6, r8, r3
 800603e:	4646      	movge	r6, r8
 8006040:	2300      	movlt	r3, #0
 8006042:	9b07      	ldrge	r3, [sp, #28]
 8006044:	e730      	b.n	8005ea8 <_dtoa_r+0x730>
 8006046:	4646      	mov	r6, r8
 8006048:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800604a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800604c:	e735      	b.n	8005eba <_dtoa_r+0x742>
 800604e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006050:	e75c      	b.n	8005f0c <_dtoa_r+0x794>
 8006052:	2300      	movs	r3, #0
 8006054:	e788      	b.n	8005f68 <_dtoa_r+0x7f0>
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	e786      	b.n	8005f68 <_dtoa_r+0x7f0>
 800605a:	2300      	movs	r3, #0
 800605c:	930a      	str	r3, [sp, #40]	@ 0x28
 800605e:	e788      	b.n	8005f72 <_dtoa_r+0x7fa>
 8006060:	d09f      	beq.n	8005fa2 <_dtoa_r+0x82a>
 8006062:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006064:	331c      	adds	r3, #28
 8006066:	441a      	add	r2, r3
 8006068:	4498      	add	r8, r3
 800606a:	441e      	add	r6, r3
 800606c:	9209      	str	r2, [sp, #36]	@ 0x24
 800606e:	e798      	b.n	8005fa2 <_dtoa_r+0x82a>
 8006070:	4603      	mov	r3, r0
 8006072:	e7f6      	b.n	8006062 <_dtoa_r+0x8ea>
 8006074:	9b07      	ldr	r3, [sp, #28]
 8006076:	9704      	str	r7, [sp, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	dc20      	bgt.n	80060be <_dtoa_r+0x946>
 800607c:	9308      	str	r3, [sp, #32]
 800607e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006080:	2b02      	cmp	r3, #2
 8006082:	dd1e      	ble.n	80060c2 <_dtoa_r+0x94a>
 8006084:	9b08      	ldr	r3, [sp, #32]
 8006086:	2b00      	cmp	r3, #0
 8006088:	f47f aebc 	bne.w	8005e04 <_dtoa_r+0x68c>
 800608c:	4621      	mov	r1, r4
 800608e:	2205      	movs	r2, #5
 8006090:	4658      	mov	r0, fp
 8006092:	f000 fa99 	bl	80065c8 <__multadd>
 8006096:	4601      	mov	r1, r0
 8006098:	4604      	mov	r4, r0
 800609a:	4648      	mov	r0, r9
 800609c:	f000 fcaa 	bl	80069f4 <__mcmp>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	f77f aeaf 	ble.w	8005e04 <_dtoa_r+0x68c>
 80060a6:	2331      	movs	r3, #49	@ 0x31
 80060a8:	4656      	mov	r6, sl
 80060aa:	f806 3b01 	strb.w	r3, [r6], #1
 80060ae:	9b04      	ldr	r3, [sp, #16]
 80060b0:	3301      	adds	r3, #1
 80060b2:	9304      	str	r3, [sp, #16]
 80060b4:	e6aa      	b.n	8005e0c <_dtoa_r+0x694>
 80060b6:	9c07      	ldr	r4, [sp, #28]
 80060b8:	9704      	str	r7, [sp, #16]
 80060ba:	4625      	mov	r5, r4
 80060bc:	e7f3      	b.n	80060a6 <_dtoa_r+0x92e>
 80060be:	9b07      	ldr	r3, [sp, #28]
 80060c0:	9308      	str	r3, [sp, #32]
 80060c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8104 	beq.w	80062d2 <_dtoa_r+0xb5a>
 80060ca:	2e00      	cmp	r6, #0
 80060cc:	dd05      	ble.n	80060da <_dtoa_r+0x962>
 80060ce:	4629      	mov	r1, r5
 80060d0:	4632      	mov	r2, r6
 80060d2:	4658      	mov	r0, fp
 80060d4:	f000 fc22 	bl	800691c <__lshift>
 80060d8:	4605      	mov	r5, r0
 80060da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d05a      	beq.n	8006196 <_dtoa_r+0xa1e>
 80060e0:	4658      	mov	r0, fp
 80060e2:	6869      	ldr	r1, [r5, #4]
 80060e4:	f000 fa0e 	bl	8006504 <_Balloc>
 80060e8:	4606      	mov	r6, r0
 80060ea:	b928      	cbnz	r0, 80060f8 <_dtoa_r+0x980>
 80060ec:	4602      	mov	r2, r0
 80060ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80060f2:	4b83      	ldr	r3, [pc, #524]	@ (8006300 <_dtoa_r+0xb88>)
 80060f4:	f7ff bb54 	b.w	80057a0 <_dtoa_r+0x28>
 80060f8:	692a      	ldr	r2, [r5, #16]
 80060fa:	f105 010c 	add.w	r1, r5, #12
 80060fe:	3202      	adds	r2, #2
 8006100:	0092      	lsls	r2, r2, #2
 8006102:	300c      	adds	r0, #12
 8006104:	f7ff faa1 	bl	800564a <memcpy>
 8006108:	2201      	movs	r2, #1
 800610a:	4631      	mov	r1, r6
 800610c:	4658      	mov	r0, fp
 800610e:	f000 fc05 	bl	800691c <__lshift>
 8006112:	462f      	mov	r7, r5
 8006114:	4605      	mov	r5, r0
 8006116:	f10a 0301 	add.w	r3, sl, #1
 800611a:	9307      	str	r3, [sp, #28]
 800611c:	9b08      	ldr	r3, [sp, #32]
 800611e:	4453      	add	r3, sl
 8006120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006122:	9b02      	ldr	r3, [sp, #8]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	930a      	str	r3, [sp, #40]	@ 0x28
 800612a:	9b07      	ldr	r3, [sp, #28]
 800612c:	4621      	mov	r1, r4
 800612e:	3b01      	subs	r3, #1
 8006130:	4648      	mov	r0, r9
 8006132:	9302      	str	r3, [sp, #8]
 8006134:	f7ff fa97 	bl	8005666 <quorem>
 8006138:	4639      	mov	r1, r7
 800613a:	9008      	str	r0, [sp, #32]
 800613c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006140:	4648      	mov	r0, r9
 8006142:	f000 fc57 	bl	80069f4 <__mcmp>
 8006146:	462a      	mov	r2, r5
 8006148:	9009      	str	r0, [sp, #36]	@ 0x24
 800614a:	4621      	mov	r1, r4
 800614c:	4658      	mov	r0, fp
 800614e:	f000 fc6d 	bl	8006a2c <__mdiff>
 8006152:	68c2      	ldr	r2, [r0, #12]
 8006154:	4606      	mov	r6, r0
 8006156:	bb02      	cbnz	r2, 800619a <_dtoa_r+0xa22>
 8006158:	4601      	mov	r1, r0
 800615a:	4648      	mov	r0, r9
 800615c:	f000 fc4a 	bl	80069f4 <__mcmp>
 8006160:	4602      	mov	r2, r0
 8006162:	4631      	mov	r1, r6
 8006164:	4658      	mov	r0, fp
 8006166:	920c      	str	r2, [sp, #48]	@ 0x30
 8006168:	f000 fa0c 	bl	8006584 <_Bfree>
 800616c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800616e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006170:	9e07      	ldr	r6, [sp, #28]
 8006172:	ea43 0102 	orr.w	r1, r3, r2
 8006176:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006178:	4319      	orrs	r1, r3
 800617a:	d110      	bne.n	800619e <_dtoa_r+0xa26>
 800617c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006180:	d029      	beq.n	80061d6 <_dtoa_r+0xa5e>
 8006182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006184:	2b00      	cmp	r3, #0
 8006186:	dd02      	ble.n	800618e <_dtoa_r+0xa16>
 8006188:	9b08      	ldr	r3, [sp, #32]
 800618a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800618e:	9b02      	ldr	r3, [sp, #8]
 8006190:	f883 8000 	strb.w	r8, [r3]
 8006194:	e63b      	b.n	8005e0e <_dtoa_r+0x696>
 8006196:	4628      	mov	r0, r5
 8006198:	e7bb      	b.n	8006112 <_dtoa_r+0x99a>
 800619a:	2201      	movs	r2, #1
 800619c:	e7e1      	b.n	8006162 <_dtoa_r+0x9ea>
 800619e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	db04      	blt.n	80061ae <_dtoa_r+0xa36>
 80061a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80061a6:	430b      	orrs	r3, r1
 80061a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061aa:	430b      	orrs	r3, r1
 80061ac:	d120      	bne.n	80061f0 <_dtoa_r+0xa78>
 80061ae:	2a00      	cmp	r2, #0
 80061b0:	dded      	ble.n	800618e <_dtoa_r+0xa16>
 80061b2:	4649      	mov	r1, r9
 80061b4:	2201      	movs	r2, #1
 80061b6:	4658      	mov	r0, fp
 80061b8:	f000 fbb0 	bl	800691c <__lshift>
 80061bc:	4621      	mov	r1, r4
 80061be:	4681      	mov	r9, r0
 80061c0:	f000 fc18 	bl	80069f4 <__mcmp>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	dc03      	bgt.n	80061d0 <_dtoa_r+0xa58>
 80061c8:	d1e1      	bne.n	800618e <_dtoa_r+0xa16>
 80061ca:	f018 0f01 	tst.w	r8, #1
 80061ce:	d0de      	beq.n	800618e <_dtoa_r+0xa16>
 80061d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061d4:	d1d8      	bne.n	8006188 <_dtoa_r+0xa10>
 80061d6:	2339      	movs	r3, #57	@ 0x39
 80061d8:	9a02      	ldr	r2, [sp, #8]
 80061da:	7013      	strb	r3, [r2, #0]
 80061dc:	4633      	mov	r3, r6
 80061de:	461e      	mov	r6, r3
 80061e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	2a39      	cmp	r2, #57	@ 0x39
 80061e8:	d052      	beq.n	8006290 <_dtoa_r+0xb18>
 80061ea:	3201      	adds	r2, #1
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	e60e      	b.n	8005e0e <_dtoa_r+0x696>
 80061f0:	2a00      	cmp	r2, #0
 80061f2:	dd07      	ble.n	8006204 <_dtoa_r+0xa8c>
 80061f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061f8:	d0ed      	beq.n	80061d6 <_dtoa_r+0xa5e>
 80061fa:	9a02      	ldr	r2, [sp, #8]
 80061fc:	f108 0301 	add.w	r3, r8, #1
 8006200:	7013      	strb	r3, [r2, #0]
 8006202:	e604      	b.n	8005e0e <_dtoa_r+0x696>
 8006204:	9b07      	ldr	r3, [sp, #28]
 8006206:	9a07      	ldr	r2, [sp, #28]
 8006208:	f803 8c01 	strb.w	r8, [r3, #-1]
 800620c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800620e:	4293      	cmp	r3, r2
 8006210:	d028      	beq.n	8006264 <_dtoa_r+0xaec>
 8006212:	4649      	mov	r1, r9
 8006214:	2300      	movs	r3, #0
 8006216:	220a      	movs	r2, #10
 8006218:	4658      	mov	r0, fp
 800621a:	f000 f9d5 	bl	80065c8 <__multadd>
 800621e:	42af      	cmp	r7, r5
 8006220:	4681      	mov	r9, r0
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	f04f 020a 	mov.w	r2, #10
 800622a:	4639      	mov	r1, r7
 800622c:	4658      	mov	r0, fp
 800622e:	d107      	bne.n	8006240 <_dtoa_r+0xac8>
 8006230:	f000 f9ca 	bl	80065c8 <__multadd>
 8006234:	4607      	mov	r7, r0
 8006236:	4605      	mov	r5, r0
 8006238:	9b07      	ldr	r3, [sp, #28]
 800623a:	3301      	adds	r3, #1
 800623c:	9307      	str	r3, [sp, #28]
 800623e:	e774      	b.n	800612a <_dtoa_r+0x9b2>
 8006240:	f000 f9c2 	bl	80065c8 <__multadd>
 8006244:	4629      	mov	r1, r5
 8006246:	4607      	mov	r7, r0
 8006248:	2300      	movs	r3, #0
 800624a:	220a      	movs	r2, #10
 800624c:	4658      	mov	r0, fp
 800624e:	f000 f9bb 	bl	80065c8 <__multadd>
 8006252:	4605      	mov	r5, r0
 8006254:	e7f0      	b.n	8006238 <_dtoa_r+0xac0>
 8006256:	9b08      	ldr	r3, [sp, #32]
 8006258:	2700      	movs	r7, #0
 800625a:	2b00      	cmp	r3, #0
 800625c:	bfcc      	ite	gt
 800625e:	461e      	movgt	r6, r3
 8006260:	2601      	movle	r6, #1
 8006262:	4456      	add	r6, sl
 8006264:	4649      	mov	r1, r9
 8006266:	2201      	movs	r2, #1
 8006268:	4658      	mov	r0, fp
 800626a:	f000 fb57 	bl	800691c <__lshift>
 800626e:	4621      	mov	r1, r4
 8006270:	4681      	mov	r9, r0
 8006272:	f000 fbbf 	bl	80069f4 <__mcmp>
 8006276:	2800      	cmp	r0, #0
 8006278:	dcb0      	bgt.n	80061dc <_dtoa_r+0xa64>
 800627a:	d102      	bne.n	8006282 <_dtoa_r+0xb0a>
 800627c:	f018 0f01 	tst.w	r8, #1
 8006280:	d1ac      	bne.n	80061dc <_dtoa_r+0xa64>
 8006282:	4633      	mov	r3, r6
 8006284:	461e      	mov	r6, r3
 8006286:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800628a:	2a30      	cmp	r2, #48	@ 0x30
 800628c:	d0fa      	beq.n	8006284 <_dtoa_r+0xb0c>
 800628e:	e5be      	b.n	8005e0e <_dtoa_r+0x696>
 8006290:	459a      	cmp	sl, r3
 8006292:	d1a4      	bne.n	80061de <_dtoa_r+0xa66>
 8006294:	9b04      	ldr	r3, [sp, #16]
 8006296:	3301      	adds	r3, #1
 8006298:	9304      	str	r3, [sp, #16]
 800629a:	2331      	movs	r3, #49	@ 0x31
 800629c:	f88a 3000 	strb.w	r3, [sl]
 80062a0:	e5b5      	b.n	8005e0e <_dtoa_r+0x696>
 80062a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80062a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006304 <_dtoa_r+0xb8c>
 80062a8:	b11b      	cbz	r3, 80062b2 <_dtoa_r+0xb3a>
 80062aa:	f10a 0308 	add.w	r3, sl, #8
 80062ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	4650      	mov	r0, sl
 80062b4:	b017      	add	sp, #92	@ 0x5c
 80062b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062bc:	2b01      	cmp	r3, #1
 80062be:	f77f ae3d 	ble.w	8005f3c <_dtoa_r+0x7c4>
 80062c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80062c6:	2001      	movs	r0, #1
 80062c8:	e65b      	b.n	8005f82 <_dtoa_r+0x80a>
 80062ca:	9b08      	ldr	r3, [sp, #32]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f77f aed6 	ble.w	800607e <_dtoa_r+0x906>
 80062d2:	4656      	mov	r6, sl
 80062d4:	4621      	mov	r1, r4
 80062d6:	4648      	mov	r0, r9
 80062d8:	f7ff f9c5 	bl	8005666 <quorem>
 80062dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80062e0:	9b08      	ldr	r3, [sp, #32]
 80062e2:	f806 8b01 	strb.w	r8, [r6], #1
 80062e6:	eba6 020a 	sub.w	r2, r6, sl
 80062ea:	4293      	cmp	r3, r2
 80062ec:	ddb3      	ble.n	8006256 <_dtoa_r+0xade>
 80062ee:	4649      	mov	r1, r9
 80062f0:	2300      	movs	r3, #0
 80062f2:	220a      	movs	r2, #10
 80062f4:	4658      	mov	r0, fp
 80062f6:	f000 f967 	bl	80065c8 <__multadd>
 80062fa:	4681      	mov	r9, r0
 80062fc:	e7ea      	b.n	80062d4 <_dtoa_r+0xb5c>
 80062fe:	bf00      	nop
 8006300:	080074ae 	.word	0x080074ae
 8006304:	08007432 	.word	0x08007432

08006308 <_free_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4605      	mov	r5, r0
 800630c:	2900      	cmp	r1, #0
 800630e:	d040      	beq.n	8006392 <_free_r+0x8a>
 8006310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006314:	1f0c      	subs	r4, r1, #4
 8006316:	2b00      	cmp	r3, #0
 8006318:	bfb8      	it	lt
 800631a:	18e4      	addlt	r4, r4, r3
 800631c:	f000 f8e6 	bl	80064ec <__malloc_lock>
 8006320:	4a1c      	ldr	r2, [pc, #112]	@ (8006394 <_free_r+0x8c>)
 8006322:	6813      	ldr	r3, [r2, #0]
 8006324:	b933      	cbnz	r3, 8006334 <_free_r+0x2c>
 8006326:	6063      	str	r3, [r4, #4]
 8006328:	6014      	str	r4, [r2, #0]
 800632a:	4628      	mov	r0, r5
 800632c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006330:	f000 b8e2 	b.w	80064f8 <__malloc_unlock>
 8006334:	42a3      	cmp	r3, r4
 8006336:	d908      	bls.n	800634a <_free_r+0x42>
 8006338:	6820      	ldr	r0, [r4, #0]
 800633a:	1821      	adds	r1, r4, r0
 800633c:	428b      	cmp	r3, r1
 800633e:	bf01      	itttt	eq
 8006340:	6819      	ldreq	r1, [r3, #0]
 8006342:	685b      	ldreq	r3, [r3, #4]
 8006344:	1809      	addeq	r1, r1, r0
 8006346:	6021      	streq	r1, [r4, #0]
 8006348:	e7ed      	b.n	8006326 <_free_r+0x1e>
 800634a:	461a      	mov	r2, r3
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	b10b      	cbz	r3, 8006354 <_free_r+0x4c>
 8006350:	42a3      	cmp	r3, r4
 8006352:	d9fa      	bls.n	800634a <_free_r+0x42>
 8006354:	6811      	ldr	r1, [r2, #0]
 8006356:	1850      	adds	r0, r2, r1
 8006358:	42a0      	cmp	r0, r4
 800635a:	d10b      	bne.n	8006374 <_free_r+0x6c>
 800635c:	6820      	ldr	r0, [r4, #0]
 800635e:	4401      	add	r1, r0
 8006360:	1850      	adds	r0, r2, r1
 8006362:	4283      	cmp	r3, r0
 8006364:	6011      	str	r1, [r2, #0]
 8006366:	d1e0      	bne.n	800632a <_free_r+0x22>
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	4408      	add	r0, r1
 800636e:	6010      	str	r0, [r2, #0]
 8006370:	6053      	str	r3, [r2, #4]
 8006372:	e7da      	b.n	800632a <_free_r+0x22>
 8006374:	d902      	bls.n	800637c <_free_r+0x74>
 8006376:	230c      	movs	r3, #12
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	e7d6      	b.n	800632a <_free_r+0x22>
 800637c:	6820      	ldr	r0, [r4, #0]
 800637e:	1821      	adds	r1, r4, r0
 8006380:	428b      	cmp	r3, r1
 8006382:	bf01      	itttt	eq
 8006384:	6819      	ldreq	r1, [r3, #0]
 8006386:	685b      	ldreq	r3, [r3, #4]
 8006388:	1809      	addeq	r1, r1, r0
 800638a:	6021      	streq	r1, [r4, #0]
 800638c:	6063      	str	r3, [r4, #4]
 800638e:	6054      	str	r4, [r2, #4]
 8006390:	e7cb      	b.n	800632a <_free_r+0x22>
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	20000888 	.word	0x20000888

08006398 <malloc>:
 8006398:	4b02      	ldr	r3, [pc, #8]	@ (80063a4 <malloc+0xc>)
 800639a:	4601      	mov	r1, r0
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	f000 b825 	b.w	80063ec <_malloc_r>
 80063a2:	bf00      	nop
 80063a4:	20000018 	.word	0x20000018

080063a8 <sbrk_aligned>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	4e0f      	ldr	r6, [pc, #60]	@ (80063e8 <sbrk_aligned+0x40>)
 80063ac:	460c      	mov	r4, r1
 80063ae:	6831      	ldr	r1, [r6, #0]
 80063b0:	4605      	mov	r5, r0
 80063b2:	b911      	cbnz	r1, 80063ba <sbrk_aligned+0x12>
 80063b4:	f000 fe92 	bl	80070dc <_sbrk_r>
 80063b8:	6030      	str	r0, [r6, #0]
 80063ba:	4621      	mov	r1, r4
 80063bc:	4628      	mov	r0, r5
 80063be:	f000 fe8d 	bl	80070dc <_sbrk_r>
 80063c2:	1c43      	adds	r3, r0, #1
 80063c4:	d103      	bne.n	80063ce <sbrk_aligned+0x26>
 80063c6:	f04f 34ff 	mov.w	r4, #4294967295
 80063ca:	4620      	mov	r0, r4
 80063cc:	bd70      	pop	{r4, r5, r6, pc}
 80063ce:	1cc4      	adds	r4, r0, #3
 80063d0:	f024 0403 	bic.w	r4, r4, #3
 80063d4:	42a0      	cmp	r0, r4
 80063d6:	d0f8      	beq.n	80063ca <sbrk_aligned+0x22>
 80063d8:	1a21      	subs	r1, r4, r0
 80063da:	4628      	mov	r0, r5
 80063dc:	f000 fe7e 	bl	80070dc <_sbrk_r>
 80063e0:	3001      	adds	r0, #1
 80063e2:	d1f2      	bne.n	80063ca <sbrk_aligned+0x22>
 80063e4:	e7ef      	b.n	80063c6 <sbrk_aligned+0x1e>
 80063e6:	bf00      	nop
 80063e8:	20000884 	.word	0x20000884

080063ec <_malloc_r>:
 80063ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f0:	1ccd      	adds	r5, r1, #3
 80063f2:	f025 0503 	bic.w	r5, r5, #3
 80063f6:	3508      	adds	r5, #8
 80063f8:	2d0c      	cmp	r5, #12
 80063fa:	bf38      	it	cc
 80063fc:	250c      	movcc	r5, #12
 80063fe:	2d00      	cmp	r5, #0
 8006400:	4606      	mov	r6, r0
 8006402:	db01      	blt.n	8006408 <_malloc_r+0x1c>
 8006404:	42a9      	cmp	r1, r5
 8006406:	d904      	bls.n	8006412 <_malloc_r+0x26>
 8006408:	230c      	movs	r3, #12
 800640a:	6033      	str	r3, [r6, #0]
 800640c:	2000      	movs	r0, #0
 800640e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064e8 <_malloc_r+0xfc>
 8006416:	f000 f869 	bl	80064ec <__malloc_lock>
 800641a:	f8d8 3000 	ldr.w	r3, [r8]
 800641e:	461c      	mov	r4, r3
 8006420:	bb44      	cbnz	r4, 8006474 <_malloc_r+0x88>
 8006422:	4629      	mov	r1, r5
 8006424:	4630      	mov	r0, r6
 8006426:	f7ff ffbf 	bl	80063a8 <sbrk_aligned>
 800642a:	1c43      	adds	r3, r0, #1
 800642c:	4604      	mov	r4, r0
 800642e:	d158      	bne.n	80064e2 <_malloc_r+0xf6>
 8006430:	f8d8 4000 	ldr.w	r4, [r8]
 8006434:	4627      	mov	r7, r4
 8006436:	2f00      	cmp	r7, #0
 8006438:	d143      	bne.n	80064c2 <_malloc_r+0xd6>
 800643a:	2c00      	cmp	r4, #0
 800643c:	d04b      	beq.n	80064d6 <_malloc_r+0xea>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	4639      	mov	r1, r7
 8006442:	4630      	mov	r0, r6
 8006444:	eb04 0903 	add.w	r9, r4, r3
 8006448:	f000 fe48 	bl	80070dc <_sbrk_r>
 800644c:	4581      	cmp	r9, r0
 800644e:	d142      	bne.n	80064d6 <_malloc_r+0xea>
 8006450:	6821      	ldr	r1, [r4, #0]
 8006452:	4630      	mov	r0, r6
 8006454:	1a6d      	subs	r5, r5, r1
 8006456:	4629      	mov	r1, r5
 8006458:	f7ff ffa6 	bl	80063a8 <sbrk_aligned>
 800645c:	3001      	adds	r0, #1
 800645e:	d03a      	beq.n	80064d6 <_malloc_r+0xea>
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	442b      	add	r3, r5
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	f8d8 3000 	ldr.w	r3, [r8]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	bb62      	cbnz	r2, 80064c8 <_malloc_r+0xdc>
 800646e:	f8c8 7000 	str.w	r7, [r8]
 8006472:	e00f      	b.n	8006494 <_malloc_r+0xa8>
 8006474:	6822      	ldr	r2, [r4, #0]
 8006476:	1b52      	subs	r2, r2, r5
 8006478:	d420      	bmi.n	80064bc <_malloc_r+0xd0>
 800647a:	2a0b      	cmp	r2, #11
 800647c:	d917      	bls.n	80064ae <_malloc_r+0xc2>
 800647e:	1961      	adds	r1, r4, r5
 8006480:	42a3      	cmp	r3, r4
 8006482:	6025      	str	r5, [r4, #0]
 8006484:	bf18      	it	ne
 8006486:	6059      	strne	r1, [r3, #4]
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	bf08      	it	eq
 800648c:	f8c8 1000 	streq.w	r1, [r8]
 8006490:	5162      	str	r2, [r4, r5]
 8006492:	604b      	str	r3, [r1, #4]
 8006494:	4630      	mov	r0, r6
 8006496:	f000 f82f 	bl	80064f8 <__malloc_unlock>
 800649a:	f104 000b 	add.w	r0, r4, #11
 800649e:	1d23      	adds	r3, r4, #4
 80064a0:	f020 0007 	bic.w	r0, r0, #7
 80064a4:	1ac2      	subs	r2, r0, r3
 80064a6:	bf1c      	itt	ne
 80064a8:	1a1b      	subne	r3, r3, r0
 80064aa:	50a3      	strne	r3, [r4, r2]
 80064ac:	e7af      	b.n	800640e <_malloc_r+0x22>
 80064ae:	6862      	ldr	r2, [r4, #4]
 80064b0:	42a3      	cmp	r3, r4
 80064b2:	bf0c      	ite	eq
 80064b4:	f8c8 2000 	streq.w	r2, [r8]
 80064b8:	605a      	strne	r2, [r3, #4]
 80064ba:	e7eb      	b.n	8006494 <_malloc_r+0xa8>
 80064bc:	4623      	mov	r3, r4
 80064be:	6864      	ldr	r4, [r4, #4]
 80064c0:	e7ae      	b.n	8006420 <_malloc_r+0x34>
 80064c2:	463c      	mov	r4, r7
 80064c4:	687f      	ldr	r7, [r7, #4]
 80064c6:	e7b6      	b.n	8006436 <_malloc_r+0x4a>
 80064c8:	461a      	mov	r2, r3
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	42a3      	cmp	r3, r4
 80064ce:	d1fb      	bne.n	80064c8 <_malloc_r+0xdc>
 80064d0:	2300      	movs	r3, #0
 80064d2:	6053      	str	r3, [r2, #4]
 80064d4:	e7de      	b.n	8006494 <_malloc_r+0xa8>
 80064d6:	230c      	movs	r3, #12
 80064d8:	4630      	mov	r0, r6
 80064da:	6033      	str	r3, [r6, #0]
 80064dc:	f000 f80c 	bl	80064f8 <__malloc_unlock>
 80064e0:	e794      	b.n	800640c <_malloc_r+0x20>
 80064e2:	6005      	str	r5, [r0, #0]
 80064e4:	e7d6      	b.n	8006494 <_malloc_r+0xa8>
 80064e6:	bf00      	nop
 80064e8:	20000888 	.word	0x20000888

080064ec <__malloc_lock>:
 80064ec:	4801      	ldr	r0, [pc, #4]	@ (80064f4 <__malloc_lock+0x8>)
 80064ee:	f7ff b89c 	b.w	800562a <__retarget_lock_acquire_recursive>
 80064f2:	bf00      	nop
 80064f4:	20000880 	.word	0x20000880

080064f8 <__malloc_unlock>:
 80064f8:	4801      	ldr	r0, [pc, #4]	@ (8006500 <__malloc_unlock+0x8>)
 80064fa:	f7ff b897 	b.w	800562c <__retarget_lock_release_recursive>
 80064fe:	bf00      	nop
 8006500:	20000880 	.word	0x20000880

08006504 <_Balloc>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	69c6      	ldr	r6, [r0, #28]
 8006508:	4604      	mov	r4, r0
 800650a:	460d      	mov	r5, r1
 800650c:	b976      	cbnz	r6, 800652c <_Balloc+0x28>
 800650e:	2010      	movs	r0, #16
 8006510:	f7ff ff42 	bl	8006398 <malloc>
 8006514:	4602      	mov	r2, r0
 8006516:	61e0      	str	r0, [r4, #28]
 8006518:	b920      	cbnz	r0, 8006524 <_Balloc+0x20>
 800651a:	216b      	movs	r1, #107	@ 0x6b
 800651c:	4b17      	ldr	r3, [pc, #92]	@ (800657c <_Balloc+0x78>)
 800651e:	4818      	ldr	r0, [pc, #96]	@ (8006580 <_Balloc+0x7c>)
 8006520:	f000 fdec 	bl	80070fc <__assert_func>
 8006524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006528:	6006      	str	r6, [r0, #0]
 800652a:	60c6      	str	r6, [r0, #12]
 800652c:	69e6      	ldr	r6, [r4, #28]
 800652e:	68f3      	ldr	r3, [r6, #12]
 8006530:	b183      	cbz	r3, 8006554 <_Balloc+0x50>
 8006532:	69e3      	ldr	r3, [r4, #28]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800653a:	b9b8      	cbnz	r0, 800656c <_Balloc+0x68>
 800653c:	2101      	movs	r1, #1
 800653e:	fa01 f605 	lsl.w	r6, r1, r5
 8006542:	1d72      	adds	r2, r6, #5
 8006544:	4620      	mov	r0, r4
 8006546:	0092      	lsls	r2, r2, #2
 8006548:	f000 fdf6 	bl	8007138 <_calloc_r>
 800654c:	b160      	cbz	r0, 8006568 <_Balloc+0x64>
 800654e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006552:	e00e      	b.n	8006572 <_Balloc+0x6e>
 8006554:	2221      	movs	r2, #33	@ 0x21
 8006556:	2104      	movs	r1, #4
 8006558:	4620      	mov	r0, r4
 800655a:	f000 fded 	bl	8007138 <_calloc_r>
 800655e:	69e3      	ldr	r3, [r4, #28]
 8006560:	60f0      	str	r0, [r6, #12]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e4      	bne.n	8006532 <_Balloc+0x2e>
 8006568:	2000      	movs	r0, #0
 800656a:	bd70      	pop	{r4, r5, r6, pc}
 800656c:	6802      	ldr	r2, [r0, #0]
 800656e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006572:	2300      	movs	r3, #0
 8006574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006578:	e7f7      	b.n	800656a <_Balloc+0x66>
 800657a:	bf00      	nop
 800657c:	0800743f 	.word	0x0800743f
 8006580:	080074bf 	.word	0x080074bf

08006584 <_Bfree>:
 8006584:	b570      	push	{r4, r5, r6, lr}
 8006586:	69c6      	ldr	r6, [r0, #28]
 8006588:	4605      	mov	r5, r0
 800658a:	460c      	mov	r4, r1
 800658c:	b976      	cbnz	r6, 80065ac <_Bfree+0x28>
 800658e:	2010      	movs	r0, #16
 8006590:	f7ff ff02 	bl	8006398 <malloc>
 8006594:	4602      	mov	r2, r0
 8006596:	61e8      	str	r0, [r5, #28]
 8006598:	b920      	cbnz	r0, 80065a4 <_Bfree+0x20>
 800659a:	218f      	movs	r1, #143	@ 0x8f
 800659c:	4b08      	ldr	r3, [pc, #32]	@ (80065c0 <_Bfree+0x3c>)
 800659e:	4809      	ldr	r0, [pc, #36]	@ (80065c4 <_Bfree+0x40>)
 80065a0:	f000 fdac 	bl	80070fc <__assert_func>
 80065a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065a8:	6006      	str	r6, [r0, #0]
 80065aa:	60c6      	str	r6, [r0, #12]
 80065ac:	b13c      	cbz	r4, 80065be <_Bfree+0x3a>
 80065ae:	69eb      	ldr	r3, [r5, #28]
 80065b0:	6862      	ldr	r2, [r4, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065b8:	6021      	str	r1, [r4, #0]
 80065ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	0800743f 	.word	0x0800743f
 80065c4:	080074bf 	.word	0x080074bf

080065c8 <__multadd>:
 80065c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065cc:	4607      	mov	r7, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	461e      	mov	r6, r3
 80065d2:	2000      	movs	r0, #0
 80065d4:	690d      	ldr	r5, [r1, #16]
 80065d6:	f101 0c14 	add.w	ip, r1, #20
 80065da:	f8dc 3000 	ldr.w	r3, [ip]
 80065de:	3001      	adds	r0, #1
 80065e0:	b299      	uxth	r1, r3
 80065e2:	fb02 6101 	mla	r1, r2, r1, r6
 80065e6:	0c1e      	lsrs	r6, r3, #16
 80065e8:	0c0b      	lsrs	r3, r1, #16
 80065ea:	fb02 3306 	mla	r3, r2, r6, r3
 80065ee:	b289      	uxth	r1, r1
 80065f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065f4:	4285      	cmp	r5, r0
 80065f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065fa:	f84c 1b04 	str.w	r1, [ip], #4
 80065fe:	dcec      	bgt.n	80065da <__multadd+0x12>
 8006600:	b30e      	cbz	r6, 8006646 <__multadd+0x7e>
 8006602:	68a3      	ldr	r3, [r4, #8]
 8006604:	42ab      	cmp	r3, r5
 8006606:	dc19      	bgt.n	800663c <__multadd+0x74>
 8006608:	6861      	ldr	r1, [r4, #4]
 800660a:	4638      	mov	r0, r7
 800660c:	3101      	adds	r1, #1
 800660e:	f7ff ff79 	bl	8006504 <_Balloc>
 8006612:	4680      	mov	r8, r0
 8006614:	b928      	cbnz	r0, 8006622 <__multadd+0x5a>
 8006616:	4602      	mov	r2, r0
 8006618:	21ba      	movs	r1, #186	@ 0xba
 800661a:	4b0c      	ldr	r3, [pc, #48]	@ (800664c <__multadd+0x84>)
 800661c:	480c      	ldr	r0, [pc, #48]	@ (8006650 <__multadd+0x88>)
 800661e:	f000 fd6d 	bl	80070fc <__assert_func>
 8006622:	6922      	ldr	r2, [r4, #16]
 8006624:	f104 010c 	add.w	r1, r4, #12
 8006628:	3202      	adds	r2, #2
 800662a:	0092      	lsls	r2, r2, #2
 800662c:	300c      	adds	r0, #12
 800662e:	f7ff f80c 	bl	800564a <memcpy>
 8006632:	4621      	mov	r1, r4
 8006634:	4638      	mov	r0, r7
 8006636:	f7ff ffa5 	bl	8006584 <_Bfree>
 800663a:	4644      	mov	r4, r8
 800663c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006640:	3501      	adds	r5, #1
 8006642:	615e      	str	r6, [r3, #20]
 8006644:	6125      	str	r5, [r4, #16]
 8006646:	4620      	mov	r0, r4
 8006648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800664c:	080074ae 	.word	0x080074ae
 8006650:	080074bf 	.word	0x080074bf

08006654 <__hi0bits>:
 8006654:	4603      	mov	r3, r0
 8006656:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800665a:	bf3a      	itte	cc
 800665c:	0403      	lslcc	r3, r0, #16
 800665e:	2010      	movcc	r0, #16
 8006660:	2000      	movcs	r0, #0
 8006662:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006666:	bf3c      	itt	cc
 8006668:	021b      	lslcc	r3, r3, #8
 800666a:	3008      	addcc	r0, #8
 800666c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006670:	bf3c      	itt	cc
 8006672:	011b      	lslcc	r3, r3, #4
 8006674:	3004      	addcc	r0, #4
 8006676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800667a:	bf3c      	itt	cc
 800667c:	009b      	lslcc	r3, r3, #2
 800667e:	3002      	addcc	r0, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	db05      	blt.n	8006690 <__hi0bits+0x3c>
 8006684:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006688:	f100 0001 	add.w	r0, r0, #1
 800668c:	bf08      	it	eq
 800668e:	2020      	moveq	r0, #32
 8006690:	4770      	bx	lr

08006692 <__lo0bits>:
 8006692:	6803      	ldr	r3, [r0, #0]
 8006694:	4602      	mov	r2, r0
 8006696:	f013 0007 	ands.w	r0, r3, #7
 800669a:	d00b      	beq.n	80066b4 <__lo0bits+0x22>
 800669c:	07d9      	lsls	r1, r3, #31
 800669e:	d421      	bmi.n	80066e4 <__lo0bits+0x52>
 80066a0:	0798      	lsls	r0, r3, #30
 80066a2:	bf49      	itett	mi
 80066a4:	085b      	lsrmi	r3, r3, #1
 80066a6:	089b      	lsrpl	r3, r3, #2
 80066a8:	2001      	movmi	r0, #1
 80066aa:	6013      	strmi	r3, [r2, #0]
 80066ac:	bf5c      	itt	pl
 80066ae:	2002      	movpl	r0, #2
 80066b0:	6013      	strpl	r3, [r2, #0]
 80066b2:	4770      	bx	lr
 80066b4:	b299      	uxth	r1, r3
 80066b6:	b909      	cbnz	r1, 80066bc <__lo0bits+0x2a>
 80066b8:	2010      	movs	r0, #16
 80066ba:	0c1b      	lsrs	r3, r3, #16
 80066bc:	b2d9      	uxtb	r1, r3
 80066be:	b909      	cbnz	r1, 80066c4 <__lo0bits+0x32>
 80066c0:	3008      	adds	r0, #8
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	0719      	lsls	r1, r3, #28
 80066c6:	bf04      	itt	eq
 80066c8:	091b      	lsreq	r3, r3, #4
 80066ca:	3004      	addeq	r0, #4
 80066cc:	0799      	lsls	r1, r3, #30
 80066ce:	bf04      	itt	eq
 80066d0:	089b      	lsreq	r3, r3, #2
 80066d2:	3002      	addeq	r0, #2
 80066d4:	07d9      	lsls	r1, r3, #31
 80066d6:	d403      	bmi.n	80066e0 <__lo0bits+0x4e>
 80066d8:	085b      	lsrs	r3, r3, #1
 80066da:	f100 0001 	add.w	r0, r0, #1
 80066de:	d003      	beq.n	80066e8 <__lo0bits+0x56>
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	4770      	bx	lr
 80066e4:	2000      	movs	r0, #0
 80066e6:	4770      	bx	lr
 80066e8:	2020      	movs	r0, #32
 80066ea:	4770      	bx	lr

080066ec <__i2b>:
 80066ec:	b510      	push	{r4, lr}
 80066ee:	460c      	mov	r4, r1
 80066f0:	2101      	movs	r1, #1
 80066f2:	f7ff ff07 	bl	8006504 <_Balloc>
 80066f6:	4602      	mov	r2, r0
 80066f8:	b928      	cbnz	r0, 8006706 <__i2b+0x1a>
 80066fa:	f240 1145 	movw	r1, #325	@ 0x145
 80066fe:	4b04      	ldr	r3, [pc, #16]	@ (8006710 <__i2b+0x24>)
 8006700:	4804      	ldr	r0, [pc, #16]	@ (8006714 <__i2b+0x28>)
 8006702:	f000 fcfb 	bl	80070fc <__assert_func>
 8006706:	2301      	movs	r3, #1
 8006708:	6144      	str	r4, [r0, #20]
 800670a:	6103      	str	r3, [r0, #16]
 800670c:	bd10      	pop	{r4, pc}
 800670e:	bf00      	nop
 8006710:	080074ae 	.word	0x080074ae
 8006714:	080074bf 	.word	0x080074bf

08006718 <__multiply>:
 8006718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	4614      	mov	r4, r2
 800671e:	690a      	ldr	r2, [r1, #16]
 8006720:	6923      	ldr	r3, [r4, #16]
 8006722:	460f      	mov	r7, r1
 8006724:	429a      	cmp	r2, r3
 8006726:	bfa2      	ittt	ge
 8006728:	4623      	movge	r3, r4
 800672a:	460c      	movge	r4, r1
 800672c:	461f      	movge	r7, r3
 800672e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006732:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006736:	68a3      	ldr	r3, [r4, #8]
 8006738:	6861      	ldr	r1, [r4, #4]
 800673a:	eb0a 0609 	add.w	r6, sl, r9
 800673e:	42b3      	cmp	r3, r6
 8006740:	b085      	sub	sp, #20
 8006742:	bfb8      	it	lt
 8006744:	3101      	addlt	r1, #1
 8006746:	f7ff fedd 	bl	8006504 <_Balloc>
 800674a:	b930      	cbnz	r0, 800675a <__multiply+0x42>
 800674c:	4602      	mov	r2, r0
 800674e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006752:	4b43      	ldr	r3, [pc, #268]	@ (8006860 <__multiply+0x148>)
 8006754:	4843      	ldr	r0, [pc, #268]	@ (8006864 <__multiply+0x14c>)
 8006756:	f000 fcd1 	bl	80070fc <__assert_func>
 800675a:	f100 0514 	add.w	r5, r0, #20
 800675e:	462b      	mov	r3, r5
 8006760:	2200      	movs	r2, #0
 8006762:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006766:	4543      	cmp	r3, r8
 8006768:	d321      	bcc.n	80067ae <__multiply+0x96>
 800676a:	f107 0114 	add.w	r1, r7, #20
 800676e:	f104 0214 	add.w	r2, r4, #20
 8006772:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006776:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800677a:	9302      	str	r3, [sp, #8]
 800677c:	1b13      	subs	r3, r2, r4
 800677e:	3b15      	subs	r3, #21
 8006780:	f023 0303 	bic.w	r3, r3, #3
 8006784:	3304      	adds	r3, #4
 8006786:	f104 0715 	add.w	r7, r4, #21
 800678a:	42ba      	cmp	r2, r7
 800678c:	bf38      	it	cc
 800678e:	2304      	movcc	r3, #4
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	9b02      	ldr	r3, [sp, #8]
 8006794:	9103      	str	r1, [sp, #12]
 8006796:	428b      	cmp	r3, r1
 8006798:	d80c      	bhi.n	80067b4 <__multiply+0x9c>
 800679a:	2e00      	cmp	r6, #0
 800679c:	dd03      	ble.n	80067a6 <__multiply+0x8e>
 800679e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d05a      	beq.n	800685c <__multiply+0x144>
 80067a6:	6106      	str	r6, [r0, #16]
 80067a8:	b005      	add	sp, #20
 80067aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ae:	f843 2b04 	str.w	r2, [r3], #4
 80067b2:	e7d8      	b.n	8006766 <__multiply+0x4e>
 80067b4:	f8b1 a000 	ldrh.w	sl, [r1]
 80067b8:	f1ba 0f00 	cmp.w	sl, #0
 80067bc:	d023      	beq.n	8006806 <__multiply+0xee>
 80067be:	46a9      	mov	r9, r5
 80067c0:	f04f 0c00 	mov.w	ip, #0
 80067c4:	f104 0e14 	add.w	lr, r4, #20
 80067c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80067cc:	f8d9 3000 	ldr.w	r3, [r9]
 80067d0:	fa1f fb87 	uxth.w	fp, r7
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	fb0a 330b 	mla	r3, sl, fp, r3
 80067da:	4463      	add	r3, ip
 80067dc:	f8d9 c000 	ldr.w	ip, [r9]
 80067e0:	0c3f      	lsrs	r7, r7, #16
 80067e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80067e6:	fb0a c707 	mla	r7, sl, r7, ip
 80067ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80067f4:	4572      	cmp	r2, lr
 80067f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80067fa:	f849 3b04 	str.w	r3, [r9], #4
 80067fe:	d8e3      	bhi.n	80067c8 <__multiply+0xb0>
 8006800:	9b01      	ldr	r3, [sp, #4]
 8006802:	f845 c003 	str.w	ip, [r5, r3]
 8006806:	9b03      	ldr	r3, [sp, #12]
 8006808:	3104      	adds	r1, #4
 800680a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800680e:	f1b9 0f00 	cmp.w	r9, #0
 8006812:	d021      	beq.n	8006858 <__multiply+0x140>
 8006814:	46ae      	mov	lr, r5
 8006816:	f04f 0a00 	mov.w	sl, #0
 800681a:	682b      	ldr	r3, [r5, #0]
 800681c:	f104 0c14 	add.w	ip, r4, #20
 8006820:	f8bc b000 	ldrh.w	fp, [ip]
 8006824:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006828:	b29b      	uxth	r3, r3
 800682a:	fb09 770b 	mla	r7, r9, fp, r7
 800682e:	4457      	add	r7, sl
 8006830:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006834:	f84e 3b04 	str.w	r3, [lr], #4
 8006838:	f85c 3b04 	ldr.w	r3, [ip], #4
 800683c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006840:	f8be 3000 	ldrh.w	r3, [lr]
 8006844:	4562      	cmp	r2, ip
 8006846:	fb09 330a 	mla	r3, r9, sl, r3
 800684a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800684e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006852:	d8e5      	bhi.n	8006820 <__multiply+0x108>
 8006854:	9f01      	ldr	r7, [sp, #4]
 8006856:	51eb      	str	r3, [r5, r7]
 8006858:	3504      	adds	r5, #4
 800685a:	e79a      	b.n	8006792 <__multiply+0x7a>
 800685c:	3e01      	subs	r6, #1
 800685e:	e79c      	b.n	800679a <__multiply+0x82>
 8006860:	080074ae 	.word	0x080074ae
 8006864:	080074bf 	.word	0x080074bf

08006868 <__pow5mult>:
 8006868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800686c:	4615      	mov	r5, r2
 800686e:	f012 0203 	ands.w	r2, r2, #3
 8006872:	4607      	mov	r7, r0
 8006874:	460e      	mov	r6, r1
 8006876:	d007      	beq.n	8006888 <__pow5mult+0x20>
 8006878:	4c25      	ldr	r4, [pc, #148]	@ (8006910 <__pow5mult+0xa8>)
 800687a:	3a01      	subs	r2, #1
 800687c:	2300      	movs	r3, #0
 800687e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006882:	f7ff fea1 	bl	80065c8 <__multadd>
 8006886:	4606      	mov	r6, r0
 8006888:	10ad      	asrs	r5, r5, #2
 800688a:	d03d      	beq.n	8006908 <__pow5mult+0xa0>
 800688c:	69fc      	ldr	r4, [r7, #28]
 800688e:	b97c      	cbnz	r4, 80068b0 <__pow5mult+0x48>
 8006890:	2010      	movs	r0, #16
 8006892:	f7ff fd81 	bl	8006398 <malloc>
 8006896:	4602      	mov	r2, r0
 8006898:	61f8      	str	r0, [r7, #28]
 800689a:	b928      	cbnz	r0, 80068a8 <__pow5mult+0x40>
 800689c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80068a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006914 <__pow5mult+0xac>)
 80068a2:	481d      	ldr	r0, [pc, #116]	@ (8006918 <__pow5mult+0xb0>)
 80068a4:	f000 fc2a 	bl	80070fc <__assert_func>
 80068a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068ac:	6004      	str	r4, [r0, #0]
 80068ae:	60c4      	str	r4, [r0, #12]
 80068b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80068b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068b8:	b94c      	cbnz	r4, 80068ce <__pow5mult+0x66>
 80068ba:	f240 2171 	movw	r1, #625	@ 0x271
 80068be:	4638      	mov	r0, r7
 80068c0:	f7ff ff14 	bl	80066ec <__i2b>
 80068c4:	2300      	movs	r3, #0
 80068c6:	4604      	mov	r4, r0
 80068c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80068cc:	6003      	str	r3, [r0, #0]
 80068ce:	f04f 0900 	mov.w	r9, #0
 80068d2:	07eb      	lsls	r3, r5, #31
 80068d4:	d50a      	bpl.n	80068ec <__pow5mult+0x84>
 80068d6:	4631      	mov	r1, r6
 80068d8:	4622      	mov	r2, r4
 80068da:	4638      	mov	r0, r7
 80068dc:	f7ff ff1c 	bl	8006718 <__multiply>
 80068e0:	4680      	mov	r8, r0
 80068e2:	4631      	mov	r1, r6
 80068e4:	4638      	mov	r0, r7
 80068e6:	f7ff fe4d 	bl	8006584 <_Bfree>
 80068ea:	4646      	mov	r6, r8
 80068ec:	106d      	asrs	r5, r5, #1
 80068ee:	d00b      	beq.n	8006908 <__pow5mult+0xa0>
 80068f0:	6820      	ldr	r0, [r4, #0]
 80068f2:	b938      	cbnz	r0, 8006904 <__pow5mult+0x9c>
 80068f4:	4622      	mov	r2, r4
 80068f6:	4621      	mov	r1, r4
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7ff ff0d 	bl	8006718 <__multiply>
 80068fe:	6020      	str	r0, [r4, #0]
 8006900:	f8c0 9000 	str.w	r9, [r0]
 8006904:	4604      	mov	r4, r0
 8006906:	e7e4      	b.n	80068d2 <__pow5mult+0x6a>
 8006908:	4630      	mov	r0, r6
 800690a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800690e:	bf00      	nop
 8006910:	08007518 	.word	0x08007518
 8006914:	0800743f 	.word	0x0800743f
 8006918:	080074bf 	.word	0x080074bf

0800691c <__lshift>:
 800691c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006920:	460c      	mov	r4, r1
 8006922:	4607      	mov	r7, r0
 8006924:	4691      	mov	r9, r2
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	6849      	ldr	r1, [r1, #4]
 800692a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800692e:	68a3      	ldr	r3, [r4, #8]
 8006930:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006934:	f108 0601 	add.w	r6, r8, #1
 8006938:	42b3      	cmp	r3, r6
 800693a:	db0b      	blt.n	8006954 <__lshift+0x38>
 800693c:	4638      	mov	r0, r7
 800693e:	f7ff fde1 	bl	8006504 <_Balloc>
 8006942:	4605      	mov	r5, r0
 8006944:	b948      	cbnz	r0, 800695a <__lshift+0x3e>
 8006946:	4602      	mov	r2, r0
 8006948:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800694c:	4b27      	ldr	r3, [pc, #156]	@ (80069ec <__lshift+0xd0>)
 800694e:	4828      	ldr	r0, [pc, #160]	@ (80069f0 <__lshift+0xd4>)
 8006950:	f000 fbd4 	bl	80070fc <__assert_func>
 8006954:	3101      	adds	r1, #1
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	e7ee      	b.n	8006938 <__lshift+0x1c>
 800695a:	2300      	movs	r3, #0
 800695c:	f100 0114 	add.w	r1, r0, #20
 8006960:	f100 0210 	add.w	r2, r0, #16
 8006964:	4618      	mov	r0, r3
 8006966:	4553      	cmp	r3, sl
 8006968:	db33      	blt.n	80069d2 <__lshift+0xb6>
 800696a:	6920      	ldr	r0, [r4, #16]
 800696c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006970:	f104 0314 	add.w	r3, r4, #20
 8006974:	f019 091f 	ands.w	r9, r9, #31
 8006978:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800697c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006980:	d02b      	beq.n	80069da <__lshift+0xbe>
 8006982:	468a      	mov	sl, r1
 8006984:	2200      	movs	r2, #0
 8006986:	f1c9 0e20 	rsb	lr, r9, #32
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	fa00 f009 	lsl.w	r0, r0, r9
 8006990:	4310      	orrs	r0, r2
 8006992:	f84a 0b04 	str.w	r0, [sl], #4
 8006996:	f853 2b04 	ldr.w	r2, [r3], #4
 800699a:	459c      	cmp	ip, r3
 800699c:	fa22 f20e 	lsr.w	r2, r2, lr
 80069a0:	d8f3      	bhi.n	800698a <__lshift+0x6e>
 80069a2:	ebac 0304 	sub.w	r3, ip, r4
 80069a6:	3b15      	subs	r3, #21
 80069a8:	f023 0303 	bic.w	r3, r3, #3
 80069ac:	3304      	adds	r3, #4
 80069ae:	f104 0015 	add.w	r0, r4, #21
 80069b2:	4584      	cmp	ip, r0
 80069b4:	bf38      	it	cc
 80069b6:	2304      	movcc	r3, #4
 80069b8:	50ca      	str	r2, [r1, r3]
 80069ba:	b10a      	cbz	r2, 80069c0 <__lshift+0xa4>
 80069bc:	f108 0602 	add.w	r6, r8, #2
 80069c0:	3e01      	subs	r6, #1
 80069c2:	4638      	mov	r0, r7
 80069c4:	4621      	mov	r1, r4
 80069c6:	612e      	str	r6, [r5, #16]
 80069c8:	f7ff fddc 	bl	8006584 <_Bfree>
 80069cc:	4628      	mov	r0, r5
 80069ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80069d6:	3301      	adds	r3, #1
 80069d8:	e7c5      	b.n	8006966 <__lshift+0x4a>
 80069da:	3904      	subs	r1, #4
 80069dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e0:	459c      	cmp	ip, r3
 80069e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80069e6:	d8f9      	bhi.n	80069dc <__lshift+0xc0>
 80069e8:	e7ea      	b.n	80069c0 <__lshift+0xa4>
 80069ea:	bf00      	nop
 80069ec:	080074ae 	.word	0x080074ae
 80069f0:	080074bf 	.word	0x080074bf

080069f4 <__mcmp>:
 80069f4:	4603      	mov	r3, r0
 80069f6:	690a      	ldr	r2, [r1, #16]
 80069f8:	6900      	ldr	r0, [r0, #16]
 80069fa:	b530      	push	{r4, r5, lr}
 80069fc:	1a80      	subs	r0, r0, r2
 80069fe:	d10e      	bne.n	8006a1e <__mcmp+0x2a>
 8006a00:	3314      	adds	r3, #20
 8006a02:	3114      	adds	r1, #20
 8006a04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a14:	4295      	cmp	r5, r2
 8006a16:	d003      	beq.n	8006a20 <__mcmp+0x2c>
 8006a18:	d205      	bcs.n	8006a26 <__mcmp+0x32>
 8006a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1e:	bd30      	pop	{r4, r5, pc}
 8006a20:	42a3      	cmp	r3, r4
 8006a22:	d3f3      	bcc.n	8006a0c <__mcmp+0x18>
 8006a24:	e7fb      	b.n	8006a1e <__mcmp+0x2a>
 8006a26:	2001      	movs	r0, #1
 8006a28:	e7f9      	b.n	8006a1e <__mcmp+0x2a>
	...

08006a2c <__mdiff>:
 8006a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	4689      	mov	r9, r1
 8006a32:	4606      	mov	r6, r0
 8006a34:	4611      	mov	r1, r2
 8006a36:	4648      	mov	r0, r9
 8006a38:	4614      	mov	r4, r2
 8006a3a:	f7ff ffdb 	bl	80069f4 <__mcmp>
 8006a3e:	1e05      	subs	r5, r0, #0
 8006a40:	d112      	bne.n	8006a68 <__mdiff+0x3c>
 8006a42:	4629      	mov	r1, r5
 8006a44:	4630      	mov	r0, r6
 8006a46:	f7ff fd5d 	bl	8006504 <_Balloc>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	b928      	cbnz	r0, 8006a5a <__mdiff+0x2e>
 8006a4e:	f240 2137 	movw	r1, #567	@ 0x237
 8006a52:	4b3e      	ldr	r3, [pc, #248]	@ (8006b4c <__mdiff+0x120>)
 8006a54:	483e      	ldr	r0, [pc, #248]	@ (8006b50 <__mdiff+0x124>)
 8006a56:	f000 fb51 	bl	80070fc <__assert_func>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a60:	4610      	mov	r0, r2
 8006a62:	b003      	add	sp, #12
 8006a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a68:	bfbc      	itt	lt
 8006a6a:	464b      	movlt	r3, r9
 8006a6c:	46a1      	movlt	r9, r4
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a74:	bfba      	itte	lt
 8006a76:	461c      	movlt	r4, r3
 8006a78:	2501      	movlt	r5, #1
 8006a7a:	2500      	movge	r5, #0
 8006a7c:	f7ff fd42 	bl	8006504 <_Balloc>
 8006a80:	4602      	mov	r2, r0
 8006a82:	b918      	cbnz	r0, 8006a8c <__mdiff+0x60>
 8006a84:	f240 2145 	movw	r1, #581	@ 0x245
 8006a88:	4b30      	ldr	r3, [pc, #192]	@ (8006b4c <__mdiff+0x120>)
 8006a8a:	e7e3      	b.n	8006a54 <__mdiff+0x28>
 8006a8c:	f100 0b14 	add.w	fp, r0, #20
 8006a90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a94:	f109 0310 	add.w	r3, r9, #16
 8006a98:	60c5      	str	r5, [r0, #12]
 8006a9a:	f04f 0c00 	mov.w	ip, #0
 8006a9e:	f109 0514 	add.w	r5, r9, #20
 8006aa2:	46d9      	mov	r9, fp
 8006aa4:	6926      	ldr	r6, [r4, #16]
 8006aa6:	f104 0e14 	add.w	lr, r4, #20
 8006aaa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006aae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006aba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006abe:	b281      	uxth	r1, r0
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	fa1f f38a 	uxth.w	r3, sl
 8006ac6:	1a5b      	subs	r3, r3, r1
 8006ac8:	0c00      	lsrs	r0, r0, #16
 8006aca:	4463      	add	r3, ip
 8006acc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006ad0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ada:	4576      	cmp	r6, lr
 8006adc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ae0:	f849 3b04 	str.w	r3, [r9], #4
 8006ae4:	d8e6      	bhi.n	8006ab4 <__mdiff+0x88>
 8006ae6:	1b33      	subs	r3, r6, r4
 8006ae8:	3b15      	subs	r3, #21
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	3415      	adds	r4, #21
 8006af0:	3304      	adds	r3, #4
 8006af2:	42a6      	cmp	r6, r4
 8006af4:	bf38      	it	cc
 8006af6:	2304      	movcc	r3, #4
 8006af8:	441d      	add	r5, r3
 8006afa:	445b      	add	r3, fp
 8006afc:	461e      	mov	r6, r3
 8006afe:	462c      	mov	r4, r5
 8006b00:	4544      	cmp	r4, r8
 8006b02:	d30e      	bcc.n	8006b22 <__mdiff+0xf6>
 8006b04:	f108 0103 	add.w	r1, r8, #3
 8006b08:	1b49      	subs	r1, r1, r5
 8006b0a:	f021 0103 	bic.w	r1, r1, #3
 8006b0e:	3d03      	subs	r5, #3
 8006b10:	45a8      	cmp	r8, r5
 8006b12:	bf38      	it	cc
 8006b14:	2100      	movcc	r1, #0
 8006b16:	440b      	add	r3, r1
 8006b18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b1c:	b199      	cbz	r1, 8006b46 <__mdiff+0x11a>
 8006b1e:	6117      	str	r7, [r2, #16]
 8006b20:	e79e      	b.n	8006a60 <__mdiff+0x34>
 8006b22:	46e6      	mov	lr, ip
 8006b24:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b28:	fa1f fc81 	uxth.w	ip, r1
 8006b2c:	44f4      	add	ip, lr
 8006b2e:	0c08      	lsrs	r0, r1, #16
 8006b30:	4471      	add	r1, lr
 8006b32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b36:	b289      	uxth	r1, r1
 8006b38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b40:	f846 1b04 	str.w	r1, [r6], #4
 8006b44:	e7dc      	b.n	8006b00 <__mdiff+0xd4>
 8006b46:	3f01      	subs	r7, #1
 8006b48:	e7e6      	b.n	8006b18 <__mdiff+0xec>
 8006b4a:	bf00      	nop
 8006b4c:	080074ae 	.word	0x080074ae
 8006b50:	080074bf 	.word	0x080074bf

08006b54 <__d2b>:
 8006b54:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006b58:	2101      	movs	r1, #1
 8006b5a:	4690      	mov	r8, r2
 8006b5c:	4699      	mov	r9, r3
 8006b5e:	9e08      	ldr	r6, [sp, #32]
 8006b60:	f7ff fcd0 	bl	8006504 <_Balloc>
 8006b64:	4604      	mov	r4, r0
 8006b66:	b930      	cbnz	r0, 8006b76 <__d2b+0x22>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b6e:	4b23      	ldr	r3, [pc, #140]	@ (8006bfc <__d2b+0xa8>)
 8006b70:	4823      	ldr	r0, [pc, #140]	@ (8006c00 <__d2b+0xac>)
 8006b72:	f000 fac3 	bl	80070fc <__assert_func>
 8006b76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b7e:	b10d      	cbz	r5, 8006b84 <__d2b+0x30>
 8006b80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b84:	9301      	str	r3, [sp, #4]
 8006b86:	f1b8 0300 	subs.w	r3, r8, #0
 8006b8a:	d024      	beq.n	8006bd6 <__d2b+0x82>
 8006b8c:	4668      	mov	r0, sp
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	f7ff fd7f 	bl	8006692 <__lo0bits>
 8006b94:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b98:	b1d8      	cbz	r0, 8006bd2 <__d2b+0x7e>
 8006b9a:	f1c0 0320 	rsb	r3, r0, #32
 8006b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	40c2      	lsrs	r2, r0
 8006ba6:	6163      	str	r3, [r4, #20]
 8006ba8:	9201      	str	r2, [sp, #4]
 8006baa:	9b01      	ldr	r3, [sp, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	bf0c      	ite	eq
 8006bb0:	2201      	moveq	r2, #1
 8006bb2:	2202      	movne	r2, #2
 8006bb4:	61a3      	str	r3, [r4, #24]
 8006bb6:	6122      	str	r2, [r4, #16]
 8006bb8:	b1ad      	cbz	r5, 8006be6 <__d2b+0x92>
 8006bba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006bbe:	4405      	add	r5, r0
 8006bc0:	6035      	str	r5, [r6, #0]
 8006bc2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc8:	6018      	str	r0, [r3, #0]
 8006bca:	4620      	mov	r0, r4
 8006bcc:	b002      	add	sp, #8
 8006bce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006bd2:	6161      	str	r1, [r4, #20]
 8006bd4:	e7e9      	b.n	8006baa <__d2b+0x56>
 8006bd6:	a801      	add	r0, sp, #4
 8006bd8:	f7ff fd5b 	bl	8006692 <__lo0bits>
 8006bdc:	9b01      	ldr	r3, [sp, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	6163      	str	r3, [r4, #20]
 8006be2:	3020      	adds	r0, #32
 8006be4:	e7e7      	b.n	8006bb6 <__d2b+0x62>
 8006be6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006bea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bee:	6030      	str	r0, [r6, #0]
 8006bf0:	6918      	ldr	r0, [r3, #16]
 8006bf2:	f7ff fd2f 	bl	8006654 <__hi0bits>
 8006bf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bfa:	e7e4      	b.n	8006bc6 <__d2b+0x72>
 8006bfc:	080074ae 	.word	0x080074ae
 8006c00:	080074bf 	.word	0x080074bf

08006c04 <__sfputc_r>:
 8006c04:	6893      	ldr	r3, [r2, #8]
 8006c06:	b410      	push	{r4}
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	6093      	str	r3, [r2, #8]
 8006c0e:	da07      	bge.n	8006c20 <__sfputc_r+0x1c>
 8006c10:	6994      	ldr	r4, [r2, #24]
 8006c12:	42a3      	cmp	r3, r4
 8006c14:	db01      	blt.n	8006c1a <__sfputc_r+0x16>
 8006c16:	290a      	cmp	r1, #10
 8006c18:	d102      	bne.n	8006c20 <__sfputc_r+0x1c>
 8006c1a:	bc10      	pop	{r4}
 8006c1c:	f7fe bbf3 	b.w	8005406 <__swbuf_r>
 8006c20:	6813      	ldr	r3, [r2, #0]
 8006c22:	1c58      	adds	r0, r3, #1
 8006c24:	6010      	str	r0, [r2, #0]
 8006c26:	7019      	strb	r1, [r3, #0]
 8006c28:	4608      	mov	r0, r1
 8006c2a:	bc10      	pop	{r4}
 8006c2c:	4770      	bx	lr

08006c2e <__sfputs_r>:
 8006c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c30:	4606      	mov	r6, r0
 8006c32:	460f      	mov	r7, r1
 8006c34:	4614      	mov	r4, r2
 8006c36:	18d5      	adds	r5, r2, r3
 8006c38:	42ac      	cmp	r4, r5
 8006c3a:	d101      	bne.n	8006c40 <__sfputs_r+0x12>
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	e007      	b.n	8006c50 <__sfputs_r+0x22>
 8006c40:	463a      	mov	r2, r7
 8006c42:	4630      	mov	r0, r6
 8006c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c48:	f7ff ffdc 	bl	8006c04 <__sfputc_r>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d1f3      	bne.n	8006c38 <__sfputs_r+0xa>
 8006c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c54 <_vfiprintf_r>:
 8006c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c58:	460d      	mov	r5, r1
 8006c5a:	4614      	mov	r4, r2
 8006c5c:	4698      	mov	r8, r3
 8006c5e:	4606      	mov	r6, r0
 8006c60:	b09d      	sub	sp, #116	@ 0x74
 8006c62:	b118      	cbz	r0, 8006c6c <_vfiprintf_r+0x18>
 8006c64:	6a03      	ldr	r3, [r0, #32]
 8006c66:	b90b      	cbnz	r3, 8006c6c <_vfiprintf_r+0x18>
 8006c68:	f7fe fae4 	bl	8005234 <__sinit>
 8006c6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c6e:	07d9      	lsls	r1, r3, #31
 8006c70:	d405      	bmi.n	8006c7e <_vfiprintf_r+0x2a>
 8006c72:	89ab      	ldrh	r3, [r5, #12]
 8006c74:	059a      	lsls	r2, r3, #22
 8006c76:	d402      	bmi.n	8006c7e <_vfiprintf_r+0x2a>
 8006c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c7a:	f7fe fcd6 	bl	800562a <__retarget_lock_acquire_recursive>
 8006c7e:	89ab      	ldrh	r3, [r5, #12]
 8006c80:	071b      	lsls	r3, r3, #28
 8006c82:	d501      	bpl.n	8006c88 <_vfiprintf_r+0x34>
 8006c84:	692b      	ldr	r3, [r5, #16]
 8006c86:	b99b      	cbnz	r3, 8006cb0 <_vfiprintf_r+0x5c>
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f7fe fbfa 	bl	8005484 <__swsetup_r>
 8006c90:	b170      	cbz	r0, 8006cb0 <_vfiprintf_r+0x5c>
 8006c92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c94:	07dc      	lsls	r4, r3, #31
 8006c96:	d504      	bpl.n	8006ca2 <_vfiprintf_r+0x4e>
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9c:	b01d      	add	sp, #116	@ 0x74
 8006c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca2:	89ab      	ldrh	r3, [r5, #12]
 8006ca4:	0598      	lsls	r0, r3, #22
 8006ca6:	d4f7      	bmi.n	8006c98 <_vfiprintf_r+0x44>
 8006ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006caa:	f7fe fcbf 	bl	800562c <__retarget_lock_release_recursive>
 8006cae:	e7f3      	b.n	8006c98 <_vfiprintf_r+0x44>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cb4:	2320      	movs	r3, #32
 8006cb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cba:	2330      	movs	r3, #48	@ 0x30
 8006cbc:	f04f 0901 	mov.w	r9, #1
 8006cc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cc4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006e70 <_vfiprintf_r+0x21c>
 8006cc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ccc:	4623      	mov	r3, r4
 8006cce:	469a      	mov	sl, r3
 8006cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cd4:	b10a      	cbz	r2, 8006cda <_vfiprintf_r+0x86>
 8006cd6:	2a25      	cmp	r2, #37	@ 0x25
 8006cd8:	d1f9      	bne.n	8006cce <_vfiprintf_r+0x7a>
 8006cda:	ebba 0b04 	subs.w	fp, sl, r4
 8006cde:	d00b      	beq.n	8006cf8 <_vfiprintf_r+0xa4>
 8006ce0:	465b      	mov	r3, fp
 8006ce2:	4622      	mov	r2, r4
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f7ff ffa1 	bl	8006c2e <__sfputs_r>
 8006cec:	3001      	adds	r0, #1
 8006cee:	f000 80a7 	beq.w	8006e40 <_vfiprintf_r+0x1ec>
 8006cf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cf4:	445a      	add	r2, fp
 8006cf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 809f 	beq.w	8006e40 <_vfiprintf_r+0x1ec>
 8006d02:	2300      	movs	r3, #0
 8006d04:	f04f 32ff 	mov.w	r2, #4294967295
 8006d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d0c:	f10a 0a01 	add.w	sl, sl, #1
 8006d10:	9304      	str	r3, [sp, #16]
 8006d12:	9307      	str	r3, [sp, #28]
 8006d14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d18:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d1a:	4654      	mov	r4, sl
 8006d1c:	2205      	movs	r2, #5
 8006d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d22:	4853      	ldr	r0, [pc, #332]	@ (8006e70 <_vfiprintf_r+0x21c>)
 8006d24:	f7fe fc83 	bl	800562e <memchr>
 8006d28:	9a04      	ldr	r2, [sp, #16]
 8006d2a:	b9d8      	cbnz	r0, 8006d64 <_vfiprintf_r+0x110>
 8006d2c:	06d1      	lsls	r1, r2, #27
 8006d2e:	bf44      	itt	mi
 8006d30:	2320      	movmi	r3, #32
 8006d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d36:	0713      	lsls	r3, r2, #28
 8006d38:	bf44      	itt	mi
 8006d3a:	232b      	movmi	r3, #43	@ 0x2b
 8006d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d40:	f89a 3000 	ldrb.w	r3, [sl]
 8006d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d46:	d015      	beq.n	8006d74 <_vfiprintf_r+0x120>
 8006d48:	4654      	mov	r4, sl
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	f04f 0c0a 	mov.w	ip, #10
 8006d50:	9a07      	ldr	r2, [sp, #28]
 8006d52:	4621      	mov	r1, r4
 8006d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d58:	3b30      	subs	r3, #48	@ 0x30
 8006d5a:	2b09      	cmp	r3, #9
 8006d5c:	d94b      	bls.n	8006df6 <_vfiprintf_r+0x1a2>
 8006d5e:	b1b0      	cbz	r0, 8006d8e <_vfiprintf_r+0x13a>
 8006d60:	9207      	str	r2, [sp, #28]
 8006d62:	e014      	b.n	8006d8e <_vfiprintf_r+0x13a>
 8006d64:	eba0 0308 	sub.w	r3, r0, r8
 8006d68:	fa09 f303 	lsl.w	r3, r9, r3
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	46a2      	mov	sl, r4
 8006d70:	9304      	str	r3, [sp, #16]
 8006d72:	e7d2      	b.n	8006d1a <_vfiprintf_r+0xc6>
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	1d19      	adds	r1, r3, #4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	9103      	str	r1, [sp, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	bfbb      	ittet	lt
 8006d80:	425b      	neglt	r3, r3
 8006d82:	f042 0202 	orrlt.w	r2, r2, #2
 8006d86:	9307      	strge	r3, [sp, #28]
 8006d88:	9307      	strlt	r3, [sp, #28]
 8006d8a:	bfb8      	it	lt
 8006d8c:	9204      	strlt	r2, [sp, #16]
 8006d8e:	7823      	ldrb	r3, [r4, #0]
 8006d90:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d92:	d10a      	bne.n	8006daa <_vfiprintf_r+0x156>
 8006d94:	7863      	ldrb	r3, [r4, #1]
 8006d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d98:	d132      	bne.n	8006e00 <_vfiprintf_r+0x1ac>
 8006d9a:	9b03      	ldr	r3, [sp, #12]
 8006d9c:	3402      	adds	r4, #2
 8006d9e:	1d1a      	adds	r2, r3, #4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	9203      	str	r2, [sp, #12]
 8006da4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006da8:	9305      	str	r3, [sp, #20]
 8006daa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006e74 <_vfiprintf_r+0x220>
 8006dae:	2203      	movs	r2, #3
 8006db0:	4650      	mov	r0, sl
 8006db2:	7821      	ldrb	r1, [r4, #0]
 8006db4:	f7fe fc3b 	bl	800562e <memchr>
 8006db8:	b138      	cbz	r0, 8006dca <_vfiprintf_r+0x176>
 8006dba:	2240      	movs	r2, #64	@ 0x40
 8006dbc:	9b04      	ldr	r3, [sp, #16]
 8006dbe:	eba0 000a 	sub.w	r0, r0, sl
 8006dc2:	4082      	lsls	r2, r0
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	3401      	adds	r4, #1
 8006dc8:	9304      	str	r3, [sp, #16]
 8006dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dce:	2206      	movs	r2, #6
 8006dd0:	4829      	ldr	r0, [pc, #164]	@ (8006e78 <_vfiprintf_r+0x224>)
 8006dd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006dd6:	f7fe fc2a 	bl	800562e <memchr>
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d03f      	beq.n	8006e5e <_vfiprintf_r+0x20a>
 8006dde:	4b27      	ldr	r3, [pc, #156]	@ (8006e7c <_vfiprintf_r+0x228>)
 8006de0:	bb1b      	cbnz	r3, 8006e2a <_vfiprintf_r+0x1d6>
 8006de2:	9b03      	ldr	r3, [sp, #12]
 8006de4:	3307      	adds	r3, #7
 8006de6:	f023 0307 	bic.w	r3, r3, #7
 8006dea:	3308      	adds	r3, #8
 8006dec:	9303      	str	r3, [sp, #12]
 8006dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df0:	443b      	add	r3, r7
 8006df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006df4:	e76a      	b.n	8006ccc <_vfiprintf_r+0x78>
 8006df6:	460c      	mov	r4, r1
 8006df8:	2001      	movs	r0, #1
 8006dfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dfe:	e7a8      	b.n	8006d52 <_vfiprintf_r+0xfe>
 8006e00:	2300      	movs	r3, #0
 8006e02:	f04f 0c0a 	mov.w	ip, #10
 8006e06:	4619      	mov	r1, r3
 8006e08:	3401      	adds	r4, #1
 8006e0a:	9305      	str	r3, [sp, #20]
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e12:	3a30      	subs	r2, #48	@ 0x30
 8006e14:	2a09      	cmp	r2, #9
 8006e16:	d903      	bls.n	8006e20 <_vfiprintf_r+0x1cc>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0c6      	beq.n	8006daa <_vfiprintf_r+0x156>
 8006e1c:	9105      	str	r1, [sp, #20]
 8006e1e:	e7c4      	b.n	8006daa <_vfiprintf_r+0x156>
 8006e20:	4604      	mov	r4, r0
 8006e22:	2301      	movs	r3, #1
 8006e24:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e28:	e7f0      	b.n	8006e0c <_vfiprintf_r+0x1b8>
 8006e2a:	ab03      	add	r3, sp, #12
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	462a      	mov	r2, r5
 8006e30:	4630      	mov	r0, r6
 8006e32:	4b13      	ldr	r3, [pc, #76]	@ (8006e80 <_vfiprintf_r+0x22c>)
 8006e34:	a904      	add	r1, sp, #16
 8006e36:	f7fd fdb3 	bl	80049a0 <_printf_float>
 8006e3a:	4607      	mov	r7, r0
 8006e3c:	1c78      	adds	r0, r7, #1
 8006e3e:	d1d6      	bne.n	8006dee <_vfiprintf_r+0x19a>
 8006e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e42:	07d9      	lsls	r1, r3, #31
 8006e44:	d405      	bmi.n	8006e52 <_vfiprintf_r+0x1fe>
 8006e46:	89ab      	ldrh	r3, [r5, #12]
 8006e48:	059a      	lsls	r2, r3, #22
 8006e4a:	d402      	bmi.n	8006e52 <_vfiprintf_r+0x1fe>
 8006e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e4e:	f7fe fbed 	bl	800562c <__retarget_lock_release_recursive>
 8006e52:	89ab      	ldrh	r3, [r5, #12]
 8006e54:	065b      	lsls	r3, r3, #25
 8006e56:	f53f af1f 	bmi.w	8006c98 <_vfiprintf_r+0x44>
 8006e5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e5c:	e71e      	b.n	8006c9c <_vfiprintf_r+0x48>
 8006e5e:	ab03      	add	r3, sp, #12
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	462a      	mov	r2, r5
 8006e64:	4630      	mov	r0, r6
 8006e66:	4b06      	ldr	r3, [pc, #24]	@ (8006e80 <_vfiprintf_r+0x22c>)
 8006e68:	a904      	add	r1, sp, #16
 8006e6a:	f7fe f837 	bl	8004edc <_printf_i>
 8006e6e:	e7e4      	b.n	8006e3a <_vfiprintf_r+0x1e6>
 8006e70:	08007618 	.word	0x08007618
 8006e74:	0800761e 	.word	0x0800761e
 8006e78:	08007622 	.word	0x08007622
 8006e7c:	080049a1 	.word	0x080049a1
 8006e80:	08006c2f 	.word	0x08006c2f

08006e84 <__sflush_r>:
 8006e84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	0716      	lsls	r6, r2, #28
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	460c      	mov	r4, r1
 8006e90:	d454      	bmi.n	8006f3c <__sflush_r+0xb8>
 8006e92:	684b      	ldr	r3, [r1, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	dc02      	bgt.n	8006e9e <__sflush_r+0x1a>
 8006e98:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	dd48      	ble.n	8006f30 <__sflush_r+0xac>
 8006e9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ea0:	2e00      	cmp	r6, #0
 8006ea2:	d045      	beq.n	8006f30 <__sflush_r+0xac>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006eaa:	682f      	ldr	r7, [r5, #0]
 8006eac:	6a21      	ldr	r1, [r4, #32]
 8006eae:	602b      	str	r3, [r5, #0]
 8006eb0:	d030      	beq.n	8006f14 <__sflush_r+0x90>
 8006eb2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	0759      	lsls	r1, r3, #29
 8006eb8:	d505      	bpl.n	8006ec6 <__sflush_r+0x42>
 8006eba:	6863      	ldr	r3, [r4, #4]
 8006ebc:	1ad2      	subs	r2, r2, r3
 8006ebe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ec0:	b10b      	cbz	r3, 8006ec6 <__sflush_r+0x42>
 8006ec2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ec4:	1ad2      	subs	r2, r2, r3
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	4628      	mov	r0, r5
 8006eca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ecc:	6a21      	ldr	r1, [r4, #32]
 8006ece:	47b0      	blx	r6
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	d106      	bne.n	8006ee4 <__sflush_r+0x60>
 8006ed6:	6829      	ldr	r1, [r5, #0]
 8006ed8:	291d      	cmp	r1, #29
 8006eda:	d82b      	bhi.n	8006f34 <__sflush_r+0xb0>
 8006edc:	4a28      	ldr	r2, [pc, #160]	@ (8006f80 <__sflush_r+0xfc>)
 8006ede:	410a      	asrs	r2, r1
 8006ee0:	07d6      	lsls	r6, r2, #31
 8006ee2:	d427      	bmi.n	8006f34 <__sflush_r+0xb0>
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	6062      	str	r2, [r4, #4]
 8006ee8:	6922      	ldr	r2, [r4, #16]
 8006eea:	04d9      	lsls	r1, r3, #19
 8006eec:	6022      	str	r2, [r4, #0]
 8006eee:	d504      	bpl.n	8006efa <__sflush_r+0x76>
 8006ef0:	1c42      	adds	r2, r0, #1
 8006ef2:	d101      	bne.n	8006ef8 <__sflush_r+0x74>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b903      	cbnz	r3, 8006efa <__sflush_r+0x76>
 8006ef8:	6560      	str	r0, [r4, #84]	@ 0x54
 8006efa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006efc:	602f      	str	r7, [r5, #0]
 8006efe:	b1b9      	cbz	r1, 8006f30 <__sflush_r+0xac>
 8006f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f04:	4299      	cmp	r1, r3
 8006f06:	d002      	beq.n	8006f0e <__sflush_r+0x8a>
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f7ff f9fd 	bl	8006308 <_free_r>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f12:	e00d      	b.n	8006f30 <__sflush_r+0xac>
 8006f14:	2301      	movs	r3, #1
 8006f16:	4628      	mov	r0, r5
 8006f18:	47b0      	blx	r6
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	1c50      	adds	r0, r2, #1
 8006f1e:	d1c9      	bne.n	8006eb4 <__sflush_r+0x30>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0c6      	beq.n	8006eb4 <__sflush_r+0x30>
 8006f26:	2b1d      	cmp	r3, #29
 8006f28:	d001      	beq.n	8006f2e <__sflush_r+0xaa>
 8006f2a:	2b16      	cmp	r3, #22
 8006f2c:	d11d      	bne.n	8006f6a <__sflush_r+0xe6>
 8006f2e:	602f      	str	r7, [r5, #0]
 8006f30:	2000      	movs	r0, #0
 8006f32:	e021      	b.n	8006f78 <__sflush_r+0xf4>
 8006f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f38:	b21b      	sxth	r3, r3
 8006f3a:	e01a      	b.n	8006f72 <__sflush_r+0xee>
 8006f3c:	690f      	ldr	r7, [r1, #16]
 8006f3e:	2f00      	cmp	r7, #0
 8006f40:	d0f6      	beq.n	8006f30 <__sflush_r+0xac>
 8006f42:	0793      	lsls	r3, r2, #30
 8006f44:	bf18      	it	ne
 8006f46:	2300      	movne	r3, #0
 8006f48:	680e      	ldr	r6, [r1, #0]
 8006f4a:	bf08      	it	eq
 8006f4c:	694b      	ldreq	r3, [r1, #20]
 8006f4e:	1bf6      	subs	r6, r6, r7
 8006f50:	600f      	str	r7, [r1, #0]
 8006f52:	608b      	str	r3, [r1, #8]
 8006f54:	2e00      	cmp	r6, #0
 8006f56:	ddeb      	ble.n	8006f30 <__sflush_r+0xac>
 8006f58:	4633      	mov	r3, r6
 8006f5a:	463a      	mov	r2, r7
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	6a21      	ldr	r1, [r4, #32]
 8006f60:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006f64:	47e0      	blx	ip
 8006f66:	2800      	cmp	r0, #0
 8006f68:	dc07      	bgt.n	8006f7a <__sflush_r+0xf6>
 8006f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f72:	f04f 30ff 	mov.w	r0, #4294967295
 8006f76:	81a3      	strh	r3, [r4, #12]
 8006f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7a:	4407      	add	r7, r0
 8006f7c:	1a36      	subs	r6, r6, r0
 8006f7e:	e7e9      	b.n	8006f54 <__sflush_r+0xd0>
 8006f80:	dfbffffe 	.word	0xdfbffffe

08006f84 <_fflush_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	690b      	ldr	r3, [r1, #16]
 8006f88:	4605      	mov	r5, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	b913      	cbnz	r3, 8006f94 <_fflush_r+0x10>
 8006f8e:	2500      	movs	r5, #0
 8006f90:	4628      	mov	r0, r5
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	b118      	cbz	r0, 8006f9e <_fflush_r+0x1a>
 8006f96:	6a03      	ldr	r3, [r0, #32]
 8006f98:	b90b      	cbnz	r3, 8006f9e <_fflush_r+0x1a>
 8006f9a:	f7fe f94b 	bl	8005234 <__sinit>
 8006f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0f3      	beq.n	8006f8e <_fflush_r+0xa>
 8006fa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fa8:	07d0      	lsls	r0, r2, #31
 8006faa:	d404      	bmi.n	8006fb6 <_fflush_r+0x32>
 8006fac:	0599      	lsls	r1, r3, #22
 8006fae:	d402      	bmi.n	8006fb6 <_fflush_r+0x32>
 8006fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fb2:	f7fe fb3a 	bl	800562a <__retarget_lock_acquire_recursive>
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	4621      	mov	r1, r4
 8006fba:	f7ff ff63 	bl	8006e84 <__sflush_r>
 8006fbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	07da      	lsls	r2, r3, #31
 8006fc4:	d4e4      	bmi.n	8006f90 <_fflush_r+0xc>
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	059b      	lsls	r3, r3, #22
 8006fca:	d4e1      	bmi.n	8006f90 <_fflush_r+0xc>
 8006fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fce:	f7fe fb2d 	bl	800562c <__retarget_lock_release_recursive>
 8006fd2:	e7dd      	b.n	8006f90 <_fflush_r+0xc>

08006fd4 <__swhatbuf_r>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fdc:	4615      	mov	r5, r2
 8006fde:	2900      	cmp	r1, #0
 8006fe0:	461e      	mov	r6, r3
 8006fe2:	b096      	sub	sp, #88	@ 0x58
 8006fe4:	da0c      	bge.n	8007000 <__swhatbuf_r+0x2c>
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	2100      	movs	r1, #0
 8006fea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006fee:	bf14      	ite	ne
 8006ff0:	2340      	movne	r3, #64	@ 0x40
 8006ff2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	6031      	str	r1, [r6, #0]
 8006ffa:	602b      	str	r3, [r5, #0]
 8006ffc:	b016      	add	sp, #88	@ 0x58
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	466a      	mov	r2, sp
 8007002:	f000 f849 	bl	8007098 <_fstat_r>
 8007006:	2800      	cmp	r0, #0
 8007008:	dbed      	blt.n	8006fe6 <__swhatbuf_r+0x12>
 800700a:	9901      	ldr	r1, [sp, #4]
 800700c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007010:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007014:	4259      	negs	r1, r3
 8007016:	4159      	adcs	r1, r3
 8007018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800701c:	e7eb      	b.n	8006ff6 <__swhatbuf_r+0x22>

0800701e <__smakebuf_r>:
 800701e:	898b      	ldrh	r3, [r1, #12]
 8007020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007022:	079d      	lsls	r5, r3, #30
 8007024:	4606      	mov	r6, r0
 8007026:	460c      	mov	r4, r1
 8007028:	d507      	bpl.n	800703a <__smakebuf_r+0x1c>
 800702a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	6123      	str	r3, [r4, #16]
 8007032:	2301      	movs	r3, #1
 8007034:	6163      	str	r3, [r4, #20]
 8007036:	b003      	add	sp, #12
 8007038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800703a:	466a      	mov	r2, sp
 800703c:	ab01      	add	r3, sp, #4
 800703e:	f7ff ffc9 	bl	8006fd4 <__swhatbuf_r>
 8007042:	9f00      	ldr	r7, [sp, #0]
 8007044:	4605      	mov	r5, r0
 8007046:	4639      	mov	r1, r7
 8007048:	4630      	mov	r0, r6
 800704a:	f7ff f9cf 	bl	80063ec <_malloc_r>
 800704e:	b948      	cbnz	r0, 8007064 <__smakebuf_r+0x46>
 8007050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007054:	059a      	lsls	r2, r3, #22
 8007056:	d4ee      	bmi.n	8007036 <__smakebuf_r+0x18>
 8007058:	f023 0303 	bic.w	r3, r3, #3
 800705c:	f043 0302 	orr.w	r3, r3, #2
 8007060:	81a3      	strh	r3, [r4, #12]
 8007062:	e7e2      	b.n	800702a <__smakebuf_r+0xc>
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800706a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706e:	81a3      	strh	r3, [r4, #12]
 8007070:	9b01      	ldr	r3, [sp, #4]
 8007072:	6020      	str	r0, [r4, #0]
 8007074:	b15b      	cbz	r3, 800708e <__smakebuf_r+0x70>
 8007076:	4630      	mov	r0, r6
 8007078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800707c:	f000 f81e 	bl	80070bc <_isatty_r>
 8007080:	b128      	cbz	r0, 800708e <__smakebuf_r+0x70>
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	f023 0303 	bic.w	r3, r3, #3
 8007088:	f043 0301 	orr.w	r3, r3, #1
 800708c:	81a3      	strh	r3, [r4, #12]
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	431d      	orrs	r5, r3
 8007092:	81a5      	strh	r5, [r4, #12]
 8007094:	e7cf      	b.n	8007036 <__smakebuf_r+0x18>
	...

08007098 <_fstat_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	2300      	movs	r3, #0
 800709c:	4d06      	ldr	r5, [pc, #24]	@ (80070b8 <_fstat_r+0x20>)
 800709e:	4604      	mov	r4, r0
 80070a0:	4608      	mov	r0, r1
 80070a2:	4611      	mov	r1, r2
 80070a4:	602b      	str	r3, [r5, #0]
 80070a6:	f7fa fc67 	bl	8001978 <_fstat>
 80070aa:	1c43      	adds	r3, r0, #1
 80070ac:	d102      	bne.n	80070b4 <_fstat_r+0x1c>
 80070ae:	682b      	ldr	r3, [r5, #0]
 80070b0:	b103      	cbz	r3, 80070b4 <_fstat_r+0x1c>
 80070b2:	6023      	str	r3, [r4, #0]
 80070b4:	bd38      	pop	{r3, r4, r5, pc}
 80070b6:	bf00      	nop
 80070b8:	2000087c 	.word	0x2000087c

080070bc <_isatty_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	2300      	movs	r3, #0
 80070c0:	4d05      	ldr	r5, [pc, #20]	@ (80070d8 <_isatty_r+0x1c>)
 80070c2:	4604      	mov	r4, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	602b      	str	r3, [r5, #0]
 80070c8:	f7fa fc65 	bl	8001996 <_isatty>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_isatty_r+0x1a>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_isatty_r+0x1a>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	2000087c 	.word	0x2000087c

080070dc <_sbrk_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	2300      	movs	r3, #0
 80070e0:	4d05      	ldr	r5, [pc, #20]	@ (80070f8 <_sbrk_r+0x1c>)
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	f7fa fc6c 	bl	80019c4 <_sbrk>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_sbrk_r+0x1a>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_sbrk_r+0x1a>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	2000087c 	.word	0x2000087c

080070fc <__assert_func>:
 80070fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070fe:	4614      	mov	r4, r2
 8007100:	461a      	mov	r2, r3
 8007102:	4b09      	ldr	r3, [pc, #36]	@ (8007128 <__assert_func+0x2c>)
 8007104:	4605      	mov	r5, r0
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68d8      	ldr	r0, [r3, #12]
 800710a:	b954      	cbnz	r4, 8007122 <__assert_func+0x26>
 800710c:	4b07      	ldr	r3, [pc, #28]	@ (800712c <__assert_func+0x30>)
 800710e:	461c      	mov	r4, r3
 8007110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007114:	9100      	str	r1, [sp, #0]
 8007116:	462b      	mov	r3, r5
 8007118:	4905      	ldr	r1, [pc, #20]	@ (8007130 <__assert_func+0x34>)
 800711a:	f000 f841 	bl	80071a0 <fiprintf>
 800711e:	f000 f851 	bl	80071c4 <abort>
 8007122:	4b04      	ldr	r3, [pc, #16]	@ (8007134 <__assert_func+0x38>)
 8007124:	e7f4      	b.n	8007110 <__assert_func+0x14>
 8007126:	bf00      	nop
 8007128:	20000018 	.word	0x20000018
 800712c:	0800766e 	.word	0x0800766e
 8007130:	08007640 	.word	0x08007640
 8007134:	08007633 	.word	0x08007633

08007138 <_calloc_r>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	fba1 5402 	umull	r5, r4, r1, r2
 800713e:	b93c      	cbnz	r4, 8007150 <_calloc_r+0x18>
 8007140:	4629      	mov	r1, r5
 8007142:	f7ff f953 	bl	80063ec <_malloc_r>
 8007146:	4606      	mov	r6, r0
 8007148:	b928      	cbnz	r0, 8007156 <_calloc_r+0x1e>
 800714a:	2600      	movs	r6, #0
 800714c:	4630      	mov	r0, r6
 800714e:	bd70      	pop	{r4, r5, r6, pc}
 8007150:	220c      	movs	r2, #12
 8007152:	6002      	str	r2, [r0, #0]
 8007154:	e7f9      	b.n	800714a <_calloc_r+0x12>
 8007156:	462a      	mov	r2, r5
 8007158:	4621      	mov	r1, r4
 800715a:	f7fe f9e9 	bl	8005530 <memset>
 800715e:	e7f5      	b.n	800714c <_calloc_r+0x14>

08007160 <__ascii_mbtowc>:
 8007160:	b082      	sub	sp, #8
 8007162:	b901      	cbnz	r1, 8007166 <__ascii_mbtowc+0x6>
 8007164:	a901      	add	r1, sp, #4
 8007166:	b142      	cbz	r2, 800717a <__ascii_mbtowc+0x1a>
 8007168:	b14b      	cbz	r3, 800717e <__ascii_mbtowc+0x1e>
 800716a:	7813      	ldrb	r3, [r2, #0]
 800716c:	600b      	str	r3, [r1, #0]
 800716e:	7812      	ldrb	r2, [r2, #0]
 8007170:	1e10      	subs	r0, r2, #0
 8007172:	bf18      	it	ne
 8007174:	2001      	movne	r0, #1
 8007176:	b002      	add	sp, #8
 8007178:	4770      	bx	lr
 800717a:	4610      	mov	r0, r2
 800717c:	e7fb      	b.n	8007176 <__ascii_mbtowc+0x16>
 800717e:	f06f 0001 	mvn.w	r0, #1
 8007182:	e7f8      	b.n	8007176 <__ascii_mbtowc+0x16>

08007184 <__ascii_wctomb>:
 8007184:	4603      	mov	r3, r0
 8007186:	4608      	mov	r0, r1
 8007188:	b141      	cbz	r1, 800719c <__ascii_wctomb+0x18>
 800718a:	2aff      	cmp	r2, #255	@ 0xff
 800718c:	d904      	bls.n	8007198 <__ascii_wctomb+0x14>
 800718e:	228a      	movs	r2, #138	@ 0x8a
 8007190:	f04f 30ff 	mov.w	r0, #4294967295
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	4770      	bx	lr
 8007198:	2001      	movs	r0, #1
 800719a:	700a      	strb	r2, [r1, #0]
 800719c:	4770      	bx	lr
	...

080071a0 <fiprintf>:
 80071a0:	b40e      	push	{r1, r2, r3}
 80071a2:	b503      	push	{r0, r1, lr}
 80071a4:	4601      	mov	r1, r0
 80071a6:	ab03      	add	r3, sp, #12
 80071a8:	4805      	ldr	r0, [pc, #20]	@ (80071c0 <fiprintf+0x20>)
 80071aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ae:	6800      	ldr	r0, [r0, #0]
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	f7ff fd4f 	bl	8006c54 <_vfiprintf_r>
 80071b6:	b002      	add	sp, #8
 80071b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071bc:	b003      	add	sp, #12
 80071be:	4770      	bx	lr
 80071c0:	20000018 	.word	0x20000018

080071c4 <abort>:
 80071c4:	2006      	movs	r0, #6
 80071c6:	b508      	push	{r3, lr}
 80071c8:	f000 f82c 	bl	8007224 <raise>
 80071cc:	2001      	movs	r0, #1
 80071ce:	f7fa fb84 	bl	80018da <_exit>

080071d2 <_raise_r>:
 80071d2:	291f      	cmp	r1, #31
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4605      	mov	r5, r0
 80071d8:	460c      	mov	r4, r1
 80071da:	d904      	bls.n	80071e6 <_raise_r+0x14>
 80071dc:	2316      	movs	r3, #22
 80071de:	6003      	str	r3, [r0, #0]
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	bd38      	pop	{r3, r4, r5, pc}
 80071e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80071e8:	b112      	cbz	r2, 80071f0 <_raise_r+0x1e>
 80071ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071ee:	b94b      	cbnz	r3, 8007204 <_raise_r+0x32>
 80071f0:	4628      	mov	r0, r5
 80071f2:	f000 f831 	bl	8007258 <_getpid_r>
 80071f6:	4622      	mov	r2, r4
 80071f8:	4601      	mov	r1, r0
 80071fa:	4628      	mov	r0, r5
 80071fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007200:	f000 b818 	b.w	8007234 <_kill_r>
 8007204:	2b01      	cmp	r3, #1
 8007206:	d00a      	beq.n	800721e <_raise_r+0x4c>
 8007208:	1c59      	adds	r1, r3, #1
 800720a:	d103      	bne.n	8007214 <_raise_r+0x42>
 800720c:	2316      	movs	r3, #22
 800720e:	6003      	str	r3, [r0, #0]
 8007210:	2001      	movs	r0, #1
 8007212:	e7e7      	b.n	80071e4 <_raise_r+0x12>
 8007214:	2100      	movs	r1, #0
 8007216:	4620      	mov	r0, r4
 8007218:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800721c:	4798      	blx	r3
 800721e:	2000      	movs	r0, #0
 8007220:	e7e0      	b.n	80071e4 <_raise_r+0x12>
	...

08007224 <raise>:
 8007224:	4b02      	ldr	r3, [pc, #8]	@ (8007230 <raise+0xc>)
 8007226:	4601      	mov	r1, r0
 8007228:	6818      	ldr	r0, [r3, #0]
 800722a:	f7ff bfd2 	b.w	80071d2 <_raise_r>
 800722e:	bf00      	nop
 8007230:	20000018 	.word	0x20000018

08007234 <_kill_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	2300      	movs	r3, #0
 8007238:	4d06      	ldr	r5, [pc, #24]	@ (8007254 <_kill_r+0x20>)
 800723a:	4604      	mov	r4, r0
 800723c:	4608      	mov	r0, r1
 800723e:	4611      	mov	r1, r2
 8007240:	602b      	str	r3, [r5, #0]
 8007242:	f7fa fb3a 	bl	80018ba <_kill>
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	d102      	bne.n	8007250 <_kill_r+0x1c>
 800724a:	682b      	ldr	r3, [r5, #0]
 800724c:	b103      	cbz	r3, 8007250 <_kill_r+0x1c>
 800724e:	6023      	str	r3, [r4, #0]
 8007250:	bd38      	pop	{r3, r4, r5, pc}
 8007252:	bf00      	nop
 8007254:	2000087c 	.word	0x2000087c

08007258 <_getpid_r>:
 8007258:	f7fa bb28 	b.w	80018ac <_getpid>

0800725c <_init>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	bf00      	nop
 8007260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007262:	bc08      	pop	{r3}
 8007264:	469e      	mov	lr, r3
 8007266:	4770      	bx	lr

08007268 <_fini>:
 8007268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726a:	bf00      	nop
 800726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726e:	bc08      	pop	{r3}
 8007270:	469e      	mov	lr, r3
 8007272:	4770      	bx	lr
