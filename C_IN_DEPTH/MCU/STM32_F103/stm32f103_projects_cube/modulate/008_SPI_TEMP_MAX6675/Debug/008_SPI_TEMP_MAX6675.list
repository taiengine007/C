
008_SPI_TEMP_MAX6675.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e84  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08001f90  08001f90  00002f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002078  08002078  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002078  08002078  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002078  08002078  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002078  08002078  00003078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800207c  0800207c  0000307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002080  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000068  080020e8  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  080020e8  00004240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d23  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016bc  00000000  00000000  00009db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000b470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051d  00000000  00000000  0000bb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017986  00000000  00000000  0000c085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000080d7  00000000  00000000  00023a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083574  00000000  00000000  0002bae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af056  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b0  00000000  00000000  000af09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000b114c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f78 	.word	0x08001f78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08001f78 	.word	0x08001f78

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fadb 	bl	800070c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f819 	bl	800018c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f88b 	bl	8000274 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f851 	bl	8000204 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MAX6675_Init(&sensor, &hspi1, GPIOB, GPIO_PIN_0);
 8000162:	2301      	movs	r3, #1
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <main+0x30>)
 8000166:	4906      	ldr	r1, [pc, #24]	@ (8000180 <main+0x34>)
 8000168:	4806      	ldr	r0, [pc, #24]	@ (8000184 <main+0x38>)
 800016a:	f000 faab 	bl	80006c4 <MAX6675_Init>
  printf("max_sensor_initialised\n");
 800016e:	4806      	ldr	r0, [pc, #24]	@ (8000188 <main+0x3c>)
 8000170:	f001 fb74 	bl	800185c <puts>
  //float temperature = 0.0;
  int temp_int =0;
 8000174:	2300      	movs	r3, #0
 8000176:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000178:	bf00      	nop
 800017a:	e7fd      	b.n	8000178 <main+0x2c>
 800017c:	40010c00 	.word	0x40010c00
 8000180:	20000094 	.word	0x20000094
 8000184:	20000084 	.word	0x20000084
 8000188:	08001f90 	.word	0x08001f90

0800018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b090      	sub	sp, #64	@ 0x40
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0318 	add.w	r3, r7, #24
 8000196:	2228      	movs	r2, #40	@ 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f001 fc3e 	bl	8001a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]
 80001ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ae:	2302      	movs	r3, #2
 80001b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b2:	2301      	movs	r3, #1
 80001b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b6:	2310      	movs	r3, #16
 80001b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ba:	2300      	movs	r3, #0
 80001bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 fdd0 	bl	8000d68 <HAL_RCC_OscConfig>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ce:	f000 f8cd 	bl	800036c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d2:	230f      	movs	r3, #15
 80001d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f001 f83d 	bl	800126c <HAL_RCC_ClockConfig>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <SystemClock_Config+0x70>
  {
    Error_Handler();
 80001f8:	f000 f8b8 	bl	800036c <Error_Handler>
  }
}
 80001fc:	bf00      	nop
 80001fe:	3740      	adds	r7, #64	@ 0x40
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000208:	4b18      	ldr	r3, [pc, #96]	@ (800026c <MX_SPI1_Init+0x68>)
 800020a:	4a19      	ldr	r2, [pc, #100]	@ (8000270 <MX_SPI1_Init+0x6c>)
 800020c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800020e:	4b17      	ldr	r3, [pc, #92]	@ (800026c <MX_SPI1_Init+0x68>)
 8000210:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000216:	4b15      	ldr	r3, [pc, #84]	@ (800026c <MX_SPI1_Init+0x68>)
 8000218:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800021c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800021e:	4b13      	ldr	r3, [pc, #76]	@ (800026c <MX_SPI1_Init+0x68>)
 8000220:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000224:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000226:	4b11      	ldr	r3, [pc, #68]	@ (800026c <MX_SPI1_Init+0x68>)
 8000228:	2200      	movs	r2, #0
 800022a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800022c:	4b0f      	ldr	r3, [pc, #60]	@ (800026c <MX_SPI1_Init+0x68>)
 800022e:	2200      	movs	r2, #0
 8000230:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000232:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <MX_SPI1_Init+0x68>)
 8000234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000238:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800023a:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <MX_SPI1_Init+0x68>)
 800023c:	2200      	movs	r2, #0
 800023e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000240:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <MX_SPI1_Init+0x68>)
 8000242:	2200      	movs	r2, #0
 8000244:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000246:	4b09      	ldr	r3, [pc, #36]	@ (800026c <MX_SPI1_Init+0x68>)
 8000248:	2200      	movs	r2, #0
 800024a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800024c:	4b07      	ldr	r3, [pc, #28]	@ (800026c <MX_SPI1_Init+0x68>)
 800024e:	2200      	movs	r2, #0
 8000250:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000252:	4b06      	ldr	r3, [pc, #24]	@ (800026c <MX_SPI1_Init+0x68>)
 8000254:	220a      	movs	r2, #10
 8000256:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <MX_SPI1_Init+0x68>)
 800025a:	f001 f963 	bl	8001524 <HAL_SPI_Init>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000264:	f000 f882 	bl	800036c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000094 	.word	0x20000094
 8000270:	40013000 	.word	0x40013000

08000274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000288:	4b33      	ldr	r3, [pc, #204]	@ (8000358 <MX_GPIO_Init+0xe4>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a32      	ldr	r2, [pc, #200]	@ (8000358 <MX_GPIO_Init+0xe4>)
 800028e:	f043 0310 	orr.w	r3, r3, #16
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b30      	ldr	r3, [pc, #192]	@ (8000358 <MX_GPIO_Init+0xe4>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0310 	and.w	r3, r3, #16
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000358 <MX_GPIO_Init+0xe4>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a2c      	ldr	r2, [pc, #176]	@ (8000358 <MX_GPIO_Init+0xe4>)
 80002a6:	f043 0320 	orr.w	r3, r3, #32
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000358 <MX_GPIO_Init+0xe4>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0320 	and.w	r3, r3, #32
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b8:	4b27      	ldr	r3, [pc, #156]	@ (8000358 <MX_GPIO_Init+0xe4>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a26      	ldr	r2, [pc, #152]	@ (8000358 <MX_GPIO_Init+0xe4>)
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b24      	ldr	r3, [pc, #144]	@ (8000358 <MX_GPIO_Init+0xe4>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0304 	and.w	r3, r3, #4
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d0:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <MX_GPIO_Init+0xe4>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a20      	ldr	r2, [pc, #128]	@ (8000358 <MX_GPIO_Init+0xe4>)
 80002d6:	f043 0308 	orr.w	r3, r3, #8
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <MX_GPIO_Init+0xe4>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0308 	and.w	r3, r3, #8
 80002e4:	603b      	str	r3, [r7, #0]
 80002e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHIP_SELECTO_GPIO_Port, CHIP_SELECTO_Pin, GPIO_PIN_SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	2101      	movs	r1, #1
 80002ec:	481b      	ldr	r0, [pc, #108]	@ (800035c <MX_GPIO_Init+0xe8>)
 80002ee:	f000 fd01 	bl	8000cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002f8:	4b19      	ldr	r3, [pc, #100]	@ (8000360 <MX_GPIO_Init+0xec>)
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000300:	f107 0310 	add.w	r3, r7, #16
 8000304:	4619      	mov	r1, r3
 8000306:	4817      	ldr	r0, [pc, #92]	@ (8000364 <MX_GPIO_Init+0xf0>)
 8000308:	f000 fb70 	bl	80009ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800030c:	230c      	movs	r3, #12
 800030e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000310:	2302      	movs	r3, #2
 8000312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000314:	2302      	movs	r3, #2
 8000316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000318:	f107 0310 	add.w	r3, r7, #16
 800031c:	4619      	mov	r1, r3
 800031e:	4812      	ldr	r0, [pc, #72]	@ (8000368 <MX_GPIO_Init+0xf4>)
 8000320:	f000 fb64 	bl	80009ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CHIP_SELECTO_Pin */
  GPIO_InitStruct.Pin = CHIP_SELECTO_Pin;
 8000324:	2301      	movs	r3, #1
 8000326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000328:	2301      	movs	r3, #1
 800032a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000330:	2302      	movs	r3, #2
 8000332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHIP_SELECTO_GPIO_Port, &GPIO_InitStruct);
 8000334:	f107 0310 	add.w	r3, r7, #16
 8000338:	4619      	mov	r1, r3
 800033a:	4808      	ldr	r0, [pc, #32]	@ (800035c <MX_GPIO_Init+0xe8>)
 800033c:	f000 fb56 	bl	80009ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000340:	2200      	movs	r2, #0
 8000342:	2100      	movs	r1, #0
 8000344:	2028      	movs	r0, #40	@ 0x28
 8000346:	f000 fb1a 	bl	800097e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800034a:	2028      	movs	r0, #40	@ 0x28
 800034c:	f000 fb33 	bl	80009b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000350:	bf00      	nop
 8000352:	3720      	adds	r7, #32
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000
 800035c:	40010c00 	.word	0x40010c00
 8000360:	10110000 	.word	0x10110000
 8000364:	40011000 	.word	0x40011000
 8000368:	40010800 	.word	0x40010800

0800036c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000370:	b672      	cpsid	i
}
 8000372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("something went wrong in aerror handler\n");
 8000374:	4801      	ldr	r0, [pc, #4]	@ (800037c <Error_Handler+0x10>)
 8000376:	f001 fa71 	bl	800185c <puts>
 800037a:	e7fb      	b.n	8000374 <Error_Handler+0x8>
 800037c:	08001fa8 	.word	0x08001fa8

08000380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000386:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <HAL_MspInit+0x5c>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a14      	ldr	r2, [pc, #80]	@ (80003dc <HAL_MspInit+0x5c>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <HAL_MspInit+0x5c>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a0e      	ldr	r2, [pc, #56]	@ (80003dc <HAL_MspInit+0x5c>)
 80003a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003b6:	4b0a      	ldr	r3, [pc, #40]	@ (80003e0 <HAL_MspInit+0x60>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	4a04      	ldr	r2, [pc, #16]	@ (80003e0 <HAL_MspInit+0x60>)
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d2:	bf00      	nop
 80003d4:	3714      	adds	r7, #20
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010000 	.word	0x40010000

080003e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b088      	sub	sp, #32
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a1b      	ldr	r2, [pc, #108]	@ (800046c <HAL_SPI_MspInit+0x88>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d12f      	bne.n	8000464 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000404:	4b1a      	ldr	r3, [pc, #104]	@ (8000470 <HAL_SPI_MspInit+0x8c>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a19      	ldr	r2, [pc, #100]	@ (8000470 <HAL_SPI_MspInit+0x8c>)
 800040a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <HAL_SPI_MspInit+0x8c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	4b14      	ldr	r3, [pc, #80]	@ (8000470 <HAL_SPI_MspInit+0x8c>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a13      	ldr	r2, [pc, #76]	@ (8000470 <HAL_SPI_MspInit+0x8c>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <HAL_SPI_MspInit+0x8c>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0304 	and.w	r3, r3, #4
 8000430:	60bb      	str	r3, [r7, #8]
 8000432:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000434:	2320      	movs	r3, #32
 8000436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000438:	2302      	movs	r3, #2
 800043a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800043c:	2303      	movs	r3, #3
 800043e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	480b      	ldr	r0, [pc, #44]	@ (8000474 <HAL_SPI_MspInit+0x90>)
 8000448:	f000 fad0 	bl	80009ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800044c:	2340      	movs	r3, #64	@ 0x40
 800044e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4805      	ldr	r0, [pc, #20]	@ (8000474 <HAL_SPI_MspInit+0x90>)
 8000460:	f000 fac4 	bl	80009ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40013000 	.word	0x40013000
 8000470:	40021000 	.word	0x40021000
 8000474:	40010800 	.word	0x40010800

08000478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <NMI_Handler+0x4>

08000480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <MemManage_Handler+0x4>

08000490 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <BusFault_Handler+0x4>

08000498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <UsageFault_Handler+0x4>

080004a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c8:	f000 f966 	bl	8000798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004d8:	f000 fc24 	bl	8000d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <ITM_SendChar+0x44>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <ITM_SendChar+0x44>)
 80004f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004f4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <ITM_SendChar+0x48>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000528 <ITM_SendChar+0x48>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000502:	bf00      	nop
 8000504:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0f8      	beq.n	8000504 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000512:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	6013      	str	r3, [r2, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	e000edfc 	.word	0xe000edfc
 8000528:	e0000e00 	.word	0xe0000e00

0800052c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e00a      	b.n	8000554 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800053e:	f3af 8000 	nop.w
 8000542:	4601      	mov	r1, r0
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	60ba      	str	r2, [r7, #8]
 800054a:	b2ca      	uxtb	r2, r1
 800054c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697a      	ldr	r2, [r7, #20]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	429a      	cmp	r2, r3
 800055a:	dbf0      	blt.n	800053e <_read+0x12>
  }

  return len;
 800055c:	687b      	ldr	r3, [r7, #4]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b086      	sub	sp, #24
 800056a:	af00      	add	r7, sp, #0
 800056c:	60f8      	str	r0, [r7, #12]
 800056e:	60b9      	str	r1, [r7, #8]
 8000570:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	e009      	b.n	800058c <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	60ba      	str	r2, [r7, #8]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ffad 	bl	80004e0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	3301      	adds	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	429a      	cmp	r2, r3
 8000592:	dbf1      	blt.n	8000578 <_write+0x12>
  }
  return len;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <_close>:

int _close(int file)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005c4:	605a      	str	r2, [r3, #4]
  return 0;
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <_isatty>:

int _isatty(int file)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005da:	2301      	movs	r3, #1
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b085      	sub	sp, #20
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	60f8      	str	r0, [r7, #12]
 80005ee:	60b9      	str	r1, [r7, #8]
 80005f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
	...

08000600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000608:	4a14      	ldr	r2, [pc, #80]	@ (800065c <_sbrk+0x5c>)
 800060a:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <_sbrk+0x60>)
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000614:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d102      	bne.n	8000622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800061c:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <_sbrk+0x64>)
 800061e:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <_sbrk+0x68>)
 8000620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000622:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	429a      	cmp	r2, r3
 800062e:	d207      	bcs.n	8000640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000630:	f001 fa42 	bl	8001ab8 <__errno>
 8000634:	4603      	mov	r3, r0
 8000636:	220c      	movs	r2, #12
 8000638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	e009      	b.n	8000654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000640:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <_sbrk+0x64>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	4a05      	ldr	r2, [pc, #20]	@ (8000664 <_sbrk+0x64>)
 8000650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000652:	68fb      	ldr	r3, [r7, #12]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20005000 	.word	0x20005000
 8000660:	00000400 	.word	0x00000400
 8000664:	200000ec 	.word	0x200000ec
 8000668:	20000240 	.word	0x20000240

0800066c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000678:	f7ff fff8 	bl	800066c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800067c:	480b      	ldr	r0, [pc, #44]	@ (80006ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800067e:	490c      	ldr	r1, [pc, #48]	@ (80006b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000680:	4a0c      	ldr	r2, [pc, #48]	@ (80006b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000684:	e002      	b.n	800068c <LoopCopyDataInit>

08000686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068a:	3304      	adds	r3, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800068c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000690:	d3f9      	bcc.n	8000686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000692:	4a09      	ldr	r2, [pc, #36]	@ (80006b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000694:	4c09      	ldr	r4, [pc, #36]	@ (80006bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000698:	e001      	b.n	800069e <LoopFillZerobss>

0800069a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800069c:	3204      	adds	r2, #4

0800069e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a0:	d3fb      	bcc.n	800069a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006a2:	f001 fa0f 	bl	8001ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff fd51 	bl	800014c <main>
  bx lr
 80006aa:	4770      	bx	lr
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006b4:	08002080 	.word	0x08002080
  ldr r2, =_sbss
 80006b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006bc:	20000240 	.word	0x20000240

080006c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC1_2_IRQHandler>
	...

080006c4 <MAX6675_Init>:
 * @param struc Pointer to the MAX6675 structure.
 * @param spiHandle Pointer to the SPI_HandleTypeDef struct for communication with the MAX6675.
 * @param GPIO_PORT_nCS GPIO port for chip select (CS) pin control.
 * @param GPIO_nCS_Pin GPIO pin for chip select (CS) control.
 */
void MAX6675_Init(MAX6675 *struc, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef* GPIO_PORT_nCS, uint16_t GPIO_nCS_Pin){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	807b      	strh	r3, [r7, #2]

	 printf("in max6675--->ur initialising max6675\n");
 80006d2:	480d      	ldr	r0, [pc, #52]	@ (8000708 <MAX6675_Init+0x44>)
 80006d4:	f001 f8c2 	bl	800185c <puts>
	struc->spiHandle = spiHandle;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	601a      	str	r2, [r3, #0]
	struc->GPIO_PORT_PIN = GPIO_PORT_nCS;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	605a      	str	r2, [r3, #4]
	struc->GPIO_Pin = GPIO_nCS_Pin;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	887a      	ldrh	r2, [r7, #2]
 80006e8:	811a      	strh	r2, [r3, #8]
	struc->endOfConversion = 0;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2200      	movs	r2, #0
 80006ee:	731a      	strb	r2, [r3, #12]

  	HAL_GPIO_WritePin(struc->GPIO_PORT_PIN, struc->GPIO_Pin, GPIO_PIN_SET);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	6858      	ldr	r0, [r3, #4]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	891b      	ldrh	r3, [r3, #8]
 80006f8:	2201      	movs	r2, #1
 80006fa:	4619      	mov	r1, r3
 80006fc:	f000 fafa 	bl	8000cf4 <HAL_GPIO_WritePin>

}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	08001fd0 	.word	0x08001fd0

0800070c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000710:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <HAL_Init+0x28>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a07      	ldr	r2, [pc, #28]	@ (8000734 <HAL_Init+0x28>)
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 f923 	bl	8000968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f808 	bl	8000738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000728:	f7ff fe2a 	bl	8000380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40022000 	.word	0x40022000

08000738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <HAL_InitTick+0x54>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <HAL_InitTick+0x58>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000752:	fbb2 f3f3 	udiv	r3, r2, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f93b 	bl	80009d2 <HAL_SYSTICK_Config>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e00e      	b.n	8000784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b0f      	cmp	r3, #15
 800076a:	d80a      	bhi.n	8000782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076c:	2200      	movs	r2, #0
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f000 f903 	bl	800097e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000778:	4a06      	ldr	r2, [pc, #24]	@ (8000794 <HAL_InitTick+0x5c>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077e:	2300      	movs	r3, #0
 8000780:	e000      	b.n	8000784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000000 	.word	0x20000000
 8000790:	20000008 	.word	0x20000008
 8000794:	20000004 	.word	0x20000004

08000798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <HAL_IncTick+0x1c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <HAL_IncTick+0x20>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	4a03      	ldr	r2, [pc, #12]	@ (80007b8 <HAL_IncTick+0x20>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	20000008 	.word	0x20000008
 80007b8:	200000f0 	.word	0x200000f0

080007bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return uwTick;
 80007c0:	4b02      	ldr	r3, [pc, #8]	@ (80007cc <HAL_GetTick+0x10>)
 80007c2:	681b      	ldr	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	200000f0 	.word	0x200000f0

080007d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000802:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	60d3      	str	r3, [r2, #12]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <__NVIC_GetPriorityGrouping+0x18>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	f003 0307 	and.w	r3, r3, #7
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	db0b      	blt.n	800085e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 021f 	and.w	r2, r3, #31
 800084c:	4906      	ldr	r1, [pc, #24]	@ (8000868 <__NVIC_EnableIRQ+0x34>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	2001      	movs	r0, #1
 8000856:	fa00 f202 	lsl.w	r2, r0, r2
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	e000e100 	.word	0xe000e100

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db0a      	blt.n	8000896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	490c      	ldr	r1, [pc, #48]	@ (80008b8 <__NVIC_SetPriority+0x4c>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	0112      	lsls	r2, r2, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	440b      	add	r3, r1
 8000890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000894:	e00a      	b.n	80008ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4908      	ldr	r1, [pc, #32]	@ (80008bc <__NVIC_SetPriority+0x50>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	3b04      	subs	r3, #4
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	761a      	strb	r2, [r3, #24]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	@ 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f1c3 0307 	rsb	r3, r3, #7
 80008da:	2b04      	cmp	r3, #4
 80008dc:	bf28      	it	cs
 80008de:	2304      	movcs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3304      	adds	r3, #4
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d902      	bls.n	80008f0 <NVIC_EncodePriority+0x30>
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b03      	subs	r3, #3
 80008ee:	e000      	b.n	80008f2 <NVIC_EncodePriority+0x32>
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43d9      	mvns	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4313      	orrs	r3, r2
         );
}
 800091a:	4618      	mov	r0, r3
 800091c:	3724      	adds	r7, #36	@ 0x24
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000934:	d301      	bcc.n	800093a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000936:	2301      	movs	r3, #1
 8000938:	e00f      	b.n	800095a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <SysTick_Config+0x40>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000942:	210f      	movs	r1, #15
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f7ff ff90 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800094c:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <SysTick_Config+0x40>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000952:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <SysTick_Config+0x40>)
 8000954:	2207      	movs	r2, #7
 8000956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	e000e010 	.word	0xe000e010

08000968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff2d 	bl	80007d0 <__NVIC_SetPriorityGrouping>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000990:	f7ff ff42 	bl	8000818 <__NVIC_GetPriorityGrouping>
 8000994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	6978      	ldr	r0, [r7, #20]
 800099c:	f7ff ff90 	bl	80008c0 <NVIC_EncodePriority>
 80009a0:	4602      	mov	r2, r0
 80009a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff5f 	bl	800086c <__NVIC_SetPriority>
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff35 	bl	8000834 <__NVIC_EnableIRQ>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ffa2 	bl	8000924 <SysTick_Config>
 80009e0:	4603      	mov	r3, r0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b08b      	sub	sp, #44	@ 0x2c
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009fe:	e169      	b.n	8000cd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a00:	2201      	movs	r2, #1
 8000a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	f040 8158 	bne.w	8000cce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	4a9a      	ldr	r2, [pc, #616]	@ (8000c8c <HAL_GPIO_Init+0x2a0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d05e      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a28:	4a98      	ldr	r2, [pc, #608]	@ (8000c8c <HAL_GPIO_Init+0x2a0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d875      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a2e:	4a98      	ldr	r2, [pc, #608]	@ (8000c90 <HAL_GPIO_Init+0x2a4>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d058      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a34:	4a96      	ldr	r2, [pc, #600]	@ (8000c90 <HAL_GPIO_Init+0x2a4>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d86f      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a3a:	4a96      	ldr	r2, [pc, #600]	@ (8000c94 <HAL_GPIO_Init+0x2a8>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d052      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a40:	4a94      	ldr	r2, [pc, #592]	@ (8000c94 <HAL_GPIO_Init+0x2a8>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d869      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a46:	4a94      	ldr	r2, [pc, #592]	@ (8000c98 <HAL_GPIO_Init+0x2ac>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d04c      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a4c:	4a92      	ldr	r2, [pc, #584]	@ (8000c98 <HAL_GPIO_Init+0x2ac>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d863      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a52:	4a92      	ldr	r2, [pc, #584]	@ (8000c9c <HAL_GPIO_Init+0x2b0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d046      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a58:	4a90      	ldr	r2, [pc, #576]	@ (8000c9c <HAL_GPIO_Init+0x2b0>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d85d      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a5e:	2b12      	cmp	r3, #18
 8000a60:	d82a      	bhi.n	8000ab8 <HAL_GPIO_Init+0xcc>
 8000a62:	2b12      	cmp	r3, #18
 8000a64:	d859      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a66:	a201      	add	r2, pc, #4	@ (adr r2, 8000a6c <HAL_GPIO_Init+0x80>)
 8000a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6c:	08000ae7 	.word	0x08000ae7
 8000a70:	08000ac1 	.word	0x08000ac1
 8000a74:	08000ad3 	.word	0x08000ad3
 8000a78:	08000b15 	.word	0x08000b15
 8000a7c:	08000b1b 	.word	0x08000b1b
 8000a80:	08000b1b 	.word	0x08000b1b
 8000a84:	08000b1b 	.word	0x08000b1b
 8000a88:	08000b1b 	.word	0x08000b1b
 8000a8c:	08000b1b 	.word	0x08000b1b
 8000a90:	08000b1b 	.word	0x08000b1b
 8000a94:	08000b1b 	.word	0x08000b1b
 8000a98:	08000b1b 	.word	0x08000b1b
 8000a9c:	08000b1b 	.word	0x08000b1b
 8000aa0:	08000b1b 	.word	0x08000b1b
 8000aa4:	08000b1b 	.word	0x08000b1b
 8000aa8:	08000b1b 	.word	0x08000b1b
 8000aac:	08000b1b 	.word	0x08000b1b
 8000ab0:	08000ac9 	.word	0x08000ac9
 8000ab4:	08000add 	.word	0x08000add
 8000ab8:	4a79      	ldr	r2, [pc, #484]	@ (8000ca0 <HAL_GPIO_Init+0x2b4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d013      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000abe:	e02c      	b.n	8000b1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	623b      	str	r3, [r7, #32]
          break;
 8000ac6:	e029      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	3304      	adds	r3, #4
 8000ace:	623b      	str	r3, [r7, #32]
          break;
 8000ad0:	e024      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	3308      	adds	r3, #8
 8000ad8:	623b      	str	r3, [r7, #32]
          break;
 8000ada:	e01f      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	330c      	adds	r3, #12
 8000ae2:	623b      	str	r3, [r7, #32]
          break;
 8000ae4:	e01a      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aee:	2304      	movs	r3, #4
 8000af0:	623b      	str	r3, [r7, #32]
          break;
 8000af2:	e013      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d105      	bne.n	8000b08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000afc:	2308      	movs	r3, #8
 8000afe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	611a      	str	r2, [r3, #16]
          break;
 8000b06:	e009      	b.n	8000b1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69fa      	ldr	r2, [r7, #28]
 8000b10:	615a      	str	r2, [r3, #20]
          break;
 8000b12:	e003      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
          break;
 8000b18:	e000      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          break;
 8000b1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	2bff      	cmp	r3, #255	@ 0xff
 8000b20:	d801      	bhi.n	8000b26 <HAL_GPIO_Init+0x13a>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	e001      	b.n	8000b2a <HAL_GPIO_Init+0x13e>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	2bff      	cmp	r3, #255	@ 0xff
 8000b30:	d802      	bhi.n	8000b38 <HAL_GPIO_Init+0x14c>
 8000b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	e002      	b.n	8000b3e <HAL_GPIO_Init+0x152>
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3a:	3b08      	subs	r3, #8
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	210f      	movs	r1, #15
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	401a      	ands	r2, r3
 8000b50:	6a39      	ldr	r1, [r7, #32]
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	fa01 f303 	lsl.w	r3, r1, r3
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 80b1 	beq.w	8000cce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a4c      	ldr	r2, [pc, #304]	@ (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b4a      	ldr	r3, [pc, #296]	@ (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b84:	4a48      	ldr	r2, [pc, #288]	@ (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	3302      	adds	r3, #2
 8000b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a40      	ldr	r2, [pc, #256]	@ (8000cac <HAL_GPIO_Init+0x2c0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d013      	beq.n	8000bd8 <HAL_GPIO_Init+0x1ec>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a3f      	ldr	r2, [pc, #252]	@ (8000cb0 <HAL_GPIO_Init+0x2c4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d00d      	beq.n	8000bd4 <HAL_GPIO_Init+0x1e8>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a3e      	ldr	r2, [pc, #248]	@ (8000cb4 <HAL_GPIO_Init+0x2c8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d007      	beq.n	8000bd0 <HAL_GPIO_Init+0x1e4>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a3d      	ldr	r2, [pc, #244]	@ (8000cb8 <HAL_GPIO_Init+0x2cc>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d101      	bne.n	8000bcc <HAL_GPIO_Init+0x1e0>
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e006      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bcc:	2304      	movs	r3, #4
 8000bce:	e004      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e000      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bdc:	f002 0203 	and.w	r2, r2, #3
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	4093      	lsls	r3, r2
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bea:	492f      	ldr	r1, [pc, #188]	@ (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c04:	4b2d      	ldr	r3, [pc, #180]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	492c      	ldr	r1, [pc, #176]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	608b      	str	r3, [r1, #8]
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c12:	4b2a      	ldr	r3, [pc, #168]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	4928      	ldr	r1, [pc, #160]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c2c:	4b23      	ldr	r3, [pc, #140]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	4922      	ldr	r1, [pc, #136]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	60cb      	str	r3, [r1, #12]
 8000c38:	e006      	b.n	8000c48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c3a:	4b20      	ldr	r3, [pc, #128]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	491e      	ldr	r1, [pc, #120]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c54:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	4918      	ldr	r1, [pc, #96]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	604b      	str	r3, [r1, #4]
 8000c60:	e006      	b.n	8000c70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c62:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	4914      	ldr	r1, [pc, #80]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d021      	beq.n	8000cc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	490e      	ldr	r1, [pc, #56]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	600b      	str	r3, [r1, #0]
 8000c88:	e021      	b.n	8000cce <HAL_GPIO_Init+0x2e2>
 8000c8a:	bf00      	nop
 8000c8c:	10320000 	.word	0x10320000
 8000c90:	10310000 	.word	0x10310000
 8000c94:	10220000 	.word	0x10220000
 8000c98:	10210000 	.word	0x10210000
 8000c9c:	10120000 	.word	0x10120000
 8000ca0:	10110000 	.word	0x10110000
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	40010800 	.word	0x40010800
 8000cb0:	40010c00 	.word	0x40010c00
 8000cb4:	40011000 	.word	0x40011000
 8000cb8:	40011400 	.word	0x40011400
 8000cbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <HAL_GPIO_Init+0x304>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	4909      	ldr	r1, [pc, #36]	@ (8000cf0 <HAL_GPIO_Init+0x304>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cda:	fa22 f303 	lsr.w	r3, r2, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f47f ae8e 	bne.w	8000a00 <HAL_GPIO_Init+0x14>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	372c      	adds	r7, #44	@ 0x2c
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40010400 	.word	0x40010400

08000cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
 8000d00:	4613      	mov	r3, r2
 8000d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d04:	787b      	ldrb	r3, [r7, #1]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d10:	e003      	b.n	8000d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	041a      	lsls	r2, r3, #16
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	611a      	str	r2, [r3, #16]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d2e:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	4013      	ands	r3, r2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d006      	beq.n	8000d48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f806 	bl	8000d54 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40010400 	.word	0x40010400

08000d54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e272      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 8087 	beq.w	8000e96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d88:	4b92      	ldr	r3, [pc, #584]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 030c 	and.w	r3, r3, #12
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d00c      	beq.n	8000dae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d94:	4b8f      	ldr	r3, [pc, #572]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 030c 	and.w	r3, r3, #12
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d112      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x5e>
 8000da0:	4b8c      	ldr	r3, [pc, #560]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dac:	d10b      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dae:	4b89      	ldr	r3, [pc, #548]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d06c      	beq.n	8000e94 <HAL_RCC_OscConfig+0x12c>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d168      	bne.n	8000e94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e24c      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dce:	d106      	bne.n	8000dde <HAL_RCC_OscConfig+0x76>
 8000dd0:	4b80      	ldr	r3, [pc, #512]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a7f      	ldr	r2, [pc, #508]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	e02e      	b.n	8000e3c <HAL_RCC_OscConfig+0xd4>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10c      	bne.n	8000e00 <HAL_RCC_OscConfig+0x98>
 8000de6:	4b7b      	ldr	r3, [pc, #492]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a7a      	ldr	r2, [pc, #488]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b78      	ldr	r3, [pc, #480]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a77      	ldr	r2, [pc, #476]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e01d      	b.n	8000e3c <HAL_RCC_OscConfig+0xd4>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e08:	d10c      	bne.n	8000e24 <HAL_RCC_OscConfig+0xbc>
 8000e0a:	4b72      	ldr	r3, [pc, #456]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a71      	ldr	r2, [pc, #452]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	4b6f      	ldr	r3, [pc, #444]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a6e      	ldr	r2, [pc, #440]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e00b      	b.n	8000e3c <HAL_RCC_OscConfig+0xd4>
 8000e24:	4b6b      	ldr	r3, [pc, #428]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a6a      	ldr	r2, [pc, #424]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b68      	ldr	r3, [pc, #416]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a67      	ldr	r2, [pc, #412]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d013      	beq.n	8000e6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e44:	f7ff fcba 	bl	80007bc <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fcb6 	bl	80007bc <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b64      	cmp	r3, #100	@ 0x64
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e200      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5e:	4b5d      	ldr	r3, [pc, #372]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f0      	beq.n	8000e4c <HAL_RCC_OscConfig+0xe4>
 8000e6a:	e014      	b.n	8000e96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fca6 	bl	80007bc <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e74:	f7ff fca2 	bl	80007bc <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b64      	cmp	r3, #100	@ 0x64
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e1ec      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e86:	4b53      	ldr	r3, [pc, #332]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f0      	bne.n	8000e74 <HAL_RCC_OscConfig+0x10c>
 8000e92:	e000      	b.n	8000e96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d063      	beq.n	8000f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 030c 	and.w	r3, r3, #12
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00b      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eae:	4b49      	ldr	r3, [pc, #292]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d11c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x18c>
 8000eba:	4b46      	ldr	r3, [pc, #280]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d116      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec6:	4b43      	ldr	r3, [pc, #268]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d005      	beq.n	8000ede <HAL_RCC_OscConfig+0x176>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d001      	beq.n	8000ede <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e1c0      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ede:	4b3d      	ldr	r3, [pc, #244]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4939      	ldr	r1, [pc, #228]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef2:	e03a      	b.n	8000f6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d020      	beq.n	8000f3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000efc:	4b36      	ldr	r3, [pc, #216]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f02:	f7ff fc5b 	bl	80007bc <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fc57 	bl	80007bc <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e1a1      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0f0      	beq.n	8000f0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f28:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4927      	ldr	r1, [pc, #156]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	600b      	str	r3, [r1, #0]
 8000f3c:	e015      	b.n	8000f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f3e:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f44:	f7ff fc3a 	bl	80007bc <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fc36 	bl	80007bc <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e180      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f0      	bne.n	8000f4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d03a      	beq.n	8000fec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d019      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <HAL_RCC_OscConfig+0x274>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f84:	f7ff fc1a 	bl	80007bc <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f8c:	f7ff fc16 	bl	80007bc <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e160      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f0      	beq.n	8000f8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f000 fa9c 	bl	80014e8 <RCC_Delay>
 8000fb0:	e01c      	b.n	8000fec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <HAL_RCC_OscConfig+0x274>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb8:	f7ff fc00 	bl	80007bc <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fbe:	e00f      	b.n	8000fe0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fbfc 	bl	80007bc <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d908      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e146      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	42420000 	.word	0x42420000
 8000fdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe0:	4b92      	ldr	r3, [pc, #584]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1e9      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80a6 	beq.w	8001146 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ffe:	4b8b      	ldr	r3, [pc, #556]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10d      	bne.n	8001026 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b88      	ldr	r3, [pc, #544]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a87      	ldr	r2, [pc, #540]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b85      	ldr	r3, [pc, #532]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001022:	2301      	movs	r3, #1
 8001024:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001026:	4b82      	ldr	r3, [pc, #520]	@ (8001230 <HAL_RCC_OscConfig+0x4c8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800102e:	2b00      	cmp	r3, #0
 8001030:	d118      	bne.n	8001064 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001032:	4b7f      	ldr	r3, [pc, #508]	@ (8001230 <HAL_RCC_OscConfig+0x4c8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a7e      	ldr	r2, [pc, #504]	@ (8001230 <HAL_RCC_OscConfig+0x4c8>)
 8001038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800103e:	f7ff fbbd 	bl	80007bc <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001046:	f7ff fbb9 	bl	80007bc <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b64      	cmp	r3, #100	@ 0x64
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e103      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	4b75      	ldr	r3, [pc, #468]	@ (8001230 <HAL_RCC_OscConfig+0x4c8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d106      	bne.n	800107a <HAL_RCC_OscConfig+0x312>
 800106c:	4b6f      	ldr	r3, [pc, #444]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4a6e      	ldr	r2, [pc, #440]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6213      	str	r3, [r2, #32]
 8001078:	e02d      	b.n	80010d6 <HAL_RCC_OscConfig+0x36e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0x334>
 8001082:	4b6a      	ldr	r3, [pc, #424]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a69      	ldr	r2, [pc, #420]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	6213      	str	r3, [r2, #32]
 800108e:	4b67      	ldr	r3, [pc, #412]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	4a66      	ldr	r2, [pc, #408]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001094:	f023 0304 	bic.w	r3, r3, #4
 8001098:	6213      	str	r3, [r2, #32]
 800109a:	e01c      	b.n	80010d6 <HAL_RCC_OscConfig+0x36e>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d10c      	bne.n	80010be <HAL_RCC_OscConfig+0x356>
 80010a4:	4b61      	ldr	r3, [pc, #388]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4a60      	ldr	r2, [pc, #384]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6213      	str	r3, [r2, #32]
 80010b0:	4b5e      	ldr	r3, [pc, #376]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	4a5d      	ldr	r2, [pc, #372]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6213      	str	r3, [r2, #32]
 80010bc:	e00b      	b.n	80010d6 <HAL_RCC_OscConfig+0x36e>
 80010be:	4b5b      	ldr	r3, [pc, #364]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	4a5a      	ldr	r2, [pc, #360]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	f023 0301 	bic.w	r3, r3, #1
 80010c8:	6213      	str	r3, [r2, #32]
 80010ca:	4b58      	ldr	r3, [pc, #352]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	4a57      	ldr	r2, [pc, #348]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	f023 0304 	bic.w	r3, r3, #4
 80010d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d015      	beq.n	800110a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010de:	f7ff fb6d 	bl	80007bc <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e4:	e00a      	b.n	80010fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e6:	f7ff fb69 	bl	80007bc <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e0b1      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fc:	4b4b      	ldr	r3, [pc, #300]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0ee      	beq.n	80010e6 <HAL_RCC_OscConfig+0x37e>
 8001108:	e014      	b.n	8001134 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fb57 	bl	80007bc <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001110:	e00a      	b.n	8001128 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001112:	f7ff fb53 	bl	80007bc <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001120:	4293      	cmp	r3, r2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e09b      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001128:	4b40      	ldr	r3, [pc, #256]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1ee      	bne.n	8001112 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d105      	bne.n	8001146 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800113a:	4b3c      	ldr	r3, [pc, #240]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a3b      	ldr	r2, [pc, #236]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001140:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001144:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8087 	beq.w	800125e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001150:	4b36      	ldr	r3, [pc, #216]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 030c 	and.w	r3, r3, #12
 8001158:	2b08      	cmp	r3, #8
 800115a:	d061      	beq.n	8001220 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d146      	bne.n	80011f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001164:	4b33      	ldr	r3, [pc, #204]	@ (8001234 <HAL_RCC_OscConfig+0x4cc>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116a:	f7ff fb27 	bl	80007bc <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001172:	f7ff fb23 	bl	80007bc <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e06d      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001184:	4b29      	ldr	r3, [pc, #164]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f0      	bne.n	8001172 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001198:	d108      	bne.n	80011ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800119a:	4b24      	ldr	r3, [pc, #144]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	4921      	ldr	r1, [pc, #132]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ac:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a19      	ldr	r1, [r3, #32]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011bc:	430b      	orrs	r3, r1
 80011be:	491b      	ldr	r1, [pc, #108]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HAL_RCC_OscConfig+0x4cc>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ca:	f7ff faf7 	bl	80007bc <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d2:	f7ff faf3 	bl	80007bc <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e03d      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x46a>
 80011f0:	e035      	b.n	800125e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <HAL_RCC_OscConfig+0x4cc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fae0 	bl	80007bc <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001200:	f7ff fadc 	bl	80007bc <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e026      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_RCC_OscConfig+0x4c4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0x498>
 800121e:	e01e      	b.n	800125e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d107      	bne.n	8001238 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e019      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
 800122c:	40021000 	.word	0x40021000
 8001230:	40007000 	.word	0x40007000
 8001234:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_RCC_OscConfig+0x500>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	429a      	cmp	r2, r3
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001256:	429a      	cmp	r2, r3
 8001258:	d001      	beq.n	800125e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000

0800126c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e0d0      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001280:	4b6a      	ldr	r3, [pc, #424]	@ (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d910      	bls.n	80012b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	4b67      	ldr	r3, [pc, #412]	@ (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f023 0207 	bic.w	r2, r3, #7
 8001296:	4965      	ldr	r1, [pc, #404]	@ (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800129e:	4b63      	ldr	r3, [pc, #396]	@ (800142c <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0b8      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d020      	beq.n	80012fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c8:	4b59      	ldr	r3, [pc, #356]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a58      	ldr	r2, [pc, #352]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e0:	4b53      	ldr	r3, [pc, #332]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a52      	ldr	r2, [pc, #328]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80012ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ec:	4b50      	ldr	r3, [pc, #320]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	494d      	ldr	r1, [pc, #308]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d040      	beq.n	800138c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b47      	ldr	r3, [pc, #284]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d115      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e07f      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d107      	bne.n	800133a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132a:	4b41      	ldr	r3, [pc, #260]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e073      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133a:	4b3d      	ldr	r3, [pc, #244]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e06b      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134a:	4b39      	ldr	r3, [pc, #228]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f023 0203 	bic.w	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4936      	ldr	r1, [pc, #216]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800135c:	f7ff fa2e 	bl	80007bc <HAL_GetTick>
 8001360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	e00a      	b.n	800137a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001364:	f7ff fa2a 	bl	80007bc <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e053      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137a:	4b2d      	ldr	r3, [pc, #180]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 020c 	and.w	r2, r3, #12
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	429a      	cmp	r2, r3
 800138a:	d1eb      	bne.n	8001364 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800138c:	4b27      	ldr	r3, [pc, #156]	@ (800142c <HAL_RCC_ClockConfig+0x1c0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d210      	bcs.n	80013bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b24      	ldr	r3, [pc, #144]	@ (800142c <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 0207 	bic.w	r2, r3, #7
 80013a2:	4922      	ldr	r1, [pc, #136]	@ (800142c <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013aa:	4b20      	ldr	r3, [pc, #128]	@ (800142c <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e032      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c8:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	4916      	ldr	r1, [pc, #88]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	490e      	ldr	r1, [pc, #56]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013fa:	f000 f821 	bl	8001440 <HAL_RCC_GetSysClockFreq>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	490a      	ldr	r1, [pc, #40]	@ (8001434 <HAL_RCC_ClockConfig+0x1c8>)
 800140c:	5ccb      	ldrb	r3, [r1, r3]
 800140e:	fa22 f303 	lsr.w	r3, r2, r3
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <HAL_RCC_ClockConfig+0x1cc>)
 8001414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <HAL_RCC_ClockConfig+0x1d0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f98c 	bl	8000738 <HAL_InitTick>

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40022000 	.word	0x40022000
 8001430:	40021000 	.word	0x40021000
 8001434:	08002054 	.word	0x08002054
 8001438:	20000000 	.word	0x20000000
 800143c:	20000004 	.word	0x20000004

08001440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800145a:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d002      	beq.n	8001470 <HAL_RCC_GetSysClockFreq+0x30>
 800146a:	2b08      	cmp	r3, #8
 800146c:	d003      	beq.n	8001476 <HAL_RCC_GetSysClockFreq+0x36>
 800146e:	e027      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001472:	613b      	str	r3, [r7, #16]
      break;
 8001474:	e027      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	0c9b      	lsrs	r3, r3, #18
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	4a17      	ldr	r2, [pc, #92]	@ (80014dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d010      	beq.n	80014b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	0c5b      	lsrs	r3, r3, #17
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	4a11      	ldr	r2, [pc, #68]	@ (80014e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a0d      	ldr	r2, [pc, #52]	@ (80014d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80014a2:	fb03 f202 	mul.w	r2, r3, r2
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e004      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a0c      	ldr	r2, [pc, #48]	@ (80014e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	613b      	str	r3, [r7, #16]
      break;
 80014be:	e002      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80014c2:	613b      	str	r3, [r7, #16]
      break;
 80014c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c6:	693b      	ldr	r3, [r7, #16]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	007a1200 	.word	0x007a1200
 80014dc:	08002064 	.word	0x08002064
 80014e0:	08002074 	.word	0x08002074
 80014e4:	003d0900 	.word	0x003d0900

080014e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014f0:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <RCC_Delay+0x34>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <RCC_Delay+0x38>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0a5b      	lsrs	r3, r3, #9
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	fb02 f303 	mul.w	r3, r2, r3
 8001502:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001504:	bf00      	nop
  }
  while (Delay --);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1e5a      	subs	r2, r3, #1
 800150a:	60fa      	str	r2, [r7, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f9      	bne.n	8001504 <RCC_Delay+0x1c>
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000000 	.word	0x20000000
 8001520:	10624dd3 	.word	0x10624dd3

08001524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e076      	b.n	8001624 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153a:	2b00      	cmp	r3, #0
 800153c:	d108      	bne.n	8001550 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001546:	d009      	beq.n	800155c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
 800154e:	e005      	b.n	800155c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d106      	bne.n	800157c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7fe ff34 	bl	80003e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2202      	movs	r2, #2
 8001580:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001592:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e0:	ea42 0103 	orr.w	r1, r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	0c1a      	lsrs	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f002 0204 	and.w	r2, r2, #4
 8001602:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	69da      	ldr	r2, [r3, #28]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001612:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <std>:
 800162c:	2300      	movs	r3, #0
 800162e:	b510      	push	{r4, lr}
 8001630:	4604      	mov	r4, r0
 8001632:	e9c0 3300 	strd	r3, r3, [r0]
 8001636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800163a:	6083      	str	r3, [r0, #8]
 800163c:	8181      	strh	r1, [r0, #12]
 800163e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001640:	81c2      	strh	r2, [r0, #14]
 8001642:	6183      	str	r3, [r0, #24]
 8001644:	4619      	mov	r1, r3
 8001646:	2208      	movs	r2, #8
 8001648:	305c      	adds	r0, #92	@ 0x5c
 800164a:	f000 f9e7 	bl	8001a1c <memset>
 800164e:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <std+0x58>)
 8001650:	6224      	str	r4, [r4, #32]
 8001652:	6263      	str	r3, [r4, #36]	@ 0x24
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <std+0x5c>)
 8001656:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <std+0x60>)
 800165a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <std+0x64>)
 800165e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <std+0x68>)
 8001662:	429c      	cmp	r4, r3
 8001664:	d006      	beq.n	8001674 <std+0x48>
 8001666:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800166a:	4294      	cmp	r4, r2
 800166c:	d002      	beq.n	8001674 <std+0x48>
 800166e:	33d0      	adds	r3, #208	@ 0xd0
 8001670:	429c      	cmp	r4, r3
 8001672:	d105      	bne.n	8001680 <std+0x54>
 8001674:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800167c:	f000 ba46 	b.w	8001b0c <__retarget_lock_init_recursive>
 8001680:	bd10      	pop	{r4, pc}
 8001682:	bf00      	nop
 8001684:	0800186d 	.word	0x0800186d
 8001688:	0800188f 	.word	0x0800188f
 800168c:	080018c7 	.word	0x080018c7
 8001690:	080018eb 	.word	0x080018eb
 8001694:	200000f4 	.word	0x200000f4

08001698 <stdio_exit_handler>:
 8001698:	4a02      	ldr	r2, [pc, #8]	@ (80016a4 <stdio_exit_handler+0xc>)
 800169a:	4903      	ldr	r1, [pc, #12]	@ (80016a8 <stdio_exit_handler+0x10>)
 800169c:	4803      	ldr	r0, [pc, #12]	@ (80016ac <stdio_exit_handler+0x14>)
 800169e:	f000 b869 	b.w	8001774 <_fwalk_sglue>
 80016a2:	bf00      	nop
 80016a4:	2000000c 	.word	0x2000000c
 80016a8:	08001e01 	.word	0x08001e01
 80016ac:	2000001c 	.word	0x2000001c

080016b0 <cleanup_stdio>:
 80016b0:	6841      	ldr	r1, [r0, #4]
 80016b2:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <cleanup_stdio+0x34>)
 80016b4:	b510      	push	{r4, lr}
 80016b6:	4299      	cmp	r1, r3
 80016b8:	4604      	mov	r4, r0
 80016ba:	d001      	beq.n	80016c0 <cleanup_stdio+0x10>
 80016bc:	f000 fba0 	bl	8001e00 <_fflush_r>
 80016c0:	68a1      	ldr	r1, [r4, #8]
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <cleanup_stdio+0x38>)
 80016c4:	4299      	cmp	r1, r3
 80016c6:	d002      	beq.n	80016ce <cleanup_stdio+0x1e>
 80016c8:	4620      	mov	r0, r4
 80016ca:	f000 fb99 	bl	8001e00 <_fflush_r>
 80016ce:	68e1      	ldr	r1, [r4, #12]
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <cleanup_stdio+0x3c>)
 80016d2:	4299      	cmp	r1, r3
 80016d4:	d004      	beq.n	80016e0 <cleanup_stdio+0x30>
 80016d6:	4620      	mov	r0, r4
 80016d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016dc:	f000 bb90 	b.w	8001e00 <_fflush_r>
 80016e0:	bd10      	pop	{r4, pc}
 80016e2:	bf00      	nop
 80016e4:	200000f4 	.word	0x200000f4
 80016e8:	2000015c 	.word	0x2000015c
 80016ec:	200001c4 	.word	0x200001c4

080016f0 <global_stdio_init.part.0>:
 80016f0:	b510      	push	{r4, lr}
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <global_stdio_init.part.0+0x30>)
 80016f4:	4c0b      	ldr	r4, [pc, #44]	@ (8001724 <global_stdio_init.part.0+0x34>)
 80016f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001728 <global_stdio_init.part.0+0x38>)
 80016f8:	4620      	mov	r0, r4
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	2104      	movs	r1, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	f7ff ff94 	bl	800162c <std>
 8001704:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001708:	2201      	movs	r2, #1
 800170a:	2109      	movs	r1, #9
 800170c:	f7ff ff8e 	bl	800162c <std>
 8001710:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001714:	2202      	movs	r2, #2
 8001716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800171a:	2112      	movs	r1, #18
 800171c:	f7ff bf86 	b.w	800162c <std>
 8001720:	2000022c 	.word	0x2000022c
 8001724:	200000f4 	.word	0x200000f4
 8001728:	08001699 	.word	0x08001699

0800172c <__sfp_lock_acquire>:
 800172c:	4801      	ldr	r0, [pc, #4]	@ (8001734 <__sfp_lock_acquire+0x8>)
 800172e:	f000 b9ee 	b.w	8001b0e <__retarget_lock_acquire_recursive>
 8001732:	bf00      	nop
 8001734:	20000235 	.word	0x20000235

08001738 <__sfp_lock_release>:
 8001738:	4801      	ldr	r0, [pc, #4]	@ (8001740 <__sfp_lock_release+0x8>)
 800173a:	f000 b9e9 	b.w	8001b10 <__retarget_lock_release_recursive>
 800173e:	bf00      	nop
 8001740:	20000235 	.word	0x20000235

08001744 <__sinit>:
 8001744:	b510      	push	{r4, lr}
 8001746:	4604      	mov	r4, r0
 8001748:	f7ff fff0 	bl	800172c <__sfp_lock_acquire>
 800174c:	6a23      	ldr	r3, [r4, #32]
 800174e:	b11b      	cbz	r3, 8001758 <__sinit+0x14>
 8001750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001754:	f7ff bff0 	b.w	8001738 <__sfp_lock_release>
 8001758:	4b04      	ldr	r3, [pc, #16]	@ (800176c <__sinit+0x28>)
 800175a:	6223      	str	r3, [r4, #32]
 800175c:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <__sinit+0x2c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f5      	bne.n	8001750 <__sinit+0xc>
 8001764:	f7ff ffc4 	bl	80016f0 <global_stdio_init.part.0>
 8001768:	e7f2      	b.n	8001750 <__sinit+0xc>
 800176a:	bf00      	nop
 800176c:	080016b1 	.word	0x080016b1
 8001770:	2000022c 	.word	0x2000022c

08001774 <_fwalk_sglue>:
 8001774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001778:	4607      	mov	r7, r0
 800177a:	4688      	mov	r8, r1
 800177c:	4614      	mov	r4, r2
 800177e:	2600      	movs	r6, #0
 8001780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001784:	f1b9 0901 	subs.w	r9, r9, #1
 8001788:	d505      	bpl.n	8001796 <_fwalk_sglue+0x22>
 800178a:	6824      	ldr	r4, [r4, #0]
 800178c:	2c00      	cmp	r4, #0
 800178e:	d1f7      	bne.n	8001780 <_fwalk_sglue+0xc>
 8001790:	4630      	mov	r0, r6
 8001792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001796:	89ab      	ldrh	r3, [r5, #12]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d907      	bls.n	80017ac <_fwalk_sglue+0x38>
 800179c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017a0:	3301      	adds	r3, #1
 80017a2:	d003      	beq.n	80017ac <_fwalk_sglue+0x38>
 80017a4:	4629      	mov	r1, r5
 80017a6:	4638      	mov	r0, r7
 80017a8:	47c0      	blx	r8
 80017aa:	4306      	orrs	r6, r0
 80017ac:	3568      	adds	r5, #104	@ 0x68
 80017ae:	e7e9      	b.n	8001784 <_fwalk_sglue+0x10>

080017b0 <_puts_r>:
 80017b0:	6a03      	ldr	r3, [r0, #32]
 80017b2:	b570      	push	{r4, r5, r6, lr}
 80017b4:	4605      	mov	r5, r0
 80017b6:	460e      	mov	r6, r1
 80017b8:	6884      	ldr	r4, [r0, #8]
 80017ba:	b90b      	cbnz	r3, 80017c0 <_puts_r+0x10>
 80017bc:	f7ff ffc2 	bl	8001744 <__sinit>
 80017c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017c2:	07db      	lsls	r3, r3, #31
 80017c4:	d405      	bmi.n	80017d2 <_puts_r+0x22>
 80017c6:	89a3      	ldrh	r3, [r4, #12]
 80017c8:	0598      	lsls	r0, r3, #22
 80017ca:	d402      	bmi.n	80017d2 <_puts_r+0x22>
 80017cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017ce:	f000 f99e 	bl	8001b0e <__retarget_lock_acquire_recursive>
 80017d2:	89a3      	ldrh	r3, [r4, #12]
 80017d4:	0719      	lsls	r1, r3, #28
 80017d6:	d502      	bpl.n	80017de <_puts_r+0x2e>
 80017d8:	6923      	ldr	r3, [r4, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d135      	bne.n	800184a <_puts_r+0x9a>
 80017de:	4621      	mov	r1, r4
 80017e0:	4628      	mov	r0, r5
 80017e2:	f000 f8c5 	bl	8001970 <__swsetup_r>
 80017e6:	b380      	cbz	r0, 800184a <_puts_r+0x9a>
 80017e8:	f04f 35ff 	mov.w	r5, #4294967295
 80017ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017ee:	07da      	lsls	r2, r3, #31
 80017f0:	d405      	bmi.n	80017fe <_puts_r+0x4e>
 80017f2:	89a3      	ldrh	r3, [r4, #12]
 80017f4:	059b      	lsls	r3, r3, #22
 80017f6:	d402      	bmi.n	80017fe <_puts_r+0x4e>
 80017f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017fa:	f000 f989 	bl	8001b10 <__retarget_lock_release_recursive>
 80017fe:	4628      	mov	r0, r5
 8001800:	bd70      	pop	{r4, r5, r6, pc}
 8001802:	2b00      	cmp	r3, #0
 8001804:	da04      	bge.n	8001810 <_puts_r+0x60>
 8001806:	69a2      	ldr	r2, [r4, #24]
 8001808:	429a      	cmp	r2, r3
 800180a:	dc17      	bgt.n	800183c <_puts_r+0x8c>
 800180c:	290a      	cmp	r1, #10
 800180e:	d015      	beq.n	800183c <_puts_r+0x8c>
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	6022      	str	r2, [r4, #0]
 8001816:	7019      	strb	r1, [r3, #0]
 8001818:	68a3      	ldr	r3, [r4, #8]
 800181a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800181e:	3b01      	subs	r3, #1
 8001820:	60a3      	str	r3, [r4, #8]
 8001822:	2900      	cmp	r1, #0
 8001824:	d1ed      	bne.n	8001802 <_puts_r+0x52>
 8001826:	2b00      	cmp	r3, #0
 8001828:	da11      	bge.n	800184e <_puts_r+0x9e>
 800182a:	4622      	mov	r2, r4
 800182c:	210a      	movs	r1, #10
 800182e:	4628      	mov	r0, r5
 8001830:	f000 f85f 	bl	80018f2 <__swbuf_r>
 8001834:	3001      	adds	r0, #1
 8001836:	d0d7      	beq.n	80017e8 <_puts_r+0x38>
 8001838:	250a      	movs	r5, #10
 800183a:	e7d7      	b.n	80017ec <_puts_r+0x3c>
 800183c:	4622      	mov	r2, r4
 800183e:	4628      	mov	r0, r5
 8001840:	f000 f857 	bl	80018f2 <__swbuf_r>
 8001844:	3001      	adds	r0, #1
 8001846:	d1e7      	bne.n	8001818 <_puts_r+0x68>
 8001848:	e7ce      	b.n	80017e8 <_puts_r+0x38>
 800184a:	3e01      	subs	r6, #1
 800184c:	e7e4      	b.n	8001818 <_puts_r+0x68>
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	6022      	str	r2, [r4, #0]
 8001854:	220a      	movs	r2, #10
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	e7ee      	b.n	8001838 <_puts_r+0x88>
	...

0800185c <puts>:
 800185c:	4b02      	ldr	r3, [pc, #8]	@ (8001868 <puts+0xc>)
 800185e:	4601      	mov	r1, r0
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	f7ff bfa5 	b.w	80017b0 <_puts_r>
 8001866:	bf00      	nop
 8001868:	20000018 	.word	0x20000018

0800186c <__sread>:
 800186c:	b510      	push	{r4, lr}
 800186e:	460c      	mov	r4, r1
 8001870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001874:	f000 f8fc 	bl	8001a70 <_read_r>
 8001878:	2800      	cmp	r0, #0
 800187a:	bfab      	itete	ge
 800187c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800187e:	89a3      	ldrhlt	r3, [r4, #12]
 8001880:	181b      	addge	r3, r3, r0
 8001882:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001886:	bfac      	ite	ge
 8001888:	6563      	strge	r3, [r4, #84]	@ 0x54
 800188a:	81a3      	strhlt	r3, [r4, #12]
 800188c:	bd10      	pop	{r4, pc}

0800188e <__swrite>:
 800188e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001892:	461f      	mov	r7, r3
 8001894:	898b      	ldrh	r3, [r1, #12]
 8001896:	4605      	mov	r5, r0
 8001898:	05db      	lsls	r3, r3, #23
 800189a:	460c      	mov	r4, r1
 800189c:	4616      	mov	r6, r2
 800189e:	d505      	bpl.n	80018ac <__swrite+0x1e>
 80018a0:	2302      	movs	r3, #2
 80018a2:	2200      	movs	r2, #0
 80018a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018a8:	f000 f8d0 	bl	8001a4c <_lseek_r>
 80018ac:	89a3      	ldrh	r3, [r4, #12]
 80018ae:	4632      	mov	r2, r6
 80018b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018b4:	81a3      	strh	r3, [r4, #12]
 80018b6:	4628      	mov	r0, r5
 80018b8:	463b      	mov	r3, r7
 80018ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018c2:	f000 b8e7 	b.w	8001a94 <_write_r>

080018c6 <__sseek>:
 80018c6:	b510      	push	{r4, lr}
 80018c8:	460c      	mov	r4, r1
 80018ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ce:	f000 f8bd 	bl	8001a4c <_lseek_r>
 80018d2:	1c43      	adds	r3, r0, #1
 80018d4:	89a3      	ldrh	r3, [r4, #12]
 80018d6:	bf15      	itete	ne
 80018d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80018da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80018de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80018e2:	81a3      	strheq	r3, [r4, #12]
 80018e4:	bf18      	it	ne
 80018e6:	81a3      	strhne	r3, [r4, #12]
 80018e8:	bd10      	pop	{r4, pc}

080018ea <__sclose>:
 80018ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ee:	f000 b89d 	b.w	8001a2c <_close_r>

080018f2 <__swbuf_r>:
 80018f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f4:	460e      	mov	r6, r1
 80018f6:	4614      	mov	r4, r2
 80018f8:	4605      	mov	r5, r0
 80018fa:	b118      	cbz	r0, 8001904 <__swbuf_r+0x12>
 80018fc:	6a03      	ldr	r3, [r0, #32]
 80018fe:	b90b      	cbnz	r3, 8001904 <__swbuf_r+0x12>
 8001900:	f7ff ff20 	bl	8001744 <__sinit>
 8001904:	69a3      	ldr	r3, [r4, #24]
 8001906:	60a3      	str	r3, [r4, #8]
 8001908:	89a3      	ldrh	r3, [r4, #12]
 800190a:	071a      	lsls	r2, r3, #28
 800190c:	d501      	bpl.n	8001912 <__swbuf_r+0x20>
 800190e:	6923      	ldr	r3, [r4, #16]
 8001910:	b943      	cbnz	r3, 8001924 <__swbuf_r+0x32>
 8001912:	4621      	mov	r1, r4
 8001914:	4628      	mov	r0, r5
 8001916:	f000 f82b 	bl	8001970 <__swsetup_r>
 800191a:	b118      	cbz	r0, 8001924 <__swbuf_r+0x32>
 800191c:	f04f 37ff 	mov.w	r7, #4294967295
 8001920:	4638      	mov	r0, r7
 8001922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	6922      	ldr	r2, [r4, #16]
 8001928:	b2f6      	uxtb	r6, r6
 800192a:	1a98      	subs	r0, r3, r2
 800192c:	6963      	ldr	r3, [r4, #20]
 800192e:	4637      	mov	r7, r6
 8001930:	4283      	cmp	r3, r0
 8001932:	dc05      	bgt.n	8001940 <__swbuf_r+0x4e>
 8001934:	4621      	mov	r1, r4
 8001936:	4628      	mov	r0, r5
 8001938:	f000 fa62 	bl	8001e00 <_fflush_r>
 800193c:	2800      	cmp	r0, #0
 800193e:	d1ed      	bne.n	800191c <__swbuf_r+0x2a>
 8001940:	68a3      	ldr	r3, [r4, #8]
 8001942:	3b01      	subs	r3, #1
 8001944:	60a3      	str	r3, [r4, #8]
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	6022      	str	r2, [r4, #0]
 800194c:	701e      	strb	r6, [r3, #0]
 800194e:	6962      	ldr	r2, [r4, #20]
 8001950:	1c43      	adds	r3, r0, #1
 8001952:	429a      	cmp	r2, r3
 8001954:	d004      	beq.n	8001960 <__swbuf_r+0x6e>
 8001956:	89a3      	ldrh	r3, [r4, #12]
 8001958:	07db      	lsls	r3, r3, #31
 800195a:	d5e1      	bpl.n	8001920 <__swbuf_r+0x2e>
 800195c:	2e0a      	cmp	r6, #10
 800195e:	d1df      	bne.n	8001920 <__swbuf_r+0x2e>
 8001960:	4621      	mov	r1, r4
 8001962:	4628      	mov	r0, r5
 8001964:	f000 fa4c 	bl	8001e00 <_fflush_r>
 8001968:	2800      	cmp	r0, #0
 800196a:	d0d9      	beq.n	8001920 <__swbuf_r+0x2e>
 800196c:	e7d6      	b.n	800191c <__swbuf_r+0x2a>
	...

08001970 <__swsetup_r>:
 8001970:	b538      	push	{r3, r4, r5, lr}
 8001972:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <__swsetup_r+0xa8>)
 8001974:	4605      	mov	r5, r0
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	460c      	mov	r4, r1
 800197a:	b118      	cbz	r0, 8001984 <__swsetup_r+0x14>
 800197c:	6a03      	ldr	r3, [r0, #32]
 800197e:	b90b      	cbnz	r3, 8001984 <__swsetup_r+0x14>
 8001980:	f7ff fee0 	bl	8001744 <__sinit>
 8001984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001988:	0719      	lsls	r1, r3, #28
 800198a:	d422      	bmi.n	80019d2 <__swsetup_r+0x62>
 800198c:	06da      	lsls	r2, r3, #27
 800198e:	d407      	bmi.n	80019a0 <__swsetup_r+0x30>
 8001990:	2209      	movs	r2, #9
 8001992:	602a      	str	r2, [r5, #0]
 8001994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	81a3      	strh	r3, [r4, #12]
 800199e:	e033      	b.n	8001a08 <__swsetup_r+0x98>
 80019a0:	0758      	lsls	r0, r3, #29
 80019a2:	d512      	bpl.n	80019ca <__swsetup_r+0x5a>
 80019a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80019a6:	b141      	cbz	r1, 80019ba <__swsetup_r+0x4a>
 80019a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80019ac:	4299      	cmp	r1, r3
 80019ae:	d002      	beq.n	80019b6 <__swsetup_r+0x46>
 80019b0:	4628      	mov	r0, r5
 80019b2:	f000 f8af 	bl	8001b14 <_free_r>
 80019b6:	2300      	movs	r3, #0
 80019b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80019ba:	89a3      	ldrh	r3, [r4, #12]
 80019bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80019c0:	81a3      	strh	r3, [r4, #12]
 80019c2:	2300      	movs	r3, #0
 80019c4:	6063      	str	r3, [r4, #4]
 80019c6:	6923      	ldr	r3, [r4, #16]
 80019c8:	6023      	str	r3, [r4, #0]
 80019ca:	89a3      	ldrh	r3, [r4, #12]
 80019cc:	f043 0308 	orr.w	r3, r3, #8
 80019d0:	81a3      	strh	r3, [r4, #12]
 80019d2:	6923      	ldr	r3, [r4, #16]
 80019d4:	b94b      	cbnz	r3, 80019ea <__swsetup_r+0x7a>
 80019d6:	89a3      	ldrh	r3, [r4, #12]
 80019d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80019dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019e0:	d003      	beq.n	80019ea <__swsetup_r+0x7a>
 80019e2:	4621      	mov	r1, r4
 80019e4:	4628      	mov	r0, r5
 80019e6:	f000 fa58 	bl	8001e9a <__smakebuf_r>
 80019ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019ee:	f013 0201 	ands.w	r2, r3, #1
 80019f2:	d00a      	beq.n	8001a0a <__swsetup_r+0x9a>
 80019f4:	2200      	movs	r2, #0
 80019f6:	60a2      	str	r2, [r4, #8]
 80019f8:	6962      	ldr	r2, [r4, #20]
 80019fa:	4252      	negs	r2, r2
 80019fc:	61a2      	str	r2, [r4, #24]
 80019fe:	6922      	ldr	r2, [r4, #16]
 8001a00:	b942      	cbnz	r2, 8001a14 <__swsetup_r+0xa4>
 8001a02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001a06:	d1c5      	bne.n	8001994 <__swsetup_r+0x24>
 8001a08:	bd38      	pop	{r3, r4, r5, pc}
 8001a0a:	0799      	lsls	r1, r3, #30
 8001a0c:	bf58      	it	pl
 8001a0e:	6962      	ldrpl	r2, [r4, #20]
 8001a10:	60a2      	str	r2, [r4, #8]
 8001a12:	e7f4      	b.n	80019fe <__swsetup_r+0x8e>
 8001a14:	2000      	movs	r0, #0
 8001a16:	e7f7      	b.n	8001a08 <__swsetup_r+0x98>
 8001a18:	20000018 	.word	0x20000018

08001a1c <memset>:
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4402      	add	r2, r0
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d100      	bne.n	8001a26 <memset+0xa>
 8001a24:	4770      	bx	lr
 8001a26:	f803 1b01 	strb.w	r1, [r3], #1
 8001a2a:	e7f9      	b.n	8001a20 <memset+0x4>

08001a2c <_close_r>:
 8001a2c:	b538      	push	{r3, r4, r5, lr}
 8001a2e:	2300      	movs	r3, #0
 8001a30:	4d05      	ldr	r5, [pc, #20]	@ (8001a48 <_close_r+0x1c>)
 8001a32:	4604      	mov	r4, r0
 8001a34:	4608      	mov	r0, r1
 8001a36:	602b      	str	r3, [r5, #0]
 8001a38:	f7fe fdb1 	bl	800059e <_close>
 8001a3c:	1c43      	adds	r3, r0, #1
 8001a3e:	d102      	bne.n	8001a46 <_close_r+0x1a>
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	b103      	cbz	r3, 8001a46 <_close_r+0x1a>
 8001a44:	6023      	str	r3, [r4, #0]
 8001a46:	bd38      	pop	{r3, r4, r5, pc}
 8001a48:	20000230 	.word	0x20000230

08001a4c <_lseek_r>:
 8001a4c:	b538      	push	{r3, r4, r5, lr}
 8001a4e:	4604      	mov	r4, r0
 8001a50:	4608      	mov	r0, r1
 8001a52:	4611      	mov	r1, r2
 8001a54:	2200      	movs	r2, #0
 8001a56:	4d05      	ldr	r5, [pc, #20]	@ (8001a6c <_lseek_r+0x20>)
 8001a58:	602a      	str	r2, [r5, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f7fe fdc3 	bl	80005e6 <_lseek>
 8001a60:	1c43      	adds	r3, r0, #1
 8001a62:	d102      	bne.n	8001a6a <_lseek_r+0x1e>
 8001a64:	682b      	ldr	r3, [r5, #0]
 8001a66:	b103      	cbz	r3, 8001a6a <_lseek_r+0x1e>
 8001a68:	6023      	str	r3, [r4, #0]
 8001a6a:	bd38      	pop	{r3, r4, r5, pc}
 8001a6c:	20000230 	.word	0x20000230

08001a70 <_read_r>:
 8001a70:	b538      	push	{r3, r4, r5, lr}
 8001a72:	4604      	mov	r4, r0
 8001a74:	4608      	mov	r0, r1
 8001a76:	4611      	mov	r1, r2
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4d05      	ldr	r5, [pc, #20]	@ (8001a90 <_read_r+0x20>)
 8001a7c:	602a      	str	r2, [r5, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f7fe fd54 	bl	800052c <_read>
 8001a84:	1c43      	adds	r3, r0, #1
 8001a86:	d102      	bne.n	8001a8e <_read_r+0x1e>
 8001a88:	682b      	ldr	r3, [r5, #0]
 8001a8a:	b103      	cbz	r3, 8001a8e <_read_r+0x1e>
 8001a8c:	6023      	str	r3, [r4, #0]
 8001a8e:	bd38      	pop	{r3, r4, r5, pc}
 8001a90:	20000230 	.word	0x20000230

08001a94 <_write_r>:
 8001a94:	b538      	push	{r3, r4, r5, lr}
 8001a96:	4604      	mov	r4, r0
 8001a98:	4608      	mov	r0, r1
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	4d05      	ldr	r5, [pc, #20]	@ (8001ab4 <_write_r+0x20>)
 8001aa0:	602a      	str	r2, [r5, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f7fe fd5f 	bl	8000566 <_write>
 8001aa8:	1c43      	adds	r3, r0, #1
 8001aaa:	d102      	bne.n	8001ab2 <_write_r+0x1e>
 8001aac:	682b      	ldr	r3, [r5, #0]
 8001aae:	b103      	cbz	r3, 8001ab2 <_write_r+0x1e>
 8001ab0:	6023      	str	r3, [r4, #0]
 8001ab2:	bd38      	pop	{r3, r4, r5, pc}
 8001ab4:	20000230 	.word	0x20000230

08001ab8 <__errno>:
 8001ab8:	4b01      	ldr	r3, [pc, #4]	@ (8001ac0 <__errno+0x8>)
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000018 	.word	0x20000018

08001ac4 <__libc_init_array>:
 8001ac4:	b570      	push	{r4, r5, r6, lr}
 8001ac6:	2600      	movs	r6, #0
 8001ac8:	4d0c      	ldr	r5, [pc, #48]	@ (8001afc <__libc_init_array+0x38>)
 8001aca:	4c0d      	ldr	r4, [pc, #52]	@ (8001b00 <__libc_init_array+0x3c>)
 8001acc:	1b64      	subs	r4, r4, r5
 8001ace:	10a4      	asrs	r4, r4, #2
 8001ad0:	42a6      	cmp	r6, r4
 8001ad2:	d109      	bne.n	8001ae8 <__libc_init_array+0x24>
 8001ad4:	f000 fa50 	bl	8001f78 <_init>
 8001ad8:	2600      	movs	r6, #0
 8001ada:	4d0a      	ldr	r5, [pc, #40]	@ (8001b04 <__libc_init_array+0x40>)
 8001adc:	4c0a      	ldr	r4, [pc, #40]	@ (8001b08 <__libc_init_array+0x44>)
 8001ade:	1b64      	subs	r4, r4, r5
 8001ae0:	10a4      	asrs	r4, r4, #2
 8001ae2:	42a6      	cmp	r6, r4
 8001ae4:	d105      	bne.n	8001af2 <__libc_init_array+0x2e>
 8001ae6:	bd70      	pop	{r4, r5, r6, pc}
 8001ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aec:	4798      	blx	r3
 8001aee:	3601      	adds	r6, #1
 8001af0:	e7ee      	b.n	8001ad0 <__libc_init_array+0xc>
 8001af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001af6:	4798      	blx	r3
 8001af8:	3601      	adds	r6, #1
 8001afa:	e7f2      	b.n	8001ae2 <__libc_init_array+0x1e>
 8001afc:	08002078 	.word	0x08002078
 8001b00:	08002078 	.word	0x08002078
 8001b04:	08002078 	.word	0x08002078
 8001b08:	0800207c 	.word	0x0800207c

08001b0c <__retarget_lock_init_recursive>:
 8001b0c:	4770      	bx	lr

08001b0e <__retarget_lock_acquire_recursive>:
 8001b0e:	4770      	bx	lr

08001b10 <__retarget_lock_release_recursive>:
 8001b10:	4770      	bx	lr
	...

08001b14 <_free_r>:
 8001b14:	b538      	push	{r3, r4, r5, lr}
 8001b16:	4605      	mov	r5, r0
 8001b18:	2900      	cmp	r1, #0
 8001b1a:	d040      	beq.n	8001b9e <_free_r+0x8a>
 8001b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b20:	1f0c      	subs	r4, r1, #4
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bfb8      	it	lt
 8001b26:	18e4      	addlt	r4, r4, r3
 8001b28:	f000 f8de 	bl	8001ce8 <__malloc_lock>
 8001b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba0 <_free_r+0x8c>)
 8001b2e:	6813      	ldr	r3, [r2, #0]
 8001b30:	b933      	cbnz	r3, 8001b40 <_free_r+0x2c>
 8001b32:	6063      	str	r3, [r4, #4]
 8001b34:	6014      	str	r4, [r2, #0]
 8001b36:	4628      	mov	r0, r5
 8001b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b3c:	f000 b8da 	b.w	8001cf4 <__malloc_unlock>
 8001b40:	42a3      	cmp	r3, r4
 8001b42:	d908      	bls.n	8001b56 <_free_r+0x42>
 8001b44:	6820      	ldr	r0, [r4, #0]
 8001b46:	1821      	adds	r1, r4, r0
 8001b48:	428b      	cmp	r3, r1
 8001b4a:	bf01      	itttt	eq
 8001b4c:	6819      	ldreq	r1, [r3, #0]
 8001b4e:	685b      	ldreq	r3, [r3, #4]
 8001b50:	1809      	addeq	r1, r1, r0
 8001b52:	6021      	streq	r1, [r4, #0]
 8001b54:	e7ed      	b.n	8001b32 <_free_r+0x1e>
 8001b56:	461a      	mov	r2, r3
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	b10b      	cbz	r3, 8001b60 <_free_r+0x4c>
 8001b5c:	42a3      	cmp	r3, r4
 8001b5e:	d9fa      	bls.n	8001b56 <_free_r+0x42>
 8001b60:	6811      	ldr	r1, [r2, #0]
 8001b62:	1850      	adds	r0, r2, r1
 8001b64:	42a0      	cmp	r0, r4
 8001b66:	d10b      	bne.n	8001b80 <_free_r+0x6c>
 8001b68:	6820      	ldr	r0, [r4, #0]
 8001b6a:	4401      	add	r1, r0
 8001b6c:	1850      	adds	r0, r2, r1
 8001b6e:	4283      	cmp	r3, r0
 8001b70:	6011      	str	r1, [r2, #0]
 8001b72:	d1e0      	bne.n	8001b36 <_free_r+0x22>
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4408      	add	r0, r1
 8001b7a:	6010      	str	r0, [r2, #0]
 8001b7c:	6053      	str	r3, [r2, #4]
 8001b7e:	e7da      	b.n	8001b36 <_free_r+0x22>
 8001b80:	d902      	bls.n	8001b88 <_free_r+0x74>
 8001b82:	230c      	movs	r3, #12
 8001b84:	602b      	str	r3, [r5, #0]
 8001b86:	e7d6      	b.n	8001b36 <_free_r+0x22>
 8001b88:	6820      	ldr	r0, [r4, #0]
 8001b8a:	1821      	adds	r1, r4, r0
 8001b8c:	428b      	cmp	r3, r1
 8001b8e:	bf01      	itttt	eq
 8001b90:	6819      	ldreq	r1, [r3, #0]
 8001b92:	685b      	ldreq	r3, [r3, #4]
 8001b94:	1809      	addeq	r1, r1, r0
 8001b96:	6021      	streq	r1, [r4, #0]
 8001b98:	6063      	str	r3, [r4, #4]
 8001b9a:	6054      	str	r4, [r2, #4]
 8001b9c:	e7cb      	b.n	8001b36 <_free_r+0x22>
 8001b9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ba0:	2000023c 	.word	0x2000023c

08001ba4 <sbrk_aligned>:
 8001ba4:	b570      	push	{r4, r5, r6, lr}
 8001ba6:	4e0f      	ldr	r6, [pc, #60]	@ (8001be4 <sbrk_aligned+0x40>)
 8001ba8:	460c      	mov	r4, r1
 8001baa:	6831      	ldr	r1, [r6, #0]
 8001bac:	4605      	mov	r5, r0
 8001bae:	b911      	cbnz	r1, 8001bb6 <sbrk_aligned+0x12>
 8001bb0:	f000 f9d2 	bl	8001f58 <_sbrk_r>
 8001bb4:	6030      	str	r0, [r6, #0]
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	4628      	mov	r0, r5
 8001bba:	f000 f9cd 	bl	8001f58 <_sbrk_r>
 8001bbe:	1c43      	adds	r3, r0, #1
 8001bc0:	d103      	bne.n	8001bca <sbrk_aligned+0x26>
 8001bc2:	f04f 34ff 	mov.w	r4, #4294967295
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	bd70      	pop	{r4, r5, r6, pc}
 8001bca:	1cc4      	adds	r4, r0, #3
 8001bcc:	f024 0403 	bic.w	r4, r4, #3
 8001bd0:	42a0      	cmp	r0, r4
 8001bd2:	d0f8      	beq.n	8001bc6 <sbrk_aligned+0x22>
 8001bd4:	1a21      	subs	r1, r4, r0
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	f000 f9be 	bl	8001f58 <_sbrk_r>
 8001bdc:	3001      	adds	r0, #1
 8001bde:	d1f2      	bne.n	8001bc6 <sbrk_aligned+0x22>
 8001be0:	e7ef      	b.n	8001bc2 <sbrk_aligned+0x1e>
 8001be2:	bf00      	nop
 8001be4:	20000238 	.word	0x20000238

08001be8 <_malloc_r>:
 8001be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bec:	1ccd      	adds	r5, r1, #3
 8001bee:	f025 0503 	bic.w	r5, r5, #3
 8001bf2:	3508      	adds	r5, #8
 8001bf4:	2d0c      	cmp	r5, #12
 8001bf6:	bf38      	it	cc
 8001bf8:	250c      	movcc	r5, #12
 8001bfa:	2d00      	cmp	r5, #0
 8001bfc:	4606      	mov	r6, r0
 8001bfe:	db01      	blt.n	8001c04 <_malloc_r+0x1c>
 8001c00:	42a9      	cmp	r1, r5
 8001c02:	d904      	bls.n	8001c0e <_malloc_r+0x26>
 8001c04:	230c      	movs	r3, #12
 8001c06:	6033      	str	r3, [r6, #0]
 8001c08:	2000      	movs	r0, #0
 8001c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001ce4 <_malloc_r+0xfc>
 8001c12:	f000 f869 	bl	8001ce8 <__malloc_lock>
 8001c16:	f8d8 3000 	ldr.w	r3, [r8]
 8001c1a:	461c      	mov	r4, r3
 8001c1c:	bb44      	cbnz	r4, 8001c70 <_malloc_r+0x88>
 8001c1e:	4629      	mov	r1, r5
 8001c20:	4630      	mov	r0, r6
 8001c22:	f7ff ffbf 	bl	8001ba4 <sbrk_aligned>
 8001c26:	1c43      	adds	r3, r0, #1
 8001c28:	4604      	mov	r4, r0
 8001c2a:	d158      	bne.n	8001cde <_malloc_r+0xf6>
 8001c2c:	f8d8 4000 	ldr.w	r4, [r8]
 8001c30:	4627      	mov	r7, r4
 8001c32:	2f00      	cmp	r7, #0
 8001c34:	d143      	bne.n	8001cbe <_malloc_r+0xd6>
 8001c36:	2c00      	cmp	r4, #0
 8001c38:	d04b      	beq.n	8001cd2 <_malloc_r+0xea>
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	4639      	mov	r1, r7
 8001c3e:	4630      	mov	r0, r6
 8001c40:	eb04 0903 	add.w	r9, r4, r3
 8001c44:	f000 f988 	bl	8001f58 <_sbrk_r>
 8001c48:	4581      	cmp	r9, r0
 8001c4a:	d142      	bne.n	8001cd2 <_malloc_r+0xea>
 8001c4c:	6821      	ldr	r1, [r4, #0]
 8001c4e:	4630      	mov	r0, r6
 8001c50:	1a6d      	subs	r5, r5, r1
 8001c52:	4629      	mov	r1, r5
 8001c54:	f7ff ffa6 	bl	8001ba4 <sbrk_aligned>
 8001c58:	3001      	adds	r0, #1
 8001c5a:	d03a      	beq.n	8001cd2 <_malloc_r+0xea>
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	442b      	add	r3, r5
 8001c60:	6023      	str	r3, [r4, #0]
 8001c62:	f8d8 3000 	ldr.w	r3, [r8]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	bb62      	cbnz	r2, 8001cc4 <_malloc_r+0xdc>
 8001c6a:	f8c8 7000 	str.w	r7, [r8]
 8001c6e:	e00f      	b.n	8001c90 <_malloc_r+0xa8>
 8001c70:	6822      	ldr	r2, [r4, #0]
 8001c72:	1b52      	subs	r2, r2, r5
 8001c74:	d420      	bmi.n	8001cb8 <_malloc_r+0xd0>
 8001c76:	2a0b      	cmp	r2, #11
 8001c78:	d917      	bls.n	8001caa <_malloc_r+0xc2>
 8001c7a:	1961      	adds	r1, r4, r5
 8001c7c:	42a3      	cmp	r3, r4
 8001c7e:	6025      	str	r5, [r4, #0]
 8001c80:	bf18      	it	ne
 8001c82:	6059      	strne	r1, [r3, #4]
 8001c84:	6863      	ldr	r3, [r4, #4]
 8001c86:	bf08      	it	eq
 8001c88:	f8c8 1000 	streq.w	r1, [r8]
 8001c8c:	5162      	str	r2, [r4, r5]
 8001c8e:	604b      	str	r3, [r1, #4]
 8001c90:	4630      	mov	r0, r6
 8001c92:	f000 f82f 	bl	8001cf4 <__malloc_unlock>
 8001c96:	f104 000b 	add.w	r0, r4, #11
 8001c9a:	1d23      	adds	r3, r4, #4
 8001c9c:	f020 0007 	bic.w	r0, r0, #7
 8001ca0:	1ac2      	subs	r2, r0, r3
 8001ca2:	bf1c      	itt	ne
 8001ca4:	1a1b      	subne	r3, r3, r0
 8001ca6:	50a3      	strne	r3, [r4, r2]
 8001ca8:	e7af      	b.n	8001c0a <_malloc_r+0x22>
 8001caa:	6862      	ldr	r2, [r4, #4]
 8001cac:	42a3      	cmp	r3, r4
 8001cae:	bf0c      	ite	eq
 8001cb0:	f8c8 2000 	streq.w	r2, [r8]
 8001cb4:	605a      	strne	r2, [r3, #4]
 8001cb6:	e7eb      	b.n	8001c90 <_malloc_r+0xa8>
 8001cb8:	4623      	mov	r3, r4
 8001cba:	6864      	ldr	r4, [r4, #4]
 8001cbc:	e7ae      	b.n	8001c1c <_malloc_r+0x34>
 8001cbe:	463c      	mov	r4, r7
 8001cc0:	687f      	ldr	r7, [r7, #4]
 8001cc2:	e7b6      	b.n	8001c32 <_malloc_r+0x4a>
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	42a3      	cmp	r3, r4
 8001cca:	d1fb      	bne.n	8001cc4 <_malloc_r+0xdc>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	6053      	str	r3, [r2, #4]
 8001cd0:	e7de      	b.n	8001c90 <_malloc_r+0xa8>
 8001cd2:	230c      	movs	r3, #12
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	6033      	str	r3, [r6, #0]
 8001cd8:	f000 f80c 	bl	8001cf4 <__malloc_unlock>
 8001cdc:	e794      	b.n	8001c08 <_malloc_r+0x20>
 8001cde:	6005      	str	r5, [r0, #0]
 8001ce0:	e7d6      	b.n	8001c90 <_malloc_r+0xa8>
 8001ce2:	bf00      	nop
 8001ce4:	2000023c 	.word	0x2000023c

08001ce8 <__malloc_lock>:
 8001ce8:	4801      	ldr	r0, [pc, #4]	@ (8001cf0 <__malloc_lock+0x8>)
 8001cea:	f7ff bf10 	b.w	8001b0e <__retarget_lock_acquire_recursive>
 8001cee:	bf00      	nop
 8001cf0:	20000234 	.word	0x20000234

08001cf4 <__malloc_unlock>:
 8001cf4:	4801      	ldr	r0, [pc, #4]	@ (8001cfc <__malloc_unlock+0x8>)
 8001cf6:	f7ff bf0b 	b.w	8001b10 <__retarget_lock_release_recursive>
 8001cfa:	bf00      	nop
 8001cfc:	20000234 	.word	0x20000234

08001d00 <__sflush_r>:
 8001d00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d06:	0716      	lsls	r6, r2, #28
 8001d08:	4605      	mov	r5, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	d454      	bmi.n	8001db8 <__sflush_r+0xb8>
 8001d0e:	684b      	ldr	r3, [r1, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	dc02      	bgt.n	8001d1a <__sflush_r+0x1a>
 8001d14:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	dd48      	ble.n	8001dac <__sflush_r+0xac>
 8001d1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001d1c:	2e00      	cmp	r6, #0
 8001d1e:	d045      	beq.n	8001dac <__sflush_r+0xac>
 8001d20:	2300      	movs	r3, #0
 8001d22:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001d26:	682f      	ldr	r7, [r5, #0]
 8001d28:	6a21      	ldr	r1, [r4, #32]
 8001d2a:	602b      	str	r3, [r5, #0]
 8001d2c:	d030      	beq.n	8001d90 <__sflush_r+0x90>
 8001d2e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d30:	89a3      	ldrh	r3, [r4, #12]
 8001d32:	0759      	lsls	r1, r3, #29
 8001d34:	d505      	bpl.n	8001d42 <__sflush_r+0x42>
 8001d36:	6863      	ldr	r3, [r4, #4]
 8001d38:	1ad2      	subs	r2, r2, r3
 8001d3a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001d3c:	b10b      	cbz	r3, 8001d42 <__sflush_r+0x42>
 8001d3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d40:	1ad2      	subs	r2, r2, r3
 8001d42:	2300      	movs	r3, #0
 8001d44:	4628      	mov	r0, r5
 8001d46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001d48:	6a21      	ldr	r1, [r4, #32]
 8001d4a:	47b0      	blx	r6
 8001d4c:	1c43      	adds	r3, r0, #1
 8001d4e:	89a3      	ldrh	r3, [r4, #12]
 8001d50:	d106      	bne.n	8001d60 <__sflush_r+0x60>
 8001d52:	6829      	ldr	r1, [r5, #0]
 8001d54:	291d      	cmp	r1, #29
 8001d56:	d82b      	bhi.n	8001db0 <__sflush_r+0xb0>
 8001d58:	4a28      	ldr	r2, [pc, #160]	@ (8001dfc <__sflush_r+0xfc>)
 8001d5a:	410a      	asrs	r2, r1
 8001d5c:	07d6      	lsls	r6, r2, #31
 8001d5e:	d427      	bmi.n	8001db0 <__sflush_r+0xb0>
 8001d60:	2200      	movs	r2, #0
 8001d62:	6062      	str	r2, [r4, #4]
 8001d64:	6922      	ldr	r2, [r4, #16]
 8001d66:	04d9      	lsls	r1, r3, #19
 8001d68:	6022      	str	r2, [r4, #0]
 8001d6a:	d504      	bpl.n	8001d76 <__sflush_r+0x76>
 8001d6c:	1c42      	adds	r2, r0, #1
 8001d6e:	d101      	bne.n	8001d74 <__sflush_r+0x74>
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	b903      	cbnz	r3, 8001d76 <__sflush_r+0x76>
 8001d74:	6560      	str	r0, [r4, #84]	@ 0x54
 8001d76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d78:	602f      	str	r7, [r5, #0]
 8001d7a:	b1b9      	cbz	r1, 8001dac <__sflush_r+0xac>
 8001d7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001d80:	4299      	cmp	r1, r3
 8001d82:	d002      	beq.n	8001d8a <__sflush_r+0x8a>
 8001d84:	4628      	mov	r0, r5
 8001d86:	f7ff fec5 	bl	8001b14 <_free_r>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d8e:	e00d      	b.n	8001dac <__sflush_r+0xac>
 8001d90:	2301      	movs	r3, #1
 8001d92:	4628      	mov	r0, r5
 8001d94:	47b0      	blx	r6
 8001d96:	4602      	mov	r2, r0
 8001d98:	1c50      	adds	r0, r2, #1
 8001d9a:	d1c9      	bne.n	8001d30 <__sflush_r+0x30>
 8001d9c:	682b      	ldr	r3, [r5, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0c6      	beq.n	8001d30 <__sflush_r+0x30>
 8001da2:	2b1d      	cmp	r3, #29
 8001da4:	d001      	beq.n	8001daa <__sflush_r+0xaa>
 8001da6:	2b16      	cmp	r3, #22
 8001da8:	d11d      	bne.n	8001de6 <__sflush_r+0xe6>
 8001daa:	602f      	str	r7, [r5, #0]
 8001dac:	2000      	movs	r0, #0
 8001dae:	e021      	b.n	8001df4 <__sflush_r+0xf4>
 8001db0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	e01a      	b.n	8001dee <__sflush_r+0xee>
 8001db8:	690f      	ldr	r7, [r1, #16]
 8001dba:	2f00      	cmp	r7, #0
 8001dbc:	d0f6      	beq.n	8001dac <__sflush_r+0xac>
 8001dbe:	0793      	lsls	r3, r2, #30
 8001dc0:	bf18      	it	ne
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	680e      	ldr	r6, [r1, #0]
 8001dc6:	bf08      	it	eq
 8001dc8:	694b      	ldreq	r3, [r1, #20]
 8001dca:	1bf6      	subs	r6, r6, r7
 8001dcc:	600f      	str	r7, [r1, #0]
 8001dce:	608b      	str	r3, [r1, #8]
 8001dd0:	2e00      	cmp	r6, #0
 8001dd2:	ddeb      	ble.n	8001dac <__sflush_r+0xac>
 8001dd4:	4633      	mov	r3, r6
 8001dd6:	463a      	mov	r2, r7
 8001dd8:	4628      	mov	r0, r5
 8001dda:	6a21      	ldr	r1, [r4, #32]
 8001ddc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001de0:	47e0      	blx	ip
 8001de2:	2800      	cmp	r0, #0
 8001de4:	dc07      	bgt.n	8001df6 <__sflush_r+0xf6>
 8001de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dee:	f04f 30ff 	mov.w	r0, #4294967295
 8001df2:	81a3      	strh	r3, [r4, #12]
 8001df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001df6:	4407      	add	r7, r0
 8001df8:	1a36      	subs	r6, r6, r0
 8001dfa:	e7e9      	b.n	8001dd0 <__sflush_r+0xd0>
 8001dfc:	dfbffffe 	.word	0xdfbffffe

08001e00 <_fflush_r>:
 8001e00:	b538      	push	{r3, r4, r5, lr}
 8001e02:	690b      	ldr	r3, [r1, #16]
 8001e04:	4605      	mov	r5, r0
 8001e06:	460c      	mov	r4, r1
 8001e08:	b913      	cbnz	r3, 8001e10 <_fflush_r+0x10>
 8001e0a:	2500      	movs	r5, #0
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	bd38      	pop	{r3, r4, r5, pc}
 8001e10:	b118      	cbz	r0, 8001e1a <_fflush_r+0x1a>
 8001e12:	6a03      	ldr	r3, [r0, #32]
 8001e14:	b90b      	cbnz	r3, 8001e1a <_fflush_r+0x1a>
 8001e16:	f7ff fc95 	bl	8001744 <__sinit>
 8001e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f3      	beq.n	8001e0a <_fflush_r+0xa>
 8001e22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001e24:	07d0      	lsls	r0, r2, #31
 8001e26:	d404      	bmi.n	8001e32 <_fflush_r+0x32>
 8001e28:	0599      	lsls	r1, r3, #22
 8001e2a:	d402      	bmi.n	8001e32 <_fflush_r+0x32>
 8001e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e2e:	f7ff fe6e 	bl	8001b0e <__retarget_lock_acquire_recursive>
 8001e32:	4628      	mov	r0, r5
 8001e34:	4621      	mov	r1, r4
 8001e36:	f7ff ff63 	bl	8001d00 <__sflush_r>
 8001e3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e3c:	4605      	mov	r5, r0
 8001e3e:	07da      	lsls	r2, r3, #31
 8001e40:	d4e4      	bmi.n	8001e0c <_fflush_r+0xc>
 8001e42:	89a3      	ldrh	r3, [r4, #12]
 8001e44:	059b      	lsls	r3, r3, #22
 8001e46:	d4e1      	bmi.n	8001e0c <_fflush_r+0xc>
 8001e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e4a:	f7ff fe61 	bl	8001b10 <__retarget_lock_release_recursive>
 8001e4e:	e7dd      	b.n	8001e0c <_fflush_r+0xc>

08001e50 <__swhatbuf_r>:
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	460c      	mov	r4, r1
 8001e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e58:	4615      	mov	r5, r2
 8001e5a:	2900      	cmp	r1, #0
 8001e5c:	461e      	mov	r6, r3
 8001e5e:	b096      	sub	sp, #88	@ 0x58
 8001e60:	da0c      	bge.n	8001e7c <__swhatbuf_r+0x2c>
 8001e62:	89a3      	ldrh	r3, [r4, #12]
 8001e64:	2100      	movs	r1, #0
 8001e66:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001e6a:	bf14      	ite	ne
 8001e6c:	2340      	movne	r3, #64	@ 0x40
 8001e6e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001e72:	2000      	movs	r0, #0
 8001e74:	6031      	str	r1, [r6, #0]
 8001e76:	602b      	str	r3, [r5, #0]
 8001e78:	b016      	add	sp, #88	@ 0x58
 8001e7a:	bd70      	pop	{r4, r5, r6, pc}
 8001e7c:	466a      	mov	r2, sp
 8001e7e:	f000 f849 	bl	8001f14 <_fstat_r>
 8001e82:	2800      	cmp	r0, #0
 8001e84:	dbed      	blt.n	8001e62 <__swhatbuf_r+0x12>
 8001e86:	9901      	ldr	r1, [sp, #4]
 8001e88:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001e8c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001e90:	4259      	negs	r1, r3
 8001e92:	4159      	adcs	r1, r3
 8001e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e98:	e7eb      	b.n	8001e72 <__swhatbuf_r+0x22>

08001e9a <__smakebuf_r>:
 8001e9a:	898b      	ldrh	r3, [r1, #12]
 8001e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e9e:	079d      	lsls	r5, r3, #30
 8001ea0:	4606      	mov	r6, r0
 8001ea2:	460c      	mov	r4, r1
 8001ea4:	d507      	bpl.n	8001eb6 <__smakebuf_r+0x1c>
 8001ea6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001eaa:	6023      	str	r3, [r4, #0]
 8001eac:	6123      	str	r3, [r4, #16]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	6163      	str	r3, [r4, #20]
 8001eb2:	b003      	add	sp, #12
 8001eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eb6:	466a      	mov	r2, sp
 8001eb8:	ab01      	add	r3, sp, #4
 8001eba:	f7ff ffc9 	bl	8001e50 <__swhatbuf_r>
 8001ebe:	9f00      	ldr	r7, [sp, #0]
 8001ec0:	4605      	mov	r5, r0
 8001ec2:	4639      	mov	r1, r7
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	f7ff fe8f 	bl	8001be8 <_malloc_r>
 8001eca:	b948      	cbnz	r0, 8001ee0 <__smakebuf_r+0x46>
 8001ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ed0:	059a      	lsls	r2, r3, #22
 8001ed2:	d4ee      	bmi.n	8001eb2 <__smakebuf_r+0x18>
 8001ed4:	f023 0303 	bic.w	r3, r3, #3
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	81a3      	strh	r3, [r4, #12]
 8001ede:	e7e2      	b.n	8001ea6 <__smakebuf_r+0xc>
 8001ee0:	89a3      	ldrh	r3, [r4, #12]
 8001ee2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eea:	81a3      	strh	r3, [r4, #12]
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	6020      	str	r0, [r4, #0]
 8001ef0:	b15b      	cbz	r3, 8001f0a <__smakebuf_r+0x70>
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ef8:	f000 f81e 	bl	8001f38 <_isatty_r>
 8001efc:	b128      	cbz	r0, 8001f0a <__smakebuf_r+0x70>
 8001efe:	89a3      	ldrh	r3, [r4, #12]
 8001f00:	f023 0303 	bic.w	r3, r3, #3
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	81a3      	strh	r3, [r4, #12]
 8001f0a:	89a3      	ldrh	r3, [r4, #12]
 8001f0c:	431d      	orrs	r5, r3
 8001f0e:	81a5      	strh	r5, [r4, #12]
 8001f10:	e7cf      	b.n	8001eb2 <__smakebuf_r+0x18>
	...

08001f14 <_fstat_r>:
 8001f14:	b538      	push	{r3, r4, r5, lr}
 8001f16:	2300      	movs	r3, #0
 8001f18:	4d06      	ldr	r5, [pc, #24]	@ (8001f34 <_fstat_r+0x20>)
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	4611      	mov	r1, r2
 8001f20:	602b      	str	r3, [r5, #0]
 8001f22:	f7fe fb47 	bl	80005b4 <_fstat>
 8001f26:	1c43      	adds	r3, r0, #1
 8001f28:	d102      	bne.n	8001f30 <_fstat_r+0x1c>
 8001f2a:	682b      	ldr	r3, [r5, #0]
 8001f2c:	b103      	cbz	r3, 8001f30 <_fstat_r+0x1c>
 8001f2e:	6023      	str	r3, [r4, #0]
 8001f30:	bd38      	pop	{r3, r4, r5, pc}
 8001f32:	bf00      	nop
 8001f34:	20000230 	.word	0x20000230

08001f38 <_isatty_r>:
 8001f38:	b538      	push	{r3, r4, r5, lr}
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	4d05      	ldr	r5, [pc, #20]	@ (8001f54 <_isatty_r+0x1c>)
 8001f3e:	4604      	mov	r4, r0
 8001f40:	4608      	mov	r0, r1
 8001f42:	602b      	str	r3, [r5, #0]
 8001f44:	f7fe fb45 	bl	80005d2 <_isatty>
 8001f48:	1c43      	adds	r3, r0, #1
 8001f4a:	d102      	bne.n	8001f52 <_isatty_r+0x1a>
 8001f4c:	682b      	ldr	r3, [r5, #0]
 8001f4e:	b103      	cbz	r3, 8001f52 <_isatty_r+0x1a>
 8001f50:	6023      	str	r3, [r4, #0]
 8001f52:	bd38      	pop	{r3, r4, r5, pc}
 8001f54:	20000230 	.word	0x20000230

08001f58 <_sbrk_r>:
 8001f58:	b538      	push	{r3, r4, r5, lr}
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	4d05      	ldr	r5, [pc, #20]	@ (8001f74 <_sbrk_r+0x1c>)
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4608      	mov	r0, r1
 8001f62:	602b      	str	r3, [r5, #0]
 8001f64:	f7fe fb4c 	bl	8000600 <_sbrk>
 8001f68:	1c43      	adds	r3, r0, #1
 8001f6a:	d102      	bne.n	8001f72 <_sbrk_r+0x1a>
 8001f6c:	682b      	ldr	r3, [r5, #0]
 8001f6e:	b103      	cbz	r3, 8001f72 <_sbrk_r+0x1a>
 8001f70:	6023      	str	r3, [r4, #0]
 8001f72:	bd38      	pop	{r3, r4, r5, pc}
 8001f74:	20000230 	.word	0x20000230

08001f78 <_init>:
 8001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7a:	bf00      	nop
 8001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f7e:	bc08      	pop	{r3}
 8001f80:	469e      	mov	lr, r3
 8001f82:	4770      	bx	lr

08001f84 <_fini>:
 8001f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f86:	bf00      	nop
 8001f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f8a:	bc08      	pop	{r3}
 8001f8c:	469e      	mov	lr, r3
 8001f8e:	4770      	bx	lr
