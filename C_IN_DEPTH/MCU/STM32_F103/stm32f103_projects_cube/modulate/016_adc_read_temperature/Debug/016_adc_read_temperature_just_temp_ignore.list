
016_adc_read_temperature_just_temp_ignore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005988  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08005a98  08005a98  00006a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea0  08005ea0  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea0  08005ea0  00006ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ea8  08005ea8  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ea8  08005ea8  00006ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005eac  08005eac  00006eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005eb0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001d4  08006084  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08006084  00007374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005638  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001609  00000000  00000000  0000c835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e0  00000000  00000000  0000de40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000442  00000000  00000000  0000e420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f79  00000000  00000000  0000e862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007763  00000000  00000000  000267db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086a82  00000000  00000000  0002df3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b49c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002710  00000000  00000000  000b4a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b7114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a80 	.word	0x08005a80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005a80 	.word	0x08005a80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001034:	b088      	sub	sp, #32
 8001036:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f000 fb70 	bl	800171c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f8b2 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 f946 	bl	80012d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001044:	f000 f904 	bl	8001250 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8001048:	4848      	ldr	r0, [pc, #288]	@ (800116c <main+0x13c>)
 800104a:	f000 fcc5 	bl	80019d8 <HAL_ADC_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Poll for ADC conversion
	  HAL_ADC_PollForConversion(&hadc1, 100);
 800104e:	2164      	movs	r1, #100	@ 0x64
 8001050:	4846      	ldr	r0, [pc, #280]	@ (800116c <main+0x13c>)
 8001052:	f000 fd6f 	bl	8001b34 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8001056:	4845      	ldr	r0, [pc, #276]	@ (800116c <main+0x13c>)
 8001058:	f000 fe72 	bl	8001d40 <HAL_ADC_GetValue>
 800105c:	4603      	mov	r3, r0
 800105e:	603b      	str	r3, [r7, #0]

	  printf("adc_value== %lu\n",adc_value);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	4619      	mov	r1, r3
 8001064:	4842      	ldr	r0, [pc, #264]	@ (8001170 <main+0x140>)
 8001066:	f002 fe33 	bl	8003cd0 <iprintf>
	  fflush(stdout);
 800106a:	4b42      	ldr	r3, [pc, #264]	@ (8001174 <main+0x144>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	4618      	mov	r0, r3
 8001072:	f002 fd57 	bl	8003b24 <fflush>
	 	  //HAL_Delay(4000);

	        // Convert ADC value to voltage
	        float measured_voltage = (adc_value * VREF) / ADC_RESOLUTION;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fdbb 	bl	8000bf4 <__aeabi_ui2f>
 800107e:	4603      	mov	r3, r0
 8001080:	493d      	ldr	r1, [pc, #244]	@ (8001178 <main+0x148>)
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fe0e 	bl	8000ca4 <__aeabi_fmul>
 8001088:	4603      	mov	r3, r0
 800108a:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff febc 	bl	8000e0c <__aeabi_fdiv>
 8001094:	4603      	mov	r3, r0
 8001096:	60fb      	str	r3, [r7, #12]

	        // Calculate current (I = V / R)
	        float current = measured_voltage / SHUNT_RESISTOR; // Current in Amps
 8001098:	4938      	ldr	r1, [pc, #224]	@ (800117c <main+0x14c>)
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f7ff feb6 	bl	8000e0c <__aeabi_fdiv>
 80010a0:	4603      	mov	r3, r0
 80010a2:	60bb      	str	r3, [r7, #8]

	        // Map current to temperature
	        float temperature = TEMP_MIN + ((current - 0.004f) / 0.016f) * (TEMP_MAX - TEMP_MIN);
 80010a4:	4936      	ldr	r1, [pc, #216]	@ (8001180 <main+0x150>)
 80010a6:	68b8      	ldr	r0, [r7, #8]
 80010a8:	f7ff fcf2 	bl	8000a90 <__aeabi_fsub>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4935      	ldr	r1, [pc, #212]	@ (8001184 <main+0x154>)
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff feab 	bl	8000e0c <__aeabi_fdiv>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4933      	ldr	r1, [pc, #204]	@ (8001188 <main+0x158>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fdf2 	bl	8000ca4 <__aeabi_fmul>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4932      	ldr	r1, [pc, #200]	@ (800118c <main+0x15c>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fce5 	bl	8000a94 <__addsf3>
 80010ca:	4603      	mov	r3, r0
 80010cc:	607b      	str	r3, [r7, #4]

	        // Print temperature, current, and voltage
	        printf("Measured Voltage: %.2f V, Current: %.2f mA, Temperature: %.2f °C\n",
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff f9aa 	bl	8000428 <__aeabi_f2d>
 80010d4:	4680      	mov	r8, r0
 80010d6:	4689      	mov	r9, r1
	               measured_voltage, current * 1000.0f, temperature + 2.0 );
 80010d8:	492d      	ldr	r1, [pc, #180]	@ (8001190 <main+0x160>)
 80010da:	68b8      	ldr	r0, [r7, #8]
 80010dc:	f7ff fde2 	bl	8000ca4 <__aeabi_fmul>
 80010e0:	4603      	mov	r3, r0
	        printf("Measured Voltage: %.2f V, Current: %.2f mA, Temperature: %.2f °C\n",
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f9a0 	bl	8000428 <__aeabi_f2d>
 80010e8:	4604      	mov	r4, r0
 80010ea:	460d      	mov	r5, r1
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f99b 	bl	8000428 <__aeabi_f2d>
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010fa:	f7ff f837 	bl	800016c <__adddf3>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001106:	e9cd 4500 	strd	r4, r5, [sp]
 800110a:	4642      	mov	r2, r8
 800110c:	464b      	mov	r3, r9
 800110e:	4821      	ldr	r0, [pc, #132]	@ (8001194 <main+0x164>)
 8001110:	f002 fdde 	bl	8003cd0 <iprintf>
	        fflush(stdout);
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <main+0x144>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fd02 	bl	8003b24 <fflush>


	        if(temperature > 60 && temperature<90){
 8001120:	491d      	ldr	r1, [pc, #116]	@ (8001198 <main+0x168>)
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ff7a 	bl	800101c <__aeabi_fcmpgt>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d012      	beq.n	8001154 <main+0x124>
 800112e:	491b      	ldr	r1, [pc, #108]	@ (800119c <main+0x16c>)
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff55 	bl	8000fe0 <__aeabi_fcmplt>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <main+0x124>

	        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET );
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001142:	4817      	ldr	r0, [pc, #92]	@ (80011a0 <main+0x170>)
 8001144:	f001 fa2e 	bl	80025a4 <HAL_GPIO_WritePin>
	        	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8001148:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800114c:	4814      	ldr	r0, [pc, #80]	@ (80011a0 <main+0x170>)
 800114e:	f001 fa41 	bl	80025d4 <HAL_GPIO_TogglePin>
 8001152:	e005      	b.n	8001160 <main+0x130>
	        }
	        else{
	         	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET );
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800115a:	4811      	ldr	r0, [pc, #68]	@ (80011a0 <main+0x170>)
 800115c:	f001 fa22 	bl	80025a4 <HAL_GPIO_WritePin>
	        }

	        HAL_Delay(7000); // Delay for 1 second
 8001160:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8001164:	f000 fb3c 	bl	80017e0 <HAL_Delay>
  {
 8001168:	e771      	b.n	800104e <main+0x1e>
 800116a:	bf00      	nop
 800116c:	200001f0 	.word	0x200001f0
 8001170:	08005a98 	.word	0x08005a98
 8001174:	20000018 	.word	0x20000018
 8001178:	40a00000 	.word	0x40a00000
 800117c:	42c80000 	.word	0x42c80000
 8001180:	3b83126f 	.word	0x3b83126f
 8001184:	3c83126f 	.word	0x3c83126f
 8001188:	43310000 	.word	0x43310000
 800118c:	41b80000 	.word	0x41b80000
 8001190:	447a0000 	.word	0x447a0000
 8001194:	08005aac 	.word	0x08005aac
 8001198:	42700000 	.word	0x42700000
 800119c:	42b40000 	.word	0x42b40000
 80011a0:	40011000 	.word	0x40011000

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	@ 0x50
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ae:	2228      	movs	r2, #40	@ 0x28
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fde1 	bl	8003d7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d4:	2302      	movs	r3, #2
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011dc:	2310      	movs	r3, #16
 80011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011e4:	2300      	movs	r3, #0
 80011e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80011e8:	2300      	movs	r3, #0
 80011ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fa2b 	bl	800264c <HAL_RCC_OscConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80011fc:	f000 f8d2 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001200:	230f      	movs	r3, #15
 8001202:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001210:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f001 fc97 	bl	8002b50 <HAL_RCC_ClockConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001228:	f000 f8bc 	bl	80013a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800122c:	2302      	movs	r3, #2
 800122e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fe04 	bl	8002e44 <HAL_RCCEx_PeriphCLKConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001242:	f000 f8af 	bl	80013a4 <Error_Handler>
  }
}
 8001246:	bf00      	nop
 8001248:	3750      	adds	r7, #80	@ 0x50
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001260:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <MX_ADC1_Init+0x78>)
 8001262:	4a1a      	ldr	r2, [pc, #104]	@ (80012cc <MX_ADC1_Init+0x7c>)
 8001264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <MX_ADC1_Init+0x78>)
 8001268:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800126c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800126e:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <MX_ADC1_Init+0x78>)
 8001270:	2201      	movs	r2, #1
 8001272:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <MX_ADC1_Init+0x78>)
 8001276:	2200      	movs	r2, #0
 8001278:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <MX_ADC1_Init+0x78>)
 800127c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001280:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_ADC1_Init+0x78>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <MX_ADC1_Init+0x78>)
 800128a:	2201      	movs	r2, #1
 800128c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800128e:	480e      	ldr	r0, [pc, #56]	@ (80012c8 <MX_ADC1_Init+0x78>)
 8001290:	f000 faca 	bl	8001828 <HAL_ADC_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800129a:	f000 f883 	bl	80013a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800129e:	2301      	movs	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <MX_ADC1_Init+0x78>)
 80012b0:	f000 fd52 	bl	8001d58 <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012ba:	f000 f873 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200001f0 	.word	0x200001f0
 80012cc:	40012400 	.word	0x40012400

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001398 <MX_GPIO_Init+0xc8>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001398 <MX_GPIO_Init+0xc8>)
 80012ea:	f043 0310 	orr.w	r3, r3, #16
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b29      	ldr	r3, [pc, #164]	@ (8001398 <MX_GPIO_Init+0xc8>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fc:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <MX_GPIO_Init+0xc8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a25      	ldr	r2, [pc, #148]	@ (8001398 <MX_GPIO_Init+0xc8>)
 8001302:	f043 0320 	orr.w	r3, r3, #32
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b23      	ldr	r3, [pc, #140]	@ (8001398 <MX_GPIO_Init+0xc8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0320 	and.w	r3, r3, #32
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <MX_GPIO_Init+0xc8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a1f      	ldr	r2, [pc, #124]	@ (8001398 <MX_GPIO_Init+0xc8>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <MX_GPIO_Init+0xc8>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <MX_GPIO_Init+0xc8>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a19      	ldr	r2, [pc, #100]	@ (8001398 <MX_GPIO_Init+0xc8>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <MX_GPIO_Init+0xc8>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001344:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134a:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_GPIO_Init+0xcc>)
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4619      	mov	r1, r3
 8001358:	4811      	ldr	r0, [pc, #68]	@ (80013a0 <MX_GPIO_Init+0xd0>)
 800135a:	f000 ff9f 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : relayy_Pin */
   GPIO_InitStruct.Pin = GPIO_PIN_10;
 800135e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001362:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2302      	movs	r3, #2
 800136e:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(GPIO_PIN_10, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800137a:	f000 ff8f 	bl	800229c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2028      	movs	r0, #40	@ 0x28
 8001384:	f000 ff53 	bl	800222e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001388:	2028      	movs	r0, #40	@ 0x28
 800138a:	f000 ff6c 	bl	8002266 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	10110000 	.word	0x10110000
 80013a0:	40011000 	.word	0x40011000

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <Error_Handler+0x8>

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_MspInit+0x5c>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	4a14      	ldr	r2, [pc, #80]	@ (800140c <HAL_MspInit+0x5c>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6193      	str	r3, [r2, #24]
 80013c2:	4b12      	ldr	r3, [pc, #72]	@ (800140c <HAL_MspInit+0x5c>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <HAL_MspInit+0x5c>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a0e      	ldr	r2, [pc, #56]	@ (800140c <HAL_MspInit+0x5c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <HAL_MspInit+0x5c>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_MspInit+0x60>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	4a04      	ldr	r2, [pc, #16]	@ (8001410 <HAL_MspInit+0x60>)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000

08001414 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <HAL_ADC_MspInit+0x6c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d121      	bne.n	8001478 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001434:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <HAL_ADC_MspInit+0x70>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <HAL_ADC_MspInit+0x70>)
 800143a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <HAL_ADC_MspInit+0x70>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <HAL_ADC_MspInit+0x70>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a0c      	ldr	r2, [pc, #48]	@ (8001484 <HAL_ADC_MspInit+0x70>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_ADC_MspInit+0x70>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001464:	2302      	movs	r3, #2
 8001466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001468:	2303      	movs	r3, #3
 800146a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4619      	mov	r1, r3
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <HAL_ADC_MspInit+0x74>)
 8001474:	f000 ff12 	bl	800229c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40012400 	.word	0x40012400
 8001484:	40021000 	.word	0x40021000
 8001488:	40010800 	.word	0x40010800

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <NMI_Handler+0x4>

08001494 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <MemManage_Handler+0x4>

080014a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014dc:	f000 f964 	bl	80017a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014ec:	f001 f88c 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80014fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <ITM_SendChar+0x44>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0d      	ldr	r2, [pc, #52]	@ (8001538 <ITM_SendChar+0x44>)
 8001504:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001508:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800150a:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <ITM_SendChar+0x48>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a0b      	ldr	r2, [pc, #44]	@ (800153c <ITM_SendChar+0x48>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001516:	bf00      	nop
 8001518:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f8      	beq.n	8001518 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001526:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	6013      	str	r3, [r2, #0]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	e000edfc 	.word	0xe000edfc
 800153c:	e0000e00 	.word	0xe0000e00

08001540 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return 1;
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <_kill>:

int _kill(int pid, int sig)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001558:	f002 fc62 	bl	8003e20 <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	2216      	movs	r2, #22
 8001560:	601a      	str	r2, [r3, #0]
  return -1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <_exit>:

void _exit (int status)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001576:	f04f 31ff 	mov.w	r1, #4294967295
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffe7 	bl	800154e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <_exit+0x12>

08001584 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e00a      	b.n	80015ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001596:	f3af 8000 	nop.w
 800159a:	4601      	mov	r1, r0
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	b2ca      	uxtb	r2, r1
 80015a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf0      	blt.n	8001596 <_read+0x12>
  }

  return len;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e009      	b.n	80015e4 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	60ba      	str	r2, [r7, #8]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff8b 	bl	80014f4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbf1      	blt.n	80015d0 <_write+0x12>
  }
  return len;
 80015ec:	687b      	ldr	r3, [r7, #4]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_close>:

int _close(int file)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800161c:	605a      	str	r2, [r3, #4]
  return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <_isatty>:

int _isatty(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr

0800163e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800163e:	b480      	push	{r7}
 8001640:	b085      	sub	sp, #20
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
	...

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f002 fbca 	bl	8003e20 <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	@ (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20005000 	.word	0x20005000
 80016b8:	00000400 	.word	0x00000400
 80016bc:	20000220 	.word	0x20000220
 80016c0:	20000378 	.word	0x20000378

080016c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d0:	f7ff fff8 	bl	80016c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d4:	480b      	ldr	r0, [pc, #44]	@ (8001704 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016d6:	490c      	ldr	r1, [pc, #48]	@ (8001708 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016d8:	4a0c      	ldr	r2, [pc, #48]	@ (800170c <LoopFillZerobss+0x16>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a09      	ldr	r2, [pc, #36]	@ (8001710 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016ec:	4c09      	ldr	r4, [pc, #36]	@ (8001714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fa:	f002 fb97 	bl	8003e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016fe:	f7ff fc97 	bl	8001030 <main>
  bx lr
 8001702:	4770      	bx	lr
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800170c:	08005eb0 	.word	0x08005eb0
  ldr r2, =_sbss
 8001710:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001714:	20000374 	.word	0x20000374

08001718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC1_2_IRQHandler>
	...

0800171c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <HAL_Init+0x28>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <HAL_Init+0x28>)
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172c:	2003      	movs	r0, #3
 800172e:	f000 fd73 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001732:	2000      	movs	r0, #0
 8001734:	f000 f808 	bl	8001748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001738:	f7ff fe3a 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40022000 	.word	0x40022000

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <HAL_InitTick+0x54>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_InitTick+0x58>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800175e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fd8b 	bl	8002282 <HAL_SYSTICK_Config>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e00e      	b.n	8001794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d80a      	bhi.n	8001792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f000 fd53 	bl	800222e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001788:	4a06      	ldr	r2, [pc, #24]	@ (80017a4 <HAL_InitTick+0x5c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000008 	.word	0x20000008
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <HAL_IncTick+0x1c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <HAL_IncTick+0x20>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a03      	ldr	r2, [pc, #12]	@ (80017c8 <HAL_IncTick+0x20>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	20000008 	.word	0x20000008
 80017c8:	20000224 	.word	0x20000224

080017cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b02      	ldr	r3, [pc, #8]	@ (80017dc <HAL_GetTick+0x10>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	20000224 	.word	0x20000224

080017e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff fff0 	bl	80017cc <HAL_GetTick>
 80017ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f8:	d005      	beq.n	8001806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <HAL_Delay+0x44>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001806:	bf00      	nop
 8001808:	f7ff ffe0 	bl	80017cc <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	429a      	cmp	r2, r3
 8001816:	d8f7      	bhi.n	8001808 <HAL_Delay+0x28>
  {
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000008 	.word	0x20000008

08001828 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0be      	b.n	80019c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001854:	2b00      	cmp	r3, #0
 8001856:	d109      	bne.n	800186c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff fdd4 	bl	8001414 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fbc5 	bl	8001ffc <ADC_ConversionStop_Disable>
 8001872:	4603      	mov	r3, r0
 8001874:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b00      	cmp	r3, #0
 8001880:	f040 8099 	bne.w	80019b6 <HAL_ADC_Init+0x18e>
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 8095 	bne.w	80019b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001890:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001894:	f023 0302 	bic.w	r3, r3, #2
 8001898:	f043 0202 	orr.w	r2, r3, #2
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7b1b      	ldrb	r3, [r3, #12]
 80018ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018c0:	d003      	beq.n	80018ca <HAL_ADC_Init+0xa2>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d102      	bne.n	80018d0 <HAL_ADC_Init+0xa8>
 80018ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018ce:	e000      	b.n	80018d2 <HAL_ADC_Init+0xaa>
 80018d0:	2300      	movs	r3, #0
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7d1b      	ldrb	r3, [r3, #20]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d119      	bne.n	8001914 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7b1b      	ldrb	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	035a      	lsls	r2, r3, #13
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	e00b      	b.n	8001914 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001900:	f043 0220 	orr.w	r2, r3, #32
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	430a      	orrs	r2, r1
 8001926:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <HAL_ADC_Init+0x1a8>)
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	68b9      	ldr	r1, [r7, #8]
 8001938:	430b      	orrs	r3, r1
 800193a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001944:	d003      	beq.n	800194e <HAL_ADC_Init+0x126>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d104      	bne.n	8001958 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	3b01      	subs	r3, #1
 8001954:	051b      	lsls	r3, r3, #20
 8001956:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	430a      	orrs	r2, r1
 800196a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <HAL_ADC_Init+0x1ac>)
 8001974:	4013      	ands	r3, r2
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	429a      	cmp	r2, r3
 800197a:	d10b      	bne.n	8001994 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001986:	f023 0303 	bic.w	r3, r3, #3
 800198a:	f043 0201 	orr.w	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001992:	e018      	b.n	80019c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001998:	f023 0312 	bic.w	r3, r3, #18
 800199c:	f043 0210 	orr.w	r2, r3, #16
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019b4:	e007      	b.n	80019c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ba:	f043 0210 	orr.w	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	ffe1f7fd 	.word	0xffe1f7fd
 80019d4:	ff1f0efe 	.word	0xff1f0efe

080019d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Start+0x1a>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e098      	b.n	8001b24 <HAL_ADC_Start+0x14c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 faa4 	bl	8001f48 <ADC_Enable>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 8087 	bne.w	8001b1a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a41      	ldr	r2, [pc, #260]	@ (8001b2c <HAL_ADC_Start+0x154>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d105      	bne.n	8001a36 <HAL_ADC_Start+0x5e>
 8001a2a:	4b41      	ldr	r3, [pc, #260]	@ (8001b30 <HAL_ADC_Start+0x158>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d115      	bne.n	8001a62 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d026      	beq.n	8001a9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a54:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a58:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a60:	e01d      	b.n	8001a9e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a66:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a2f      	ldr	r2, [pc, #188]	@ (8001b30 <HAL_ADC_Start+0x158>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d004      	beq.n	8001a82 <HAL_ADC_Start+0xaa>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001b2c <HAL_ADC_Start+0x154>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d10d      	bne.n	8001a9e <HAL_ADC_Start+0xc6>
 8001a82:	4b2b      	ldr	r3, [pc, #172]	@ (8001b30 <HAL_ADC_Start+0x158>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a92:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a96:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aae:	f023 0206 	bic.w	r2, r3, #6
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ab6:	e002      	b.n	8001abe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f06f 0202 	mvn.w	r2, #2
 8001ace:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ada:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ade:	d113      	bne.n	8001b08 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ae4:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <HAL_ADC_Start+0x154>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d105      	bne.n	8001af6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001aea:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <HAL_ADC_Start+0x158>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d108      	bne.n	8001b08 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	e00c      	b.n	8001b22 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	e003      	b.n	8001b22 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40012800 	.word	0x40012800
 8001b30:	40012400 	.word	0x40012400

08001b34 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b4a:	f7ff fe3f 	bl	80017cc <HAL_GetTick>
 8001b4e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b62:	f043 0220 	orr.w	r2, r3, #32
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0d3      	b.n	8001d1e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d131      	bne.n	8001be8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d12a      	bne.n	8001be8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b92:	e021      	b.n	8001bd8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9a:	d01d      	beq.n	8001bd8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_ADC_PollForConversion+0x7e>
 8001ba2:	f7ff fe13 	bl	80017cc <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d212      	bcs.n	8001bd8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	f043 0204 	orr.w	r2, r3, #4
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e0a2      	b.n	8001d1e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0d6      	beq.n	8001b94 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001be6:	e070      	b.n	8001cca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001be8:	4b4f      	ldr	r3, [pc, #316]	@ (8001d28 <HAL_ADC_PollForConversion+0x1f4>)
 8001bea:	681c      	ldr	r4, [r3, #0]
 8001bec:	2002      	movs	r0, #2
 8001bee:	f001 f9df 	bl	8002fb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6919      	ldr	r1, [r3, #16]
 8001bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8001d2c <HAL_ADC_PollForConversion+0x1f8>)
 8001c00:	400b      	ands	r3, r1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d118      	bne.n	8001c38 <HAL_ADC_PollForConversion+0x104>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68d9      	ldr	r1, [r3, #12]
 8001c0c:	4b48      	ldr	r3, [pc, #288]	@ (8001d30 <HAL_ADC_PollForConversion+0x1fc>)
 8001c0e:	400b      	ands	r3, r1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d111      	bne.n	8001c38 <HAL_ADC_PollForConversion+0x104>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6919      	ldr	r1, [r3, #16]
 8001c1a:	4b46      	ldr	r3, [pc, #280]	@ (8001d34 <HAL_ADC_PollForConversion+0x200>)
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d108      	bne.n	8001c34 <HAL_ADC_PollForConversion+0x100>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68d9      	ldr	r1, [r3, #12]
 8001c28:	4b43      	ldr	r3, [pc, #268]	@ (8001d38 <HAL_ADC_PollForConversion+0x204>)
 8001c2a:	400b      	ands	r3, r1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_PollForConversion+0x100>
 8001c30:	2314      	movs	r3, #20
 8001c32:	e020      	b.n	8001c76 <HAL_ADC_PollForConversion+0x142>
 8001c34:	2329      	movs	r3, #41	@ 0x29
 8001c36:	e01e      	b.n	8001c76 <HAL_ADC_PollForConversion+0x142>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6919      	ldr	r1, [r3, #16]
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d34 <HAL_ADC_PollForConversion+0x200>)
 8001c40:	400b      	ands	r3, r1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_ADC_PollForConversion+0x120>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68d9      	ldr	r1, [r3, #12]
 8001c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d38 <HAL_ADC_PollForConversion+0x204>)
 8001c4e:	400b      	ands	r3, r1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00d      	beq.n	8001c70 <HAL_ADC_PollForConversion+0x13c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6919      	ldr	r1, [r3, #16]
 8001c5a:	4b38      	ldr	r3, [pc, #224]	@ (8001d3c <HAL_ADC_PollForConversion+0x208>)
 8001c5c:	400b      	ands	r3, r1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d108      	bne.n	8001c74 <HAL_ADC_PollForConversion+0x140>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68d9      	ldr	r1, [r3, #12]
 8001c68:	4b34      	ldr	r3, [pc, #208]	@ (8001d3c <HAL_ADC_PollForConversion+0x208>)
 8001c6a:	400b      	ands	r3, r1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_PollForConversion+0x140>
 8001c70:	2354      	movs	r3, #84	@ 0x54
 8001c72:	e000      	b.n	8001c76 <HAL_ADC_PollForConversion+0x142>
 8001c74:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c7c:	e021      	b.n	8001cc2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d01a      	beq.n	8001cbc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <HAL_ADC_PollForConversion+0x168>
 8001c8c:	f7ff fd9e 	bl	80017cc <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d20f      	bcs.n	8001cbc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d90b      	bls.n	8001cbc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca8:	f043 0204 	orr.w	r2, r3, #4
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e030      	b.n	8001d1e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d8d9      	bhi.n	8001c7e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f06f 0212 	mvn.w	r2, #18
 8001cd2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001cea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001cee:	d115      	bne.n	8001d1c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d111      	bne.n	8001d1c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d105      	bne.n	8001d1c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	371c      	adds	r7, #28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd90      	pop	{r4, r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	24924924 	.word	0x24924924
 8001d30:	00924924 	.word	0x00924924
 8001d34:	12492492 	.word	0x12492492
 8001d38:	00492492 	.word	0x00492492
 8001d3c:	00249249 	.word	0x00249249

08001d40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x20>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e0dc      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1da>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b06      	cmp	r3, #6
 8001d86:	d81c      	bhi.n	8001dc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	3b05      	subs	r3, #5
 8001d9a:	221f      	movs	r2, #31
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4019      	ands	r1, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	3b05      	subs	r3, #5
 8001db4:	fa00 f203 	lsl.w	r2, r0, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dc0:	e03c      	b.n	8001e3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d81c      	bhi.n	8001e04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b23      	subs	r3, #35	@ 0x23
 8001ddc:	221f      	movs	r2, #31
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	4019      	ands	r1, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	3b23      	subs	r3, #35	@ 0x23
 8001df6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e02:	e01b      	b.n	8001e3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	3b41      	subs	r3, #65	@ 0x41
 8001e16:	221f      	movs	r2, #31
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4019      	ands	r1, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b41      	subs	r3, #65	@ 0x41
 8001e30:	fa00 f203 	lsl.w	r2, r0, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b09      	cmp	r3, #9
 8001e42:	d91c      	bls.n	8001e7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68d9      	ldr	r1, [r3, #12]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	3b1e      	subs	r3, #30
 8001e56:	2207      	movs	r2, #7
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	4019      	ands	r1, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6898      	ldr	r0, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b1e      	subs	r3, #30
 8001e70:	fa00 f203 	lsl.w	r2, r0, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	e019      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6919      	ldr	r1, [r3, #16]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	2207      	movs	r2, #7
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4019      	ands	r1, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6898      	ldr	r0, [r3, #8]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d003      	beq.n	8001ec2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ebe:	2b11      	cmp	r3, #17
 8001ec0:	d132      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f3c <HAL_ADC_ConfigChannel+0x1e4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d125      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d126      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001ee8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d11a      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ef2:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a13      	ldr	r2, [pc, #76]	@ (8001f44 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	0c9a      	lsrs	r2, r3, #18
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f08:	e002      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f9      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x1b2>
 8001f16:	e007      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	f043 0220 	orr.w	r2, r3, #32
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40012400 	.word	0x40012400
 8001f40:	20000000 	.word	0x20000000
 8001f44:	431bde83 	.word	0x431bde83

08001f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d040      	beq.n	8001fe8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f76:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff4 <ADC_Enable+0xac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff8 <ADC_Enable+0xb0>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f84:	e002      	b.n	8001f8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f9      	bne.n	8001f86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f92:	f7ff fc1b 	bl	80017cc <HAL_GetTick>
 8001f96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f98:	e01f      	b.n	8001fda <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f9a:	f7ff fc17 	bl	80017cc <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d918      	bls.n	8001fda <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d011      	beq.n	8001fda <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fba:	f043 0210 	orr.w	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e007      	b.n	8001fea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d1d8      	bne.n	8001f9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	431bde83 	.word	0x431bde83

08001ffc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d12e      	bne.n	8002074 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002026:	f7ff fbd1 	bl	80017cc <HAL_GetTick>
 800202a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800202c:	e01b      	b.n	8002066 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800202e:	f7ff fbcd 	bl	80017cc <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d914      	bls.n	8002066 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b01      	cmp	r3, #1
 8002048:	d10d      	bne.n	8002066 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204e:	f043 0210 	orr.w	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205a:	f043 0201 	orr.w	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e007      	b.n	8002076 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d0dc      	beq.n	800202e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4906      	ldr	r1, [pc, #24]	@ (8002118 <__NVIC_EnableIRQ+0x34>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	@ (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	@ (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	@ 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f7ff ff90 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff2d 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff42 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff90 	bl	8002170 <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5f 	bl	800211c <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff35 	bl	80020e4 <__NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa2 	bl	80021d4 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b08b      	sub	sp, #44	@ 0x2c
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ae:	e169      	b.n	8002584 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022b0:	2201      	movs	r2, #1
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	f040 8158 	bne.w	800257e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4a9a      	ldr	r2, [pc, #616]	@ (800253c <HAL_GPIO_Init+0x2a0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d05e      	beq.n	8002396 <HAL_GPIO_Init+0xfa>
 80022d8:	4a98      	ldr	r2, [pc, #608]	@ (800253c <HAL_GPIO_Init+0x2a0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d875      	bhi.n	80023ca <HAL_GPIO_Init+0x12e>
 80022de:	4a98      	ldr	r2, [pc, #608]	@ (8002540 <HAL_GPIO_Init+0x2a4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d058      	beq.n	8002396 <HAL_GPIO_Init+0xfa>
 80022e4:	4a96      	ldr	r2, [pc, #600]	@ (8002540 <HAL_GPIO_Init+0x2a4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d86f      	bhi.n	80023ca <HAL_GPIO_Init+0x12e>
 80022ea:	4a96      	ldr	r2, [pc, #600]	@ (8002544 <HAL_GPIO_Init+0x2a8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d052      	beq.n	8002396 <HAL_GPIO_Init+0xfa>
 80022f0:	4a94      	ldr	r2, [pc, #592]	@ (8002544 <HAL_GPIO_Init+0x2a8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d869      	bhi.n	80023ca <HAL_GPIO_Init+0x12e>
 80022f6:	4a94      	ldr	r2, [pc, #592]	@ (8002548 <HAL_GPIO_Init+0x2ac>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d04c      	beq.n	8002396 <HAL_GPIO_Init+0xfa>
 80022fc:	4a92      	ldr	r2, [pc, #584]	@ (8002548 <HAL_GPIO_Init+0x2ac>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d863      	bhi.n	80023ca <HAL_GPIO_Init+0x12e>
 8002302:	4a92      	ldr	r2, [pc, #584]	@ (800254c <HAL_GPIO_Init+0x2b0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d046      	beq.n	8002396 <HAL_GPIO_Init+0xfa>
 8002308:	4a90      	ldr	r2, [pc, #576]	@ (800254c <HAL_GPIO_Init+0x2b0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d85d      	bhi.n	80023ca <HAL_GPIO_Init+0x12e>
 800230e:	2b12      	cmp	r3, #18
 8002310:	d82a      	bhi.n	8002368 <HAL_GPIO_Init+0xcc>
 8002312:	2b12      	cmp	r3, #18
 8002314:	d859      	bhi.n	80023ca <HAL_GPIO_Init+0x12e>
 8002316:	a201      	add	r2, pc, #4	@ (adr r2, 800231c <HAL_GPIO_Init+0x80>)
 8002318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231c:	08002397 	.word	0x08002397
 8002320:	08002371 	.word	0x08002371
 8002324:	08002383 	.word	0x08002383
 8002328:	080023c5 	.word	0x080023c5
 800232c:	080023cb 	.word	0x080023cb
 8002330:	080023cb 	.word	0x080023cb
 8002334:	080023cb 	.word	0x080023cb
 8002338:	080023cb 	.word	0x080023cb
 800233c:	080023cb 	.word	0x080023cb
 8002340:	080023cb 	.word	0x080023cb
 8002344:	080023cb 	.word	0x080023cb
 8002348:	080023cb 	.word	0x080023cb
 800234c:	080023cb 	.word	0x080023cb
 8002350:	080023cb 	.word	0x080023cb
 8002354:	080023cb 	.word	0x080023cb
 8002358:	080023cb 	.word	0x080023cb
 800235c:	080023cb 	.word	0x080023cb
 8002360:	08002379 	.word	0x08002379
 8002364:	0800238d 	.word	0x0800238d
 8002368:	4a79      	ldr	r2, [pc, #484]	@ (8002550 <HAL_GPIO_Init+0x2b4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800236e:	e02c      	b.n	80023ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	623b      	str	r3, [r7, #32]
          break;
 8002376:	e029      	b.n	80023cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	3304      	adds	r3, #4
 800237e:	623b      	str	r3, [r7, #32]
          break;
 8002380:	e024      	b.n	80023cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	3308      	adds	r3, #8
 8002388:	623b      	str	r3, [r7, #32]
          break;
 800238a:	e01f      	b.n	80023cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	330c      	adds	r3, #12
 8002392:	623b      	str	r3, [r7, #32]
          break;
 8002394:	e01a      	b.n	80023cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800239e:	2304      	movs	r3, #4
 80023a0:	623b      	str	r3, [r7, #32]
          break;
 80023a2:	e013      	b.n	80023cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d105      	bne.n	80023b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023ac:	2308      	movs	r3, #8
 80023ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	611a      	str	r2, [r3, #16]
          break;
 80023b6:	e009      	b.n	80023cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b8:	2308      	movs	r3, #8
 80023ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	615a      	str	r2, [r3, #20]
          break;
 80023c2:	e003      	b.n	80023cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
          break;
 80023c8:	e000      	b.n	80023cc <HAL_GPIO_Init+0x130>
          break;
 80023ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2bff      	cmp	r3, #255	@ 0xff
 80023d0:	d801      	bhi.n	80023d6 <HAL_GPIO_Init+0x13a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	e001      	b.n	80023da <HAL_GPIO_Init+0x13e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2bff      	cmp	r3, #255	@ 0xff
 80023e0:	d802      	bhi.n	80023e8 <HAL_GPIO_Init+0x14c>
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	e002      	b.n	80023ee <HAL_GPIO_Init+0x152>
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	3b08      	subs	r3, #8
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	210f      	movs	r1, #15
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	401a      	ands	r2, r3
 8002400:	6a39      	ldr	r1, [r7, #32]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	431a      	orrs	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80b1 	beq.w	800257e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800241c:	4b4d      	ldr	r3, [pc, #308]	@ (8002554 <HAL_GPIO_Init+0x2b8>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	4a4c      	ldr	r2, [pc, #304]	@ (8002554 <HAL_GPIO_Init+0x2b8>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6193      	str	r3, [r2, #24]
 8002428:	4b4a      	ldr	r3, [pc, #296]	@ (8002554 <HAL_GPIO_Init+0x2b8>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002434:	4a48      	ldr	r2, [pc, #288]	@ (8002558 <HAL_GPIO_Init+0x2bc>)
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	3302      	adds	r3, #2
 800243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002440:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a40      	ldr	r2, [pc, #256]	@ (800255c <HAL_GPIO_Init+0x2c0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d013      	beq.n	8002488 <HAL_GPIO_Init+0x1ec>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3f      	ldr	r2, [pc, #252]	@ (8002560 <HAL_GPIO_Init+0x2c4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00d      	beq.n	8002484 <HAL_GPIO_Init+0x1e8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3e      	ldr	r2, [pc, #248]	@ (8002564 <HAL_GPIO_Init+0x2c8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d007      	beq.n	8002480 <HAL_GPIO_Init+0x1e4>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3d      	ldr	r2, [pc, #244]	@ (8002568 <HAL_GPIO_Init+0x2cc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_GPIO_Init+0x1e0>
 8002478:	2303      	movs	r3, #3
 800247a:	e006      	b.n	800248a <HAL_GPIO_Init+0x1ee>
 800247c:	2304      	movs	r3, #4
 800247e:	e004      	b.n	800248a <HAL_GPIO_Init+0x1ee>
 8002480:	2302      	movs	r3, #2
 8002482:	e002      	b.n	800248a <HAL_GPIO_Init+0x1ee>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <HAL_GPIO_Init+0x1ee>
 8002488:	2300      	movs	r3, #0
 800248a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800248c:	f002 0203 	and.w	r2, r2, #3
 8002490:	0092      	lsls	r2, r2, #2
 8002492:	4093      	lsls	r3, r2
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800249a:	492f      	ldr	r1, [pc, #188]	@ (8002558 <HAL_GPIO_Init+0x2bc>)
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024b4:	4b2d      	ldr	r3, [pc, #180]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	492c      	ldr	r1, [pc, #176]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	608b      	str	r3, [r1, #8]
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024c2:	4b2a      	ldr	r3, [pc, #168]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	4928      	ldr	r1, [pc, #160]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024dc:	4b23      	ldr	r3, [pc, #140]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	4922      	ldr	r1, [pc, #136]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60cb      	str	r3, [r1, #12]
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024ea:	4b20      	ldr	r3, [pc, #128]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	491e      	ldr	r1, [pc, #120]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d006      	beq.n	8002512 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002504:	4b19      	ldr	r3, [pc, #100]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4918      	ldr	r1, [pc, #96]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002512:	4b16      	ldr	r3, [pc, #88]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	43db      	mvns	r3, r3
 800251a:	4914      	ldr	r1, [pc, #80]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 800251c:	4013      	ands	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d021      	beq.n	8002570 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800252c:	4b0f      	ldr	r3, [pc, #60]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	490e      	ldr	r1, [pc, #56]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]
 8002538:	e021      	b.n	800257e <HAL_GPIO_Init+0x2e2>
 800253a:	bf00      	nop
 800253c:	10320000 	.word	0x10320000
 8002540:	10310000 	.word	0x10310000
 8002544:	10220000 	.word	0x10220000
 8002548:	10210000 	.word	0x10210000
 800254c:	10120000 	.word	0x10120000
 8002550:	10110000 	.word	0x10110000
 8002554:	40021000 	.word	0x40021000
 8002558:	40010000 	.word	0x40010000
 800255c:	40010800 	.word	0x40010800
 8002560:	40010c00 	.word	0x40010c00
 8002564:	40011000 	.word	0x40011000
 8002568:	40011400 	.word	0x40011400
 800256c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	43db      	mvns	r3, r3
 8002578:	4909      	ldr	r1, [pc, #36]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 800257a:	4013      	ands	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	3301      	adds	r3, #1
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	f47f ae8e 	bne.w	80022b0 <HAL_GPIO_Init+0x14>
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	372c      	adds	r7, #44	@ 0x2c
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	40010400 	.word	0x40010400

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025c0:	e003      	b.n	80025ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	041a      	lsls	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	611a      	str	r2, [r3, #16]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4013      	ands	r3, r2
 80025ec:	041a      	lsls	r2, r3, #16
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43d9      	mvns	r1, r3
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	400b      	ands	r3, r1
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	611a      	str	r2, [r3, #16]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
	...

08002608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002612:	4b08      	ldr	r3, [pc, #32]	@ (8002634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d006      	beq.n	800262c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800261e:	4a05      	ldr	r2, [pc, #20]	@ (8002634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f806 	bl	8002638 <HAL_GPIO_EXTI_Callback>
  }
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40010400 	.word	0x40010400

08002638 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e272      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8087 	beq.w	800277a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800266c:	4b92      	ldr	r3, [pc, #584]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b04      	cmp	r3, #4
 8002676:	d00c      	beq.n	8002692 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002678:	4b8f      	ldr	r3, [pc, #572]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d112      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
 8002684:	4b8c      	ldr	r3, [pc, #560]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002690:	d10b      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002692:	4b89      	ldr	r3, [pc, #548]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d06c      	beq.n	8002778 <HAL_RCC_OscConfig+0x12c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d168      	bne.n	8002778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e24c      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x76>
 80026b4:	4b80      	ldr	r3, [pc, #512]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a7f      	ldr	r2, [pc, #508]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e02e      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x98>
 80026ca:	4b7b      	ldr	r3, [pc, #492]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7a      	ldr	r2, [pc, #488]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b78      	ldr	r3, [pc, #480]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a77      	ldr	r2, [pc, #476]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e01d      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0xbc>
 80026ee:	4b72      	ldr	r3, [pc, #456]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a71      	ldr	r2, [pc, #452]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b6f      	ldr	r3, [pc, #444]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a6e      	ldr	r2, [pc, #440]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 8002708:	4b6b      	ldr	r3, [pc, #428]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6a      	ldr	r2, [pc, #424]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b68      	ldr	r3, [pc, #416]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a67      	ldr	r2, [pc, #412]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800271e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7ff f850 	bl	80017cc <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7ff f84c 	bl	80017cc <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	@ 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e200      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b5d      	ldr	r3, [pc, #372]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0xe4>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7ff f83c 	bl	80017cc <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7ff f838 	bl	80017cc <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	@ 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1ec      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	4b53      	ldr	r3, [pc, #332]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x10c>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d063      	beq.n	800284e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002786:	4b4c      	ldr	r3, [pc, #304]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002792:	4b49      	ldr	r3, [pc, #292]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	d11c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x18c>
 800279e:	4b46      	ldr	r3, [pc, #280]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	4b43      	ldr	r3, [pc, #268]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_RCC_OscConfig+0x176>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e1c0      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c2:	4b3d      	ldr	r3, [pc, #244]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4939      	ldr	r1, [pc, #228]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	e03a      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e0:	4b36      	ldr	r3, [pc, #216]	@ (80028bc <HAL_RCC_OscConfig+0x270>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe fff1 	bl	80017cc <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ee:	f7fe ffed 	bl	80017cc <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1a1      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	4b2d      	ldr	r3, [pc, #180]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b2a      	ldr	r3, [pc, #168]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4927      	ldr	r1, [pc, #156]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	e015      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002822:	4b26      	ldr	r3, [pc, #152]	@ (80028bc <HAL_RCC_OscConfig+0x270>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe ffd0 	bl	80017cc <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002830:	f7fe ffcc 	bl	80017cc <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e180      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b1d      	ldr	r3, [pc, #116]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d03a      	beq.n	80028d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d019      	beq.n	8002896 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7fe ffb0 	bl	80017cc <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002870:	f7fe ffac 	bl	80017cc <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e160      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800288e:	2001      	movs	r0, #1
 8002890:	f000 faba 	bl	8002e08 <RCC_Delay>
 8002894:	e01c      	b.n	80028d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002896:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289c:	f7fe ff96 	bl	80017cc <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a2:	e00f      	b.n	80028c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a4:	f7fe ff92 	bl	80017cc <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d908      	bls.n	80028c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e146      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	42420000 	.word	0x42420000
 80028c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	4b92      	ldr	r3, [pc, #584]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e9      	bne.n	80028a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80a6 	beq.w	8002a2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	4b88      	ldr	r3, [pc, #544]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4a87      	ldr	r2, [pc, #540]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	61d3      	str	r3, [r2, #28]
 80028fa:	4b85      	ldr	r3, [pc, #532]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b82      	ldr	r3, [pc, #520]	@ (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b7f      	ldr	r3, [pc, #508]	@ (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7fe ff53 	bl	80017cc <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fe ff4f 	bl	80017cc <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b64      	cmp	r3, #100	@ 0x64
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e103      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b75      	ldr	r3, [pc, #468]	@ (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x312>
 8002950:	4b6f      	ldr	r3, [pc, #444]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a6e      	ldr	r2, [pc, #440]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	e02d      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x334>
 8002966:	4b6a      	ldr	r3, [pc, #424]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a69      	ldr	r2, [pc, #420]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6213      	str	r3, [r2, #32]
 8002972:	4b67      	ldr	r3, [pc, #412]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a66      	ldr	r2, [pc, #408]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	6213      	str	r3, [r2, #32]
 800297e:	e01c      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b05      	cmp	r3, #5
 8002986:	d10c      	bne.n	80029a2 <HAL_RCC_OscConfig+0x356>
 8002988:	4b61      	ldr	r3, [pc, #388]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a60      	ldr	r2, [pc, #384]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	4b5e      	ldr	r3, [pc, #376]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a5d      	ldr	r2, [pc, #372]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	e00b      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 80029a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a5a      	ldr	r2, [pc, #360]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	4b58      	ldr	r3, [pc, #352]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a57      	ldr	r2, [pc, #348]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f023 0304 	bic.w	r3, r3, #4
 80029b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d015      	beq.n	80029ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7fe ff03 	bl	80017cc <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fe feff 	bl	80017cc <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e0b1      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ee      	beq.n	80029ca <HAL_RCC_OscConfig+0x37e>
 80029ec:	e014      	b.n	8002a18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ee:	f7fe feed 	bl	80017cc <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe fee9 	bl	80017cc <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e09b      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0c:	4b40      	ldr	r3, [pc, #256]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ee      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a18:	7dfb      	ldrb	r3, [r7, #23]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d105      	bne.n	8002a2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4a3b      	ldr	r2, [pc, #236]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8087 	beq.w	8002b42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a34:	4b36      	ldr	r3, [pc, #216]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d061      	beq.n	8002b04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d146      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a48:	4b33      	ldr	r3, [pc, #204]	@ (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fe febd 	bl	80017cc <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a56:	f7fe feb9 	bl	80017cc <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e06d      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a68:	4b29      	ldr	r3, [pc, #164]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a7c:	d108      	bne.n	8002a90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a7e:	4b24      	ldr	r3, [pc, #144]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4921      	ldr	r1, [pc, #132]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a90:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a19      	ldr	r1, [r3, #32]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	491b      	ldr	r1, [pc, #108]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fe fe8d 	bl	80017cc <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7fe fe89 	bl	80017cc <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e03d      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac8:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x46a>
 8002ad4:	e035      	b.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe fe76 	bl	80017cc <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fe72 	bl	80017cc <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e026      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x498>
 8002b02:	e01e      	b.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e019      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40007000 	.word	0x40007000
 8002b18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b4c <HAL_RCC_OscConfig+0x500>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0d0      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b6a      	ldr	r3, [pc, #424]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d910      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b67      	ldr	r3, [pc, #412]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4965      	ldr	r1, [pc, #404]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b63      	ldr	r3, [pc, #396]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0b8      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d020      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bac:	4b59      	ldr	r3, [pc, #356]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a58      	ldr	r2, [pc, #352]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc4:	4b53      	ldr	r3, [pc, #332]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a52      	ldr	r2, [pc, #328]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002bce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd0:	4b50      	ldr	r3, [pc, #320]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	494d      	ldr	r1, [pc, #308]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d040      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d115      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e07f      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	4b41      	ldr	r3, [pc, #260]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e073      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e06b      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b39      	ldr	r3, [pc, #228]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4936      	ldr	r1, [pc, #216]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c40:	f7fe fdc4 	bl	80017cc <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7fe fdc0 	bl	80017cc <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e053      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c70:	4b27      	ldr	r3, [pc, #156]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d210      	bcs.n	8002ca0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b24      	ldr	r3, [pc, #144]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 0207 	bic.w	r2, r3, #7
 8002c86:	4922      	ldr	r1, [pc, #136]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b20      	ldr	r3, [pc, #128]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e032      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cac:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4916      	ldr	r1, [pc, #88]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cca:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	490e      	ldr	r1, [pc, #56]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cde:	f000 f821 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	490a      	ldr	r1, [pc, #40]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf0:	5ccb      	ldrb	r3, [r1, r3]
 8002cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf6:	4a09      	ldr	r2, [pc, #36]	@ (8002d1c <HAL_RCC_ClockConfig+0x1cc>)
 8002cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cfa:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <HAL_RCC_ClockConfig+0x1d0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fd22 	bl	8001748 <HAL_InitTick>

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40022000 	.word	0x40022000
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08005af0 	.word	0x08005af0
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	20000004 	.word	0x20000004

08002d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d002      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x30>
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d003      	beq.n	8002d5a <HAL_RCC_GetSysClockFreq+0x36>
 8002d52:	e027      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d54:	4b19      	ldr	r3, [pc, #100]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002d56:	613b      	str	r3, [r7, #16]
      break;
 8002d58:	e027      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	0c9b      	lsrs	r3, r3, #18
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	4a17      	ldr	r2, [pc, #92]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d64:	5cd3      	ldrb	r3, [r2, r3]
 8002d66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d010      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d72:	4b11      	ldr	r3, [pc, #68]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	0c5b      	lsrs	r3, r3, #17
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	4a11      	ldr	r2, [pc, #68]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d7e:	5cd3      	ldrb	r3, [r2, r3]
 8002d80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a0d      	ldr	r2, [pc, #52]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002d86:	fb03 f202 	mul.w	r2, r3, r2
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e004      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	613b      	str	r3, [r7, #16]
      break;
 8002da2:	e002      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002da6:	613b      	str	r3, [r7, #16]
      break;
 8002da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002daa:	693b      	ldr	r3, [r7, #16]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	371c      	adds	r7, #28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	007a1200 	.word	0x007a1200
 8002dc0:	08005b08 	.word	0x08005b08
 8002dc4:	08005b18 	.word	0x08005b18
 8002dc8:	003d0900 	.word	0x003d0900

08002dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd0:	4b02      	ldr	r3, [pc, #8]	@ (8002ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	20000000 	.word	0x20000000

08002de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de4:	f7ff fff2 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	0adb      	lsrs	r3, r3, #11
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	@ (8002e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08005b00 	.word	0x08005b00

08002e08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e10:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <RCC_Delay+0x34>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0a      	ldr	r2, [pc, #40]	@ (8002e40 <RCC_Delay+0x38>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	0a5b      	lsrs	r3, r3, #9
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e24:	bf00      	nop
  }
  while (Delay --);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1e5a      	subs	r2, r3, #1
 8002e2a:	60fa      	str	r2, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f9      	bne.n	8002e24 <RCC_Delay+0x1c>
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	10624dd3 	.word	0x10624dd3

08002e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d07d      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e60:	2300      	movs	r3, #0
 8002e62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e64:	4b4f      	ldr	r3, [pc, #316]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10d      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e70:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	4a4b      	ldr	r2, [pc, #300]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	61d3      	str	r3, [r2, #28]
 8002e7c:	4b49      	ldr	r3, [pc, #292]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8c:	4b46      	ldr	r3, [pc, #280]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d118      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e98:	4b43      	ldr	r3, [pc, #268]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a42      	ldr	r2, [pc, #264]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fc92 	bl	80017cc <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	e008      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eac:	f7fe fc8e 	bl	80017cc <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	@ 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e06d      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebe:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eca:	4b36      	ldr	r3, [pc, #216]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ed2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d02e      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d027      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002efe:	4a29      	ldr	r2, [pc, #164]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d014      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fe fc5d 	bl	80017cc <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fe fc59 	bl	80017cc <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e036      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ee      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f38:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4917      	ldr	r1, [pc, #92]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b14      	ldr	r3, [pc, #80]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	4a13      	ldr	r2, [pc, #76]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f68:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	490b      	ldr	r1, [pc, #44]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f86:	4b07      	ldr	r3, [pc, #28]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	4904      	ldr	r1, [pc, #16]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40007000 	.word	0x40007000
 8002fac:	42420440 	.word	0x42420440

08002fb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	f200 808a 	bhi.w	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d045      	beq.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d075      	beq.n	80030d2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002fe6:	e082      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002fe8:	4b46      	ldr	r3, [pc, #280]	@ (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002fee:	4b45      	ldr	r3, [pc, #276]	@ (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d07b      	beq.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	0c9b      	lsrs	r3, r3, #18
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	4a41      	ldr	r2, [pc, #260]	@ (8003108 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003004:	5cd3      	ldrb	r3, [r2, r3]
 8003006:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d015      	beq.n	800303e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003012:	4b3c      	ldr	r3, [pc, #240]	@ (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	0c5b      	lsrs	r3, r3, #17
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	4a3b      	ldr	r2, [pc, #236]	@ (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800301e:	5cd3      	ldrb	r3, [r2, r3]
 8003020:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00d      	beq.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800302c:	4a38      	ldr	r2, [pc, #224]	@ (8003110 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	fbb2 f2f3 	udiv	r2, r2, r3
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	e004      	b.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4a34      	ldr	r2, [pc, #208]	@ (8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003048:	4b2e      	ldr	r3, [pc, #184]	@ (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003050:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003054:	d102      	bne.n	800305c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	61bb      	str	r3, [r7, #24]
      break;
 800305a:	e04a      	b.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4a2d      	ldr	r2, [pc, #180]	@ (8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	61bb      	str	r3, [r7, #24]
      break;
 800306a:	e042      	b.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800306c:	4b25      	ldr	r3, [pc, #148]	@ (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800307c:	d108      	bne.n	8003090 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003088:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	e01f      	b.n	80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800309a:	d109      	bne.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800309c:	4b19      	ldr	r3, [pc, #100]	@ (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80030a8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80030ac:	61bb      	str	r3, [r7, #24]
 80030ae:	e00f      	b.n	80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030ba:	d11c      	bne.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030bc:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d016      	beq.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80030c8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80030cc:	61bb      	str	r3, [r7, #24]
      break;
 80030ce:	e012      	b.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030d0:	e011      	b.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030d2:	f7ff fe85 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 80030d6:	4602      	mov	r2, r0
 80030d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	0b9b      	lsrs	r3, r3, #14
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	3301      	adds	r3, #1
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	61bb      	str	r3, [r7, #24]
      break;
 80030ec:	e004      	b.n	80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030ee:	bf00      	nop
 80030f0:	e002      	b.n	80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030f6:	bf00      	nop
    }
  }
  return (frequency);
 80030f8:	69bb      	ldr	r3, [r7, #24]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	08005b1c 	.word	0x08005b1c
 800310c:	08005b2c 	.word	0x08005b2c
 8003110:	007a1200 	.word	0x007a1200
 8003114:	003d0900 	.word	0x003d0900
 8003118:	aaaaaaab 	.word	0xaaaaaaab

0800311c <__cvt>:
 800311c:	2b00      	cmp	r3, #0
 800311e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003122:	461d      	mov	r5, r3
 8003124:	bfbb      	ittet	lt
 8003126:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800312a:	461d      	movlt	r5, r3
 800312c:	2300      	movge	r3, #0
 800312e:	232d      	movlt	r3, #45	@ 0x2d
 8003130:	b088      	sub	sp, #32
 8003132:	4614      	mov	r4, r2
 8003134:	bfb8      	it	lt
 8003136:	4614      	movlt	r4, r2
 8003138:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800313a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800313c:	7013      	strb	r3, [r2, #0]
 800313e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003140:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003144:	f023 0820 	bic.w	r8, r3, #32
 8003148:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800314c:	d005      	beq.n	800315a <__cvt+0x3e>
 800314e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003152:	d100      	bne.n	8003156 <__cvt+0x3a>
 8003154:	3601      	adds	r6, #1
 8003156:	2302      	movs	r3, #2
 8003158:	e000      	b.n	800315c <__cvt+0x40>
 800315a:	2303      	movs	r3, #3
 800315c:	aa07      	add	r2, sp, #28
 800315e:	9204      	str	r2, [sp, #16]
 8003160:	aa06      	add	r2, sp, #24
 8003162:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003166:	e9cd 3600 	strd	r3, r6, [sp]
 800316a:	4622      	mov	r2, r4
 800316c:	462b      	mov	r3, r5
 800316e:	f000 ff1b 	bl	8003fa8 <_dtoa_r>
 8003172:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003176:	4607      	mov	r7, r0
 8003178:	d119      	bne.n	80031ae <__cvt+0x92>
 800317a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800317c:	07db      	lsls	r3, r3, #31
 800317e:	d50e      	bpl.n	800319e <__cvt+0x82>
 8003180:	eb00 0906 	add.w	r9, r0, r6
 8003184:	2200      	movs	r2, #0
 8003186:	2300      	movs	r3, #0
 8003188:	4620      	mov	r0, r4
 800318a:	4629      	mov	r1, r5
 800318c:	f7fd fc0c 	bl	80009a8 <__aeabi_dcmpeq>
 8003190:	b108      	cbz	r0, 8003196 <__cvt+0x7a>
 8003192:	f8cd 901c 	str.w	r9, [sp, #28]
 8003196:	2230      	movs	r2, #48	@ 0x30
 8003198:	9b07      	ldr	r3, [sp, #28]
 800319a:	454b      	cmp	r3, r9
 800319c:	d31e      	bcc.n	80031dc <__cvt+0xc0>
 800319e:	4638      	mov	r0, r7
 80031a0:	9b07      	ldr	r3, [sp, #28]
 80031a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80031a4:	1bdb      	subs	r3, r3, r7
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	b008      	add	sp, #32
 80031aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80031b2:	eb00 0906 	add.w	r9, r0, r6
 80031b6:	d1e5      	bne.n	8003184 <__cvt+0x68>
 80031b8:	7803      	ldrb	r3, [r0, #0]
 80031ba:	2b30      	cmp	r3, #48	@ 0x30
 80031bc:	d10a      	bne.n	80031d4 <__cvt+0xb8>
 80031be:	2200      	movs	r2, #0
 80031c0:	2300      	movs	r3, #0
 80031c2:	4620      	mov	r0, r4
 80031c4:	4629      	mov	r1, r5
 80031c6:	f7fd fbef 	bl	80009a8 <__aeabi_dcmpeq>
 80031ca:	b918      	cbnz	r0, 80031d4 <__cvt+0xb8>
 80031cc:	f1c6 0601 	rsb	r6, r6, #1
 80031d0:	f8ca 6000 	str.w	r6, [sl]
 80031d4:	f8da 3000 	ldr.w	r3, [sl]
 80031d8:	4499      	add	r9, r3
 80031da:	e7d3      	b.n	8003184 <__cvt+0x68>
 80031dc:	1c59      	adds	r1, r3, #1
 80031de:	9107      	str	r1, [sp, #28]
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e7d9      	b.n	8003198 <__cvt+0x7c>

080031e4 <__exponent>:
 80031e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031e6:	2900      	cmp	r1, #0
 80031e8:	bfb6      	itet	lt
 80031ea:	232d      	movlt	r3, #45	@ 0x2d
 80031ec:	232b      	movge	r3, #43	@ 0x2b
 80031ee:	4249      	neglt	r1, r1
 80031f0:	2909      	cmp	r1, #9
 80031f2:	7002      	strb	r2, [r0, #0]
 80031f4:	7043      	strb	r3, [r0, #1]
 80031f6:	dd29      	ble.n	800324c <__exponent+0x68>
 80031f8:	f10d 0307 	add.w	r3, sp, #7
 80031fc:	461d      	mov	r5, r3
 80031fe:	270a      	movs	r7, #10
 8003200:	fbb1 f6f7 	udiv	r6, r1, r7
 8003204:	461a      	mov	r2, r3
 8003206:	fb07 1416 	mls	r4, r7, r6, r1
 800320a:	3430      	adds	r4, #48	@ 0x30
 800320c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003210:	460c      	mov	r4, r1
 8003212:	2c63      	cmp	r4, #99	@ 0x63
 8003214:	4631      	mov	r1, r6
 8003216:	f103 33ff 	add.w	r3, r3, #4294967295
 800321a:	dcf1      	bgt.n	8003200 <__exponent+0x1c>
 800321c:	3130      	adds	r1, #48	@ 0x30
 800321e:	1e94      	subs	r4, r2, #2
 8003220:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003224:	4623      	mov	r3, r4
 8003226:	1c41      	adds	r1, r0, #1
 8003228:	42ab      	cmp	r3, r5
 800322a:	d30a      	bcc.n	8003242 <__exponent+0x5e>
 800322c:	f10d 0309 	add.w	r3, sp, #9
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	42ac      	cmp	r4, r5
 8003234:	bf88      	it	hi
 8003236:	2300      	movhi	r3, #0
 8003238:	3302      	adds	r3, #2
 800323a:	4403      	add	r3, r0
 800323c:	1a18      	subs	r0, r3, r0
 800323e:	b003      	add	sp, #12
 8003240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003242:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003246:	f801 6f01 	strb.w	r6, [r1, #1]!
 800324a:	e7ed      	b.n	8003228 <__exponent+0x44>
 800324c:	2330      	movs	r3, #48	@ 0x30
 800324e:	3130      	adds	r1, #48	@ 0x30
 8003250:	7083      	strb	r3, [r0, #2]
 8003252:	70c1      	strb	r1, [r0, #3]
 8003254:	1d03      	adds	r3, r0, #4
 8003256:	e7f1      	b.n	800323c <__exponent+0x58>

08003258 <_printf_float>:
 8003258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800325c:	b091      	sub	sp, #68	@ 0x44
 800325e:	460c      	mov	r4, r1
 8003260:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003264:	4616      	mov	r6, r2
 8003266:	461f      	mov	r7, r3
 8003268:	4605      	mov	r5, r0
 800326a:	f000 fd8f 	bl	8003d8c <_localeconv_r>
 800326e:	6803      	ldr	r3, [r0, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	9308      	str	r3, [sp, #32]
 8003274:	f7fc ff6c 	bl	8000150 <strlen>
 8003278:	2300      	movs	r3, #0
 800327a:	930e      	str	r3, [sp, #56]	@ 0x38
 800327c:	f8d8 3000 	ldr.w	r3, [r8]
 8003280:	9009      	str	r0, [sp, #36]	@ 0x24
 8003282:	3307      	adds	r3, #7
 8003284:	f023 0307 	bic.w	r3, r3, #7
 8003288:	f103 0208 	add.w	r2, r3, #8
 800328c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003290:	f8d4 b000 	ldr.w	fp, [r4]
 8003294:	f8c8 2000 	str.w	r2, [r8]
 8003298:	e9d3 8900 	ldrd	r8, r9, [r3]
 800329c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80032a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032a2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80032a6:	f04f 32ff 	mov.w	r2, #4294967295
 80032aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80032ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80032b2:	4b9c      	ldr	r3, [pc, #624]	@ (8003524 <_printf_float+0x2cc>)
 80032b4:	f7fd fbaa 	bl	8000a0c <__aeabi_dcmpun>
 80032b8:	bb70      	cbnz	r0, 8003318 <_printf_float+0xc0>
 80032ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80032be:	f04f 32ff 	mov.w	r2, #4294967295
 80032c2:	4b98      	ldr	r3, [pc, #608]	@ (8003524 <_printf_float+0x2cc>)
 80032c4:	f7fd fb84 	bl	80009d0 <__aeabi_dcmple>
 80032c8:	bb30      	cbnz	r0, 8003318 <_printf_float+0xc0>
 80032ca:	2200      	movs	r2, #0
 80032cc:	2300      	movs	r3, #0
 80032ce:	4640      	mov	r0, r8
 80032d0:	4649      	mov	r1, r9
 80032d2:	f7fd fb73 	bl	80009bc <__aeabi_dcmplt>
 80032d6:	b110      	cbz	r0, 80032de <_printf_float+0x86>
 80032d8:	232d      	movs	r3, #45	@ 0x2d
 80032da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032de:	4a92      	ldr	r2, [pc, #584]	@ (8003528 <_printf_float+0x2d0>)
 80032e0:	4b92      	ldr	r3, [pc, #584]	@ (800352c <_printf_float+0x2d4>)
 80032e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80032e6:	bf94      	ite	ls
 80032e8:	4690      	movls	r8, r2
 80032ea:	4698      	movhi	r8, r3
 80032ec:	2303      	movs	r3, #3
 80032ee:	f04f 0900 	mov.w	r9, #0
 80032f2:	6123      	str	r3, [r4, #16]
 80032f4:	f02b 0304 	bic.w	r3, fp, #4
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	4633      	mov	r3, r6
 80032fc:	4621      	mov	r1, r4
 80032fe:	4628      	mov	r0, r5
 8003300:	9700      	str	r7, [sp, #0]
 8003302:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003304:	f000 f9d4 	bl	80036b0 <_printf_common>
 8003308:	3001      	adds	r0, #1
 800330a:	f040 8090 	bne.w	800342e <_printf_float+0x1d6>
 800330e:	f04f 30ff 	mov.w	r0, #4294967295
 8003312:	b011      	add	sp, #68	@ 0x44
 8003314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003318:	4642      	mov	r2, r8
 800331a:	464b      	mov	r3, r9
 800331c:	4640      	mov	r0, r8
 800331e:	4649      	mov	r1, r9
 8003320:	f7fd fb74 	bl	8000a0c <__aeabi_dcmpun>
 8003324:	b148      	cbz	r0, 800333a <_printf_float+0xe2>
 8003326:	464b      	mov	r3, r9
 8003328:	2b00      	cmp	r3, #0
 800332a:	bfb8      	it	lt
 800332c:	232d      	movlt	r3, #45	@ 0x2d
 800332e:	4a80      	ldr	r2, [pc, #512]	@ (8003530 <_printf_float+0x2d8>)
 8003330:	bfb8      	it	lt
 8003332:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003336:	4b7f      	ldr	r3, [pc, #508]	@ (8003534 <_printf_float+0x2dc>)
 8003338:	e7d3      	b.n	80032e2 <_printf_float+0x8a>
 800333a:	6863      	ldr	r3, [r4, #4]
 800333c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	d13f      	bne.n	80033c4 <_printf_float+0x16c>
 8003344:	2306      	movs	r3, #6
 8003346:	6063      	str	r3, [r4, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800334e:	6023      	str	r3, [r4, #0]
 8003350:	9206      	str	r2, [sp, #24]
 8003352:	aa0e      	add	r2, sp, #56	@ 0x38
 8003354:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003358:	aa0d      	add	r2, sp, #52	@ 0x34
 800335a:	9203      	str	r2, [sp, #12]
 800335c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003360:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003364:	6863      	ldr	r3, [r4, #4]
 8003366:	4642      	mov	r2, r8
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	4628      	mov	r0, r5
 800336c:	464b      	mov	r3, r9
 800336e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003370:	f7ff fed4 	bl	800311c <__cvt>
 8003374:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003376:	4680      	mov	r8, r0
 8003378:	2947      	cmp	r1, #71	@ 0x47
 800337a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800337c:	d128      	bne.n	80033d0 <_printf_float+0x178>
 800337e:	1cc8      	adds	r0, r1, #3
 8003380:	db02      	blt.n	8003388 <_printf_float+0x130>
 8003382:	6863      	ldr	r3, [r4, #4]
 8003384:	4299      	cmp	r1, r3
 8003386:	dd40      	ble.n	800340a <_printf_float+0x1b2>
 8003388:	f1aa 0a02 	sub.w	sl, sl, #2
 800338c:	fa5f fa8a 	uxtb.w	sl, sl
 8003390:	4652      	mov	r2, sl
 8003392:	3901      	subs	r1, #1
 8003394:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003398:	910d      	str	r1, [sp, #52]	@ 0x34
 800339a:	f7ff ff23 	bl	80031e4 <__exponent>
 800339e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80033a0:	4681      	mov	r9, r0
 80033a2:	1813      	adds	r3, r2, r0
 80033a4:	2a01      	cmp	r2, #1
 80033a6:	6123      	str	r3, [r4, #16]
 80033a8:	dc02      	bgt.n	80033b0 <_printf_float+0x158>
 80033aa:	6822      	ldr	r2, [r4, #0]
 80033ac:	07d2      	lsls	r2, r2, #31
 80033ae:	d501      	bpl.n	80033b4 <_printf_float+0x15c>
 80033b0:	3301      	adds	r3, #1
 80033b2:	6123      	str	r3, [r4, #16]
 80033b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d09e      	beq.n	80032fa <_printf_float+0xa2>
 80033bc:	232d      	movs	r3, #45	@ 0x2d
 80033be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033c2:	e79a      	b.n	80032fa <_printf_float+0xa2>
 80033c4:	2947      	cmp	r1, #71	@ 0x47
 80033c6:	d1bf      	bne.n	8003348 <_printf_float+0xf0>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1bd      	bne.n	8003348 <_printf_float+0xf0>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e7ba      	b.n	8003346 <_printf_float+0xee>
 80033d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80033d4:	d9dc      	bls.n	8003390 <_printf_float+0x138>
 80033d6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80033da:	d118      	bne.n	800340e <_printf_float+0x1b6>
 80033dc:	2900      	cmp	r1, #0
 80033de:	6863      	ldr	r3, [r4, #4]
 80033e0:	dd0b      	ble.n	80033fa <_printf_float+0x1a2>
 80033e2:	6121      	str	r1, [r4, #16]
 80033e4:	b913      	cbnz	r3, 80033ec <_printf_float+0x194>
 80033e6:	6822      	ldr	r2, [r4, #0]
 80033e8:	07d0      	lsls	r0, r2, #31
 80033ea:	d502      	bpl.n	80033f2 <_printf_float+0x19a>
 80033ec:	3301      	adds	r3, #1
 80033ee:	440b      	add	r3, r1
 80033f0:	6123      	str	r3, [r4, #16]
 80033f2:	f04f 0900 	mov.w	r9, #0
 80033f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80033f8:	e7dc      	b.n	80033b4 <_printf_float+0x15c>
 80033fa:	b913      	cbnz	r3, 8003402 <_printf_float+0x1aa>
 80033fc:	6822      	ldr	r2, [r4, #0]
 80033fe:	07d2      	lsls	r2, r2, #31
 8003400:	d501      	bpl.n	8003406 <_printf_float+0x1ae>
 8003402:	3302      	adds	r3, #2
 8003404:	e7f4      	b.n	80033f0 <_printf_float+0x198>
 8003406:	2301      	movs	r3, #1
 8003408:	e7f2      	b.n	80033f0 <_printf_float+0x198>
 800340a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800340e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003410:	4299      	cmp	r1, r3
 8003412:	db05      	blt.n	8003420 <_printf_float+0x1c8>
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	6121      	str	r1, [r4, #16]
 8003418:	07d8      	lsls	r0, r3, #31
 800341a:	d5ea      	bpl.n	80033f2 <_printf_float+0x19a>
 800341c:	1c4b      	adds	r3, r1, #1
 800341e:	e7e7      	b.n	80033f0 <_printf_float+0x198>
 8003420:	2900      	cmp	r1, #0
 8003422:	bfcc      	ite	gt
 8003424:	2201      	movgt	r2, #1
 8003426:	f1c1 0202 	rsble	r2, r1, #2
 800342a:	4413      	add	r3, r2
 800342c:	e7e0      	b.n	80033f0 <_printf_float+0x198>
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	055a      	lsls	r2, r3, #21
 8003432:	d407      	bmi.n	8003444 <_printf_float+0x1ec>
 8003434:	6923      	ldr	r3, [r4, #16]
 8003436:	4642      	mov	r2, r8
 8003438:	4631      	mov	r1, r6
 800343a:	4628      	mov	r0, r5
 800343c:	47b8      	blx	r7
 800343e:	3001      	adds	r0, #1
 8003440:	d12b      	bne.n	800349a <_printf_float+0x242>
 8003442:	e764      	b.n	800330e <_printf_float+0xb6>
 8003444:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003448:	f240 80dc 	bls.w	8003604 <_printf_float+0x3ac>
 800344c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003450:	2200      	movs	r2, #0
 8003452:	2300      	movs	r3, #0
 8003454:	f7fd faa8 	bl	80009a8 <__aeabi_dcmpeq>
 8003458:	2800      	cmp	r0, #0
 800345a:	d033      	beq.n	80034c4 <_printf_float+0x26c>
 800345c:	2301      	movs	r3, #1
 800345e:	4631      	mov	r1, r6
 8003460:	4628      	mov	r0, r5
 8003462:	4a35      	ldr	r2, [pc, #212]	@ (8003538 <_printf_float+0x2e0>)
 8003464:	47b8      	blx	r7
 8003466:	3001      	adds	r0, #1
 8003468:	f43f af51 	beq.w	800330e <_printf_float+0xb6>
 800346c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003470:	4543      	cmp	r3, r8
 8003472:	db02      	blt.n	800347a <_printf_float+0x222>
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	07d8      	lsls	r0, r3, #31
 8003478:	d50f      	bpl.n	800349a <_printf_float+0x242>
 800347a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800347e:	4631      	mov	r1, r6
 8003480:	4628      	mov	r0, r5
 8003482:	47b8      	blx	r7
 8003484:	3001      	adds	r0, #1
 8003486:	f43f af42 	beq.w	800330e <_printf_float+0xb6>
 800348a:	f04f 0900 	mov.w	r9, #0
 800348e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003492:	f104 0a1a 	add.w	sl, r4, #26
 8003496:	45c8      	cmp	r8, r9
 8003498:	dc09      	bgt.n	80034ae <_printf_float+0x256>
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	079b      	lsls	r3, r3, #30
 800349e:	f100 8102 	bmi.w	80036a6 <_printf_float+0x44e>
 80034a2:	68e0      	ldr	r0, [r4, #12]
 80034a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80034a6:	4298      	cmp	r0, r3
 80034a8:	bfb8      	it	lt
 80034aa:	4618      	movlt	r0, r3
 80034ac:	e731      	b.n	8003312 <_printf_float+0xba>
 80034ae:	2301      	movs	r3, #1
 80034b0:	4652      	mov	r2, sl
 80034b2:	4631      	mov	r1, r6
 80034b4:	4628      	mov	r0, r5
 80034b6:	47b8      	blx	r7
 80034b8:	3001      	adds	r0, #1
 80034ba:	f43f af28 	beq.w	800330e <_printf_float+0xb6>
 80034be:	f109 0901 	add.w	r9, r9, #1
 80034c2:	e7e8      	b.n	8003496 <_printf_float+0x23e>
 80034c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	dc38      	bgt.n	800353c <_printf_float+0x2e4>
 80034ca:	2301      	movs	r3, #1
 80034cc:	4631      	mov	r1, r6
 80034ce:	4628      	mov	r0, r5
 80034d0:	4a19      	ldr	r2, [pc, #100]	@ (8003538 <_printf_float+0x2e0>)
 80034d2:	47b8      	blx	r7
 80034d4:	3001      	adds	r0, #1
 80034d6:	f43f af1a 	beq.w	800330e <_printf_float+0xb6>
 80034da:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80034de:	ea59 0303 	orrs.w	r3, r9, r3
 80034e2:	d102      	bne.n	80034ea <_printf_float+0x292>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	07d9      	lsls	r1, r3, #31
 80034e8:	d5d7      	bpl.n	800349a <_printf_float+0x242>
 80034ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80034ee:	4631      	mov	r1, r6
 80034f0:	4628      	mov	r0, r5
 80034f2:	47b8      	blx	r7
 80034f4:	3001      	adds	r0, #1
 80034f6:	f43f af0a 	beq.w	800330e <_printf_float+0xb6>
 80034fa:	f04f 0a00 	mov.w	sl, #0
 80034fe:	f104 0b1a 	add.w	fp, r4, #26
 8003502:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003504:	425b      	negs	r3, r3
 8003506:	4553      	cmp	r3, sl
 8003508:	dc01      	bgt.n	800350e <_printf_float+0x2b6>
 800350a:	464b      	mov	r3, r9
 800350c:	e793      	b.n	8003436 <_printf_float+0x1de>
 800350e:	2301      	movs	r3, #1
 8003510:	465a      	mov	r2, fp
 8003512:	4631      	mov	r1, r6
 8003514:	4628      	mov	r0, r5
 8003516:	47b8      	blx	r7
 8003518:	3001      	adds	r0, #1
 800351a:	f43f aef8 	beq.w	800330e <_printf_float+0xb6>
 800351e:	f10a 0a01 	add.w	sl, sl, #1
 8003522:	e7ee      	b.n	8003502 <_printf_float+0x2aa>
 8003524:	7fefffff 	.word	0x7fefffff
 8003528:	08005b2e 	.word	0x08005b2e
 800352c:	08005b32 	.word	0x08005b32
 8003530:	08005b36 	.word	0x08005b36
 8003534:	08005b3a 	.word	0x08005b3a
 8003538:	08005b3e 	.word	0x08005b3e
 800353c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800353e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003542:	4553      	cmp	r3, sl
 8003544:	bfa8      	it	ge
 8003546:	4653      	movge	r3, sl
 8003548:	2b00      	cmp	r3, #0
 800354a:	4699      	mov	r9, r3
 800354c:	dc36      	bgt.n	80035bc <_printf_float+0x364>
 800354e:	f04f 0b00 	mov.w	fp, #0
 8003552:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003556:	f104 021a 	add.w	r2, r4, #26
 800355a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800355c:	930a      	str	r3, [sp, #40]	@ 0x28
 800355e:	eba3 0309 	sub.w	r3, r3, r9
 8003562:	455b      	cmp	r3, fp
 8003564:	dc31      	bgt.n	80035ca <_printf_float+0x372>
 8003566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003568:	459a      	cmp	sl, r3
 800356a:	dc3a      	bgt.n	80035e2 <_printf_float+0x38a>
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	07da      	lsls	r2, r3, #31
 8003570:	d437      	bmi.n	80035e2 <_printf_float+0x38a>
 8003572:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003574:	ebaa 0903 	sub.w	r9, sl, r3
 8003578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800357a:	ebaa 0303 	sub.w	r3, sl, r3
 800357e:	4599      	cmp	r9, r3
 8003580:	bfa8      	it	ge
 8003582:	4699      	movge	r9, r3
 8003584:	f1b9 0f00 	cmp.w	r9, #0
 8003588:	dc33      	bgt.n	80035f2 <_printf_float+0x39a>
 800358a:	f04f 0800 	mov.w	r8, #0
 800358e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003592:	f104 0b1a 	add.w	fp, r4, #26
 8003596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003598:	ebaa 0303 	sub.w	r3, sl, r3
 800359c:	eba3 0309 	sub.w	r3, r3, r9
 80035a0:	4543      	cmp	r3, r8
 80035a2:	f77f af7a 	ble.w	800349a <_printf_float+0x242>
 80035a6:	2301      	movs	r3, #1
 80035a8:	465a      	mov	r2, fp
 80035aa:	4631      	mov	r1, r6
 80035ac:	4628      	mov	r0, r5
 80035ae:	47b8      	blx	r7
 80035b0:	3001      	adds	r0, #1
 80035b2:	f43f aeac 	beq.w	800330e <_printf_float+0xb6>
 80035b6:	f108 0801 	add.w	r8, r8, #1
 80035ba:	e7ec      	b.n	8003596 <_printf_float+0x33e>
 80035bc:	4642      	mov	r2, r8
 80035be:	4631      	mov	r1, r6
 80035c0:	4628      	mov	r0, r5
 80035c2:	47b8      	blx	r7
 80035c4:	3001      	adds	r0, #1
 80035c6:	d1c2      	bne.n	800354e <_printf_float+0x2f6>
 80035c8:	e6a1      	b.n	800330e <_printf_float+0xb6>
 80035ca:	2301      	movs	r3, #1
 80035cc:	4631      	mov	r1, r6
 80035ce:	4628      	mov	r0, r5
 80035d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80035d2:	47b8      	blx	r7
 80035d4:	3001      	adds	r0, #1
 80035d6:	f43f ae9a 	beq.w	800330e <_printf_float+0xb6>
 80035da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80035dc:	f10b 0b01 	add.w	fp, fp, #1
 80035e0:	e7bb      	b.n	800355a <_printf_float+0x302>
 80035e2:	4631      	mov	r1, r6
 80035e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035e8:	4628      	mov	r0, r5
 80035ea:	47b8      	blx	r7
 80035ec:	3001      	adds	r0, #1
 80035ee:	d1c0      	bne.n	8003572 <_printf_float+0x31a>
 80035f0:	e68d      	b.n	800330e <_printf_float+0xb6>
 80035f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80035f4:	464b      	mov	r3, r9
 80035f6:	4631      	mov	r1, r6
 80035f8:	4628      	mov	r0, r5
 80035fa:	4442      	add	r2, r8
 80035fc:	47b8      	blx	r7
 80035fe:	3001      	adds	r0, #1
 8003600:	d1c3      	bne.n	800358a <_printf_float+0x332>
 8003602:	e684      	b.n	800330e <_printf_float+0xb6>
 8003604:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003608:	f1ba 0f01 	cmp.w	sl, #1
 800360c:	dc01      	bgt.n	8003612 <_printf_float+0x3ba>
 800360e:	07db      	lsls	r3, r3, #31
 8003610:	d536      	bpl.n	8003680 <_printf_float+0x428>
 8003612:	2301      	movs	r3, #1
 8003614:	4642      	mov	r2, r8
 8003616:	4631      	mov	r1, r6
 8003618:	4628      	mov	r0, r5
 800361a:	47b8      	blx	r7
 800361c:	3001      	adds	r0, #1
 800361e:	f43f ae76 	beq.w	800330e <_printf_float+0xb6>
 8003622:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003626:	4631      	mov	r1, r6
 8003628:	4628      	mov	r0, r5
 800362a:	47b8      	blx	r7
 800362c:	3001      	adds	r0, #1
 800362e:	f43f ae6e 	beq.w	800330e <_printf_float+0xb6>
 8003632:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003636:	2200      	movs	r2, #0
 8003638:	2300      	movs	r3, #0
 800363a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800363e:	f7fd f9b3 	bl	80009a8 <__aeabi_dcmpeq>
 8003642:	b9c0      	cbnz	r0, 8003676 <_printf_float+0x41e>
 8003644:	4653      	mov	r3, sl
 8003646:	f108 0201 	add.w	r2, r8, #1
 800364a:	4631      	mov	r1, r6
 800364c:	4628      	mov	r0, r5
 800364e:	47b8      	blx	r7
 8003650:	3001      	adds	r0, #1
 8003652:	d10c      	bne.n	800366e <_printf_float+0x416>
 8003654:	e65b      	b.n	800330e <_printf_float+0xb6>
 8003656:	2301      	movs	r3, #1
 8003658:	465a      	mov	r2, fp
 800365a:	4631      	mov	r1, r6
 800365c:	4628      	mov	r0, r5
 800365e:	47b8      	blx	r7
 8003660:	3001      	adds	r0, #1
 8003662:	f43f ae54 	beq.w	800330e <_printf_float+0xb6>
 8003666:	f108 0801 	add.w	r8, r8, #1
 800366a:	45d0      	cmp	r8, sl
 800366c:	dbf3      	blt.n	8003656 <_printf_float+0x3fe>
 800366e:	464b      	mov	r3, r9
 8003670:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003674:	e6e0      	b.n	8003438 <_printf_float+0x1e0>
 8003676:	f04f 0800 	mov.w	r8, #0
 800367a:	f104 0b1a 	add.w	fp, r4, #26
 800367e:	e7f4      	b.n	800366a <_printf_float+0x412>
 8003680:	2301      	movs	r3, #1
 8003682:	4642      	mov	r2, r8
 8003684:	e7e1      	b.n	800364a <_printf_float+0x3f2>
 8003686:	2301      	movs	r3, #1
 8003688:	464a      	mov	r2, r9
 800368a:	4631      	mov	r1, r6
 800368c:	4628      	mov	r0, r5
 800368e:	47b8      	blx	r7
 8003690:	3001      	adds	r0, #1
 8003692:	f43f ae3c 	beq.w	800330e <_printf_float+0xb6>
 8003696:	f108 0801 	add.w	r8, r8, #1
 800369a:	68e3      	ldr	r3, [r4, #12]
 800369c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800369e:	1a5b      	subs	r3, r3, r1
 80036a0:	4543      	cmp	r3, r8
 80036a2:	dcf0      	bgt.n	8003686 <_printf_float+0x42e>
 80036a4:	e6fd      	b.n	80034a2 <_printf_float+0x24a>
 80036a6:	f04f 0800 	mov.w	r8, #0
 80036aa:	f104 0919 	add.w	r9, r4, #25
 80036ae:	e7f4      	b.n	800369a <_printf_float+0x442>

080036b0 <_printf_common>:
 80036b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b4:	4616      	mov	r6, r2
 80036b6:	4698      	mov	r8, r3
 80036b8:	688a      	ldr	r2, [r1, #8]
 80036ba:	690b      	ldr	r3, [r1, #16]
 80036bc:	4607      	mov	r7, r0
 80036be:	4293      	cmp	r3, r2
 80036c0:	bfb8      	it	lt
 80036c2:	4613      	movlt	r3, r2
 80036c4:	6033      	str	r3, [r6, #0]
 80036c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036ca:	460c      	mov	r4, r1
 80036cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036d0:	b10a      	cbz	r2, 80036d6 <_printf_common+0x26>
 80036d2:	3301      	adds	r3, #1
 80036d4:	6033      	str	r3, [r6, #0]
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	0699      	lsls	r1, r3, #26
 80036da:	bf42      	ittt	mi
 80036dc:	6833      	ldrmi	r3, [r6, #0]
 80036de:	3302      	addmi	r3, #2
 80036e0:	6033      	strmi	r3, [r6, #0]
 80036e2:	6825      	ldr	r5, [r4, #0]
 80036e4:	f015 0506 	ands.w	r5, r5, #6
 80036e8:	d106      	bne.n	80036f8 <_printf_common+0x48>
 80036ea:	f104 0a19 	add.w	sl, r4, #25
 80036ee:	68e3      	ldr	r3, [r4, #12]
 80036f0:	6832      	ldr	r2, [r6, #0]
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	dc2b      	bgt.n	8003750 <_printf_common+0xa0>
 80036f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036fc:	6822      	ldr	r2, [r4, #0]
 80036fe:	3b00      	subs	r3, #0
 8003700:	bf18      	it	ne
 8003702:	2301      	movne	r3, #1
 8003704:	0692      	lsls	r2, r2, #26
 8003706:	d430      	bmi.n	800376a <_printf_common+0xba>
 8003708:	4641      	mov	r1, r8
 800370a:	4638      	mov	r0, r7
 800370c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003710:	47c8      	blx	r9
 8003712:	3001      	adds	r0, #1
 8003714:	d023      	beq.n	800375e <_printf_common+0xae>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	6922      	ldr	r2, [r4, #16]
 800371a:	f003 0306 	and.w	r3, r3, #6
 800371e:	2b04      	cmp	r3, #4
 8003720:	bf14      	ite	ne
 8003722:	2500      	movne	r5, #0
 8003724:	6833      	ldreq	r3, [r6, #0]
 8003726:	f04f 0600 	mov.w	r6, #0
 800372a:	bf08      	it	eq
 800372c:	68e5      	ldreq	r5, [r4, #12]
 800372e:	f104 041a 	add.w	r4, r4, #26
 8003732:	bf08      	it	eq
 8003734:	1aed      	subeq	r5, r5, r3
 8003736:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800373a:	bf08      	it	eq
 800373c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003740:	4293      	cmp	r3, r2
 8003742:	bfc4      	itt	gt
 8003744:	1a9b      	subgt	r3, r3, r2
 8003746:	18ed      	addgt	r5, r5, r3
 8003748:	42b5      	cmp	r5, r6
 800374a:	d11a      	bne.n	8003782 <_printf_common+0xd2>
 800374c:	2000      	movs	r0, #0
 800374e:	e008      	b.n	8003762 <_printf_common+0xb2>
 8003750:	2301      	movs	r3, #1
 8003752:	4652      	mov	r2, sl
 8003754:	4641      	mov	r1, r8
 8003756:	4638      	mov	r0, r7
 8003758:	47c8      	blx	r9
 800375a:	3001      	adds	r0, #1
 800375c:	d103      	bne.n	8003766 <_printf_common+0xb6>
 800375e:	f04f 30ff 	mov.w	r0, #4294967295
 8003762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003766:	3501      	adds	r5, #1
 8003768:	e7c1      	b.n	80036ee <_printf_common+0x3e>
 800376a:	2030      	movs	r0, #48	@ 0x30
 800376c:	18e1      	adds	r1, r4, r3
 800376e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003778:	4422      	add	r2, r4
 800377a:	3302      	adds	r3, #2
 800377c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003780:	e7c2      	b.n	8003708 <_printf_common+0x58>
 8003782:	2301      	movs	r3, #1
 8003784:	4622      	mov	r2, r4
 8003786:	4641      	mov	r1, r8
 8003788:	4638      	mov	r0, r7
 800378a:	47c8      	blx	r9
 800378c:	3001      	adds	r0, #1
 800378e:	d0e6      	beq.n	800375e <_printf_common+0xae>
 8003790:	3601      	adds	r6, #1
 8003792:	e7d9      	b.n	8003748 <_printf_common+0x98>

08003794 <_printf_i>:
 8003794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003798:	7e0f      	ldrb	r7, [r1, #24]
 800379a:	4691      	mov	r9, r2
 800379c:	2f78      	cmp	r7, #120	@ 0x78
 800379e:	4680      	mov	r8, r0
 80037a0:	460c      	mov	r4, r1
 80037a2:	469a      	mov	sl, r3
 80037a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037aa:	d807      	bhi.n	80037bc <_printf_i+0x28>
 80037ac:	2f62      	cmp	r7, #98	@ 0x62
 80037ae:	d80a      	bhi.n	80037c6 <_printf_i+0x32>
 80037b0:	2f00      	cmp	r7, #0
 80037b2:	f000 80d3 	beq.w	800395c <_printf_i+0x1c8>
 80037b6:	2f58      	cmp	r7, #88	@ 0x58
 80037b8:	f000 80ba 	beq.w	8003930 <_printf_i+0x19c>
 80037bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037c4:	e03a      	b.n	800383c <_printf_i+0xa8>
 80037c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037ca:	2b15      	cmp	r3, #21
 80037cc:	d8f6      	bhi.n	80037bc <_printf_i+0x28>
 80037ce:	a101      	add	r1, pc, #4	@ (adr r1, 80037d4 <_printf_i+0x40>)
 80037d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037d4:	0800382d 	.word	0x0800382d
 80037d8:	08003841 	.word	0x08003841
 80037dc:	080037bd 	.word	0x080037bd
 80037e0:	080037bd 	.word	0x080037bd
 80037e4:	080037bd 	.word	0x080037bd
 80037e8:	080037bd 	.word	0x080037bd
 80037ec:	08003841 	.word	0x08003841
 80037f0:	080037bd 	.word	0x080037bd
 80037f4:	080037bd 	.word	0x080037bd
 80037f8:	080037bd 	.word	0x080037bd
 80037fc:	080037bd 	.word	0x080037bd
 8003800:	08003943 	.word	0x08003943
 8003804:	0800386b 	.word	0x0800386b
 8003808:	080038fd 	.word	0x080038fd
 800380c:	080037bd 	.word	0x080037bd
 8003810:	080037bd 	.word	0x080037bd
 8003814:	08003965 	.word	0x08003965
 8003818:	080037bd 	.word	0x080037bd
 800381c:	0800386b 	.word	0x0800386b
 8003820:	080037bd 	.word	0x080037bd
 8003824:	080037bd 	.word	0x080037bd
 8003828:	08003905 	.word	0x08003905
 800382c:	6833      	ldr	r3, [r6, #0]
 800382e:	1d1a      	adds	r2, r3, #4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6032      	str	r2, [r6, #0]
 8003834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800383c:	2301      	movs	r3, #1
 800383e:	e09e      	b.n	800397e <_printf_i+0x1ea>
 8003840:	6833      	ldr	r3, [r6, #0]
 8003842:	6820      	ldr	r0, [r4, #0]
 8003844:	1d19      	adds	r1, r3, #4
 8003846:	6031      	str	r1, [r6, #0]
 8003848:	0606      	lsls	r6, r0, #24
 800384a:	d501      	bpl.n	8003850 <_printf_i+0xbc>
 800384c:	681d      	ldr	r5, [r3, #0]
 800384e:	e003      	b.n	8003858 <_printf_i+0xc4>
 8003850:	0645      	lsls	r5, r0, #25
 8003852:	d5fb      	bpl.n	800384c <_printf_i+0xb8>
 8003854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003858:	2d00      	cmp	r5, #0
 800385a:	da03      	bge.n	8003864 <_printf_i+0xd0>
 800385c:	232d      	movs	r3, #45	@ 0x2d
 800385e:	426d      	negs	r5, r5
 8003860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003864:	230a      	movs	r3, #10
 8003866:	4859      	ldr	r0, [pc, #356]	@ (80039cc <_printf_i+0x238>)
 8003868:	e011      	b.n	800388e <_printf_i+0xfa>
 800386a:	6821      	ldr	r1, [r4, #0]
 800386c:	6833      	ldr	r3, [r6, #0]
 800386e:	0608      	lsls	r0, r1, #24
 8003870:	f853 5b04 	ldr.w	r5, [r3], #4
 8003874:	d402      	bmi.n	800387c <_printf_i+0xe8>
 8003876:	0649      	lsls	r1, r1, #25
 8003878:	bf48      	it	mi
 800387a:	b2ad      	uxthmi	r5, r5
 800387c:	2f6f      	cmp	r7, #111	@ 0x6f
 800387e:	6033      	str	r3, [r6, #0]
 8003880:	bf14      	ite	ne
 8003882:	230a      	movne	r3, #10
 8003884:	2308      	moveq	r3, #8
 8003886:	4851      	ldr	r0, [pc, #324]	@ (80039cc <_printf_i+0x238>)
 8003888:	2100      	movs	r1, #0
 800388a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800388e:	6866      	ldr	r6, [r4, #4]
 8003890:	2e00      	cmp	r6, #0
 8003892:	bfa8      	it	ge
 8003894:	6821      	ldrge	r1, [r4, #0]
 8003896:	60a6      	str	r6, [r4, #8]
 8003898:	bfa4      	itt	ge
 800389a:	f021 0104 	bicge.w	r1, r1, #4
 800389e:	6021      	strge	r1, [r4, #0]
 80038a0:	b90d      	cbnz	r5, 80038a6 <_printf_i+0x112>
 80038a2:	2e00      	cmp	r6, #0
 80038a4:	d04b      	beq.n	800393e <_printf_i+0x1aa>
 80038a6:	4616      	mov	r6, r2
 80038a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80038ac:	fb03 5711 	mls	r7, r3, r1, r5
 80038b0:	5dc7      	ldrb	r7, [r0, r7]
 80038b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038b6:	462f      	mov	r7, r5
 80038b8:	42bb      	cmp	r3, r7
 80038ba:	460d      	mov	r5, r1
 80038bc:	d9f4      	bls.n	80038a8 <_printf_i+0x114>
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d10b      	bne.n	80038da <_printf_i+0x146>
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	07df      	lsls	r7, r3, #31
 80038c6:	d508      	bpl.n	80038da <_printf_i+0x146>
 80038c8:	6923      	ldr	r3, [r4, #16]
 80038ca:	6861      	ldr	r1, [r4, #4]
 80038cc:	4299      	cmp	r1, r3
 80038ce:	bfde      	ittt	le
 80038d0:	2330      	movle	r3, #48	@ 0x30
 80038d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038da:	1b92      	subs	r2, r2, r6
 80038dc:	6122      	str	r2, [r4, #16]
 80038de:	464b      	mov	r3, r9
 80038e0:	4621      	mov	r1, r4
 80038e2:	4640      	mov	r0, r8
 80038e4:	f8cd a000 	str.w	sl, [sp]
 80038e8:	aa03      	add	r2, sp, #12
 80038ea:	f7ff fee1 	bl	80036b0 <_printf_common>
 80038ee:	3001      	adds	r0, #1
 80038f0:	d14a      	bne.n	8003988 <_printf_i+0x1f4>
 80038f2:	f04f 30ff 	mov.w	r0, #4294967295
 80038f6:	b004      	add	sp, #16
 80038f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	f043 0320 	orr.w	r3, r3, #32
 8003902:	6023      	str	r3, [r4, #0]
 8003904:	2778      	movs	r7, #120	@ 0x78
 8003906:	4832      	ldr	r0, [pc, #200]	@ (80039d0 <_printf_i+0x23c>)
 8003908:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	6831      	ldr	r1, [r6, #0]
 8003910:	061f      	lsls	r7, r3, #24
 8003912:	f851 5b04 	ldr.w	r5, [r1], #4
 8003916:	d402      	bmi.n	800391e <_printf_i+0x18a>
 8003918:	065f      	lsls	r7, r3, #25
 800391a:	bf48      	it	mi
 800391c:	b2ad      	uxthmi	r5, r5
 800391e:	6031      	str	r1, [r6, #0]
 8003920:	07d9      	lsls	r1, r3, #31
 8003922:	bf44      	itt	mi
 8003924:	f043 0320 	orrmi.w	r3, r3, #32
 8003928:	6023      	strmi	r3, [r4, #0]
 800392a:	b11d      	cbz	r5, 8003934 <_printf_i+0x1a0>
 800392c:	2310      	movs	r3, #16
 800392e:	e7ab      	b.n	8003888 <_printf_i+0xf4>
 8003930:	4826      	ldr	r0, [pc, #152]	@ (80039cc <_printf_i+0x238>)
 8003932:	e7e9      	b.n	8003908 <_printf_i+0x174>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	f023 0320 	bic.w	r3, r3, #32
 800393a:	6023      	str	r3, [r4, #0]
 800393c:	e7f6      	b.n	800392c <_printf_i+0x198>
 800393e:	4616      	mov	r6, r2
 8003940:	e7bd      	b.n	80038be <_printf_i+0x12a>
 8003942:	6833      	ldr	r3, [r6, #0]
 8003944:	6825      	ldr	r5, [r4, #0]
 8003946:	1d18      	adds	r0, r3, #4
 8003948:	6961      	ldr	r1, [r4, #20]
 800394a:	6030      	str	r0, [r6, #0]
 800394c:	062e      	lsls	r6, r5, #24
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	d501      	bpl.n	8003956 <_printf_i+0x1c2>
 8003952:	6019      	str	r1, [r3, #0]
 8003954:	e002      	b.n	800395c <_printf_i+0x1c8>
 8003956:	0668      	lsls	r0, r5, #25
 8003958:	d5fb      	bpl.n	8003952 <_printf_i+0x1be>
 800395a:	8019      	strh	r1, [r3, #0]
 800395c:	2300      	movs	r3, #0
 800395e:	4616      	mov	r6, r2
 8003960:	6123      	str	r3, [r4, #16]
 8003962:	e7bc      	b.n	80038de <_printf_i+0x14a>
 8003964:	6833      	ldr	r3, [r6, #0]
 8003966:	2100      	movs	r1, #0
 8003968:	1d1a      	adds	r2, r3, #4
 800396a:	6032      	str	r2, [r6, #0]
 800396c:	681e      	ldr	r6, [r3, #0]
 800396e:	6862      	ldr	r2, [r4, #4]
 8003970:	4630      	mov	r0, r6
 8003972:	f000 fa82 	bl	8003e7a <memchr>
 8003976:	b108      	cbz	r0, 800397c <_printf_i+0x1e8>
 8003978:	1b80      	subs	r0, r0, r6
 800397a:	6060      	str	r0, [r4, #4]
 800397c:	6863      	ldr	r3, [r4, #4]
 800397e:	6123      	str	r3, [r4, #16]
 8003980:	2300      	movs	r3, #0
 8003982:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003986:	e7aa      	b.n	80038de <_printf_i+0x14a>
 8003988:	4632      	mov	r2, r6
 800398a:	4649      	mov	r1, r9
 800398c:	4640      	mov	r0, r8
 800398e:	6923      	ldr	r3, [r4, #16]
 8003990:	47d0      	blx	sl
 8003992:	3001      	adds	r0, #1
 8003994:	d0ad      	beq.n	80038f2 <_printf_i+0x15e>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	079b      	lsls	r3, r3, #30
 800399a:	d413      	bmi.n	80039c4 <_printf_i+0x230>
 800399c:	68e0      	ldr	r0, [r4, #12]
 800399e:	9b03      	ldr	r3, [sp, #12]
 80039a0:	4298      	cmp	r0, r3
 80039a2:	bfb8      	it	lt
 80039a4:	4618      	movlt	r0, r3
 80039a6:	e7a6      	b.n	80038f6 <_printf_i+0x162>
 80039a8:	2301      	movs	r3, #1
 80039aa:	4632      	mov	r2, r6
 80039ac:	4649      	mov	r1, r9
 80039ae:	4640      	mov	r0, r8
 80039b0:	47d0      	blx	sl
 80039b2:	3001      	adds	r0, #1
 80039b4:	d09d      	beq.n	80038f2 <_printf_i+0x15e>
 80039b6:	3501      	adds	r5, #1
 80039b8:	68e3      	ldr	r3, [r4, #12]
 80039ba:	9903      	ldr	r1, [sp, #12]
 80039bc:	1a5b      	subs	r3, r3, r1
 80039be:	42ab      	cmp	r3, r5
 80039c0:	dcf2      	bgt.n	80039a8 <_printf_i+0x214>
 80039c2:	e7eb      	b.n	800399c <_printf_i+0x208>
 80039c4:	2500      	movs	r5, #0
 80039c6:	f104 0619 	add.w	r6, r4, #25
 80039ca:	e7f5      	b.n	80039b8 <_printf_i+0x224>
 80039cc:	08005b40 	.word	0x08005b40
 80039d0:	08005b51 	.word	0x08005b51

080039d4 <__sflush_r>:
 80039d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	0716      	lsls	r6, r2, #28
 80039dc:	4605      	mov	r5, r0
 80039de:	460c      	mov	r4, r1
 80039e0:	d454      	bmi.n	8003a8c <__sflush_r+0xb8>
 80039e2:	684b      	ldr	r3, [r1, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	dc02      	bgt.n	80039ee <__sflush_r+0x1a>
 80039e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	dd48      	ble.n	8003a80 <__sflush_r+0xac>
 80039ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039f0:	2e00      	cmp	r6, #0
 80039f2:	d045      	beq.n	8003a80 <__sflush_r+0xac>
 80039f4:	2300      	movs	r3, #0
 80039f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80039fa:	682f      	ldr	r7, [r5, #0]
 80039fc:	6a21      	ldr	r1, [r4, #32]
 80039fe:	602b      	str	r3, [r5, #0]
 8003a00:	d030      	beq.n	8003a64 <__sflush_r+0x90>
 8003a02:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	0759      	lsls	r1, r3, #29
 8003a08:	d505      	bpl.n	8003a16 <__sflush_r+0x42>
 8003a0a:	6863      	ldr	r3, [r4, #4]
 8003a0c:	1ad2      	subs	r2, r2, r3
 8003a0e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a10:	b10b      	cbz	r3, 8003a16 <__sflush_r+0x42>
 8003a12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a14:	1ad2      	subs	r2, r2, r3
 8003a16:	2300      	movs	r3, #0
 8003a18:	4628      	mov	r0, r5
 8003a1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a1c:	6a21      	ldr	r1, [r4, #32]
 8003a1e:	47b0      	blx	r6
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	89a3      	ldrh	r3, [r4, #12]
 8003a24:	d106      	bne.n	8003a34 <__sflush_r+0x60>
 8003a26:	6829      	ldr	r1, [r5, #0]
 8003a28:	291d      	cmp	r1, #29
 8003a2a:	d82b      	bhi.n	8003a84 <__sflush_r+0xb0>
 8003a2c:	4a28      	ldr	r2, [pc, #160]	@ (8003ad0 <__sflush_r+0xfc>)
 8003a2e:	410a      	asrs	r2, r1
 8003a30:	07d6      	lsls	r6, r2, #31
 8003a32:	d427      	bmi.n	8003a84 <__sflush_r+0xb0>
 8003a34:	2200      	movs	r2, #0
 8003a36:	6062      	str	r2, [r4, #4]
 8003a38:	6922      	ldr	r2, [r4, #16]
 8003a3a:	04d9      	lsls	r1, r3, #19
 8003a3c:	6022      	str	r2, [r4, #0]
 8003a3e:	d504      	bpl.n	8003a4a <__sflush_r+0x76>
 8003a40:	1c42      	adds	r2, r0, #1
 8003a42:	d101      	bne.n	8003a48 <__sflush_r+0x74>
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	b903      	cbnz	r3, 8003a4a <__sflush_r+0x76>
 8003a48:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a4c:	602f      	str	r7, [r5, #0]
 8003a4e:	b1b9      	cbz	r1, 8003a80 <__sflush_r+0xac>
 8003a50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a54:	4299      	cmp	r1, r3
 8003a56:	d002      	beq.n	8003a5e <__sflush_r+0x8a>
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f001 f86d 	bl	8004b38 <_free_r>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a62:	e00d      	b.n	8003a80 <__sflush_r+0xac>
 8003a64:	2301      	movs	r3, #1
 8003a66:	4628      	mov	r0, r5
 8003a68:	47b0      	blx	r6
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	1c50      	adds	r0, r2, #1
 8003a6e:	d1c9      	bne.n	8003a04 <__sflush_r+0x30>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0c6      	beq.n	8003a04 <__sflush_r+0x30>
 8003a76:	2b1d      	cmp	r3, #29
 8003a78:	d001      	beq.n	8003a7e <__sflush_r+0xaa>
 8003a7a:	2b16      	cmp	r3, #22
 8003a7c:	d11d      	bne.n	8003aba <__sflush_r+0xe6>
 8003a7e:	602f      	str	r7, [r5, #0]
 8003a80:	2000      	movs	r0, #0
 8003a82:	e021      	b.n	8003ac8 <__sflush_r+0xf4>
 8003a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a88:	b21b      	sxth	r3, r3
 8003a8a:	e01a      	b.n	8003ac2 <__sflush_r+0xee>
 8003a8c:	690f      	ldr	r7, [r1, #16]
 8003a8e:	2f00      	cmp	r7, #0
 8003a90:	d0f6      	beq.n	8003a80 <__sflush_r+0xac>
 8003a92:	0793      	lsls	r3, r2, #30
 8003a94:	bf18      	it	ne
 8003a96:	2300      	movne	r3, #0
 8003a98:	680e      	ldr	r6, [r1, #0]
 8003a9a:	bf08      	it	eq
 8003a9c:	694b      	ldreq	r3, [r1, #20]
 8003a9e:	1bf6      	subs	r6, r6, r7
 8003aa0:	600f      	str	r7, [r1, #0]
 8003aa2:	608b      	str	r3, [r1, #8]
 8003aa4:	2e00      	cmp	r6, #0
 8003aa6:	ddeb      	ble.n	8003a80 <__sflush_r+0xac>
 8003aa8:	4633      	mov	r3, r6
 8003aaa:	463a      	mov	r2, r7
 8003aac:	4628      	mov	r0, r5
 8003aae:	6a21      	ldr	r1, [r4, #32]
 8003ab0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003ab4:	47e0      	blx	ip
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	dc07      	bgt.n	8003aca <__sflush_r+0xf6>
 8003aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac6:	81a3      	strh	r3, [r4, #12]
 8003ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aca:	4407      	add	r7, r0
 8003acc:	1a36      	subs	r6, r6, r0
 8003ace:	e7e9      	b.n	8003aa4 <__sflush_r+0xd0>
 8003ad0:	dfbffffe 	.word	0xdfbffffe

08003ad4 <_fflush_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	690b      	ldr	r3, [r1, #16]
 8003ad8:	4605      	mov	r5, r0
 8003ada:	460c      	mov	r4, r1
 8003adc:	b913      	cbnz	r3, 8003ae4 <_fflush_r+0x10>
 8003ade:	2500      	movs	r5, #0
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	b118      	cbz	r0, 8003aee <_fflush_r+0x1a>
 8003ae6:	6a03      	ldr	r3, [r0, #32]
 8003ae8:	b90b      	cbnz	r3, 8003aee <_fflush_r+0x1a>
 8003aea:	f000 f8bb 	bl	8003c64 <__sinit>
 8003aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f3      	beq.n	8003ade <_fflush_r+0xa>
 8003af6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003af8:	07d0      	lsls	r0, r2, #31
 8003afa:	d404      	bmi.n	8003b06 <_fflush_r+0x32>
 8003afc:	0599      	lsls	r1, r3, #22
 8003afe:	d402      	bmi.n	8003b06 <_fflush_r+0x32>
 8003b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b02:	f000 f9b8 	bl	8003e76 <__retarget_lock_acquire_recursive>
 8003b06:	4628      	mov	r0, r5
 8003b08:	4621      	mov	r1, r4
 8003b0a:	f7ff ff63 	bl	80039d4 <__sflush_r>
 8003b0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b10:	4605      	mov	r5, r0
 8003b12:	07da      	lsls	r2, r3, #31
 8003b14:	d4e4      	bmi.n	8003ae0 <_fflush_r+0xc>
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	059b      	lsls	r3, r3, #22
 8003b1a:	d4e1      	bmi.n	8003ae0 <_fflush_r+0xc>
 8003b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b1e:	f000 f9ab 	bl	8003e78 <__retarget_lock_release_recursive>
 8003b22:	e7dd      	b.n	8003ae0 <_fflush_r+0xc>

08003b24 <fflush>:
 8003b24:	4601      	mov	r1, r0
 8003b26:	b920      	cbnz	r0, 8003b32 <fflush+0xe>
 8003b28:	4a04      	ldr	r2, [pc, #16]	@ (8003b3c <fflush+0x18>)
 8003b2a:	4905      	ldr	r1, [pc, #20]	@ (8003b40 <fflush+0x1c>)
 8003b2c:	4805      	ldr	r0, [pc, #20]	@ (8003b44 <fflush+0x20>)
 8003b2e:	f000 b8b1 	b.w	8003c94 <_fwalk_sglue>
 8003b32:	4b05      	ldr	r3, [pc, #20]	@ (8003b48 <fflush+0x24>)
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	f7ff bfcd 	b.w	8003ad4 <_fflush_r>
 8003b3a:	bf00      	nop
 8003b3c:	2000000c 	.word	0x2000000c
 8003b40:	08003ad5 	.word	0x08003ad5
 8003b44:	2000001c 	.word	0x2000001c
 8003b48:	20000018 	.word	0x20000018

08003b4c <std>:
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	b510      	push	{r4, lr}
 8003b50:	4604      	mov	r4, r0
 8003b52:	e9c0 3300 	strd	r3, r3, [r0]
 8003b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b5a:	6083      	str	r3, [r0, #8]
 8003b5c:	8181      	strh	r1, [r0, #12]
 8003b5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b60:	81c2      	strh	r2, [r0, #14]
 8003b62:	6183      	str	r3, [r0, #24]
 8003b64:	4619      	mov	r1, r3
 8003b66:	2208      	movs	r2, #8
 8003b68:	305c      	adds	r0, #92	@ 0x5c
 8003b6a:	f000 f906 	bl	8003d7a <memset>
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <std+0x58>)
 8003b70:	6224      	str	r4, [r4, #32]
 8003b72:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba8 <std+0x5c>)
 8003b76:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b78:	4b0c      	ldr	r3, [pc, #48]	@ (8003bac <std+0x60>)
 8003b7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <std+0x64>)
 8003b7e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b80:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb4 <std+0x68>)
 8003b82:	429c      	cmp	r4, r3
 8003b84:	d006      	beq.n	8003b94 <std+0x48>
 8003b86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b8a:	4294      	cmp	r4, r2
 8003b8c:	d002      	beq.n	8003b94 <std+0x48>
 8003b8e:	33d0      	adds	r3, #208	@ 0xd0
 8003b90:	429c      	cmp	r4, r3
 8003b92:	d105      	bne.n	8003ba0 <std+0x54>
 8003b94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b9c:	f000 b96a 	b.w	8003e74 <__retarget_lock_init_recursive>
 8003ba0:	bd10      	pop	{r4, pc}
 8003ba2:	bf00      	nop
 8003ba4:	08003cf5 	.word	0x08003cf5
 8003ba8:	08003d17 	.word	0x08003d17
 8003bac:	08003d4f 	.word	0x08003d4f
 8003bb0:	08003d73 	.word	0x08003d73
 8003bb4:	20000228 	.word	0x20000228

08003bb8 <stdio_exit_handler>:
 8003bb8:	4a02      	ldr	r2, [pc, #8]	@ (8003bc4 <stdio_exit_handler+0xc>)
 8003bba:	4903      	ldr	r1, [pc, #12]	@ (8003bc8 <stdio_exit_handler+0x10>)
 8003bbc:	4803      	ldr	r0, [pc, #12]	@ (8003bcc <stdio_exit_handler+0x14>)
 8003bbe:	f000 b869 	b.w	8003c94 <_fwalk_sglue>
 8003bc2:	bf00      	nop
 8003bc4:	2000000c 	.word	0x2000000c
 8003bc8:	08003ad5 	.word	0x08003ad5
 8003bcc:	2000001c 	.word	0x2000001c

08003bd0 <cleanup_stdio>:
 8003bd0:	6841      	ldr	r1, [r0, #4]
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <cleanup_stdio+0x34>)
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	4299      	cmp	r1, r3
 8003bd8:	4604      	mov	r4, r0
 8003bda:	d001      	beq.n	8003be0 <cleanup_stdio+0x10>
 8003bdc:	f7ff ff7a 	bl	8003ad4 <_fflush_r>
 8003be0:	68a1      	ldr	r1, [r4, #8]
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <cleanup_stdio+0x38>)
 8003be4:	4299      	cmp	r1, r3
 8003be6:	d002      	beq.n	8003bee <cleanup_stdio+0x1e>
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7ff ff73 	bl	8003ad4 <_fflush_r>
 8003bee:	68e1      	ldr	r1, [r4, #12]
 8003bf0:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <cleanup_stdio+0x3c>)
 8003bf2:	4299      	cmp	r1, r3
 8003bf4:	d004      	beq.n	8003c00 <cleanup_stdio+0x30>
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bfc:	f7ff bf6a 	b.w	8003ad4 <_fflush_r>
 8003c00:	bd10      	pop	{r4, pc}
 8003c02:	bf00      	nop
 8003c04:	20000228 	.word	0x20000228
 8003c08:	20000290 	.word	0x20000290
 8003c0c:	200002f8 	.word	0x200002f8

08003c10 <global_stdio_init.part.0>:
 8003c10:	b510      	push	{r4, lr}
 8003c12:	4b0b      	ldr	r3, [pc, #44]	@ (8003c40 <global_stdio_init.part.0+0x30>)
 8003c14:	4c0b      	ldr	r4, [pc, #44]	@ (8003c44 <global_stdio_init.part.0+0x34>)
 8003c16:	4a0c      	ldr	r2, [pc, #48]	@ (8003c48 <global_stdio_init.part.0+0x38>)
 8003c18:	4620      	mov	r0, r4
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	2104      	movs	r1, #4
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f7ff ff94 	bl	8003b4c <std>
 8003c24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c28:	2201      	movs	r2, #1
 8003c2a:	2109      	movs	r1, #9
 8003c2c:	f7ff ff8e 	bl	8003b4c <std>
 8003c30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c34:	2202      	movs	r2, #2
 8003c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c3a:	2112      	movs	r1, #18
 8003c3c:	f7ff bf86 	b.w	8003b4c <std>
 8003c40:	20000360 	.word	0x20000360
 8003c44:	20000228 	.word	0x20000228
 8003c48:	08003bb9 	.word	0x08003bb9

08003c4c <__sfp_lock_acquire>:
 8003c4c:	4801      	ldr	r0, [pc, #4]	@ (8003c54 <__sfp_lock_acquire+0x8>)
 8003c4e:	f000 b912 	b.w	8003e76 <__retarget_lock_acquire_recursive>
 8003c52:	bf00      	nop
 8003c54:	20000369 	.word	0x20000369

08003c58 <__sfp_lock_release>:
 8003c58:	4801      	ldr	r0, [pc, #4]	@ (8003c60 <__sfp_lock_release+0x8>)
 8003c5a:	f000 b90d 	b.w	8003e78 <__retarget_lock_release_recursive>
 8003c5e:	bf00      	nop
 8003c60:	20000369 	.word	0x20000369

08003c64 <__sinit>:
 8003c64:	b510      	push	{r4, lr}
 8003c66:	4604      	mov	r4, r0
 8003c68:	f7ff fff0 	bl	8003c4c <__sfp_lock_acquire>
 8003c6c:	6a23      	ldr	r3, [r4, #32]
 8003c6e:	b11b      	cbz	r3, 8003c78 <__sinit+0x14>
 8003c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c74:	f7ff bff0 	b.w	8003c58 <__sfp_lock_release>
 8003c78:	4b04      	ldr	r3, [pc, #16]	@ (8003c8c <__sinit+0x28>)
 8003c7a:	6223      	str	r3, [r4, #32]
 8003c7c:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <__sinit+0x2c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f5      	bne.n	8003c70 <__sinit+0xc>
 8003c84:	f7ff ffc4 	bl	8003c10 <global_stdio_init.part.0>
 8003c88:	e7f2      	b.n	8003c70 <__sinit+0xc>
 8003c8a:	bf00      	nop
 8003c8c:	08003bd1 	.word	0x08003bd1
 8003c90:	20000360 	.word	0x20000360

08003c94 <_fwalk_sglue>:
 8003c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c98:	4607      	mov	r7, r0
 8003c9a:	4688      	mov	r8, r1
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	2600      	movs	r6, #0
 8003ca0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ca4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ca8:	d505      	bpl.n	8003cb6 <_fwalk_sglue+0x22>
 8003caa:	6824      	ldr	r4, [r4, #0]
 8003cac:	2c00      	cmp	r4, #0
 8003cae:	d1f7      	bne.n	8003ca0 <_fwalk_sglue+0xc>
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cb6:	89ab      	ldrh	r3, [r5, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d907      	bls.n	8003ccc <_fwalk_sglue+0x38>
 8003cbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	d003      	beq.n	8003ccc <_fwalk_sglue+0x38>
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	47c0      	blx	r8
 8003cca:	4306      	orrs	r6, r0
 8003ccc:	3568      	adds	r5, #104	@ 0x68
 8003cce:	e7e9      	b.n	8003ca4 <_fwalk_sglue+0x10>

08003cd0 <iprintf>:
 8003cd0:	b40f      	push	{r0, r1, r2, r3}
 8003cd2:	b507      	push	{r0, r1, r2, lr}
 8003cd4:	4906      	ldr	r1, [pc, #24]	@ (8003cf0 <iprintf+0x20>)
 8003cd6:	ab04      	add	r3, sp, #16
 8003cd8:	6808      	ldr	r0, [r1, #0]
 8003cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cde:	6881      	ldr	r1, [r0, #8]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	f001 fbcf 	bl	8005484 <_vfiprintf_r>
 8003ce6:	b003      	add	sp, #12
 8003ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cec:	b004      	add	sp, #16
 8003cee:	4770      	bx	lr
 8003cf0:	20000018 	.word	0x20000018

08003cf4 <__sread>:
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfc:	f000 f86c 	bl	8003dd8 <_read_r>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	bfab      	itete	ge
 8003d04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d06:	89a3      	ldrhlt	r3, [r4, #12]
 8003d08:	181b      	addge	r3, r3, r0
 8003d0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d0e:	bfac      	ite	ge
 8003d10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d12:	81a3      	strhlt	r3, [r4, #12]
 8003d14:	bd10      	pop	{r4, pc}

08003d16 <__swrite>:
 8003d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d1a:	461f      	mov	r7, r3
 8003d1c:	898b      	ldrh	r3, [r1, #12]
 8003d1e:	4605      	mov	r5, r0
 8003d20:	05db      	lsls	r3, r3, #23
 8003d22:	460c      	mov	r4, r1
 8003d24:	4616      	mov	r6, r2
 8003d26:	d505      	bpl.n	8003d34 <__swrite+0x1e>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d30:	f000 f840 	bl	8003db4 <_lseek_r>
 8003d34:	89a3      	ldrh	r3, [r4, #12]
 8003d36:	4632      	mov	r2, r6
 8003d38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d3c:	81a3      	strh	r3, [r4, #12]
 8003d3e:	4628      	mov	r0, r5
 8003d40:	463b      	mov	r3, r7
 8003d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d4a:	f000 b857 	b.w	8003dfc <_write_r>

08003d4e <__sseek>:
 8003d4e:	b510      	push	{r4, lr}
 8003d50:	460c      	mov	r4, r1
 8003d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d56:	f000 f82d 	bl	8003db4 <_lseek_r>
 8003d5a:	1c43      	adds	r3, r0, #1
 8003d5c:	89a3      	ldrh	r3, [r4, #12]
 8003d5e:	bf15      	itete	ne
 8003d60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d6a:	81a3      	strheq	r3, [r4, #12]
 8003d6c:	bf18      	it	ne
 8003d6e:	81a3      	strhne	r3, [r4, #12]
 8003d70:	bd10      	pop	{r4, pc}

08003d72 <__sclose>:
 8003d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d76:	f000 b80d 	b.w	8003d94 <_close_r>

08003d7a <memset>:
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4402      	add	r2, r0
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d100      	bne.n	8003d84 <memset+0xa>
 8003d82:	4770      	bx	lr
 8003d84:	f803 1b01 	strb.w	r1, [r3], #1
 8003d88:	e7f9      	b.n	8003d7e <memset+0x4>
	...

08003d8c <_localeconv_r>:
 8003d8c:	4800      	ldr	r0, [pc, #0]	@ (8003d90 <_localeconv_r+0x4>)
 8003d8e:	4770      	bx	lr
 8003d90:	20000158 	.word	0x20000158

08003d94 <_close_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	2300      	movs	r3, #0
 8003d98:	4d05      	ldr	r5, [pc, #20]	@ (8003db0 <_close_r+0x1c>)
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	602b      	str	r3, [r5, #0]
 8003da0:	f7fd fc29 	bl	80015f6 <_close>
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d102      	bne.n	8003dae <_close_r+0x1a>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	b103      	cbz	r3, 8003dae <_close_r+0x1a>
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	bd38      	pop	{r3, r4, r5, pc}
 8003db0:	20000364 	.word	0x20000364

08003db4 <_lseek_r>:
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	4604      	mov	r4, r0
 8003db8:	4608      	mov	r0, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	4d05      	ldr	r5, [pc, #20]	@ (8003dd4 <_lseek_r+0x20>)
 8003dc0:	602a      	str	r2, [r5, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f7fd fc3b 	bl	800163e <_lseek>
 8003dc8:	1c43      	adds	r3, r0, #1
 8003dca:	d102      	bne.n	8003dd2 <_lseek_r+0x1e>
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	b103      	cbz	r3, 8003dd2 <_lseek_r+0x1e>
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	bd38      	pop	{r3, r4, r5, pc}
 8003dd4:	20000364 	.word	0x20000364

08003dd8 <_read_r>:
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	4604      	mov	r4, r0
 8003ddc:	4608      	mov	r0, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	2200      	movs	r2, #0
 8003de2:	4d05      	ldr	r5, [pc, #20]	@ (8003df8 <_read_r+0x20>)
 8003de4:	602a      	str	r2, [r5, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f7fd fbcc 	bl	8001584 <_read>
 8003dec:	1c43      	adds	r3, r0, #1
 8003dee:	d102      	bne.n	8003df6 <_read_r+0x1e>
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	b103      	cbz	r3, 8003df6 <_read_r+0x1e>
 8003df4:	6023      	str	r3, [r4, #0]
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	20000364 	.word	0x20000364

08003dfc <_write_r>:
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4604      	mov	r4, r0
 8003e00:	4608      	mov	r0, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	2200      	movs	r2, #0
 8003e06:	4d05      	ldr	r5, [pc, #20]	@ (8003e1c <_write_r+0x20>)
 8003e08:	602a      	str	r2, [r5, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f7fd fbd7 	bl	80015be <_write>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d102      	bne.n	8003e1a <_write_r+0x1e>
 8003e14:	682b      	ldr	r3, [r5, #0]
 8003e16:	b103      	cbz	r3, 8003e1a <_write_r+0x1e>
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
 8003e1c:	20000364 	.word	0x20000364

08003e20 <__errno>:
 8003e20:	4b01      	ldr	r3, [pc, #4]	@ (8003e28 <__errno+0x8>)
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	20000018 	.word	0x20000018

08003e2c <__libc_init_array>:
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	2600      	movs	r6, #0
 8003e30:	4d0c      	ldr	r5, [pc, #48]	@ (8003e64 <__libc_init_array+0x38>)
 8003e32:	4c0d      	ldr	r4, [pc, #52]	@ (8003e68 <__libc_init_array+0x3c>)
 8003e34:	1b64      	subs	r4, r4, r5
 8003e36:	10a4      	asrs	r4, r4, #2
 8003e38:	42a6      	cmp	r6, r4
 8003e3a:	d109      	bne.n	8003e50 <__libc_init_array+0x24>
 8003e3c:	f001 fe20 	bl	8005a80 <_init>
 8003e40:	2600      	movs	r6, #0
 8003e42:	4d0a      	ldr	r5, [pc, #40]	@ (8003e6c <__libc_init_array+0x40>)
 8003e44:	4c0a      	ldr	r4, [pc, #40]	@ (8003e70 <__libc_init_array+0x44>)
 8003e46:	1b64      	subs	r4, r4, r5
 8003e48:	10a4      	asrs	r4, r4, #2
 8003e4a:	42a6      	cmp	r6, r4
 8003e4c:	d105      	bne.n	8003e5a <__libc_init_array+0x2e>
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e54:	4798      	blx	r3
 8003e56:	3601      	adds	r6, #1
 8003e58:	e7ee      	b.n	8003e38 <__libc_init_array+0xc>
 8003e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5e:	4798      	blx	r3
 8003e60:	3601      	adds	r6, #1
 8003e62:	e7f2      	b.n	8003e4a <__libc_init_array+0x1e>
 8003e64:	08005ea8 	.word	0x08005ea8
 8003e68:	08005ea8 	.word	0x08005ea8
 8003e6c:	08005ea8 	.word	0x08005ea8
 8003e70:	08005eac 	.word	0x08005eac

08003e74 <__retarget_lock_init_recursive>:
 8003e74:	4770      	bx	lr

08003e76 <__retarget_lock_acquire_recursive>:
 8003e76:	4770      	bx	lr

08003e78 <__retarget_lock_release_recursive>:
 8003e78:	4770      	bx	lr

08003e7a <memchr>:
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	b510      	push	{r4, lr}
 8003e7e:	b2c9      	uxtb	r1, r1
 8003e80:	4402      	add	r2, r0
 8003e82:	4293      	cmp	r3, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	d101      	bne.n	8003e8c <memchr+0x12>
 8003e88:	2000      	movs	r0, #0
 8003e8a:	e003      	b.n	8003e94 <memchr+0x1a>
 8003e8c:	7804      	ldrb	r4, [r0, #0]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	428c      	cmp	r4, r1
 8003e92:	d1f6      	bne.n	8003e82 <memchr+0x8>
 8003e94:	bd10      	pop	{r4, pc}

08003e96 <quorem>:
 8003e96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9a:	6903      	ldr	r3, [r0, #16]
 8003e9c:	690c      	ldr	r4, [r1, #16]
 8003e9e:	4607      	mov	r7, r0
 8003ea0:	42a3      	cmp	r3, r4
 8003ea2:	db7e      	blt.n	8003fa2 <quorem+0x10c>
 8003ea4:	3c01      	subs	r4, #1
 8003ea6:	00a3      	lsls	r3, r4, #2
 8003ea8:	f100 0514 	add.w	r5, r0, #20
 8003eac:	f101 0814 	add.w	r8, r1, #20
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ebc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ec8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ecc:	d32e      	bcc.n	8003f2c <quorem+0x96>
 8003ece:	f04f 0a00 	mov.w	sl, #0
 8003ed2:	46c4      	mov	ip, r8
 8003ed4:	46ae      	mov	lr, r5
 8003ed6:	46d3      	mov	fp, sl
 8003ed8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003edc:	b298      	uxth	r0, r3
 8003ede:	fb06 a000 	mla	r0, r6, r0, sl
 8003ee2:	0c1b      	lsrs	r3, r3, #16
 8003ee4:	0c02      	lsrs	r2, r0, #16
 8003ee6:	fb06 2303 	mla	r3, r6, r3, r2
 8003eea:	f8de 2000 	ldr.w	r2, [lr]
 8003eee:	b280      	uxth	r0, r0
 8003ef0:	b292      	uxth	r2, r2
 8003ef2:	1a12      	subs	r2, r2, r0
 8003ef4:	445a      	add	r2, fp
 8003ef6:	f8de 0000 	ldr.w	r0, [lr]
 8003efa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003f04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003f08:	b292      	uxth	r2, r2
 8003f0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003f0e:	45e1      	cmp	r9, ip
 8003f10:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003f14:	f84e 2b04 	str.w	r2, [lr], #4
 8003f18:	d2de      	bcs.n	8003ed8 <quorem+0x42>
 8003f1a:	9b00      	ldr	r3, [sp, #0]
 8003f1c:	58eb      	ldr	r3, [r5, r3]
 8003f1e:	b92b      	cbnz	r3, 8003f2c <quorem+0x96>
 8003f20:	9b01      	ldr	r3, [sp, #4]
 8003f22:	3b04      	subs	r3, #4
 8003f24:	429d      	cmp	r5, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	d32f      	bcc.n	8003f8a <quorem+0xf4>
 8003f2a:	613c      	str	r4, [r7, #16]
 8003f2c:	4638      	mov	r0, r7
 8003f2e:	f001 f979 	bl	8005224 <__mcmp>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	db25      	blt.n	8003f82 <quorem+0xec>
 8003f36:	4629      	mov	r1, r5
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8003f3e:	f8d1 c000 	ldr.w	ip, [r1]
 8003f42:	fa1f fe82 	uxth.w	lr, r2
 8003f46:	fa1f f38c 	uxth.w	r3, ip
 8003f4a:	eba3 030e 	sub.w	r3, r3, lr
 8003f4e:	4403      	add	r3, r0
 8003f50:	0c12      	lsrs	r2, r2, #16
 8003f52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003f56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f60:	45c1      	cmp	r9, r8
 8003f62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003f66:	f841 3b04 	str.w	r3, [r1], #4
 8003f6a:	d2e6      	bcs.n	8003f3a <quorem+0xa4>
 8003f6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f74:	b922      	cbnz	r2, 8003f80 <quorem+0xea>
 8003f76:	3b04      	subs	r3, #4
 8003f78:	429d      	cmp	r5, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	d30b      	bcc.n	8003f96 <quorem+0x100>
 8003f7e:	613c      	str	r4, [r7, #16]
 8003f80:	3601      	adds	r6, #1
 8003f82:	4630      	mov	r0, r6
 8003f84:	b003      	add	sp, #12
 8003f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	3b04      	subs	r3, #4
 8003f8e:	2a00      	cmp	r2, #0
 8003f90:	d1cb      	bne.n	8003f2a <quorem+0x94>
 8003f92:	3c01      	subs	r4, #1
 8003f94:	e7c6      	b.n	8003f24 <quorem+0x8e>
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	3b04      	subs	r3, #4
 8003f9a:	2a00      	cmp	r2, #0
 8003f9c:	d1ef      	bne.n	8003f7e <quorem+0xe8>
 8003f9e:	3c01      	subs	r4, #1
 8003fa0:	e7ea      	b.n	8003f78 <quorem+0xe2>
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e7ee      	b.n	8003f84 <quorem+0xee>
	...

08003fa8 <_dtoa_r>:
 8003fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fac:	4614      	mov	r4, r2
 8003fae:	461d      	mov	r5, r3
 8003fb0:	69c7      	ldr	r7, [r0, #28]
 8003fb2:	b097      	sub	sp, #92	@ 0x5c
 8003fb4:	4683      	mov	fp, r0
 8003fb6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003fba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003fbc:	b97f      	cbnz	r7, 8003fde <_dtoa_r+0x36>
 8003fbe:	2010      	movs	r0, #16
 8003fc0:	f000 fe02 	bl	8004bc8 <malloc>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	f8cb 001c 	str.w	r0, [fp, #28]
 8003fca:	b920      	cbnz	r0, 8003fd6 <_dtoa_r+0x2e>
 8003fcc:	21ef      	movs	r1, #239	@ 0xef
 8003fce:	4ba8      	ldr	r3, [pc, #672]	@ (8004270 <_dtoa_r+0x2c8>)
 8003fd0:	48a8      	ldr	r0, [pc, #672]	@ (8004274 <_dtoa_r+0x2cc>)
 8003fd2:	f001 fc21 	bl	8005818 <__assert_func>
 8003fd6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003fda:	6007      	str	r7, [r0, #0]
 8003fdc:	60c7      	str	r7, [r0, #12]
 8003fde:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003fe2:	6819      	ldr	r1, [r3, #0]
 8003fe4:	b159      	cbz	r1, 8003ffe <_dtoa_r+0x56>
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	2301      	movs	r3, #1
 8003fea:	4093      	lsls	r3, r2
 8003fec:	604a      	str	r2, [r1, #4]
 8003fee:	608b      	str	r3, [r1, #8]
 8003ff0:	4658      	mov	r0, fp
 8003ff2:	f000 fedf 	bl	8004db4 <_Bfree>
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	1e2b      	subs	r3, r5, #0
 8004000:	bfaf      	iteee	ge
 8004002:	2300      	movge	r3, #0
 8004004:	2201      	movlt	r2, #1
 8004006:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800400a:	9303      	strlt	r3, [sp, #12]
 800400c:	bfa8      	it	ge
 800400e:	6033      	strge	r3, [r6, #0]
 8004010:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004014:	4b98      	ldr	r3, [pc, #608]	@ (8004278 <_dtoa_r+0x2d0>)
 8004016:	bfb8      	it	lt
 8004018:	6032      	strlt	r2, [r6, #0]
 800401a:	ea33 0308 	bics.w	r3, r3, r8
 800401e:	d112      	bne.n	8004046 <_dtoa_r+0x9e>
 8004020:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004024:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800402c:	4323      	orrs	r3, r4
 800402e:	f000 8550 	beq.w	8004ad2 <_dtoa_r+0xb2a>
 8004032:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004034:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800427c <_dtoa_r+0x2d4>
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8552 	beq.w	8004ae2 <_dtoa_r+0xb3a>
 800403e:	f10a 0303 	add.w	r3, sl, #3
 8004042:	f000 bd4c 	b.w	8004ade <_dtoa_r+0xb36>
 8004046:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800404a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800404e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004052:	2200      	movs	r2, #0
 8004054:	2300      	movs	r3, #0
 8004056:	f7fc fca7 	bl	80009a8 <__aeabi_dcmpeq>
 800405a:	4607      	mov	r7, r0
 800405c:	b158      	cbz	r0, 8004076 <_dtoa_r+0xce>
 800405e:	2301      	movs	r3, #1
 8004060:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004066:	b113      	cbz	r3, 800406e <_dtoa_r+0xc6>
 8004068:	4b85      	ldr	r3, [pc, #532]	@ (8004280 <_dtoa_r+0x2d8>)
 800406a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004284 <_dtoa_r+0x2dc>
 8004072:	f000 bd36 	b.w	8004ae2 <_dtoa_r+0xb3a>
 8004076:	ab14      	add	r3, sp, #80	@ 0x50
 8004078:	9301      	str	r3, [sp, #4]
 800407a:	ab15      	add	r3, sp, #84	@ 0x54
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	4658      	mov	r0, fp
 8004080:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004084:	f001 f97e 	bl	8005384 <__d2b>
 8004088:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800408c:	4681      	mov	r9, r0
 800408e:	2e00      	cmp	r6, #0
 8004090:	d077      	beq.n	8004182 <_dtoa_r+0x1da>
 8004092:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004098:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800409c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80040a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80040a8:	9712      	str	r7, [sp, #72]	@ 0x48
 80040aa:	4619      	mov	r1, r3
 80040ac:	2200      	movs	r2, #0
 80040ae:	4b76      	ldr	r3, [pc, #472]	@ (8004288 <_dtoa_r+0x2e0>)
 80040b0:	f7fc f85a 	bl	8000168 <__aeabi_dsub>
 80040b4:	a368      	add	r3, pc, #416	@ (adr r3, 8004258 <_dtoa_r+0x2b0>)
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	f7fc fa0d 	bl	80004d8 <__aeabi_dmul>
 80040be:	a368      	add	r3, pc, #416	@ (adr r3, 8004260 <_dtoa_r+0x2b8>)
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f7fc f852 	bl	800016c <__adddf3>
 80040c8:	4604      	mov	r4, r0
 80040ca:	4630      	mov	r0, r6
 80040cc:	460d      	mov	r5, r1
 80040ce:	f7fc f999 	bl	8000404 <__aeabi_i2d>
 80040d2:	a365      	add	r3, pc, #404	@ (adr r3, 8004268 <_dtoa_r+0x2c0>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f7fc f9fe 	bl	80004d8 <__aeabi_dmul>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4620      	mov	r0, r4
 80040e2:	4629      	mov	r1, r5
 80040e4:	f7fc f842 	bl	800016c <__adddf3>
 80040e8:	4604      	mov	r4, r0
 80040ea:	460d      	mov	r5, r1
 80040ec:	f7fc fca4 	bl	8000a38 <__aeabi_d2iz>
 80040f0:	2200      	movs	r2, #0
 80040f2:	4607      	mov	r7, r0
 80040f4:	2300      	movs	r3, #0
 80040f6:	4620      	mov	r0, r4
 80040f8:	4629      	mov	r1, r5
 80040fa:	f7fc fc5f 	bl	80009bc <__aeabi_dcmplt>
 80040fe:	b140      	cbz	r0, 8004112 <_dtoa_r+0x16a>
 8004100:	4638      	mov	r0, r7
 8004102:	f7fc f97f 	bl	8000404 <__aeabi_i2d>
 8004106:	4622      	mov	r2, r4
 8004108:	462b      	mov	r3, r5
 800410a:	f7fc fc4d 	bl	80009a8 <__aeabi_dcmpeq>
 800410e:	b900      	cbnz	r0, 8004112 <_dtoa_r+0x16a>
 8004110:	3f01      	subs	r7, #1
 8004112:	2f16      	cmp	r7, #22
 8004114:	d853      	bhi.n	80041be <_dtoa_r+0x216>
 8004116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800411a:	4b5c      	ldr	r3, [pc, #368]	@ (800428c <_dtoa_r+0x2e4>)
 800411c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f7fc fc4a 	bl	80009bc <__aeabi_dcmplt>
 8004128:	2800      	cmp	r0, #0
 800412a:	d04a      	beq.n	80041c2 <_dtoa_r+0x21a>
 800412c:	2300      	movs	r3, #0
 800412e:	3f01      	subs	r7, #1
 8004130:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004132:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004134:	1b9b      	subs	r3, r3, r6
 8004136:	1e5a      	subs	r2, r3, #1
 8004138:	bf46      	itte	mi
 800413a:	f1c3 0801 	rsbmi	r8, r3, #1
 800413e:	2300      	movmi	r3, #0
 8004140:	f04f 0800 	movpl.w	r8, #0
 8004144:	9209      	str	r2, [sp, #36]	@ 0x24
 8004146:	bf48      	it	mi
 8004148:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800414a:	2f00      	cmp	r7, #0
 800414c:	db3b      	blt.n	80041c6 <_dtoa_r+0x21e>
 800414e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004150:	970e      	str	r7, [sp, #56]	@ 0x38
 8004152:	443b      	add	r3, r7
 8004154:	9309      	str	r3, [sp, #36]	@ 0x24
 8004156:	2300      	movs	r3, #0
 8004158:	930a      	str	r3, [sp, #40]	@ 0x28
 800415a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800415c:	2b09      	cmp	r3, #9
 800415e:	d866      	bhi.n	800422e <_dtoa_r+0x286>
 8004160:	2b05      	cmp	r3, #5
 8004162:	bfc4      	itt	gt
 8004164:	3b04      	subgt	r3, #4
 8004166:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004168:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800416a:	bfc8      	it	gt
 800416c:	2400      	movgt	r4, #0
 800416e:	f1a3 0302 	sub.w	r3, r3, #2
 8004172:	bfd8      	it	le
 8004174:	2401      	movle	r4, #1
 8004176:	2b03      	cmp	r3, #3
 8004178:	d864      	bhi.n	8004244 <_dtoa_r+0x29c>
 800417a:	e8df f003 	tbb	[pc, r3]
 800417e:	382b      	.short	0x382b
 8004180:	5636      	.short	0x5636
 8004182:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004186:	441e      	add	r6, r3
 8004188:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800418c:	2b20      	cmp	r3, #32
 800418e:	bfc1      	itttt	gt
 8004190:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004194:	fa08 f803 	lslgt.w	r8, r8, r3
 8004198:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800419c:	fa24 f303 	lsrgt.w	r3, r4, r3
 80041a0:	bfd6      	itet	le
 80041a2:	f1c3 0320 	rsble	r3, r3, #32
 80041a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80041aa:	fa04 f003 	lslle.w	r0, r4, r3
 80041ae:	f7fc f919 	bl	80003e4 <__aeabi_ui2d>
 80041b2:	2201      	movs	r2, #1
 80041b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80041b8:	3e01      	subs	r6, #1
 80041ba:	9212      	str	r2, [sp, #72]	@ 0x48
 80041bc:	e775      	b.n	80040aa <_dtoa_r+0x102>
 80041be:	2301      	movs	r3, #1
 80041c0:	e7b6      	b.n	8004130 <_dtoa_r+0x188>
 80041c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80041c4:	e7b5      	b.n	8004132 <_dtoa_r+0x18a>
 80041c6:	427b      	negs	r3, r7
 80041c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80041ca:	2300      	movs	r3, #0
 80041cc:	eba8 0807 	sub.w	r8, r8, r7
 80041d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80041d2:	e7c2      	b.n	800415a <_dtoa_r+0x1b2>
 80041d4:	2300      	movs	r3, #0
 80041d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80041da:	2b00      	cmp	r3, #0
 80041dc:	dc35      	bgt.n	800424a <_dtoa_r+0x2a2>
 80041de:	2301      	movs	r3, #1
 80041e0:	461a      	mov	r2, r3
 80041e2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80041e6:	9221      	str	r2, [sp, #132]	@ 0x84
 80041e8:	e00b      	b.n	8004202 <_dtoa_r+0x25a>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e7f3      	b.n	80041d6 <_dtoa_r+0x22e>
 80041ee:	2300      	movs	r3, #0
 80041f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	9308      	str	r3, [sp, #32]
 80041f8:	3301      	adds	r3, #1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	9307      	str	r3, [sp, #28]
 80041fe:	bfb8      	it	lt
 8004200:	2301      	movlt	r3, #1
 8004202:	2100      	movs	r1, #0
 8004204:	2204      	movs	r2, #4
 8004206:	f8db 001c 	ldr.w	r0, [fp, #28]
 800420a:	f102 0514 	add.w	r5, r2, #20
 800420e:	429d      	cmp	r5, r3
 8004210:	d91f      	bls.n	8004252 <_dtoa_r+0x2aa>
 8004212:	6041      	str	r1, [r0, #4]
 8004214:	4658      	mov	r0, fp
 8004216:	f000 fd8d 	bl	8004d34 <_Balloc>
 800421a:	4682      	mov	sl, r0
 800421c:	2800      	cmp	r0, #0
 800421e:	d139      	bne.n	8004294 <_dtoa_r+0x2ec>
 8004220:	4602      	mov	r2, r0
 8004222:	f240 11af 	movw	r1, #431	@ 0x1af
 8004226:	4b1a      	ldr	r3, [pc, #104]	@ (8004290 <_dtoa_r+0x2e8>)
 8004228:	e6d2      	b.n	8003fd0 <_dtoa_r+0x28>
 800422a:	2301      	movs	r3, #1
 800422c:	e7e0      	b.n	80041f0 <_dtoa_r+0x248>
 800422e:	2401      	movs	r4, #1
 8004230:	2300      	movs	r3, #0
 8004232:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004234:	9320      	str	r3, [sp, #128]	@ 0x80
 8004236:	f04f 33ff 	mov.w	r3, #4294967295
 800423a:	2200      	movs	r2, #0
 800423c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004240:	2312      	movs	r3, #18
 8004242:	e7d0      	b.n	80041e6 <_dtoa_r+0x23e>
 8004244:	2301      	movs	r3, #1
 8004246:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004248:	e7f5      	b.n	8004236 <_dtoa_r+0x28e>
 800424a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800424c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004250:	e7d7      	b.n	8004202 <_dtoa_r+0x25a>
 8004252:	3101      	adds	r1, #1
 8004254:	0052      	lsls	r2, r2, #1
 8004256:	e7d8      	b.n	800420a <_dtoa_r+0x262>
 8004258:	636f4361 	.word	0x636f4361
 800425c:	3fd287a7 	.word	0x3fd287a7
 8004260:	8b60c8b3 	.word	0x8b60c8b3
 8004264:	3fc68a28 	.word	0x3fc68a28
 8004268:	509f79fb 	.word	0x509f79fb
 800426c:	3fd34413 	.word	0x3fd34413
 8004270:	08005b6f 	.word	0x08005b6f
 8004274:	08005b86 	.word	0x08005b86
 8004278:	7ff00000 	.word	0x7ff00000
 800427c:	08005b6b 	.word	0x08005b6b
 8004280:	08005b3f 	.word	0x08005b3f
 8004284:	08005b3e 	.word	0x08005b3e
 8004288:	3ff80000 	.word	0x3ff80000
 800428c:	08005c80 	.word	0x08005c80
 8004290:	08005bde 	.word	0x08005bde
 8004294:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004298:	6018      	str	r0, [r3, #0]
 800429a:	9b07      	ldr	r3, [sp, #28]
 800429c:	2b0e      	cmp	r3, #14
 800429e:	f200 80a4 	bhi.w	80043ea <_dtoa_r+0x442>
 80042a2:	2c00      	cmp	r4, #0
 80042a4:	f000 80a1 	beq.w	80043ea <_dtoa_r+0x442>
 80042a8:	2f00      	cmp	r7, #0
 80042aa:	dd33      	ble.n	8004314 <_dtoa_r+0x36c>
 80042ac:	4b86      	ldr	r3, [pc, #536]	@ (80044c8 <_dtoa_r+0x520>)
 80042ae:	f007 020f 	and.w	r2, r7, #15
 80042b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042b6:	05f8      	lsls	r0, r7, #23
 80042b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80042c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80042c4:	d516      	bpl.n	80042f4 <_dtoa_r+0x34c>
 80042c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042ca:	4b80      	ldr	r3, [pc, #512]	@ (80044cc <_dtoa_r+0x524>)
 80042cc:	2603      	movs	r6, #3
 80042ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80042d2:	f7fc fa2b 	bl	800072c <__aeabi_ddiv>
 80042d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042da:	f004 040f 	and.w	r4, r4, #15
 80042de:	4d7b      	ldr	r5, [pc, #492]	@ (80044cc <_dtoa_r+0x524>)
 80042e0:	b954      	cbnz	r4, 80042f8 <_dtoa_r+0x350>
 80042e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042ea:	f7fc fa1f 	bl	800072c <__aeabi_ddiv>
 80042ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042f2:	e028      	b.n	8004346 <_dtoa_r+0x39e>
 80042f4:	2602      	movs	r6, #2
 80042f6:	e7f2      	b.n	80042de <_dtoa_r+0x336>
 80042f8:	07e1      	lsls	r1, r4, #31
 80042fa:	d508      	bpl.n	800430e <_dtoa_r+0x366>
 80042fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004300:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004304:	f7fc f8e8 	bl	80004d8 <__aeabi_dmul>
 8004308:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800430c:	3601      	adds	r6, #1
 800430e:	1064      	asrs	r4, r4, #1
 8004310:	3508      	adds	r5, #8
 8004312:	e7e5      	b.n	80042e0 <_dtoa_r+0x338>
 8004314:	f000 80d2 	beq.w	80044bc <_dtoa_r+0x514>
 8004318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800431c:	427c      	negs	r4, r7
 800431e:	4b6a      	ldr	r3, [pc, #424]	@ (80044c8 <_dtoa_r+0x520>)
 8004320:	f004 020f 	and.w	r2, r4, #15
 8004324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f7fc f8d4 	bl	80004d8 <__aeabi_dmul>
 8004330:	2602      	movs	r6, #2
 8004332:	2300      	movs	r3, #0
 8004334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004338:	4d64      	ldr	r5, [pc, #400]	@ (80044cc <_dtoa_r+0x524>)
 800433a:	1124      	asrs	r4, r4, #4
 800433c:	2c00      	cmp	r4, #0
 800433e:	f040 80b2 	bne.w	80044a6 <_dtoa_r+0x4fe>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1d3      	bne.n	80042ee <_dtoa_r+0x346>
 8004346:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800434a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80b7 	beq.w	80044c0 <_dtoa_r+0x518>
 8004352:	2200      	movs	r2, #0
 8004354:	4620      	mov	r0, r4
 8004356:	4629      	mov	r1, r5
 8004358:	4b5d      	ldr	r3, [pc, #372]	@ (80044d0 <_dtoa_r+0x528>)
 800435a:	f7fc fb2f 	bl	80009bc <__aeabi_dcmplt>
 800435e:	2800      	cmp	r0, #0
 8004360:	f000 80ae 	beq.w	80044c0 <_dtoa_r+0x518>
 8004364:	9b07      	ldr	r3, [sp, #28]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80aa 	beq.w	80044c0 <_dtoa_r+0x518>
 800436c:	9b08      	ldr	r3, [sp, #32]
 800436e:	2b00      	cmp	r3, #0
 8004370:	dd37      	ble.n	80043e2 <_dtoa_r+0x43a>
 8004372:	1e7b      	subs	r3, r7, #1
 8004374:	4620      	mov	r0, r4
 8004376:	9304      	str	r3, [sp, #16]
 8004378:	2200      	movs	r2, #0
 800437a:	4629      	mov	r1, r5
 800437c:	4b55      	ldr	r3, [pc, #340]	@ (80044d4 <_dtoa_r+0x52c>)
 800437e:	f7fc f8ab 	bl	80004d8 <__aeabi_dmul>
 8004382:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004386:	9c08      	ldr	r4, [sp, #32]
 8004388:	3601      	adds	r6, #1
 800438a:	4630      	mov	r0, r6
 800438c:	f7fc f83a 	bl	8000404 <__aeabi_i2d>
 8004390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004394:	f7fc f8a0 	bl	80004d8 <__aeabi_dmul>
 8004398:	2200      	movs	r2, #0
 800439a:	4b4f      	ldr	r3, [pc, #316]	@ (80044d8 <_dtoa_r+0x530>)
 800439c:	f7fb fee6 	bl	800016c <__adddf3>
 80043a0:	4605      	mov	r5, r0
 80043a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80043a6:	2c00      	cmp	r4, #0
 80043a8:	f040 809a 	bne.w	80044e0 <_dtoa_r+0x538>
 80043ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043b0:	2200      	movs	r2, #0
 80043b2:	4b4a      	ldr	r3, [pc, #296]	@ (80044dc <_dtoa_r+0x534>)
 80043b4:	f7fb fed8 	bl	8000168 <__aeabi_dsub>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80043c0:	462a      	mov	r2, r5
 80043c2:	4633      	mov	r3, r6
 80043c4:	f7fc fb18 	bl	80009f8 <__aeabi_dcmpgt>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	f040 828e 	bne.w	80048ea <_dtoa_r+0x942>
 80043ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043d2:	462a      	mov	r2, r5
 80043d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80043d8:	f7fc faf0 	bl	80009bc <__aeabi_dcmplt>
 80043dc:	2800      	cmp	r0, #0
 80043de:	f040 8127 	bne.w	8004630 <_dtoa_r+0x688>
 80043e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80043e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80043ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f2c0 8163 	blt.w	80046b8 <_dtoa_r+0x710>
 80043f2:	2f0e      	cmp	r7, #14
 80043f4:	f300 8160 	bgt.w	80046b8 <_dtoa_r+0x710>
 80043f8:	4b33      	ldr	r3, [pc, #204]	@ (80044c8 <_dtoa_r+0x520>)
 80043fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80043fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004402:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004406:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004408:	2b00      	cmp	r3, #0
 800440a:	da03      	bge.n	8004414 <_dtoa_r+0x46c>
 800440c:	9b07      	ldr	r3, [sp, #28]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f340 8100 	ble.w	8004614 <_dtoa_r+0x66c>
 8004414:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004418:	4656      	mov	r6, sl
 800441a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800441e:	4620      	mov	r0, r4
 8004420:	4629      	mov	r1, r5
 8004422:	f7fc f983 	bl	800072c <__aeabi_ddiv>
 8004426:	f7fc fb07 	bl	8000a38 <__aeabi_d2iz>
 800442a:	4680      	mov	r8, r0
 800442c:	f7fb ffea 	bl	8000404 <__aeabi_i2d>
 8004430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004434:	f7fc f850 	bl	80004d8 <__aeabi_dmul>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4620      	mov	r0, r4
 800443e:	4629      	mov	r1, r5
 8004440:	f7fb fe92 	bl	8000168 <__aeabi_dsub>
 8004444:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004448:	9d07      	ldr	r5, [sp, #28]
 800444a:	f806 4b01 	strb.w	r4, [r6], #1
 800444e:	eba6 040a 	sub.w	r4, r6, sl
 8004452:	42a5      	cmp	r5, r4
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	f040 8116 	bne.w	8004688 <_dtoa_r+0x6e0>
 800445c:	f7fb fe86 	bl	800016c <__adddf3>
 8004460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004464:	4604      	mov	r4, r0
 8004466:	460d      	mov	r5, r1
 8004468:	f7fc fac6 	bl	80009f8 <__aeabi_dcmpgt>
 800446c:	2800      	cmp	r0, #0
 800446e:	f040 80f8 	bne.w	8004662 <_dtoa_r+0x6ba>
 8004472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004476:	4620      	mov	r0, r4
 8004478:	4629      	mov	r1, r5
 800447a:	f7fc fa95 	bl	80009a8 <__aeabi_dcmpeq>
 800447e:	b118      	cbz	r0, 8004488 <_dtoa_r+0x4e0>
 8004480:	f018 0f01 	tst.w	r8, #1
 8004484:	f040 80ed 	bne.w	8004662 <_dtoa_r+0x6ba>
 8004488:	4649      	mov	r1, r9
 800448a:	4658      	mov	r0, fp
 800448c:	f000 fc92 	bl	8004db4 <_Bfree>
 8004490:	2300      	movs	r3, #0
 8004492:	7033      	strb	r3, [r6, #0]
 8004494:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004496:	3701      	adds	r7, #1
 8004498:	601f      	str	r7, [r3, #0]
 800449a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8320 	beq.w	8004ae2 <_dtoa_r+0xb3a>
 80044a2:	601e      	str	r6, [r3, #0]
 80044a4:	e31d      	b.n	8004ae2 <_dtoa_r+0xb3a>
 80044a6:	07e2      	lsls	r2, r4, #31
 80044a8:	d505      	bpl.n	80044b6 <_dtoa_r+0x50e>
 80044aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80044ae:	f7fc f813 	bl	80004d8 <__aeabi_dmul>
 80044b2:	2301      	movs	r3, #1
 80044b4:	3601      	adds	r6, #1
 80044b6:	1064      	asrs	r4, r4, #1
 80044b8:	3508      	adds	r5, #8
 80044ba:	e73f      	b.n	800433c <_dtoa_r+0x394>
 80044bc:	2602      	movs	r6, #2
 80044be:	e742      	b.n	8004346 <_dtoa_r+0x39e>
 80044c0:	9c07      	ldr	r4, [sp, #28]
 80044c2:	9704      	str	r7, [sp, #16]
 80044c4:	e761      	b.n	800438a <_dtoa_r+0x3e2>
 80044c6:	bf00      	nop
 80044c8:	08005c80 	.word	0x08005c80
 80044cc:	08005c58 	.word	0x08005c58
 80044d0:	3ff00000 	.word	0x3ff00000
 80044d4:	40240000 	.word	0x40240000
 80044d8:	401c0000 	.word	0x401c0000
 80044dc:	40140000 	.word	0x40140000
 80044e0:	4b70      	ldr	r3, [pc, #448]	@ (80046a4 <_dtoa_r+0x6fc>)
 80044e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80044e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044ec:	4454      	add	r4, sl
 80044ee:	2900      	cmp	r1, #0
 80044f0:	d045      	beq.n	800457e <_dtoa_r+0x5d6>
 80044f2:	2000      	movs	r0, #0
 80044f4:	496c      	ldr	r1, [pc, #432]	@ (80046a8 <_dtoa_r+0x700>)
 80044f6:	f7fc f919 	bl	800072c <__aeabi_ddiv>
 80044fa:	4633      	mov	r3, r6
 80044fc:	462a      	mov	r2, r5
 80044fe:	f7fb fe33 	bl	8000168 <__aeabi_dsub>
 8004502:	4656      	mov	r6, sl
 8004504:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800450c:	f7fc fa94 	bl	8000a38 <__aeabi_d2iz>
 8004510:	4605      	mov	r5, r0
 8004512:	f7fb ff77 	bl	8000404 <__aeabi_i2d>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800451e:	f7fb fe23 	bl	8000168 <__aeabi_dsub>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	3530      	adds	r5, #48	@ 0x30
 8004528:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800452c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004530:	f806 5b01 	strb.w	r5, [r6], #1
 8004534:	f7fc fa42 	bl	80009bc <__aeabi_dcmplt>
 8004538:	2800      	cmp	r0, #0
 800453a:	d163      	bne.n	8004604 <_dtoa_r+0x65c>
 800453c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004540:	2000      	movs	r0, #0
 8004542:	495a      	ldr	r1, [pc, #360]	@ (80046ac <_dtoa_r+0x704>)
 8004544:	f7fb fe10 	bl	8000168 <__aeabi_dsub>
 8004548:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800454c:	f7fc fa36 	bl	80009bc <__aeabi_dcmplt>
 8004550:	2800      	cmp	r0, #0
 8004552:	f040 8087 	bne.w	8004664 <_dtoa_r+0x6bc>
 8004556:	42a6      	cmp	r6, r4
 8004558:	f43f af43 	beq.w	80043e2 <_dtoa_r+0x43a>
 800455c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004560:	2200      	movs	r2, #0
 8004562:	4b53      	ldr	r3, [pc, #332]	@ (80046b0 <_dtoa_r+0x708>)
 8004564:	f7fb ffb8 	bl	80004d8 <__aeabi_dmul>
 8004568:	2200      	movs	r2, #0
 800456a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800456e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004572:	4b4f      	ldr	r3, [pc, #316]	@ (80046b0 <_dtoa_r+0x708>)
 8004574:	f7fb ffb0 	bl	80004d8 <__aeabi_dmul>
 8004578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800457c:	e7c4      	b.n	8004508 <_dtoa_r+0x560>
 800457e:	4631      	mov	r1, r6
 8004580:	4628      	mov	r0, r5
 8004582:	f7fb ffa9 	bl	80004d8 <__aeabi_dmul>
 8004586:	4656      	mov	r6, sl
 8004588:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800458c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800458e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004592:	f7fc fa51 	bl	8000a38 <__aeabi_d2iz>
 8004596:	4605      	mov	r5, r0
 8004598:	f7fb ff34 	bl	8000404 <__aeabi_i2d>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045a4:	f7fb fde0 	bl	8000168 <__aeabi_dsub>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	3530      	adds	r5, #48	@ 0x30
 80045ae:	f806 5b01 	strb.w	r5, [r6], #1
 80045b2:	42a6      	cmp	r6, r4
 80045b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	d124      	bne.n	8004608 <_dtoa_r+0x660>
 80045be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80045c2:	4b39      	ldr	r3, [pc, #228]	@ (80046a8 <_dtoa_r+0x700>)
 80045c4:	f7fb fdd2 	bl	800016c <__adddf3>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045d0:	f7fc fa12 	bl	80009f8 <__aeabi_dcmpgt>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d145      	bne.n	8004664 <_dtoa_r+0x6bc>
 80045d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80045dc:	2000      	movs	r0, #0
 80045de:	4932      	ldr	r1, [pc, #200]	@ (80046a8 <_dtoa_r+0x700>)
 80045e0:	f7fb fdc2 	bl	8000168 <__aeabi_dsub>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ec:	f7fc f9e6 	bl	80009bc <__aeabi_dcmplt>
 80045f0:	2800      	cmp	r0, #0
 80045f2:	f43f aef6 	beq.w	80043e2 <_dtoa_r+0x43a>
 80045f6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80045f8:	1e73      	subs	r3, r6, #1
 80045fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80045fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004600:	2b30      	cmp	r3, #48	@ 0x30
 8004602:	d0f8      	beq.n	80045f6 <_dtoa_r+0x64e>
 8004604:	9f04      	ldr	r7, [sp, #16]
 8004606:	e73f      	b.n	8004488 <_dtoa_r+0x4e0>
 8004608:	4b29      	ldr	r3, [pc, #164]	@ (80046b0 <_dtoa_r+0x708>)
 800460a:	f7fb ff65 	bl	80004d8 <__aeabi_dmul>
 800460e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004612:	e7bc      	b.n	800458e <_dtoa_r+0x5e6>
 8004614:	d10c      	bne.n	8004630 <_dtoa_r+0x688>
 8004616:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800461a:	2200      	movs	r2, #0
 800461c:	4b25      	ldr	r3, [pc, #148]	@ (80046b4 <_dtoa_r+0x70c>)
 800461e:	f7fb ff5b 	bl	80004d8 <__aeabi_dmul>
 8004622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004626:	f7fc f9dd 	bl	80009e4 <__aeabi_dcmpge>
 800462a:	2800      	cmp	r0, #0
 800462c:	f000 815b 	beq.w	80048e6 <_dtoa_r+0x93e>
 8004630:	2400      	movs	r4, #0
 8004632:	4625      	mov	r5, r4
 8004634:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004636:	4656      	mov	r6, sl
 8004638:	43db      	mvns	r3, r3
 800463a:	9304      	str	r3, [sp, #16]
 800463c:	2700      	movs	r7, #0
 800463e:	4621      	mov	r1, r4
 8004640:	4658      	mov	r0, fp
 8004642:	f000 fbb7 	bl	8004db4 <_Bfree>
 8004646:	2d00      	cmp	r5, #0
 8004648:	d0dc      	beq.n	8004604 <_dtoa_r+0x65c>
 800464a:	b12f      	cbz	r7, 8004658 <_dtoa_r+0x6b0>
 800464c:	42af      	cmp	r7, r5
 800464e:	d003      	beq.n	8004658 <_dtoa_r+0x6b0>
 8004650:	4639      	mov	r1, r7
 8004652:	4658      	mov	r0, fp
 8004654:	f000 fbae 	bl	8004db4 <_Bfree>
 8004658:	4629      	mov	r1, r5
 800465a:	4658      	mov	r0, fp
 800465c:	f000 fbaa 	bl	8004db4 <_Bfree>
 8004660:	e7d0      	b.n	8004604 <_dtoa_r+0x65c>
 8004662:	9704      	str	r7, [sp, #16]
 8004664:	4633      	mov	r3, r6
 8004666:	461e      	mov	r6, r3
 8004668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800466c:	2a39      	cmp	r2, #57	@ 0x39
 800466e:	d107      	bne.n	8004680 <_dtoa_r+0x6d8>
 8004670:	459a      	cmp	sl, r3
 8004672:	d1f8      	bne.n	8004666 <_dtoa_r+0x6be>
 8004674:	9a04      	ldr	r2, [sp, #16]
 8004676:	3201      	adds	r2, #1
 8004678:	9204      	str	r2, [sp, #16]
 800467a:	2230      	movs	r2, #48	@ 0x30
 800467c:	f88a 2000 	strb.w	r2, [sl]
 8004680:	781a      	ldrb	r2, [r3, #0]
 8004682:	3201      	adds	r2, #1
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	e7bd      	b.n	8004604 <_dtoa_r+0x65c>
 8004688:	2200      	movs	r2, #0
 800468a:	4b09      	ldr	r3, [pc, #36]	@ (80046b0 <_dtoa_r+0x708>)
 800468c:	f7fb ff24 	bl	80004d8 <__aeabi_dmul>
 8004690:	2200      	movs	r2, #0
 8004692:	2300      	movs	r3, #0
 8004694:	4604      	mov	r4, r0
 8004696:	460d      	mov	r5, r1
 8004698:	f7fc f986 	bl	80009a8 <__aeabi_dcmpeq>
 800469c:	2800      	cmp	r0, #0
 800469e:	f43f aebc 	beq.w	800441a <_dtoa_r+0x472>
 80046a2:	e6f1      	b.n	8004488 <_dtoa_r+0x4e0>
 80046a4:	08005c80 	.word	0x08005c80
 80046a8:	3fe00000 	.word	0x3fe00000
 80046ac:	3ff00000 	.word	0x3ff00000
 80046b0:	40240000 	.word	0x40240000
 80046b4:	40140000 	.word	0x40140000
 80046b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	f000 80db 	beq.w	8004876 <_dtoa_r+0x8ce>
 80046c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80046c2:	2a01      	cmp	r2, #1
 80046c4:	f300 80bf 	bgt.w	8004846 <_dtoa_r+0x89e>
 80046c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80046ca:	2a00      	cmp	r2, #0
 80046cc:	f000 80b7 	beq.w	800483e <_dtoa_r+0x896>
 80046d0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80046d4:	4646      	mov	r6, r8
 80046d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80046d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046da:	2101      	movs	r1, #1
 80046dc:	441a      	add	r2, r3
 80046de:	4658      	mov	r0, fp
 80046e0:	4498      	add	r8, r3
 80046e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80046e4:	f000 fc1a 	bl	8004f1c <__i2b>
 80046e8:	4605      	mov	r5, r0
 80046ea:	b15e      	cbz	r6, 8004704 <_dtoa_r+0x75c>
 80046ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	dd08      	ble.n	8004704 <_dtoa_r+0x75c>
 80046f2:	42b3      	cmp	r3, r6
 80046f4:	bfa8      	it	ge
 80046f6:	4633      	movge	r3, r6
 80046f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046fa:	eba8 0803 	sub.w	r8, r8, r3
 80046fe:	1af6      	subs	r6, r6, r3
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	9309      	str	r3, [sp, #36]	@ 0x24
 8004704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004706:	b1f3      	cbz	r3, 8004746 <_dtoa_r+0x79e>
 8004708:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 80b7 	beq.w	800487e <_dtoa_r+0x8d6>
 8004710:	b18c      	cbz	r4, 8004736 <_dtoa_r+0x78e>
 8004712:	4629      	mov	r1, r5
 8004714:	4622      	mov	r2, r4
 8004716:	4658      	mov	r0, fp
 8004718:	f000 fcbe 	bl	8005098 <__pow5mult>
 800471c:	464a      	mov	r2, r9
 800471e:	4601      	mov	r1, r0
 8004720:	4605      	mov	r5, r0
 8004722:	4658      	mov	r0, fp
 8004724:	f000 fc10 	bl	8004f48 <__multiply>
 8004728:	4649      	mov	r1, r9
 800472a:	9004      	str	r0, [sp, #16]
 800472c:	4658      	mov	r0, fp
 800472e:	f000 fb41 	bl	8004db4 <_Bfree>
 8004732:	9b04      	ldr	r3, [sp, #16]
 8004734:	4699      	mov	r9, r3
 8004736:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004738:	1b1a      	subs	r2, r3, r4
 800473a:	d004      	beq.n	8004746 <_dtoa_r+0x79e>
 800473c:	4649      	mov	r1, r9
 800473e:	4658      	mov	r0, fp
 8004740:	f000 fcaa 	bl	8005098 <__pow5mult>
 8004744:	4681      	mov	r9, r0
 8004746:	2101      	movs	r1, #1
 8004748:	4658      	mov	r0, fp
 800474a:	f000 fbe7 	bl	8004f1c <__i2b>
 800474e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004750:	4604      	mov	r4, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 81c9 	beq.w	8004aea <_dtoa_r+0xb42>
 8004758:	461a      	mov	r2, r3
 800475a:	4601      	mov	r1, r0
 800475c:	4658      	mov	r0, fp
 800475e:	f000 fc9b 	bl	8005098 <__pow5mult>
 8004762:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004764:	4604      	mov	r4, r0
 8004766:	2b01      	cmp	r3, #1
 8004768:	f300 808f 	bgt.w	800488a <_dtoa_r+0x8e2>
 800476c:	9b02      	ldr	r3, [sp, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f040 8087 	bne.w	8004882 <_dtoa_r+0x8da>
 8004774:	9b03      	ldr	r3, [sp, #12]
 8004776:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 8083 	bne.w	8004886 <_dtoa_r+0x8de>
 8004780:	9b03      	ldr	r3, [sp, #12]
 8004782:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004786:	0d1b      	lsrs	r3, r3, #20
 8004788:	051b      	lsls	r3, r3, #20
 800478a:	b12b      	cbz	r3, 8004798 <_dtoa_r+0x7f0>
 800478c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800478e:	f108 0801 	add.w	r8, r8, #1
 8004792:	3301      	adds	r3, #1
 8004794:	9309      	str	r3, [sp, #36]	@ 0x24
 8004796:	2301      	movs	r3, #1
 8004798:	930a      	str	r3, [sp, #40]	@ 0x28
 800479a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 81aa 	beq.w	8004af6 <_dtoa_r+0xb4e>
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80047a8:	6918      	ldr	r0, [r3, #16]
 80047aa:	f000 fb6b 	bl	8004e84 <__hi0bits>
 80047ae:	f1c0 0020 	rsb	r0, r0, #32
 80047b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047b4:	4418      	add	r0, r3
 80047b6:	f010 001f 	ands.w	r0, r0, #31
 80047ba:	d071      	beq.n	80048a0 <_dtoa_r+0x8f8>
 80047bc:	f1c0 0320 	rsb	r3, r0, #32
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	dd65      	ble.n	8004890 <_dtoa_r+0x8e8>
 80047c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047c6:	f1c0 001c 	rsb	r0, r0, #28
 80047ca:	4403      	add	r3, r0
 80047cc:	4480      	add	r8, r0
 80047ce:	4406      	add	r6, r0
 80047d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80047d2:	f1b8 0f00 	cmp.w	r8, #0
 80047d6:	dd05      	ble.n	80047e4 <_dtoa_r+0x83c>
 80047d8:	4649      	mov	r1, r9
 80047da:	4642      	mov	r2, r8
 80047dc:	4658      	mov	r0, fp
 80047de:	f000 fcb5 	bl	800514c <__lshift>
 80047e2:	4681      	mov	r9, r0
 80047e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	dd05      	ble.n	80047f6 <_dtoa_r+0x84e>
 80047ea:	4621      	mov	r1, r4
 80047ec:	461a      	mov	r2, r3
 80047ee:	4658      	mov	r0, fp
 80047f0:	f000 fcac 	bl	800514c <__lshift>
 80047f4:	4604      	mov	r4, r0
 80047f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d053      	beq.n	80048a4 <_dtoa_r+0x8fc>
 80047fc:	4621      	mov	r1, r4
 80047fe:	4648      	mov	r0, r9
 8004800:	f000 fd10 	bl	8005224 <__mcmp>
 8004804:	2800      	cmp	r0, #0
 8004806:	da4d      	bge.n	80048a4 <_dtoa_r+0x8fc>
 8004808:	1e7b      	subs	r3, r7, #1
 800480a:	4649      	mov	r1, r9
 800480c:	9304      	str	r3, [sp, #16]
 800480e:	220a      	movs	r2, #10
 8004810:	2300      	movs	r3, #0
 8004812:	4658      	mov	r0, fp
 8004814:	f000 faf0 	bl	8004df8 <__multadd>
 8004818:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800481a:	4681      	mov	r9, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 816c 	beq.w	8004afa <_dtoa_r+0xb52>
 8004822:	2300      	movs	r3, #0
 8004824:	4629      	mov	r1, r5
 8004826:	220a      	movs	r2, #10
 8004828:	4658      	mov	r0, fp
 800482a:	f000 fae5 	bl	8004df8 <__multadd>
 800482e:	9b08      	ldr	r3, [sp, #32]
 8004830:	4605      	mov	r5, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	dc61      	bgt.n	80048fa <_dtoa_r+0x952>
 8004836:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004838:	2b02      	cmp	r3, #2
 800483a:	dc3b      	bgt.n	80048b4 <_dtoa_r+0x90c>
 800483c:	e05d      	b.n	80048fa <_dtoa_r+0x952>
 800483e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004840:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004844:	e746      	b.n	80046d4 <_dtoa_r+0x72c>
 8004846:	9b07      	ldr	r3, [sp, #28]
 8004848:	1e5c      	subs	r4, r3, #1
 800484a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800484c:	42a3      	cmp	r3, r4
 800484e:	bfbf      	itttt	lt
 8004850:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004852:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004854:	1ae3      	sublt	r3, r4, r3
 8004856:	18d2      	addlt	r2, r2, r3
 8004858:	bfa8      	it	ge
 800485a:	1b1c      	subge	r4, r3, r4
 800485c:	9b07      	ldr	r3, [sp, #28]
 800485e:	bfbe      	ittt	lt
 8004860:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004862:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004864:	2400      	movlt	r4, #0
 8004866:	2b00      	cmp	r3, #0
 8004868:	bfb5      	itete	lt
 800486a:	eba8 0603 	sublt.w	r6, r8, r3
 800486e:	4646      	movge	r6, r8
 8004870:	2300      	movlt	r3, #0
 8004872:	9b07      	ldrge	r3, [sp, #28]
 8004874:	e730      	b.n	80046d8 <_dtoa_r+0x730>
 8004876:	4646      	mov	r6, r8
 8004878:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800487a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800487c:	e735      	b.n	80046ea <_dtoa_r+0x742>
 800487e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004880:	e75c      	b.n	800473c <_dtoa_r+0x794>
 8004882:	2300      	movs	r3, #0
 8004884:	e788      	b.n	8004798 <_dtoa_r+0x7f0>
 8004886:	9b02      	ldr	r3, [sp, #8]
 8004888:	e786      	b.n	8004798 <_dtoa_r+0x7f0>
 800488a:	2300      	movs	r3, #0
 800488c:	930a      	str	r3, [sp, #40]	@ 0x28
 800488e:	e788      	b.n	80047a2 <_dtoa_r+0x7fa>
 8004890:	d09f      	beq.n	80047d2 <_dtoa_r+0x82a>
 8004892:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004894:	331c      	adds	r3, #28
 8004896:	441a      	add	r2, r3
 8004898:	4498      	add	r8, r3
 800489a:	441e      	add	r6, r3
 800489c:	9209      	str	r2, [sp, #36]	@ 0x24
 800489e:	e798      	b.n	80047d2 <_dtoa_r+0x82a>
 80048a0:	4603      	mov	r3, r0
 80048a2:	e7f6      	b.n	8004892 <_dtoa_r+0x8ea>
 80048a4:	9b07      	ldr	r3, [sp, #28]
 80048a6:	9704      	str	r7, [sp, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	dc20      	bgt.n	80048ee <_dtoa_r+0x946>
 80048ac:	9308      	str	r3, [sp, #32]
 80048ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	dd1e      	ble.n	80048f2 <_dtoa_r+0x94a>
 80048b4:	9b08      	ldr	r3, [sp, #32]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f47f aebc 	bne.w	8004634 <_dtoa_r+0x68c>
 80048bc:	4621      	mov	r1, r4
 80048be:	2205      	movs	r2, #5
 80048c0:	4658      	mov	r0, fp
 80048c2:	f000 fa99 	bl	8004df8 <__multadd>
 80048c6:	4601      	mov	r1, r0
 80048c8:	4604      	mov	r4, r0
 80048ca:	4648      	mov	r0, r9
 80048cc:	f000 fcaa 	bl	8005224 <__mcmp>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	f77f aeaf 	ble.w	8004634 <_dtoa_r+0x68c>
 80048d6:	2331      	movs	r3, #49	@ 0x31
 80048d8:	4656      	mov	r6, sl
 80048da:	f806 3b01 	strb.w	r3, [r6], #1
 80048de:	9b04      	ldr	r3, [sp, #16]
 80048e0:	3301      	adds	r3, #1
 80048e2:	9304      	str	r3, [sp, #16]
 80048e4:	e6aa      	b.n	800463c <_dtoa_r+0x694>
 80048e6:	9c07      	ldr	r4, [sp, #28]
 80048e8:	9704      	str	r7, [sp, #16]
 80048ea:	4625      	mov	r5, r4
 80048ec:	e7f3      	b.n	80048d6 <_dtoa_r+0x92e>
 80048ee:	9b07      	ldr	r3, [sp, #28]
 80048f0:	9308      	str	r3, [sp, #32]
 80048f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 8104 	beq.w	8004b02 <_dtoa_r+0xb5a>
 80048fa:	2e00      	cmp	r6, #0
 80048fc:	dd05      	ble.n	800490a <_dtoa_r+0x962>
 80048fe:	4629      	mov	r1, r5
 8004900:	4632      	mov	r2, r6
 8004902:	4658      	mov	r0, fp
 8004904:	f000 fc22 	bl	800514c <__lshift>
 8004908:	4605      	mov	r5, r0
 800490a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	d05a      	beq.n	80049c6 <_dtoa_r+0xa1e>
 8004910:	4658      	mov	r0, fp
 8004912:	6869      	ldr	r1, [r5, #4]
 8004914:	f000 fa0e 	bl	8004d34 <_Balloc>
 8004918:	4606      	mov	r6, r0
 800491a:	b928      	cbnz	r0, 8004928 <_dtoa_r+0x980>
 800491c:	4602      	mov	r2, r0
 800491e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004922:	4b83      	ldr	r3, [pc, #524]	@ (8004b30 <_dtoa_r+0xb88>)
 8004924:	f7ff bb54 	b.w	8003fd0 <_dtoa_r+0x28>
 8004928:	692a      	ldr	r2, [r5, #16]
 800492a:	f105 010c 	add.w	r1, r5, #12
 800492e:	3202      	adds	r2, #2
 8004930:	0092      	lsls	r2, r2, #2
 8004932:	300c      	adds	r0, #12
 8004934:	f000 ff62 	bl	80057fc <memcpy>
 8004938:	2201      	movs	r2, #1
 800493a:	4631      	mov	r1, r6
 800493c:	4658      	mov	r0, fp
 800493e:	f000 fc05 	bl	800514c <__lshift>
 8004942:	462f      	mov	r7, r5
 8004944:	4605      	mov	r5, r0
 8004946:	f10a 0301 	add.w	r3, sl, #1
 800494a:	9307      	str	r3, [sp, #28]
 800494c:	9b08      	ldr	r3, [sp, #32]
 800494e:	4453      	add	r3, sl
 8004950:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004952:	9b02      	ldr	r3, [sp, #8]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	930a      	str	r3, [sp, #40]	@ 0x28
 800495a:	9b07      	ldr	r3, [sp, #28]
 800495c:	4621      	mov	r1, r4
 800495e:	3b01      	subs	r3, #1
 8004960:	4648      	mov	r0, r9
 8004962:	9302      	str	r3, [sp, #8]
 8004964:	f7ff fa97 	bl	8003e96 <quorem>
 8004968:	4639      	mov	r1, r7
 800496a:	9008      	str	r0, [sp, #32]
 800496c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004970:	4648      	mov	r0, r9
 8004972:	f000 fc57 	bl	8005224 <__mcmp>
 8004976:	462a      	mov	r2, r5
 8004978:	9009      	str	r0, [sp, #36]	@ 0x24
 800497a:	4621      	mov	r1, r4
 800497c:	4658      	mov	r0, fp
 800497e:	f000 fc6d 	bl	800525c <__mdiff>
 8004982:	68c2      	ldr	r2, [r0, #12]
 8004984:	4606      	mov	r6, r0
 8004986:	bb02      	cbnz	r2, 80049ca <_dtoa_r+0xa22>
 8004988:	4601      	mov	r1, r0
 800498a:	4648      	mov	r0, r9
 800498c:	f000 fc4a 	bl	8005224 <__mcmp>
 8004990:	4602      	mov	r2, r0
 8004992:	4631      	mov	r1, r6
 8004994:	4658      	mov	r0, fp
 8004996:	920c      	str	r2, [sp, #48]	@ 0x30
 8004998:	f000 fa0c 	bl	8004db4 <_Bfree>
 800499c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800499e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80049a0:	9e07      	ldr	r6, [sp, #28]
 80049a2:	ea43 0102 	orr.w	r1, r3, r2
 80049a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049a8:	4319      	orrs	r1, r3
 80049aa:	d110      	bne.n	80049ce <_dtoa_r+0xa26>
 80049ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80049b0:	d029      	beq.n	8004a06 <_dtoa_r+0xa5e>
 80049b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	dd02      	ble.n	80049be <_dtoa_r+0xa16>
 80049b8:	9b08      	ldr	r3, [sp, #32]
 80049ba:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80049be:	9b02      	ldr	r3, [sp, #8]
 80049c0:	f883 8000 	strb.w	r8, [r3]
 80049c4:	e63b      	b.n	800463e <_dtoa_r+0x696>
 80049c6:	4628      	mov	r0, r5
 80049c8:	e7bb      	b.n	8004942 <_dtoa_r+0x99a>
 80049ca:	2201      	movs	r2, #1
 80049cc:	e7e1      	b.n	8004992 <_dtoa_r+0x9ea>
 80049ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	db04      	blt.n	80049de <_dtoa_r+0xa36>
 80049d4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80049d6:	430b      	orrs	r3, r1
 80049d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80049da:	430b      	orrs	r3, r1
 80049dc:	d120      	bne.n	8004a20 <_dtoa_r+0xa78>
 80049de:	2a00      	cmp	r2, #0
 80049e0:	dded      	ble.n	80049be <_dtoa_r+0xa16>
 80049e2:	4649      	mov	r1, r9
 80049e4:	2201      	movs	r2, #1
 80049e6:	4658      	mov	r0, fp
 80049e8:	f000 fbb0 	bl	800514c <__lshift>
 80049ec:	4621      	mov	r1, r4
 80049ee:	4681      	mov	r9, r0
 80049f0:	f000 fc18 	bl	8005224 <__mcmp>
 80049f4:	2800      	cmp	r0, #0
 80049f6:	dc03      	bgt.n	8004a00 <_dtoa_r+0xa58>
 80049f8:	d1e1      	bne.n	80049be <_dtoa_r+0xa16>
 80049fa:	f018 0f01 	tst.w	r8, #1
 80049fe:	d0de      	beq.n	80049be <_dtoa_r+0xa16>
 8004a00:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004a04:	d1d8      	bne.n	80049b8 <_dtoa_r+0xa10>
 8004a06:	2339      	movs	r3, #57	@ 0x39
 8004a08:	9a02      	ldr	r2, [sp, #8]
 8004a0a:	7013      	strb	r3, [r2, #0]
 8004a0c:	4633      	mov	r3, r6
 8004a0e:	461e      	mov	r6, r3
 8004a10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	2a39      	cmp	r2, #57	@ 0x39
 8004a18:	d052      	beq.n	8004ac0 <_dtoa_r+0xb18>
 8004a1a:	3201      	adds	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e60e      	b.n	800463e <_dtoa_r+0x696>
 8004a20:	2a00      	cmp	r2, #0
 8004a22:	dd07      	ble.n	8004a34 <_dtoa_r+0xa8c>
 8004a24:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004a28:	d0ed      	beq.n	8004a06 <_dtoa_r+0xa5e>
 8004a2a:	9a02      	ldr	r2, [sp, #8]
 8004a2c:	f108 0301 	add.w	r3, r8, #1
 8004a30:	7013      	strb	r3, [r2, #0]
 8004a32:	e604      	b.n	800463e <_dtoa_r+0x696>
 8004a34:	9b07      	ldr	r3, [sp, #28]
 8004a36:	9a07      	ldr	r2, [sp, #28]
 8004a38:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004a3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d028      	beq.n	8004a94 <_dtoa_r+0xaec>
 8004a42:	4649      	mov	r1, r9
 8004a44:	2300      	movs	r3, #0
 8004a46:	220a      	movs	r2, #10
 8004a48:	4658      	mov	r0, fp
 8004a4a:	f000 f9d5 	bl	8004df8 <__multadd>
 8004a4e:	42af      	cmp	r7, r5
 8004a50:	4681      	mov	r9, r0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	f04f 020a 	mov.w	r2, #10
 8004a5a:	4639      	mov	r1, r7
 8004a5c:	4658      	mov	r0, fp
 8004a5e:	d107      	bne.n	8004a70 <_dtoa_r+0xac8>
 8004a60:	f000 f9ca 	bl	8004df8 <__multadd>
 8004a64:	4607      	mov	r7, r0
 8004a66:	4605      	mov	r5, r0
 8004a68:	9b07      	ldr	r3, [sp, #28]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	9307      	str	r3, [sp, #28]
 8004a6e:	e774      	b.n	800495a <_dtoa_r+0x9b2>
 8004a70:	f000 f9c2 	bl	8004df8 <__multadd>
 8004a74:	4629      	mov	r1, r5
 8004a76:	4607      	mov	r7, r0
 8004a78:	2300      	movs	r3, #0
 8004a7a:	220a      	movs	r2, #10
 8004a7c:	4658      	mov	r0, fp
 8004a7e:	f000 f9bb 	bl	8004df8 <__multadd>
 8004a82:	4605      	mov	r5, r0
 8004a84:	e7f0      	b.n	8004a68 <_dtoa_r+0xac0>
 8004a86:	9b08      	ldr	r3, [sp, #32]
 8004a88:	2700      	movs	r7, #0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bfcc      	ite	gt
 8004a8e:	461e      	movgt	r6, r3
 8004a90:	2601      	movle	r6, #1
 8004a92:	4456      	add	r6, sl
 8004a94:	4649      	mov	r1, r9
 8004a96:	2201      	movs	r2, #1
 8004a98:	4658      	mov	r0, fp
 8004a9a:	f000 fb57 	bl	800514c <__lshift>
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	4681      	mov	r9, r0
 8004aa2:	f000 fbbf 	bl	8005224 <__mcmp>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	dcb0      	bgt.n	8004a0c <_dtoa_r+0xa64>
 8004aaa:	d102      	bne.n	8004ab2 <_dtoa_r+0xb0a>
 8004aac:	f018 0f01 	tst.w	r8, #1
 8004ab0:	d1ac      	bne.n	8004a0c <_dtoa_r+0xa64>
 8004ab2:	4633      	mov	r3, r6
 8004ab4:	461e      	mov	r6, r3
 8004ab6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004aba:	2a30      	cmp	r2, #48	@ 0x30
 8004abc:	d0fa      	beq.n	8004ab4 <_dtoa_r+0xb0c>
 8004abe:	e5be      	b.n	800463e <_dtoa_r+0x696>
 8004ac0:	459a      	cmp	sl, r3
 8004ac2:	d1a4      	bne.n	8004a0e <_dtoa_r+0xa66>
 8004ac4:	9b04      	ldr	r3, [sp, #16]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	9304      	str	r3, [sp, #16]
 8004aca:	2331      	movs	r3, #49	@ 0x31
 8004acc:	f88a 3000 	strb.w	r3, [sl]
 8004ad0:	e5b5      	b.n	800463e <_dtoa_r+0x696>
 8004ad2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004ad4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004b34 <_dtoa_r+0xb8c>
 8004ad8:	b11b      	cbz	r3, 8004ae2 <_dtoa_r+0xb3a>
 8004ada:	f10a 0308 	add.w	r3, sl, #8
 8004ade:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	4650      	mov	r0, sl
 8004ae4:	b017      	add	sp, #92	@ 0x5c
 8004ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	f77f ae3d 	ble.w	800476c <_dtoa_r+0x7c4>
 8004af2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004af4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004af6:	2001      	movs	r0, #1
 8004af8:	e65b      	b.n	80047b2 <_dtoa_r+0x80a>
 8004afa:	9b08      	ldr	r3, [sp, #32]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f77f aed6 	ble.w	80048ae <_dtoa_r+0x906>
 8004b02:	4656      	mov	r6, sl
 8004b04:	4621      	mov	r1, r4
 8004b06:	4648      	mov	r0, r9
 8004b08:	f7ff f9c5 	bl	8003e96 <quorem>
 8004b0c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004b10:	9b08      	ldr	r3, [sp, #32]
 8004b12:	f806 8b01 	strb.w	r8, [r6], #1
 8004b16:	eba6 020a 	sub.w	r2, r6, sl
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	ddb3      	ble.n	8004a86 <_dtoa_r+0xade>
 8004b1e:	4649      	mov	r1, r9
 8004b20:	2300      	movs	r3, #0
 8004b22:	220a      	movs	r2, #10
 8004b24:	4658      	mov	r0, fp
 8004b26:	f000 f967 	bl	8004df8 <__multadd>
 8004b2a:	4681      	mov	r9, r0
 8004b2c:	e7ea      	b.n	8004b04 <_dtoa_r+0xb5c>
 8004b2e:	bf00      	nop
 8004b30:	08005bde 	.word	0x08005bde
 8004b34:	08005b62 	.word	0x08005b62

08004b38 <_free_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4605      	mov	r5, r0
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	d040      	beq.n	8004bc2 <_free_r+0x8a>
 8004b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b44:	1f0c      	subs	r4, r1, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bfb8      	it	lt
 8004b4a:	18e4      	addlt	r4, r4, r3
 8004b4c:	f000 f8e6 	bl	8004d1c <__malloc_lock>
 8004b50:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc4 <_free_r+0x8c>)
 8004b52:	6813      	ldr	r3, [r2, #0]
 8004b54:	b933      	cbnz	r3, 8004b64 <_free_r+0x2c>
 8004b56:	6063      	str	r3, [r4, #4]
 8004b58:	6014      	str	r4, [r2, #0]
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b60:	f000 b8e2 	b.w	8004d28 <__malloc_unlock>
 8004b64:	42a3      	cmp	r3, r4
 8004b66:	d908      	bls.n	8004b7a <_free_r+0x42>
 8004b68:	6820      	ldr	r0, [r4, #0]
 8004b6a:	1821      	adds	r1, r4, r0
 8004b6c:	428b      	cmp	r3, r1
 8004b6e:	bf01      	itttt	eq
 8004b70:	6819      	ldreq	r1, [r3, #0]
 8004b72:	685b      	ldreq	r3, [r3, #4]
 8004b74:	1809      	addeq	r1, r1, r0
 8004b76:	6021      	streq	r1, [r4, #0]
 8004b78:	e7ed      	b.n	8004b56 <_free_r+0x1e>
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	b10b      	cbz	r3, 8004b84 <_free_r+0x4c>
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	d9fa      	bls.n	8004b7a <_free_r+0x42>
 8004b84:	6811      	ldr	r1, [r2, #0]
 8004b86:	1850      	adds	r0, r2, r1
 8004b88:	42a0      	cmp	r0, r4
 8004b8a:	d10b      	bne.n	8004ba4 <_free_r+0x6c>
 8004b8c:	6820      	ldr	r0, [r4, #0]
 8004b8e:	4401      	add	r1, r0
 8004b90:	1850      	adds	r0, r2, r1
 8004b92:	4283      	cmp	r3, r0
 8004b94:	6011      	str	r1, [r2, #0]
 8004b96:	d1e0      	bne.n	8004b5a <_free_r+0x22>
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4408      	add	r0, r1
 8004b9e:	6010      	str	r0, [r2, #0]
 8004ba0:	6053      	str	r3, [r2, #4]
 8004ba2:	e7da      	b.n	8004b5a <_free_r+0x22>
 8004ba4:	d902      	bls.n	8004bac <_free_r+0x74>
 8004ba6:	230c      	movs	r3, #12
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	e7d6      	b.n	8004b5a <_free_r+0x22>
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	1821      	adds	r1, r4, r0
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	bf01      	itttt	eq
 8004bb4:	6819      	ldreq	r1, [r3, #0]
 8004bb6:	685b      	ldreq	r3, [r3, #4]
 8004bb8:	1809      	addeq	r1, r1, r0
 8004bba:	6021      	streq	r1, [r4, #0]
 8004bbc:	6063      	str	r3, [r4, #4]
 8004bbe:	6054      	str	r4, [r2, #4]
 8004bc0:	e7cb      	b.n	8004b5a <_free_r+0x22>
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	20000370 	.word	0x20000370

08004bc8 <malloc>:
 8004bc8:	4b02      	ldr	r3, [pc, #8]	@ (8004bd4 <malloc+0xc>)
 8004bca:	4601      	mov	r1, r0
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	f000 b825 	b.w	8004c1c <_malloc_r>
 8004bd2:	bf00      	nop
 8004bd4:	20000018 	.word	0x20000018

08004bd8 <sbrk_aligned>:
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	4e0f      	ldr	r6, [pc, #60]	@ (8004c18 <sbrk_aligned+0x40>)
 8004bdc:	460c      	mov	r4, r1
 8004bde:	6831      	ldr	r1, [r6, #0]
 8004be0:	4605      	mov	r5, r0
 8004be2:	b911      	cbnz	r1, 8004bea <sbrk_aligned+0x12>
 8004be4:	f000 fdfa 	bl	80057dc <_sbrk_r>
 8004be8:	6030      	str	r0, [r6, #0]
 8004bea:	4621      	mov	r1, r4
 8004bec:	4628      	mov	r0, r5
 8004bee:	f000 fdf5 	bl	80057dc <_sbrk_r>
 8004bf2:	1c43      	adds	r3, r0, #1
 8004bf4:	d103      	bne.n	8004bfe <sbrk_aligned+0x26>
 8004bf6:	f04f 34ff 	mov.w	r4, #4294967295
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	bd70      	pop	{r4, r5, r6, pc}
 8004bfe:	1cc4      	adds	r4, r0, #3
 8004c00:	f024 0403 	bic.w	r4, r4, #3
 8004c04:	42a0      	cmp	r0, r4
 8004c06:	d0f8      	beq.n	8004bfa <sbrk_aligned+0x22>
 8004c08:	1a21      	subs	r1, r4, r0
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f000 fde6 	bl	80057dc <_sbrk_r>
 8004c10:	3001      	adds	r0, #1
 8004c12:	d1f2      	bne.n	8004bfa <sbrk_aligned+0x22>
 8004c14:	e7ef      	b.n	8004bf6 <sbrk_aligned+0x1e>
 8004c16:	bf00      	nop
 8004c18:	2000036c 	.word	0x2000036c

08004c1c <_malloc_r>:
 8004c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c20:	1ccd      	adds	r5, r1, #3
 8004c22:	f025 0503 	bic.w	r5, r5, #3
 8004c26:	3508      	adds	r5, #8
 8004c28:	2d0c      	cmp	r5, #12
 8004c2a:	bf38      	it	cc
 8004c2c:	250c      	movcc	r5, #12
 8004c2e:	2d00      	cmp	r5, #0
 8004c30:	4606      	mov	r6, r0
 8004c32:	db01      	blt.n	8004c38 <_malloc_r+0x1c>
 8004c34:	42a9      	cmp	r1, r5
 8004c36:	d904      	bls.n	8004c42 <_malloc_r+0x26>
 8004c38:	230c      	movs	r3, #12
 8004c3a:	6033      	str	r3, [r6, #0]
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d18 <_malloc_r+0xfc>
 8004c46:	f000 f869 	bl	8004d1c <__malloc_lock>
 8004c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c4e:	461c      	mov	r4, r3
 8004c50:	bb44      	cbnz	r4, 8004ca4 <_malloc_r+0x88>
 8004c52:	4629      	mov	r1, r5
 8004c54:	4630      	mov	r0, r6
 8004c56:	f7ff ffbf 	bl	8004bd8 <sbrk_aligned>
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	d158      	bne.n	8004d12 <_malloc_r+0xf6>
 8004c60:	f8d8 4000 	ldr.w	r4, [r8]
 8004c64:	4627      	mov	r7, r4
 8004c66:	2f00      	cmp	r7, #0
 8004c68:	d143      	bne.n	8004cf2 <_malloc_r+0xd6>
 8004c6a:	2c00      	cmp	r4, #0
 8004c6c:	d04b      	beq.n	8004d06 <_malloc_r+0xea>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	4639      	mov	r1, r7
 8004c72:	4630      	mov	r0, r6
 8004c74:	eb04 0903 	add.w	r9, r4, r3
 8004c78:	f000 fdb0 	bl	80057dc <_sbrk_r>
 8004c7c:	4581      	cmp	r9, r0
 8004c7e:	d142      	bne.n	8004d06 <_malloc_r+0xea>
 8004c80:	6821      	ldr	r1, [r4, #0]
 8004c82:	4630      	mov	r0, r6
 8004c84:	1a6d      	subs	r5, r5, r1
 8004c86:	4629      	mov	r1, r5
 8004c88:	f7ff ffa6 	bl	8004bd8 <sbrk_aligned>
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d03a      	beq.n	8004d06 <_malloc_r+0xea>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	442b      	add	r3, r5
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	f8d8 3000 	ldr.w	r3, [r8]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	bb62      	cbnz	r2, 8004cf8 <_malloc_r+0xdc>
 8004c9e:	f8c8 7000 	str.w	r7, [r8]
 8004ca2:	e00f      	b.n	8004cc4 <_malloc_r+0xa8>
 8004ca4:	6822      	ldr	r2, [r4, #0]
 8004ca6:	1b52      	subs	r2, r2, r5
 8004ca8:	d420      	bmi.n	8004cec <_malloc_r+0xd0>
 8004caa:	2a0b      	cmp	r2, #11
 8004cac:	d917      	bls.n	8004cde <_malloc_r+0xc2>
 8004cae:	1961      	adds	r1, r4, r5
 8004cb0:	42a3      	cmp	r3, r4
 8004cb2:	6025      	str	r5, [r4, #0]
 8004cb4:	bf18      	it	ne
 8004cb6:	6059      	strne	r1, [r3, #4]
 8004cb8:	6863      	ldr	r3, [r4, #4]
 8004cba:	bf08      	it	eq
 8004cbc:	f8c8 1000 	streq.w	r1, [r8]
 8004cc0:	5162      	str	r2, [r4, r5]
 8004cc2:	604b      	str	r3, [r1, #4]
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	f000 f82f 	bl	8004d28 <__malloc_unlock>
 8004cca:	f104 000b 	add.w	r0, r4, #11
 8004cce:	1d23      	adds	r3, r4, #4
 8004cd0:	f020 0007 	bic.w	r0, r0, #7
 8004cd4:	1ac2      	subs	r2, r0, r3
 8004cd6:	bf1c      	itt	ne
 8004cd8:	1a1b      	subne	r3, r3, r0
 8004cda:	50a3      	strne	r3, [r4, r2]
 8004cdc:	e7af      	b.n	8004c3e <_malloc_r+0x22>
 8004cde:	6862      	ldr	r2, [r4, #4]
 8004ce0:	42a3      	cmp	r3, r4
 8004ce2:	bf0c      	ite	eq
 8004ce4:	f8c8 2000 	streq.w	r2, [r8]
 8004ce8:	605a      	strne	r2, [r3, #4]
 8004cea:	e7eb      	b.n	8004cc4 <_malloc_r+0xa8>
 8004cec:	4623      	mov	r3, r4
 8004cee:	6864      	ldr	r4, [r4, #4]
 8004cf0:	e7ae      	b.n	8004c50 <_malloc_r+0x34>
 8004cf2:	463c      	mov	r4, r7
 8004cf4:	687f      	ldr	r7, [r7, #4]
 8004cf6:	e7b6      	b.n	8004c66 <_malloc_r+0x4a>
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	42a3      	cmp	r3, r4
 8004cfe:	d1fb      	bne.n	8004cf8 <_malloc_r+0xdc>
 8004d00:	2300      	movs	r3, #0
 8004d02:	6053      	str	r3, [r2, #4]
 8004d04:	e7de      	b.n	8004cc4 <_malloc_r+0xa8>
 8004d06:	230c      	movs	r3, #12
 8004d08:	4630      	mov	r0, r6
 8004d0a:	6033      	str	r3, [r6, #0]
 8004d0c:	f000 f80c 	bl	8004d28 <__malloc_unlock>
 8004d10:	e794      	b.n	8004c3c <_malloc_r+0x20>
 8004d12:	6005      	str	r5, [r0, #0]
 8004d14:	e7d6      	b.n	8004cc4 <_malloc_r+0xa8>
 8004d16:	bf00      	nop
 8004d18:	20000370 	.word	0x20000370

08004d1c <__malloc_lock>:
 8004d1c:	4801      	ldr	r0, [pc, #4]	@ (8004d24 <__malloc_lock+0x8>)
 8004d1e:	f7ff b8aa 	b.w	8003e76 <__retarget_lock_acquire_recursive>
 8004d22:	bf00      	nop
 8004d24:	20000368 	.word	0x20000368

08004d28 <__malloc_unlock>:
 8004d28:	4801      	ldr	r0, [pc, #4]	@ (8004d30 <__malloc_unlock+0x8>)
 8004d2a:	f7ff b8a5 	b.w	8003e78 <__retarget_lock_release_recursive>
 8004d2e:	bf00      	nop
 8004d30:	20000368 	.word	0x20000368

08004d34 <_Balloc>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	69c6      	ldr	r6, [r0, #28]
 8004d38:	4604      	mov	r4, r0
 8004d3a:	460d      	mov	r5, r1
 8004d3c:	b976      	cbnz	r6, 8004d5c <_Balloc+0x28>
 8004d3e:	2010      	movs	r0, #16
 8004d40:	f7ff ff42 	bl	8004bc8 <malloc>
 8004d44:	4602      	mov	r2, r0
 8004d46:	61e0      	str	r0, [r4, #28]
 8004d48:	b920      	cbnz	r0, 8004d54 <_Balloc+0x20>
 8004d4a:	216b      	movs	r1, #107	@ 0x6b
 8004d4c:	4b17      	ldr	r3, [pc, #92]	@ (8004dac <_Balloc+0x78>)
 8004d4e:	4818      	ldr	r0, [pc, #96]	@ (8004db0 <_Balloc+0x7c>)
 8004d50:	f000 fd62 	bl	8005818 <__assert_func>
 8004d54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d58:	6006      	str	r6, [r0, #0]
 8004d5a:	60c6      	str	r6, [r0, #12]
 8004d5c:	69e6      	ldr	r6, [r4, #28]
 8004d5e:	68f3      	ldr	r3, [r6, #12]
 8004d60:	b183      	cbz	r3, 8004d84 <_Balloc+0x50>
 8004d62:	69e3      	ldr	r3, [r4, #28]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d6a:	b9b8      	cbnz	r0, 8004d9c <_Balloc+0x68>
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	fa01 f605 	lsl.w	r6, r1, r5
 8004d72:	1d72      	adds	r2, r6, #5
 8004d74:	4620      	mov	r0, r4
 8004d76:	0092      	lsls	r2, r2, #2
 8004d78:	f000 fd6c 	bl	8005854 <_calloc_r>
 8004d7c:	b160      	cbz	r0, 8004d98 <_Balloc+0x64>
 8004d7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d82:	e00e      	b.n	8004da2 <_Balloc+0x6e>
 8004d84:	2221      	movs	r2, #33	@ 0x21
 8004d86:	2104      	movs	r1, #4
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f000 fd63 	bl	8005854 <_calloc_r>
 8004d8e:	69e3      	ldr	r3, [r4, #28]
 8004d90:	60f0      	str	r0, [r6, #12]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e4      	bne.n	8004d62 <_Balloc+0x2e>
 8004d98:	2000      	movs	r0, #0
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	6802      	ldr	r2, [r0, #0]
 8004d9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004da2:	2300      	movs	r3, #0
 8004da4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004da8:	e7f7      	b.n	8004d9a <_Balloc+0x66>
 8004daa:	bf00      	nop
 8004dac:	08005b6f 	.word	0x08005b6f
 8004db0:	08005bef 	.word	0x08005bef

08004db4 <_Bfree>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	69c6      	ldr	r6, [r0, #28]
 8004db8:	4605      	mov	r5, r0
 8004dba:	460c      	mov	r4, r1
 8004dbc:	b976      	cbnz	r6, 8004ddc <_Bfree+0x28>
 8004dbe:	2010      	movs	r0, #16
 8004dc0:	f7ff ff02 	bl	8004bc8 <malloc>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	61e8      	str	r0, [r5, #28]
 8004dc8:	b920      	cbnz	r0, 8004dd4 <_Bfree+0x20>
 8004dca:	218f      	movs	r1, #143	@ 0x8f
 8004dcc:	4b08      	ldr	r3, [pc, #32]	@ (8004df0 <_Bfree+0x3c>)
 8004dce:	4809      	ldr	r0, [pc, #36]	@ (8004df4 <_Bfree+0x40>)
 8004dd0:	f000 fd22 	bl	8005818 <__assert_func>
 8004dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dd8:	6006      	str	r6, [r0, #0]
 8004dda:	60c6      	str	r6, [r0, #12]
 8004ddc:	b13c      	cbz	r4, 8004dee <_Bfree+0x3a>
 8004dde:	69eb      	ldr	r3, [r5, #28]
 8004de0:	6862      	ldr	r2, [r4, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004de8:	6021      	str	r1, [r4, #0]
 8004dea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	08005b6f 	.word	0x08005b6f
 8004df4:	08005bef 	.word	0x08005bef

08004df8 <__multadd>:
 8004df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	461e      	mov	r6, r3
 8004e02:	2000      	movs	r0, #0
 8004e04:	690d      	ldr	r5, [r1, #16]
 8004e06:	f101 0c14 	add.w	ip, r1, #20
 8004e0a:	f8dc 3000 	ldr.w	r3, [ip]
 8004e0e:	3001      	adds	r0, #1
 8004e10:	b299      	uxth	r1, r3
 8004e12:	fb02 6101 	mla	r1, r2, r1, r6
 8004e16:	0c1e      	lsrs	r6, r3, #16
 8004e18:	0c0b      	lsrs	r3, r1, #16
 8004e1a:	fb02 3306 	mla	r3, r2, r6, r3
 8004e1e:	b289      	uxth	r1, r1
 8004e20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e24:	4285      	cmp	r5, r0
 8004e26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e2a:	f84c 1b04 	str.w	r1, [ip], #4
 8004e2e:	dcec      	bgt.n	8004e0a <__multadd+0x12>
 8004e30:	b30e      	cbz	r6, 8004e76 <__multadd+0x7e>
 8004e32:	68a3      	ldr	r3, [r4, #8]
 8004e34:	42ab      	cmp	r3, r5
 8004e36:	dc19      	bgt.n	8004e6c <__multadd+0x74>
 8004e38:	6861      	ldr	r1, [r4, #4]
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	3101      	adds	r1, #1
 8004e3e:	f7ff ff79 	bl	8004d34 <_Balloc>
 8004e42:	4680      	mov	r8, r0
 8004e44:	b928      	cbnz	r0, 8004e52 <__multadd+0x5a>
 8004e46:	4602      	mov	r2, r0
 8004e48:	21ba      	movs	r1, #186	@ 0xba
 8004e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e7c <__multadd+0x84>)
 8004e4c:	480c      	ldr	r0, [pc, #48]	@ (8004e80 <__multadd+0x88>)
 8004e4e:	f000 fce3 	bl	8005818 <__assert_func>
 8004e52:	6922      	ldr	r2, [r4, #16]
 8004e54:	f104 010c 	add.w	r1, r4, #12
 8004e58:	3202      	adds	r2, #2
 8004e5a:	0092      	lsls	r2, r2, #2
 8004e5c:	300c      	adds	r0, #12
 8004e5e:	f000 fccd 	bl	80057fc <memcpy>
 8004e62:	4621      	mov	r1, r4
 8004e64:	4638      	mov	r0, r7
 8004e66:	f7ff ffa5 	bl	8004db4 <_Bfree>
 8004e6a:	4644      	mov	r4, r8
 8004e6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004e70:	3501      	adds	r5, #1
 8004e72:	615e      	str	r6, [r3, #20]
 8004e74:	6125      	str	r5, [r4, #16]
 8004e76:	4620      	mov	r0, r4
 8004e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e7c:	08005bde 	.word	0x08005bde
 8004e80:	08005bef 	.word	0x08005bef

08004e84 <__hi0bits>:
 8004e84:	4603      	mov	r3, r0
 8004e86:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004e8a:	bf3a      	itte	cc
 8004e8c:	0403      	lslcc	r3, r0, #16
 8004e8e:	2010      	movcc	r0, #16
 8004e90:	2000      	movcs	r0, #0
 8004e92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e96:	bf3c      	itt	cc
 8004e98:	021b      	lslcc	r3, r3, #8
 8004e9a:	3008      	addcc	r0, #8
 8004e9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ea0:	bf3c      	itt	cc
 8004ea2:	011b      	lslcc	r3, r3, #4
 8004ea4:	3004      	addcc	r0, #4
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eaa:	bf3c      	itt	cc
 8004eac:	009b      	lslcc	r3, r3, #2
 8004eae:	3002      	addcc	r0, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	db05      	blt.n	8004ec0 <__hi0bits+0x3c>
 8004eb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004eb8:	f100 0001 	add.w	r0, r0, #1
 8004ebc:	bf08      	it	eq
 8004ebe:	2020      	moveq	r0, #32
 8004ec0:	4770      	bx	lr

08004ec2 <__lo0bits>:
 8004ec2:	6803      	ldr	r3, [r0, #0]
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	f013 0007 	ands.w	r0, r3, #7
 8004eca:	d00b      	beq.n	8004ee4 <__lo0bits+0x22>
 8004ecc:	07d9      	lsls	r1, r3, #31
 8004ece:	d421      	bmi.n	8004f14 <__lo0bits+0x52>
 8004ed0:	0798      	lsls	r0, r3, #30
 8004ed2:	bf49      	itett	mi
 8004ed4:	085b      	lsrmi	r3, r3, #1
 8004ed6:	089b      	lsrpl	r3, r3, #2
 8004ed8:	2001      	movmi	r0, #1
 8004eda:	6013      	strmi	r3, [r2, #0]
 8004edc:	bf5c      	itt	pl
 8004ede:	2002      	movpl	r0, #2
 8004ee0:	6013      	strpl	r3, [r2, #0]
 8004ee2:	4770      	bx	lr
 8004ee4:	b299      	uxth	r1, r3
 8004ee6:	b909      	cbnz	r1, 8004eec <__lo0bits+0x2a>
 8004ee8:	2010      	movs	r0, #16
 8004eea:	0c1b      	lsrs	r3, r3, #16
 8004eec:	b2d9      	uxtb	r1, r3
 8004eee:	b909      	cbnz	r1, 8004ef4 <__lo0bits+0x32>
 8004ef0:	3008      	adds	r0, #8
 8004ef2:	0a1b      	lsrs	r3, r3, #8
 8004ef4:	0719      	lsls	r1, r3, #28
 8004ef6:	bf04      	itt	eq
 8004ef8:	091b      	lsreq	r3, r3, #4
 8004efa:	3004      	addeq	r0, #4
 8004efc:	0799      	lsls	r1, r3, #30
 8004efe:	bf04      	itt	eq
 8004f00:	089b      	lsreq	r3, r3, #2
 8004f02:	3002      	addeq	r0, #2
 8004f04:	07d9      	lsls	r1, r3, #31
 8004f06:	d403      	bmi.n	8004f10 <__lo0bits+0x4e>
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	f100 0001 	add.w	r0, r0, #1
 8004f0e:	d003      	beq.n	8004f18 <__lo0bits+0x56>
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	4770      	bx	lr
 8004f14:	2000      	movs	r0, #0
 8004f16:	4770      	bx	lr
 8004f18:	2020      	movs	r0, #32
 8004f1a:	4770      	bx	lr

08004f1c <__i2b>:
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	460c      	mov	r4, r1
 8004f20:	2101      	movs	r1, #1
 8004f22:	f7ff ff07 	bl	8004d34 <_Balloc>
 8004f26:	4602      	mov	r2, r0
 8004f28:	b928      	cbnz	r0, 8004f36 <__i2b+0x1a>
 8004f2a:	f240 1145 	movw	r1, #325	@ 0x145
 8004f2e:	4b04      	ldr	r3, [pc, #16]	@ (8004f40 <__i2b+0x24>)
 8004f30:	4804      	ldr	r0, [pc, #16]	@ (8004f44 <__i2b+0x28>)
 8004f32:	f000 fc71 	bl	8005818 <__assert_func>
 8004f36:	2301      	movs	r3, #1
 8004f38:	6144      	str	r4, [r0, #20]
 8004f3a:	6103      	str	r3, [r0, #16]
 8004f3c:	bd10      	pop	{r4, pc}
 8004f3e:	bf00      	nop
 8004f40:	08005bde 	.word	0x08005bde
 8004f44:	08005bef 	.word	0x08005bef

08004f48 <__multiply>:
 8004f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	690a      	ldr	r2, [r1, #16]
 8004f50:	6923      	ldr	r3, [r4, #16]
 8004f52:	460f      	mov	r7, r1
 8004f54:	429a      	cmp	r2, r3
 8004f56:	bfa2      	ittt	ge
 8004f58:	4623      	movge	r3, r4
 8004f5a:	460c      	movge	r4, r1
 8004f5c:	461f      	movge	r7, r3
 8004f5e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004f62:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004f66:	68a3      	ldr	r3, [r4, #8]
 8004f68:	6861      	ldr	r1, [r4, #4]
 8004f6a:	eb0a 0609 	add.w	r6, sl, r9
 8004f6e:	42b3      	cmp	r3, r6
 8004f70:	b085      	sub	sp, #20
 8004f72:	bfb8      	it	lt
 8004f74:	3101      	addlt	r1, #1
 8004f76:	f7ff fedd 	bl	8004d34 <_Balloc>
 8004f7a:	b930      	cbnz	r0, 8004f8a <__multiply+0x42>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004f82:	4b43      	ldr	r3, [pc, #268]	@ (8005090 <__multiply+0x148>)
 8004f84:	4843      	ldr	r0, [pc, #268]	@ (8005094 <__multiply+0x14c>)
 8004f86:	f000 fc47 	bl	8005818 <__assert_func>
 8004f8a:	f100 0514 	add.w	r5, r0, #20
 8004f8e:	462b      	mov	r3, r5
 8004f90:	2200      	movs	r2, #0
 8004f92:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004f96:	4543      	cmp	r3, r8
 8004f98:	d321      	bcc.n	8004fde <__multiply+0x96>
 8004f9a:	f107 0114 	add.w	r1, r7, #20
 8004f9e:	f104 0214 	add.w	r2, r4, #20
 8004fa2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004fa6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004faa:	9302      	str	r3, [sp, #8]
 8004fac:	1b13      	subs	r3, r2, r4
 8004fae:	3b15      	subs	r3, #21
 8004fb0:	f023 0303 	bic.w	r3, r3, #3
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	f104 0715 	add.w	r7, r4, #21
 8004fba:	42ba      	cmp	r2, r7
 8004fbc:	bf38      	it	cc
 8004fbe:	2304      	movcc	r3, #4
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	9b02      	ldr	r3, [sp, #8]
 8004fc4:	9103      	str	r1, [sp, #12]
 8004fc6:	428b      	cmp	r3, r1
 8004fc8:	d80c      	bhi.n	8004fe4 <__multiply+0x9c>
 8004fca:	2e00      	cmp	r6, #0
 8004fcc:	dd03      	ble.n	8004fd6 <__multiply+0x8e>
 8004fce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d05a      	beq.n	800508c <__multiply+0x144>
 8004fd6:	6106      	str	r6, [r0, #16]
 8004fd8:	b005      	add	sp, #20
 8004fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fde:	f843 2b04 	str.w	r2, [r3], #4
 8004fe2:	e7d8      	b.n	8004f96 <__multiply+0x4e>
 8004fe4:	f8b1 a000 	ldrh.w	sl, [r1]
 8004fe8:	f1ba 0f00 	cmp.w	sl, #0
 8004fec:	d023      	beq.n	8005036 <__multiply+0xee>
 8004fee:	46a9      	mov	r9, r5
 8004ff0:	f04f 0c00 	mov.w	ip, #0
 8004ff4:	f104 0e14 	add.w	lr, r4, #20
 8004ff8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004ffc:	f8d9 3000 	ldr.w	r3, [r9]
 8005000:	fa1f fb87 	uxth.w	fp, r7
 8005004:	b29b      	uxth	r3, r3
 8005006:	fb0a 330b 	mla	r3, sl, fp, r3
 800500a:	4463      	add	r3, ip
 800500c:	f8d9 c000 	ldr.w	ip, [r9]
 8005010:	0c3f      	lsrs	r7, r7, #16
 8005012:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005016:	fb0a c707 	mla	r7, sl, r7, ip
 800501a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800501e:	b29b      	uxth	r3, r3
 8005020:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005024:	4572      	cmp	r2, lr
 8005026:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800502a:	f849 3b04 	str.w	r3, [r9], #4
 800502e:	d8e3      	bhi.n	8004ff8 <__multiply+0xb0>
 8005030:	9b01      	ldr	r3, [sp, #4]
 8005032:	f845 c003 	str.w	ip, [r5, r3]
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	3104      	adds	r1, #4
 800503a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800503e:	f1b9 0f00 	cmp.w	r9, #0
 8005042:	d021      	beq.n	8005088 <__multiply+0x140>
 8005044:	46ae      	mov	lr, r5
 8005046:	f04f 0a00 	mov.w	sl, #0
 800504a:	682b      	ldr	r3, [r5, #0]
 800504c:	f104 0c14 	add.w	ip, r4, #20
 8005050:	f8bc b000 	ldrh.w	fp, [ip]
 8005054:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005058:	b29b      	uxth	r3, r3
 800505a:	fb09 770b 	mla	r7, r9, fp, r7
 800505e:	4457      	add	r7, sl
 8005060:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005064:	f84e 3b04 	str.w	r3, [lr], #4
 8005068:	f85c 3b04 	ldr.w	r3, [ip], #4
 800506c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005070:	f8be 3000 	ldrh.w	r3, [lr]
 8005074:	4562      	cmp	r2, ip
 8005076:	fb09 330a 	mla	r3, r9, sl, r3
 800507a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800507e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005082:	d8e5      	bhi.n	8005050 <__multiply+0x108>
 8005084:	9f01      	ldr	r7, [sp, #4]
 8005086:	51eb      	str	r3, [r5, r7]
 8005088:	3504      	adds	r5, #4
 800508a:	e79a      	b.n	8004fc2 <__multiply+0x7a>
 800508c:	3e01      	subs	r6, #1
 800508e:	e79c      	b.n	8004fca <__multiply+0x82>
 8005090:	08005bde 	.word	0x08005bde
 8005094:	08005bef 	.word	0x08005bef

08005098 <__pow5mult>:
 8005098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800509c:	4615      	mov	r5, r2
 800509e:	f012 0203 	ands.w	r2, r2, #3
 80050a2:	4607      	mov	r7, r0
 80050a4:	460e      	mov	r6, r1
 80050a6:	d007      	beq.n	80050b8 <__pow5mult+0x20>
 80050a8:	4c25      	ldr	r4, [pc, #148]	@ (8005140 <__pow5mult+0xa8>)
 80050aa:	3a01      	subs	r2, #1
 80050ac:	2300      	movs	r3, #0
 80050ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80050b2:	f7ff fea1 	bl	8004df8 <__multadd>
 80050b6:	4606      	mov	r6, r0
 80050b8:	10ad      	asrs	r5, r5, #2
 80050ba:	d03d      	beq.n	8005138 <__pow5mult+0xa0>
 80050bc:	69fc      	ldr	r4, [r7, #28]
 80050be:	b97c      	cbnz	r4, 80050e0 <__pow5mult+0x48>
 80050c0:	2010      	movs	r0, #16
 80050c2:	f7ff fd81 	bl	8004bc8 <malloc>
 80050c6:	4602      	mov	r2, r0
 80050c8:	61f8      	str	r0, [r7, #28]
 80050ca:	b928      	cbnz	r0, 80050d8 <__pow5mult+0x40>
 80050cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80050d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005144 <__pow5mult+0xac>)
 80050d2:	481d      	ldr	r0, [pc, #116]	@ (8005148 <__pow5mult+0xb0>)
 80050d4:	f000 fba0 	bl	8005818 <__assert_func>
 80050d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050dc:	6004      	str	r4, [r0, #0]
 80050de:	60c4      	str	r4, [r0, #12]
 80050e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80050e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80050e8:	b94c      	cbnz	r4, 80050fe <__pow5mult+0x66>
 80050ea:	f240 2171 	movw	r1, #625	@ 0x271
 80050ee:	4638      	mov	r0, r7
 80050f0:	f7ff ff14 	bl	8004f1c <__i2b>
 80050f4:	2300      	movs	r3, #0
 80050f6:	4604      	mov	r4, r0
 80050f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80050fc:	6003      	str	r3, [r0, #0]
 80050fe:	f04f 0900 	mov.w	r9, #0
 8005102:	07eb      	lsls	r3, r5, #31
 8005104:	d50a      	bpl.n	800511c <__pow5mult+0x84>
 8005106:	4631      	mov	r1, r6
 8005108:	4622      	mov	r2, r4
 800510a:	4638      	mov	r0, r7
 800510c:	f7ff ff1c 	bl	8004f48 <__multiply>
 8005110:	4680      	mov	r8, r0
 8005112:	4631      	mov	r1, r6
 8005114:	4638      	mov	r0, r7
 8005116:	f7ff fe4d 	bl	8004db4 <_Bfree>
 800511a:	4646      	mov	r6, r8
 800511c:	106d      	asrs	r5, r5, #1
 800511e:	d00b      	beq.n	8005138 <__pow5mult+0xa0>
 8005120:	6820      	ldr	r0, [r4, #0]
 8005122:	b938      	cbnz	r0, 8005134 <__pow5mult+0x9c>
 8005124:	4622      	mov	r2, r4
 8005126:	4621      	mov	r1, r4
 8005128:	4638      	mov	r0, r7
 800512a:	f7ff ff0d 	bl	8004f48 <__multiply>
 800512e:	6020      	str	r0, [r4, #0]
 8005130:	f8c0 9000 	str.w	r9, [r0]
 8005134:	4604      	mov	r4, r0
 8005136:	e7e4      	b.n	8005102 <__pow5mult+0x6a>
 8005138:	4630      	mov	r0, r6
 800513a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800513e:	bf00      	nop
 8005140:	08005c48 	.word	0x08005c48
 8005144:	08005b6f 	.word	0x08005b6f
 8005148:	08005bef 	.word	0x08005bef

0800514c <__lshift>:
 800514c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005150:	460c      	mov	r4, r1
 8005152:	4607      	mov	r7, r0
 8005154:	4691      	mov	r9, r2
 8005156:	6923      	ldr	r3, [r4, #16]
 8005158:	6849      	ldr	r1, [r1, #4]
 800515a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800515e:	68a3      	ldr	r3, [r4, #8]
 8005160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005164:	f108 0601 	add.w	r6, r8, #1
 8005168:	42b3      	cmp	r3, r6
 800516a:	db0b      	blt.n	8005184 <__lshift+0x38>
 800516c:	4638      	mov	r0, r7
 800516e:	f7ff fde1 	bl	8004d34 <_Balloc>
 8005172:	4605      	mov	r5, r0
 8005174:	b948      	cbnz	r0, 800518a <__lshift+0x3e>
 8005176:	4602      	mov	r2, r0
 8005178:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800517c:	4b27      	ldr	r3, [pc, #156]	@ (800521c <__lshift+0xd0>)
 800517e:	4828      	ldr	r0, [pc, #160]	@ (8005220 <__lshift+0xd4>)
 8005180:	f000 fb4a 	bl	8005818 <__assert_func>
 8005184:	3101      	adds	r1, #1
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	e7ee      	b.n	8005168 <__lshift+0x1c>
 800518a:	2300      	movs	r3, #0
 800518c:	f100 0114 	add.w	r1, r0, #20
 8005190:	f100 0210 	add.w	r2, r0, #16
 8005194:	4618      	mov	r0, r3
 8005196:	4553      	cmp	r3, sl
 8005198:	db33      	blt.n	8005202 <__lshift+0xb6>
 800519a:	6920      	ldr	r0, [r4, #16]
 800519c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051a0:	f104 0314 	add.w	r3, r4, #20
 80051a4:	f019 091f 	ands.w	r9, r9, #31
 80051a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80051ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80051b0:	d02b      	beq.n	800520a <__lshift+0xbe>
 80051b2:	468a      	mov	sl, r1
 80051b4:	2200      	movs	r2, #0
 80051b6:	f1c9 0e20 	rsb	lr, r9, #32
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	fa00 f009 	lsl.w	r0, r0, r9
 80051c0:	4310      	orrs	r0, r2
 80051c2:	f84a 0b04 	str.w	r0, [sl], #4
 80051c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ca:	459c      	cmp	ip, r3
 80051cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80051d0:	d8f3      	bhi.n	80051ba <__lshift+0x6e>
 80051d2:	ebac 0304 	sub.w	r3, ip, r4
 80051d6:	3b15      	subs	r3, #21
 80051d8:	f023 0303 	bic.w	r3, r3, #3
 80051dc:	3304      	adds	r3, #4
 80051de:	f104 0015 	add.w	r0, r4, #21
 80051e2:	4584      	cmp	ip, r0
 80051e4:	bf38      	it	cc
 80051e6:	2304      	movcc	r3, #4
 80051e8:	50ca      	str	r2, [r1, r3]
 80051ea:	b10a      	cbz	r2, 80051f0 <__lshift+0xa4>
 80051ec:	f108 0602 	add.w	r6, r8, #2
 80051f0:	3e01      	subs	r6, #1
 80051f2:	4638      	mov	r0, r7
 80051f4:	4621      	mov	r1, r4
 80051f6:	612e      	str	r6, [r5, #16]
 80051f8:	f7ff fddc 	bl	8004db4 <_Bfree>
 80051fc:	4628      	mov	r0, r5
 80051fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005202:	f842 0f04 	str.w	r0, [r2, #4]!
 8005206:	3301      	adds	r3, #1
 8005208:	e7c5      	b.n	8005196 <__lshift+0x4a>
 800520a:	3904      	subs	r1, #4
 800520c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005210:	459c      	cmp	ip, r3
 8005212:	f841 2f04 	str.w	r2, [r1, #4]!
 8005216:	d8f9      	bhi.n	800520c <__lshift+0xc0>
 8005218:	e7ea      	b.n	80051f0 <__lshift+0xa4>
 800521a:	bf00      	nop
 800521c:	08005bde 	.word	0x08005bde
 8005220:	08005bef 	.word	0x08005bef

08005224 <__mcmp>:
 8005224:	4603      	mov	r3, r0
 8005226:	690a      	ldr	r2, [r1, #16]
 8005228:	6900      	ldr	r0, [r0, #16]
 800522a:	b530      	push	{r4, r5, lr}
 800522c:	1a80      	subs	r0, r0, r2
 800522e:	d10e      	bne.n	800524e <__mcmp+0x2a>
 8005230:	3314      	adds	r3, #20
 8005232:	3114      	adds	r1, #20
 8005234:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005238:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800523c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005240:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005244:	4295      	cmp	r5, r2
 8005246:	d003      	beq.n	8005250 <__mcmp+0x2c>
 8005248:	d205      	bcs.n	8005256 <__mcmp+0x32>
 800524a:	f04f 30ff 	mov.w	r0, #4294967295
 800524e:	bd30      	pop	{r4, r5, pc}
 8005250:	42a3      	cmp	r3, r4
 8005252:	d3f3      	bcc.n	800523c <__mcmp+0x18>
 8005254:	e7fb      	b.n	800524e <__mcmp+0x2a>
 8005256:	2001      	movs	r0, #1
 8005258:	e7f9      	b.n	800524e <__mcmp+0x2a>
	...

0800525c <__mdiff>:
 800525c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005260:	4689      	mov	r9, r1
 8005262:	4606      	mov	r6, r0
 8005264:	4611      	mov	r1, r2
 8005266:	4648      	mov	r0, r9
 8005268:	4614      	mov	r4, r2
 800526a:	f7ff ffdb 	bl	8005224 <__mcmp>
 800526e:	1e05      	subs	r5, r0, #0
 8005270:	d112      	bne.n	8005298 <__mdiff+0x3c>
 8005272:	4629      	mov	r1, r5
 8005274:	4630      	mov	r0, r6
 8005276:	f7ff fd5d 	bl	8004d34 <_Balloc>
 800527a:	4602      	mov	r2, r0
 800527c:	b928      	cbnz	r0, 800528a <__mdiff+0x2e>
 800527e:	f240 2137 	movw	r1, #567	@ 0x237
 8005282:	4b3e      	ldr	r3, [pc, #248]	@ (800537c <__mdiff+0x120>)
 8005284:	483e      	ldr	r0, [pc, #248]	@ (8005380 <__mdiff+0x124>)
 8005286:	f000 fac7 	bl	8005818 <__assert_func>
 800528a:	2301      	movs	r3, #1
 800528c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005290:	4610      	mov	r0, r2
 8005292:	b003      	add	sp, #12
 8005294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005298:	bfbc      	itt	lt
 800529a:	464b      	movlt	r3, r9
 800529c:	46a1      	movlt	r9, r4
 800529e:	4630      	mov	r0, r6
 80052a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80052a4:	bfba      	itte	lt
 80052a6:	461c      	movlt	r4, r3
 80052a8:	2501      	movlt	r5, #1
 80052aa:	2500      	movge	r5, #0
 80052ac:	f7ff fd42 	bl	8004d34 <_Balloc>
 80052b0:	4602      	mov	r2, r0
 80052b2:	b918      	cbnz	r0, 80052bc <__mdiff+0x60>
 80052b4:	f240 2145 	movw	r1, #581	@ 0x245
 80052b8:	4b30      	ldr	r3, [pc, #192]	@ (800537c <__mdiff+0x120>)
 80052ba:	e7e3      	b.n	8005284 <__mdiff+0x28>
 80052bc:	f100 0b14 	add.w	fp, r0, #20
 80052c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80052c4:	f109 0310 	add.w	r3, r9, #16
 80052c8:	60c5      	str	r5, [r0, #12]
 80052ca:	f04f 0c00 	mov.w	ip, #0
 80052ce:	f109 0514 	add.w	r5, r9, #20
 80052d2:	46d9      	mov	r9, fp
 80052d4:	6926      	ldr	r6, [r4, #16]
 80052d6:	f104 0e14 	add.w	lr, r4, #20
 80052da:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80052de:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	9b01      	ldr	r3, [sp, #4]
 80052e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80052ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80052ee:	b281      	uxth	r1, r0
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	fa1f f38a 	uxth.w	r3, sl
 80052f6:	1a5b      	subs	r3, r3, r1
 80052f8:	0c00      	lsrs	r0, r0, #16
 80052fa:	4463      	add	r3, ip
 80052fc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005300:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005304:	b29b      	uxth	r3, r3
 8005306:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800530a:	4576      	cmp	r6, lr
 800530c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005310:	f849 3b04 	str.w	r3, [r9], #4
 8005314:	d8e6      	bhi.n	80052e4 <__mdiff+0x88>
 8005316:	1b33      	subs	r3, r6, r4
 8005318:	3b15      	subs	r3, #21
 800531a:	f023 0303 	bic.w	r3, r3, #3
 800531e:	3415      	adds	r4, #21
 8005320:	3304      	adds	r3, #4
 8005322:	42a6      	cmp	r6, r4
 8005324:	bf38      	it	cc
 8005326:	2304      	movcc	r3, #4
 8005328:	441d      	add	r5, r3
 800532a:	445b      	add	r3, fp
 800532c:	461e      	mov	r6, r3
 800532e:	462c      	mov	r4, r5
 8005330:	4544      	cmp	r4, r8
 8005332:	d30e      	bcc.n	8005352 <__mdiff+0xf6>
 8005334:	f108 0103 	add.w	r1, r8, #3
 8005338:	1b49      	subs	r1, r1, r5
 800533a:	f021 0103 	bic.w	r1, r1, #3
 800533e:	3d03      	subs	r5, #3
 8005340:	45a8      	cmp	r8, r5
 8005342:	bf38      	it	cc
 8005344:	2100      	movcc	r1, #0
 8005346:	440b      	add	r3, r1
 8005348:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800534c:	b199      	cbz	r1, 8005376 <__mdiff+0x11a>
 800534e:	6117      	str	r7, [r2, #16]
 8005350:	e79e      	b.n	8005290 <__mdiff+0x34>
 8005352:	46e6      	mov	lr, ip
 8005354:	f854 1b04 	ldr.w	r1, [r4], #4
 8005358:	fa1f fc81 	uxth.w	ip, r1
 800535c:	44f4      	add	ip, lr
 800535e:	0c08      	lsrs	r0, r1, #16
 8005360:	4471      	add	r1, lr
 8005362:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005366:	b289      	uxth	r1, r1
 8005368:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800536c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005370:	f846 1b04 	str.w	r1, [r6], #4
 8005374:	e7dc      	b.n	8005330 <__mdiff+0xd4>
 8005376:	3f01      	subs	r7, #1
 8005378:	e7e6      	b.n	8005348 <__mdiff+0xec>
 800537a:	bf00      	nop
 800537c:	08005bde 	.word	0x08005bde
 8005380:	08005bef 	.word	0x08005bef

08005384 <__d2b>:
 8005384:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005388:	2101      	movs	r1, #1
 800538a:	4690      	mov	r8, r2
 800538c:	4699      	mov	r9, r3
 800538e:	9e08      	ldr	r6, [sp, #32]
 8005390:	f7ff fcd0 	bl	8004d34 <_Balloc>
 8005394:	4604      	mov	r4, r0
 8005396:	b930      	cbnz	r0, 80053a6 <__d2b+0x22>
 8005398:	4602      	mov	r2, r0
 800539a:	f240 310f 	movw	r1, #783	@ 0x30f
 800539e:	4b23      	ldr	r3, [pc, #140]	@ (800542c <__d2b+0xa8>)
 80053a0:	4823      	ldr	r0, [pc, #140]	@ (8005430 <__d2b+0xac>)
 80053a2:	f000 fa39 	bl	8005818 <__assert_func>
 80053a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80053aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053ae:	b10d      	cbz	r5, 80053b4 <__d2b+0x30>
 80053b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	f1b8 0300 	subs.w	r3, r8, #0
 80053ba:	d024      	beq.n	8005406 <__d2b+0x82>
 80053bc:	4668      	mov	r0, sp
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	f7ff fd7f 	bl	8004ec2 <__lo0bits>
 80053c4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80053c8:	b1d8      	cbz	r0, 8005402 <__d2b+0x7e>
 80053ca:	f1c0 0320 	rsb	r3, r0, #32
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	430b      	orrs	r3, r1
 80053d4:	40c2      	lsrs	r2, r0
 80053d6:	6163      	str	r3, [r4, #20]
 80053d8:	9201      	str	r2, [sp, #4]
 80053da:	9b01      	ldr	r3, [sp, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	bf0c      	ite	eq
 80053e0:	2201      	moveq	r2, #1
 80053e2:	2202      	movne	r2, #2
 80053e4:	61a3      	str	r3, [r4, #24]
 80053e6:	6122      	str	r2, [r4, #16]
 80053e8:	b1ad      	cbz	r5, 8005416 <__d2b+0x92>
 80053ea:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80053ee:	4405      	add	r5, r0
 80053f0:	6035      	str	r5, [r6, #0]
 80053f2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80053f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053f8:	6018      	str	r0, [r3, #0]
 80053fa:	4620      	mov	r0, r4
 80053fc:	b002      	add	sp, #8
 80053fe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005402:	6161      	str	r1, [r4, #20]
 8005404:	e7e9      	b.n	80053da <__d2b+0x56>
 8005406:	a801      	add	r0, sp, #4
 8005408:	f7ff fd5b 	bl	8004ec2 <__lo0bits>
 800540c:	9b01      	ldr	r3, [sp, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	6163      	str	r3, [r4, #20]
 8005412:	3020      	adds	r0, #32
 8005414:	e7e7      	b.n	80053e6 <__d2b+0x62>
 8005416:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800541a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800541e:	6030      	str	r0, [r6, #0]
 8005420:	6918      	ldr	r0, [r3, #16]
 8005422:	f7ff fd2f 	bl	8004e84 <__hi0bits>
 8005426:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800542a:	e7e4      	b.n	80053f6 <__d2b+0x72>
 800542c:	08005bde 	.word	0x08005bde
 8005430:	08005bef 	.word	0x08005bef

08005434 <__sfputc_r>:
 8005434:	6893      	ldr	r3, [r2, #8]
 8005436:	b410      	push	{r4}
 8005438:	3b01      	subs	r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	6093      	str	r3, [r2, #8]
 800543e:	da07      	bge.n	8005450 <__sfputc_r+0x1c>
 8005440:	6994      	ldr	r4, [r2, #24]
 8005442:	42a3      	cmp	r3, r4
 8005444:	db01      	blt.n	800544a <__sfputc_r+0x16>
 8005446:	290a      	cmp	r1, #10
 8005448:	d102      	bne.n	8005450 <__sfputc_r+0x1c>
 800544a:	bc10      	pop	{r4}
 800544c:	f000 b932 	b.w	80056b4 <__swbuf_r>
 8005450:	6813      	ldr	r3, [r2, #0]
 8005452:	1c58      	adds	r0, r3, #1
 8005454:	6010      	str	r0, [r2, #0]
 8005456:	7019      	strb	r1, [r3, #0]
 8005458:	4608      	mov	r0, r1
 800545a:	bc10      	pop	{r4}
 800545c:	4770      	bx	lr

0800545e <__sfputs_r>:
 800545e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005460:	4606      	mov	r6, r0
 8005462:	460f      	mov	r7, r1
 8005464:	4614      	mov	r4, r2
 8005466:	18d5      	adds	r5, r2, r3
 8005468:	42ac      	cmp	r4, r5
 800546a:	d101      	bne.n	8005470 <__sfputs_r+0x12>
 800546c:	2000      	movs	r0, #0
 800546e:	e007      	b.n	8005480 <__sfputs_r+0x22>
 8005470:	463a      	mov	r2, r7
 8005472:	4630      	mov	r0, r6
 8005474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005478:	f7ff ffdc 	bl	8005434 <__sfputc_r>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d1f3      	bne.n	8005468 <__sfputs_r+0xa>
 8005480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005484 <_vfiprintf_r>:
 8005484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005488:	460d      	mov	r5, r1
 800548a:	4614      	mov	r4, r2
 800548c:	4698      	mov	r8, r3
 800548e:	4606      	mov	r6, r0
 8005490:	b09d      	sub	sp, #116	@ 0x74
 8005492:	b118      	cbz	r0, 800549c <_vfiprintf_r+0x18>
 8005494:	6a03      	ldr	r3, [r0, #32]
 8005496:	b90b      	cbnz	r3, 800549c <_vfiprintf_r+0x18>
 8005498:	f7fe fbe4 	bl	8003c64 <__sinit>
 800549c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800549e:	07d9      	lsls	r1, r3, #31
 80054a0:	d405      	bmi.n	80054ae <_vfiprintf_r+0x2a>
 80054a2:	89ab      	ldrh	r3, [r5, #12]
 80054a4:	059a      	lsls	r2, r3, #22
 80054a6:	d402      	bmi.n	80054ae <_vfiprintf_r+0x2a>
 80054a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054aa:	f7fe fce4 	bl	8003e76 <__retarget_lock_acquire_recursive>
 80054ae:	89ab      	ldrh	r3, [r5, #12]
 80054b0:	071b      	lsls	r3, r3, #28
 80054b2:	d501      	bpl.n	80054b8 <_vfiprintf_r+0x34>
 80054b4:	692b      	ldr	r3, [r5, #16]
 80054b6:	b99b      	cbnz	r3, 80054e0 <_vfiprintf_r+0x5c>
 80054b8:	4629      	mov	r1, r5
 80054ba:	4630      	mov	r0, r6
 80054bc:	f000 f938 	bl	8005730 <__swsetup_r>
 80054c0:	b170      	cbz	r0, 80054e0 <_vfiprintf_r+0x5c>
 80054c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054c4:	07dc      	lsls	r4, r3, #31
 80054c6:	d504      	bpl.n	80054d2 <_vfiprintf_r+0x4e>
 80054c8:	f04f 30ff 	mov.w	r0, #4294967295
 80054cc:	b01d      	add	sp, #116	@ 0x74
 80054ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d2:	89ab      	ldrh	r3, [r5, #12]
 80054d4:	0598      	lsls	r0, r3, #22
 80054d6:	d4f7      	bmi.n	80054c8 <_vfiprintf_r+0x44>
 80054d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054da:	f7fe fccd 	bl	8003e78 <__retarget_lock_release_recursive>
 80054de:	e7f3      	b.n	80054c8 <_vfiprintf_r+0x44>
 80054e0:	2300      	movs	r3, #0
 80054e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80054e4:	2320      	movs	r3, #32
 80054e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054ea:	2330      	movs	r3, #48	@ 0x30
 80054ec:	f04f 0901 	mov.w	r9, #1
 80054f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80054f4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80056a0 <_vfiprintf_r+0x21c>
 80054f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054fc:	4623      	mov	r3, r4
 80054fe:	469a      	mov	sl, r3
 8005500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005504:	b10a      	cbz	r2, 800550a <_vfiprintf_r+0x86>
 8005506:	2a25      	cmp	r2, #37	@ 0x25
 8005508:	d1f9      	bne.n	80054fe <_vfiprintf_r+0x7a>
 800550a:	ebba 0b04 	subs.w	fp, sl, r4
 800550e:	d00b      	beq.n	8005528 <_vfiprintf_r+0xa4>
 8005510:	465b      	mov	r3, fp
 8005512:	4622      	mov	r2, r4
 8005514:	4629      	mov	r1, r5
 8005516:	4630      	mov	r0, r6
 8005518:	f7ff ffa1 	bl	800545e <__sfputs_r>
 800551c:	3001      	adds	r0, #1
 800551e:	f000 80a7 	beq.w	8005670 <_vfiprintf_r+0x1ec>
 8005522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005524:	445a      	add	r2, fp
 8005526:	9209      	str	r2, [sp, #36]	@ 0x24
 8005528:	f89a 3000 	ldrb.w	r3, [sl]
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 809f 	beq.w	8005670 <_vfiprintf_r+0x1ec>
 8005532:	2300      	movs	r3, #0
 8005534:	f04f 32ff 	mov.w	r2, #4294967295
 8005538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800553c:	f10a 0a01 	add.w	sl, sl, #1
 8005540:	9304      	str	r3, [sp, #16]
 8005542:	9307      	str	r3, [sp, #28]
 8005544:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005548:	931a      	str	r3, [sp, #104]	@ 0x68
 800554a:	4654      	mov	r4, sl
 800554c:	2205      	movs	r2, #5
 800554e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005552:	4853      	ldr	r0, [pc, #332]	@ (80056a0 <_vfiprintf_r+0x21c>)
 8005554:	f7fe fc91 	bl	8003e7a <memchr>
 8005558:	9a04      	ldr	r2, [sp, #16]
 800555a:	b9d8      	cbnz	r0, 8005594 <_vfiprintf_r+0x110>
 800555c:	06d1      	lsls	r1, r2, #27
 800555e:	bf44      	itt	mi
 8005560:	2320      	movmi	r3, #32
 8005562:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005566:	0713      	lsls	r3, r2, #28
 8005568:	bf44      	itt	mi
 800556a:	232b      	movmi	r3, #43	@ 0x2b
 800556c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005570:	f89a 3000 	ldrb.w	r3, [sl]
 8005574:	2b2a      	cmp	r3, #42	@ 0x2a
 8005576:	d015      	beq.n	80055a4 <_vfiprintf_r+0x120>
 8005578:	4654      	mov	r4, sl
 800557a:	2000      	movs	r0, #0
 800557c:	f04f 0c0a 	mov.w	ip, #10
 8005580:	9a07      	ldr	r2, [sp, #28]
 8005582:	4621      	mov	r1, r4
 8005584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005588:	3b30      	subs	r3, #48	@ 0x30
 800558a:	2b09      	cmp	r3, #9
 800558c:	d94b      	bls.n	8005626 <_vfiprintf_r+0x1a2>
 800558e:	b1b0      	cbz	r0, 80055be <_vfiprintf_r+0x13a>
 8005590:	9207      	str	r2, [sp, #28]
 8005592:	e014      	b.n	80055be <_vfiprintf_r+0x13a>
 8005594:	eba0 0308 	sub.w	r3, r0, r8
 8005598:	fa09 f303 	lsl.w	r3, r9, r3
 800559c:	4313      	orrs	r3, r2
 800559e:	46a2      	mov	sl, r4
 80055a0:	9304      	str	r3, [sp, #16]
 80055a2:	e7d2      	b.n	800554a <_vfiprintf_r+0xc6>
 80055a4:	9b03      	ldr	r3, [sp, #12]
 80055a6:	1d19      	adds	r1, r3, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	9103      	str	r1, [sp, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bfbb      	ittet	lt
 80055b0:	425b      	neglt	r3, r3
 80055b2:	f042 0202 	orrlt.w	r2, r2, #2
 80055b6:	9307      	strge	r3, [sp, #28]
 80055b8:	9307      	strlt	r3, [sp, #28]
 80055ba:	bfb8      	it	lt
 80055bc:	9204      	strlt	r2, [sp, #16]
 80055be:	7823      	ldrb	r3, [r4, #0]
 80055c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80055c2:	d10a      	bne.n	80055da <_vfiprintf_r+0x156>
 80055c4:	7863      	ldrb	r3, [r4, #1]
 80055c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80055c8:	d132      	bne.n	8005630 <_vfiprintf_r+0x1ac>
 80055ca:	9b03      	ldr	r3, [sp, #12]
 80055cc:	3402      	adds	r4, #2
 80055ce:	1d1a      	adds	r2, r3, #4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	9203      	str	r2, [sp, #12]
 80055d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055d8:	9305      	str	r3, [sp, #20]
 80055da:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80056a4 <_vfiprintf_r+0x220>
 80055de:	2203      	movs	r2, #3
 80055e0:	4650      	mov	r0, sl
 80055e2:	7821      	ldrb	r1, [r4, #0]
 80055e4:	f7fe fc49 	bl	8003e7a <memchr>
 80055e8:	b138      	cbz	r0, 80055fa <_vfiprintf_r+0x176>
 80055ea:	2240      	movs	r2, #64	@ 0x40
 80055ec:	9b04      	ldr	r3, [sp, #16]
 80055ee:	eba0 000a 	sub.w	r0, r0, sl
 80055f2:	4082      	lsls	r2, r0
 80055f4:	4313      	orrs	r3, r2
 80055f6:	3401      	adds	r4, #1
 80055f8:	9304      	str	r3, [sp, #16]
 80055fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055fe:	2206      	movs	r2, #6
 8005600:	4829      	ldr	r0, [pc, #164]	@ (80056a8 <_vfiprintf_r+0x224>)
 8005602:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005606:	f7fe fc38 	bl	8003e7a <memchr>
 800560a:	2800      	cmp	r0, #0
 800560c:	d03f      	beq.n	800568e <_vfiprintf_r+0x20a>
 800560e:	4b27      	ldr	r3, [pc, #156]	@ (80056ac <_vfiprintf_r+0x228>)
 8005610:	bb1b      	cbnz	r3, 800565a <_vfiprintf_r+0x1d6>
 8005612:	9b03      	ldr	r3, [sp, #12]
 8005614:	3307      	adds	r3, #7
 8005616:	f023 0307 	bic.w	r3, r3, #7
 800561a:	3308      	adds	r3, #8
 800561c:	9303      	str	r3, [sp, #12]
 800561e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005620:	443b      	add	r3, r7
 8005622:	9309      	str	r3, [sp, #36]	@ 0x24
 8005624:	e76a      	b.n	80054fc <_vfiprintf_r+0x78>
 8005626:	460c      	mov	r4, r1
 8005628:	2001      	movs	r0, #1
 800562a:	fb0c 3202 	mla	r2, ip, r2, r3
 800562e:	e7a8      	b.n	8005582 <_vfiprintf_r+0xfe>
 8005630:	2300      	movs	r3, #0
 8005632:	f04f 0c0a 	mov.w	ip, #10
 8005636:	4619      	mov	r1, r3
 8005638:	3401      	adds	r4, #1
 800563a:	9305      	str	r3, [sp, #20]
 800563c:	4620      	mov	r0, r4
 800563e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005642:	3a30      	subs	r2, #48	@ 0x30
 8005644:	2a09      	cmp	r2, #9
 8005646:	d903      	bls.n	8005650 <_vfiprintf_r+0x1cc>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0c6      	beq.n	80055da <_vfiprintf_r+0x156>
 800564c:	9105      	str	r1, [sp, #20]
 800564e:	e7c4      	b.n	80055da <_vfiprintf_r+0x156>
 8005650:	4604      	mov	r4, r0
 8005652:	2301      	movs	r3, #1
 8005654:	fb0c 2101 	mla	r1, ip, r1, r2
 8005658:	e7f0      	b.n	800563c <_vfiprintf_r+0x1b8>
 800565a:	ab03      	add	r3, sp, #12
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	462a      	mov	r2, r5
 8005660:	4630      	mov	r0, r6
 8005662:	4b13      	ldr	r3, [pc, #76]	@ (80056b0 <_vfiprintf_r+0x22c>)
 8005664:	a904      	add	r1, sp, #16
 8005666:	f7fd fdf7 	bl	8003258 <_printf_float>
 800566a:	4607      	mov	r7, r0
 800566c:	1c78      	adds	r0, r7, #1
 800566e:	d1d6      	bne.n	800561e <_vfiprintf_r+0x19a>
 8005670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005672:	07d9      	lsls	r1, r3, #31
 8005674:	d405      	bmi.n	8005682 <_vfiprintf_r+0x1fe>
 8005676:	89ab      	ldrh	r3, [r5, #12]
 8005678:	059a      	lsls	r2, r3, #22
 800567a:	d402      	bmi.n	8005682 <_vfiprintf_r+0x1fe>
 800567c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800567e:	f7fe fbfb 	bl	8003e78 <__retarget_lock_release_recursive>
 8005682:	89ab      	ldrh	r3, [r5, #12]
 8005684:	065b      	lsls	r3, r3, #25
 8005686:	f53f af1f 	bmi.w	80054c8 <_vfiprintf_r+0x44>
 800568a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800568c:	e71e      	b.n	80054cc <_vfiprintf_r+0x48>
 800568e:	ab03      	add	r3, sp, #12
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	462a      	mov	r2, r5
 8005694:	4630      	mov	r0, r6
 8005696:	4b06      	ldr	r3, [pc, #24]	@ (80056b0 <_vfiprintf_r+0x22c>)
 8005698:	a904      	add	r1, sp, #16
 800569a:	f7fe f87b 	bl	8003794 <_printf_i>
 800569e:	e7e4      	b.n	800566a <_vfiprintf_r+0x1e6>
 80056a0:	08005d48 	.word	0x08005d48
 80056a4:	08005d4e 	.word	0x08005d4e
 80056a8:	08005d52 	.word	0x08005d52
 80056ac:	08003259 	.word	0x08003259
 80056b0:	0800545f 	.word	0x0800545f

080056b4 <__swbuf_r>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	460e      	mov	r6, r1
 80056b8:	4614      	mov	r4, r2
 80056ba:	4605      	mov	r5, r0
 80056bc:	b118      	cbz	r0, 80056c6 <__swbuf_r+0x12>
 80056be:	6a03      	ldr	r3, [r0, #32]
 80056c0:	b90b      	cbnz	r3, 80056c6 <__swbuf_r+0x12>
 80056c2:	f7fe facf 	bl	8003c64 <__sinit>
 80056c6:	69a3      	ldr	r3, [r4, #24]
 80056c8:	60a3      	str	r3, [r4, #8]
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	071a      	lsls	r2, r3, #28
 80056ce:	d501      	bpl.n	80056d4 <__swbuf_r+0x20>
 80056d0:	6923      	ldr	r3, [r4, #16]
 80056d2:	b943      	cbnz	r3, 80056e6 <__swbuf_r+0x32>
 80056d4:	4621      	mov	r1, r4
 80056d6:	4628      	mov	r0, r5
 80056d8:	f000 f82a 	bl	8005730 <__swsetup_r>
 80056dc:	b118      	cbz	r0, 80056e6 <__swbuf_r+0x32>
 80056de:	f04f 37ff 	mov.w	r7, #4294967295
 80056e2:	4638      	mov	r0, r7
 80056e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	6922      	ldr	r2, [r4, #16]
 80056ea:	b2f6      	uxtb	r6, r6
 80056ec:	1a98      	subs	r0, r3, r2
 80056ee:	6963      	ldr	r3, [r4, #20]
 80056f0:	4637      	mov	r7, r6
 80056f2:	4283      	cmp	r3, r0
 80056f4:	dc05      	bgt.n	8005702 <__swbuf_r+0x4e>
 80056f6:	4621      	mov	r1, r4
 80056f8:	4628      	mov	r0, r5
 80056fa:	f7fe f9eb 	bl	8003ad4 <_fflush_r>
 80056fe:	2800      	cmp	r0, #0
 8005700:	d1ed      	bne.n	80056de <__swbuf_r+0x2a>
 8005702:	68a3      	ldr	r3, [r4, #8]
 8005704:	3b01      	subs	r3, #1
 8005706:	60a3      	str	r3, [r4, #8]
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	6022      	str	r2, [r4, #0]
 800570e:	701e      	strb	r6, [r3, #0]
 8005710:	6962      	ldr	r2, [r4, #20]
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	429a      	cmp	r2, r3
 8005716:	d004      	beq.n	8005722 <__swbuf_r+0x6e>
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	07db      	lsls	r3, r3, #31
 800571c:	d5e1      	bpl.n	80056e2 <__swbuf_r+0x2e>
 800571e:	2e0a      	cmp	r6, #10
 8005720:	d1df      	bne.n	80056e2 <__swbuf_r+0x2e>
 8005722:	4621      	mov	r1, r4
 8005724:	4628      	mov	r0, r5
 8005726:	f7fe f9d5 	bl	8003ad4 <_fflush_r>
 800572a:	2800      	cmp	r0, #0
 800572c:	d0d9      	beq.n	80056e2 <__swbuf_r+0x2e>
 800572e:	e7d6      	b.n	80056de <__swbuf_r+0x2a>

08005730 <__swsetup_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4b29      	ldr	r3, [pc, #164]	@ (80057d8 <__swsetup_r+0xa8>)
 8005734:	4605      	mov	r5, r0
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	460c      	mov	r4, r1
 800573a:	b118      	cbz	r0, 8005744 <__swsetup_r+0x14>
 800573c:	6a03      	ldr	r3, [r0, #32]
 800573e:	b90b      	cbnz	r3, 8005744 <__swsetup_r+0x14>
 8005740:	f7fe fa90 	bl	8003c64 <__sinit>
 8005744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005748:	0719      	lsls	r1, r3, #28
 800574a:	d422      	bmi.n	8005792 <__swsetup_r+0x62>
 800574c:	06da      	lsls	r2, r3, #27
 800574e:	d407      	bmi.n	8005760 <__swsetup_r+0x30>
 8005750:	2209      	movs	r2, #9
 8005752:	602a      	str	r2, [r5, #0]
 8005754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005758:	f04f 30ff 	mov.w	r0, #4294967295
 800575c:	81a3      	strh	r3, [r4, #12]
 800575e:	e033      	b.n	80057c8 <__swsetup_r+0x98>
 8005760:	0758      	lsls	r0, r3, #29
 8005762:	d512      	bpl.n	800578a <__swsetup_r+0x5a>
 8005764:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005766:	b141      	cbz	r1, 800577a <__swsetup_r+0x4a>
 8005768:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800576c:	4299      	cmp	r1, r3
 800576e:	d002      	beq.n	8005776 <__swsetup_r+0x46>
 8005770:	4628      	mov	r0, r5
 8005772:	f7ff f9e1 	bl	8004b38 <_free_r>
 8005776:	2300      	movs	r3, #0
 8005778:	6363      	str	r3, [r4, #52]	@ 0x34
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005780:	81a3      	strh	r3, [r4, #12]
 8005782:	2300      	movs	r3, #0
 8005784:	6063      	str	r3, [r4, #4]
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	f043 0308 	orr.w	r3, r3, #8
 8005790:	81a3      	strh	r3, [r4, #12]
 8005792:	6923      	ldr	r3, [r4, #16]
 8005794:	b94b      	cbnz	r3, 80057aa <__swsetup_r+0x7a>
 8005796:	89a3      	ldrh	r3, [r4, #12]
 8005798:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800579c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057a0:	d003      	beq.n	80057aa <__swsetup_r+0x7a>
 80057a2:	4621      	mov	r1, r4
 80057a4:	4628      	mov	r0, r5
 80057a6:	f000 f8c0 	bl	800592a <__smakebuf_r>
 80057aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ae:	f013 0201 	ands.w	r2, r3, #1
 80057b2:	d00a      	beq.n	80057ca <__swsetup_r+0x9a>
 80057b4:	2200      	movs	r2, #0
 80057b6:	60a2      	str	r2, [r4, #8]
 80057b8:	6962      	ldr	r2, [r4, #20]
 80057ba:	4252      	negs	r2, r2
 80057bc:	61a2      	str	r2, [r4, #24]
 80057be:	6922      	ldr	r2, [r4, #16]
 80057c0:	b942      	cbnz	r2, 80057d4 <__swsetup_r+0xa4>
 80057c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80057c6:	d1c5      	bne.n	8005754 <__swsetup_r+0x24>
 80057c8:	bd38      	pop	{r3, r4, r5, pc}
 80057ca:	0799      	lsls	r1, r3, #30
 80057cc:	bf58      	it	pl
 80057ce:	6962      	ldrpl	r2, [r4, #20]
 80057d0:	60a2      	str	r2, [r4, #8]
 80057d2:	e7f4      	b.n	80057be <__swsetup_r+0x8e>
 80057d4:	2000      	movs	r0, #0
 80057d6:	e7f7      	b.n	80057c8 <__swsetup_r+0x98>
 80057d8:	20000018 	.word	0x20000018

080057dc <_sbrk_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	2300      	movs	r3, #0
 80057e0:	4d05      	ldr	r5, [pc, #20]	@ (80057f8 <_sbrk_r+0x1c>)
 80057e2:	4604      	mov	r4, r0
 80057e4:	4608      	mov	r0, r1
 80057e6:	602b      	str	r3, [r5, #0]
 80057e8:	f7fb ff36 	bl	8001658 <_sbrk>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d102      	bne.n	80057f6 <_sbrk_r+0x1a>
 80057f0:	682b      	ldr	r3, [r5, #0]
 80057f2:	b103      	cbz	r3, 80057f6 <_sbrk_r+0x1a>
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	20000364 	.word	0x20000364

080057fc <memcpy>:
 80057fc:	440a      	add	r2, r1
 80057fe:	4291      	cmp	r1, r2
 8005800:	f100 33ff 	add.w	r3, r0, #4294967295
 8005804:	d100      	bne.n	8005808 <memcpy+0xc>
 8005806:	4770      	bx	lr
 8005808:	b510      	push	{r4, lr}
 800580a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800580e:	4291      	cmp	r1, r2
 8005810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005814:	d1f9      	bne.n	800580a <memcpy+0xe>
 8005816:	bd10      	pop	{r4, pc}

08005818 <__assert_func>:
 8005818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800581a:	4614      	mov	r4, r2
 800581c:	461a      	mov	r2, r3
 800581e:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <__assert_func+0x2c>)
 8005820:	4605      	mov	r5, r0
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68d8      	ldr	r0, [r3, #12]
 8005826:	b954      	cbnz	r4, 800583e <__assert_func+0x26>
 8005828:	4b07      	ldr	r3, [pc, #28]	@ (8005848 <__assert_func+0x30>)
 800582a:	461c      	mov	r4, r3
 800582c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005830:	9100      	str	r1, [sp, #0]
 8005832:	462b      	mov	r3, r5
 8005834:	4905      	ldr	r1, [pc, #20]	@ (800584c <__assert_func+0x34>)
 8005836:	f000 f841 	bl	80058bc <fiprintf>
 800583a:	f000 f8d5 	bl	80059e8 <abort>
 800583e:	4b04      	ldr	r3, [pc, #16]	@ (8005850 <__assert_func+0x38>)
 8005840:	e7f4      	b.n	800582c <__assert_func+0x14>
 8005842:	bf00      	nop
 8005844:	20000018 	.word	0x20000018
 8005848:	08005d9e 	.word	0x08005d9e
 800584c:	08005d70 	.word	0x08005d70
 8005850:	08005d63 	.word	0x08005d63

08005854 <_calloc_r>:
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	fba1 5402 	umull	r5, r4, r1, r2
 800585a:	b93c      	cbnz	r4, 800586c <_calloc_r+0x18>
 800585c:	4629      	mov	r1, r5
 800585e:	f7ff f9dd 	bl	8004c1c <_malloc_r>
 8005862:	4606      	mov	r6, r0
 8005864:	b928      	cbnz	r0, 8005872 <_calloc_r+0x1e>
 8005866:	2600      	movs	r6, #0
 8005868:	4630      	mov	r0, r6
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	220c      	movs	r2, #12
 800586e:	6002      	str	r2, [r0, #0]
 8005870:	e7f9      	b.n	8005866 <_calloc_r+0x12>
 8005872:	462a      	mov	r2, r5
 8005874:	4621      	mov	r1, r4
 8005876:	f7fe fa80 	bl	8003d7a <memset>
 800587a:	e7f5      	b.n	8005868 <_calloc_r+0x14>

0800587c <__ascii_mbtowc>:
 800587c:	b082      	sub	sp, #8
 800587e:	b901      	cbnz	r1, 8005882 <__ascii_mbtowc+0x6>
 8005880:	a901      	add	r1, sp, #4
 8005882:	b142      	cbz	r2, 8005896 <__ascii_mbtowc+0x1a>
 8005884:	b14b      	cbz	r3, 800589a <__ascii_mbtowc+0x1e>
 8005886:	7813      	ldrb	r3, [r2, #0]
 8005888:	600b      	str	r3, [r1, #0]
 800588a:	7812      	ldrb	r2, [r2, #0]
 800588c:	1e10      	subs	r0, r2, #0
 800588e:	bf18      	it	ne
 8005890:	2001      	movne	r0, #1
 8005892:	b002      	add	sp, #8
 8005894:	4770      	bx	lr
 8005896:	4610      	mov	r0, r2
 8005898:	e7fb      	b.n	8005892 <__ascii_mbtowc+0x16>
 800589a:	f06f 0001 	mvn.w	r0, #1
 800589e:	e7f8      	b.n	8005892 <__ascii_mbtowc+0x16>

080058a0 <__ascii_wctomb>:
 80058a0:	4603      	mov	r3, r0
 80058a2:	4608      	mov	r0, r1
 80058a4:	b141      	cbz	r1, 80058b8 <__ascii_wctomb+0x18>
 80058a6:	2aff      	cmp	r2, #255	@ 0xff
 80058a8:	d904      	bls.n	80058b4 <__ascii_wctomb+0x14>
 80058aa:	228a      	movs	r2, #138	@ 0x8a
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	4770      	bx	lr
 80058b4:	2001      	movs	r0, #1
 80058b6:	700a      	strb	r2, [r1, #0]
 80058b8:	4770      	bx	lr
	...

080058bc <fiprintf>:
 80058bc:	b40e      	push	{r1, r2, r3}
 80058be:	b503      	push	{r0, r1, lr}
 80058c0:	4601      	mov	r1, r0
 80058c2:	ab03      	add	r3, sp, #12
 80058c4:	4805      	ldr	r0, [pc, #20]	@ (80058dc <fiprintf+0x20>)
 80058c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ca:	6800      	ldr	r0, [r0, #0]
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	f7ff fdd9 	bl	8005484 <_vfiprintf_r>
 80058d2:	b002      	add	sp, #8
 80058d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d8:	b003      	add	sp, #12
 80058da:	4770      	bx	lr
 80058dc:	20000018 	.word	0x20000018

080058e0 <__swhatbuf_r>:
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	460c      	mov	r4, r1
 80058e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e8:	4615      	mov	r5, r2
 80058ea:	2900      	cmp	r1, #0
 80058ec:	461e      	mov	r6, r3
 80058ee:	b096      	sub	sp, #88	@ 0x58
 80058f0:	da0c      	bge.n	800590c <__swhatbuf_r+0x2c>
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	2100      	movs	r1, #0
 80058f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80058fa:	bf14      	ite	ne
 80058fc:	2340      	movne	r3, #64	@ 0x40
 80058fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005902:	2000      	movs	r0, #0
 8005904:	6031      	str	r1, [r6, #0]
 8005906:	602b      	str	r3, [r5, #0]
 8005908:	b016      	add	sp, #88	@ 0x58
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	466a      	mov	r2, sp
 800590e:	f000 f849 	bl	80059a4 <_fstat_r>
 8005912:	2800      	cmp	r0, #0
 8005914:	dbed      	blt.n	80058f2 <__swhatbuf_r+0x12>
 8005916:	9901      	ldr	r1, [sp, #4]
 8005918:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800591c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005920:	4259      	negs	r1, r3
 8005922:	4159      	adcs	r1, r3
 8005924:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005928:	e7eb      	b.n	8005902 <__swhatbuf_r+0x22>

0800592a <__smakebuf_r>:
 800592a:	898b      	ldrh	r3, [r1, #12]
 800592c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800592e:	079d      	lsls	r5, r3, #30
 8005930:	4606      	mov	r6, r0
 8005932:	460c      	mov	r4, r1
 8005934:	d507      	bpl.n	8005946 <__smakebuf_r+0x1c>
 8005936:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800593a:	6023      	str	r3, [r4, #0]
 800593c:	6123      	str	r3, [r4, #16]
 800593e:	2301      	movs	r3, #1
 8005940:	6163      	str	r3, [r4, #20]
 8005942:	b003      	add	sp, #12
 8005944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005946:	466a      	mov	r2, sp
 8005948:	ab01      	add	r3, sp, #4
 800594a:	f7ff ffc9 	bl	80058e0 <__swhatbuf_r>
 800594e:	9f00      	ldr	r7, [sp, #0]
 8005950:	4605      	mov	r5, r0
 8005952:	4639      	mov	r1, r7
 8005954:	4630      	mov	r0, r6
 8005956:	f7ff f961 	bl	8004c1c <_malloc_r>
 800595a:	b948      	cbnz	r0, 8005970 <__smakebuf_r+0x46>
 800595c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005960:	059a      	lsls	r2, r3, #22
 8005962:	d4ee      	bmi.n	8005942 <__smakebuf_r+0x18>
 8005964:	f023 0303 	bic.w	r3, r3, #3
 8005968:	f043 0302 	orr.w	r3, r3, #2
 800596c:	81a3      	strh	r3, [r4, #12]
 800596e:	e7e2      	b.n	8005936 <__smakebuf_r+0xc>
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800597a:	81a3      	strh	r3, [r4, #12]
 800597c:	9b01      	ldr	r3, [sp, #4]
 800597e:	6020      	str	r0, [r4, #0]
 8005980:	b15b      	cbz	r3, 800599a <__smakebuf_r+0x70>
 8005982:	4630      	mov	r0, r6
 8005984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005988:	f000 f81e 	bl	80059c8 <_isatty_r>
 800598c:	b128      	cbz	r0, 800599a <__smakebuf_r+0x70>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	f023 0303 	bic.w	r3, r3, #3
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	81a3      	strh	r3, [r4, #12]
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	431d      	orrs	r5, r3
 800599e:	81a5      	strh	r5, [r4, #12]
 80059a0:	e7cf      	b.n	8005942 <__smakebuf_r+0x18>
	...

080059a4 <_fstat_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	2300      	movs	r3, #0
 80059a8:	4d06      	ldr	r5, [pc, #24]	@ (80059c4 <_fstat_r+0x20>)
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	4611      	mov	r1, r2
 80059b0:	602b      	str	r3, [r5, #0]
 80059b2:	f7fb fe2b 	bl	800160c <_fstat>
 80059b6:	1c43      	adds	r3, r0, #1
 80059b8:	d102      	bne.n	80059c0 <_fstat_r+0x1c>
 80059ba:	682b      	ldr	r3, [r5, #0]
 80059bc:	b103      	cbz	r3, 80059c0 <_fstat_r+0x1c>
 80059be:	6023      	str	r3, [r4, #0]
 80059c0:	bd38      	pop	{r3, r4, r5, pc}
 80059c2:	bf00      	nop
 80059c4:	20000364 	.word	0x20000364

080059c8 <_isatty_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	2300      	movs	r3, #0
 80059cc:	4d05      	ldr	r5, [pc, #20]	@ (80059e4 <_isatty_r+0x1c>)
 80059ce:	4604      	mov	r4, r0
 80059d0:	4608      	mov	r0, r1
 80059d2:	602b      	str	r3, [r5, #0]
 80059d4:	f7fb fe29 	bl	800162a <_isatty>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d102      	bne.n	80059e2 <_isatty_r+0x1a>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	b103      	cbz	r3, 80059e2 <_isatty_r+0x1a>
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	20000364 	.word	0x20000364

080059e8 <abort>:
 80059e8:	2006      	movs	r0, #6
 80059ea:	b508      	push	{r3, lr}
 80059ec:	f000 f82c 	bl	8005a48 <raise>
 80059f0:	2001      	movs	r0, #1
 80059f2:	f7fb fdbc 	bl	800156e <_exit>

080059f6 <_raise_r>:
 80059f6:	291f      	cmp	r1, #31
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4605      	mov	r5, r0
 80059fc:	460c      	mov	r4, r1
 80059fe:	d904      	bls.n	8005a0a <_raise_r+0x14>
 8005a00:	2316      	movs	r3, #22
 8005a02:	6003      	str	r3, [r0, #0]
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	bd38      	pop	{r3, r4, r5, pc}
 8005a0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005a0c:	b112      	cbz	r2, 8005a14 <_raise_r+0x1e>
 8005a0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a12:	b94b      	cbnz	r3, 8005a28 <_raise_r+0x32>
 8005a14:	4628      	mov	r0, r5
 8005a16:	f000 f831 	bl	8005a7c <_getpid_r>
 8005a1a:	4622      	mov	r2, r4
 8005a1c:	4601      	mov	r1, r0
 8005a1e:	4628      	mov	r0, r5
 8005a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a24:	f000 b818 	b.w	8005a58 <_kill_r>
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d00a      	beq.n	8005a42 <_raise_r+0x4c>
 8005a2c:	1c59      	adds	r1, r3, #1
 8005a2e:	d103      	bne.n	8005a38 <_raise_r+0x42>
 8005a30:	2316      	movs	r3, #22
 8005a32:	6003      	str	r3, [r0, #0]
 8005a34:	2001      	movs	r0, #1
 8005a36:	e7e7      	b.n	8005a08 <_raise_r+0x12>
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005a40:	4798      	blx	r3
 8005a42:	2000      	movs	r0, #0
 8005a44:	e7e0      	b.n	8005a08 <_raise_r+0x12>
	...

08005a48 <raise>:
 8005a48:	4b02      	ldr	r3, [pc, #8]	@ (8005a54 <raise+0xc>)
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	f7ff bfd2 	b.w	80059f6 <_raise_r>
 8005a52:	bf00      	nop
 8005a54:	20000018 	.word	0x20000018

08005a58 <_kill_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4d06      	ldr	r5, [pc, #24]	@ (8005a78 <_kill_r+0x20>)
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4608      	mov	r0, r1
 8005a62:	4611      	mov	r1, r2
 8005a64:	602b      	str	r3, [r5, #0]
 8005a66:	f7fb fd72 	bl	800154e <_kill>
 8005a6a:	1c43      	adds	r3, r0, #1
 8005a6c:	d102      	bne.n	8005a74 <_kill_r+0x1c>
 8005a6e:	682b      	ldr	r3, [r5, #0]
 8005a70:	b103      	cbz	r3, 8005a74 <_kill_r+0x1c>
 8005a72:	6023      	str	r3, [r4, #0]
 8005a74:	bd38      	pop	{r3, r4, r5, pc}
 8005a76:	bf00      	nop
 8005a78:	20000364 	.word	0x20000364

08005a7c <_getpid_r>:
 8005a7c:	f7fb bd60 	b.w	8001540 <_getpid>

08005a80 <_init>:
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a82:	bf00      	nop
 8005a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a86:	bc08      	pop	{r3}
 8005a88:	469e      	mov	lr, r3
 8005a8a:	4770      	bx	lr

08005a8c <_fini>:
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	bf00      	nop
 8005a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a92:	bc08      	pop	{r3}
 8005a94:	469e      	mov	lr, r3
 8005a96:	4770      	bx	lr
