
017_adc_2_read_temp_copied_working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005578  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08005688  08005688  00006688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a50  08005a50  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005a50  08005a50  00006a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a58  08005a58  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a58  08005a58  00006a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a5c  08005a5c  00006a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005a60  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001d4  08005c34  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08005c34  00007374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f53  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158d  00000000  00000000  0000c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e8  00000000  00000000  0000d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000448  00000000  00000000  0000dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f8b  00000000  00000000  0000e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000775e  00000000  00000000  0002609b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086802  00000000  00000000  0002d7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3ffb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002650  00000000  00000000  000b4040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b6690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005670 	.word	0x08005670

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005670 	.word	0x08005670

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <readTemperature>:
  * @brief  The application entry point.
  * @retval int
  *
  *
  */
float readTemperature(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
    uint32_t adc_value;

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 8000e12:	4823      	ldr	r0, [pc, #140]	@ (8000ea0 <readTemperature+0x94>)
 8000e14:	f000 fc1c 	bl	8001650 <HAL_ADC_Start>

    // Poll for conversion completion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	4820      	ldr	r0, [pc, #128]	@ (8000ea0 <readTemperature+0x94>)
 8000e1e:	f000 fcf1 	bl	8001804 <HAL_ADC_PollForConversion>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d103      	bne.n	8000e30 <readTemperature+0x24>
        // Get ADC value
        adc_value = HAL_ADC_GetValue(&hadc1);
 8000e28:	481d      	ldr	r0, [pc, #116]	@ (8000ea0 <readTemperature+0x94>)
 8000e2a:	f000 fdf1 	bl	8001a10 <HAL_ADC_GetValue>
 8000e2e:	60f8      	str	r0, [r7, #12]
    }

    // Stop ADC
    HAL_ADC_Stop(&hadc1);
 8000e30:	481b      	ldr	r0, [pc, #108]	@ (8000ea0 <readTemperature+0x94>)
 8000e32:	f000 fcbb 	bl	80017ac <HAL_ADC_Stop>

    // Convert ADC value to voltage
    float voltage = (float)adc_value * (VREF / ADC_RESOLUTION);
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f7ff ff90 	bl	8000d5c <__aeabi_ui2f>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4919      	ldr	r1, [pc, #100]	@ (8000ea4 <readTemperature+0x98>)
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff f98d 	bl	8000160 <__aeabi_fmul>
 8000e46:	4603      	mov	r3, r0
 8000e48:	60bb      	str	r3, [r7, #8]

    // Map voltage to temperature
    float current = (voltage - VOLTAGE_MIN) * ((CURRENT_MAX - CURRENT_MIN) / (VOLTAGE_MAX - VOLTAGE_MIN)) + CURRENT_MIN;
 8000e4a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e4e:	68b8      	ldr	r0, [r7, #8]
 8000e50:	f7ff fed2 	bl	8000bf8 <__aeabi_fsub>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff f980 	bl	8000160 <__aeabi_fmul>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fec8 	bl	8000bfc <__addsf3>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	607b      	str	r3, [r7, #4]
    float temperature = (current - CURRENT_MIN) * ((TEMP_MAX - TEMP_MIN) / (CURRENT_MAX - CURRENT_MIN)) + TEMP_MIN;
 8000e70:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff febf 	bl	8000bf8 <__aeabi_fsub>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	490a      	ldr	r1, [pc, #40]	@ (8000ea8 <readTemperature+0x9c>)
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff f96e 	bl	8000160 <__aeabi_fmul>
 8000e84:	4603      	mov	r3, r0
 8000e86:	f04f 0100 	mov.w	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff feb6 	bl	8000bfc <__addsf3>
 8000e90:	4603      	mov	r3, r0
 8000e92:	603b      	str	r3, [r7, #0]

    return temperature;
 8000e94:	683b      	ldr	r3, [r7, #0]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001f0 	.word	0x200001f0
 8000ea4:	3a533333 	.word	0x3a533333
 8000ea8:	40c80000 	.word	0x40c80000

08000eac <main>:




int main(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
    // HAL Initialization
	HAL_Init();
 8000eb2:	f000 fa6f 	bl	8001394 <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 8000eb6:	f000 f81b 	bl	8000ef0 <SystemClock_Config>

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  //MX_GPIO_Init();
	  MX_ADC1_Init();
 8000eba:	f000 f86f 	bl	8000f9c <MX_ADC1_Init>
	  //MX_I2C2_Init();
	  /* USER CODE BEGIN 2 */
	  HAL_ADC_Start (&hadc1);
 8000ebe:	480a      	ldr	r0, [pc, #40]	@ (8000ee8 <main+0x3c>)
 8000ec0:	f000 fbc6 	bl	8001650 <HAL_ADC_Start>


    while (1) {
        // Read temperature
        float temperature = readTemperature();
 8000ec4:	f7ff ffa2 	bl	8000e0c <readTemperature>
 8000ec8:	6078      	str	r0, [r7, #4]

        // Print temperature (use UART for debugging)
        printf("Temperature: %.2f °C\n", temperature);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fb60 	bl	8000590 <__aeabi_f2d>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4805      	ldr	r0, [pc, #20]	@ (8000eec <main+0x40>)
 8000ed6:	f002 fc4b 	bl	8003770 <iprintf>

        // Delay
        HAL_Delay(1000);
 8000eda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ede:	f000 fabb 	bl	8001458 <HAL_Delay>
    while (1) {
 8000ee2:	bf00      	nop
 8000ee4:	e7ee      	b.n	8000ec4 <main+0x18>
 8000ee6:	bf00      	nop
 8000ee8:	200001f0 	.word	0x200001f0
 8000eec:	08005688 	.word	0x08005688

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b094      	sub	sp, #80	@ 0x50
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000efa:	2228      	movs	r2, #40	@ 0x28
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fc8b 	bl	800381a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f20:	2302      	movs	r3, #2
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f24:	2301      	movs	r3, #1
 8000f26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f28:	2310      	movs	r3, #16
 8000f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f30:	2300      	movs	r3, #0
 8000f32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000f34:	2300      	movs	r3, #0
 8000f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 f991 	bl	8002264 <HAL_RCC_OscConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000f48:	f000 f868 	bl	800101c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f5c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f001 fbfd 	bl	8002768 <HAL_RCC_ClockConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000f74:	f000 f852 	bl	800101c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 fd6a 	bl	8002a5c <HAL_RCCEx_PeriphCLKConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f8e:	f000 f845 	bl	800101c <Error_Handler>
  }
}
 8000f92:	bf00      	nop
 8000f94:	3750      	adds	r7, #80	@ 0x50
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <MX_ADC1_Init+0x78>)
 8000fae:	4a1a      	ldr	r2, [pc, #104]	@ (8001018 <MX_ADC1_Init+0x7c>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <MX_ADC1_Init+0x78>)
 8000fb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <MX_ADC1_Init+0x78>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_ADC1_Init+0x78>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <MX_ADC1_Init+0x78>)
 8000fc8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000fcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_ADC1_Init+0x78>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_ADC1_Init+0x78>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fda:	480e      	ldr	r0, [pc, #56]	@ (8001014 <MX_ADC1_Init+0x78>)
 8000fdc:	f000 fa60 	bl	80014a0 <HAL_ADC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000fe6:	f000 f819 	bl	800101c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <MX_ADC1_Init+0x78>)
 8000ffc:	f000 fd14 	bl	8001a28 <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 f809 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200001f0 	.word	0x200001f0
 8001018:	40012400 	.word	0x40012400

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <Error_Handler+0x8>

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <HAL_MspInit+0x5c>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <HAL_MspInit+0x5c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6193      	str	r3, [r2, #24]
 800103a:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_MspInit+0x5c>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <HAL_MspInit+0x5c>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a0e      	ldr	r2, [pc, #56]	@ (8001084 <HAL_MspInit+0x5c>)
 800104c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001050:	61d3      	str	r3, [r2, #28]
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <HAL_MspInit+0x5c>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <HAL_MspInit+0x60>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <HAL_MspInit+0x60>)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000

0800108c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <HAL_ADC_MspInit+0x6c>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d121      	bne.n	80010f0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <HAL_ADC_MspInit+0x70>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <HAL_ADC_MspInit+0x70>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <HAL_ADC_MspInit+0x70>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <HAL_ADC_MspInit+0x70>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <HAL_ADC_MspInit+0x70>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <HAL_ADC_MspInit+0x70>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010dc:	2302      	movs	r3, #2
 80010de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e0:	2303      	movs	r3, #3
 80010e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	4805      	ldr	r0, [pc, #20]	@ (8001100 <HAL_ADC_MspInit+0x74>)
 80010ec:	f000 ff14 	bl	8001f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40012400 	.word	0x40012400
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010800 	.word	0x40010800

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <NMI_Handler+0x4>

0800110c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <MemManage_Handler+0x4>

0800111c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <UsageFault_Handler+0x4>

0800112c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 f964 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001160:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001164:	f001 f85c 	bl	8002220 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001176:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <ITM_SendChar+0x44>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a0d      	ldr	r2, [pc, #52]	@ (80011b0 <ITM_SendChar+0x44>)
 800117c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001180:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <ITM_SendChar+0x48>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <ITM_SendChar+0x48>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800118e:	bf00      	nop
 8001190:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f8      	beq.n	8001190 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800119e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	6013      	str	r3, [r2, #0]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	e000edfc 	.word	0xe000edfc
 80011b4:	e0000e00 	.word	0xe0000e00

080011b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return 1;
 80011bc:	2301      	movs	r3, #1
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <_kill>:

int _kill(int pid, int sig)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011d0:	f002 fb76 	bl	80038c0 <__errno>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2216      	movs	r2, #22
 80011d8:	601a      	str	r2, [r3, #0]
  return -1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_exit>:

void _exit (int status)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011ee:	f04f 31ff 	mov.w	r1, #4294967295
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ffe7 	bl	80011c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <_exit+0x12>

080011fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	e00a      	b.n	8001224 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800120e:	f3af 8000 	nop.w
 8001212:	4601      	mov	r1, r0
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	60ba      	str	r2, [r7, #8]
 800121a:	b2ca      	uxtb	r2, r1
 800121c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	dbf0      	blt.n	800120e <_read+0x12>
  }

  return len;
 800122c:	687b      	ldr	r3, [r7, #4]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e009      	b.n	800125c <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	60ba      	str	r2, [r7, #8]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff8b 	bl	800116c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3301      	adds	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	dbf1      	blt.n	8001248 <_write+0x12>
  }
  return len;
 8001264:	687b      	ldr	r3, [r7, #4]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_close>:

int _close(int file)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001294:	605a      	str	r2, [r3, #4]
  return 0;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <_isatty>:

int _isatty(int file)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b085      	sub	sp, #20
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
	...

080012d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d8:	4a14      	ldr	r2, [pc, #80]	@ (800132c <_sbrk+0x5c>)
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <_sbrk+0x60>)
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e4:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <_sbrk+0x64>)
 80012ee:	4a12      	ldr	r2, [pc, #72]	@ (8001338 <_sbrk+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d207      	bcs.n	8001310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001300:	f002 fade 	bl	80038c0 <__errno>
 8001304:	4603      	mov	r3, r0
 8001306:	220c      	movs	r2, #12
 8001308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e009      	b.n	8001324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001310:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <_sbrk+0x64>)
 8001320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20005000 	.word	0x20005000
 8001330:	00000400 	.word	0x00000400
 8001334:	20000220 	.word	0x20000220
 8001338:	20000378 	.word	0x20000378

0800133c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001348:	f7ff fff8 	bl	800133c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480b      	ldr	r0, [pc, #44]	@ (800137c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800134e:	490c      	ldr	r1, [pc, #48]	@ (8001380 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001350:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001364:	4c09      	ldr	r4, [pc, #36]	@ (800138c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f002 faab 	bl	80038cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001376:	f7ff fd99 	bl	8000eac <main>
  bx lr
 800137a:	4770      	bx	lr
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001384:	08005a60 	.word	0x08005a60
  ldr r2, =_sbss
 8001388:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800138c:	20000374 	.word	0x20000374

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <HAL_Init+0x28>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	@ (80013bc <HAL_Init+0x28>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 fd83 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f808 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff fe3a 	bl	8001028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fd8d 	bl	8001efe <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 fd63 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	@ (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	20000008 	.word	0x20000008
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_IncTick+0x1c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_IncTick+0x20>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a03      	ldr	r2, [pc, #12]	@ (8001440 <HAL_IncTick+0x20>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20000008 	.word	0x20000008
 8001440:	20000224 	.word	0x20000224

08001444 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b02      	ldr	r3, [pc, #8]	@ (8001454 <HAL_GetTick+0x10>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000224 	.word	0x20000224

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff fff0 	bl	8001444 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d005      	beq.n	800147e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_Delay+0x44>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147e:	bf00      	nop
 8001480:	f7ff ffe0 	bl	8001444 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8f7      	bhi.n	8001480 <HAL_Delay+0x28>
  {
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000008 	.word	0x20000008

080014a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e0be      	b.n	8001640 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d109      	bne.n	80014e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fdd4 	bl	800108c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fbf1 	bl	8001ccc <ADC_ConversionStop_Disable>
 80014ea:	4603      	mov	r3, r0
 80014ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f040 8099 	bne.w	800162e <HAL_ADC_Init+0x18e>
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 8095 	bne.w	800162e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001508:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800150c:	f023 0302 	bic.w	r3, r3, #2
 8001510:	f043 0202 	orr.w	r2, r3, #2
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001520:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7b1b      	ldrb	r3, [r3, #12]
 8001526:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001528:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	4313      	orrs	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001538:	d003      	beq.n	8001542 <HAL_ADC_Init+0xa2>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d102      	bne.n	8001548 <HAL_ADC_Init+0xa8>
 8001542:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001546:	e000      	b.n	800154a <HAL_ADC_Init+0xaa>
 8001548:	2300      	movs	r3, #0
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7d1b      	ldrb	r3, [r3, #20]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d119      	bne.n	800158c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7b1b      	ldrb	r3, [r3, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d109      	bne.n	8001574 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	3b01      	subs	r3, #1
 8001566:	035a      	lsls	r2, r3, #13
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	e00b      	b.n	800158c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001578:	f043 0220 	orr.w	r2, r3, #32
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	f043 0201 	orr.w	r2, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	430a      	orrs	r2, r1
 800159e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <HAL_ADC_Init+0x1a8>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	430b      	orrs	r3, r1
 80015b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015bc:	d003      	beq.n	80015c6 <HAL_ADC_Init+0x126>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d104      	bne.n	80015d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	051b      	lsls	r3, r3, #20
 80015ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	4b18      	ldr	r3, [pc, #96]	@ (800164c <HAL_ADC_Init+0x1ac>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d10b      	bne.n	800160c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fe:	f023 0303 	bic.w	r3, r3, #3
 8001602:	f043 0201 	orr.w	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800160a:	e018      	b.n	800163e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001610:	f023 0312 	bic.w	r3, r3, #18
 8001614:	f043 0210 	orr.w	r2, r3, #16
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800162c:	e007      	b.n	800163e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800163e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	ffe1f7fd 	.word	0xffe1f7fd
 800164c:	ff1f0efe 	.word	0xff1f0efe

08001650 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_ADC_Start+0x1a>
 8001666:	2302      	movs	r3, #2
 8001668:	e098      	b.n	800179c <HAL_ADC_Start+0x14c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fad0 	bl	8001c18 <ADC_Enable>
 8001678:	4603      	mov	r3, r0
 800167a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f040 8087 	bne.w	8001792 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a41      	ldr	r2, [pc, #260]	@ (80017a4 <HAL_ADC_Start+0x154>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d105      	bne.n	80016ae <HAL_ADC_Start+0x5e>
 80016a2:	4b41      	ldr	r3, [pc, #260]	@ (80017a8 <HAL_ADC_Start+0x158>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d115      	bne.n	80016da <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d026      	beq.n	8001716 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016d8:	e01d      	b.n	8001716 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a2f      	ldr	r2, [pc, #188]	@ (80017a8 <HAL_ADC_Start+0x158>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d004      	beq.n	80016fa <HAL_ADC_Start+0xaa>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2b      	ldr	r2, [pc, #172]	@ (80017a4 <HAL_ADC_Start+0x154>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d10d      	bne.n	8001716 <HAL_ADC_Start+0xc6>
 80016fa:	4b2b      	ldr	r3, [pc, #172]	@ (80017a8 <HAL_ADC_Start+0x158>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800170e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d006      	beq.n	8001730 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001726:	f023 0206 	bic.w	r2, r3, #6
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800172e:	e002      	b.n	8001736 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f06f 0202 	mvn.w	r2, #2
 8001746:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001752:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001756:	d113      	bne.n	8001780 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800175c:	4a11      	ldr	r2, [pc, #68]	@ (80017a4 <HAL_ADC_Start+0x154>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d105      	bne.n	800176e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_ADC_Start+0x158>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800176a:	2b00      	cmp	r3, #0
 800176c:	d108      	bne.n	8001780 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	e00c      	b.n	800179a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	e003      	b.n	800179a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40012800 	.word	0x40012800
 80017a8:	40012400 	.word	0x40012400

080017ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_Stop+0x1a>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e01a      	b.n	80017fc <HAL_ADC_Stop+0x50>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fa7c 	bl	8001ccc <ADC_ConversionStop_Disable>
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800181a:	f7ff fe13 	bl	8001444 <HAL_GetTick>
 800181e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001832:	f043 0220 	orr.w	r2, r3, #32
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0d3      	b.n	80019ee <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d131      	bne.n	80018b8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800185e:	2b00      	cmp	r3, #0
 8001860:	d12a      	bne.n	80018b8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001862:	e021      	b.n	80018a8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186a:	d01d      	beq.n	80018a8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d007      	beq.n	8001882 <HAL_ADC_PollForConversion+0x7e>
 8001872:	f7ff fde7 	bl	8001444 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d212      	bcs.n	80018a8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10b      	bne.n	80018a8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	f043 0204 	orr.w	r2, r3, #4
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e0a2      	b.n	80019ee <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0d6      	beq.n	8001864 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018b6:	e070      	b.n	800199a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80018b8:	4b4f      	ldr	r3, [pc, #316]	@ (80019f8 <HAL_ADC_PollForConversion+0x1f4>)
 80018ba:	681c      	ldr	r4, [r3, #0]
 80018bc:	2002      	movs	r0, #2
 80018be:	f001 f983 	bl	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 80018c2:	4603      	mov	r3, r0
 80018c4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6919      	ldr	r1, [r3, #16]
 80018ce:	4b4b      	ldr	r3, [pc, #300]	@ (80019fc <HAL_ADC_PollForConversion+0x1f8>)
 80018d0:	400b      	ands	r3, r1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d118      	bne.n	8001908 <HAL_ADC_PollForConversion+0x104>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68d9      	ldr	r1, [r3, #12]
 80018dc:	4b48      	ldr	r3, [pc, #288]	@ (8001a00 <HAL_ADC_PollForConversion+0x1fc>)
 80018de:	400b      	ands	r3, r1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d111      	bne.n	8001908 <HAL_ADC_PollForConversion+0x104>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6919      	ldr	r1, [r3, #16]
 80018ea:	4b46      	ldr	r3, [pc, #280]	@ (8001a04 <HAL_ADC_PollForConversion+0x200>)
 80018ec:	400b      	ands	r3, r1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d108      	bne.n	8001904 <HAL_ADC_PollForConversion+0x100>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68d9      	ldr	r1, [r3, #12]
 80018f8:	4b43      	ldr	r3, [pc, #268]	@ (8001a08 <HAL_ADC_PollForConversion+0x204>)
 80018fa:	400b      	ands	r3, r1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_ADC_PollForConversion+0x100>
 8001900:	2314      	movs	r3, #20
 8001902:	e020      	b.n	8001946 <HAL_ADC_PollForConversion+0x142>
 8001904:	2329      	movs	r3, #41	@ 0x29
 8001906:	e01e      	b.n	8001946 <HAL_ADC_PollForConversion+0x142>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6919      	ldr	r1, [r3, #16]
 800190e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a04 <HAL_ADC_PollForConversion+0x200>)
 8001910:	400b      	ands	r3, r1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d106      	bne.n	8001924 <HAL_ADC_PollForConversion+0x120>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68d9      	ldr	r1, [r3, #12]
 800191c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a08 <HAL_ADC_PollForConversion+0x204>)
 800191e:	400b      	ands	r3, r1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00d      	beq.n	8001940 <HAL_ADC_PollForConversion+0x13c>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6919      	ldr	r1, [r3, #16]
 800192a:	4b38      	ldr	r3, [pc, #224]	@ (8001a0c <HAL_ADC_PollForConversion+0x208>)
 800192c:	400b      	ands	r3, r1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d108      	bne.n	8001944 <HAL_ADC_PollForConversion+0x140>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68d9      	ldr	r1, [r3, #12]
 8001938:	4b34      	ldr	r3, [pc, #208]	@ (8001a0c <HAL_ADC_PollForConversion+0x208>)
 800193a:	400b      	ands	r3, r1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_ADC_PollForConversion+0x140>
 8001940:	2354      	movs	r3, #84	@ 0x54
 8001942:	e000      	b.n	8001946 <HAL_ADC_PollForConversion+0x142>
 8001944:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001946:	fb02 f303 	mul.w	r3, r2, r3
 800194a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800194c:	e021      	b.n	8001992 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001954:	d01a      	beq.n	800198c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <HAL_ADC_PollForConversion+0x168>
 800195c:	f7ff fd72 	bl	8001444 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d20f      	bcs.n	800198c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d90b      	bls.n	800198c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001978:	f043 0204 	orr.w	r2, r3, #4
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e030      	b.n	80019ee <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3301      	adds	r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	429a      	cmp	r2, r3
 8001998:	d8d9      	bhi.n	800194e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f06f 0212 	mvn.w	r2, #18
 80019a2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019ba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019be:	d115      	bne.n	80019ec <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d111      	bne.n	80019ec <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	371c      	adds	r7, #28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd90      	pop	{r4, r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000000 	.word	0x20000000
 80019fc:	24924924 	.word	0x24924924
 8001a00:	00924924 	.word	0x00924924
 8001a04:	12492492 	.word	0x12492492
 8001a08:	00492492 	.word	0x00492492
 8001a0c:	00249249 	.word	0x00249249

08001a10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x20>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e0dc      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x1da>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b06      	cmp	r3, #6
 8001a56:	d81c      	bhi.n	8001a92 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	3b05      	subs	r3, #5
 8001a6a:	221f      	movs	r2, #31
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4019      	ands	r1, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	3b05      	subs	r3, #5
 8001a84:	fa00 f203 	lsl.w	r2, r0, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a90:	e03c      	b.n	8001b0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d81c      	bhi.n	8001ad4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3b23      	subs	r3, #35	@ 0x23
 8001aac:	221f      	movs	r2, #31
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	4019      	ands	r1, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3b23      	subs	r3, #35	@ 0x23
 8001ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ad2:	e01b      	b.n	8001b0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3b41      	subs	r3, #65	@ 0x41
 8001ae6:	221f      	movs	r2, #31
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	4019      	ands	r1, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3b41      	subs	r3, #65	@ 0x41
 8001b00:	fa00 f203 	lsl.w	r2, r0, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b09      	cmp	r3, #9
 8001b12:	d91c      	bls.n	8001b4e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68d9      	ldr	r1, [r3, #12]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	3b1e      	subs	r3, #30
 8001b26:	2207      	movs	r2, #7
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4019      	ands	r1, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6898      	ldr	r0, [r3, #8]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b1e      	subs	r3, #30
 8001b40:	fa00 f203 	lsl.w	r2, r0, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	e019      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6919      	ldr	r1, [r3, #16]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	2207      	movs	r2, #7
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4019      	ands	r1, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6898      	ldr	r0, [r3, #8]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d003      	beq.n	8001b92 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b8e:	2b11      	cmp	r3, #17
 8001b90:	d132      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a1d      	ldr	r2, [pc, #116]	@ (8001c0c <HAL_ADC_ConfigChannel+0x1e4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d125      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d126      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001bb8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d11a      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc2:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <HAL_ADC_ConfigChannel+0x1e8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a13      	ldr	r2, [pc, #76]	@ (8001c14 <HAL_ADC_ConfigChannel+0x1ec>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	0c9a      	lsrs	r2, r3, #18
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bd8:	e002      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f9      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x1b2>
 8001be6:	e007      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bec:	f043 0220 	orr.w	r2, r3, #32
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40012400 	.word	0x40012400
 8001c10:	20000000 	.word	0x20000000
 8001c14:	431bde83 	.word	0x431bde83

08001c18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d040      	beq.n	8001cb8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c46:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc4 <ADC_Enable+0xac>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc8 <ADC_Enable+0xb0>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	0c9b      	lsrs	r3, r3, #18
 8001c52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c54:	e002      	b.n	8001c5c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f9      	bne.n	8001c56 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c62:	f7ff fbef 	bl	8001444 <HAL_GetTick>
 8001c66:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c68:	e01f      	b.n	8001caa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c6a:	f7ff fbeb 	bl	8001444 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d918      	bls.n	8001caa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d011      	beq.n	8001caa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8a:	f043 0210 	orr.w	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c96:	f043 0201 	orr.w	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e007      	b.n	8001cba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d1d8      	bne.n	8001c6a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	431bde83 	.word	0x431bde83

08001ccc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d12e      	bne.n	8001d44 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0201 	bic.w	r2, r2, #1
 8001cf4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cf6:	f7ff fba5 	bl	8001444 <HAL_GetTick>
 8001cfa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cfc:	e01b      	b.n	8001d36 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cfe:	f7ff fba1 	bl	8001444 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d914      	bls.n	8001d36 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d10d      	bne.n	8001d36 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1e:	f043 0210 	orr.w	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e007      	b.n	8001d46 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d0dc      	beq.n	8001cfe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	@ (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db0a      	blt.n	8001dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	490c      	ldr	r1, [pc, #48]	@ (8001e00 <__NVIC_SetPriority+0x4c>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ddc:	e00a      	b.n	8001df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4908      	ldr	r1, [pc, #32]	@ (8001e04 <__NVIC_SetPriority+0x50>)
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3b04      	subs	r3, #4
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	761a      	strb	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	@ 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf28      	it	cs
 8001e26:	2304      	movcs	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d902      	bls.n	8001e38 <NVIC_EncodePriority+0x30>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	e000      	b.n	8001e3a <NVIC_EncodePriority+0x32>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	4313      	orrs	r3, r2
         );
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	@ 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f7ff ff90 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff49 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff5e 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff90 	bl	8001e08 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5f 	bl	8001db4 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffb0 	bl	8001e6c <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b08b      	sub	sp, #44	@ 0x2c
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2a:	e169      	b.n	8002200 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	f040 8158 	bne.w	80021fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4a9a      	ldr	r2, [pc, #616]	@ (80021b8 <HAL_GPIO_Init+0x2a0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d05e      	beq.n	8002012 <HAL_GPIO_Init+0xfa>
 8001f54:	4a98      	ldr	r2, [pc, #608]	@ (80021b8 <HAL_GPIO_Init+0x2a0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d875      	bhi.n	8002046 <HAL_GPIO_Init+0x12e>
 8001f5a:	4a98      	ldr	r2, [pc, #608]	@ (80021bc <HAL_GPIO_Init+0x2a4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d058      	beq.n	8002012 <HAL_GPIO_Init+0xfa>
 8001f60:	4a96      	ldr	r2, [pc, #600]	@ (80021bc <HAL_GPIO_Init+0x2a4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d86f      	bhi.n	8002046 <HAL_GPIO_Init+0x12e>
 8001f66:	4a96      	ldr	r2, [pc, #600]	@ (80021c0 <HAL_GPIO_Init+0x2a8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d052      	beq.n	8002012 <HAL_GPIO_Init+0xfa>
 8001f6c:	4a94      	ldr	r2, [pc, #592]	@ (80021c0 <HAL_GPIO_Init+0x2a8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d869      	bhi.n	8002046 <HAL_GPIO_Init+0x12e>
 8001f72:	4a94      	ldr	r2, [pc, #592]	@ (80021c4 <HAL_GPIO_Init+0x2ac>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d04c      	beq.n	8002012 <HAL_GPIO_Init+0xfa>
 8001f78:	4a92      	ldr	r2, [pc, #584]	@ (80021c4 <HAL_GPIO_Init+0x2ac>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d863      	bhi.n	8002046 <HAL_GPIO_Init+0x12e>
 8001f7e:	4a92      	ldr	r2, [pc, #584]	@ (80021c8 <HAL_GPIO_Init+0x2b0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d046      	beq.n	8002012 <HAL_GPIO_Init+0xfa>
 8001f84:	4a90      	ldr	r2, [pc, #576]	@ (80021c8 <HAL_GPIO_Init+0x2b0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d85d      	bhi.n	8002046 <HAL_GPIO_Init+0x12e>
 8001f8a:	2b12      	cmp	r3, #18
 8001f8c:	d82a      	bhi.n	8001fe4 <HAL_GPIO_Init+0xcc>
 8001f8e:	2b12      	cmp	r3, #18
 8001f90:	d859      	bhi.n	8002046 <HAL_GPIO_Init+0x12e>
 8001f92:	a201      	add	r2, pc, #4	@ (adr r2, 8001f98 <HAL_GPIO_Init+0x80>)
 8001f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f98:	08002013 	.word	0x08002013
 8001f9c:	08001fed 	.word	0x08001fed
 8001fa0:	08001fff 	.word	0x08001fff
 8001fa4:	08002041 	.word	0x08002041
 8001fa8:	08002047 	.word	0x08002047
 8001fac:	08002047 	.word	0x08002047
 8001fb0:	08002047 	.word	0x08002047
 8001fb4:	08002047 	.word	0x08002047
 8001fb8:	08002047 	.word	0x08002047
 8001fbc:	08002047 	.word	0x08002047
 8001fc0:	08002047 	.word	0x08002047
 8001fc4:	08002047 	.word	0x08002047
 8001fc8:	08002047 	.word	0x08002047
 8001fcc:	08002047 	.word	0x08002047
 8001fd0:	08002047 	.word	0x08002047
 8001fd4:	08002047 	.word	0x08002047
 8001fd8:	08002047 	.word	0x08002047
 8001fdc:	08001ff5 	.word	0x08001ff5
 8001fe0:	08002009 	.word	0x08002009
 8001fe4:	4a79      	ldr	r2, [pc, #484]	@ (80021cc <HAL_GPIO_Init+0x2b4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fea:	e02c      	b.n	8002046 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	623b      	str	r3, [r7, #32]
          break;
 8001ff2:	e029      	b.n	8002048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	623b      	str	r3, [r7, #32]
          break;
 8001ffc:	e024      	b.n	8002048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	3308      	adds	r3, #8
 8002004:	623b      	str	r3, [r7, #32]
          break;
 8002006:	e01f      	b.n	8002048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	330c      	adds	r3, #12
 800200e:	623b      	str	r3, [r7, #32]
          break;
 8002010:	e01a      	b.n	8002048 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800201a:	2304      	movs	r3, #4
 800201c:	623b      	str	r3, [r7, #32]
          break;
 800201e:	e013      	b.n	8002048 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d105      	bne.n	8002034 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002028:	2308      	movs	r3, #8
 800202a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	611a      	str	r2, [r3, #16]
          break;
 8002032:	e009      	b.n	8002048 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002034:	2308      	movs	r3, #8
 8002036:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	615a      	str	r2, [r3, #20]
          break;
 800203e:	e003      	b.n	8002048 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002040:	2300      	movs	r3, #0
 8002042:	623b      	str	r3, [r7, #32]
          break;
 8002044:	e000      	b.n	8002048 <HAL_GPIO_Init+0x130>
          break;
 8002046:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2bff      	cmp	r3, #255	@ 0xff
 800204c:	d801      	bhi.n	8002052 <HAL_GPIO_Init+0x13a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	e001      	b.n	8002056 <HAL_GPIO_Init+0x13e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3304      	adds	r3, #4
 8002056:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	2bff      	cmp	r3, #255	@ 0xff
 800205c:	d802      	bhi.n	8002064 <HAL_GPIO_Init+0x14c>
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	e002      	b.n	800206a <HAL_GPIO_Init+0x152>
 8002064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002066:	3b08      	subs	r3, #8
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	210f      	movs	r1, #15
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	401a      	ands	r2, r3
 800207c:	6a39      	ldr	r1, [r7, #32]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	431a      	orrs	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80b1 	beq.w	80021fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002098:	4b4d      	ldr	r3, [pc, #308]	@ (80021d0 <HAL_GPIO_Init+0x2b8>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	4a4c      	ldr	r2, [pc, #304]	@ (80021d0 <HAL_GPIO_Init+0x2b8>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6193      	str	r3, [r2, #24]
 80020a4:	4b4a      	ldr	r3, [pc, #296]	@ (80021d0 <HAL_GPIO_Init+0x2b8>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020b0:	4a48      	ldr	r2, [pc, #288]	@ (80021d4 <HAL_GPIO_Init+0x2bc>)
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	220f      	movs	r2, #15
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a40      	ldr	r2, [pc, #256]	@ (80021d8 <HAL_GPIO_Init+0x2c0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d013      	beq.n	8002104 <HAL_GPIO_Init+0x1ec>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a3f      	ldr	r2, [pc, #252]	@ (80021dc <HAL_GPIO_Init+0x2c4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00d      	beq.n	8002100 <HAL_GPIO_Init+0x1e8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a3e      	ldr	r2, [pc, #248]	@ (80021e0 <HAL_GPIO_Init+0x2c8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d007      	beq.n	80020fc <HAL_GPIO_Init+0x1e4>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a3d      	ldr	r2, [pc, #244]	@ (80021e4 <HAL_GPIO_Init+0x2cc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d101      	bne.n	80020f8 <HAL_GPIO_Init+0x1e0>
 80020f4:	2303      	movs	r3, #3
 80020f6:	e006      	b.n	8002106 <HAL_GPIO_Init+0x1ee>
 80020f8:	2304      	movs	r3, #4
 80020fa:	e004      	b.n	8002106 <HAL_GPIO_Init+0x1ee>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e002      	b.n	8002106 <HAL_GPIO_Init+0x1ee>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_GPIO_Init+0x1ee>
 8002104:	2300      	movs	r3, #0
 8002106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002108:	f002 0203 	and.w	r2, r2, #3
 800210c:	0092      	lsls	r2, r2, #2
 800210e:	4093      	lsls	r3, r2
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002116:	492f      	ldr	r1, [pc, #188]	@ (80021d4 <HAL_GPIO_Init+0x2bc>)
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	3302      	adds	r3, #2
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d006      	beq.n	800213e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002130:	4b2d      	ldr	r3, [pc, #180]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	492c      	ldr	r1, [pc, #176]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	608b      	str	r3, [r1, #8]
 800213c:	e006      	b.n	800214c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800213e:	4b2a      	ldr	r3, [pc, #168]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	43db      	mvns	r3, r3
 8002146:	4928      	ldr	r1, [pc, #160]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 8002148:	4013      	ands	r3, r2
 800214a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d006      	beq.n	8002166 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002158:	4b23      	ldr	r3, [pc, #140]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	4922      	ldr	r1, [pc, #136]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	60cb      	str	r3, [r1, #12]
 8002164:	e006      	b.n	8002174 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002166:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	43db      	mvns	r3, r3
 800216e:	491e      	ldr	r1, [pc, #120]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 8002170:	4013      	ands	r3, r2
 8002172:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002180:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	4918      	ldr	r1, [pc, #96]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
 800218c:	e006      	b.n	800219c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800218e:	4b16      	ldr	r3, [pc, #88]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	43db      	mvns	r3, r3
 8002196:	4914      	ldr	r1, [pc, #80]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 8002198:	4013      	ands	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d021      	beq.n	80021ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021a8:	4b0f      	ldr	r3, [pc, #60]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	490e      	ldr	r1, [pc, #56]	@ (80021e8 <HAL_GPIO_Init+0x2d0>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
 80021b4:	e021      	b.n	80021fa <HAL_GPIO_Init+0x2e2>
 80021b6:	bf00      	nop
 80021b8:	10320000 	.word	0x10320000
 80021bc:	10310000 	.word	0x10310000
 80021c0:	10220000 	.word	0x10220000
 80021c4:	10210000 	.word	0x10210000
 80021c8:	10120000 	.word	0x10120000
 80021cc:	10110000 	.word	0x10110000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010000 	.word	0x40010000
 80021d8:	40010800 	.word	0x40010800
 80021dc:	40010c00 	.word	0x40010c00
 80021e0:	40011000 	.word	0x40011000
 80021e4:	40011400 	.word	0x40011400
 80021e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_GPIO_Init+0x304>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	4909      	ldr	r1, [pc, #36]	@ (800221c <HAL_GPIO_Init+0x304>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	3301      	adds	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	fa22 f303 	lsr.w	r3, r2, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	f47f ae8e 	bne.w	8001f2c <HAL_GPIO_Init+0x14>
  }
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	372c      	adds	r7, #44	@ 0x2c
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	40010400 	.word	0x40010400

08002220 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800222a:	4b08      	ldr	r3, [pc, #32]	@ (800224c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d006      	beq.n	8002244 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002236:	4a05      	ldr	r2, [pc, #20]	@ (800224c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f806 	bl	8002250 <HAL_GPIO_EXTI_Callback>
  }
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40010400 	.word	0x40010400

08002250 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e272      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8087 	beq.w	8002392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002284:	4b92      	ldr	r3, [pc, #584]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b04      	cmp	r3, #4
 800228e:	d00c      	beq.n	80022aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002290:	4b8f      	ldr	r3, [pc, #572]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b08      	cmp	r3, #8
 800229a:	d112      	bne.n	80022c2 <HAL_RCC_OscConfig+0x5e>
 800229c:	4b8c      	ldr	r3, [pc, #560]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a8:	d10b      	bne.n	80022c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022aa:	4b89      	ldr	r3, [pc, #548]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d06c      	beq.n	8002390 <HAL_RCC_OscConfig+0x12c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d168      	bne.n	8002390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e24c      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x76>
 80022cc:	4b80      	ldr	r3, [pc, #512]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a7f      	ldr	r2, [pc, #508]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e02e      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x98>
 80022e2:	4b7b      	ldr	r3, [pc, #492]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a7a      	ldr	r2, [pc, #488]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b78      	ldr	r3, [pc, #480]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a77      	ldr	r2, [pc, #476]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0xbc>
 8002306:	4b72      	ldr	r3, [pc, #456]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a71      	ldr	r2, [pc, #452]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b6f      	ldr	r3, [pc, #444]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6e      	ldr	r2, [pc, #440]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 8002320:	4b6b      	ldr	r3, [pc, #428]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6a      	ldr	r2, [pc, #424]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b68      	ldr	r3, [pc, #416]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a67      	ldr	r2, [pc, #412]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002336:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7ff f880 	bl	8001444 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff f87c 	bl	8001444 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e200      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b5d      	ldr	r3, [pc, #372]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0xe4>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff f86c 	bl	8001444 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff f868 	bl	8001444 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	@ 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1ec      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	4b53      	ldr	r3, [pc, #332]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x10c>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d063      	beq.n	8002466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800239e:	4b4c      	ldr	r3, [pc, #304]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023aa:	4b49      	ldr	r3, [pc, #292]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d11c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x18c>
 80023b6:	4b46      	ldr	r3, [pc, #280]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d116      	bne.n	80023f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	4b43      	ldr	r3, [pc, #268]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_RCC_OscConfig+0x176>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e1c0      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	4b3d      	ldr	r3, [pc, #244]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4939      	ldr	r1, [pc, #228]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	e03a      	b.n	8002466 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f8:	4b36      	ldr	r3, [pc, #216]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7ff f821 	bl	8001444 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002406:	f7ff f81d 	bl	8001444 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e1a1      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	4b2d      	ldr	r3, [pc, #180]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002424:	4b2a      	ldr	r3, [pc, #168]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4927      	ldr	r1, [pc, #156]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]
 8002438:	e015      	b.n	8002466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243a:	4b26      	ldr	r3, [pc, #152]	@ (80024d4 <HAL_RCC_OscConfig+0x270>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7ff f800 	bl	8001444 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002448:	f7fe fffc 	bl	8001444 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e180      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d03a      	beq.n	80024e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d019      	beq.n	80024ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247a:	4b17      	ldr	r3, [pc, #92]	@ (80024d8 <HAL_RCC_OscConfig+0x274>)
 800247c:	2201      	movs	r2, #1
 800247e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002480:	f7fe ffe0 	bl	8001444 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002488:	f7fe ffdc 	bl	8001444 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e160      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f000 faba 	bl	8002a20 <RCC_Delay>
 80024ac:	e01c      	b.n	80024e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ae:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <HAL_RCC_OscConfig+0x274>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b4:	f7fe ffc6 	bl	8001444 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ba:	e00f      	b.n	80024dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024bc:	f7fe ffc2 	bl	8001444 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d908      	bls.n	80024dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e146      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	42420000 	.word	0x42420000
 80024d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	4b92      	ldr	r3, [pc, #584]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e9      	bne.n	80024bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80a6 	beq.w	8002642 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10d      	bne.n	8002522 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	4b88      	ldr	r3, [pc, #544]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a87      	ldr	r2, [pc, #540]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002510:	61d3      	str	r3, [r2, #28]
 8002512:	4b85      	ldr	r3, [pc, #532]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251e:	2301      	movs	r3, #1
 8002520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b82      	ldr	r3, [pc, #520]	@ (800272c <HAL_RCC_OscConfig+0x4c8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d118      	bne.n	8002560 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252e:	4b7f      	ldr	r3, [pc, #508]	@ (800272c <HAL_RCC_OscConfig+0x4c8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a7e      	ldr	r2, [pc, #504]	@ (800272c <HAL_RCC_OscConfig+0x4c8>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253a:	f7fe ff83 	bl	8001444 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002542:	f7fe ff7f 	bl	8001444 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b64      	cmp	r3, #100	@ 0x64
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e103      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	4b75      	ldr	r3, [pc, #468]	@ (800272c <HAL_RCC_OscConfig+0x4c8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x312>
 8002568:	4b6f      	ldr	r3, [pc, #444]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a6e      	ldr	r2, [pc, #440]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6213      	str	r3, [r2, #32]
 8002574:	e02d      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x334>
 800257e:	4b6a      	ldr	r3, [pc, #424]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a69      	ldr	r2, [pc, #420]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	4b67      	ldr	r3, [pc, #412]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a66      	ldr	r2, [pc, #408]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	e01c      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b05      	cmp	r3, #5
 800259e:	d10c      	bne.n	80025ba <HAL_RCC_OscConfig+0x356>
 80025a0:	4b61      	ldr	r3, [pc, #388]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4a60      	ldr	r2, [pc, #384]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	6213      	str	r3, [r2, #32]
 80025ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6213      	str	r3, [r2, #32]
 80025b8:	e00b      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 80025ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a5a      	ldr	r2, [pc, #360]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6213      	str	r3, [r2, #32]
 80025c6:	4b58      	ldr	r3, [pc, #352]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a57      	ldr	r2, [pc, #348]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d015      	beq.n	8002606 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025da:	f7fe ff33 	bl	8001444 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7fe ff2f 	bl	8001444 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0b1      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ee      	beq.n	80025e2 <HAL_RCC_OscConfig+0x37e>
 8002604:	e014      	b.n	8002630 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002606:	f7fe ff1d 	bl	8001444 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7fe ff19 	bl	8001444 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e09b      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002624:	4b40      	ldr	r3, [pc, #256]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ee      	bne.n	800260e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d105      	bne.n	8002642 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b3c      	ldr	r3, [pc, #240]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4a3b      	ldr	r2, [pc, #236]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002640:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8087 	beq.w	800275a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800264c:	4b36      	ldr	r3, [pc, #216]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b08      	cmp	r3, #8
 8002656:	d061      	beq.n	800271c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d146      	bne.n	80026ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002660:	4b33      	ldr	r3, [pc, #204]	@ (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fe feed 	bl	8001444 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe fee9 	bl	8001444 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e06d      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002680:	4b29      	ldr	r3, [pc, #164]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002694:	d108      	bne.n	80026a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002696:	4b24      	ldr	r3, [pc, #144]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4921      	ldr	r1, [pc, #132]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a19      	ldr	r1, [r3, #32]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	430b      	orrs	r3, r1
 80026ba:	491b      	ldr	r1, [pc, #108]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7fe febd 	bl	8001444 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fe feb9 	bl	8001444 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e03d      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x46a>
 80026ec:	e035      	b.n	800275a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fea6 	bl	8001444 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fea2 	bl	8001444 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e026      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x498>
 800271a:	e01e      	b.n	800275a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e019      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
 8002728:	40021000 	.word	0x40021000
 800272c:	40007000 	.word	0x40007000
 8002730:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002734:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_RCC_OscConfig+0x500>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	429a      	cmp	r2, r3
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000

08002768 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0d0      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b6a      	ldr	r3, [pc, #424]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d910      	bls.n	80027ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b67      	ldr	r3, [pc, #412]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 0207 	bic.w	r2, r3, #7
 8002792:	4965      	ldr	r1, [pc, #404]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b63      	ldr	r3, [pc, #396]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0b8      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c4:	4b59      	ldr	r3, [pc, #356]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a58      	ldr	r2, [pc, #352]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027dc:	4b53      	ldr	r3, [pc, #332]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a52      	ldr	r2, [pc, #328]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b50      	ldr	r3, [pc, #320]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	494d      	ldr	r1, [pc, #308]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d040      	beq.n	8002888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4b47      	ldr	r3, [pc, #284]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d115      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e07f      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	4b41      	ldr	r3, [pc, #260]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e073      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	4b3d      	ldr	r3, [pc, #244]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06b      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002846:	4b39      	ldr	r3, [pc, #228]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f023 0203 	bic.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4936      	ldr	r1, [pc, #216]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002858:	f7fe fdf4 	bl	8001444 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7fe fdf0 	bl	8001444 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e053      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	4b2d      	ldr	r3, [pc, #180]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 020c 	and.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d1eb      	bne.n	8002860 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002888:	4b27      	ldr	r3, [pc, #156]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d210      	bcs.n	80028b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b24      	ldr	r3, [pc, #144]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 0207 	bic.w	r2, r3, #7
 800289e:	4922      	ldr	r1, [pc, #136]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b20      	ldr	r3, [pc, #128]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e032      	b.n	800291e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c4:	4b19      	ldr	r3, [pc, #100]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4916      	ldr	r1, [pc, #88]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028e2:	4b12      	ldr	r3, [pc, #72]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	490e      	ldr	r1, [pc, #56]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028f6:	f000 f821 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80028fa:	4602      	mov	r2, r0
 80028fc:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	490a      	ldr	r1, [pc, #40]	@ (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	5ccb      	ldrb	r3, [r1, r3]
 800290a:	fa22 f303 	lsr.w	r3, r2, r3
 800290e:	4a09      	ldr	r2, [pc, #36]	@ (8002934 <HAL_RCC_ClockConfig+0x1cc>)
 8002910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002912:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <HAL_RCC_ClockConfig+0x1d0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fd52 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40022000 	.word	0x40022000
 800292c:	40021000 	.word	0x40021000
 8002930:	080056a0 	.word	0x080056a0
 8002934:	20000000 	.word	0x20000000
 8002938:	20000004 	.word	0x20000004

0800293c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002956:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b04      	cmp	r3, #4
 8002964:	d002      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x30>
 8002966:	2b08      	cmp	r3, #8
 8002968:	d003      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0x36>
 800296a:	e027      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800296c:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800296e:	613b      	str	r3, [r7, #16]
      break;
 8002970:	e027      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	0c9b      	lsrs	r3, r3, #18
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	4a17      	ldr	r2, [pc, #92]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800297c:	5cd3      	ldrb	r3, [r2, r3]
 800297e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d010      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800298a:	4b11      	ldr	r3, [pc, #68]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	0c5b      	lsrs	r3, r3, #17
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	4a11      	ldr	r2, [pc, #68]	@ (80029dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002996:	5cd3      	ldrb	r3, [r2, r3]
 8002998:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a0d      	ldr	r2, [pc, #52]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800299e:	fb03 f202 	mul.w	r2, r3, r2
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	e004      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a0c      	ldr	r2, [pc, #48]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029b0:	fb02 f303 	mul.w	r3, r2, r3
 80029b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	613b      	str	r3, [r7, #16]
      break;
 80029ba:	e002      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029bc:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029be:	613b      	str	r3, [r7, #16]
      break;
 80029c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c2:	693b      	ldr	r3, [r7, #16]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	007a1200 	.word	0x007a1200
 80029d8:	080056b8 	.word	0x080056b8
 80029dc:	080056c8 	.word	0x080056c8
 80029e0:	003d0900 	.word	0x003d0900

080029e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e8:	4b02      	ldr	r3, [pc, #8]	@ (80029f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	20000000 	.word	0x20000000

080029f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029fc:	f7ff fff2 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a00:	4602      	mov	r2, r0
 8002a02:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	0adb      	lsrs	r3, r3, #11
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	4903      	ldr	r1, [pc, #12]	@ (8002a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a0e:	5ccb      	ldrb	r3, [r1, r3]
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	080056b0 	.word	0x080056b0

08002a20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a28:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <RCC_Delay+0x34>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a58 <RCC_Delay+0x38>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0a5b      	lsrs	r3, r3, #9
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a3c:	bf00      	nop
  }
  while (Delay --);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1e5a      	subs	r2, r3, #1
 8002a42:	60fa      	str	r2, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f9      	bne.n	8002a3c <RCC_Delay+0x1c>
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	20000000 	.word	0x20000000
 8002a58:	10624dd3 	.word	0x10624dd3

08002a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d07d      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10d      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	4b4c      	ldr	r3, [pc, #304]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	61d3      	str	r3, [r2, #28]
 8002a94:	4b49      	ldr	r3, [pc, #292]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b46      	ldr	r3, [pc, #280]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d118      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab0:	4b43      	ldr	r3, [pc, #268]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a42      	ldr	r2, [pc, #264]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abc:	f7fe fcc2 	bl	8001444 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7fe fcbe 	bl	8001444 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	@ 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e06d      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae2:	4b36      	ldr	r3, [pc, #216]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d02e      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d027      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b00:	4b2e      	ldr	r3, [pc, #184]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b10:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b16:	4a29      	ldr	r2, [pc, #164]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d014      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe fc8d 	bl	8001444 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fc89 	bl	8001444 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e036      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b50:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4917      	ldr	r1, [pc, #92]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b68:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	4a13      	ldr	r2, [pc, #76]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b80:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	490b      	ldr	r1, [pc, #44]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b9e:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	4904      	ldr	r1, [pc, #16]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	42420440 	.word	0x42420440

08002bc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b10      	cmp	r3, #16
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	f200 808a 	bhi.w	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d045      	beq.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d075      	beq.n	8002cea <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002bfe:	e082      	b.n	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002c00:	4b46      	ldr	r3, [pc, #280]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c06:	4b45      	ldr	r3, [pc, #276]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d07b      	beq.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	0c9b      	lsrs	r3, r3, #18
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	4a41      	ldr	r2, [pc, #260]	@ (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d015      	beq.n	8002c56 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0c5b      	lsrs	r3, r3, #17
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	4a3b      	ldr	r2, [pc, #236]	@ (8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00d      	beq.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c44:	4a38      	ldr	r2, [pc, #224]	@ (8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	61fb      	str	r3, [r7, #28]
 8002c54:	e004      	b.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4a34      	ldr	r2, [pc, #208]	@ (8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c60:	4b2e      	ldr	r3, [pc, #184]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c6c:	d102      	bne.n	8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	61bb      	str	r3, [r7, #24]
      break;
 8002c72:	e04a      	b.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4a2d      	ldr	r2, [pc, #180]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	61bb      	str	r3, [r7, #24]
      break;
 8002c82:	e042      	b.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002c84:	4b25      	ldr	r3, [pc, #148]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c94:	d108      	bne.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002ca0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e01f      	b.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cb2:	d109      	bne.n	8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002cb4:	4b19      	ldr	r3, [pc, #100]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002cc0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	e00f      	b.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cd2:	d11c      	bne.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002cd4:	4b11      	ldr	r3, [pc, #68]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d016      	beq.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002ce0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002ce4:	61bb      	str	r3, [r7, #24]
      break;
 8002ce6:	e012      	b.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ce8:	e011      	b.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002cea:	f7ff fe85 	bl	80029f8 <HAL_RCC_GetPCLK2Freq>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	0b9b      	lsrs	r3, r3, #14
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	61bb      	str	r3, [r7, #24]
      break;
 8002d04:	e004      	b.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d06:	bf00      	nop
 8002d08:	e002      	b.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d0e:	bf00      	nop
    }
  }
  return (frequency);
 8002d10:	69bb      	ldr	r3, [r7, #24]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	080056cc 	.word	0x080056cc
 8002d24:	080056dc 	.word	0x080056dc
 8002d28:	007a1200 	.word	0x007a1200
 8002d2c:	003d0900 	.word	0x003d0900
 8002d30:	aaaaaaab 	.word	0xaaaaaaab

08002d34 <__cvt>:
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d3a:	461d      	mov	r5, r3
 8002d3c:	bfbb      	ittet	lt
 8002d3e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002d42:	461d      	movlt	r5, r3
 8002d44:	2300      	movge	r3, #0
 8002d46:	232d      	movlt	r3, #45	@ 0x2d
 8002d48:	b088      	sub	sp, #32
 8002d4a:	4614      	mov	r4, r2
 8002d4c:	bfb8      	it	lt
 8002d4e:	4614      	movlt	r4, r2
 8002d50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002d52:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002d54:	7013      	strb	r3, [r2, #0]
 8002d56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002d58:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002d5c:	f023 0820 	bic.w	r8, r3, #32
 8002d60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002d64:	d005      	beq.n	8002d72 <__cvt+0x3e>
 8002d66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002d6a:	d100      	bne.n	8002d6e <__cvt+0x3a>
 8002d6c:	3601      	adds	r6, #1
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e000      	b.n	8002d74 <__cvt+0x40>
 8002d72:	2303      	movs	r3, #3
 8002d74:	aa07      	add	r2, sp, #28
 8002d76:	9204      	str	r2, [sp, #16]
 8002d78:	aa06      	add	r2, sp, #24
 8002d7a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002d7e:	e9cd 3600 	strd	r3, r6, [sp]
 8002d82:	4622      	mov	r2, r4
 8002d84:	462b      	mov	r3, r5
 8002d86:	f000 fe5f 	bl	8003a48 <_dtoa_r>
 8002d8a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002d8e:	4607      	mov	r7, r0
 8002d90:	d119      	bne.n	8002dc6 <__cvt+0x92>
 8002d92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002d94:	07db      	lsls	r3, r3, #31
 8002d96:	d50e      	bpl.n	8002db6 <__cvt+0x82>
 8002d98:	eb00 0906 	add.w	r9, r0, r6
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2300      	movs	r3, #0
 8002da0:	4620      	mov	r0, r4
 8002da2:	4629      	mov	r1, r5
 8002da4:	f7fd feb4 	bl	8000b10 <__aeabi_dcmpeq>
 8002da8:	b108      	cbz	r0, 8002dae <__cvt+0x7a>
 8002daa:	f8cd 901c 	str.w	r9, [sp, #28]
 8002dae:	2230      	movs	r2, #48	@ 0x30
 8002db0:	9b07      	ldr	r3, [sp, #28]
 8002db2:	454b      	cmp	r3, r9
 8002db4:	d31e      	bcc.n	8002df4 <__cvt+0xc0>
 8002db6:	4638      	mov	r0, r7
 8002db8:	9b07      	ldr	r3, [sp, #28]
 8002dba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002dbc:	1bdb      	subs	r3, r3, r7
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	b008      	add	sp, #32
 8002dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dc6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002dca:	eb00 0906 	add.w	r9, r0, r6
 8002dce:	d1e5      	bne.n	8002d9c <__cvt+0x68>
 8002dd0:	7803      	ldrb	r3, [r0, #0]
 8002dd2:	2b30      	cmp	r3, #48	@ 0x30
 8002dd4:	d10a      	bne.n	8002dec <__cvt+0xb8>
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2300      	movs	r3, #0
 8002dda:	4620      	mov	r0, r4
 8002ddc:	4629      	mov	r1, r5
 8002dde:	f7fd fe97 	bl	8000b10 <__aeabi_dcmpeq>
 8002de2:	b918      	cbnz	r0, 8002dec <__cvt+0xb8>
 8002de4:	f1c6 0601 	rsb	r6, r6, #1
 8002de8:	f8ca 6000 	str.w	r6, [sl]
 8002dec:	f8da 3000 	ldr.w	r3, [sl]
 8002df0:	4499      	add	r9, r3
 8002df2:	e7d3      	b.n	8002d9c <__cvt+0x68>
 8002df4:	1c59      	adds	r1, r3, #1
 8002df6:	9107      	str	r1, [sp, #28]
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e7d9      	b.n	8002db0 <__cvt+0x7c>

08002dfc <__exponent>:
 8002dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dfe:	2900      	cmp	r1, #0
 8002e00:	bfb6      	itet	lt
 8002e02:	232d      	movlt	r3, #45	@ 0x2d
 8002e04:	232b      	movge	r3, #43	@ 0x2b
 8002e06:	4249      	neglt	r1, r1
 8002e08:	2909      	cmp	r1, #9
 8002e0a:	7002      	strb	r2, [r0, #0]
 8002e0c:	7043      	strb	r3, [r0, #1]
 8002e0e:	dd29      	ble.n	8002e64 <__exponent+0x68>
 8002e10:	f10d 0307 	add.w	r3, sp, #7
 8002e14:	461d      	mov	r5, r3
 8002e16:	270a      	movs	r7, #10
 8002e18:	fbb1 f6f7 	udiv	r6, r1, r7
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	fb07 1416 	mls	r4, r7, r6, r1
 8002e22:	3430      	adds	r4, #48	@ 0x30
 8002e24:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002e28:	460c      	mov	r4, r1
 8002e2a:	2c63      	cmp	r4, #99	@ 0x63
 8002e2c:	4631      	mov	r1, r6
 8002e2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e32:	dcf1      	bgt.n	8002e18 <__exponent+0x1c>
 8002e34:	3130      	adds	r1, #48	@ 0x30
 8002e36:	1e94      	subs	r4, r2, #2
 8002e38:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002e3c:	4623      	mov	r3, r4
 8002e3e:	1c41      	adds	r1, r0, #1
 8002e40:	42ab      	cmp	r3, r5
 8002e42:	d30a      	bcc.n	8002e5a <__exponent+0x5e>
 8002e44:	f10d 0309 	add.w	r3, sp, #9
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	42ac      	cmp	r4, r5
 8002e4c:	bf88      	it	hi
 8002e4e:	2300      	movhi	r3, #0
 8002e50:	3302      	adds	r3, #2
 8002e52:	4403      	add	r3, r0
 8002e54:	1a18      	subs	r0, r3, r0
 8002e56:	b003      	add	sp, #12
 8002e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002e5e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002e62:	e7ed      	b.n	8002e40 <__exponent+0x44>
 8002e64:	2330      	movs	r3, #48	@ 0x30
 8002e66:	3130      	adds	r1, #48	@ 0x30
 8002e68:	7083      	strb	r3, [r0, #2]
 8002e6a:	70c1      	strb	r1, [r0, #3]
 8002e6c:	1d03      	adds	r3, r0, #4
 8002e6e:	e7f1      	b.n	8002e54 <__exponent+0x58>

08002e70 <_printf_float>:
 8002e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e74:	b091      	sub	sp, #68	@ 0x44
 8002e76:	460c      	mov	r4, r1
 8002e78:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002e7c:	4616      	mov	r6, r2
 8002e7e:	461f      	mov	r7, r3
 8002e80:	4605      	mov	r5, r0
 8002e82:	f000 fcd3 	bl	800382c <_localeconv_r>
 8002e86:	6803      	ldr	r3, [r0, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	9308      	str	r3, [sp, #32]
 8002e8c:	f7fd f960 	bl	8000150 <strlen>
 8002e90:	2300      	movs	r3, #0
 8002e92:	930e      	str	r3, [sp, #56]	@ 0x38
 8002e94:	f8d8 3000 	ldr.w	r3, [r8]
 8002e98:	9009      	str	r0, [sp, #36]	@ 0x24
 8002e9a:	3307      	adds	r3, #7
 8002e9c:	f023 0307 	bic.w	r3, r3, #7
 8002ea0:	f103 0208 	add.w	r2, r3, #8
 8002ea4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002ea8:	f8d4 b000 	ldr.w	fp, [r4]
 8002eac:	f8c8 2000 	str.w	r2, [r8]
 8002eb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002eb4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002eba:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002ec6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002eca:	4b9c      	ldr	r3, [pc, #624]	@ (800313c <_printf_float+0x2cc>)
 8002ecc:	f7fd fe52 	bl	8000b74 <__aeabi_dcmpun>
 8002ed0:	bb70      	cbnz	r0, 8002f30 <_printf_float+0xc0>
 8002ed2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eda:	4b98      	ldr	r3, [pc, #608]	@ (800313c <_printf_float+0x2cc>)
 8002edc:	f7fd fe2c 	bl	8000b38 <__aeabi_dcmple>
 8002ee0:	bb30      	cbnz	r0, 8002f30 <_printf_float+0xc0>
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	4640      	mov	r0, r8
 8002ee8:	4649      	mov	r1, r9
 8002eea:	f7fd fe1b 	bl	8000b24 <__aeabi_dcmplt>
 8002eee:	b110      	cbz	r0, 8002ef6 <_printf_float+0x86>
 8002ef0:	232d      	movs	r3, #45	@ 0x2d
 8002ef2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ef6:	4a92      	ldr	r2, [pc, #584]	@ (8003140 <_printf_float+0x2d0>)
 8002ef8:	4b92      	ldr	r3, [pc, #584]	@ (8003144 <_printf_float+0x2d4>)
 8002efa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002efe:	bf94      	ite	ls
 8002f00:	4690      	movls	r8, r2
 8002f02:	4698      	movhi	r8, r3
 8002f04:	2303      	movs	r3, #3
 8002f06:	f04f 0900 	mov.w	r9, #0
 8002f0a:	6123      	str	r3, [r4, #16]
 8002f0c:	f02b 0304 	bic.w	r3, fp, #4
 8002f10:	6023      	str	r3, [r4, #0]
 8002f12:	4633      	mov	r3, r6
 8002f14:	4621      	mov	r1, r4
 8002f16:	4628      	mov	r0, r5
 8002f18:	9700      	str	r7, [sp, #0]
 8002f1a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002f1c:	f000 f9d4 	bl	80032c8 <_printf_common>
 8002f20:	3001      	adds	r0, #1
 8002f22:	f040 8090 	bne.w	8003046 <_printf_float+0x1d6>
 8002f26:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2a:	b011      	add	sp, #68	@ 0x44
 8002f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f30:	4642      	mov	r2, r8
 8002f32:	464b      	mov	r3, r9
 8002f34:	4640      	mov	r0, r8
 8002f36:	4649      	mov	r1, r9
 8002f38:	f7fd fe1c 	bl	8000b74 <__aeabi_dcmpun>
 8002f3c:	b148      	cbz	r0, 8002f52 <_printf_float+0xe2>
 8002f3e:	464b      	mov	r3, r9
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bfb8      	it	lt
 8002f44:	232d      	movlt	r3, #45	@ 0x2d
 8002f46:	4a80      	ldr	r2, [pc, #512]	@ (8003148 <_printf_float+0x2d8>)
 8002f48:	bfb8      	it	lt
 8002f4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800314c <_printf_float+0x2dc>)
 8002f50:	e7d3      	b.n	8002efa <_printf_float+0x8a>
 8002f52:	6863      	ldr	r3, [r4, #4]
 8002f54:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	d13f      	bne.n	8002fdc <_printf_float+0x16c>
 8002f5c:	2306      	movs	r3, #6
 8002f5e:	6063      	str	r3, [r4, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002f66:	6023      	str	r3, [r4, #0]
 8002f68:	9206      	str	r2, [sp, #24]
 8002f6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8002f6c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002f70:	aa0d      	add	r2, sp, #52	@ 0x34
 8002f72:	9203      	str	r2, [sp, #12]
 8002f74:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002f78:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002f7c:	6863      	ldr	r3, [r4, #4]
 8002f7e:	4642      	mov	r2, r8
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	4628      	mov	r0, r5
 8002f84:	464b      	mov	r3, r9
 8002f86:	910a      	str	r1, [sp, #40]	@ 0x28
 8002f88:	f7ff fed4 	bl	8002d34 <__cvt>
 8002f8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002f8e:	4680      	mov	r8, r0
 8002f90:	2947      	cmp	r1, #71	@ 0x47
 8002f92:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002f94:	d128      	bne.n	8002fe8 <_printf_float+0x178>
 8002f96:	1cc8      	adds	r0, r1, #3
 8002f98:	db02      	blt.n	8002fa0 <_printf_float+0x130>
 8002f9a:	6863      	ldr	r3, [r4, #4]
 8002f9c:	4299      	cmp	r1, r3
 8002f9e:	dd40      	ble.n	8003022 <_printf_float+0x1b2>
 8002fa0:	f1aa 0a02 	sub.w	sl, sl, #2
 8002fa4:	fa5f fa8a 	uxtb.w	sl, sl
 8002fa8:	4652      	mov	r2, sl
 8002faa:	3901      	subs	r1, #1
 8002fac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002fb0:	910d      	str	r1, [sp, #52]	@ 0x34
 8002fb2:	f7ff ff23 	bl	8002dfc <__exponent>
 8002fb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002fb8:	4681      	mov	r9, r0
 8002fba:	1813      	adds	r3, r2, r0
 8002fbc:	2a01      	cmp	r2, #1
 8002fbe:	6123      	str	r3, [r4, #16]
 8002fc0:	dc02      	bgt.n	8002fc8 <_printf_float+0x158>
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	07d2      	lsls	r2, r2, #31
 8002fc6:	d501      	bpl.n	8002fcc <_printf_float+0x15c>
 8002fc8:	3301      	adds	r3, #1
 8002fca:	6123      	str	r3, [r4, #16]
 8002fcc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d09e      	beq.n	8002f12 <_printf_float+0xa2>
 8002fd4:	232d      	movs	r3, #45	@ 0x2d
 8002fd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fda:	e79a      	b.n	8002f12 <_printf_float+0xa2>
 8002fdc:	2947      	cmp	r1, #71	@ 0x47
 8002fde:	d1bf      	bne.n	8002f60 <_printf_float+0xf0>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1bd      	bne.n	8002f60 <_printf_float+0xf0>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e7ba      	b.n	8002f5e <_printf_float+0xee>
 8002fe8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002fec:	d9dc      	bls.n	8002fa8 <_printf_float+0x138>
 8002fee:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002ff2:	d118      	bne.n	8003026 <_printf_float+0x1b6>
 8002ff4:	2900      	cmp	r1, #0
 8002ff6:	6863      	ldr	r3, [r4, #4]
 8002ff8:	dd0b      	ble.n	8003012 <_printf_float+0x1a2>
 8002ffa:	6121      	str	r1, [r4, #16]
 8002ffc:	b913      	cbnz	r3, 8003004 <_printf_float+0x194>
 8002ffe:	6822      	ldr	r2, [r4, #0]
 8003000:	07d0      	lsls	r0, r2, #31
 8003002:	d502      	bpl.n	800300a <_printf_float+0x19a>
 8003004:	3301      	adds	r3, #1
 8003006:	440b      	add	r3, r1
 8003008:	6123      	str	r3, [r4, #16]
 800300a:	f04f 0900 	mov.w	r9, #0
 800300e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003010:	e7dc      	b.n	8002fcc <_printf_float+0x15c>
 8003012:	b913      	cbnz	r3, 800301a <_printf_float+0x1aa>
 8003014:	6822      	ldr	r2, [r4, #0]
 8003016:	07d2      	lsls	r2, r2, #31
 8003018:	d501      	bpl.n	800301e <_printf_float+0x1ae>
 800301a:	3302      	adds	r3, #2
 800301c:	e7f4      	b.n	8003008 <_printf_float+0x198>
 800301e:	2301      	movs	r3, #1
 8003020:	e7f2      	b.n	8003008 <_printf_float+0x198>
 8003022:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003026:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003028:	4299      	cmp	r1, r3
 800302a:	db05      	blt.n	8003038 <_printf_float+0x1c8>
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	6121      	str	r1, [r4, #16]
 8003030:	07d8      	lsls	r0, r3, #31
 8003032:	d5ea      	bpl.n	800300a <_printf_float+0x19a>
 8003034:	1c4b      	adds	r3, r1, #1
 8003036:	e7e7      	b.n	8003008 <_printf_float+0x198>
 8003038:	2900      	cmp	r1, #0
 800303a:	bfcc      	ite	gt
 800303c:	2201      	movgt	r2, #1
 800303e:	f1c1 0202 	rsble	r2, r1, #2
 8003042:	4413      	add	r3, r2
 8003044:	e7e0      	b.n	8003008 <_printf_float+0x198>
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	055a      	lsls	r2, r3, #21
 800304a:	d407      	bmi.n	800305c <_printf_float+0x1ec>
 800304c:	6923      	ldr	r3, [r4, #16]
 800304e:	4642      	mov	r2, r8
 8003050:	4631      	mov	r1, r6
 8003052:	4628      	mov	r0, r5
 8003054:	47b8      	blx	r7
 8003056:	3001      	adds	r0, #1
 8003058:	d12b      	bne.n	80030b2 <_printf_float+0x242>
 800305a:	e764      	b.n	8002f26 <_printf_float+0xb6>
 800305c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003060:	f240 80dc 	bls.w	800321c <_printf_float+0x3ac>
 8003064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003068:	2200      	movs	r2, #0
 800306a:	2300      	movs	r3, #0
 800306c:	f7fd fd50 	bl	8000b10 <__aeabi_dcmpeq>
 8003070:	2800      	cmp	r0, #0
 8003072:	d033      	beq.n	80030dc <_printf_float+0x26c>
 8003074:	2301      	movs	r3, #1
 8003076:	4631      	mov	r1, r6
 8003078:	4628      	mov	r0, r5
 800307a:	4a35      	ldr	r2, [pc, #212]	@ (8003150 <_printf_float+0x2e0>)
 800307c:	47b8      	blx	r7
 800307e:	3001      	adds	r0, #1
 8003080:	f43f af51 	beq.w	8002f26 <_printf_float+0xb6>
 8003084:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003088:	4543      	cmp	r3, r8
 800308a:	db02      	blt.n	8003092 <_printf_float+0x222>
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	07d8      	lsls	r0, r3, #31
 8003090:	d50f      	bpl.n	80030b2 <_printf_float+0x242>
 8003092:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003096:	4631      	mov	r1, r6
 8003098:	4628      	mov	r0, r5
 800309a:	47b8      	blx	r7
 800309c:	3001      	adds	r0, #1
 800309e:	f43f af42 	beq.w	8002f26 <_printf_float+0xb6>
 80030a2:	f04f 0900 	mov.w	r9, #0
 80030a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80030aa:	f104 0a1a 	add.w	sl, r4, #26
 80030ae:	45c8      	cmp	r8, r9
 80030b0:	dc09      	bgt.n	80030c6 <_printf_float+0x256>
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	079b      	lsls	r3, r3, #30
 80030b6:	f100 8102 	bmi.w	80032be <_printf_float+0x44e>
 80030ba:	68e0      	ldr	r0, [r4, #12]
 80030bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80030be:	4298      	cmp	r0, r3
 80030c0:	bfb8      	it	lt
 80030c2:	4618      	movlt	r0, r3
 80030c4:	e731      	b.n	8002f2a <_printf_float+0xba>
 80030c6:	2301      	movs	r3, #1
 80030c8:	4652      	mov	r2, sl
 80030ca:	4631      	mov	r1, r6
 80030cc:	4628      	mov	r0, r5
 80030ce:	47b8      	blx	r7
 80030d0:	3001      	adds	r0, #1
 80030d2:	f43f af28 	beq.w	8002f26 <_printf_float+0xb6>
 80030d6:	f109 0901 	add.w	r9, r9, #1
 80030da:	e7e8      	b.n	80030ae <_printf_float+0x23e>
 80030dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80030de:	2b00      	cmp	r3, #0
 80030e0:	dc38      	bgt.n	8003154 <_printf_float+0x2e4>
 80030e2:	2301      	movs	r3, #1
 80030e4:	4631      	mov	r1, r6
 80030e6:	4628      	mov	r0, r5
 80030e8:	4a19      	ldr	r2, [pc, #100]	@ (8003150 <_printf_float+0x2e0>)
 80030ea:	47b8      	blx	r7
 80030ec:	3001      	adds	r0, #1
 80030ee:	f43f af1a 	beq.w	8002f26 <_printf_float+0xb6>
 80030f2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80030f6:	ea59 0303 	orrs.w	r3, r9, r3
 80030fa:	d102      	bne.n	8003102 <_printf_float+0x292>
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	07d9      	lsls	r1, r3, #31
 8003100:	d5d7      	bpl.n	80030b2 <_printf_float+0x242>
 8003102:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003106:	4631      	mov	r1, r6
 8003108:	4628      	mov	r0, r5
 800310a:	47b8      	blx	r7
 800310c:	3001      	adds	r0, #1
 800310e:	f43f af0a 	beq.w	8002f26 <_printf_float+0xb6>
 8003112:	f04f 0a00 	mov.w	sl, #0
 8003116:	f104 0b1a 	add.w	fp, r4, #26
 800311a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800311c:	425b      	negs	r3, r3
 800311e:	4553      	cmp	r3, sl
 8003120:	dc01      	bgt.n	8003126 <_printf_float+0x2b6>
 8003122:	464b      	mov	r3, r9
 8003124:	e793      	b.n	800304e <_printf_float+0x1de>
 8003126:	2301      	movs	r3, #1
 8003128:	465a      	mov	r2, fp
 800312a:	4631      	mov	r1, r6
 800312c:	4628      	mov	r0, r5
 800312e:	47b8      	blx	r7
 8003130:	3001      	adds	r0, #1
 8003132:	f43f aef8 	beq.w	8002f26 <_printf_float+0xb6>
 8003136:	f10a 0a01 	add.w	sl, sl, #1
 800313a:	e7ee      	b.n	800311a <_printf_float+0x2aa>
 800313c:	7fefffff 	.word	0x7fefffff
 8003140:	080056de 	.word	0x080056de
 8003144:	080056e2 	.word	0x080056e2
 8003148:	080056e6 	.word	0x080056e6
 800314c:	080056ea 	.word	0x080056ea
 8003150:	080056ee 	.word	0x080056ee
 8003154:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003156:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800315a:	4553      	cmp	r3, sl
 800315c:	bfa8      	it	ge
 800315e:	4653      	movge	r3, sl
 8003160:	2b00      	cmp	r3, #0
 8003162:	4699      	mov	r9, r3
 8003164:	dc36      	bgt.n	80031d4 <_printf_float+0x364>
 8003166:	f04f 0b00 	mov.w	fp, #0
 800316a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800316e:	f104 021a 	add.w	r2, r4, #26
 8003172:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003174:	930a      	str	r3, [sp, #40]	@ 0x28
 8003176:	eba3 0309 	sub.w	r3, r3, r9
 800317a:	455b      	cmp	r3, fp
 800317c:	dc31      	bgt.n	80031e2 <_printf_float+0x372>
 800317e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003180:	459a      	cmp	sl, r3
 8003182:	dc3a      	bgt.n	80031fa <_printf_float+0x38a>
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	07da      	lsls	r2, r3, #31
 8003188:	d437      	bmi.n	80031fa <_printf_float+0x38a>
 800318a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800318c:	ebaa 0903 	sub.w	r9, sl, r3
 8003190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003192:	ebaa 0303 	sub.w	r3, sl, r3
 8003196:	4599      	cmp	r9, r3
 8003198:	bfa8      	it	ge
 800319a:	4699      	movge	r9, r3
 800319c:	f1b9 0f00 	cmp.w	r9, #0
 80031a0:	dc33      	bgt.n	800320a <_printf_float+0x39a>
 80031a2:	f04f 0800 	mov.w	r8, #0
 80031a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80031aa:	f104 0b1a 	add.w	fp, r4, #26
 80031ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80031b0:	ebaa 0303 	sub.w	r3, sl, r3
 80031b4:	eba3 0309 	sub.w	r3, r3, r9
 80031b8:	4543      	cmp	r3, r8
 80031ba:	f77f af7a 	ble.w	80030b2 <_printf_float+0x242>
 80031be:	2301      	movs	r3, #1
 80031c0:	465a      	mov	r2, fp
 80031c2:	4631      	mov	r1, r6
 80031c4:	4628      	mov	r0, r5
 80031c6:	47b8      	blx	r7
 80031c8:	3001      	adds	r0, #1
 80031ca:	f43f aeac 	beq.w	8002f26 <_printf_float+0xb6>
 80031ce:	f108 0801 	add.w	r8, r8, #1
 80031d2:	e7ec      	b.n	80031ae <_printf_float+0x33e>
 80031d4:	4642      	mov	r2, r8
 80031d6:	4631      	mov	r1, r6
 80031d8:	4628      	mov	r0, r5
 80031da:	47b8      	blx	r7
 80031dc:	3001      	adds	r0, #1
 80031de:	d1c2      	bne.n	8003166 <_printf_float+0x2f6>
 80031e0:	e6a1      	b.n	8002f26 <_printf_float+0xb6>
 80031e2:	2301      	movs	r3, #1
 80031e4:	4631      	mov	r1, r6
 80031e6:	4628      	mov	r0, r5
 80031e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80031ea:	47b8      	blx	r7
 80031ec:	3001      	adds	r0, #1
 80031ee:	f43f ae9a 	beq.w	8002f26 <_printf_float+0xb6>
 80031f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80031f4:	f10b 0b01 	add.w	fp, fp, #1
 80031f8:	e7bb      	b.n	8003172 <_printf_float+0x302>
 80031fa:	4631      	mov	r1, r6
 80031fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003200:	4628      	mov	r0, r5
 8003202:	47b8      	blx	r7
 8003204:	3001      	adds	r0, #1
 8003206:	d1c0      	bne.n	800318a <_printf_float+0x31a>
 8003208:	e68d      	b.n	8002f26 <_printf_float+0xb6>
 800320a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800320c:	464b      	mov	r3, r9
 800320e:	4631      	mov	r1, r6
 8003210:	4628      	mov	r0, r5
 8003212:	4442      	add	r2, r8
 8003214:	47b8      	blx	r7
 8003216:	3001      	adds	r0, #1
 8003218:	d1c3      	bne.n	80031a2 <_printf_float+0x332>
 800321a:	e684      	b.n	8002f26 <_printf_float+0xb6>
 800321c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003220:	f1ba 0f01 	cmp.w	sl, #1
 8003224:	dc01      	bgt.n	800322a <_printf_float+0x3ba>
 8003226:	07db      	lsls	r3, r3, #31
 8003228:	d536      	bpl.n	8003298 <_printf_float+0x428>
 800322a:	2301      	movs	r3, #1
 800322c:	4642      	mov	r2, r8
 800322e:	4631      	mov	r1, r6
 8003230:	4628      	mov	r0, r5
 8003232:	47b8      	blx	r7
 8003234:	3001      	adds	r0, #1
 8003236:	f43f ae76 	beq.w	8002f26 <_printf_float+0xb6>
 800323a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800323e:	4631      	mov	r1, r6
 8003240:	4628      	mov	r0, r5
 8003242:	47b8      	blx	r7
 8003244:	3001      	adds	r0, #1
 8003246:	f43f ae6e 	beq.w	8002f26 <_printf_float+0xb6>
 800324a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800324e:	2200      	movs	r2, #0
 8003250:	2300      	movs	r3, #0
 8003252:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003256:	f7fd fc5b 	bl	8000b10 <__aeabi_dcmpeq>
 800325a:	b9c0      	cbnz	r0, 800328e <_printf_float+0x41e>
 800325c:	4653      	mov	r3, sl
 800325e:	f108 0201 	add.w	r2, r8, #1
 8003262:	4631      	mov	r1, r6
 8003264:	4628      	mov	r0, r5
 8003266:	47b8      	blx	r7
 8003268:	3001      	adds	r0, #1
 800326a:	d10c      	bne.n	8003286 <_printf_float+0x416>
 800326c:	e65b      	b.n	8002f26 <_printf_float+0xb6>
 800326e:	2301      	movs	r3, #1
 8003270:	465a      	mov	r2, fp
 8003272:	4631      	mov	r1, r6
 8003274:	4628      	mov	r0, r5
 8003276:	47b8      	blx	r7
 8003278:	3001      	adds	r0, #1
 800327a:	f43f ae54 	beq.w	8002f26 <_printf_float+0xb6>
 800327e:	f108 0801 	add.w	r8, r8, #1
 8003282:	45d0      	cmp	r8, sl
 8003284:	dbf3      	blt.n	800326e <_printf_float+0x3fe>
 8003286:	464b      	mov	r3, r9
 8003288:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800328c:	e6e0      	b.n	8003050 <_printf_float+0x1e0>
 800328e:	f04f 0800 	mov.w	r8, #0
 8003292:	f104 0b1a 	add.w	fp, r4, #26
 8003296:	e7f4      	b.n	8003282 <_printf_float+0x412>
 8003298:	2301      	movs	r3, #1
 800329a:	4642      	mov	r2, r8
 800329c:	e7e1      	b.n	8003262 <_printf_float+0x3f2>
 800329e:	2301      	movs	r3, #1
 80032a0:	464a      	mov	r2, r9
 80032a2:	4631      	mov	r1, r6
 80032a4:	4628      	mov	r0, r5
 80032a6:	47b8      	blx	r7
 80032a8:	3001      	adds	r0, #1
 80032aa:	f43f ae3c 	beq.w	8002f26 <_printf_float+0xb6>
 80032ae:	f108 0801 	add.w	r8, r8, #1
 80032b2:	68e3      	ldr	r3, [r4, #12]
 80032b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80032b6:	1a5b      	subs	r3, r3, r1
 80032b8:	4543      	cmp	r3, r8
 80032ba:	dcf0      	bgt.n	800329e <_printf_float+0x42e>
 80032bc:	e6fd      	b.n	80030ba <_printf_float+0x24a>
 80032be:	f04f 0800 	mov.w	r8, #0
 80032c2:	f104 0919 	add.w	r9, r4, #25
 80032c6:	e7f4      	b.n	80032b2 <_printf_float+0x442>

080032c8 <_printf_common>:
 80032c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032cc:	4616      	mov	r6, r2
 80032ce:	4698      	mov	r8, r3
 80032d0:	688a      	ldr	r2, [r1, #8]
 80032d2:	690b      	ldr	r3, [r1, #16]
 80032d4:	4607      	mov	r7, r0
 80032d6:	4293      	cmp	r3, r2
 80032d8:	bfb8      	it	lt
 80032da:	4613      	movlt	r3, r2
 80032dc:	6033      	str	r3, [r6, #0]
 80032de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80032e2:	460c      	mov	r4, r1
 80032e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80032e8:	b10a      	cbz	r2, 80032ee <_printf_common+0x26>
 80032ea:	3301      	adds	r3, #1
 80032ec:	6033      	str	r3, [r6, #0]
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	0699      	lsls	r1, r3, #26
 80032f2:	bf42      	ittt	mi
 80032f4:	6833      	ldrmi	r3, [r6, #0]
 80032f6:	3302      	addmi	r3, #2
 80032f8:	6033      	strmi	r3, [r6, #0]
 80032fa:	6825      	ldr	r5, [r4, #0]
 80032fc:	f015 0506 	ands.w	r5, r5, #6
 8003300:	d106      	bne.n	8003310 <_printf_common+0x48>
 8003302:	f104 0a19 	add.w	sl, r4, #25
 8003306:	68e3      	ldr	r3, [r4, #12]
 8003308:	6832      	ldr	r2, [r6, #0]
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	42ab      	cmp	r3, r5
 800330e:	dc2b      	bgt.n	8003368 <_printf_common+0xa0>
 8003310:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003314:	6822      	ldr	r2, [r4, #0]
 8003316:	3b00      	subs	r3, #0
 8003318:	bf18      	it	ne
 800331a:	2301      	movne	r3, #1
 800331c:	0692      	lsls	r2, r2, #26
 800331e:	d430      	bmi.n	8003382 <_printf_common+0xba>
 8003320:	4641      	mov	r1, r8
 8003322:	4638      	mov	r0, r7
 8003324:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003328:	47c8      	blx	r9
 800332a:	3001      	adds	r0, #1
 800332c:	d023      	beq.n	8003376 <_printf_common+0xae>
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	6922      	ldr	r2, [r4, #16]
 8003332:	f003 0306 	and.w	r3, r3, #6
 8003336:	2b04      	cmp	r3, #4
 8003338:	bf14      	ite	ne
 800333a:	2500      	movne	r5, #0
 800333c:	6833      	ldreq	r3, [r6, #0]
 800333e:	f04f 0600 	mov.w	r6, #0
 8003342:	bf08      	it	eq
 8003344:	68e5      	ldreq	r5, [r4, #12]
 8003346:	f104 041a 	add.w	r4, r4, #26
 800334a:	bf08      	it	eq
 800334c:	1aed      	subeq	r5, r5, r3
 800334e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003352:	bf08      	it	eq
 8003354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003358:	4293      	cmp	r3, r2
 800335a:	bfc4      	itt	gt
 800335c:	1a9b      	subgt	r3, r3, r2
 800335e:	18ed      	addgt	r5, r5, r3
 8003360:	42b5      	cmp	r5, r6
 8003362:	d11a      	bne.n	800339a <_printf_common+0xd2>
 8003364:	2000      	movs	r0, #0
 8003366:	e008      	b.n	800337a <_printf_common+0xb2>
 8003368:	2301      	movs	r3, #1
 800336a:	4652      	mov	r2, sl
 800336c:	4641      	mov	r1, r8
 800336e:	4638      	mov	r0, r7
 8003370:	47c8      	blx	r9
 8003372:	3001      	adds	r0, #1
 8003374:	d103      	bne.n	800337e <_printf_common+0xb6>
 8003376:	f04f 30ff 	mov.w	r0, #4294967295
 800337a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800337e:	3501      	adds	r5, #1
 8003380:	e7c1      	b.n	8003306 <_printf_common+0x3e>
 8003382:	2030      	movs	r0, #48	@ 0x30
 8003384:	18e1      	adds	r1, r4, r3
 8003386:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003390:	4422      	add	r2, r4
 8003392:	3302      	adds	r3, #2
 8003394:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003398:	e7c2      	b.n	8003320 <_printf_common+0x58>
 800339a:	2301      	movs	r3, #1
 800339c:	4622      	mov	r2, r4
 800339e:	4641      	mov	r1, r8
 80033a0:	4638      	mov	r0, r7
 80033a2:	47c8      	blx	r9
 80033a4:	3001      	adds	r0, #1
 80033a6:	d0e6      	beq.n	8003376 <_printf_common+0xae>
 80033a8:	3601      	adds	r6, #1
 80033aa:	e7d9      	b.n	8003360 <_printf_common+0x98>

080033ac <_printf_i>:
 80033ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033b0:	7e0f      	ldrb	r7, [r1, #24]
 80033b2:	4691      	mov	r9, r2
 80033b4:	2f78      	cmp	r7, #120	@ 0x78
 80033b6:	4680      	mov	r8, r0
 80033b8:	460c      	mov	r4, r1
 80033ba:	469a      	mov	sl, r3
 80033bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80033be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80033c2:	d807      	bhi.n	80033d4 <_printf_i+0x28>
 80033c4:	2f62      	cmp	r7, #98	@ 0x62
 80033c6:	d80a      	bhi.n	80033de <_printf_i+0x32>
 80033c8:	2f00      	cmp	r7, #0
 80033ca:	f000 80d3 	beq.w	8003574 <_printf_i+0x1c8>
 80033ce:	2f58      	cmp	r7, #88	@ 0x58
 80033d0:	f000 80ba 	beq.w	8003548 <_printf_i+0x19c>
 80033d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80033dc:	e03a      	b.n	8003454 <_printf_i+0xa8>
 80033de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80033e2:	2b15      	cmp	r3, #21
 80033e4:	d8f6      	bhi.n	80033d4 <_printf_i+0x28>
 80033e6:	a101      	add	r1, pc, #4	@ (adr r1, 80033ec <_printf_i+0x40>)
 80033e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033ec:	08003445 	.word	0x08003445
 80033f0:	08003459 	.word	0x08003459
 80033f4:	080033d5 	.word	0x080033d5
 80033f8:	080033d5 	.word	0x080033d5
 80033fc:	080033d5 	.word	0x080033d5
 8003400:	080033d5 	.word	0x080033d5
 8003404:	08003459 	.word	0x08003459
 8003408:	080033d5 	.word	0x080033d5
 800340c:	080033d5 	.word	0x080033d5
 8003410:	080033d5 	.word	0x080033d5
 8003414:	080033d5 	.word	0x080033d5
 8003418:	0800355b 	.word	0x0800355b
 800341c:	08003483 	.word	0x08003483
 8003420:	08003515 	.word	0x08003515
 8003424:	080033d5 	.word	0x080033d5
 8003428:	080033d5 	.word	0x080033d5
 800342c:	0800357d 	.word	0x0800357d
 8003430:	080033d5 	.word	0x080033d5
 8003434:	08003483 	.word	0x08003483
 8003438:	080033d5 	.word	0x080033d5
 800343c:	080033d5 	.word	0x080033d5
 8003440:	0800351d 	.word	0x0800351d
 8003444:	6833      	ldr	r3, [r6, #0]
 8003446:	1d1a      	adds	r2, r3, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6032      	str	r2, [r6, #0]
 800344c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003450:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003454:	2301      	movs	r3, #1
 8003456:	e09e      	b.n	8003596 <_printf_i+0x1ea>
 8003458:	6833      	ldr	r3, [r6, #0]
 800345a:	6820      	ldr	r0, [r4, #0]
 800345c:	1d19      	adds	r1, r3, #4
 800345e:	6031      	str	r1, [r6, #0]
 8003460:	0606      	lsls	r6, r0, #24
 8003462:	d501      	bpl.n	8003468 <_printf_i+0xbc>
 8003464:	681d      	ldr	r5, [r3, #0]
 8003466:	e003      	b.n	8003470 <_printf_i+0xc4>
 8003468:	0645      	lsls	r5, r0, #25
 800346a:	d5fb      	bpl.n	8003464 <_printf_i+0xb8>
 800346c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003470:	2d00      	cmp	r5, #0
 8003472:	da03      	bge.n	800347c <_printf_i+0xd0>
 8003474:	232d      	movs	r3, #45	@ 0x2d
 8003476:	426d      	negs	r5, r5
 8003478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800347c:	230a      	movs	r3, #10
 800347e:	4859      	ldr	r0, [pc, #356]	@ (80035e4 <_printf_i+0x238>)
 8003480:	e011      	b.n	80034a6 <_printf_i+0xfa>
 8003482:	6821      	ldr	r1, [r4, #0]
 8003484:	6833      	ldr	r3, [r6, #0]
 8003486:	0608      	lsls	r0, r1, #24
 8003488:	f853 5b04 	ldr.w	r5, [r3], #4
 800348c:	d402      	bmi.n	8003494 <_printf_i+0xe8>
 800348e:	0649      	lsls	r1, r1, #25
 8003490:	bf48      	it	mi
 8003492:	b2ad      	uxthmi	r5, r5
 8003494:	2f6f      	cmp	r7, #111	@ 0x6f
 8003496:	6033      	str	r3, [r6, #0]
 8003498:	bf14      	ite	ne
 800349a:	230a      	movne	r3, #10
 800349c:	2308      	moveq	r3, #8
 800349e:	4851      	ldr	r0, [pc, #324]	@ (80035e4 <_printf_i+0x238>)
 80034a0:	2100      	movs	r1, #0
 80034a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80034a6:	6866      	ldr	r6, [r4, #4]
 80034a8:	2e00      	cmp	r6, #0
 80034aa:	bfa8      	it	ge
 80034ac:	6821      	ldrge	r1, [r4, #0]
 80034ae:	60a6      	str	r6, [r4, #8]
 80034b0:	bfa4      	itt	ge
 80034b2:	f021 0104 	bicge.w	r1, r1, #4
 80034b6:	6021      	strge	r1, [r4, #0]
 80034b8:	b90d      	cbnz	r5, 80034be <_printf_i+0x112>
 80034ba:	2e00      	cmp	r6, #0
 80034bc:	d04b      	beq.n	8003556 <_printf_i+0x1aa>
 80034be:	4616      	mov	r6, r2
 80034c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80034c4:	fb03 5711 	mls	r7, r3, r1, r5
 80034c8:	5dc7      	ldrb	r7, [r0, r7]
 80034ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034ce:	462f      	mov	r7, r5
 80034d0:	42bb      	cmp	r3, r7
 80034d2:	460d      	mov	r5, r1
 80034d4:	d9f4      	bls.n	80034c0 <_printf_i+0x114>
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d10b      	bne.n	80034f2 <_printf_i+0x146>
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	07df      	lsls	r7, r3, #31
 80034de:	d508      	bpl.n	80034f2 <_printf_i+0x146>
 80034e0:	6923      	ldr	r3, [r4, #16]
 80034e2:	6861      	ldr	r1, [r4, #4]
 80034e4:	4299      	cmp	r1, r3
 80034e6:	bfde      	ittt	le
 80034e8:	2330      	movle	r3, #48	@ 0x30
 80034ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034f2:	1b92      	subs	r2, r2, r6
 80034f4:	6122      	str	r2, [r4, #16]
 80034f6:	464b      	mov	r3, r9
 80034f8:	4621      	mov	r1, r4
 80034fa:	4640      	mov	r0, r8
 80034fc:	f8cd a000 	str.w	sl, [sp]
 8003500:	aa03      	add	r2, sp, #12
 8003502:	f7ff fee1 	bl	80032c8 <_printf_common>
 8003506:	3001      	adds	r0, #1
 8003508:	d14a      	bne.n	80035a0 <_printf_i+0x1f4>
 800350a:	f04f 30ff 	mov.w	r0, #4294967295
 800350e:	b004      	add	sp, #16
 8003510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	f043 0320 	orr.w	r3, r3, #32
 800351a:	6023      	str	r3, [r4, #0]
 800351c:	2778      	movs	r7, #120	@ 0x78
 800351e:	4832      	ldr	r0, [pc, #200]	@ (80035e8 <_printf_i+0x23c>)
 8003520:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	6831      	ldr	r1, [r6, #0]
 8003528:	061f      	lsls	r7, r3, #24
 800352a:	f851 5b04 	ldr.w	r5, [r1], #4
 800352e:	d402      	bmi.n	8003536 <_printf_i+0x18a>
 8003530:	065f      	lsls	r7, r3, #25
 8003532:	bf48      	it	mi
 8003534:	b2ad      	uxthmi	r5, r5
 8003536:	6031      	str	r1, [r6, #0]
 8003538:	07d9      	lsls	r1, r3, #31
 800353a:	bf44      	itt	mi
 800353c:	f043 0320 	orrmi.w	r3, r3, #32
 8003540:	6023      	strmi	r3, [r4, #0]
 8003542:	b11d      	cbz	r5, 800354c <_printf_i+0x1a0>
 8003544:	2310      	movs	r3, #16
 8003546:	e7ab      	b.n	80034a0 <_printf_i+0xf4>
 8003548:	4826      	ldr	r0, [pc, #152]	@ (80035e4 <_printf_i+0x238>)
 800354a:	e7e9      	b.n	8003520 <_printf_i+0x174>
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	f023 0320 	bic.w	r3, r3, #32
 8003552:	6023      	str	r3, [r4, #0]
 8003554:	e7f6      	b.n	8003544 <_printf_i+0x198>
 8003556:	4616      	mov	r6, r2
 8003558:	e7bd      	b.n	80034d6 <_printf_i+0x12a>
 800355a:	6833      	ldr	r3, [r6, #0]
 800355c:	6825      	ldr	r5, [r4, #0]
 800355e:	1d18      	adds	r0, r3, #4
 8003560:	6961      	ldr	r1, [r4, #20]
 8003562:	6030      	str	r0, [r6, #0]
 8003564:	062e      	lsls	r6, r5, #24
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	d501      	bpl.n	800356e <_printf_i+0x1c2>
 800356a:	6019      	str	r1, [r3, #0]
 800356c:	e002      	b.n	8003574 <_printf_i+0x1c8>
 800356e:	0668      	lsls	r0, r5, #25
 8003570:	d5fb      	bpl.n	800356a <_printf_i+0x1be>
 8003572:	8019      	strh	r1, [r3, #0]
 8003574:	2300      	movs	r3, #0
 8003576:	4616      	mov	r6, r2
 8003578:	6123      	str	r3, [r4, #16]
 800357a:	e7bc      	b.n	80034f6 <_printf_i+0x14a>
 800357c:	6833      	ldr	r3, [r6, #0]
 800357e:	2100      	movs	r1, #0
 8003580:	1d1a      	adds	r2, r3, #4
 8003582:	6032      	str	r2, [r6, #0]
 8003584:	681e      	ldr	r6, [r3, #0]
 8003586:	6862      	ldr	r2, [r4, #4]
 8003588:	4630      	mov	r0, r6
 800358a:	f000 f9c6 	bl	800391a <memchr>
 800358e:	b108      	cbz	r0, 8003594 <_printf_i+0x1e8>
 8003590:	1b80      	subs	r0, r0, r6
 8003592:	6060      	str	r0, [r4, #4]
 8003594:	6863      	ldr	r3, [r4, #4]
 8003596:	6123      	str	r3, [r4, #16]
 8003598:	2300      	movs	r3, #0
 800359a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800359e:	e7aa      	b.n	80034f6 <_printf_i+0x14a>
 80035a0:	4632      	mov	r2, r6
 80035a2:	4649      	mov	r1, r9
 80035a4:	4640      	mov	r0, r8
 80035a6:	6923      	ldr	r3, [r4, #16]
 80035a8:	47d0      	blx	sl
 80035aa:	3001      	adds	r0, #1
 80035ac:	d0ad      	beq.n	800350a <_printf_i+0x15e>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	079b      	lsls	r3, r3, #30
 80035b2:	d413      	bmi.n	80035dc <_printf_i+0x230>
 80035b4:	68e0      	ldr	r0, [r4, #12]
 80035b6:	9b03      	ldr	r3, [sp, #12]
 80035b8:	4298      	cmp	r0, r3
 80035ba:	bfb8      	it	lt
 80035bc:	4618      	movlt	r0, r3
 80035be:	e7a6      	b.n	800350e <_printf_i+0x162>
 80035c0:	2301      	movs	r3, #1
 80035c2:	4632      	mov	r2, r6
 80035c4:	4649      	mov	r1, r9
 80035c6:	4640      	mov	r0, r8
 80035c8:	47d0      	blx	sl
 80035ca:	3001      	adds	r0, #1
 80035cc:	d09d      	beq.n	800350a <_printf_i+0x15e>
 80035ce:	3501      	adds	r5, #1
 80035d0:	68e3      	ldr	r3, [r4, #12]
 80035d2:	9903      	ldr	r1, [sp, #12]
 80035d4:	1a5b      	subs	r3, r3, r1
 80035d6:	42ab      	cmp	r3, r5
 80035d8:	dcf2      	bgt.n	80035c0 <_printf_i+0x214>
 80035da:	e7eb      	b.n	80035b4 <_printf_i+0x208>
 80035dc:	2500      	movs	r5, #0
 80035de:	f104 0619 	add.w	r6, r4, #25
 80035e2:	e7f5      	b.n	80035d0 <_printf_i+0x224>
 80035e4:	080056f0 	.word	0x080056f0
 80035e8:	08005701 	.word	0x08005701

080035ec <std>:
 80035ec:	2300      	movs	r3, #0
 80035ee:	b510      	push	{r4, lr}
 80035f0:	4604      	mov	r4, r0
 80035f2:	e9c0 3300 	strd	r3, r3, [r0]
 80035f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035fa:	6083      	str	r3, [r0, #8]
 80035fc:	8181      	strh	r1, [r0, #12]
 80035fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8003600:	81c2      	strh	r2, [r0, #14]
 8003602:	6183      	str	r3, [r0, #24]
 8003604:	4619      	mov	r1, r3
 8003606:	2208      	movs	r2, #8
 8003608:	305c      	adds	r0, #92	@ 0x5c
 800360a:	f000 f906 	bl	800381a <memset>
 800360e:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <std+0x58>)
 8003610:	6224      	str	r4, [r4, #32]
 8003612:	6263      	str	r3, [r4, #36]	@ 0x24
 8003614:	4b0c      	ldr	r3, [pc, #48]	@ (8003648 <std+0x5c>)
 8003616:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003618:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <std+0x60>)
 800361a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800361c:	4b0c      	ldr	r3, [pc, #48]	@ (8003650 <std+0x64>)
 800361e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003620:	4b0c      	ldr	r3, [pc, #48]	@ (8003654 <std+0x68>)
 8003622:	429c      	cmp	r4, r3
 8003624:	d006      	beq.n	8003634 <std+0x48>
 8003626:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800362a:	4294      	cmp	r4, r2
 800362c:	d002      	beq.n	8003634 <std+0x48>
 800362e:	33d0      	adds	r3, #208	@ 0xd0
 8003630:	429c      	cmp	r4, r3
 8003632:	d105      	bne.n	8003640 <std+0x54>
 8003634:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800363c:	f000 b96a 	b.w	8003914 <__retarget_lock_init_recursive>
 8003640:	bd10      	pop	{r4, pc}
 8003642:	bf00      	nop
 8003644:	08003795 	.word	0x08003795
 8003648:	080037b7 	.word	0x080037b7
 800364c:	080037ef 	.word	0x080037ef
 8003650:	08003813 	.word	0x08003813
 8003654:	20000228 	.word	0x20000228

08003658 <stdio_exit_handler>:
 8003658:	4a02      	ldr	r2, [pc, #8]	@ (8003664 <stdio_exit_handler+0xc>)
 800365a:	4903      	ldr	r1, [pc, #12]	@ (8003668 <stdio_exit_handler+0x10>)
 800365c:	4803      	ldr	r0, [pc, #12]	@ (800366c <stdio_exit_handler+0x14>)
 800365e:	f000 b869 	b.w	8003734 <_fwalk_sglue>
 8003662:	bf00      	nop
 8003664:	2000000c 	.word	0x2000000c
 8003668:	08005255 	.word	0x08005255
 800366c:	2000001c 	.word	0x2000001c

08003670 <cleanup_stdio>:
 8003670:	6841      	ldr	r1, [r0, #4]
 8003672:	4b0c      	ldr	r3, [pc, #48]	@ (80036a4 <cleanup_stdio+0x34>)
 8003674:	b510      	push	{r4, lr}
 8003676:	4299      	cmp	r1, r3
 8003678:	4604      	mov	r4, r0
 800367a:	d001      	beq.n	8003680 <cleanup_stdio+0x10>
 800367c:	f001 fdea 	bl	8005254 <_fflush_r>
 8003680:	68a1      	ldr	r1, [r4, #8]
 8003682:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <cleanup_stdio+0x38>)
 8003684:	4299      	cmp	r1, r3
 8003686:	d002      	beq.n	800368e <cleanup_stdio+0x1e>
 8003688:	4620      	mov	r0, r4
 800368a:	f001 fde3 	bl	8005254 <_fflush_r>
 800368e:	68e1      	ldr	r1, [r4, #12]
 8003690:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <cleanup_stdio+0x3c>)
 8003692:	4299      	cmp	r1, r3
 8003694:	d004      	beq.n	80036a0 <cleanup_stdio+0x30>
 8003696:	4620      	mov	r0, r4
 8003698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800369c:	f001 bdda 	b.w	8005254 <_fflush_r>
 80036a0:	bd10      	pop	{r4, pc}
 80036a2:	bf00      	nop
 80036a4:	20000228 	.word	0x20000228
 80036a8:	20000290 	.word	0x20000290
 80036ac:	200002f8 	.word	0x200002f8

080036b0 <global_stdio_init.part.0>:
 80036b0:	b510      	push	{r4, lr}
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <global_stdio_init.part.0+0x30>)
 80036b4:	4c0b      	ldr	r4, [pc, #44]	@ (80036e4 <global_stdio_init.part.0+0x34>)
 80036b6:	4a0c      	ldr	r2, [pc, #48]	@ (80036e8 <global_stdio_init.part.0+0x38>)
 80036b8:	4620      	mov	r0, r4
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	2104      	movs	r1, #4
 80036be:	2200      	movs	r2, #0
 80036c0:	f7ff ff94 	bl	80035ec <std>
 80036c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80036c8:	2201      	movs	r2, #1
 80036ca:	2109      	movs	r1, #9
 80036cc:	f7ff ff8e 	bl	80035ec <std>
 80036d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80036d4:	2202      	movs	r2, #2
 80036d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036da:	2112      	movs	r1, #18
 80036dc:	f7ff bf86 	b.w	80035ec <std>
 80036e0:	20000360 	.word	0x20000360
 80036e4:	20000228 	.word	0x20000228
 80036e8:	08003659 	.word	0x08003659

080036ec <__sfp_lock_acquire>:
 80036ec:	4801      	ldr	r0, [pc, #4]	@ (80036f4 <__sfp_lock_acquire+0x8>)
 80036ee:	f000 b912 	b.w	8003916 <__retarget_lock_acquire_recursive>
 80036f2:	bf00      	nop
 80036f4:	20000369 	.word	0x20000369

080036f8 <__sfp_lock_release>:
 80036f8:	4801      	ldr	r0, [pc, #4]	@ (8003700 <__sfp_lock_release+0x8>)
 80036fa:	f000 b90d 	b.w	8003918 <__retarget_lock_release_recursive>
 80036fe:	bf00      	nop
 8003700:	20000369 	.word	0x20000369

08003704 <__sinit>:
 8003704:	b510      	push	{r4, lr}
 8003706:	4604      	mov	r4, r0
 8003708:	f7ff fff0 	bl	80036ec <__sfp_lock_acquire>
 800370c:	6a23      	ldr	r3, [r4, #32]
 800370e:	b11b      	cbz	r3, 8003718 <__sinit+0x14>
 8003710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003714:	f7ff bff0 	b.w	80036f8 <__sfp_lock_release>
 8003718:	4b04      	ldr	r3, [pc, #16]	@ (800372c <__sinit+0x28>)
 800371a:	6223      	str	r3, [r4, #32]
 800371c:	4b04      	ldr	r3, [pc, #16]	@ (8003730 <__sinit+0x2c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f5      	bne.n	8003710 <__sinit+0xc>
 8003724:	f7ff ffc4 	bl	80036b0 <global_stdio_init.part.0>
 8003728:	e7f2      	b.n	8003710 <__sinit+0xc>
 800372a:	bf00      	nop
 800372c:	08003671 	.word	0x08003671
 8003730:	20000360 	.word	0x20000360

08003734 <_fwalk_sglue>:
 8003734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003738:	4607      	mov	r7, r0
 800373a:	4688      	mov	r8, r1
 800373c:	4614      	mov	r4, r2
 800373e:	2600      	movs	r6, #0
 8003740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003744:	f1b9 0901 	subs.w	r9, r9, #1
 8003748:	d505      	bpl.n	8003756 <_fwalk_sglue+0x22>
 800374a:	6824      	ldr	r4, [r4, #0]
 800374c:	2c00      	cmp	r4, #0
 800374e:	d1f7      	bne.n	8003740 <_fwalk_sglue+0xc>
 8003750:	4630      	mov	r0, r6
 8003752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003756:	89ab      	ldrh	r3, [r5, #12]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d907      	bls.n	800376c <_fwalk_sglue+0x38>
 800375c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003760:	3301      	adds	r3, #1
 8003762:	d003      	beq.n	800376c <_fwalk_sglue+0x38>
 8003764:	4629      	mov	r1, r5
 8003766:	4638      	mov	r0, r7
 8003768:	47c0      	blx	r8
 800376a:	4306      	orrs	r6, r0
 800376c:	3568      	adds	r5, #104	@ 0x68
 800376e:	e7e9      	b.n	8003744 <_fwalk_sglue+0x10>

08003770 <iprintf>:
 8003770:	b40f      	push	{r0, r1, r2, r3}
 8003772:	b507      	push	{r0, r1, r2, lr}
 8003774:	4906      	ldr	r1, [pc, #24]	@ (8003790 <iprintf+0x20>)
 8003776:	ab04      	add	r3, sp, #16
 8003778:	6808      	ldr	r0, [r1, #0]
 800377a:	f853 2b04 	ldr.w	r2, [r3], #4
 800377e:	6881      	ldr	r1, [r0, #8]
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	f001 fbcf 	bl	8004f24 <_vfiprintf_r>
 8003786:	b003      	add	sp, #12
 8003788:	f85d eb04 	ldr.w	lr, [sp], #4
 800378c:	b004      	add	sp, #16
 800378e:	4770      	bx	lr
 8003790:	20000018 	.word	0x20000018

08003794 <__sread>:
 8003794:	b510      	push	{r4, lr}
 8003796:	460c      	mov	r4, r1
 8003798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800379c:	f000 f86c 	bl	8003878 <_read_r>
 80037a0:	2800      	cmp	r0, #0
 80037a2:	bfab      	itete	ge
 80037a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80037a6:	89a3      	ldrhlt	r3, [r4, #12]
 80037a8:	181b      	addge	r3, r3, r0
 80037aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80037ae:	bfac      	ite	ge
 80037b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80037b2:	81a3      	strhlt	r3, [r4, #12]
 80037b4:	bd10      	pop	{r4, pc}

080037b6 <__swrite>:
 80037b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ba:	461f      	mov	r7, r3
 80037bc:	898b      	ldrh	r3, [r1, #12]
 80037be:	4605      	mov	r5, r0
 80037c0:	05db      	lsls	r3, r3, #23
 80037c2:	460c      	mov	r4, r1
 80037c4:	4616      	mov	r6, r2
 80037c6:	d505      	bpl.n	80037d4 <__swrite+0x1e>
 80037c8:	2302      	movs	r3, #2
 80037ca:	2200      	movs	r2, #0
 80037cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d0:	f000 f840 	bl	8003854 <_lseek_r>
 80037d4:	89a3      	ldrh	r3, [r4, #12]
 80037d6:	4632      	mov	r2, r6
 80037d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037dc:	81a3      	strh	r3, [r4, #12]
 80037de:	4628      	mov	r0, r5
 80037e0:	463b      	mov	r3, r7
 80037e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ea:	f000 b857 	b.w	800389c <_write_r>

080037ee <__sseek>:
 80037ee:	b510      	push	{r4, lr}
 80037f0:	460c      	mov	r4, r1
 80037f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f6:	f000 f82d 	bl	8003854 <_lseek_r>
 80037fa:	1c43      	adds	r3, r0, #1
 80037fc:	89a3      	ldrh	r3, [r4, #12]
 80037fe:	bf15      	itete	ne
 8003800:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003802:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003806:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800380a:	81a3      	strheq	r3, [r4, #12]
 800380c:	bf18      	it	ne
 800380e:	81a3      	strhne	r3, [r4, #12]
 8003810:	bd10      	pop	{r4, pc}

08003812 <__sclose>:
 8003812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003816:	f000 b80d 	b.w	8003834 <_close_r>

0800381a <memset>:
 800381a:	4603      	mov	r3, r0
 800381c:	4402      	add	r2, r0
 800381e:	4293      	cmp	r3, r2
 8003820:	d100      	bne.n	8003824 <memset+0xa>
 8003822:	4770      	bx	lr
 8003824:	f803 1b01 	strb.w	r1, [r3], #1
 8003828:	e7f9      	b.n	800381e <memset+0x4>
	...

0800382c <_localeconv_r>:
 800382c:	4800      	ldr	r0, [pc, #0]	@ (8003830 <_localeconv_r+0x4>)
 800382e:	4770      	bx	lr
 8003830:	20000158 	.word	0x20000158

08003834 <_close_r>:
 8003834:	b538      	push	{r3, r4, r5, lr}
 8003836:	2300      	movs	r3, #0
 8003838:	4d05      	ldr	r5, [pc, #20]	@ (8003850 <_close_r+0x1c>)
 800383a:	4604      	mov	r4, r0
 800383c:	4608      	mov	r0, r1
 800383e:	602b      	str	r3, [r5, #0]
 8003840:	f7fd fd15 	bl	800126e <_close>
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	d102      	bne.n	800384e <_close_r+0x1a>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	b103      	cbz	r3, 800384e <_close_r+0x1a>
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	bd38      	pop	{r3, r4, r5, pc}
 8003850:	20000364 	.word	0x20000364

08003854 <_lseek_r>:
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4604      	mov	r4, r0
 8003858:	4608      	mov	r0, r1
 800385a:	4611      	mov	r1, r2
 800385c:	2200      	movs	r2, #0
 800385e:	4d05      	ldr	r5, [pc, #20]	@ (8003874 <_lseek_r+0x20>)
 8003860:	602a      	str	r2, [r5, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	f7fd fd27 	bl	80012b6 <_lseek>
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	d102      	bne.n	8003872 <_lseek_r+0x1e>
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	b103      	cbz	r3, 8003872 <_lseek_r+0x1e>
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	bd38      	pop	{r3, r4, r5, pc}
 8003874:	20000364 	.word	0x20000364

08003878 <_read_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4604      	mov	r4, r0
 800387c:	4608      	mov	r0, r1
 800387e:	4611      	mov	r1, r2
 8003880:	2200      	movs	r2, #0
 8003882:	4d05      	ldr	r5, [pc, #20]	@ (8003898 <_read_r+0x20>)
 8003884:	602a      	str	r2, [r5, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	f7fd fcb8 	bl	80011fc <_read>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_read_r+0x1e>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_read_r+0x1e>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	20000364 	.word	0x20000364

0800389c <_write_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4604      	mov	r4, r0
 80038a0:	4608      	mov	r0, r1
 80038a2:	4611      	mov	r1, r2
 80038a4:	2200      	movs	r2, #0
 80038a6:	4d05      	ldr	r5, [pc, #20]	@ (80038bc <_write_r+0x20>)
 80038a8:	602a      	str	r2, [r5, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f7fd fcc3 	bl	8001236 <_write>
 80038b0:	1c43      	adds	r3, r0, #1
 80038b2:	d102      	bne.n	80038ba <_write_r+0x1e>
 80038b4:	682b      	ldr	r3, [r5, #0]
 80038b6:	b103      	cbz	r3, 80038ba <_write_r+0x1e>
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	20000364 	.word	0x20000364

080038c0 <__errno>:
 80038c0:	4b01      	ldr	r3, [pc, #4]	@ (80038c8 <__errno+0x8>)
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000018 	.word	0x20000018

080038cc <__libc_init_array>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	2600      	movs	r6, #0
 80038d0:	4d0c      	ldr	r5, [pc, #48]	@ (8003904 <__libc_init_array+0x38>)
 80038d2:	4c0d      	ldr	r4, [pc, #52]	@ (8003908 <__libc_init_array+0x3c>)
 80038d4:	1b64      	subs	r4, r4, r5
 80038d6:	10a4      	asrs	r4, r4, #2
 80038d8:	42a6      	cmp	r6, r4
 80038da:	d109      	bne.n	80038f0 <__libc_init_array+0x24>
 80038dc:	f001 fec8 	bl	8005670 <_init>
 80038e0:	2600      	movs	r6, #0
 80038e2:	4d0a      	ldr	r5, [pc, #40]	@ (800390c <__libc_init_array+0x40>)
 80038e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003910 <__libc_init_array+0x44>)
 80038e6:	1b64      	subs	r4, r4, r5
 80038e8:	10a4      	asrs	r4, r4, #2
 80038ea:	42a6      	cmp	r6, r4
 80038ec:	d105      	bne.n	80038fa <__libc_init_array+0x2e>
 80038ee:	bd70      	pop	{r4, r5, r6, pc}
 80038f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f4:	4798      	blx	r3
 80038f6:	3601      	adds	r6, #1
 80038f8:	e7ee      	b.n	80038d8 <__libc_init_array+0xc>
 80038fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80038fe:	4798      	blx	r3
 8003900:	3601      	adds	r6, #1
 8003902:	e7f2      	b.n	80038ea <__libc_init_array+0x1e>
 8003904:	08005a58 	.word	0x08005a58
 8003908:	08005a58 	.word	0x08005a58
 800390c:	08005a58 	.word	0x08005a58
 8003910:	08005a5c 	.word	0x08005a5c

08003914 <__retarget_lock_init_recursive>:
 8003914:	4770      	bx	lr

08003916 <__retarget_lock_acquire_recursive>:
 8003916:	4770      	bx	lr

08003918 <__retarget_lock_release_recursive>:
 8003918:	4770      	bx	lr

0800391a <memchr>:
 800391a:	4603      	mov	r3, r0
 800391c:	b510      	push	{r4, lr}
 800391e:	b2c9      	uxtb	r1, r1
 8003920:	4402      	add	r2, r0
 8003922:	4293      	cmp	r3, r2
 8003924:	4618      	mov	r0, r3
 8003926:	d101      	bne.n	800392c <memchr+0x12>
 8003928:	2000      	movs	r0, #0
 800392a:	e003      	b.n	8003934 <memchr+0x1a>
 800392c:	7804      	ldrb	r4, [r0, #0]
 800392e:	3301      	adds	r3, #1
 8003930:	428c      	cmp	r4, r1
 8003932:	d1f6      	bne.n	8003922 <memchr+0x8>
 8003934:	bd10      	pop	{r4, pc}

08003936 <quorem>:
 8003936:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800393a:	6903      	ldr	r3, [r0, #16]
 800393c:	690c      	ldr	r4, [r1, #16]
 800393e:	4607      	mov	r7, r0
 8003940:	42a3      	cmp	r3, r4
 8003942:	db7e      	blt.n	8003a42 <quorem+0x10c>
 8003944:	3c01      	subs	r4, #1
 8003946:	00a3      	lsls	r3, r4, #2
 8003948:	f100 0514 	add.w	r5, r0, #20
 800394c:	f101 0814 	add.w	r8, r1, #20
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800395c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003960:	3301      	adds	r3, #1
 8003962:	429a      	cmp	r2, r3
 8003964:	fbb2 f6f3 	udiv	r6, r2, r3
 8003968:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800396c:	d32e      	bcc.n	80039cc <quorem+0x96>
 800396e:	f04f 0a00 	mov.w	sl, #0
 8003972:	46c4      	mov	ip, r8
 8003974:	46ae      	mov	lr, r5
 8003976:	46d3      	mov	fp, sl
 8003978:	f85c 3b04 	ldr.w	r3, [ip], #4
 800397c:	b298      	uxth	r0, r3
 800397e:	fb06 a000 	mla	r0, r6, r0, sl
 8003982:	0c1b      	lsrs	r3, r3, #16
 8003984:	0c02      	lsrs	r2, r0, #16
 8003986:	fb06 2303 	mla	r3, r6, r3, r2
 800398a:	f8de 2000 	ldr.w	r2, [lr]
 800398e:	b280      	uxth	r0, r0
 8003990:	b292      	uxth	r2, r2
 8003992:	1a12      	subs	r2, r2, r0
 8003994:	445a      	add	r2, fp
 8003996:	f8de 0000 	ldr.w	r0, [lr]
 800399a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800399e:	b29b      	uxth	r3, r3
 80039a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80039a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80039a8:	b292      	uxth	r2, r2
 80039aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80039ae:	45e1      	cmp	r9, ip
 80039b0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80039b4:	f84e 2b04 	str.w	r2, [lr], #4
 80039b8:	d2de      	bcs.n	8003978 <quorem+0x42>
 80039ba:	9b00      	ldr	r3, [sp, #0]
 80039bc:	58eb      	ldr	r3, [r5, r3]
 80039be:	b92b      	cbnz	r3, 80039cc <quorem+0x96>
 80039c0:	9b01      	ldr	r3, [sp, #4]
 80039c2:	3b04      	subs	r3, #4
 80039c4:	429d      	cmp	r5, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	d32f      	bcc.n	8003a2a <quorem+0xf4>
 80039ca:	613c      	str	r4, [r7, #16]
 80039cc:	4638      	mov	r0, r7
 80039ce:	f001 f979 	bl	8004cc4 <__mcmp>
 80039d2:	2800      	cmp	r0, #0
 80039d4:	db25      	blt.n	8003a22 <quorem+0xec>
 80039d6:	4629      	mov	r1, r5
 80039d8:	2000      	movs	r0, #0
 80039da:	f858 2b04 	ldr.w	r2, [r8], #4
 80039de:	f8d1 c000 	ldr.w	ip, [r1]
 80039e2:	fa1f fe82 	uxth.w	lr, r2
 80039e6:	fa1f f38c 	uxth.w	r3, ip
 80039ea:	eba3 030e 	sub.w	r3, r3, lr
 80039ee:	4403      	add	r3, r0
 80039f0:	0c12      	lsrs	r2, r2, #16
 80039f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80039f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a00:	45c1      	cmp	r9, r8
 8003a02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003a06:	f841 3b04 	str.w	r3, [r1], #4
 8003a0a:	d2e6      	bcs.n	80039da <quorem+0xa4>
 8003a0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a14:	b922      	cbnz	r2, 8003a20 <quorem+0xea>
 8003a16:	3b04      	subs	r3, #4
 8003a18:	429d      	cmp	r5, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	d30b      	bcc.n	8003a36 <quorem+0x100>
 8003a1e:	613c      	str	r4, [r7, #16]
 8003a20:	3601      	adds	r6, #1
 8003a22:	4630      	mov	r0, r6
 8003a24:	b003      	add	sp, #12
 8003a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	3b04      	subs	r3, #4
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	d1cb      	bne.n	80039ca <quorem+0x94>
 8003a32:	3c01      	subs	r4, #1
 8003a34:	e7c6      	b.n	80039c4 <quorem+0x8e>
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	3b04      	subs	r3, #4
 8003a3a:	2a00      	cmp	r2, #0
 8003a3c:	d1ef      	bne.n	8003a1e <quorem+0xe8>
 8003a3e:	3c01      	subs	r4, #1
 8003a40:	e7ea      	b.n	8003a18 <quorem+0xe2>
 8003a42:	2000      	movs	r0, #0
 8003a44:	e7ee      	b.n	8003a24 <quorem+0xee>
	...

08003a48 <_dtoa_r>:
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	4614      	mov	r4, r2
 8003a4e:	461d      	mov	r5, r3
 8003a50:	69c7      	ldr	r7, [r0, #28]
 8003a52:	b097      	sub	sp, #92	@ 0x5c
 8003a54:	4683      	mov	fp, r0
 8003a56:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003a5a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003a5c:	b97f      	cbnz	r7, 8003a7e <_dtoa_r+0x36>
 8003a5e:	2010      	movs	r0, #16
 8003a60:	f000 fe02 	bl	8004668 <malloc>
 8003a64:	4602      	mov	r2, r0
 8003a66:	f8cb 001c 	str.w	r0, [fp, #28]
 8003a6a:	b920      	cbnz	r0, 8003a76 <_dtoa_r+0x2e>
 8003a6c:	21ef      	movs	r1, #239	@ 0xef
 8003a6e:	4ba8      	ldr	r3, [pc, #672]	@ (8003d10 <_dtoa_r+0x2c8>)
 8003a70:	48a8      	ldr	r0, [pc, #672]	@ (8003d14 <_dtoa_r+0x2cc>)
 8003a72:	f001 fcc9 	bl	8005408 <__assert_func>
 8003a76:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003a7a:	6007      	str	r7, [r0, #0]
 8003a7c:	60c7      	str	r7, [r0, #12]
 8003a7e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003a82:	6819      	ldr	r1, [r3, #0]
 8003a84:	b159      	cbz	r1, 8003a9e <_dtoa_r+0x56>
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	2301      	movs	r3, #1
 8003a8a:	4093      	lsls	r3, r2
 8003a8c:	604a      	str	r2, [r1, #4]
 8003a8e:	608b      	str	r3, [r1, #8]
 8003a90:	4658      	mov	r0, fp
 8003a92:	f000 fedf 	bl	8004854 <_Bfree>
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	1e2b      	subs	r3, r5, #0
 8003aa0:	bfaf      	iteee	ge
 8003aa2:	2300      	movge	r3, #0
 8003aa4:	2201      	movlt	r2, #1
 8003aa6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003aaa:	9303      	strlt	r3, [sp, #12]
 8003aac:	bfa8      	it	ge
 8003aae:	6033      	strge	r3, [r6, #0]
 8003ab0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003ab4:	4b98      	ldr	r3, [pc, #608]	@ (8003d18 <_dtoa_r+0x2d0>)
 8003ab6:	bfb8      	it	lt
 8003ab8:	6032      	strlt	r2, [r6, #0]
 8003aba:	ea33 0308 	bics.w	r3, r3, r8
 8003abe:	d112      	bne.n	8003ae6 <_dtoa_r+0x9e>
 8003ac0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003ac4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003acc:	4323      	orrs	r3, r4
 8003ace:	f000 8550 	beq.w	8004572 <_dtoa_r+0xb2a>
 8003ad2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003ad4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003d1c <_dtoa_r+0x2d4>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8552 	beq.w	8004582 <_dtoa_r+0xb3a>
 8003ade:	f10a 0303 	add.w	r3, sl, #3
 8003ae2:	f000 bd4c 	b.w	800457e <_dtoa_r+0xb36>
 8003ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003aea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003aee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003af2:	2200      	movs	r2, #0
 8003af4:	2300      	movs	r3, #0
 8003af6:	f7fd f80b 	bl	8000b10 <__aeabi_dcmpeq>
 8003afa:	4607      	mov	r7, r0
 8003afc:	b158      	cbz	r0, 8003b16 <_dtoa_r+0xce>
 8003afe:	2301      	movs	r3, #1
 8003b00:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003b06:	b113      	cbz	r3, 8003b0e <_dtoa_r+0xc6>
 8003b08:	4b85      	ldr	r3, [pc, #532]	@ (8003d20 <_dtoa_r+0x2d8>)
 8003b0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003d24 <_dtoa_r+0x2dc>
 8003b12:	f000 bd36 	b.w	8004582 <_dtoa_r+0xb3a>
 8003b16:	ab14      	add	r3, sp, #80	@ 0x50
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	ab15      	add	r3, sp, #84	@ 0x54
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	4658      	mov	r0, fp
 8003b20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003b24:	f001 f97e 	bl	8004e24 <__d2b>
 8003b28:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003b2c:	4681      	mov	r9, r0
 8003b2e:	2e00      	cmp	r6, #0
 8003b30:	d077      	beq.n	8003c22 <_dtoa_r+0x1da>
 8003b32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003b36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b38:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b40:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003b44:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003b48:	9712      	str	r7, [sp, #72]	@ 0x48
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	4b76      	ldr	r3, [pc, #472]	@ (8003d28 <_dtoa_r+0x2e0>)
 8003b50:	f7fc fbbe 	bl	80002d0 <__aeabi_dsub>
 8003b54:	a368      	add	r3, pc, #416	@ (adr r3, 8003cf8 <_dtoa_r+0x2b0>)
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	f7fc fd71 	bl	8000640 <__aeabi_dmul>
 8003b5e:	a368      	add	r3, pc, #416	@ (adr r3, 8003d00 <_dtoa_r+0x2b8>)
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f7fc fbb6 	bl	80002d4 <__adddf3>
 8003b68:	4604      	mov	r4, r0
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	460d      	mov	r5, r1
 8003b6e:	f7fc fcfd 	bl	800056c <__aeabi_i2d>
 8003b72:	a365      	add	r3, pc, #404	@ (adr r3, 8003d08 <_dtoa_r+0x2c0>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f7fc fd62 	bl	8000640 <__aeabi_dmul>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4620      	mov	r0, r4
 8003b82:	4629      	mov	r1, r5
 8003b84:	f7fc fba6 	bl	80002d4 <__adddf3>
 8003b88:	4604      	mov	r4, r0
 8003b8a:	460d      	mov	r5, r1
 8003b8c:	f7fd f808 	bl	8000ba0 <__aeabi_d2iz>
 8003b90:	2200      	movs	r2, #0
 8003b92:	4607      	mov	r7, r0
 8003b94:	2300      	movs	r3, #0
 8003b96:	4620      	mov	r0, r4
 8003b98:	4629      	mov	r1, r5
 8003b9a:	f7fc ffc3 	bl	8000b24 <__aeabi_dcmplt>
 8003b9e:	b140      	cbz	r0, 8003bb2 <_dtoa_r+0x16a>
 8003ba0:	4638      	mov	r0, r7
 8003ba2:	f7fc fce3 	bl	800056c <__aeabi_i2d>
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	462b      	mov	r3, r5
 8003baa:	f7fc ffb1 	bl	8000b10 <__aeabi_dcmpeq>
 8003bae:	b900      	cbnz	r0, 8003bb2 <_dtoa_r+0x16a>
 8003bb0:	3f01      	subs	r7, #1
 8003bb2:	2f16      	cmp	r7, #22
 8003bb4:	d853      	bhi.n	8003c5e <_dtoa_r+0x216>
 8003bb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003bba:	4b5c      	ldr	r3, [pc, #368]	@ (8003d2c <_dtoa_r+0x2e4>)
 8003bbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc4:	f7fc ffae 	bl	8000b24 <__aeabi_dcmplt>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d04a      	beq.n	8003c62 <_dtoa_r+0x21a>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	3f01      	subs	r7, #1
 8003bd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003bd2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003bd4:	1b9b      	subs	r3, r3, r6
 8003bd6:	1e5a      	subs	r2, r3, #1
 8003bd8:	bf46      	itte	mi
 8003bda:	f1c3 0801 	rsbmi	r8, r3, #1
 8003bde:	2300      	movmi	r3, #0
 8003be0:	f04f 0800 	movpl.w	r8, #0
 8003be4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003be6:	bf48      	it	mi
 8003be8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003bea:	2f00      	cmp	r7, #0
 8003bec:	db3b      	blt.n	8003c66 <_dtoa_r+0x21e>
 8003bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bf0:	970e      	str	r7, [sp, #56]	@ 0x38
 8003bf2:	443b      	add	r3, r7
 8003bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8003bfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	d866      	bhi.n	8003cce <_dtoa_r+0x286>
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	bfc4      	itt	gt
 8003c04:	3b04      	subgt	r3, #4
 8003c06:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003c08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003c0a:	bfc8      	it	gt
 8003c0c:	2400      	movgt	r4, #0
 8003c0e:	f1a3 0302 	sub.w	r3, r3, #2
 8003c12:	bfd8      	it	le
 8003c14:	2401      	movle	r4, #1
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d864      	bhi.n	8003ce4 <_dtoa_r+0x29c>
 8003c1a:	e8df f003 	tbb	[pc, r3]
 8003c1e:	382b      	.short	0x382b
 8003c20:	5636      	.short	0x5636
 8003c22:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003c26:	441e      	add	r6, r3
 8003c28:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	bfc1      	itttt	gt
 8003c30:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003c34:	fa08 f803 	lslgt.w	r8, r8, r3
 8003c38:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003c3c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003c40:	bfd6      	itet	le
 8003c42:	f1c3 0320 	rsble	r3, r3, #32
 8003c46:	ea48 0003 	orrgt.w	r0, r8, r3
 8003c4a:	fa04 f003 	lslle.w	r0, r4, r3
 8003c4e:	f7fc fc7d 	bl	800054c <__aeabi_ui2d>
 8003c52:	2201      	movs	r2, #1
 8003c54:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003c58:	3e01      	subs	r6, #1
 8003c5a:	9212      	str	r2, [sp, #72]	@ 0x48
 8003c5c:	e775      	b.n	8003b4a <_dtoa_r+0x102>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e7b6      	b.n	8003bd0 <_dtoa_r+0x188>
 8003c62:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003c64:	e7b5      	b.n	8003bd2 <_dtoa_r+0x18a>
 8003c66:	427b      	negs	r3, r7
 8003c68:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	eba8 0807 	sub.w	r8, r8, r7
 8003c70:	930e      	str	r3, [sp, #56]	@ 0x38
 8003c72:	e7c2      	b.n	8003bfa <_dtoa_r+0x1b2>
 8003c74:	2300      	movs	r3, #0
 8003c76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	dc35      	bgt.n	8003cea <_dtoa_r+0x2a2>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	461a      	mov	r2, r3
 8003c82:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003c86:	9221      	str	r2, [sp, #132]	@ 0x84
 8003c88:	e00b      	b.n	8003ca2 <_dtoa_r+0x25a>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e7f3      	b.n	8003c76 <_dtoa_r+0x22e>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	9308      	str	r3, [sp, #32]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	9307      	str	r3, [sp, #28]
 8003c9e:	bfb8      	it	lt
 8003ca0:	2301      	movlt	r3, #1
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003caa:	f102 0514 	add.w	r5, r2, #20
 8003cae:	429d      	cmp	r5, r3
 8003cb0:	d91f      	bls.n	8003cf2 <_dtoa_r+0x2aa>
 8003cb2:	6041      	str	r1, [r0, #4]
 8003cb4:	4658      	mov	r0, fp
 8003cb6:	f000 fd8d 	bl	80047d4 <_Balloc>
 8003cba:	4682      	mov	sl, r0
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	d139      	bne.n	8003d34 <_dtoa_r+0x2ec>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	f240 11af 	movw	r1, #431	@ 0x1af
 8003cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d30 <_dtoa_r+0x2e8>)
 8003cc8:	e6d2      	b.n	8003a70 <_dtoa_r+0x28>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e7e0      	b.n	8003c90 <_dtoa_r+0x248>
 8003cce:	2401      	movs	r4, #1
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003cd4:	9320      	str	r3, [sp, #128]	@ 0x80
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cda:	2200      	movs	r2, #0
 8003cdc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003ce0:	2312      	movs	r3, #18
 8003ce2:	e7d0      	b.n	8003c86 <_dtoa_r+0x23e>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ce8:	e7f5      	b.n	8003cd6 <_dtoa_r+0x28e>
 8003cea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003cec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003cf0:	e7d7      	b.n	8003ca2 <_dtoa_r+0x25a>
 8003cf2:	3101      	adds	r1, #1
 8003cf4:	0052      	lsls	r2, r2, #1
 8003cf6:	e7d8      	b.n	8003caa <_dtoa_r+0x262>
 8003cf8:	636f4361 	.word	0x636f4361
 8003cfc:	3fd287a7 	.word	0x3fd287a7
 8003d00:	8b60c8b3 	.word	0x8b60c8b3
 8003d04:	3fc68a28 	.word	0x3fc68a28
 8003d08:	509f79fb 	.word	0x509f79fb
 8003d0c:	3fd34413 	.word	0x3fd34413
 8003d10:	0800571f 	.word	0x0800571f
 8003d14:	08005736 	.word	0x08005736
 8003d18:	7ff00000 	.word	0x7ff00000
 8003d1c:	0800571b 	.word	0x0800571b
 8003d20:	080056ef 	.word	0x080056ef
 8003d24:	080056ee 	.word	0x080056ee
 8003d28:	3ff80000 	.word	0x3ff80000
 8003d2c:	08005830 	.word	0x08005830
 8003d30:	0800578e 	.word	0x0800578e
 8003d34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003d38:	6018      	str	r0, [r3, #0]
 8003d3a:	9b07      	ldr	r3, [sp, #28]
 8003d3c:	2b0e      	cmp	r3, #14
 8003d3e:	f200 80a4 	bhi.w	8003e8a <_dtoa_r+0x442>
 8003d42:	2c00      	cmp	r4, #0
 8003d44:	f000 80a1 	beq.w	8003e8a <_dtoa_r+0x442>
 8003d48:	2f00      	cmp	r7, #0
 8003d4a:	dd33      	ble.n	8003db4 <_dtoa_r+0x36c>
 8003d4c:	4b86      	ldr	r3, [pc, #536]	@ (8003f68 <_dtoa_r+0x520>)
 8003d4e:	f007 020f 	and.w	r2, r7, #15
 8003d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d56:	05f8      	lsls	r0, r7, #23
 8003d58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003d60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003d64:	d516      	bpl.n	8003d94 <_dtoa_r+0x34c>
 8003d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d6a:	4b80      	ldr	r3, [pc, #512]	@ (8003f6c <_dtoa_r+0x524>)
 8003d6c:	2603      	movs	r6, #3
 8003d6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d72:	f7fc fd8f 	bl	8000894 <__aeabi_ddiv>
 8003d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d7a:	f004 040f 	and.w	r4, r4, #15
 8003d7e:	4d7b      	ldr	r5, [pc, #492]	@ (8003f6c <_dtoa_r+0x524>)
 8003d80:	b954      	cbnz	r4, 8003d98 <_dtoa_r+0x350>
 8003d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d8a:	f7fc fd83 	bl	8000894 <__aeabi_ddiv>
 8003d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d92:	e028      	b.n	8003de6 <_dtoa_r+0x39e>
 8003d94:	2602      	movs	r6, #2
 8003d96:	e7f2      	b.n	8003d7e <_dtoa_r+0x336>
 8003d98:	07e1      	lsls	r1, r4, #31
 8003d9a:	d508      	bpl.n	8003dae <_dtoa_r+0x366>
 8003d9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003da0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003da4:	f7fc fc4c 	bl	8000640 <__aeabi_dmul>
 8003da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003dac:	3601      	adds	r6, #1
 8003dae:	1064      	asrs	r4, r4, #1
 8003db0:	3508      	adds	r5, #8
 8003db2:	e7e5      	b.n	8003d80 <_dtoa_r+0x338>
 8003db4:	f000 80d2 	beq.w	8003f5c <_dtoa_r+0x514>
 8003db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003dbc:	427c      	negs	r4, r7
 8003dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8003f68 <_dtoa_r+0x520>)
 8003dc0:	f004 020f 	and.w	r2, r4, #15
 8003dc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dcc:	f7fc fc38 	bl	8000640 <__aeabi_dmul>
 8003dd0:	2602      	movs	r6, #2
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003dd8:	4d64      	ldr	r5, [pc, #400]	@ (8003f6c <_dtoa_r+0x524>)
 8003dda:	1124      	asrs	r4, r4, #4
 8003ddc:	2c00      	cmp	r4, #0
 8003dde:	f040 80b2 	bne.w	8003f46 <_dtoa_r+0x4fe>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1d3      	bne.n	8003d8e <_dtoa_r+0x346>
 8003de6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003dea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80b7 	beq.w	8003f60 <_dtoa_r+0x518>
 8003df2:	2200      	movs	r2, #0
 8003df4:	4620      	mov	r0, r4
 8003df6:	4629      	mov	r1, r5
 8003df8:	4b5d      	ldr	r3, [pc, #372]	@ (8003f70 <_dtoa_r+0x528>)
 8003dfa:	f7fc fe93 	bl	8000b24 <__aeabi_dcmplt>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	f000 80ae 	beq.w	8003f60 <_dtoa_r+0x518>
 8003e04:	9b07      	ldr	r3, [sp, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80aa 	beq.w	8003f60 <_dtoa_r+0x518>
 8003e0c:	9b08      	ldr	r3, [sp, #32]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	dd37      	ble.n	8003e82 <_dtoa_r+0x43a>
 8003e12:	1e7b      	subs	r3, r7, #1
 8003e14:	4620      	mov	r0, r4
 8003e16:	9304      	str	r3, [sp, #16]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	4b55      	ldr	r3, [pc, #340]	@ (8003f74 <_dtoa_r+0x52c>)
 8003e1e:	f7fc fc0f 	bl	8000640 <__aeabi_dmul>
 8003e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e26:	9c08      	ldr	r4, [sp, #32]
 8003e28:	3601      	adds	r6, #1
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	f7fc fb9e 	bl	800056c <__aeabi_i2d>
 8003e30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e34:	f7fc fc04 	bl	8000640 <__aeabi_dmul>
 8003e38:	2200      	movs	r2, #0
 8003e3a:	4b4f      	ldr	r3, [pc, #316]	@ (8003f78 <_dtoa_r+0x530>)
 8003e3c:	f7fc fa4a 	bl	80002d4 <__adddf3>
 8003e40:	4605      	mov	r5, r0
 8003e42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003e46:	2c00      	cmp	r4, #0
 8003e48:	f040 809a 	bne.w	8003f80 <_dtoa_r+0x538>
 8003e4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e50:	2200      	movs	r2, #0
 8003e52:	4b4a      	ldr	r3, [pc, #296]	@ (8003f7c <_dtoa_r+0x534>)
 8003e54:	f7fc fa3c 	bl	80002d0 <__aeabi_dsub>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e60:	462a      	mov	r2, r5
 8003e62:	4633      	mov	r3, r6
 8003e64:	f7fc fe7c 	bl	8000b60 <__aeabi_dcmpgt>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	f040 828e 	bne.w	800438a <_dtoa_r+0x942>
 8003e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e72:	462a      	mov	r2, r5
 8003e74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003e78:	f7fc fe54 	bl	8000b24 <__aeabi_dcmplt>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	f040 8127 	bne.w	80040d0 <_dtoa_r+0x688>
 8003e82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003e86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003e8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f2c0 8163 	blt.w	8004158 <_dtoa_r+0x710>
 8003e92:	2f0e      	cmp	r7, #14
 8003e94:	f300 8160 	bgt.w	8004158 <_dtoa_r+0x710>
 8003e98:	4b33      	ldr	r3, [pc, #204]	@ (8003f68 <_dtoa_r+0x520>)
 8003e9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ea2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003ea6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	da03      	bge.n	8003eb4 <_dtoa_r+0x46c>
 8003eac:	9b07      	ldr	r3, [sp, #28]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f340 8100 	ble.w	80040b4 <_dtoa_r+0x66c>
 8003eb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003eb8:	4656      	mov	r6, sl
 8003eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	f7fc fce7 	bl	8000894 <__aeabi_ddiv>
 8003ec6:	f7fc fe6b 	bl	8000ba0 <__aeabi_d2iz>
 8003eca:	4680      	mov	r8, r0
 8003ecc:	f7fc fb4e 	bl	800056c <__aeabi_i2d>
 8003ed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ed4:	f7fc fbb4 	bl	8000640 <__aeabi_dmul>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4620      	mov	r0, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	f7fc f9f6 	bl	80002d0 <__aeabi_dsub>
 8003ee4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003ee8:	9d07      	ldr	r5, [sp, #28]
 8003eea:	f806 4b01 	strb.w	r4, [r6], #1
 8003eee:	eba6 040a 	sub.w	r4, r6, sl
 8003ef2:	42a5      	cmp	r5, r4
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	f040 8116 	bne.w	8004128 <_dtoa_r+0x6e0>
 8003efc:	f7fc f9ea 	bl	80002d4 <__adddf3>
 8003f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f04:	4604      	mov	r4, r0
 8003f06:	460d      	mov	r5, r1
 8003f08:	f7fc fe2a 	bl	8000b60 <__aeabi_dcmpgt>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	f040 80f8 	bne.w	8004102 <_dtoa_r+0x6ba>
 8003f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f16:	4620      	mov	r0, r4
 8003f18:	4629      	mov	r1, r5
 8003f1a:	f7fc fdf9 	bl	8000b10 <__aeabi_dcmpeq>
 8003f1e:	b118      	cbz	r0, 8003f28 <_dtoa_r+0x4e0>
 8003f20:	f018 0f01 	tst.w	r8, #1
 8003f24:	f040 80ed 	bne.w	8004102 <_dtoa_r+0x6ba>
 8003f28:	4649      	mov	r1, r9
 8003f2a:	4658      	mov	r0, fp
 8003f2c:	f000 fc92 	bl	8004854 <_Bfree>
 8003f30:	2300      	movs	r3, #0
 8003f32:	7033      	strb	r3, [r6, #0]
 8003f34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003f36:	3701      	adds	r7, #1
 8003f38:	601f      	str	r7, [r3, #0]
 8003f3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8320 	beq.w	8004582 <_dtoa_r+0xb3a>
 8003f42:	601e      	str	r6, [r3, #0]
 8003f44:	e31d      	b.n	8004582 <_dtoa_r+0xb3a>
 8003f46:	07e2      	lsls	r2, r4, #31
 8003f48:	d505      	bpl.n	8003f56 <_dtoa_r+0x50e>
 8003f4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f4e:	f7fc fb77 	bl	8000640 <__aeabi_dmul>
 8003f52:	2301      	movs	r3, #1
 8003f54:	3601      	adds	r6, #1
 8003f56:	1064      	asrs	r4, r4, #1
 8003f58:	3508      	adds	r5, #8
 8003f5a:	e73f      	b.n	8003ddc <_dtoa_r+0x394>
 8003f5c:	2602      	movs	r6, #2
 8003f5e:	e742      	b.n	8003de6 <_dtoa_r+0x39e>
 8003f60:	9c07      	ldr	r4, [sp, #28]
 8003f62:	9704      	str	r7, [sp, #16]
 8003f64:	e761      	b.n	8003e2a <_dtoa_r+0x3e2>
 8003f66:	bf00      	nop
 8003f68:	08005830 	.word	0x08005830
 8003f6c:	08005808 	.word	0x08005808
 8003f70:	3ff00000 	.word	0x3ff00000
 8003f74:	40240000 	.word	0x40240000
 8003f78:	401c0000 	.word	0x401c0000
 8003f7c:	40140000 	.word	0x40140000
 8003f80:	4b70      	ldr	r3, [pc, #448]	@ (8004144 <_dtoa_r+0x6fc>)
 8003f82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003f84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003f88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003f8c:	4454      	add	r4, sl
 8003f8e:	2900      	cmp	r1, #0
 8003f90:	d045      	beq.n	800401e <_dtoa_r+0x5d6>
 8003f92:	2000      	movs	r0, #0
 8003f94:	496c      	ldr	r1, [pc, #432]	@ (8004148 <_dtoa_r+0x700>)
 8003f96:	f7fc fc7d 	bl	8000894 <__aeabi_ddiv>
 8003f9a:	4633      	mov	r3, r6
 8003f9c:	462a      	mov	r2, r5
 8003f9e:	f7fc f997 	bl	80002d0 <__aeabi_dsub>
 8003fa2:	4656      	mov	r6, sl
 8003fa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fac:	f7fc fdf8 	bl	8000ba0 <__aeabi_d2iz>
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	f7fc fadb 	bl	800056c <__aeabi_i2d>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fbe:	f7fc f987 	bl	80002d0 <__aeabi_dsub>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	3530      	adds	r5, #48	@ 0x30
 8003fc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003fd0:	f806 5b01 	strb.w	r5, [r6], #1
 8003fd4:	f7fc fda6 	bl	8000b24 <__aeabi_dcmplt>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d163      	bne.n	80040a4 <_dtoa_r+0x65c>
 8003fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	495a      	ldr	r1, [pc, #360]	@ (800414c <_dtoa_r+0x704>)
 8003fe4:	f7fc f974 	bl	80002d0 <__aeabi_dsub>
 8003fe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003fec:	f7fc fd9a 	bl	8000b24 <__aeabi_dcmplt>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	f040 8087 	bne.w	8004104 <_dtoa_r+0x6bc>
 8003ff6:	42a6      	cmp	r6, r4
 8003ff8:	f43f af43 	beq.w	8003e82 <_dtoa_r+0x43a>
 8003ffc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004000:	2200      	movs	r2, #0
 8004002:	4b53      	ldr	r3, [pc, #332]	@ (8004150 <_dtoa_r+0x708>)
 8004004:	f7fc fb1c 	bl	8000640 <__aeabi_dmul>
 8004008:	2200      	movs	r2, #0
 800400a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800400e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004012:	4b4f      	ldr	r3, [pc, #316]	@ (8004150 <_dtoa_r+0x708>)
 8004014:	f7fc fb14 	bl	8000640 <__aeabi_dmul>
 8004018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800401c:	e7c4      	b.n	8003fa8 <_dtoa_r+0x560>
 800401e:	4631      	mov	r1, r6
 8004020:	4628      	mov	r0, r5
 8004022:	f7fc fb0d 	bl	8000640 <__aeabi_dmul>
 8004026:	4656      	mov	r6, sl
 8004028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800402c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800402e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004032:	f7fc fdb5 	bl	8000ba0 <__aeabi_d2iz>
 8004036:	4605      	mov	r5, r0
 8004038:	f7fc fa98 	bl	800056c <__aeabi_i2d>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004044:	f7fc f944 	bl	80002d0 <__aeabi_dsub>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	3530      	adds	r5, #48	@ 0x30
 800404e:	f806 5b01 	strb.w	r5, [r6], #1
 8004052:	42a6      	cmp	r6, r4
 8004054:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	d124      	bne.n	80040a8 <_dtoa_r+0x660>
 800405e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004062:	4b39      	ldr	r3, [pc, #228]	@ (8004148 <_dtoa_r+0x700>)
 8004064:	f7fc f936 	bl	80002d4 <__adddf3>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004070:	f7fc fd76 	bl	8000b60 <__aeabi_dcmpgt>
 8004074:	2800      	cmp	r0, #0
 8004076:	d145      	bne.n	8004104 <_dtoa_r+0x6bc>
 8004078:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800407c:	2000      	movs	r0, #0
 800407e:	4932      	ldr	r1, [pc, #200]	@ (8004148 <_dtoa_r+0x700>)
 8004080:	f7fc f926 	bl	80002d0 <__aeabi_dsub>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800408c:	f7fc fd4a 	bl	8000b24 <__aeabi_dcmplt>
 8004090:	2800      	cmp	r0, #0
 8004092:	f43f aef6 	beq.w	8003e82 <_dtoa_r+0x43a>
 8004096:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004098:	1e73      	subs	r3, r6, #1
 800409a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800409c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80040a0:	2b30      	cmp	r3, #48	@ 0x30
 80040a2:	d0f8      	beq.n	8004096 <_dtoa_r+0x64e>
 80040a4:	9f04      	ldr	r7, [sp, #16]
 80040a6:	e73f      	b.n	8003f28 <_dtoa_r+0x4e0>
 80040a8:	4b29      	ldr	r3, [pc, #164]	@ (8004150 <_dtoa_r+0x708>)
 80040aa:	f7fc fac9 	bl	8000640 <__aeabi_dmul>
 80040ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040b2:	e7bc      	b.n	800402e <_dtoa_r+0x5e6>
 80040b4:	d10c      	bne.n	80040d0 <_dtoa_r+0x688>
 80040b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040ba:	2200      	movs	r2, #0
 80040bc:	4b25      	ldr	r3, [pc, #148]	@ (8004154 <_dtoa_r+0x70c>)
 80040be:	f7fc fabf 	bl	8000640 <__aeabi_dmul>
 80040c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040c6:	f7fc fd41 	bl	8000b4c <__aeabi_dcmpge>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	f000 815b 	beq.w	8004386 <_dtoa_r+0x93e>
 80040d0:	2400      	movs	r4, #0
 80040d2:	4625      	mov	r5, r4
 80040d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80040d6:	4656      	mov	r6, sl
 80040d8:	43db      	mvns	r3, r3
 80040da:	9304      	str	r3, [sp, #16]
 80040dc:	2700      	movs	r7, #0
 80040de:	4621      	mov	r1, r4
 80040e0:	4658      	mov	r0, fp
 80040e2:	f000 fbb7 	bl	8004854 <_Bfree>
 80040e6:	2d00      	cmp	r5, #0
 80040e8:	d0dc      	beq.n	80040a4 <_dtoa_r+0x65c>
 80040ea:	b12f      	cbz	r7, 80040f8 <_dtoa_r+0x6b0>
 80040ec:	42af      	cmp	r7, r5
 80040ee:	d003      	beq.n	80040f8 <_dtoa_r+0x6b0>
 80040f0:	4639      	mov	r1, r7
 80040f2:	4658      	mov	r0, fp
 80040f4:	f000 fbae 	bl	8004854 <_Bfree>
 80040f8:	4629      	mov	r1, r5
 80040fa:	4658      	mov	r0, fp
 80040fc:	f000 fbaa 	bl	8004854 <_Bfree>
 8004100:	e7d0      	b.n	80040a4 <_dtoa_r+0x65c>
 8004102:	9704      	str	r7, [sp, #16]
 8004104:	4633      	mov	r3, r6
 8004106:	461e      	mov	r6, r3
 8004108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800410c:	2a39      	cmp	r2, #57	@ 0x39
 800410e:	d107      	bne.n	8004120 <_dtoa_r+0x6d8>
 8004110:	459a      	cmp	sl, r3
 8004112:	d1f8      	bne.n	8004106 <_dtoa_r+0x6be>
 8004114:	9a04      	ldr	r2, [sp, #16]
 8004116:	3201      	adds	r2, #1
 8004118:	9204      	str	r2, [sp, #16]
 800411a:	2230      	movs	r2, #48	@ 0x30
 800411c:	f88a 2000 	strb.w	r2, [sl]
 8004120:	781a      	ldrb	r2, [r3, #0]
 8004122:	3201      	adds	r2, #1
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	e7bd      	b.n	80040a4 <_dtoa_r+0x65c>
 8004128:	2200      	movs	r2, #0
 800412a:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <_dtoa_r+0x708>)
 800412c:	f7fc fa88 	bl	8000640 <__aeabi_dmul>
 8004130:	2200      	movs	r2, #0
 8004132:	2300      	movs	r3, #0
 8004134:	4604      	mov	r4, r0
 8004136:	460d      	mov	r5, r1
 8004138:	f7fc fcea 	bl	8000b10 <__aeabi_dcmpeq>
 800413c:	2800      	cmp	r0, #0
 800413e:	f43f aebc 	beq.w	8003eba <_dtoa_r+0x472>
 8004142:	e6f1      	b.n	8003f28 <_dtoa_r+0x4e0>
 8004144:	08005830 	.word	0x08005830
 8004148:	3fe00000 	.word	0x3fe00000
 800414c:	3ff00000 	.word	0x3ff00000
 8004150:	40240000 	.word	0x40240000
 8004154:	40140000 	.word	0x40140000
 8004158:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800415a:	2a00      	cmp	r2, #0
 800415c:	f000 80db 	beq.w	8004316 <_dtoa_r+0x8ce>
 8004160:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004162:	2a01      	cmp	r2, #1
 8004164:	f300 80bf 	bgt.w	80042e6 <_dtoa_r+0x89e>
 8004168:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800416a:	2a00      	cmp	r2, #0
 800416c:	f000 80b7 	beq.w	80042de <_dtoa_r+0x896>
 8004170:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004174:	4646      	mov	r6, r8
 8004176:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800417a:	2101      	movs	r1, #1
 800417c:	441a      	add	r2, r3
 800417e:	4658      	mov	r0, fp
 8004180:	4498      	add	r8, r3
 8004182:	9209      	str	r2, [sp, #36]	@ 0x24
 8004184:	f000 fc1a 	bl	80049bc <__i2b>
 8004188:	4605      	mov	r5, r0
 800418a:	b15e      	cbz	r6, 80041a4 <_dtoa_r+0x75c>
 800418c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800418e:	2b00      	cmp	r3, #0
 8004190:	dd08      	ble.n	80041a4 <_dtoa_r+0x75c>
 8004192:	42b3      	cmp	r3, r6
 8004194:	bfa8      	it	ge
 8004196:	4633      	movge	r3, r6
 8004198:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800419a:	eba8 0803 	sub.w	r8, r8, r3
 800419e:	1af6      	subs	r6, r6, r3
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80041a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041a6:	b1f3      	cbz	r3, 80041e6 <_dtoa_r+0x79e>
 80041a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80b7 	beq.w	800431e <_dtoa_r+0x8d6>
 80041b0:	b18c      	cbz	r4, 80041d6 <_dtoa_r+0x78e>
 80041b2:	4629      	mov	r1, r5
 80041b4:	4622      	mov	r2, r4
 80041b6:	4658      	mov	r0, fp
 80041b8:	f000 fcbe 	bl	8004b38 <__pow5mult>
 80041bc:	464a      	mov	r2, r9
 80041be:	4601      	mov	r1, r0
 80041c0:	4605      	mov	r5, r0
 80041c2:	4658      	mov	r0, fp
 80041c4:	f000 fc10 	bl	80049e8 <__multiply>
 80041c8:	4649      	mov	r1, r9
 80041ca:	9004      	str	r0, [sp, #16]
 80041cc:	4658      	mov	r0, fp
 80041ce:	f000 fb41 	bl	8004854 <_Bfree>
 80041d2:	9b04      	ldr	r3, [sp, #16]
 80041d4:	4699      	mov	r9, r3
 80041d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041d8:	1b1a      	subs	r2, r3, r4
 80041da:	d004      	beq.n	80041e6 <_dtoa_r+0x79e>
 80041dc:	4649      	mov	r1, r9
 80041de:	4658      	mov	r0, fp
 80041e0:	f000 fcaa 	bl	8004b38 <__pow5mult>
 80041e4:	4681      	mov	r9, r0
 80041e6:	2101      	movs	r1, #1
 80041e8:	4658      	mov	r0, fp
 80041ea:	f000 fbe7 	bl	80049bc <__i2b>
 80041ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80041f0:	4604      	mov	r4, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 81c9 	beq.w	800458a <_dtoa_r+0xb42>
 80041f8:	461a      	mov	r2, r3
 80041fa:	4601      	mov	r1, r0
 80041fc:	4658      	mov	r0, fp
 80041fe:	f000 fc9b 	bl	8004b38 <__pow5mult>
 8004202:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004204:	4604      	mov	r4, r0
 8004206:	2b01      	cmp	r3, #1
 8004208:	f300 808f 	bgt.w	800432a <_dtoa_r+0x8e2>
 800420c:	9b02      	ldr	r3, [sp, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 8087 	bne.w	8004322 <_dtoa_r+0x8da>
 8004214:	9b03      	ldr	r3, [sp, #12]
 8004216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800421a:	2b00      	cmp	r3, #0
 800421c:	f040 8083 	bne.w	8004326 <_dtoa_r+0x8de>
 8004220:	9b03      	ldr	r3, [sp, #12]
 8004222:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004226:	0d1b      	lsrs	r3, r3, #20
 8004228:	051b      	lsls	r3, r3, #20
 800422a:	b12b      	cbz	r3, 8004238 <_dtoa_r+0x7f0>
 800422c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800422e:	f108 0801 	add.w	r8, r8, #1
 8004232:	3301      	adds	r3, #1
 8004234:	9309      	str	r3, [sp, #36]	@ 0x24
 8004236:	2301      	movs	r3, #1
 8004238:	930a      	str	r3, [sp, #40]	@ 0x28
 800423a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 81aa 	beq.w	8004596 <_dtoa_r+0xb4e>
 8004242:	6923      	ldr	r3, [r4, #16]
 8004244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004248:	6918      	ldr	r0, [r3, #16]
 800424a:	f000 fb6b 	bl	8004924 <__hi0bits>
 800424e:	f1c0 0020 	rsb	r0, r0, #32
 8004252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004254:	4418      	add	r0, r3
 8004256:	f010 001f 	ands.w	r0, r0, #31
 800425a:	d071      	beq.n	8004340 <_dtoa_r+0x8f8>
 800425c:	f1c0 0320 	rsb	r3, r0, #32
 8004260:	2b04      	cmp	r3, #4
 8004262:	dd65      	ble.n	8004330 <_dtoa_r+0x8e8>
 8004264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004266:	f1c0 001c 	rsb	r0, r0, #28
 800426a:	4403      	add	r3, r0
 800426c:	4480      	add	r8, r0
 800426e:	4406      	add	r6, r0
 8004270:	9309      	str	r3, [sp, #36]	@ 0x24
 8004272:	f1b8 0f00 	cmp.w	r8, #0
 8004276:	dd05      	ble.n	8004284 <_dtoa_r+0x83c>
 8004278:	4649      	mov	r1, r9
 800427a:	4642      	mov	r2, r8
 800427c:	4658      	mov	r0, fp
 800427e:	f000 fcb5 	bl	8004bec <__lshift>
 8004282:	4681      	mov	r9, r0
 8004284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	dd05      	ble.n	8004296 <_dtoa_r+0x84e>
 800428a:	4621      	mov	r1, r4
 800428c:	461a      	mov	r2, r3
 800428e:	4658      	mov	r0, fp
 8004290:	f000 fcac 	bl	8004bec <__lshift>
 8004294:	4604      	mov	r4, r0
 8004296:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d053      	beq.n	8004344 <_dtoa_r+0x8fc>
 800429c:	4621      	mov	r1, r4
 800429e:	4648      	mov	r0, r9
 80042a0:	f000 fd10 	bl	8004cc4 <__mcmp>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	da4d      	bge.n	8004344 <_dtoa_r+0x8fc>
 80042a8:	1e7b      	subs	r3, r7, #1
 80042aa:	4649      	mov	r1, r9
 80042ac:	9304      	str	r3, [sp, #16]
 80042ae:	220a      	movs	r2, #10
 80042b0:	2300      	movs	r3, #0
 80042b2:	4658      	mov	r0, fp
 80042b4:	f000 faf0 	bl	8004898 <__multadd>
 80042b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042ba:	4681      	mov	r9, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 816c 	beq.w	800459a <_dtoa_r+0xb52>
 80042c2:	2300      	movs	r3, #0
 80042c4:	4629      	mov	r1, r5
 80042c6:	220a      	movs	r2, #10
 80042c8:	4658      	mov	r0, fp
 80042ca:	f000 fae5 	bl	8004898 <__multadd>
 80042ce:	9b08      	ldr	r3, [sp, #32]
 80042d0:	4605      	mov	r5, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	dc61      	bgt.n	800439a <_dtoa_r+0x952>
 80042d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80042d8:	2b02      	cmp	r3, #2
 80042da:	dc3b      	bgt.n	8004354 <_dtoa_r+0x90c>
 80042dc:	e05d      	b.n	800439a <_dtoa_r+0x952>
 80042de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80042e0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80042e4:	e746      	b.n	8004174 <_dtoa_r+0x72c>
 80042e6:	9b07      	ldr	r3, [sp, #28]
 80042e8:	1e5c      	subs	r4, r3, #1
 80042ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042ec:	42a3      	cmp	r3, r4
 80042ee:	bfbf      	itttt	lt
 80042f0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80042f2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80042f4:	1ae3      	sublt	r3, r4, r3
 80042f6:	18d2      	addlt	r2, r2, r3
 80042f8:	bfa8      	it	ge
 80042fa:	1b1c      	subge	r4, r3, r4
 80042fc:	9b07      	ldr	r3, [sp, #28]
 80042fe:	bfbe      	ittt	lt
 8004300:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004302:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004304:	2400      	movlt	r4, #0
 8004306:	2b00      	cmp	r3, #0
 8004308:	bfb5      	itete	lt
 800430a:	eba8 0603 	sublt.w	r6, r8, r3
 800430e:	4646      	movge	r6, r8
 8004310:	2300      	movlt	r3, #0
 8004312:	9b07      	ldrge	r3, [sp, #28]
 8004314:	e730      	b.n	8004178 <_dtoa_r+0x730>
 8004316:	4646      	mov	r6, r8
 8004318:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800431a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800431c:	e735      	b.n	800418a <_dtoa_r+0x742>
 800431e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004320:	e75c      	b.n	80041dc <_dtoa_r+0x794>
 8004322:	2300      	movs	r3, #0
 8004324:	e788      	b.n	8004238 <_dtoa_r+0x7f0>
 8004326:	9b02      	ldr	r3, [sp, #8]
 8004328:	e786      	b.n	8004238 <_dtoa_r+0x7f0>
 800432a:	2300      	movs	r3, #0
 800432c:	930a      	str	r3, [sp, #40]	@ 0x28
 800432e:	e788      	b.n	8004242 <_dtoa_r+0x7fa>
 8004330:	d09f      	beq.n	8004272 <_dtoa_r+0x82a>
 8004332:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004334:	331c      	adds	r3, #28
 8004336:	441a      	add	r2, r3
 8004338:	4498      	add	r8, r3
 800433a:	441e      	add	r6, r3
 800433c:	9209      	str	r2, [sp, #36]	@ 0x24
 800433e:	e798      	b.n	8004272 <_dtoa_r+0x82a>
 8004340:	4603      	mov	r3, r0
 8004342:	e7f6      	b.n	8004332 <_dtoa_r+0x8ea>
 8004344:	9b07      	ldr	r3, [sp, #28]
 8004346:	9704      	str	r7, [sp, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	dc20      	bgt.n	800438e <_dtoa_r+0x946>
 800434c:	9308      	str	r3, [sp, #32]
 800434e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004350:	2b02      	cmp	r3, #2
 8004352:	dd1e      	ble.n	8004392 <_dtoa_r+0x94a>
 8004354:	9b08      	ldr	r3, [sp, #32]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f47f aebc 	bne.w	80040d4 <_dtoa_r+0x68c>
 800435c:	4621      	mov	r1, r4
 800435e:	2205      	movs	r2, #5
 8004360:	4658      	mov	r0, fp
 8004362:	f000 fa99 	bl	8004898 <__multadd>
 8004366:	4601      	mov	r1, r0
 8004368:	4604      	mov	r4, r0
 800436a:	4648      	mov	r0, r9
 800436c:	f000 fcaa 	bl	8004cc4 <__mcmp>
 8004370:	2800      	cmp	r0, #0
 8004372:	f77f aeaf 	ble.w	80040d4 <_dtoa_r+0x68c>
 8004376:	2331      	movs	r3, #49	@ 0x31
 8004378:	4656      	mov	r6, sl
 800437a:	f806 3b01 	strb.w	r3, [r6], #1
 800437e:	9b04      	ldr	r3, [sp, #16]
 8004380:	3301      	adds	r3, #1
 8004382:	9304      	str	r3, [sp, #16]
 8004384:	e6aa      	b.n	80040dc <_dtoa_r+0x694>
 8004386:	9c07      	ldr	r4, [sp, #28]
 8004388:	9704      	str	r7, [sp, #16]
 800438a:	4625      	mov	r5, r4
 800438c:	e7f3      	b.n	8004376 <_dtoa_r+0x92e>
 800438e:	9b07      	ldr	r3, [sp, #28]
 8004390:	9308      	str	r3, [sp, #32]
 8004392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8104 	beq.w	80045a2 <_dtoa_r+0xb5a>
 800439a:	2e00      	cmp	r6, #0
 800439c:	dd05      	ble.n	80043aa <_dtoa_r+0x962>
 800439e:	4629      	mov	r1, r5
 80043a0:	4632      	mov	r2, r6
 80043a2:	4658      	mov	r0, fp
 80043a4:	f000 fc22 	bl	8004bec <__lshift>
 80043a8:	4605      	mov	r5, r0
 80043aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d05a      	beq.n	8004466 <_dtoa_r+0xa1e>
 80043b0:	4658      	mov	r0, fp
 80043b2:	6869      	ldr	r1, [r5, #4]
 80043b4:	f000 fa0e 	bl	80047d4 <_Balloc>
 80043b8:	4606      	mov	r6, r0
 80043ba:	b928      	cbnz	r0, 80043c8 <_dtoa_r+0x980>
 80043bc:	4602      	mov	r2, r0
 80043be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80043c2:	4b83      	ldr	r3, [pc, #524]	@ (80045d0 <_dtoa_r+0xb88>)
 80043c4:	f7ff bb54 	b.w	8003a70 <_dtoa_r+0x28>
 80043c8:	692a      	ldr	r2, [r5, #16]
 80043ca:	f105 010c 	add.w	r1, r5, #12
 80043ce:	3202      	adds	r2, #2
 80043d0:	0092      	lsls	r2, r2, #2
 80043d2:	300c      	adds	r0, #12
 80043d4:	f001 f80a 	bl	80053ec <memcpy>
 80043d8:	2201      	movs	r2, #1
 80043da:	4631      	mov	r1, r6
 80043dc:	4658      	mov	r0, fp
 80043de:	f000 fc05 	bl	8004bec <__lshift>
 80043e2:	462f      	mov	r7, r5
 80043e4:	4605      	mov	r5, r0
 80043e6:	f10a 0301 	add.w	r3, sl, #1
 80043ea:	9307      	str	r3, [sp, #28]
 80043ec:	9b08      	ldr	r3, [sp, #32]
 80043ee:	4453      	add	r3, sl
 80043f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043f2:	9b02      	ldr	r3, [sp, #8]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80043fa:	9b07      	ldr	r3, [sp, #28]
 80043fc:	4621      	mov	r1, r4
 80043fe:	3b01      	subs	r3, #1
 8004400:	4648      	mov	r0, r9
 8004402:	9302      	str	r3, [sp, #8]
 8004404:	f7ff fa97 	bl	8003936 <quorem>
 8004408:	4639      	mov	r1, r7
 800440a:	9008      	str	r0, [sp, #32]
 800440c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004410:	4648      	mov	r0, r9
 8004412:	f000 fc57 	bl	8004cc4 <__mcmp>
 8004416:	462a      	mov	r2, r5
 8004418:	9009      	str	r0, [sp, #36]	@ 0x24
 800441a:	4621      	mov	r1, r4
 800441c:	4658      	mov	r0, fp
 800441e:	f000 fc6d 	bl	8004cfc <__mdiff>
 8004422:	68c2      	ldr	r2, [r0, #12]
 8004424:	4606      	mov	r6, r0
 8004426:	bb02      	cbnz	r2, 800446a <_dtoa_r+0xa22>
 8004428:	4601      	mov	r1, r0
 800442a:	4648      	mov	r0, r9
 800442c:	f000 fc4a 	bl	8004cc4 <__mcmp>
 8004430:	4602      	mov	r2, r0
 8004432:	4631      	mov	r1, r6
 8004434:	4658      	mov	r0, fp
 8004436:	920c      	str	r2, [sp, #48]	@ 0x30
 8004438:	f000 fa0c 	bl	8004854 <_Bfree>
 800443c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800443e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004440:	9e07      	ldr	r6, [sp, #28]
 8004442:	ea43 0102 	orr.w	r1, r3, r2
 8004446:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004448:	4319      	orrs	r1, r3
 800444a:	d110      	bne.n	800446e <_dtoa_r+0xa26>
 800444c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004450:	d029      	beq.n	80044a6 <_dtoa_r+0xa5e>
 8004452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004454:	2b00      	cmp	r3, #0
 8004456:	dd02      	ble.n	800445e <_dtoa_r+0xa16>
 8004458:	9b08      	ldr	r3, [sp, #32]
 800445a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800445e:	9b02      	ldr	r3, [sp, #8]
 8004460:	f883 8000 	strb.w	r8, [r3]
 8004464:	e63b      	b.n	80040de <_dtoa_r+0x696>
 8004466:	4628      	mov	r0, r5
 8004468:	e7bb      	b.n	80043e2 <_dtoa_r+0x99a>
 800446a:	2201      	movs	r2, #1
 800446c:	e7e1      	b.n	8004432 <_dtoa_r+0x9ea>
 800446e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	db04      	blt.n	800447e <_dtoa_r+0xa36>
 8004474:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004476:	430b      	orrs	r3, r1
 8004478:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800447a:	430b      	orrs	r3, r1
 800447c:	d120      	bne.n	80044c0 <_dtoa_r+0xa78>
 800447e:	2a00      	cmp	r2, #0
 8004480:	dded      	ble.n	800445e <_dtoa_r+0xa16>
 8004482:	4649      	mov	r1, r9
 8004484:	2201      	movs	r2, #1
 8004486:	4658      	mov	r0, fp
 8004488:	f000 fbb0 	bl	8004bec <__lshift>
 800448c:	4621      	mov	r1, r4
 800448e:	4681      	mov	r9, r0
 8004490:	f000 fc18 	bl	8004cc4 <__mcmp>
 8004494:	2800      	cmp	r0, #0
 8004496:	dc03      	bgt.n	80044a0 <_dtoa_r+0xa58>
 8004498:	d1e1      	bne.n	800445e <_dtoa_r+0xa16>
 800449a:	f018 0f01 	tst.w	r8, #1
 800449e:	d0de      	beq.n	800445e <_dtoa_r+0xa16>
 80044a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80044a4:	d1d8      	bne.n	8004458 <_dtoa_r+0xa10>
 80044a6:	2339      	movs	r3, #57	@ 0x39
 80044a8:	9a02      	ldr	r2, [sp, #8]
 80044aa:	7013      	strb	r3, [r2, #0]
 80044ac:	4633      	mov	r3, r6
 80044ae:	461e      	mov	r6, r3
 80044b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	2a39      	cmp	r2, #57	@ 0x39
 80044b8:	d052      	beq.n	8004560 <_dtoa_r+0xb18>
 80044ba:	3201      	adds	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	e60e      	b.n	80040de <_dtoa_r+0x696>
 80044c0:	2a00      	cmp	r2, #0
 80044c2:	dd07      	ble.n	80044d4 <_dtoa_r+0xa8c>
 80044c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80044c8:	d0ed      	beq.n	80044a6 <_dtoa_r+0xa5e>
 80044ca:	9a02      	ldr	r2, [sp, #8]
 80044cc:	f108 0301 	add.w	r3, r8, #1
 80044d0:	7013      	strb	r3, [r2, #0]
 80044d2:	e604      	b.n	80040de <_dtoa_r+0x696>
 80044d4:	9b07      	ldr	r3, [sp, #28]
 80044d6:	9a07      	ldr	r2, [sp, #28]
 80044d8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80044dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80044de:	4293      	cmp	r3, r2
 80044e0:	d028      	beq.n	8004534 <_dtoa_r+0xaec>
 80044e2:	4649      	mov	r1, r9
 80044e4:	2300      	movs	r3, #0
 80044e6:	220a      	movs	r2, #10
 80044e8:	4658      	mov	r0, fp
 80044ea:	f000 f9d5 	bl	8004898 <__multadd>
 80044ee:	42af      	cmp	r7, r5
 80044f0:	4681      	mov	r9, r0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	f04f 020a 	mov.w	r2, #10
 80044fa:	4639      	mov	r1, r7
 80044fc:	4658      	mov	r0, fp
 80044fe:	d107      	bne.n	8004510 <_dtoa_r+0xac8>
 8004500:	f000 f9ca 	bl	8004898 <__multadd>
 8004504:	4607      	mov	r7, r0
 8004506:	4605      	mov	r5, r0
 8004508:	9b07      	ldr	r3, [sp, #28]
 800450a:	3301      	adds	r3, #1
 800450c:	9307      	str	r3, [sp, #28]
 800450e:	e774      	b.n	80043fa <_dtoa_r+0x9b2>
 8004510:	f000 f9c2 	bl	8004898 <__multadd>
 8004514:	4629      	mov	r1, r5
 8004516:	4607      	mov	r7, r0
 8004518:	2300      	movs	r3, #0
 800451a:	220a      	movs	r2, #10
 800451c:	4658      	mov	r0, fp
 800451e:	f000 f9bb 	bl	8004898 <__multadd>
 8004522:	4605      	mov	r5, r0
 8004524:	e7f0      	b.n	8004508 <_dtoa_r+0xac0>
 8004526:	9b08      	ldr	r3, [sp, #32]
 8004528:	2700      	movs	r7, #0
 800452a:	2b00      	cmp	r3, #0
 800452c:	bfcc      	ite	gt
 800452e:	461e      	movgt	r6, r3
 8004530:	2601      	movle	r6, #1
 8004532:	4456      	add	r6, sl
 8004534:	4649      	mov	r1, r9
 8004536:	2201      	movs	r2, #1
 8004538:	4658      	mov	r0, fp
 800453a:	f000 fb57 	bl	8004bec <__lshift>
 800453e:	4621      	mov	r1, r4
 8004540:	4681      	mov	r9, r0
 8004542:	f000 fbbf 	bl	8004cc4 <__mcmp>
 8004546:	2800      	cmp	r0, #0
 8004548:	dcb0      	bgt.n	80044ac <_dtoa_r+0xa64>
 800454a:	d102      	bne.n	8004552 <_dtoa_r+0xb0a>
 800454c:	f018 0f01 	tst.w	r8, #1
 8004550:	d1ac      	bne.n	80044ac <_dtoa_r+0xa64>
 8004552:	4633      	mov	r3, r6
 8004554:	461e      	mov	r6, r3
 8004556:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800455a:	2a30      	cmp	r2, #48	@ 0x30
 800455c:	d0fa      	beq.n	8004554 <_dtoa_r+0xb0c>
 800455e:	e5be      	b.n	80040de <_dtoa_r+0x696>
 8004560:	459a      	cmp	sl, r3
 8004562:	d1a4      	bne.n	80044ae <_dtoa_r+0xa66>
 8004564:	9b04      	ldr	r3, [sp, #16]
 8004566:	3301      	adds	r3, #1
 8004568:	9304      	str	r3, [sp, #16]
 800456a:	2331      	movs	r3, #49	@ 0x31
 800456c:	f88a 3000 	strb.w	r3, [sl]
 8004570:	e5b5      	b.n	80040de <_dtoa_r+0x696>
 8004572:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004574:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80045d4 <_dtoa_r+0xb8c>
 8004578:	b11b      	cbz	r3, 8004582 <_dtoa_r+0xb3a>
 800457a:	f10a 0308 	add.w	r3, sl, #8
 800457e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	4650      	mov	r0, sl
 8004584:	b017      	add	sp, #92	@ 0x5c
 8004586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800458a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800458c:	2b01      	cmp	r3, #1
 800458e:	f77f ae3d 	ble.w	800420c <_dtoa_r+0x7c4>
 8004592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004594:	930a      	str	r3, [sp, #40]	@ 0x28
 8004596:	2001      	movs	r0, #1
 8004598:	e65b      	b.n	8004252 <_dtoa_r+0x80a>
 800459a:	9b08      	ldr	r3, [sp, #32]
 800459c:	2b00      	cmp	r3, #0
 800459e:	f77f aed6 	ble.w	800434e <_dtoa_r+0x906>
 80045a2:	4656      	mov	r6, sl
 80045a4:	4621      	mov	r1, r4
 80045a6:	4648      	mov	r0, r9
 80045a8:	f7ff f9c5 	bl	8003936 <quorem>
 80045ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80045b0:	9b08      	ldr	r3, [sp, #32]
 80045b2:	f806 8b01 	strb.w	r8, [r6], #1
 80045b6:	eba6 020a 	sub.w	r2, r6, sl
 80045ba:	4293      	cmp	r3, r2
 80045bc:	ddb3      	ble.n	8004526 <_dtoa_r+0xade>
 80045be:	4649      	mov	r1, r9
 80045c0:	2300      	movs	r3, #0
 80045c2:	220a      	movs	r2, #10
 80045c4:	4658      	mov	r0, fp
 80045c6:	f000 f967 	bl	8004898 <__multadd>
 80045ca:	4681      	mov	r9, r0
 80045cc:	e7ea      	b.n	80045a4 <_dtoa_r+0xb5c>
 80045ce:	bf00      	nop
 80045d0:	0800578e 	.word	0x0800578e
 80045d4:	08005712 	.word	0x08005712

080045d8 <_free_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	4605      	mov	r5, r0
 80045dc:	2900      	cmp	r1, #0
 80045de:	d040      	beq.n	8004662 <_free_r+0x8a>
 80045e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e4:	1f0c      	subs	r4, r1, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bfb8      	it	lt
 80045ea:	18e4      	addlt	r4, r4, r3
 80045ec:	f000 f8e6 	bl	80047bc <__malloc_lock>
 80045f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004664 <_free_r+0x8c>)
 80045f2:	6813      	ldr	r3, [r2, #0]
 80045f4:	b933      	cbnz	r3, 8004604 <_free_r+0x2c>
 80045f6:	6063      	str	r3, [r4, #4]
 80045f8:	6014      	str	r4, [r2, #0]
 80045fa:	4628      	mov	r0, r5
 80045fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004600:	f000 b8e2 	b.w	80047c8 <__malloc_unlock>
 8004604:	42a3      	cmp	r3, r4
 8004606:	d908      	bls.n	800461a <_free_r+0x42>
 8004608:	6820      	ldr	r0, [r4, #0]
 800460a:	1821      	adds	r1, r4, r0
 800460c:	428b      	cmp	r3, r1
 800460e:	bf01      	itttt	eq
 8004610:	6819      	ldreq	r1, [r3, #0]
 8004612:	685b      	ldreq	r3, [r3, #4]
 8004614:	1809      	addeq	r1, r1, r0
 8004616:	6021      	streq	r1, [r4, #0]
 8004618:	e7ed      	b.n	80045f6 <_free_r+0x1e>
 800461a:	461a      	mov	r2, r3
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	b10b      	cbz	r3, 8004624 <_free_r+0x4c>
 8004620:	42a3      	cmp	r3, r4
 8004622:	d9fa      	bls.n	800461a <_free_r+0x42>
 8004624:	6811      	ldr	r1, [r2, #0]
 8004626:	1850      	adds	r0, r2, r1
 8004628:	42a0      	cmp	r0, r4
 800462a:	d10b      	bne.n	8004644 <_free_r+0x6c>
 800462c:	6820      	ldr	r0, [r4, #0]
 800462e:	4401      	add	r1, r0
 8004630:	1850      	adds	r0, r2, r1
 8004632:	4283      	cmp	r3, r0
 8004634:	6011      	str	r1, [r2, #0]
 8004636:	d1e0      	bne.n	80045fa <_free_r+0x22>
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4408      	add	r0, r1
 800463e:	6010      	str	r0, [r2, #0]
 8004640:	6053      	str	r3, [r2, #4]
 8004642:	e7da      	b.n	80045fa <_free_r+0x22>
 8004644:	d902      	bls.n	800464c <_free_r+0x74>
 8004646:	230c      	movs	r3, #12
 8004648:	602b      	str	r3, [r5, #0]
 800464a:	e7d6      	b.n	80045fa <_free_r+0x22>
 800464c:	6820      	ldr	r0, [r4, #0]
 800464e:	1821      	adds	r1, r4, r0
 8004650:	428b      	cmp	r3, r1
 8004652:	bf01      	itttt	eq
 8004654:	6819      	ldreq	r1, [r3, #0]
 8004656:	685b      	ldreq	r3, [r3, #4]
 8004658:	1809      	addeq	r1, r1, r0
 800465a:	6021      	streq	r1, [r4, #0]
 800465c:	6063      	str	r3, [r4, #4]
 800465e:	6054      	str	r4, [r2, #4]
 8004660:	e7cb      	b.n	80045fa <_free_r+0x22>
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	20000370 	.word	0x20000370

08004668 <malloc>:
 8004668:	4b02      	ldr	r3, [pc, #8]	@ (8004674 <malloc+0xc>)
 800466a:	4601      	mov	r1, r0
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	f000 b825 	b.w	80046bc <_malloc_r>
 8004672:	bf00      	nop
 8004674:	20000018 	.word	0x20000018

08004678 <sbrk_aligned>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	4e0f      	ldr	r6, [pc, #60]	@ (80046b8 <sbrk_aligned+0x40>)
 800467c:	460c      	mov	r4, r1
 800467e:	6831      	ldr	r1, [r6, #0]
 8004680:	4605      	mov	r5, r0
 8004682:	b911      	cbnz	r1, 800468a <sbrk_aligned+0x12>
 8004684:	f000 fea2 	bl	80053cc <_sbrk_r>
 8004688:	6030      	str	r0, [r6, #0]
 800468a:	4621      	mov	r1, r4
 800468c:	4628      	mov	r0, r5
 800468e:	f000 fe9d 	bl	80053cc <_sbrk_r>
 8004692:	1c43      	adds	r3, r0, #1
 8004694:	d103      	bne.n	800469e <sbrk_aligned+0x26>
 8004696:	f04f 34ff 	mov.w	r4, #4294967295
 800469a:	4620      	mov	r0, r4
 800469c:	bd70      	pop	{r4, r5, r6, pc}
 800469e:	1cc4      	adds	r4, r0, #3
 80046a0:	f024 0403 	bic.w	r4, r4, #3
 80046a4:	42a0      	cmp	r0, r4
 80046a6:	d0f8      	beq.n	800469a <sbrk_aligned+0x22>
 80046a8:	1a21      	subs	r1, r4, r0
 80046aa:	4628      	mov	r0, r5
 80046ac:	f000 fe8e 	bl	80053cc <_sbrk_r>
 80046b0:	3001      	adds	r0, #1
 80046b2:	d1f2      	bne.n	800469a <sbrk_aligned+0x22>
 80046b4:	e7ef      	b.n	8004696 <sbrk_aligned+0x1e>
 80046b6:	bf00      	nop
 80046b8:	2000036c 	.word	0x2000036c

080046bc <_malloc_r>:
 80046bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046c0:	1ccd      	adds	r5, r1, #3
 80046c2:	f025 0503 	bic.w	r5, r5, #3
 80046c6:	3508      	adds	r5, #8
 80046c8:	2d0c      	cmp	r5, #12
 80046ca:	bf38      	it	cc
 80046cc:	250c      	movcc	r5, #12
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	4606      	mov	r6, r0
 80046d2:	db01      	blt.n	80046d8 <_malloc_r+0x1c>
 80046d4:	42a9      	cmp	r1, r5
 80046d6:	d904      	bls.n	80046e2 <_malloc_r+0x26>
 80046d8:	230c      	movs	r3, #12
 80046da:	6033      	str	r3, [r6, #0]
 80046dc:	2000      	movs	r0, #0
 80046de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047b8 <_malloc_r+0xfc>
 80046e6:	f000 f869 	bl	80047bc <__malloc_lock>
 80046ea:	f8d8 3000 	ldr.w	r3, [r8]
 80046ee:	461c      	mov	r4, r3
 80046f0:	bb44      	cbnz	r4, 8004744 <_malloc_r+0x88>
 80046f2:	4629      	mov	r1, r5
 80046f4:	4630      	mov	r0, r6
 80046f6:	f7ff ffbf 	bl	8004678 <sbrk_aligned>
 80046fa:	1c43      	adds	r3, r0, #1
 80046fc:	4604      	mov	r4, r0
 80046fe:	d158      	bne.n	80047b2 <_malloc_r+0xf6>
 8004700:	f8d8 4000 	ldr.w	r4, [r8]
 8004704:	4627      	mov	r7, r4
 8004706:	2f00      	cmp	r7, #0
 8004708:	d143      	bne.n	8004792 <_malloc_r+0xd6>
 800470a:	2c00      	cmp	r4, #0
 800470c:	d04b      	beq.n	80047a6 <_malloc_r+0xea>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	4639      	mov	r1, r7
 8004712:	4630      	mov	r0, r6
 8004714:	eb04 0903 	add.w	r9, r4, r3
 8004718:	f000 fe58 	bl	80053cc <_sbrk_r>
 800471c:	4581      	cmp	r9, r0
 800471e:	d142      	bne.n	80047a6 <_malloc_r+0xea>
 8004720:	6821      	ldr	r1, [r4, #0]
 8004722:	4630      	mov	r0, r6
 8004724:	1a6d      	subs	r5, r5, r1
 8004726:	4629      	mov	r1, r5
 8004728:	f7ff ffa6 	bl	8004678 <sbrk_aligned>
 800472c:	3001      	adds	r0, #1
 800472e:	d03a      	beq.n	80047a6 <_malloc_r+0xea>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	442b      	add	r3, r5
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	f8d8 3000 	ldr.w	r3, [r8]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	bb62      	cbnz	r2, 8004798 <_malloc_r+0xdc>
 800473e:	f8c8 7000 	str.w	r7, [r8]
 8004742:	e00f      	b.n	8004764 <_malloc_r+0xa8>
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	1b52      	subs	r2, r2, r5
 8004748:	d420      	bmi.n	800478c <_malloc_r+0xd0>
 800474a:	2a0b      	cmp	r2, #11
 800474c:	d917      	bls.n	800477e <_malloc_r+0xc2>
 800474e:	1961      	adds	r1, r4, r5
 8004750:	42a3      	cmp	r3, r4
 8004752:	6025      	str	r5, [r4, #0]
 8004754:	bf18      	it	ne
 8004756:	6059      	strne	r1, [r3, #4]
 8004758:	6863      	ldr	r3, [r4, #4]
 800475a:	bf08      	it	eq
 800475c:	f8c8 1000 	streq.w	r1, [r8]
 8004760:	5162      	str	r2, [r4, r5]
 8004762:	604b      	str	r3, [r1, #4]
 8004764:	4630      	mov	r0, r6
 8004766:	f000 f82f 	bl	80047c8 <__malloc_unlock>
 800476a:	f104 000b 	add.w	r0, r4, #11
 800476e:	1d23      	adds	r3, r4, #4
 8004770:	f020 0007 	bic.w	r0, r0, #7
 8004774:	1ac2      	subs	r2, r0, r3
 8004776:	bf1c      	itt	ne
 8004778:	1a1b      	subne	r3, r3, r0
 800477a:	50a3      	strne	r3, [r4, r2]
 800477c:	e7af      	b.n	80046de <_malloc_r+0x22>
 800477e:	6862      	ldr	r2, [r4, #4]
 8004780:	42a3      	cmp	r3, r4
 8004782:	bf0c      	ite	eq
 8004784:	f8c8 2000 	streq.w	r2, [r8]
 8004788:	605a      	strne	r2, [r3, #4]
 800478a:	e7eb      	b.n	8004764 <_malloc_r+0xa8>
 800478c:	4623      	mov	r3, r4
 800478e:	6864      	ldr	r4, [r4, #4]
 8004790:	e7ae      	b.n	80046f0 <_malloc_r+0x34>
 8004792:	463c      	mov	r4, r7
 8004794:	687f      	ldr	r7, [r7, #4]
 8004796:	e7b6      	b.n	8004706 <_malloc_r+0x4a>
 8004798:	461a      	mov	r2, r3
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	42a3      	cmp	r3, r4
 800479e:	d1fb      	bne.n	8004798 <_malloc_r+0xdc>
 80047a0:	2300      	movs	r3, #0
 80047a2:	6053      	str	r3, [r2, #4]
 80047a4:	e7de      	b.n	8004764 <_malloc_r+0xa8>
 80047a6:	230c      	movs	r3, #12
 80047a8:	4630      	mov	r0, r6
 80047aa:	6033      	str	r3, [r6, #0]
 80047ac:	f000 f80c 	bl	80047c8 <__malloc_unlock>
 80047b0:	e794      	b.n	80046dc <_malloc_r+0x20>
 80047b2:	6005      	str	r5, [r0, #0]
 80047b4:	e7d6      	b.n	8004764 <_malloc_r+0xa8>
 80047b6:	bf00      	nop
 80047b8:	20000370 	.word	0x20000370

080047bc <__malloc_lock>:
 80047bc:	4801      	ldr	r0, [pc, #4]	@ (80047c4 <__malloc_lock+0x8>)
 80047be:	f7ff b8aa 	b.w	8003916 <__retarget_lock_acquire_recursive>
 80047c2:	bf00      	nop
 80047c4:	20000368 	.word	0x20000368

080047c8 <__malloc_unlock>:
 80047c8:	4801      	ldr	r0, [pc, #4]	@ (80047d0 <__malloc_unlock+0x8>)
 80047ca:	f7ff b8a5 	b.w	8003918 <__retarget_lock_release_recursive>
 80047ce:	bf00      	nop
 80047d0:	20000368 	.word	0x20000368

080047d4 <_Balloc>:
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	69c6      	ldr	r6, [r0, #28]
 80047d8:	4604      	mov	r4, r0
 80047da:	460d      	mov	r5, r1
 80047dc:	b976      	cbnz	r6, 80047fc <_Balloc+0x28>
 80047de:	2010      	movs	r0, #16
 80047e0:	f7ff ff42 	bl	8004668 <malloc>
 80047e4:	4602      	mov	r2, r0
 80047e6:	61e0      	str	r0, [r4, #28]
 80047e8:	b920      	cbnz	r0, 80047f4 <_Balloc+0x20>
 80047ea:	216b      	movs	r1, #107	@ 0x6b
 80047ec:	4b17      	ldr	r3, [pc, #92]	@ (800484c <_Balloc+0x78>)
 80047ee:	4818      	ldr	r0, [pc, #96]	@ (8004850 <_Balloc+0x7c>)
 80047f0:	f000 fe0a 	bl	8005408 <__assert_func>
 80047f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047f8:	6006      	str	r6, [r0, #0]
 80047fa:	60c6      	str	r6, [r0, #12]
 80047fc:	69e6      	ldr	r6, [r4, #28]
 80047fe:	68f3      	ldr	r3, [r6, #12]
 8004800:	b183      	cbz	r3, 8004824 <_Balloc+0x50>
 8004802:	69e3      	ldr	r3, [r4, #28]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800480a:	b9b8      	cbnz	r0, 800483c <_Balloc+0x68>
 800480c:	2101      	movs	r1, #1
 800480e:	fa01 f605 	lsl.w	r6, r1, r5
 8004812:	1d72      	adds	r2, r6, #5
 8004814:	4620      	mov	r0, r4
 8004816:	0092      	lsls	r2, r2, #2
 8004818:	f000 fe14 	bl	8005444 <_calloc_r>
 800481c:	b160      	cbz	r0, 8004838 <_Balloc+0x64>
 800481e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004822:	e00e      	b.n	8004842 <_Balloc+0x6e>
 8004824:	2221      	movs	r2, #33	@ 0x21
 8004826:	2104      	movs	r1, #4
 8004828:	4620      	mov	r0, r4
 800482a:	f000 fe0b 	bl	8005444 <_calloc_r>
 800482e:	69e3      	ldr	r3, [r4, #28]
 8004830:	60f0      	str	r0, [r6, #12]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e4      	bne.n	8004802 <_Balloc+0x2e>
 8004838:	2000      	movs	r0, #0
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	6802      	ldr	r2, [r0, #0]
 800483e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004842:	2300      	movs	r3, #0
 8004844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004848:	e7f7      	b.n	800483a <_Balloc+0x66>
 800484a:	bf00      	nop
 800484c:	0800571f 	.word	0x0800571f
 8004850:	0800579f 	.word	0x0800579f

08004854 <_Bfree>:
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	69c6      	ldr	r6, [r0, #28]
 8004858:	4605      	mov	r5, r0
 800485a:	460c      	mov	r4, r1
 800485c:	b976      	cbnz	r6, 800487c <_Bfree+0x28>
 800485e:	2010      	movs	r0, #16
 8004860:	f7ff ff02 	bl	8004668 <malloc>
 8004864:	4602      	mov	r2, r0
 8004866:	61e8      	str	r0, [r5, #28]
 8004868:	b920      	cbnz	r0, 8004874 <_Bfree+0x20>
 800486a:	218f      	movs	r1, #143	@ 0x8f
 800486c:	4b08      	ldr	r3, [pc, #32]	@ (8004890 <_Bfree+0x3c>)
 800486e:	4809      	ldr	r0, [pc, #36]	@ (8004894 <_Bfree+0x40>)
 8004870:	f000 fdca 	bl	8005408 <__assert_func>
 8004874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004878:	6006      	str	r6, [r0, #0]
 800487a:	60c6      	str	r6, [r0, #12]
 800487c:	b13c      	cbz	r4, 800488e <_Bfree+0x3a>
 800487e:	69eb      	ldr	r3, [r5, #28]
 8004880:	6862      	ldr	r2, [r4, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004888:	6021      	str	r1, [r4, #0]
 800488a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800488e:	bd70      	pop	{r4, r5, r6, pc}
 8004890:	0800571f 	.word	0x0800571f
 8004894:	0800579f 	.word	0x0800579f

08004898 <__multadd>:
 8004898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800489c:	4607      	mov	r7, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	461e      	mov	r6, r3
 80048a2:	2000      	movs	r0, #0
 80048a4:	690d      	ldr	r5, [r1, #16]
 80048a6:	f101 0c14 	add.w	ip, r1, #20
 80048aa:	f8dc 3000 	ldr.w	r3, [ip]
 80048ae:	3001      	adds	r0, #1
 80048b0:	b299      	uxth	r1, r3
 80048b2:	fb02 6101 	mla	r1, r2, r1, r6
 80048b6:	0c1e      	lsrs	r6, r3, #16
 80048b8:	0c0b      	lsrs	r3, r1, #16
 80048ba:	fb02 3306 	mla	r3, r2, r6, r3
 80048be:	b289      	uxth	r1, r1
 80048c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80048c4:	4285      	cmp	r5, r0
 80048c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80048ca:	f84c 1b04 	str.w	r1, [ip], #4
 80048ce:	dcec      	bgt.n	80048aa <__multadd+0x12>
 80048d0:	b30e      	cbz	r6, 8004916 <__multadd+0x7e>
 80048d2:	68a3      	ldr	r3, [r4, #8]
 80048d4:	42ab      	cmp	r3, r5
 80048d6:	dc19      	bgt.n	800490c <__multadd+0x74>
 80048d8:	6861      	ldr	r1, [r4, #4]
 80048da:	4638      	mov	r0, r7
 80048dc:	3101      	adds	r1, #1
 80048de:	f7ff ff79 	bl	80047d4 <_Balloc>
 80048e2:	4680      	mov	r8, r0
 80048e4:	b928      	cbnz	r0, 80048f2 <__multadd+0x5a>
 80048e6:	4602      	mov	r2, r0
 80048e8:	21ba      	movs	r1, #186	@ 0xba
 80048ea:	4b0c      	ldr	r3, [pc, #48]	@ (800491c <__multadd+0x84>)
 80048ec:	480c      	ldr	r0, [pc, #48]	@ (8004920 <__multadd+0x88>)
 80048ee:	f000 fd8b 	bl	8005408 <__assert_func>
 80048f2:	6922      	ldr	r2, [r4, #16]
 80048f4:	f104 010c 	add.w	r1, r4, #12
 80048f8:	3202      	adds	r2, #2
 80048fa:	0092      	lsls	r2, r2, #2
 80048fc:	300c      	adds	r0, #12
 80048fe:	f000 fd75 	bl	80053ec <memcpy>
 8004902:	4621      	mov	r1, r4
 8004904:	4638      	mov	r0, r7
 8004906:	f7ff ffa5 	bl	8004854 <_Bfree>
 800490a:	4644      	mov	r4, r8
 800490c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004910:	3501      	adds	r5, #1
 8004912:	615e      	str	r6, [r3, #20]
 8004914:	6125      	str	r5, [r4, #16]
 8004916:	4620      	mov	r0, r4
 8004918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800491c:	0800578e 	.word	0x0800578e
 8004920:	0800579f 	.word	0x0800579f

08004924 <__hi0bits>:
 8004924:	4603      	mov	r3, r0
 8004926:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800492a:	bf3a      	itte	cc
 800492c:	0403      	lslcc	r3, r0, #16
 800492e:	2010      	movcc	r0, #16
 8004930:	2000      	movcs	r0, #0
 8004932:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004936:	bf3c      	itt	cc
 8004938:	021b      	lslcc	r3, r3, #8
 800493a:	3008      	addcc	r0, #8
 800493c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004940:	bf3c      	itt	cc
 8004942:	011b      	lslcc	r3, r3, #4
 8004944:	3004      	addcc	r0, #4
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800494a:	bf3c      	itt	cc
 800494c:	009b      	lslcc	r3, r3, #2
 800494e:	3002      	addcc	r0, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	db05      	blt.n	8004960 <__hi0bits+0x3c>
 8004954:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004958:	f100 0001 	add.w	r0, r0, #1
 800495c:	bf08      	it	eq
 800495e:	2020      	moveq	r0, #32
 8004960:	4770      	bx	lr

08004962 <__lo0bits>:
 8004962:	6803      	ldr	r3, [r0, #0]
 8004964:	4602      	mov	r2, r0
 8004966:	f013 0007 	ands.w	r0, r3, #7
 800496a:	d00b      	beq.n	8004984 <__lo0bits+0x22>
 800496c:	07d9      	lsls	r1, r3, #31
 800496e:	d421      	bmi.n	80049b4 <__lo0bits+0x52>
 8004970:	0798      	lsls	r0, r3, #30
 8004972:	bf49      	itett	mi
 8004974:	085b      	lsrmi	r3, r3, #1
 8004976:	089b      	lsrpl	r3, r3, #2
 8004978:	2001      	movmi	r0, #1
 800497a:	6013      	strmi	r3, [r2, #0]
 800497c:	bf5c      	itt	pl
 800497e:	2002      	movpl	r0, #2
 8004980:	6013      	strpl	r3, [r2, #0]
 8004982:	4770      	bx	lr
 8004984:	b299      	uxth	r1, r3
 8004986:	b909      	cbnz	r1, 800498c <__lo0bits+0x2a>
 8004988:	2010      	movs	r0, #16
 800498a:	0c1b      	lsrs	r3, r3, #16
 800498c:	b2d9      	uxtb	r1, r3
 800498e:	b909      	cbnz	r1, 8004994 <__lo0bits+0x32>
 8004990:	3008      	adds	r0, #8
 8004992:	0a1b      	lsrs	r3, r3, #8
 8004994:	0719      	lsls	r1, r3, #28
 8004996:	bf04      	itt	eq
 8004998:	091b      	lsreq	r3, r3, #4
 800499a:	3004      	addeq	r0, #4
 800499c:	0799      	lsls	r1, r3, #30
 800499e:	bf04      	itt	eq
 80049a0:	089b      	lsreq	r3, r3, #2
 80049a2:	3002      	addeq	r0, #2
 80049a4:	07d9      	lsls	r1, r3, #31
 80049a6:	d403      	bmi.n	80049b0 <__lo0bits+0x4e>
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	f100 0001 	add.w	r0, r0, #1
 80049ae:	d003      	beq.n	80049b8 <__lo0bits+0x56>
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	4770      	bx	lr
 80049b4:	2000      	movs	r0, #0
 80049b6:	4770      	bx	lr
 80049b8:	2020      	movs	r0, #32
 80049ba:	4770      	bx	lr

080049bc <__i2b>:
 80049bc:	b510      	push	{r4, lr}
 80049be:	460c      	mov	r4, r1
 80049c0:	2101      	movs	r1, #1
 80049c2:	f7ff ff07 	bl	80047d4 <_Balloc>
 80049c6:	4602      	mov	r2, r0
 80049c8:	b928      	cbnz	r0, 80049d6 <__i2b+0x1a>
 80049ca:	f240 1145 	movw	r1, #325	@ 0x145
 80049ce:	4b04      	ldr	r3, [pc, #16]	@ (80049e0 <__i2b+0x24>)
 80049d0:	4804      	ldr	r0, [pc, #16]	@ (80049e4 <__i2b+0x28>)
 80049d2:	f000 fd19 	bl	8005408 <__assert_func>
 80049d6:	2301      	movs	r3, #1
 80049d8:	6144      	str	r4, [r0, #20]
 80049da:	6103      	str	r3, [r0, #16]
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	bf00      	nop
 80049e0:	0800578e 	.word	0x0800578e
 80049e4:	0800579f 	.word	0x0800579f

080049e8 <__multiply>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	4614      	mov	r4, r2
 80049ee:	690a      	ldr	r2, [r1, #16]
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	460f      	mov	r7, r1
 80049f4:	429a      	cmp	r2, r3
 80049f6:	bfa2      	ittt	ge
 80049f8:	4623      	movge	r3, r4
 80049fa:	460c      	movge	r4, r1
 80049fc:	461f      	movge	r7, r3
 80049fe:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004a02:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004a06:	68a3      	ldr	r3, [r4, #8]
 8004a08:	6861      	ldr	r1, [r4, #4]
 8004a0a:	eb0a 0609 	add.w	r6, sl, r9
 8004a0e:	42b3      	cmp	r3, r6
 8004a10:	b085      	sub	sp, #20
 8004a12:	bfb8      	it	lt
 8004a14:	3101      	addlt	r1, #1
 8004a16:	f7ff fedd 	bl	80047d4 <_Balloc>
 8004a1a:	b930      	cbnz	r0, 8004a2a <__multiply+0x42>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004a22:	4b43      	ldr	r3, [pc, #268]	@ (8004b30 <__multiply+0x148>)
 8004a24:	4843      	ldr	r0, [pc, #268]	@ (8004b34 <__multiply+0x14c>)
 8004a26:	f000 fcef 	bl	8005408 <__assert_func>
 8004a2a:	f100 0514 	add.w	r5, r0, #20
 8004a2e:	462b      	mov	r3, r5
 8004a30:	2200      	movs	r2, #0
 8004a32:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004a36:	4543      	cmp	r3, r8
 8004a38:	d321      	bcc.n	8004a7e <__multiply+0x96>
 8004a3a:	f107 0114 	add.w	r1, r7, #20
 8004a3e:	f104 0214 	add.w	r2, r4, #20
 8004a42:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004a46:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004a4a:	9302      	str	r3, [sp, #8]
 8004a4c:	1b13      	subs	r3, r2, r4
 8004a4e:	3b15      	subs	r3, #21
 8004a50:	f023 0303 	bic.w	r3, r3, #3
 8004a54:	3304      	adds	r3, #4
 8004a56:	f104 0715 	add.w	r7, r4, #21
 8004a5a:	42ba      	cmp	r2, r7
 8004a5c:	bf38      	it	cc
 8004a5e:	2304      	movcc	r3, #4
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	9b02      	ldr	r3, [sp, #8]
 8004a64:	9103      	str	r1, [sp, #12]
 8004a66:	428b      	cmp	r3, r1
 8004a68:	d80c      	bhi.n	8004a84 <__multiply+0x9c>
 8004a6a:	2e00      	cmp	r6, #0
 8004a6c:	dd03      	ble.n	8004a76 <__multiply+0x8e>
 8004a6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d05a      	beq.n	8004b2c <__multiply+0x144>
 8004a76:	6106      	str	r6, [r0, #16]
 8004a78:	b005      	add	sp, #20
 8004a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7e:	f843 2b04 	str.w	r2, [r3], #4
 8004a82:	e7d8      	b.n	8004a36 <__multiply+0x4e>
 8004a84:	f8b1 a000 	ldrh.w	sl, [r1]
 8004a88:	f1ba 0f00 	cmp.w	sl, #0
 8004a8c:	d023      	beq.n	8004ad6 <__multiply+0xee>
 8004a8e:	46a9      	mov	r9, r5
 8004a90:	f04f 0c00 	mov.w	ip, #0
 8004a94:	f104 0e14 	add.w	lr, r4, #20
 8004a98:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004a9c:	f8d9 3000 	ldr.w	r3, [r9]
 8004aa0:	fa1f fb87 	uxth.w	fp, r7
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	fb0a 330b 	mla	r3, sl, fp, r3
 8004aaa:	4463      	add	r3, ip
 8004aac:	f8d9 c000 	ldr.w	ip, [r9]
 8004ab0:	0c3f      	lsrs	r7, r7, #16
 8004ab2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004ab6:	fb0a c707 	mla	r7, sl, r7, ip
 8004aba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004ac4:	4572      	cmp	r2, lr
 8004ac6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004aca:	f849 3b04 	str.w	r3, [r9], #4
 8004ace:	d8e3      	bhi.n	8004a98 <__multiply+0xb0>
 8004ad0:	9b01      	ldr	r3, [sp, #4]
 8004ad2:	f845 c003 	str.w	ip, [r5, r3]
 8004ad6:	9b03      	ldr	r3, [sp, #12]
 8004ad8:	3104      	adds	r1, #4
 8004ada:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004ade:	f1b9 0f00 	cmp.w	r9, #0
 8004ae2:	d021      	beq.n	8004b28 <__multiply+0x140>
 8004ae4:	46ae      	mov	lr, r5
 8004ae6:	f04f 0a00 	mov.w	sl, #0
 8004aea:	682b      	ldr	r3, [r5, #0]
 8004aec:	f104 0c14 	add.w	ip, r4, #20
 8004af0:	f8bc b000 	ldrh.w	fp, [ip]
 8004af4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	fb09 770b 	mla	r7, r9, fp, r7
 8004afe:	4457      	add	r7, sl
 8004b00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004b04:	f84e 3b04 	str.w	r3, [lr], #4
 8004b08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b10:	f8be 3000 	ldrh.w	r3, [lr]
 8004b14:	4562      	cmp	r2, ip
 8004b16:	fb09 330a 	mla	r3, r9, sl, r3
 8004b1a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004b1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b22:	d8e5      	bhi.n	8004af0 <__multiply+0x108>
 8004b24:	9f01      	ldr	r7, [sp, #4]
 8004b26:	51eb      	str	r3, [r5, r7]
 8004b28:	3504      	adds	r5, #4
 8004b2a:	e79a      	b.n	8004a62 <__multiply+0x7a>
 8004b2c:	3e01      	subs	r6, #1
 8004b2e:	e79c      	b.n	8004a6a <__multiply+0x82>
 8004b30:	0800578e 	.word	0x0800578e
 8004b34:	0800579f 	.word	0x0800579f

08004b38 <__pow5mult>:
 8004b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b3c:	4615      	mov	r5, r2
 8004b3e:	f012 0203 	ands.w	r2, r2, #3
 8004b42:	4607      	mov	r7, r0
 8004b44:	460e      	mov	r6, r1
 8004b46:	d007      	beq.n	8004b58 <__pow5mult+0x20>
 8004b48:	4c25      	ldr	r4, [pc, #148]	@ (8004be0 <__pow5mult+0xa8>)
 8004b4a:	3a01      	subs	r2, #1
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b52:	f7ff fea1 	bl	8004898 <__multadd>
 8004b56:	4606      	mov	r6, r0
 8004b58:	10ad      	asrs	r5, r5, #2
 8004b5a:	d03d      	beq.n	8004bd8 <__pow5mult+0xa0>
 8004b5c:	69fc      	ldr	r4, [r7, #28]
 8004b5e:	b97c      	cbnz	r4, 8004b80 <__pow5mult+0x48>
 8004b60:	2010      	movs	r0, #16
 8004b62:	f7ff fd81 	bl	8004668 <malloc>
 8004b66:	4602      	mov	r2, r0
 8004b68:	61f8      	str	r0, [r7, #28]
 8004b6a:	b928      	cbnz	r0, 8004b78 <__pow5mult+0x40>
 8004b6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004b70:	4b1c      	ldr	r3, [pc, #112]	@ (8004be4 <__pow5mult+0xac>)
 8004b72:	481d      	ldr	r0, [pc, #116]	@ (8004be8 <__pow5mult+0xb0>)
 8004b74:	f000 fc48 	bl	8005408 <__assert_func>
 8004b78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b7c:	6004      	str	r4, [r0, #0]
 8004b7e:	60c4      	str	r4, [r0, #12]
 8004b80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004b84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b88:	b94c      	cbnz	r4, 8004b9e <__pow5mult+0x66>
 8004b8a:	f240 2171 	movw	r1, #625	@ 0x271
 8004b8e:	4638      	mov	r0, r7
 8004b90:	f7ff ff14 	bl	80049bc <__i2b>
 8004b94:	2300      	movs	r3, #0
 8004b96:	4604      	mov	r4, r0
 8004b98:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b9c:	6003      	str	r3, [r0, #0]
 8004b9e:	f04f 0900 	mov.w	r9, #0
 8004ba2:	07eb      	lsls	r3, r5, #31
 8004ba4:	d50a      	bpl.n	8004bbc <__pow5mult+0x84>
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	4622      	mov	r2, r4
 8004baa:	4638      	mov	r0, r7
 8004bac:	f7ff ff1c 	bl	80049e8 <__multiply>
 8004bb0:	4680      	mov	r8, r0
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	f7ff fe4d 	bl	8004854 <_Bfree>
 8004bba:	4646      	mov	r6, r8
 8004bbc:	106d      	asrs	r5, r5, #1
 8004bbe:	d00b      	beq.n	8004bd8 <__pow5mult+0xa0>
 8004bc0:	6820      	ldr	r0, [r4, #0]
 8004bc2:	b938      	cbnz	r0, 8004bd4 <__pow5mult+0x9c>
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	4638      	mov	r0, r7
 8004bca:	f7ff ff0d 	bl	80049e8 <__multiply>
 8004bce:	6020      	str	r0, [r4, #0]
 8004bd0:	f8c0 9000 	str.w	r9, [r0]
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	e7e4      	b.n	8004ba2 <__pow5mult+0x6a>
 8004bd8:	4630      	mov	r0, r6
 8004bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bde:	bf00      	nop
 8004be0:	080057f8 	.word	0x080057f8
 8004be4:	0800571f 	.word	0x0800571f
 8004be8:	0800579f 	.word	0x0800579f

08004bec <__lshift>:
 8004bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	4607      	mov	r7, r0
 8004bf4:	4691      	mov	r9, r2
 8004bf6:	6923      	ldr	r3, [r4, #16]
 8004bf8:	6849      	ldr	r1, [r1, #4]
 8004bfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004bfe:	68a3      	ldr	r3, [r4, #8]
 8004c00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c04:	f108 0601 	add.w	r6, r8, #1
 8004c08:	42b3      	cmp	r3, r6
 8004c0a:	db0b      	blt.n	8004c24 <__lshift+0x38>
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	f7ff fde1 	bl	80047d4 <_Balloc>
 8004c12:	4605      	mov	r5, r0
 8004c14:	b948      	cbnz	r0, 8004c2a <__lshift+0x3e>
 8004c16:	4602      	mov	r2, r0
 8004c18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004c1c:	4b27      	ldr	r3, [pc, #156]	@ (8004cbc <__lshift+0xd0>)
 8004c1e:	4828      	ldr	r0, [pc, #160]	@ (8004cc0 <__lshift+0xd4>)
 8004c20:	f000 fbf2 	bl	8005408 <__assert_func>
 8004c24:	3101      	adds	r1, #1
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	e7ee      	b.n	8004c08 <__lshift+0x1c>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f100 0114 	add.w	r1, r0, #20
 8004c30:	f100 0210 	add.w	r2, r0, #16
 8004c34:	4618      	mov	r0, r3
 8004c36:	4553      	cmp	r3, sl
 8004c38:	db33      	blt.n	8004ca2 <__lshift+0xb6>
 8004c3a:	6920      	ldr	r0, [r4, #16]
 8004c3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c40:	f104 0314 	add.w	r3, r4, #20
 8004c44:	f019 091f 	ands.w	r9, r9, #31
 8004c48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004c4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004c50:	d02b      	beq.n	8004caa <__lshift+0xbe>
 8004c52:	468a      	mov	sl, r1
 8004c54:	2200      	movs	r2, #0
 8004c56:	f1c9 0e20 	rsb	lr, r9, #32
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	fa00 f009 	lsl.w	r0, r0, r9
 8004c60:	4310      	orrs	r0, r2
 8004c62:	f84a 0b04 	str.w	r0, [sl], #4
 8004c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c6a:	459c      	cmp	ip, r3
 8004c6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004c70:	d8f3      	bhi.n	8004c5a <__lshift+0x6e>
 8004c72:	ebac 0304 	sub.w	r3, ip, r4
 8004c76:	3b15      	subs	r3, #21
 8004c78:	f023 0303 	bic.w	r3, r3, #3
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	f104 0015 	add.w	r0, r4, #21
 8004c82:	4584      	cmp	ip, r0
 8004c84:	bf38      	it	cc
 8004c86:	2304      	movcc	r3, #4
 8004c88:	50ca      	str	r2, [r1, r3]
 8004c8a:	b10a      	cbz	r2, 8004c90 <__lshift+0xa4>
 8004c8c:	f108 0602 	add.w	r6, r8, #2
 8004c90:	3e01      	subs	r6, #1
 8004c92:	4638      	mov	r0, r7
 8004c94:	4621      	mov	r1, r4
 8004c96:	612e      	str	r6, [r5, #16]
 8004c98:	f7ff fddc 	bl	8004854 <_Bfree>
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca2:	f842 0f04 	str.w	r0, [r2, #4]!
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	e7c5      	b.n	8004c36 <__lshift+0x4a>
 8004caa:	3904      	subs	r1, #4
 8004cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cb0:	459c      	cmp	ip, r3
 8004cb2:	f841 2f04 	str.w	r2, [r1, #4]!
 8004cb6:	d8f9      	bhi.n	8004cac <__lshift+0xc0>
 8004cb8:	e7ea      	b.n	8004c90 <__lshift+0xa4>
 8004cba:	bf00      	nop
 8004cbc:	0800578e 	.word	0x0800578e
 8004cc0:	0800579f 	.word	0x0800579f

08004cc4 <__mcmp>:
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	690a      	ldr	r2, [r1, #16]
 8004cc8:	6900      	ldr	r0, [r0, #16]
 8004cca:	b530      	push	{r4, r5, lr}
 8004ccc:	1a80      	subs	r0, r0, r2
 8004cce:	d10e      	bne.n	8004cee <__mcmp+0x2a>
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	3114      	adds	r1, #20
 8004cd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004cd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004cdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004ce0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004ce4:	4295      	cmp	r5, r2
 8004ce6:	d003      	beq.n	8004cf0 <__mcmp+0x2c>
 8004ce8:	d205      	bcs.n	8004cf6 <__mcmp+0x32>
 8004cea:	f04f 30ff 	mov.w	r0, #4294967295
 8004cee:	bd30      	pop	{r4, r5, pc}
 8004cf0:	42a3      	cmp	r3, r4
 8004cf2:	d3f3      	bcc.n	8004cdc <__mcmp+0x18>
 8004cf4:	e7fb      	b.n	8004cee <__mcmp+0x2a>
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	e7f9      	b.n	8004cee <__mcmp+0x2a>
	...

08004cfc <__mdiff>:
 8004cfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d00:	4689      	mov	r9, r1
 8004d02:	4606      	mov	r6, r0
 8004d04:	4611      	mov	r1, r2
 8004d06:	4648      	mov	r0, r9
 8004d08:	4614      	mov	r4, r2
 8004d0a:	f7ff ffdb 	bl	8004cc4 <__mcmp>
 8004d0e:	1e05      	subs	r5, r0, #0
 8004d10:	d112      	bne.n	8004d38 <__mdiff+0x3c>
 8004d12:	4629      	mov	r1, r5
 8004d14:	4630      	mov	r0, r6
 8004d16:	f7ff fd5d 	bl	80047d4 <_Balloc>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	b928      	cbnz	r0, 8004d2a <__mdiff+0x2e>
 8004d1e:	f240 2137 	movw	r1, #567	@ 0x237
 8004d22:	4b3e      	ldr	r3, [pc, #248]	@ (8004e1c <__mdiff+0x120>)
 8004d24:	483e      	ldr	r0, [pc, #248]	@ (8004e20 <__mdiff+0x124>)
 8004d26:	f000 fb6f 	bl	8005408 <__assert_func>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004d30:	4610      	mov	r0, r2
 8004d32:	b003      	add	sp, #12
 8004d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d38:	bfbc      	itt	lt
 8004d3a:	464b      	movlt	r3, r9
 8004d3c:	46a1      	movlt	r9, r4
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004d44:	bfba      	itte	lt
 8004d46:	461c      	movlt	r4, r3
 8004d48:	2501      	movlt	r5, #1
 8004d4a:	2500      	movge	r5, #0
 8004d4c:	f7ff fd42 	bl	80047d4 <_Balloc>
 8004d50:	4602      	mov	r2, r0
 8004d52:	b918      	cbnz	r0, 8004d5c <__mdiff+0x60>
 8004d54:	f240 2145 	movw	r1, #581	@ 0x245
 8004d58:	4b30      	ldr	r3, [pc, #192]	@ (8004e1c <__mdiff+0x120>)
 8004d5a:	e7e3      	b.n	8004d24 <__mdiff+0x28>
 8004d5c:	f100 0b14 	add.w	fp, r0, #20
 8004d60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004d64:	f109 0310 	add.w	r3, r9, #16
 8004d68:	60c5      	str	r5, [r0, #12]
 8004d6a:	f04f 0c00 	mov.w	ip, #0
 8004d6e:	f109 0514 	add.w	r5, r9, #20
 8004d72:	46d9      	mov	r9, fp
 8004d74:	6926      	ldr	r6, [r4, #16]
 8004d76:	f104 0e14 	add.w	lr, r4, #20
 8004d7a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004d7e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	9b01      	ldr	r3, [sp, #4]
 8004d86:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004d8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004d8e:	b281      	uxth	r1, r0
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	fa1f f38a 	uxth.w	r3, sl
 8004d96:	1a5b      	subs	r3, r3, r1
 8004d98:	0c00      	lsrs	r0, r0, #16
 8004d9a:	4463      	add	r3, ip
 8004d9c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004da0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004daa:	4576      	cmp	r6, lr
 8004dac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004db0:	f849 3b04 	str.w	r3, [r9], #4
 8004db4:	d8e6      	bhi.n	8004d84 <__mdiff+0x88>
 8004db6:	1b33      	subs	r3, r6, r4
 8004db8:	3b15      	subs	r3, #21
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	3415      	adds	r4, #21
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	42a6      	cmp	r6, r4
 8004dc4:	bf38      	it	cc
 8004dc6:	2304      	movcc	r3, #4
 8004dc8:	441d      	add	r5, r3
 8004dca:	445b      	add	r3, fp
 8004dcc:	461e      	mov	r6, r3
 8004dce:	462c      	mov	r4, r5
 8004dd0:	4544      	cmp	r4, r8
 8004dd2:	d30e      	bcc.n	8004df2 <__mdiff+0xf6>
 8004dd4:	f108 0103 	add.w	r1, r8, #3
 8004dd8:	1b49      	subs	r1, r1, r5
 8004dda:	f021 0103 	bic.w	r1, r1, #3
 8004dde:	3d03      	subs	r5, #3
 8004de0:	45a8      	cmp	r8, r5
 8004de2:	bf38      	it	cc
 8004de4:	2100      	movcc	r1, #0
 8004de6:	440b      	add	r3, r1
 8004de8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004dec:	b199      	cbz	r1, 8004e16 <__mdiff+0x11a>
 8004dee:	6117      	str	r7, [r2, #16]
 8004df0:	e79e      	b.n	8004d30 <__mdiff+0x34>
 8004df2:	46e6      	mov	lr, ip
 8004df4:	f854 1b04 	ldr.w	r1, [r4], #4
 8004df8:	fa1f fc81 	uxth.w	ip, r1
 8004dfc:	44f4      	add	ip, lr
 8004dfe:	0c08      	lsrs	r0, r1, #16
 8004e00:	4471      	add	r1, lr
 8004e02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004e06:	b289      	uxth	r1, r1
 8004e08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004e0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004e10:	f846 1b04 	str.w	r1, [r6], #4
 8004e14:	e7dc      	b.n	8004dd0 <__mdiff+0xd4>
 8004e16:	3f01      	subs	r7, #1
 8004e18:	e7e6      	b.n	8004de8 <__mdiff+0xec>
 8004e1a:	bf00      	nop
 8004e1c:	0800578e 	.word	0x0800578e
 8004e20:	0800579f 	.word	0x0800579f

08004e24 <__d2b>:
 8004e24:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004e28:	2101      	movs	r1, #1
 8004e2a:	4690      	mov	r8, r2
 8004e2c:	4699      	mov	r9, r3
 8004e2e:	9e08      	ldr	r6, [sp, #32]
 8004e30:	f7ff fcd0 	bl	80047d4 <_Balloc>
 8004e34:	4604      	mov	r4, r0
 8004e36:	b930      	cbnz	r0, 8004e46 <__d2b+0x22>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	f240 310f 	movw	r1, #783	@ 0x30f
 8004e3e:	4b23      	ldr	r3, [pc, #140]	@ (8004ecc <__d2b+0xa8>)
 8004e40:	4823      	ldr	r0, [pc, #140]	@ (8004ed0 <__d2b+0xac>)
 8004e42:	f000 fae1 	bl	8005408 <__assert_func>
 8004e46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004e4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e4e:	b10d      	cbz	r5, 8004e54 <__d2b+0x30>
 8004e50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e54:	9301      	str	r3, [sp, #4]
 8004e56:	f1b8 0300 	subs.w	r3, r8, #0
 8004e5a:	d024      	beq.n	8004ea6 <__d2b+0x82>
 8004e5c:	4668      	mov	r0, sp
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	f7ff fd7f 	bl	8004962 <__lo0bits>
 8004e64:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004e68:	b1d8      	cbz	r0, 8004ea2 <__d2b+0x7e>
 8004e6a:	f1c0 0320 	rsb	r3, r0, #32
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	430b      	orrs	r3, r1
 8004e74:	40c2      	lsrs	r2, r0
 8004e76:	6163      	str	r3, [r4, #20]
 8004e78:	9201      	str	r2, [sp, #4]
 8004e7a:	9b01      	ldr	r3, [sp, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bf0c      	ite	eq
 8004e80:	2201      	moveq	r2, #1
 8004e82:	2202      	movne	r2, #2
 8004e84:	61a3      	str	r3, [r4, #24]
 8004e86:	6122      	str	r2, [r4, #16]
 8004e88:	b1ad      	cbz	r5, 8004eb6 <__d2b+0x92>
 8004e8a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004e8e:	4405      	add	r5, r0
 8004e90:	6035      	str	r5, [r6, #0]
 8004e92:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e98:	6018      	str	r0, [r3, #0]
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	b002      	add	sp, #8
 8004e9e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004ea2:	6161      	str	r1, [r4, #20]
 8004ea4:	e7e9      	b.n	8004e7a <__d2b+0x56>
 8004ea6:	a801      	add	r0, sp, #4
 8004ea8:	f7ff fd5b 	bl	8004962 <__lo0bits>
 8004eac:	9b01      	ldr	r3, [sp, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	6163      	str	r3, [r4, #20]
 8004eb2:	3020      	adds	r0, #32
 8004eb4:	e7e7      	b.n	8004e86 <__d2b+0x62>
 8004eb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004eba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004ebe:	6030      	str	r0, [r6, #0]
 8004ec0:	6918      	ldr	r0, [r3, #16]
 8004ec2:	f7ff fd2f 	bl	8004924 <__hi0bits>
 8004ec6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004eca:	e7e4      	b.n	8004e96 <__d2b+0x72>
 8004ecc:	0800578e 	.word	0x0800578e
 8004ed0:	0800579f 	.word	0x0800579f

08004ed4 <__sfputc_r>:
 8004ed4:	6893      	ldr	r3, [r2, #8]
 8004ed6:	b410      	push	{r4}
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	6093      	str	r3, [r2, #8]
 8004ede:	da07      	bge.n	8004ef0 <__sfputc_r+0x1c>
 8004ee0:	6994      	ldr	r4, [r2, #24]
 8004ee2:	42a3      	cmp	r3, r4
 8004ee4:	db01      	blt.n	8004eea <__sfputc_r+0x16>
 8004ee6:	290a      	cmp	r1, #10
 8004ee8:	d102      	bne.n	8004ef0 <__sfputc_r+0x1c>
 8004eea:	bc10      	pop	{r4}
 8004eec:	f000 b9da 	b.w	80052a4 <__swbuf_r>
 8004ef0:	6813      	ldr	r3, [r2, #0]
 8004ef2:	1c58      	adds	r0, r3, #1
 8004ef4:	6010      	str	r0, [r2, #0]
 8004ef6:	7019      	strb	r1, [r3, #0]
 8004ef8:	4608      	mov	r0, r1
 8004efa:	bc10      	pop	{r4}
 8004efc:	4770      	bx	lr

08004efe <__sfputs_r>:
 8004efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f00:	4606      	mov	r6, r0
 8004f02:	460f      	mov	r7, r1
 8004f04:	4614      	mov	r4, r2
 8004f06:	18d5      	adds	r5, r2, r3
 8004f08:	42ac      	cmp	r4, r5
 8004f0a:	d101      	bne.n	8004f10 <__sfputs_r+0x12>
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	e007      	b.n	8004f20 <__sfputs_r+0x22>
 8004f10:	463a      	mov	r2, r7
 8004f12:	4630      	mov	r0, r6
 8004f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f18:	f7ff ffdc 	bl	8004ed4 <__sfputc_r>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d1f3      	bne.n	8004f08 <__sfputs_r+0xa>
 8004f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f24 <_vfiprintf_r>:
 8004f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f28:	460d      	mov	r5, r1
 8004f2a:	4614      	mov	r4, r2
 8004f2c:	4698      	mov	r8, r3
 8004f2e:	4606      	mov	r6, r0
 8004f30:	b09d      	sub	sp, #116	@ 0x74
 8004f32:	b118      	cbz	r0, 8004f3c <_vfiprintf_r+0x18>
 8004f34:	6a03      	ldr	r3, [r0, #32]
 8004f36:	b90b      	cbnz	r3, 8004f3c <_vfiprintf_r+0x18>
 8004f38:	f7fe fbe4 	bl	8003704 <__sinit>
 8004f3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f3e:	07d9      	lsls	r1, r3, #31
 8004f40:	d405      	bmi.n	8004f4e <_vfiprintf_r+0x2a>
 8004f42:	89ab      	ldrh	r3, [r5, #12]
 8004f44:	059a      	lsls	r2, r3, #22
 8004f46:	d402      	bmi.n	8004f4e <_vfiprintf_r+0x2a>
 8004f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f4a:	f7fe fce4 	bl	8003916 <__retarget_lock_acquire_recursive>
 8004f4e:	89ab      	ldrh	r3, [r5, #12]
 8004f50:	071b      	lsls	r3, r3, #28
 8004f52:	d501      	bpl.n	8004f58 <_vfiprintf_r+0x34>
 8004f54:	692b      	ldr	r3, [r5, #16]
 8004f56:	b99b      	cbnz	r3, 8004f80 <_vfiprintf_r+0x5c>
 8004f58:	4629      	mov	r1, r5
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	f000 f9e0 	bl	8005320 <__swsetup_r>
 8004f60:	b170      	cbz	r0, 8004f80 <_vfiprintf_r+0x5c>
 8004f62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f64:	07dc      	lsls	r4, r3, #31
 8004f66:	d504      	bpl.n	8004f72 <_vfiprintf_r+0x4e>
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6c:	b01d      	add	sp, #116	@ 0x74
 8004f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f72:	89ab      	ldrh	r3, [r5, #12]
 8004f74:	0598      	lsls	r0, r3, #22
 8004f76:	d4f7      	bmi.n	8004f68 <_vfiprintf_r+0x44>
 8004f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f7a:	f7fe fccd 	bl	8003918 <__retarget_lock_release_recursive>
 8004f7e:	e7f3      	b.n	8004f68 <_vfiprintf_r+0x44>
 8004f80:	2300      	movs	r3, #0
 8004f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f84:	2320      	movs	r3, #32
 8004f86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f8a:	2330      	movs	r3, #48	@ 0x30
 8004f8c:	f04f 0901 	mov.w	r9, #1
 8004f90:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f94:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005140 <_vfiprintf_r+0x21c>
 8004f98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f9c:	4623      	mov	r3, r4
 8004f9e:	469a      	mov	sl, r3
 8004fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fa4:	b10a      	cbz	r2, 8004faa <_vfiprintf_r+0x86>
 8004fa6:	2a25      	cmp	r2, #37	@ 0x25
 8004fa8:	d1f9      	bne.n	8004f9e <_vfiprintf_r+0x7a>
 8004faa:	ebba 0b04 	subs.w	fp, sl, r4
 8004fae:	d00b      	beq.n	8004fc8 <_vfiprintf_r+0xa4>
 8004fb0:	465b      	mov	r3, fp
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f7ff ffa1 	bl	8004efe <__sfputs_r>
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	f000 80a7 	beq.w	8005110 <_vfiprintf_r+0x1ec>
 8004fc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fc4:	445a      	add	r2, fp
 8004fc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 809f 	beq.w	8005110 <_vfiprintf_r+0x1ec>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fdc:	f10a 0a01 	add.w	sl, sl, #1
 8004fe0:	9304      	str	r3, [sp, #16]
 8004fe2:	9307      	str	r3, [sp, #28]
 8004fe4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fe8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fea:	4654      	mov	r4, sl
 8004fec:	2205      	movs	r2, #5
 8004fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff2:	4853      	ldr	r0, [pc, #332]	@ (8005140 <_vfiprintf_r+0x21c>)
 8004ff4:	f7fe fc91 	bl	800391a <memchr>
 8004ff8:	9a04      	ldr	r2, [sp, #16]
 8004ffa:	b9d8      	cbnz	r0, 8005034 <_vfiprintf_r+0x110>
 8004ffc:	06d1      	lsls	r1, r2, #27
 8004ffe:	bf44      	itt	mi
 8005000:	2320      	movmi	r3, #32
 8005002:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005006:	0713      	lsls	r3, r2, #28
 8005008:	bf44      	itt	mi
 800500a:	232b      	movmi	r3, #43	@ 0x2b
 800500c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005010:	f89a 3000 	ldrb.w	r3, [sl]
 8005014:	2b2a      	cmp	r3, #42	@ 0x2a
 8005016:	d015      	beq.n	8005044 <_vfiprintf_r+0x120>
 8005018:	4654      	mov	r4, sl
 800501a:	2000      	movs	r0, #0
 800501c:	f04f 0c0a 	mov.w	ip, #10
 8005020:	9a07      	ldr	r2, [sp, #28]
 8005022:	4621      	mov	r1, r4
 8005024:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005028:	3b30      	subs	r3, #48	@ 0x30
 800502a:	2b09      	cmp	r3, #9
 800502c:	d94b      	bls.n	80050c6 <_vfiprintf_r+0x1a2>
 800502e:	b1b0      	cbz	r0, 800505e <_vfiprintf_r+0x13a>
 8005030:	9207      	str	r2, [sp, #28]
 8005032:	e014      	b.n	800505e <_vfiprintf_r+0x13a>
 8005034:	eba0 0308 	sub.w	r3, r0, r8
 8005038:	fa09 f303 	lsl.w	r3, r9, r3
 800503c:	4313      	orrs	r3, r2
 800503e:	46a2      	mov	sl, r4
 8005040:	9304      	str	r3, [sp, #16]
 8005042:	e7d2      	b.n	8004fea <_vfiprintf_r+0xc6>
 8005044:	9b03      	ldr	r3, [sp, #12]
 8005046:	1d19      	adds	r1, r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	9103      	str	r1, [sp, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	bfbb      	ittet	lt
 8005050:	425b      	neglt	r3, r3
 8005052:	f042 0202 	orrlt.w	r2, r2, #2
 8005056:	9307      	strge	r3, [sp, #28]
 8005058:	9307      	strlt	r3, [sp, #28]
 800505a:	bfb8      	it	lt
 800505c:	9204      	strlt	r2, [sp, #16]
 800505e:	7823      	ldrb	r3, [r4, #0]
 8005060:	2b2e      	cmp	r3, #46	@ 0x2e
 8005062:	d10a      	bne.n	800507a <_vfiprintf_r+0x156>
 8005064:	7863      	ldrb	r3, [r4, #1]
 8005066:	2b2a      	cmp	r3, #42	@ 0x2a
 8005068:	d132      	bne.n	80050d0 <_vfiprintf_r+0x1ac>
 800506a:	9b03      	ldr	r3, [sp, #12]
 800506c:	3402      	adds	r4, #2
 800506e:	1d1a      	adds	r2, r3, #4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	9203      	str	r2, [sp, #12]
 8005074:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005078:	9305      	str	r3, [sp, #20]
 800507a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005144 <_vfiprintf_r+0x220>
 800507e:	2203      	movs	r2, #3
 8005080:	4650      	mov	r0, sl
 8005082:	7821      	ldrb	r1, [r4, #0]
 8005084:	f7fe fc49 	bl	800391a <memchr>
 8005088:	b138      	cbz	r0, 800509a <_vfiprintf_r+0x176>
 800508a:	2240      	movs	r2, #64	@ 0x40
 800508c:	9b04      	ldr	r3, [sp, #16]
 800508e:	eba0 000a 	sub.w	r0, r0, sl
 8005092:	4082      	lsls	r2, r0
 8005094:	4313      	orrs	r3, r2
 8005096:	3401      	adds	r4, #1
 8005098:	9304      	str	r3, [sp, #16]
 800509a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800509e:	2206      	movs	r2, #6
 80050a0:	4829      	ldr	r0, [pc, #164]	@ (8005148 <_vfiprintf_r+0x224>)
 80050a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050a6:	f7fe fc38 	bl	800391a <memchr>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d03f      	beq.n	800512e <_vfiprintf_r+0x20a>
 80050ae:	4b27      	ldr	r3, [pc, #156]	@ (800514c <_vfiprintf_r+0x228>)
 80050b0:	bb1b      	cbnz	r3, 80050fa <_vfiprintf_r+0x1d6>
 80050b2:	9b03      	ldr	r3, [sp, #12]
 80050b4:	3307      	adds	r3, #7
 80050b6:	f023 0307 	bic.w	r3, r3, #7
 80050ba:	3308      	adds	r3, #8
 80050bc:	9303      	str	r3, [sp, #12]
 80050be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050c0:	443b      	add	r3, r7
 80050c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80050c4:	e76a      	b.n	8004f9c <_vfiprintf_r+0x78>
 80050c6:	460c      	mov	r4, r1
 80050c8:	2001      	movs	r0, #1
 80050ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80050ce:	e7a8      	b.n	8005022 <_vfiprintf_r+0xfe>
 80050d0:	2300      	movs	r3, #0
 80050d2:	f04f 0c0a 	mov.w	ip, #10
 80050d6:	4619      	mov	r1, r3
 80050d8:	3401      	adds	r4, #1
 80050da:	9305      	str	r3, [sp, #20]
 80050dc:	4620      	mov	r0, r4
 80050de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050e2:	3a30      	subs	r2, #48	@ 0x30
 80050e4:	2a09      	cmp	r2, #9
 80050e6:	d903      	bls.n	80050f0 <_vfiprintf_r+0x1cc>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0c6      	beq.n	800507a <_vfiprintf_r+0x156>
 80050ec:	9105      	str	r1, [sp, #20]
 80050ee:	e7c4      	b.n	800507a <_vfiprintf_r+0x156>
 80050f0:	4604      	mov	r4, r0
 80050f2:	2301      	movs	r3, #1
 80050f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80050f8:	e7f0      	b.n	80050dc <_vfiprintf_r+0x1b8>
 80050fa:	ab03      	add	r3, sp, #12
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	462a      	mov	r2, r5
 8005100:	4630      	mov	r0, r6
 8005102:	4b13      	ldr	r3, [pc, #76]	@ (8005150 <_vfiprintf_r+0x22c>)
 8005104:	a904      	add	r1, sp, #16
 8005106:	f7fd feb3 	bl	8002e70 <_printf_float>
 800510a:	4607      	mov	r7, r0
 800510c:	1c78      	adds	r0, r7, #1
 800510e:	d1d6      	bne.n	80050be <_vfiprintf_r+0x19a>
 8005110:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005112:	07d9      	lsls	r1, r3, #31
 8005114:	d405      	bmi.n	8005122 <_vfiprintf_r+0x1fe>
 8005116:	89ab      	ldrh	r3, [r5, #12]
 8005118:	059a      	lsls	r2, r3, #22
 800511a:	d402      	bmi.n	8005122 <_vfiprintf_r+0x1fe>
 800511c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800511e:	f7fe fbfb 	bl	8003918 <__retarget_lock_release_recursive>
 8005122:	89ab      	ldrh	r3, [r5, #12]
 8005124:	065b      	lsls	r3, r3, #25
 8005126:	f53f af1f 	bmi.w	8004f68 <_vfiprintf_r+0x44>
 800512a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800512c:	e71e      	b.n	8004f6c <_vfiprintf_r+0x48>
 800512e:	ab03      	add	r3, sp, #12
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	462a      	mov	r2, r5
 8005134:	4630      	mov	r0, r6
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <_vfiprintf_r+0x22c>)
 8005138:	a904      	add	r1, sp, #16
 800513a:	f7fe f937 	bl	80033ac <_printf_i>
 800513e:	e7e4      	b.n	800510a <_vfiprintf_r+0x1e6>
 8005140:	080058f8 	.word	0x080058f8
 8005144:	080058fe 	.word	0x080058fe
 8005148:	08005902 	.word	0x08005902
 800514c:	08002e71 	.word	0x08002e71
 8005150:	08004eff 	.word	0x08004eff

08005154 <__sflush_r>:
 8005154:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	0716      	lsls	r6, r2, #28
 800515c:	4605      	mov	r5, r0
 800515e:	460c      	mov	r4, r1
 8005160:	d454      	bmi.n	800520c <__sflush_r+0xb8>
 8005162:	684b      	ldr	r3, [r1, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	dc02      	bgt.n	800516e <__sflush_r+0x1a>
 8005168:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	dd48      	ble.n	8005200 <__sflush_r+0xac>
 800516e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005170:	2e00      	cmp	r6, #0
 8005172:	d045      	beq.n	8005200 <__sflush_r+0xac>
 8005174:	2300      	movs	r3, #0
 8005176:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800517a:	682f      	ldr	r7, [r5, #0]
 800517c:	6a21      	ldr	r1, [r4, #32]
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	d030      	beq.n	80051e4 <__sflush_r+0x90>
 8005182:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005184:	89a3      	ldrh	r3, [r4, #12]
 8005186:	0759      	lsls	r1, r3, #29
 8005188:	d505      	bpl.n	8005196 <__sflush_r+0x42>
 800518a:	6863      	ldr	r3, [r4, #4]
 800518c:	1ad2      	subs	r2, r2, r3
 800518e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005190:	b10b      	cbz	r3, 8005196 <__sflush_r+0x42>
 8005192:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005194:	1ad2      	subs	r2, r2, r3
 8005196:	2300      	movs	r3, #0
 8005198:	4628      	mov	r0, r5
 800519a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800519c:	6a21      	ldr	r1, [r4, #32]
 800519e:	47b0      	blx	r6
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	89a3      	ldrh	r3, [r4, #12]
 80051a4:	d106      	bne.n	80051b4 <__sflush_r+0x60>
 80051a6:	6829      	ldr	r1, [r5, #0]
 80051a8:	291d      	cmp	r1, #29
 80051aa:	d82b      	bhi.n	8005204 <__sflush_r+0xb0>
 80051ac:	4a28      	ldr	r2, [pc, #160]	@ (8005250 <__sflush_r+0xfc>)
 80051ae:	410a      	asrs	r2, r1
 80051b0:	07d6      	lsls	r6, r2, #31
 80051b2:	d427      	bmi.n	8005204 <__sflush_r+0xb0>
 80051b4:	2200      	movs	r2, #0
 80051b6:	6062      	str	r2, [r4, #4]
 80051b8:	6922      	ldr	r2, [r4, #16]
 80051ba:	04d9      	lsls	r1, r3, #19
 80051bc:	6022      	str	r2, [r4, #0]
 80051be:	d504      	bpl.n	80051ca <__sflush_r+0x76>
 80051c0:	1c42      	adds	r2, r0, #1
 80051c2:	d101      	bne.n	80051c8 <__sflush_r+0x74>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b903      	cbnz	r3, 80051ca <__sflush_r+0x76>
 80051c8:	6560      	str	r0, [r4, #84]	@ 0x54
 80051ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051cc:	602f      	str	r7, [r5, #0]
 80051ce:	b1b9      	cbz	r1, 8005200 <__sflush_r+0xac>
 80051d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051d4:	4299      	cmp	r1, r3
 80051d6:	d002      	beq.n	80051de <__sflush_r+0x8a>
 80051d8:	4628      	mov	r0, r5
 80051da:	f7ff f9fd 	bl	80045d8 <_free_r>
 80051de:	2300      	movs	r3, #0
 80051e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80051e2:	e00d      	b.n	8005200 <__sflush_r+0xac>
 80051e4:	2301      	movs	r3, #1
 80051e6:	4628      	mov	r0, r5
 80051e8:	47b0      	blx	r6
 80051ea:	4602      	mov	r2, r0
 80051ec:	1c50      	adds	r0, r2, #1
 80051ee:	d1c9      	bne.n	8005184 <__sflush_r+0x30>
 80051f0:	682b      	ldr	r3, [r5, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0c6      	beq.n	8005184 <__sflush_r+0x30>
 80051f6:	2b1d      	cmp	r3, #29
 80051f8:	d001      	beq.n	80051fe <__sflush_r+0xaa>
 80051fa:	2b16      	cmp	r3, #22
 80051fc:	d11d      	bne.n	800523a <__sflush_r+0xe6>
 80051fe:	602f      	str	r7, [r5, #0]
 8005200:	2000      	movs	r0, #0
 8005202:	e021      	b.n	8005248 <__sflush_r+0xf4>
 8005204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005208:	b21b      	sxth	r3, r3
 800520a:	e01a      	b.n	8005242 <__sflush_r+0xee>
 800520c:	690f      	ldr	r7, [r1, #16]
 800520e:	2f00      	cmp	r7, #0
 8005210:	d0f6      	beq.n	8005200 <__sflush_r+0xac>
 8005212:	0793      	lsls	r3, r2, #30
 8005214:	bf18      	it	ne
 8005216:	2300      	movne	r3, #0
 8005218:	680e      	ldr	r6, [r1, #0]
 800521a:	bf08      	it	eq
 800521c:	694b      	ldreq	r3, [r1, #20]
 800521e:	1bf6      	subs	r6, r6, r7
 8005220:	600f      	str	r7, [r1, #0]
 8005222:	608b      	str	r3, [r1, #8]
 8005224:	2e00      	cmp	r6, #0
 8005226:	ddeb      	ble.n	8005200 <__sflush_r+0xac>
 8005228:	4633      	mov	r3, r6
 800522a:	463a      	mov	r2, r7
 800522c:	4628      	mov	r0, r5
 800522e:	6a21      	ldr	r1, [r4, #32]
 8005230:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005234:	47e0      	blx	ip
 8005236:	2800      	cmp	r0, #0
 8005238:	dc07      	bgt.n	800524a <__sflush_r+0xf6>
 800523a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800523e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005242:	f04f 30ff 	mov.w	r0, #4294967295
 8005246:	81a3      	strh	r3, [r4, #12]
 8005248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800524a:	4407      	add	r7, r0
 800524c:	1a36      	subs	r6, r6, r0
 800524e:	e7e9      	b.n	8005224 <__sflush_r+0xd0>
 8005250:	dfbffffe 	.word	0xdfbffffe

08005254 <_fflush_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	690b      	ldr	r3, [r1, #16]
 8005258:	4605      	mov	r5, r0
 800525a:	460c      	mov	r4, r1
 800525c:	b913      	cbnz	r3, 8005264 <_fflush_r+0x10>
 800525e:	2500      	movs	r5, #0
 8005260:	4628      	mov	r0, r5
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	b118      	cbz	r0, 800526e <_fflush_r+0x1a>
 8005266:	6a03      	ldr	r3, [r0, #32]
 8005268:	b90b      	cbnz	r3, 800526e <_fflush_r+0x1a>
 800526a:	f7fe fa4b 	bl	8003704 <__sinit>
 800526e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f3      	beq.n	800525e <_fflush_r+0xa>
 8005276:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005278:	07d0      	lsls	r0, r2, #31
 800527a:	d404      	bmi.n	8005286 <_fflush_r+0x32>
 800527c:	0599      	lsls	r1, r3, #22
 800527e:	d402      	bmi.n	8005286 <_fflush_r+0x32>
 8005280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005282:	f7fe fb48 	bl	8003916 <__retarget_lock_acquire_recursive>
 8005286:	4628      	mov	r0, r5
 8005288:	4621      	mov	r1, r4
 800528a:	f7ff ff63 	bl	8005154 <__sflush_r>
 800528e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005290:	4605      	mov	r5, r0
 8005292:	07da      	lsls	r2, r3, #31
 8005294:	d4e4      	bmi.n	8005260 <_fflush_r+0xc>
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	059b      	lsls	r3, r3, #22
 800529a:	d4e1      	bmi.n	8005260 <_fflush_r+0xc>
 800529c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800529e:	f7fe fb3b 	bl	8003918 <__retarget_lock_release_recursive>
 80052a2:	e7dd      	b.n	8005260 <_fflush_r+0xc>

080052a4 <__swbuf_r>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	460e      	mov	r6, r1
 80052a8:	4614      	mov	r4, r2
 80052aa:	4605      	mov	r5, r0
 80052ac:	b118      	cbz	r0, 80052b6 <__swbuf_r+0x12>
 80052ae:	6a03      	ldr	r3, [r0, #32]
 80052b0:	b90b      	cbnz	r3, 80052b6 <__swbuf_r+0x12>
 80052b2:	f7fe fa27 	bl	8003704 <__sinit>
 80052b6:	69a3      	ldr	r3, [r4, #24]
 80052b8:	60a3      	str	r3, [r4, #8]
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	071a      	lsls	r2, r3, #28
 80052be:	d501      	bpl.n	80052c4 <__swbuf_r+0x20>
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	b943      	cbnz	r3, 80052d6 <__swbuf_r+0x32>
 80052c4:	4621      	mov	r1, r4
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f82a 	bl	8005320 <__swsetup_r>
 80052cc:	b118      	cbz	r0, 80052d6 <__swbuf_r+0x32>
 80052ce:	f04f 37ff 	mov.w	r7, #4294967295
 80052d2:	4638      	mov	r0, r7
 80052d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	6922      	ldr	r2, [r4, #16]
 80052da:	b2f6      	uxtb	r6, r6
 80052dc:	1a98      	subs	r0, r3, r2
 80052de:	6963      	ldr	r3, [r4, #20]
 80052e0:	4637      	mov	r7, r6
 80052e2:	4283      	cmp	r3, r0
 80052e4:	dc05      	bgt.n	80052f2 <__swbuf_r+0x4e>
 80052e6:	4621      	mov	r1, r4
 80052e8:	4628      	mov	r0, r5
 80052ea:	f7ff ffb3 	bl	8005254 <_fflush_r>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d1ed      	bne.n	80052ce <__swbuf_r+0x2a>
 80052f2:	68a3      	ldr	r3, [r4, #8]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	60a3      	str	r3, [r4, #8]
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	6022      	str	r2, [r4, #0]
 80052fe:	701e      	strb	r6, [r3, #0]
 8005300:	6962      	ldr	r2, [r4, #20]
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	429a      	cmp	r2, r3
 8005306:	d004      	beq.n	8005312 <__swbuf_r+0x6e>
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	07db      	lsls	r3, r3, #31
 800530c:	d5e1      	bpl.n	80052d2 <__swbuf_r+0x2e>
 800530e:	2e0a      	cmp	r6, #10
 8005310:	d1df      	bne.n	80052d2 <__swbuf_r+0x2e>
 8005312:	4621      	mov	r1, r4
 8005314:	4628      	mov	r0, r5
 8005316:	f7ff ff9d 	bl	8005254 <_fflush_r>
 800531a:	2800      	cmp	r0, #0
 800531c:	d0d9      	beq.n	80052d2 <__swbuf_r+0x2e>
 800531e:	e7d6      	b.n	80052ce <__swbuf_r+0x2a>

08005320 <__swsetup_r>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	4b29      	ldr	r3, [pc, #164]	@ (80053c8 <__swsetup_r+0xa8>)
 8005324:	4605      	mov	r5, r0
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	460c      	mov	r4, r1
 800532a:	b118      	cbz	r0, 8005334 <__swsetup_r+0x14>
 800532c:	6a03      	ldr	r3, [r0, #32]
 800532e:	b90b      	cbnz	r3, 8005334 <__swsetup_r+0x14>
 8005330:	f7fe f9e8 	bl	8003704 <__sinit>
 8005334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005338:	0719      	lsls	r1, r3, #28
 800533a:	d422      	bmi.n	8005382 <__swsetup_r+0x62>
 800533c:	06da      	lsls	r2, r3, #27
 800533e:	d407      	bmi.n	8005350 <__swsetup_r+0x30>
 8005340:	2209      	movs	r2, #9
 8005342:	602a      	str	r2, [r5, #0]
 8005344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005348:	f04f 30ff 	mov.w	r0, #4294967295
 800534c:	81a3      	strh	r3, [r4, #12]
 800534e:	e033      	b.n	80053b8 <__swsetup_r+0x98>
 8005350:	0758      	lsls	r0, r3, #29
 8005352:	d512      	bpl.n	800537a <__swsetup_r+0x5a>
 8005354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005356:	b141      	cbz	r1, 800536a <__swsetup_r+0x4a>
 8005358:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800535c:	4299      	cmp	r1, r3
 800535e:	d002      	beq.n	8005366 <__swsetup_r+0x46>
 8005360:	4628      	mov	r0, r5
 8005362:	f7ff f939 	bl	80045d8 <_free_r>
 8005366:	2300      	movs	r3, #0
 8005368:	6363      	str	r3, [r4, #52]	@ 0x34
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005370:	81a3      	strh	r3, [r4, #12]
 8005372:	2300      	movs	r3, #0
 8005374:	6063      	str	r3, [r4, #4]
 8005376:	6923      	ldr	r3, [r4, #16]
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	f043 0308 	orr.w	r3, r3, #8
 8005380:	81a3      	strh	r3, [r4, #12]
 8005382:	6923      	ldr	r3, [r4, #16]
 8005384:	b94b      	cbnz	r3, 800539a <__swsetup_r+0x7a>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800538c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005390:	d003      	beq.n	800539a <__swsetup_r+0x7a>
 8005392:	4621      	mov	r1, r4
 8005394:	4628      	mov	r0, r5
 8005396:	f000 f8c0 	bl	800551a <__smakebuf_r>
 800539a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800539e:	f013 0201 	ands.w	r2, r3, #1
 80053a2:	d00a      	beq.n	80053ba <__swsetup_r+0x9a>
 80053a4:	2200      	movs	r2, #0
 80053a6:	60a2      	str	r2, [r4, #8]
 80053a8:	6962      	ldr	r2, [r4, #20]
 80053aa:	4252      	negs	r2, r2
 80053ac:	61a2      	str	r2, [r4, #24]
 80053ae:	6922      	ldr	r2, [r4, #16]
 80053b0:	b942      	cbnz	r2, 80053c4 <__swsetup_r+0xa4>
 80053b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053b6:	d1c5      	bne.n	8005344 <__swsetup_r+0x24>
 80053b8:	bd38      	pop	{r3, r4, r5, pc}
 80053ba:	0799      	lsls	r1, r3, #30
 80053bc:	bf58      	it	pl
 80053be:	6962      	ldrpl	r2, [r4, #20]
 80053c0:	60a2      	str	r2, [r4, #8]
 80053c2:	e7f4      	b.n	80053ae <__swsetup_r+0x8e>
 80053c4:	2000      	movs	r0, #0
 80053c6:	e7f7      	b.n	80053b8 <__swsetup_r+0x98>
 80053c8:	20000018 	.word	0x20000018

080053cc <_sbrk_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	2300      	movs	r3, #0
 80053d0:	4d05      	ldr	r5, [pc, #20]	@ (80053e8 <_sbrk_r+0x1c>)
 80053d2:	4604      	mov	r4, r0
 80053d4:	4608      	mov	r0, r1
 80053d6:	602b      	str	r3, [r5, #0]
 80053d8:	f7fb ff7a 	bl	80012d0 <_sbrk>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_sbrk_r+0x1a>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_sbrk_r+0x1a>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	20000364 	.word	0x20000364

080053ec <memcpy>:
 80053ec:	440a      	add	r2, r1
 80053ee:	4291      	cmp	r1, r2
 80053f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80053f4:	d100      	bne.n	80053f8 <memcpy+0xc>
 80053f6:	4770      	bx	lr
 80053f8:	b510      	push	{r4, lr}
 80053fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053fe:	4291      	cmp	r1, r2
 8005400:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005404:	d1f9      	bne.n	80053fa <memcpy+0xe>
 8005406:	bd10      	pop	{r4, pc}

08005408 <__assert_func>:
 8005408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800540a:	4614      	mov	r4, r2
 800540c:	461a      	mov	r2, r3
 800540e:	4b09      	ldr	r3, [pc, #36]	@ (8005434 <__assert_func+0x2c>)
 8005410:	4605      	mov	r5, r0
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68d8      	ldr	r0, [r3, #12]
 8005416:	b954      	cbnz	r4, 800542e <__assert_func+0x26>
 8005418:	4b07      	ldr	r3, [pc, #28]	@ (8005438 <__assert_func+0x30>)
 800541a:	461c      	mov	r4, r3
 800541c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005420:	9100      	str	r1, [sp, #0]
 8005422:	462b      	mov	r3, r5
 8005424:	4905      	ldr	r1, [pc, #20]	@ (800543c <__assert_func+0x34>)
 8005426:	f000 f841 	bl	80054ac <fiprintf>
 800542a:	f000 f8d5 	bl	80055d8 <abort>
 800542e:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <__assert_func+0x38>)
 8005430:	e7f4      	b.n	800541c <__assert_func+0x14>
 8005432:	bf00      	nop
 8005434:	20000018 	.word	0x20000018
 8005438:	0800594e 	.word	0x0800594e
 800543c:	08005920 	.word	0x08005920
 8005440:	08005913 	.word	0x08005913

08005444 <_calloc_r>:
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	fba1 5402 	umull	r5, r4, r1, r2
 800544a:	b93c      	cbnz	r4, 800545c <_calloc_r+0x18>
 800544c:	4629      	mov	r1, r5
 800544e:	f7ff f935 	bl	80046bc <_malloc_r>
 8005452:	4606      	mov	r6, r0
 8005454:	b928      	cbnz	r0, 8005462 <_calloc_r+0x1e>
 8005456:	2600      	movs	r6, #0
 8005458:	4630      	mov	r0, r6
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	220c      	movs	r2, #12
 800545e:	6002      	str	r2, [r0, #0]
 8005460:	e7f9      	b.n	8005456 <_calloc_r+0x12>
 8005462:	462a      	mov	r2, r5
 8005464:	4621      	mov	r1, r4
 8005466:	f7fe f9d8 	bl	800381a <memset>
 800546a:	e7f5      	b.n	8005458 <_calloc_r+0x14>

0800546c <__ascii_mbtowc>:
 800546c:	b082      	sub	sp, #8
 800546e:	b901      	cbnz	r1, 8005472 <__ascii_mbtowc+0x6>
 8005470:	a901      	add	r1, sp, #4
 8005472:	b142      	cbz	r2, 8005486 <__ascii_mbtowc+0x1a>
 8005474:	b14b      	cbz	r3, 800548a <__ascii_mbtowc+0x1e>
 8005476:	7813      	ldrb	r3, [r2, #0]
 8005478:	600b      	str	r3, [r1, #0]
 800547a:	7812      	ldrb	r2, [r2, #0]
 800547c:	1e10      	subs	r0, r2, #0
 800547e:	bf18      	it	ne
 8005480:	2001      	movne	r0, #1
 8005482:	b002      	add	sp, #8
 8005484:	4770      	bx	lr
 8005486:	4610      	mov	r0, r2
 8005488:	e7fb      	b.n	8005482 <__ascii_mbtowc+0x16>
 800548a:	f06f 0001 	mvn.w	r0, #1
 800548e:	e7f8      	b.n	8005482 <__ascii_mbtowc+0x16>

08005490 <__ascii_wctomb>:
 8005490:	4603      	mov	r3, r0
 8005492:	4608      	mov	r0, r1
 8005494:	b141      	cbz	r1, 80054a8 <__ascii_wctomb+0x18>
 8005496:	2aff      	cmp	r2, #255	@ 0xff
 8005498:	d904      	bls.n	80054a4 <__ascii_wctomb+0x14>
 800549a:	228a      	movs	r2, #138	@ 0x8a
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	4770      	bx	lr
 80054a4:	2001      	movs	r0, #1
 80054a6:	700a      	strb	r2, [r1, #0]
 80054a8:	4770      	bx	lr
	...

080054ac <fiprintf>:
 80054ac:	b40e      	push	{r1, r2, r3}
 80054ae:	b503      	push	{r0, r1, lr}
 80054b0:	4601      	mov	r1, r0
 80054b2:	ab03      	add	r3, sp, #12
 80054b4:	4805      	ldr	r0, [pc, #20]	@ (80054cc <fiprintf+0x20>)
 80054b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ba:	6800      	ldr	r0, [r0, #0]
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	f7ff fd31 	bl	8004f24 <_vfiprintf_r>
 80054c2:	b002      	add	sp, #8
 80054c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054c8:	b003      	add	sp, #12
 80054ca:	4770      	bx	lr
 80054cc:	20000018 	.word	0x20000018

080054d0 <__swhatbuf_r>:
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	460c      	mov	r4, r1
 80054d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d8:	4615      	mov	r5, r2
 80054da:	2900      	cmp	r1, #0
 80054dc:	461e      	mov	r6, r3
 80054de:	b096      	sub	sp, #88	@ 0x58
 80054e0:	da0c      	bge.n	80054fc <__swhatbuf_r+0x2c>
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	2100      	movs	r1, #0
 80054e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80054ea:	bf14      	ite	ne
 80054ec:	2340      	movne	r3, #64	@ 0x40
 80054ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80054f2:	2000      	movs	r0, #0
 80054f4:	6031      	str	r1, [r6, #0]
 80054f6:	602b      	str	r3, [r5, #0]
 80054f8:	b016      	add	sp, #88	@ 0x58
 80054fa:	bd70      	pop	{r4, r5, r6, pc}
 80054fc:	466a      	mov	r2, sp
 80054fe:	f000 f849 	bl	8005594 <_fstat_r>
 8005502:	2800      	cmp	r0, #0
 8005504:	dbed      	blt.n	80054e2 <__swhatbuf_r+0x12>
 8005506:	9901      	ldr	r1, [sp, #4]
 8005508:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800550c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005510:	4259      	negs	r1, r3
 8005512:	4159      	adcs	r1, r3
 8005514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005518:	e7eb      	b.n	80054f2 <__swhatbuf_r+0x22>

0800551a <__smakebuf_r>:
 800551a:	898b      	ldrh	r3, [r1, #12]
 800551c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800551e:	079d      	lsls	r5, r3, #30
 8005520:	4606      	mov	r6, r0
 8005522:	460c      	mov	r4, r1
 8005524:	d507      	bpl.n	8005536 <__smakebuf_r+0x1c>
 8005526:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800552a:	6023      	str	r3, [r4, #0]
 800552c:	6123      	str	r3, [r4, #16]
 800552e:	2301      	movs	r3, #1
 8005530:	6163      	str	r3, [r4, #20]
 8005532:	b003      	add	sp, #12
 8005534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005536:	466a      	mov	r2, sp
 8005538:	ab01      	add	r3, sp, #4
 800553a:	f7ff ffc9 	bl	80054d0 <__swhatbuf_r>
 800553e:	9f00      	ldr	r7, [sp, #0]
 8005540:	4605      	mov	r5, r0
 8005542:	4639      	mov	r1, r7
 8005544:	4630      	mov	r0, r6
 8005546:	f7ff f8b9 	bl	80046bc <_malloc_r>
 800554a:	b948      	cbnz	r0, 8005560 <__smakebuf_r+0x46>
 800554c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005550:	059a      	lsls	r2, r3, #22
 8005552:	d4ee      	bmi.n	8005532 <__smakebuf_r+0x18>
 8005554:	f023 0303 	bic.w	r3, r3, #3
 8005558:	f043 0302 	orr.w	r3, r3, #2
 800555c:	81a3      	strh	r3, [r4, #12]
 800555e:	e7e2      	b.n	8005526 <__smakebuf_r+0xc>
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800556a:	81a3      	strh	r3, [r4, #12]
 800556c:	9b01      	ldr	r3, [sp, #4]
 800556e:	6020      	str	r0, [r4, #0]
 8005570:	b15b      	cbz	r3, 800558a <__smakebuf_r+0x70>
 8005572:	4630      	mov	r0, r6
 8005574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005578:	f000 f81e 	bl	80055b8 <_isatty_r>
 800557c:	b128      	cbz	r0, 800558a <__smakebuf_r+0x70>
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	f023 0303 	bic.w	r3, r3, #3
 8005584:	f043 0301 	orr.w	r3, r3, #1
 8005588:	81a3      	strh	r3, [r4, #12]
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	431d      	orrs	r5, r3
 800558e:	81a5      	strh	r5, [r4, #12]
 8005590:	e7cf      	b.n	8005532 <__smakebuf_r+0x18>
	...

08005594 <_fstat_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	2300      	movs	r3, #0
 8005598:	4d06      	ldr	r5, [pc, #24]	@ (80055b4 <_fstat_r+0x20>)
 800559a:	4604      	mov	r4, r0
 800559c:	4608      	mov	r0, r1
 800559e:	4611      	mov	r1, r2
 80055a0:	602b      	str	r3, [r5, #0]
 80055a2:	f7fb fe6f 	bl	8001284 <_fstat>
 80055a6:	1c43      	adds	r3, r0, #1
 80055a8:	d102      	bne.n	80055b0 <_fstat_r+0x1c>
 80055aa:	682b      	ldr	r3, [r5, #0]
 80055ac:	b103      	cbz	r3, 80055b0 <_fstat_r+0x1c>
 80055ae:	6023      	str	r3, [r4, #0]
 80055b0:	bd38      	pop	{r3, r4, r5, pc}
 80055b2:	bf00      	nop
 80055b4:	20000364 	.word	0x20000364

080055b8 <_isatty_r>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	2300      	movs	r3, #0
 80055bc:	4d05      	ldr	r5, [pc, #20]	@ (80055d4 <_isatty_r+0x1c>)
 80055be:	4604      	mov	r4, r0
 80055c0:	4608      	mov	r0, r1
 80055c2:	602b      	str	r3, [r5, #0]
 80055c4:	f7fb fe6d 	bl	80012a2 <_isatty>
 80055c8:	1c43      	adds	r3, r0, #1
 80055ca:	d102      	bne.n	80055d2 <_isatty_r+0x1a>
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	b103      	cbz	r3, 80055d2 <_isatty_r+0x1a>
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	bd38      	pop	{r3, r4, r5, pc}
 80055d4:	20000364 	.word	0x20000364

080055d8 <abort>:
 80055d8:	2006      	movs	r0, #6
 80055da:	b508      	push	{r3, lr}
 80055dc:	f000 f82c 	bl	8005638 <raise>
 80055e0:	2001      	movs	r0, #1
 80055e2:	f7fb fe00 	bl	80011e6 <_exit>

080055e6 <_raise_r>:
 80055e6:	291f      	cmp	r1, #31
 80055e8:	b538      	push	{r3, r4, r5, lr}
 80055ea:	4605      	mov	r5, r0
 80055ec:	460c      	mov	r4, r1
 80055ee:	d904      	bls.n	80055fa <_raise_r+0x14>
 80055f0:	2316      	movs	r3, #22
 80055f2:	6003      	str	r3, [r0, #0]
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295
 80055f8:	bd38      	pop	{r3, r4, r5, pc}
 80055fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80055fc:	b112      	cbz	r2, 8005604 <_raise_r+0x1e>
 80055fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005602:	b94b      	cbnz	r3, 8005618 <_raise_r+0x32>
 8005604:	4628      	mov	r0, r5
 8005606:	f000 f831 	bl	800566c <_getpid_r>
 800560a:	4622      	mov	r2, r4
 800560c:	4601      	mov	r1, r0
 800560e:	4628      	mov	r0, r5
 8005610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005614:	f000 b818 	b.w	8005648 <_kill_r>
 8005618:	2b01      	cmp	r3, #1
 800561a:	d00a      	beq.n	8005632 <_raise_r+0x4c>
 800561c:	1c59      	adds	r1, r3, #1
 800561e:	d103      	bne.n	8005628 <_raise_r+0x42>
 8005620:	2316      	movs	r3, #22
 8005622:	6003      	str	r3, [r0, #0]
 8005624:	2001      	movs	r0, #1
 8005626:	e7e7      	b.n	80055f8 <_raise_r+0x12>
 8005628:	2100      	movs	r1, #0
 800562a:	4620      	mov	r0, r4
 800562c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005630:	4798      	blx	r3
 8005632:	2000      	movs	r0, #0
 8005634:	e7e0      	b.n	80055f8 <_raise_r+0x12>
	...

08005638 <raise>:
 8005638:	4b02      	ldr	r3, [pc, #8]	@ (8005644 <raise+0xc>)
 800563a:	4601      	mov	r1, r0
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	f7ff bfd2 	b.w	80055e6 <_raise_r>
 8005642:	bf00      	nop
 8005644:	20000018 	.word	0x20000018

08005648 <_kill_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	2300      	movs	r3, #0
 800564c:	4d06      	ldr	r5, [pc, #24]	@ (8005668 <_kill_r+0x20>)
 800564e:	4604      	mov	r4, r0
 8005650:	4608      	mov	r0, r1
 8005652:	4611      	mov	r1, r2
 8005654:	602b      	str	r3, [r5, #0]
 8005656:	f7fb fdb6 	bl	80011c6 <_kill>
 800565a:	1c43      	adds	r3, r0, #1
 800565c:	d102      	bne.n	8005664 <_kill_r+0x1c>
 800565e:	682b      	ldr	r3, [r5, #0]
 8005660:	b103      	cbz	r3, 8005664 <_kill_r+0x1c>
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	bd38      	pop	{r3, r4, r5, pc}
 8005666:	bf00      	nop
 8005668:	20000364 	.word	0x20000364

0800566c <_getpid_r>:
 800566c:	f7fb bda4 	b.w	80011b8 <_getpid>

08005670 <_init>:
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	bf00      	nop
 8005674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005676:	bc08      	pop	{r3}
 8005678:	469e      	mov	lr, r3
 800567a:	4770      	bx	lr

0800567c <_fini>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	bf00      	nop
 8005680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005682:	bc08      	pop	{r3}
 8005684:	469e      	mov	lr, r3
 8005686:	4770      	bx	lr
