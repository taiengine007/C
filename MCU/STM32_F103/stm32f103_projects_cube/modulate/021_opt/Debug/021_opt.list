
021_opt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000716c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08007280  08007280  00008280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007780  08007780  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007780  08007780  00008780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007788  08007788  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007788  08007788  00008788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800778c  0800778c  0000878c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007790  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  200001d4  08007964  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  08007964  0000988c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b374  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213e  00000000  00000000  00014571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  000166b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000923  00000000  00000000  000172a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191d0  00000000  00000000  00017bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f247  00000000  00000000  00030d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bcf9  00000000  00000000  0003ffda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbcd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042ac  00000000  00000000  000cbd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000cffc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007264 	.word	0x08007264

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007264 	.word	0x08007264

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f000 ff21 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f8f1 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f000 fa15 	bl	80014ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8001082:	f000 f93f 	bl	8001304 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001086:	f000 f9ab 	bl	80013e0 <MX_I2C2_Init>
  MX_I2C1_Init();
 800108a:	f000 f97b 	bl	8001384 <MX_I2C1_Init>
  MX_SPI2_Init();
 800108e:	f000 f9d5 	bl	800143c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start (&hadc1);
 8001092:	4864      	ldr	r0, [pc, #400]	@ (8001224 <main+0x1b4>)
 8001094:	f001 f870 	bl	8002178 <HAL_ADC_Start>

  printf("hello world\n");
 8001098:	4863      	ldr	r0, [pc, #396]	@ (8001228 <main+0x1b8>)
 800109a:	f004 f96d 	bl	8005378 <puts>

// OLED INIT
  ssd1306_Init();
 800109e:	f000 fe31 	bl	8001d04 <ssd1306_Init>

  // Second, initilaize the MCP4725 object:
  	myMCP4725 = MCP4725_init(&hi2c2, MCP4725A0_ADDR_A01, 5.0);
 80010a2:	4c62      	ldr	r4, [pc, #392]	@ (800122c <main+0x1bc>)
 80010a4:	4638      	mov	r0, r7
 80010a6:	4b62      	ldr	r3, [pc, #392]	@ (8001230 <main+0x1c0>)
 80010a8:	2261      	movs	r2, #97	@ 0x61
 80010aa:	4962      	ldr	r1, [pc, #392]	@ (8001234 <main+0x1c4>)
 80010ac:	f000 fcef 	bl	8001a8e <MCP4725_init>
 80010b0:	463b      	mov	r3, r7
 80010b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}




  	// Check the connection:
  	if(MCP4725_isConnected(&myMCP4725)){
 80010b8:	485c      	ldr	r0, [pc, #368]	@ (800122c <main+0x1bc>)
 80010ba:	f000 fd07 	bl	8001acc <MCP4725_isConnected>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <main+0x5c>

  		// Print that the DAC is coonected
  		printf("dac is connected -- \n");
 80010c4:	485c      	ldr	r0, [pc, #368]	@ (8001238 <main+0x1c8>)
 80010c6:	f004 f957 	bl	8005378 <puts>
 80010ca:	e002      	b.n	80010d2 <main+0x62>

  	}
  	else{

  		// Print that the DAC is NOT coonected
  		printf("not connected\n");
 80010cc:	485b      	ldr	r0, [pc, #364]	@ (800123c <main+0x1cc>)
 80010ce:	f004 f953 	bl	8005378 <puts>

  	}

  	HAL_Delay(5000);
 80010d2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80010d6:	f000 ff53 	bl	8001f80 <HAL_Delay>
  	printf("delay 5sec after dac is connected \n");
 80010da:	4859      	ldr	r0, [pc, #356]	@ (8001240 <main+0x1d0>)
 80010dc:	f004 f94c 	bl	8005378 <puts>
    {

    	/////////////  while begin


    	  HAL_ADC_PollForConversion (&hadc1, 100);
 80010e0:	2164      	movs	r1, #100	@ 0x64
 80010e2:	4850      	ldr	r0, [pc, #320]	@ (8001224 <main+0x1b4>)
 80010e4:	f001 f8f6 	bl	80022d4 <HAL_ADC_PollForConversion>
    	  value = HAL_ADC_GetValue (&hadc1);
 80010e8:	484e      	ldr	r0, [pc, #312]	@ (8001224 <main+0x1b4>)
 80010ea:	f001 f9f9 	bl	80024e0 <HAL_ADC_GetValue>
 80010ee:	4603      	mov	r3, r0
 80010f0:	613b      	str	r3, [r7, #16]
    	  // printf("value = %ld\n",value);
    	  float voltage = (value * 5.0f) / 4096.0f;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fd7d 	bl	8000bf4 <__aeabi_ui2f>
 80010fa:	4603      	mov	r3, r0
 80010fc:	494c      	ldr	r1, [pc, #304]	@ (8001230 <main+0x1c0>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fdd0 	bl	8000ca4 <__aeabi_fmul>
 8001104:	4603      	mov	r3, r0
 8001106:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe7e 	bl	8000e0c <__aeabi_fdiv>
 8001110:	4603      	mov	r3, r0
 8001112:	617b      	str	r3, [r7, #20]

    	  // Print voltage
    		         // printf("ADC Value: %lu, Voltage: %.2f V\n", value, voltage);
    	  //printf(" adc value == %ld  ---  Voltage: %.2f V\n",value, voltage);
    	  printf(" %ld     %.2f V\n",value, voltage);
 8001114:	693c      	ldr	r4, [r7, #16]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff f986 	bl	8000428 <__aeabi_f2d>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4621      	mov	r1, r4
 8001122:	4848      	ldr	r0, [pc, #288]	@ (8001244 <main+0x1d4>)
 8001124:	f004 f8c0 	bl	80052a8 <iprintf>
    	  //MCP4725_setVoltage(&myMCP4725,voltage, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
    	  HAL_Delay(4000);
 8001128:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800112c:	f000 ff28 	bl	8001f80 <HAL_Delay>
    	  ////////////////////////////////////



      	  if(voltage <= 1.0){
 8001130:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001134:	6978      	ldr	r0, [r7, #20]
 8001136:	f7ff ff5d 	bl	8000ff4 <__aeabi_fcmple>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00a      	beq.n	8001156 <main+0xe6>
      		  MCP4725_setVoltage(&myMCP4725,1.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001140:	2300      	movs	r3, #0
 8001142:	2200      	movs	r2, #0
 8001144:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001148:	4838      	ldr	r0, [pc, #224]	@ (800122c <main+0x1bc>)
 800114a:	f000 fd13 	bl	8001b74 <MCP4725_setVoltage>
      		  printf("if voltage <=1 --> mcp_setvoltgae(1)\n");
 800114e:	483e      	ldr	r0, [pc, #248]	@ (8001248 <main+0x1d8>)
 8001150:	f004 f912 	bl	8005378 <puts>
 8001154:	e7c4      	b.n	80010e0 <main+0x70>
      	  }else if(voltage >1.0 && voltage <=2.0){
 8001156:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff5e 	bl	800101c <__aeabi_fcmpgt>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d012      	beq.n	800118c <main+0x11c>
 8001166:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff42 	bl	8000ff4 <__aeabi_fcmple>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00a      	beq.n	800118c <main+0x11c>
      		  MCP4725_setVoltage(&myMCP4725,2.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001176:	2300      	movs	r3, #0
 8001178:	2200      	movs	r2, #0
 800117a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800117e:	482b      	ldr	r0, [pc, #172]	@ (800122c <main+0x1bc>)
 8001180:	f000 fcf8 	bl	8001b74 <MCP4725_setVoltage>
      		 		  printf("if voltage <=2 --> mcp_setvoltgae(2)\n");
 8001184:	4831      	ldr	r0, [pc, #196]	@ (800124c <main+0x1dc>)
 8001186:	f004 f8f7 	bl	8005378 <puts>
 800118a:	e04a      	b.n	8001222 <main+0x1b2>

      	  }else if(voltage >2.0 && voltage <=3.0){
 800118c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001190:	6978      	ldr	r0, [r7, #20]
 8001192:	f7ff ff43 	bl	800101c <__aeabi_fcmpgt>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d010      	beq.n	80011be <main+0x14e>
 800119c:	492c      	ldr	r1, [pc, #176]	@ (8001250 <main+0x1e0>)
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff28 	bl	8000ff4 <__aeabi_fcmple>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d009      	beq.n	80011be <main+0x14e>
      		  MCP4725_setVoltage(&myMCP4725,3.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80011aa:	2300      	movs	r3, #0
 80011ac:	2200      	movs	r2, #0
 80011ae:	4928      	ldr	r1, [pc, #160]	@ (8001250 <main+0x1e0>)
 80011b0:	481e      	ldr	r0, [pc, #120]	@ (800122c <main+0x1bc>)
 80011b2:	f000 fcdf 	bl	8001b74 <MCP4725_setVoltage>
      		 		  printf("if voltage <=3 --> mcp_setvoltgae(3)\n");
 80011b6:	4827      	ldr	r0, [pc, #156]	@ (8001254 <main+0x1e4>)
 80011b8:	f004 f8de 	bl	8005378 <puts>
 80011bc:	e031      	b.n	8001222 <main+0x1b2>

      	  }else if(voltage >3.0 && voltage <=4.0){
 80011be:	4924      	ldr	r1, [pc, #144]	@ (8001250 <main+0x1e0>)
 80011c0:	6978      	ldr	r0, [r7, #20]
 80011c2:	f7ff ff2b 	bl	800101c <__aeabi_fcmpgt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d012      	beq.n	80011f2 <main+0x182>
 80011cc:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80011d0:	6978      	ldr	r0, [r7, #20]
 80011d2:	f7ff ff0f 	bl	8000ff4 <__aeabi_fcmple>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00a      	beq.n	80011f2 <main+0x182>
      		  MCP4725_setVoltage(&myMCP4725,4.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80011dc:	2300      	movs	r3, #0
 80011de:	2200      	movs	r2, #0
 80011e0:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80011e4:	4811      	ldr	r0, [pc, #68]	@ (800122c <main+0x1bc>)
 80011e6:	f000 fcc5 	bl	8001b74 <MCP4725_setVoltage>
      		 		  printf("if voltage <=4 --> mcp_setvoltgae(4)\n");
 80011ea:	481b      	ldr	r0, [pc, #108]	@ (8001258 <main+0x1e8>)
 80011ec:	f004 f8c4 	bl	8005378 <puts>
 80011f0:	e017      	b.n	8001222 <main+0x1b2>

      	  }else if(voltage >4.0 && voltage <=5.0){
 80011f2:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff10 	bl	800101c <__aeabi_fcmpgt>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00f      	beq.n	8001222 <main+0x1b2>
 8001202:	490b      	ldr	r1, [pc, #44]	@ (8001230 <main+0x1c0>)
 8001204:	6978      	ldr	r0, [r7, #20]
 8001206:	f7ff fef5 	bl	8000ff4 <__aeabi_fcmple>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <main+0x1b2>
      		  MCP4725_setVoltage(&myMCP4725,5.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001210:	2300      	movs	r3, #0
 8001212:	2200      	movs	r2, #0
 8001214:	4906      	ldr	r1, [pc, #24]	@ (8001230 <main+0x1c0>)
 8001216:	4805      	ldr	r0, [pc, #20]	@ (800122c <main+0x1bc>)
 8001218:	f000 fcac 	bl	8001b74 <MCP4725_setVoltage>
      		 		  printf("if voltage <=5 --> mcp_setvoltgae(5)\n");
 800121c:	480f      	ldr	r0, [pc, #60]	@ (800125c <main+0x1ec>)
 800121e:	f004 f8ab 	bl	8005378 <puts>
    {
 8001222:	e75d      	b.n	80010e0 <main+0x70>
 8001224:	200001f0 	.word	0x200001f0
 8001228:	08007280 	.word	0x08007280
 800122c:	20000320 	.word	0x20000320
 8001230:	40a00000 	.word	0x40a00000
 8001234:	20000274 	.word	0x20000274
 8001238:	0800728c 	.word	0x0800728c
 800123c:	080072a4 	.word	0x080072a4
 8001240:	080072b4 	.word	0x080072b4
 8001244:	080072d8 	.word	0x080072d8
 8001248:	080072ec 	.word	0x080072ec
 800124c:	08007314 	.word	0x08007314
 8001250:	40400000 	.word	0x40400000
 8001254:	0800733c 	.word	0x0800733c
 8001258:	08007364 	.word	0x08007364
 800125c:	0800738c 	.word	0x0800738c

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b094      	sub	sp, #80	@ 0x50
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800126a:	2228      	movs	r2, #40	@ 0x28
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f004 f962 	bl	8005538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001298:	2310      	movs	r3, #16
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 fce1 	bl	8003c6c <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80012b0:	f000 f96a 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 ff4d 	bl	8004170 <HAL_RCC_ClockConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012dc:	f000 f954 	bl	8001588 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012e0:	2302      	movs	r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 f8ce 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012f6:	f000 f947 	bl	8001588 <Error_Handler>
  }
}
 80012fa:	bf00      	nop
 80012fc:	3750      	adds	r7, #80	@ 0x50
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001314:	4b19      	ldr	r3, [pc, #100]	@ (800137c <MX_ADC1_Init+0x78>)
 8001316:	4a1a      	ldr	r2, [pc, #104]	@ (8001380 <MX_ADC1_Init+0x7c>)
 8001318:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800131a:	4b18      	ldr	r3, [pc, #96]	@ (800137c <MX_ADC1_Init+0x78>)
 800131c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001320:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <MX_ADC1_Init+0x78>)
 8001324:	2201      	movs	r2, #1
 8001326:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <MX_ADC1_Init+0x78>)
 800132a:	2200      	movs	r2, #0
 800132c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <MX_ADC1_Init+0x78>)
 8001330:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001334:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_ADC1_Init+0x78>)
 8001338:	2200      	movs	r2, #0
 800133a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <MX_ADC1_Init+0x78>)
 800133e:	2201      	movs	r2, #1
 8001340:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001342:	480e      	ldr	r0, [pc, #56]	@ (800137c <MX_ADC1_Init+0x78>)
 8001344:	f000 fe40 	bl	8001fc8 <HAL_ADC_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800134e:	f000 f91b 	bl	8001588 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001352:	2301      	movs	r3, #1
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001356:	2301      	movs	r3, #1
 8001358:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	@ (800137c <MX_ADC1_Init+0x78>)
 8001364:	f001 f8c8 	bl	80024f8 <HAL_ADC_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800136e:	f000 f90b 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001f0 	.word	0x200001f0
 8001380:	40012400 	.word	0x40012400

08001384 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_I2C1_Init+0x50>)
 800138a:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <MX_I2C1_Init+0x54>)
 800138c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_I2C1_Init+0x50>)
 8001390:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <MX_I2C1_Init+0x58>)
 8001392:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_I2C1_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_I2C1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013c2:	f001 fcf9 	bl	8002db8 <HAL_I2C_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013cc:	f000 f8dc 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000220 	.word	0x20000220
 80013d8:	40005400 	.word	0x40005400
 80013dc:	000186a0 	.word	0x000186a0

080013e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013e6:	4a13      	ldr	r2, [pc, #76]	@ (8001434 <MX_I2C2_Init+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013ec:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <MX_I2C2_Init+0x58>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <MX_I2C2_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_I2C2_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_I2C2_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_I2C2_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_I2C2_Init+0x50>)
 800141e:	f001 fccb 	bl	8002db8 <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001428:	f000 f8ae 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000274 	.word	0x20000274
 8001434:	40005800 	.word	0x40005800
 8001438:	000186a0 	.word	0x000186a0

0800143c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <MX_SPI2_Init+0x68>)
 8001442:	4a19      	ldr	r2, [pc, #100]	@ (80014a8 <MX_SPI2_Init+0x6c>)
 8001444:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001446:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <MX_SPI2_Init+0x68>)
 8001448:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800144c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <MX_SPI2_Init+0x68>)
 8001450:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001454:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001456:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <MX_SPI2_Init+0x68>)
 8001458:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800145c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <MX_SPI2_Init+0x68>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <MX_SPI2_Init+0x68>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <MX_SPI2_Init+0x68>)
 800146c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001470:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_SPI2_Init+0x68>)
 8001474:	2200      	movs	r2, #0
 8001476:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <MX_SPI2_Init+0x68>)
 800147a:	2200      	movs	r2, #0
 800147c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_SPI2_Init+0x68>)
 8001480:	2200      	movs	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <MX_SPI2_Init+0x68>)
 8001486:	2200      	movs	r2, #0
 8001488:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <MX_SPI2_Init+0x68>)
 800148c:	220a      	movs	r2, #10
 800148e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <MX_SPI2_Init+0x68>)
 8001492:	f003 f967 	bl	8004764 <HAL_SPI_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 800149c:	f000 f874 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200002c8 	.word	0x200002c8
 80014a8:	40003800 	.word	0x40003800

080014ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	4b2e      	ldr	r3, [pc, #184]	@ (800157c <MX_GPIO_Init+0xd0>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a2d      	ldr	r2, [pc, #180]	@ (800157c <MX_GPIO_Init+0xd0>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <MX_GPIO_Init+0xd0>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d8:	4b28      	ldr	r3, [pc, #160]	@ (800157c <MX_GPIO_Init+0xd0>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a27      	ldr	r2, [pc, #156]	@ (800157c <MX_GPIO_Init+0xd0>)
 80014de:	f043 0320 	orr.w	r3, r3, #32
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b25      	ldr	r3, [pc, #148]	@ (800157c <MX_GPIO_Init+0xd0>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b22      	ldr	r3, [pc, #136]	@ (800157c <MX_GPIO_Init+0xd0>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a21      	ldr	r2, [pc, #132]	@ (800157c <MX_GPIO_Init+0xd0>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <MX_GPIO_Init+0xd0>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <MX_GPIO_Init+0xd0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a1b      	ldr	r2, [pc, #108]	@ (800157c <MX_GPIO_Init+0xd0>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <MX_GPIO_Init+0xd0>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_BUTTON_GPIO_Port, RELAY_BUTTON_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001526:	4816      	ldr	r0, [pc, #88]	@ (8001580 <MX_GPIO_Init+0xd4>)
 8001528:	f001 fc0c 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800152c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001532:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <MX_GPIO_Init+0xd8>)
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4619      	mov	r1, r3
 8001540:	480f      	ldr	r0, [pc, #60]	@ (8001580 <MX_GPIO_Init+0xd4>)
 8001542:	f001 fa7b 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = RELAY_BUTTON_Pin;
 8001546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800154a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800154c:	2311      	movs	r3, #17
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2302      	movs	r3, #2
 8001556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4619      	mov	r1, r3
 800155e:	4808      	ldr	r0, [pc, #32]	@ (8001580 <MX_GPIO_Init+0xd4>)
 8001560:	f001 fa6c 	bl	8002a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	2028      	movs	r0, #40	@ 0x28
 800156a:	f001 fa30 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800156e:	2028      	movs	r0, #40	@ 0x28
 8001570:	f001 fa49 	bl	8002a06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	40011000 	.word	0x40011000
 8001584:	10110000 	.word	0x10110000

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <Error_Handler+0x8>

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <HAL_MspInit+0x5c>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4a14      	ldr	r2, [pc, #80]	@ (80015f0 <HAL_MspInit+0x5c>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6193      	str	r3, [r2, #24]
 80015a6:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_MspInit+0x5c>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <HAL_MspInit+0x5c>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a0e      	ldr	r2, [pc, #56]	@ (80015f0 <HAL_MspInit+0x5c>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <HAL_MspInit+0x5c>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <HAL_MspInit+0x60>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <HAL_MspInit+0x60>)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010000 	.word	0x40010000

080015f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <HAL_ADC_MspInit+0x6c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d121      	bne.n	800165c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <HAL_ADC_MspInit+0x70>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <HAL_ADC_MspInit+0x70>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <HAL_ADC_MspInit+0x70>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <HAL_ADC_MspInit+0x70>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a0c      	ldr	r2, [pc, #48]	@ (8001668 <HAL_ADC_MspInit+0x70>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <HAL_ADC_MspInit+0x70>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001648:	2302      	movs	r3, #2
 800164a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164c:	2303      	movs	r3, #3
 800164e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4619      	mov	r1, r3
 8001656:	4805      	ldr	r0, [pc, #20]	@ (800166c <HAL_ADC_MspInit+0x74>)
 8001658:	f001 f9f0 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40012400 	.word	0x40012400
 8001668:	40021000 	.word	0x40021000
 800166c:	40010800 	.word	0x40010800

08001670 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	@ 0x30
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a32      	ldr	r2, [pc, #200]	@ (8001754 <HAL_I2C_MspInit+0xe4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d133      	bne.n	80016f8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <HAL_I2C_MspInit+0xe8>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a30      	ldr	r2, [pc, #192]	@ (8001758 <HAL_I2C_MspInit+0xe8>)
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b2e      	ldr	r3, [pc, #184]	@ (8001758 <HAL_I2C_MspInit+0xe8>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ae:	2312      	movs	r3, #18
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4827      	ldr	r0, [pc, #156]	@ (800175c <HAL_I2C_MspInit+0xec>)
 80016be:	f001 f9bd 	bl	8002a3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80016c2:	4b27      	ldr	r3, [pc, #156]	@ (8001760 <HAL_I2C_MspInit+0xf0>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ca:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016d8:	4a21      	ldr	r2, [pc, #132]	@ (8001760 <HAL_I2C_MspInit+0xf0>)
 80016da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016dc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016de:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <HAL_I2C_MspInit+0xe8>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001758 <HAL_I2C_MspInit+0xe8>)
 80016e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016e8:	61d3      	str	r3, [r2, #28]
 80016ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <HAL_I2C_MspInit+0xe8>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016f6:	e029      	b.n	800174c <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a19      	ldr	r2, [pc, #100]	@ (8001764 <HAL_I2C_MspInit+0xf4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d124      	bne.n	800174c <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_I2C_MspInit+0xe8>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a14      	ldr	r2, [pc, #80]	@ (8001758 <HAL_I2C_MspInit+0xe8>)
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_I2C_MspInit+0xe8>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800171a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001720:	2312      	movs	r3, #18
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	480b      	ldr	r0, [pc, #44]	@ (800175c <HAL_I2C_MspInit+0xec>)
 8001730:	f001 f984 	bl	8002a3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_I2C_MspInit+0xe8>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <HAL_I2C_MspInit+0xe8>)
 800173a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800173e:	61d3      	str	r3, [r2, #28]
 8001740:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <HAL_I2C_MspInit+0xe8>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	bf00      	nop
 800174e:	3730      	adds	r7, #48	@ 0x30
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40005400 	.word	0x40005400
 8001758:	40021000 	.word	0x40021000
 800175c:	40010c00 	.word	0x40010c00
 8001760:	40010000 	.word	0x40010000
 8001764:	40005800 	.word	0x40005800

08001768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1c      	ldr	r2, [pc, #112]	@ (80017f4 <HAL_SPI_MspInit+0x8c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d131      	bne.n	80017ec <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001788:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <HAL_SPI_MspInit+0x90>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	4a1a      	ldr	r2, [pc, #104]	@ (80017f8 <HAL_SPI_MspInit+0x90>)
 800178e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001792:	61d3      	str	r3, [r2, #28]
 8001794:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <HAL_SPI_MspInit+0x90>)
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a0:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_SPI_MspInit+0x90>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a14      	ldr	r2, [pc, #80]	@ (80017f8 <HAL_SPI_MspInit+0x90>)
 80017a6:	f043 0308 	orr.w	r3, r3, #8
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_SPI_MspInit+0x90>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	4619      	mov	r1, r3
 80017cc:	480b      	ldr	r0, [pc, #44]	@ (80017fc <HAL_SPI_MspInit+0x94>)
 80017ce:	f001 f935 	bl	8002a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	4619      	mov	r1, r3
 80017e6:	4805      	ldr	r0, [pc, #20]	@ (80017fc <HAL_SPI_MspInit+0x94>)
 80017e8:	f001 f928 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40003800 	.word	0x40003800
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010c00 	.word	0x40010c00

08001800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <NMI_Handler+0x4>

08001808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <MemManage_Handler+0x4>

08001818 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <UsageFault_Handler+0x4>

08001828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001850:	f000 fb7a 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800185c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001860:	f001 fa88 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <ITM_SendChar+0x44>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <ITM_SendChar+0x44>)
 8001878:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800187c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <ITM_SendChar+0x48>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a0b      	ldr	r2, [pc, #44]	@ (80018b0 <ITM_SendChar+0x48>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800188a:	bf00      	nop
 800188c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f8      	beq.n	800188c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800189a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	6013      	str	r3, [r2, #0]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	e000edfc 	.word	0xe000edfc
 80018b0:	e0000e00 	.word	0xe0000e00

080018b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <_kill>:

int _kill(int pid, int sig)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018cc:	f003 fe86 	bl	80055dc <__errno>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2216      	movs	r2, #22
 80018d4:	601a      	str	r2, [r3, #0]
  return -1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_exit>:

void _exit (int status)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ea:	f04f 31ff 	mov.w	r1, #4294967295
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffe7 	bl	80018c2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <_exit+0x12>

080018f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e00a      	b.n	8001920 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800190a:	f3af 8000 	nop.w
 800190e:	4601      	mov	r1, r0
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	60ba      	str	r2, [r7, #8]
 8001916:	b2ca      	uxtb	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbf0      	blt.n	800190a <_read+0x12>
  }

  return len;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e009      	b.n	8001958 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff8b 	bl	8001868 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf1      	blt.n	8001944 <_write+0x12>
  }
  return len;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_close>:

int _close(int file)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001990:	605a      	str	r2, [r3, #4]
  return 0;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <_isatty>:

int _isatty(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b085      	sub	sp, #20
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
	...

080019cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d4:	4a14      	ldr	r2, [pc, #80]	@ (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019fc:	f003 fdee 	bl	80055dc <__errno>
 8001a00:	4603      	mov	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a12:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a05      	ldr	r2, [pc, #20]	@ (8001a30 <_sbrk+0x64>)
 8001a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20005000 	.word	0x20005000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	20000330 	.word	0x20000330
 8001a34:	20000890 	.word	0x20000890

08001a38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a44:	f7ff fff8 	bl	8001a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a48:	480b      	ldr	r0, [pc, #44]	@ (8001a78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a4a:	490c      	ldr	r1, [pc, #48]	@ (8001a7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5e:	4a09      	ldr	r2, [pc, #36]	@ (8001a84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a60:	4c09      	ldr	r4, [pc, #36]	@ (8001a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f003 fdbb 	bl	80055e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a72:	f7ff fafd 	bl	8001070 <main>
  bx lr
 8001a76:	4770      	bx	lr
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a80:	08007790 	.word	0x08007790
  ldr r2, =_sbss
 8001a84:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a88:	2000088c 	.word	0x2000088c

08001a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC1_2_IRQHandler>

08001a8e <MCP4725_init>:

    Constructor
*/
/**************************************************************************/
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8001a8e:	b590      	push	{r4, r7, lr}
 8001a90:	b089      	sub	sp, #36	@ 0x24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	6839      	ldr	r1, [r7, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 f835 	bl	8001b20 <MCP4725_setReferenceVoltage>
	//printf("set ref voltage to 3.3\n");

	return _MCP4725;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	461c      	mov	r4, r3
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	3724      	adds	r7, #36	@ 0x24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}

08001acc <MCP4725_isConnected>:

    Check the connection
*/
/**************************************************************************/
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	//printf("mcp4725_is connectde ??\n");
	int x = HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, HAL_MAX_DELAY);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	791b      	ldrb	r3, [r3, #4]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f001 fca4 	bl	8003430 <HAL_I2C_IsDeviceReady>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60fb      	str	r3, [r7, #12]
	printf("hal i2c is  device ready == %d\n",x);
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	480b      	ldr	r0, [pc, #44]	@ (8001b1c <MCP4725_isConnected+0x50>)
 8001af0:	f003 fbda 	bl	80052a8 <iprintf>

	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	791b      	ldrb	r3, [r3, #4]
 8001afc:	4619      	mov	r1, r3
 8001afe:	2364      	movs	r3, #100	@ 0x64
 8001b00:	2202      	movs	r2, #2
 8001b02:	f001 fc95 	bl	8003430 <HAL_I2C_IsDeviceReady>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	080073b4 	.word	0x080073b4

08001b20 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	6838      	ldr	r0, [r7, #0]
 8001b30:	f7ff fa4c 	bl	8000fcc <__aeabi_fcmpeq>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <MCP4725_setReferenceVoltage+0x22>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b70 <MCP4725_setReferenceVoltage+0x50>)
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	e002      	b.n	8001b48 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f04f 408b 	mov.w	r0, #1166016512	@ 0x45800000
 8001b52:	f7ff f95b 	bl	8000e0c <__aeabi_fdiv>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fa69 	bl	8001030 <__aeabi_f2uiz>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	819a      	strh	r2, [r3, #12]
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40533333 	.word	0x40533333

08001b74 <MCP4725_setVoltage>:

    Set output voltage to a fraction of Vref
*/
/**************************************************************************/
uint8_t MCP4725_setVoltage(MCP4725* _MCP4725, float voltage, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	461a      	mov	r2, r3
 8001b82:	460b      	mov	r3, r1
 8001b84:	71fb      	strb	r3, [r7, #7]
 8001b86:	4613      	mov	r3, r2
 8001b88:	71bb      	strb	r3, [r7, #6]
  uint16_t value = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	82fb      	strh	r3, [r7, #22]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if      (voltage >= _MCP4725->_refVoltage) value = MCP4725_MAX_VALUE;      					 //make sure value never exceeds threshold
  else if (voltage <= 0)					           value = 0;
  else                            					 value = voltage * _MCP4725->_bitsPerVolt; //xx,xx,xx,xx,D11,D10,D9,D8 ,D7,D6,D4,D3,D2,D9,D1,D0
  #else
  value = voltage * _MCP4725->_bitsPerVolt;                                											 //xx,xx,xx,xx,D11,D10,D9,D8 ,D7,D6,D4,D3,D2,D9,D1,D0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	899b      	ldrh	r3, [r3, #12]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f832 	bl	8000bfc <__aeabi_i2f>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f881 	bl	8000ca4 <__aeabi_fmul>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fa43 	bl	8001030 <__aeabi_f2uiz>
 8001baa:	4603      	mov	r3, r0
 8001bac:	82fb      	strh	r3, [r7, #22]
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8001bae:	79bb      	ldrb	r3, [r7, #6]
 8001bb0:	79fa      	ldrb	r2, [r7, #7]
 8001bb2:	8af9      	ldrh	r1, [r7, #22]
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f805 	bl	8001bc4 <MCP4725_writeComand>
 8001bba:	4603      	mov	r3, r0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	4608      	mov	r0, r1
 8001bce:	4611      	mov	r1, r2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	807b      	strh	r3, [r7, #2]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	707b      	strb	r3, [r7, #1]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8001bde:	787b      	ldrb	r3, [r7, #1]
 8001be0:	2b60      	cmp	r3, #96	@ 0x60
 8001be2:	d028      	beq.n	8001c36 <MCP4725_writeComand+0x72>
 8001be4:	2b60      	cmp	r3, #96	@ 0x60
 8001be6:	dc4a      	bgt.n	8001c7e <MCP4725_writeComand+0xba>
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <MCP4725_writeComand+0x2e>
 8001bec:	2b40      	cmp	r3, #64	@ 0x40
 8001bee:	d022      	beq.n	8001c36 <MCP4725_writeComand+0x72>
 8001bf0:	e045      	b.n	8001c7e <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18

      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8001bf2:	783b      	ldrb	r3, [r7, #0]
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	b25a      	sxtb	r2, r3
 8001bf8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b25a      	sxtb	r2, r3
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	b25b      	sxtb	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b25b      	sxtb	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	737b      	strb	r3, [r7, #13]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	791b      	ldrb	r3, [r3, #4]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f107 020c 	add.w	r2, r7, #12
 8001c24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	f001 fa08 	bl	8003040 <HAL_I2C_Master_Transmit>
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]

      break;
 8001c34:	e023      	b.n	8001c7e <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8001c36:	887b      	ldrh	r3, [r7, #2]
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode  | (powerType << 1);
 8001c3c:	783b      	ldrb	r3, [r7, #0]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	b25a      	sxtb	r2, r3
 8001c42:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 8001c58:	887b      	ldrh	r3, [r7, #2]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	73bb      	strb	r3, [r7, #14]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	791b      	ldrb	r3, [r3, #4]
 8001c66:	4619      	mov	r1, r3
 8001c68:	f107 020c 	add.w	r2, r7, #12
 8001c6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2303      	movs	r3, #3
 8001c74:	f001 f9e4 	bl	8003040 <HAL_I2C_Master_Transmit>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]

			break;
 8001c7c:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MCP4725_writeComand+0xc4>
 8001c84:	2300      	movs	r3, #0
 8001c86:	e000      	b.n	8001c8a <MCP4725_writeComand+0xc6>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
  }
*/  //LATER ON EEEPRROM
  return 1;                                                         //success!!!
 8001c88:	2301      	movs	r3, #1
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
	...

08001ca0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af04      	add	r7, sp, #16
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	9302      	str	r3, [sp, #8]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	1dfb      	adds	r3, r7, #7
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2178      	movs	r1, #120	@ 0x78
 8001cbe:	4803      	ldr	r0, [pc, #12]	@ (8001ccc <ssd1306_WriteCommand+0x2c>)
 8001cc0:	f001 fabc 	bl	800323c <HAL_I2C_Mem_Write>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000220 	.word	0x20000220

08001cd0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af04      	add	r7, sp, #16
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce2:	9202      	str	r2, [sp, #8]
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2301      	movs	r3, #1
 8001cec:	2240      	movs	r2, #64	@ 0x40
 8001cee:	2178      	movs	r1, #120	@ 0x78
 8001cf0:	4803      	ldr	r0, [pc, #12]	@ (8001d00 <ssd1306_WriteData+0x30>)
 8001cf2:	f001 faa3 	bl	800323c <HAL_I2C_Mem_Write>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000220 	.word	0x20000220

08001d04 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001d08:	f7ff ffc3 	bl	8001c92 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001d0c:	2064      	movs	r0, #100	@ 0x64
 8001d0e:	f000 f937 	bl	8001f80 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001d12:	2000      	movs	r0, #0
 8001d14:	f000 f8b4 	bl	8001e80 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d18:	2020      	movs	r0, #32
 8001d1a:	f7ff ffc1 	bl	8001ca0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff ffbe 	bl	8001ca0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d24:	20b0      	movs	r0, #176	@ 0xb0
 8001d26:	f7ff ffbb 	bl	8001ca0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d2a:	20c8      	movs	r0, #200	@ 0xc8
 8001d2c:	f7ff ffb8 	bl	8001ca0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7ff ffb5 	bl	8001ca0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d36:	2010      	movs	r0, #16
 8001d38:	f7ff ffb2 	bl	8001ca0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d3c:	2040      	movs	r0, #64	@ 0x40
 8001d3e:	f7ff ffaf 	bl	8001ca0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d42:	20ff      	movs	r0, #255	@ 0xff
 8001d44:	f000 f888 	bl	8001e58 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d48:	20a1      	movs	r0, #161	@ 0xa1
 8001d4a:	f7ff ffa9 	bl	8001ca0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d4e:	20a6      	movs	r0, #166	@ 0xa6
 8001d50:	f7ff ffa6 	bl	8001ca0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d54:	20a8      	movs	r0, #168	@ 0xa8
 8001d56:	f7ff ffa3 	bl	8001ca0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001d5a:	203f      	movs	r0, #63	@ 0x3f
 8001d5c:	f7ff ffa0 	bl	8001ca0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d60:	20a4      	movs	r0, #164	@ 0xa4
 8001d62:	f7ff ff9d 	bl	8001ca0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d66:	20d3      	movs	r0, #211	@ 0xd3
 8001d68:	f7ff ff9a 	bl	8001ca0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff ff97 	bl	8001ca0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d72:	20d5      	movs	r0, #213	@ 0xd5
 8001d74:	f7ff ff94 	bl	8001ca0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d78:	20f0      	movs	r0, #240	@ 0xf0
 8001d7a:	f7ff ff91 	bl	8001ca0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001d7e:	20d9      	movs	r0, #217	@ 0xd9
 8001d80:	f7ff ff8e 	bl	8001ca0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001d84:	2022      	movs	r0, #34	@ 0x22
 8001d86:	f7ff ff8b 	bl	8001ca0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001d8a:	20da      	movs	r0, #218	@ 0xda
 8001d8c:	f7ff ff88 	bl	8001ca0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001d90:	2012      	movs	r0, #18
 8001d92:	f7ff ff85 	bl	8001ca0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001d96:	20db      	movs	r0, #219	@ 0xdb
 8001d98:	f7ff ff82 	bl	8001ca0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001d9c:	2020      	movs	r0, #32
 8001d9e:	f7ff ff7f 	bl	8001ca0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001da2:	208d      	movs	r0, #141	@ 0x8d
 8001da4:	f7ff ff7c 	bl	8001ca0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001da8:	2014      	movs	r0, #20
 8001daa:	f7ff ff79 	bl	8001ca0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001dae:	2001      	movs	r0, #1
 8001db0:	f000 f866 	bl	8001e80 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f000 f80f 	bl	8001dd8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001dba:	f000 f825 	bl	8001e08 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <ssd1306_Init+0xd0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <ssd1306_Init+0xd0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001dca:	4b02      	ldr	r3, [pc, #8]	@ (8001dd4 <ssd1306_Init+0xd0>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	711a      	strb	r2, [r3, #4]
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000734 	.word	0x20000734

08001dd8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <ssd1306_Fill+0x14>
 8001de8:	2300      	movs	r3, #0
 8001dea:	e000      	b.n	8001dee <ssd1306_Fill+0x16>
 8001dec:	23ff      	movs	r3, #255	@ 0xff
 8001dee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001df2:	4619      	mov	r1, r3
 8001df4:	4803      	ldr	r0, [pc, #12]	@ (8001e04 <ssd1306_Fill+0x2c>)
 8001df6:	f003 fb9f 	bl	8005538 <memset>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000334 	.word	0x20000334

08001e08 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e0e:	2300      	movs	r3, #0
 8001e10:	71fb      	strb	r3, [r7, #7]
 8001e12:	e016      	b.n	8001e42 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	3b50      	subs	r3, #80	@ 0x50
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff40 	bl	8001ca0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff ff3d 	bl	8001ca0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001e26:	2010      	movs	r0, #16
 8001e28:	f7ff ff3a 	bl	8001ca0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	01db      	lsls	r3, r3, #7
 8001e30:	4a08      	ldr	r2, [pc, #32]	@ (8001e54 <ssd1306_UpdateScreen+0x4c>)
 8001e32:	4413      	add	r3, r2
 8001e34:	2180      	movs	r1, #128	@ 0x80
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff4a 	bl	8001cd0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	71fb      	strb	r3, [r7, #7]
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b07      	cmp	r3, #7
 8001e46:	d9e5      	bls.n	8001e14 <ssd1306_UpdateScreen+0xc>
    }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000334 	.word	0x20000334

08001e58 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001e62:	2381      	movs	r3, #129	@ 0x81
 8001e64:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff19 	bl	8001ca0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff15 	bl	8001ca0 <ssd1306_WriteCommand>
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001e90:	23af      	movs	r3, #175	@ 0xaf
 8001e92:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001e94:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <ssd1306_SetDisplayOn+0x38>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	715a      	strb	r2, [r3, #5]
 8001e9a:	e004      	b.n	8001ea6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001e9c:	23ae      	movs	r3, #174	@ 0xae
 8001e9e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <ssd1306_SetDisplayOn+0x38>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fef9 	bl	8001ca0 <ssd1306_WriteCommand>
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000734 	.word	0x20000734

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec0:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <HAL_Init+0x28>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a07      	ldr	r2, [pc, #28]	@ (8001ee4 <HAL_Init+0x28>)
 8001ec6:	f043 0310 	orr.w	r3, r3, #16
 8001eca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 fd73 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 f808 	bl	8001ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed8:	f7ff fb5c 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40022000 	.word	0x40022000

08001ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_InitTick+0x54>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <HAL_InitTick+0x58>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fd8b 	bl	8002a22 <HAL_SYSTICK_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00e      	b.n	8001f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	d80a      	bhi.n	8001f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f000 fd53 	bl	80029ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f28:	4a06      	ldr	r2, [pc, #24]	@ (8001f44 <HAL_InitTick+0x5c>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000008 	.word	0x20000008
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_IncTick+0x1c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_IncTick+0x20>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a03      	ldr	r2, [pc, #12]	@ (8001f68 <HAL_IncTick+0x20>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	20000008 	.word	0x20000008
 8001f68:	2000073c 	.word	0x2000073c

08001f6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b02      	ldr	r3, [pc, #8]	@ (8001f7c <HAL_GetTick+0x10>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	2000073c 	.word	0x2000073c

08001f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff fff0 	bl	8001f6c <HAL_GetTick>
 8001f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d005      	beq.n	8001fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <HAL_Delay+0x44>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa6:	bf00      	nop
 8001fa8:	f7ff ffe0 	bl	8001f6c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d8f7      	bhi.n	8001fa8 <HAL_Delay+0x28>
  {
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000008 	.word	0x20000008

08001fc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0be      	b.n	8002168 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff faf6 	bl	80015f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 fbc5 	bl	800279c <ADC_ConversionStop_Disable>
 8002012:	4603      	mov	r3, r0
 8002014:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 8099 	bne.w	8002156 <HAL_ADC_Init+0x18e>
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 8095 	bne.w	8002156 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002034:	f023 0302 	bic.w	r3, r3, #2
 8002038:	f043 0202 	orr.w	r2, r3, #2
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002048:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7b1b      	ldrb	r3, [r3, #12]
 800204e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002050:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	4313      	orrs	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002060:	d003      	beq.n	800206a <HAL_ADC_Init+0xa2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_ADC_Init+0xa8>
 800206a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800206e:	e000      	b.n	8002072 <HAL_ADC_Init+0xaa>
 8002070:	2300      	movs	r3, #0
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7d1b      	ldrb	r3, [r3, #20]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d119      	bne.n	80020b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7b1b      	ldrb	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	3b01      	subs	r3, #1
 800208e:	035a      	lsls	r2, r3, #13
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	e00b      	b.n	80020b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <HAL_ADC_Init+0x1a8>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	430b      	orrs	r3, r1
 80020da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020e4:	d003      	beq.n	80020ee <HAL_ADC_Init+0x126>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d104      	bne.n	80020f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	051b      	lsls	r3, r3, #20
 80020f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	430a      	orrs	r2, r1
 800210a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <HAL_ADC_Init+0x1ac>)
 8002114:	4013      	ands	r3, r2
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	429a      	cmp	r2, r3
 800211a:	d10b      	bne.n	8002134 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002132:	e018      	b.n	8002166 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	f023 0312 	bic.w	r3, r3, #18
 800213c:	f043 0210 	orr.w	r2, r3, #16
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002148:	f043 0201 	orr.w	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002154:	e007      	b.n	8002166 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215a:	f043 0210 	orr.w	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002166:	7dfb      	ldrb	r3, [r7, #23]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	ffe1f7fd 	.word	0xffe1f7fd
 8002174:	ff1f0efe 	.word	0xff1f0efe

08002178 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_ADC_Start+0x1a>
 800218e:	2302      	movs	r3, #2
 8002190:	e098      	b.n	80022c4 <HAL_ADC_Start+0x14c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 faa4 	bl	80026e8 <ADC_Enable>
 80021a0:	4603      	mov	r3, r0
 80021a2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 8087 	bne.w	80022ba <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a41      	ldr	r2, [pc, #260]	@ (80022cc <HAL_ADC_Start+0x154>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d105      	bne.n	80021d6 <HAL_ADC_Start+0x5e>
 80021ca:	4b41      	ldr	r3, [pc, #260]	@ (80022d0 <HAL_ADC_Start+0x158>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d115      	bne.n	8002202 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d026      	beq.n	800223e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002200:	e01d      	b.n	800223e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002206:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2f      	ldr	r2, [pc, #188]	@ (80022d0 <HAL_ADC_Start+0x158>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_ADC_Start+0xaa>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2b      	ldr	r2, [pc, #172]	@ (80022cc <HAL_ADC_Start+0x154>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d10d      	bne.n	800223e <HAL_ADC_Start+0xc6>
 8002222:	4b2b      	ldr	r3, [pc, #172]	@ (80022d0 <HAL_ADC_Start+0x158>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002232:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002236:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002242:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	f023 0206 	bic.w	r2, r3, #6
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002256:	e002      	b.n	800225e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f06f 0202 	mvn.w	r2, #2
 800226e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800227a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800227e:	d113      	bne.n	80022a8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002284:	4a11      	ldr	r2, [pc, #68]	@ (80022cc <HAL_ADC_Start+0x154>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d105      	bne.n	8002296 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800228a:	4b11      	ldr	r3, [pc, #68]	@ (80022d0 <HAL_ADC_Start+0x158>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002292:	2b00      	cmp	r3, #0
 8002294:	d108      	bne.n	80022a8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	e00c      	b.n	80022c2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	e003      	b.n	80022c2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40012800 	.word	0x40012800
 80022d0:	40012400 	.word	0x40012400

080022d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80022ea:	f7ff fe3f 	bl	8001f6c <HAL_GetTick>
 80022ee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002302:	f043 0220 	orr.w	r2, r3, #32
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0d3      	b.n	80024be <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d131      	bne.n	8002388 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800232e:	2b00      	cmp	r3, #0
 8002330:	d12a      	bne.n	8002388 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002332:	e021      	b.n	8002378 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233a:	d01d      	beq.n	8002378 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_ADC_PollForConversion+0x7e>
 8002342:	f7ff fe13 	bl	8001f6c <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d212      	bcs.n	8002378 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	f043 0204 	orr.w	r2, r3, #4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0a2      	b.n	80024be <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0d6      	beq.n	8002334 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002386:	e070      	b.n	800246a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002388:	4b4f      	ldr	r3, [pc, #316]	@ (80024c8 <HAL_ADC_PollForConversion+0x1f4>)
 800238a:	681c      	ldr	r4, [r3, #0]
 800238c:	2002      	movs	r0, #2
 800238e:	f002 f933 	bl	80045f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002392:	4603      	mov	r3, r0
 8002394:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6919      	ldr	r1, [r3, #16]
 800239e:	4b4b      	ldr	r3, [pc, #300]	@ (80024cc <HAL_ADC_PollForConversion+0x1f8>)
 80023a0:	400b      	ands	r3, r1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d118      	bne.n	80023d8 <HAL_ADC_PollForConversion+0x104>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68d9      	ldr	r1, [r3, #12]
 80023ac:	4b48      	ldr	r3, [pc, #288]	@ (80024d0 <HAL_ADC_PollForConversion+0x1fc>)
 80023ae:	400b      	ands	r3, r1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d111      	bne.n	80023d8 <HAL_ADC_PollForConversion+0x104>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6919      	ldr	r1, [r3, #16]
 80023ba:	4b46      	ldr	r3, [pc, #280]	@ (80024d4 <HAL_ADC_PollForConversion+0x200>)
 80023bc:	400b      	ands	r3, r1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d108      	bne.n	80023d4 <HAL_ADC_PollForConversion+0x100>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68d9      	ldr	r1, [r3, #12]
 80023c8:	4b43      	ldr	r3, [pc, #268]	@ (80024d8 <HAL_ADC_PollForConversion+0x204>)
 80023ca:	400b      	ands	r3, r1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_PollForConversion+0x100>
 80023d0:	2314      	movs	r3, #20
 80023d2:	e020      	b.n	8002416 <HAL_ADC_PollForConversion+0x142>
 80023d4:	2329      	movs	r3, #41	@ 0x29
 80023d6:	e01e      	b.n	8002416 <HAL_ADC_PollForConversion+0x142>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6919      	ldr	r1, [r3, #16]
 80023de:	4b3d      	ldr	r3, [pc, #244]	@ (80024d4 <HAL_ADC_PollForConversion+0x200>)
 80023e0:	400b      	ands	r3, r1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_ADC_PollForConversion+0x120>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68d9      	ldr	r1, [r3, #12]
 80023ec:	4b3a      	ldr	r3, [pc, #232]	@ (80024d8 <HAL_ADC_PollForConversion+0x204>)
 80023ee:	400b      	ands	r3, r1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <HAL_ADC_PollForConversion+0x13c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6919      	ldr	r1, [r3, #16]
 80023fa:	4b38      	ldr	r3, [pc, #224]	@ (80024dc <HAL_ADC_PollForConversion+0x208>)
 80023fc:	400b      	ands	r3, r1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d108      	bne.n	8002414 <HAL_ADC_PollForConversion+0x140>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68d9      	ldr	r1, [r3, #12]
 8002408:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <HAL_ADC_PollForConversion+0x208>)
 800240a:	400b      	ands	r3, r1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_ADC_PollForConversion+0x140>
 8002410:	2354      	movs	r3, #84	@ 0x54
 8002412:	e000      	b.n	8002416 <HAL_ADC_PollForConversion+0x142>
 8002414:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800241c:	e021      	b.n	8002462 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d01a      	beq.n	800245c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_ADC_PollForConversion+0x168>
 800242c:	f7ff fd9e 	bl	8001f6c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d20f      	bcs.n	800245c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	429a      	cmp	r2, r3
 8002442:	d90b      	bls.n	800245c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	f043 0204 	orr.w	r2, r3, #4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e030      	b.n	80024be <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3301      	adds	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	429a      	cmp	r2, r3
 8002468:	d8d9      	bhi.n	800241e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f06f 0212 	mvn.w	r2, #18
 8002472:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800248a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800248e:	d115      	bne.n	80024bc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000000 	.word	0x20000000
 80024cc:	24924924 	.word	0x24924924
 80024d0:	00924924 	.word	0x00924924
 80024d4:	12492492 	.word	0x12492492
 80024d8:	00492492 	.word	0x00492492
 80024dc:	00249249 	.word	0x00249249

080024e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x20>
 8002514:	2302      	movs	r3, #2
 8002516:	e0dc      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x1da>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b06      	cmp	r3, #6
 8002526:	d81c      	bhi.n	8002562 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b05      	subs	r3, #5
 800253a:	221f      	movs	r2, #31
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	4019      	ands	r1, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	3b05      	subs	r3, #5
 8002554:	fa00 f203 	lsl.w	r2, r0, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002560:	e03c      	b.n	80025dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b0c      	cmp	r3, #12
 8002568:	d81c      	bhi.n	80025a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	3b23      	subs	r3, #35	@ 0x23
 800257c:	221f      	movs	r2, #31
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	4019      	ands	r1, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	3b23      	subs	r3, #35	@ 0x23
 8002596:	fa00 f203 	lsl.w	r2, r0, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80025a2:	e01b      	b.n	80025dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	3b41      	subs	r3, #65	@ 0x41
 80025b6:	221f      	movs	r2, #31
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	4019      	ands	r1, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3b41      	subs	r3, #65	@ 0x41
 80025d0:	fa00 f203 	lsl.w	r2, r0, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b09      	cmp	r3, #9
 80025e2:	d91c      	bls.n	800261e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68d9      	ldr	r1, [r3, #12]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	3b1e      	subs	r3, #30
 80025f6:	2207      	movs	r2, #7
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	4019      	ands	r1, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6898      	ldr	r0, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	3b1e      	subs	r3, #30
 8002610:	fa00 f203 	lsl.w	r2, r0, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	60da      	str	r2, [r3, #12]
 800261c:	e019      	b.n	8002652 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6919      	ldr	r1, [r3, #16]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	2207      	movs	r2, #7
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	4019      	ands	r1, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6898      	ldr	r0, [r3, #8]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	fa00 f203 	lsl.w	r2, r0, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b10      	cmp	r3, #16
 8002658:	d003      	beq.n	8002662 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800265e:	2b11      	cmp	r3, #17
 8002660:	d132      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1d      	ldr	r2, [pc, #116]	@ (80026dc <HAL_ADC_ConfigChannel+0x1e4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d125      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d126      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002688:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b10      	cmp	r3, #16
 8002690:	d11a      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002692:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a13      	ldr	r2, [pc, #76]	@ (80026e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002698:	fba2 2303 	umull	r2, r3, r2, r3
 800269c:	0c9a      	lsrs	r2, r3, #18
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026a8:	e002      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f9      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x1b2>
 80026b6:	e007      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	40012400 	.word	0x40012400
 80026e0:	20000000 	.word	0x20000000
 80026e4:	431bde83 	.word	0x431bde83

080026e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d040      	beq.n	8002788 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002716:	4b1f      	ldr	r3, [pc, #124]	@ (8002794 <ADC_Enable+0xac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1f      	ldr	r2, [pc, #124]	@ (8002798 <ADC_Enable+0xb0>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	0c9b      	lsrs	r3, r3, #18
 8002722:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002724:	e002      	b.n	800272c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3b01      	subs	r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f9      	bne.n	8002726 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002732:	f7ff fc1b 	bl	8001f6c <HAL_GetTick>
 8002736:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002738:	e01f      	b.n	800277a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800273a:	f7ff fc17 	bl	8001f6c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d918      	bls.n	800277a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d011      	beq.n	800277a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	f043 0210 	orr.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e007      	b.n	800278a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b01      	cmp	r3, #1
 8002786:	d1d8      	bne.n	800273a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000000 	.word	0x20000000
 8002798:	431bde83 	.word	0x431bde83

0800279c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d12e      	bne.n	8002814 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027c6:	f7ff fbd1 	bl	8001f6c <HAL_GetTick>
 80027ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027cc:	e01b      	b.n	8002806 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027ce:	f7ff fbcd 	bl	8001f6c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d914      	bls.n	8002806 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d10d      	bne.n	8002806 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ee:	f043 0210 	orr.w	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fa:	f043 0201 	orr.w	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e007      	b.n	8002816 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d0dc      	beq.n	80027ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002848:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800284c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	@ (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4906      	ldr	r1, [pc, #24]	@ (80028b8 <__NVIC_EnableIRQ+0x34>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100

080028bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	@ (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	@ (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	@ 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
         );
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	@ 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f7ff ff90 	bl	80028bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff2d 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e0:	f7ff ff42 	bl	8002868 <__NVIC_GetPriorityGrouping>
 80029e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f7ff ff90 	bl	8002910 <NVIC_EncodePriority>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff5f 	bl	80028bc <__NVIC_SetPriority>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff35 	bl	8002884 <__NVIC_EnableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffa2 	bl	8002974 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b08b      	sub	sp, #44	@ 0x2c
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4e:	e169      	b.n	8002d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a50:	2201      	movs	r2, #1
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f040 8158 	bne.w	8002d1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4a9a      	ldr	r2, [pc, #616]	@ (8002cdc <HAL_GPIO_Init+0x2a0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d05e      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a78:	4a98      	ldr	r2, [pc, #608]	@ (8002cdc <HAL_GPIO_Init+0x2a0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d875      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002a7e:	4a98      	ldr	r2, [pc, #608]	@ (8002ce0 <HAL_GPIO_Init+0x2a4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d058      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a84:	4a96      	ldr	r2, [pc, #600]	@ (8002ce0 <HAL_GPIO_Init+0x2a4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d86f      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002a8a:	4a96      	ldr	r2, [pc, #600]	@ (8002ce4 <HAL_GPIO_Init+0x2a8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d052      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a90:	4a94      	ldr	r2, [pc, #592]	@ (8002ce4 <HAL_GPIO_Init+0x2a8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d869      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002a96:	4a94      	ldr	r2, [pc, #592]	@ (8002ce8 <HAL_GPIO_Init+0x2ac>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d04c      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a9c:	4a92      	ldr	r2, [pc, #584]	@ (8002ce8 <HAL_GPIO_Init+0x2ac>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d863      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002aa2:	4a92      	ldr	r2, [pc, #584]	@ (8002cec <HAL_GPIO_Init+0x2b0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d046      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002aa8:	4a90      	ldr	r2, [pc, #576]	@ (8002cec <HAL_GPIO_Init+0x2b0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d85d      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002aae:	2b12      	cmp	r3, #18
 8002ab0:	d82a      	bhi.n	8002b08 <HAL_GPIO_Init+0xcc>
 8002ab2:	2b12      	cmp	r3, #18
 8002ab4:	d859      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8002abc <HAL_GPIO_Init+0x80>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002b37 	.word	0x08002b37
 8002ac0:	08002b11 	.word	0x08002b11
 8002ac4:	08002b23 	.word	0x08002b23
 8002ac8:	08002b65 	.word	0x08002b65
 8002acc:	08002b6b 	.word	0x08002b6b
 8002ad0:	08002b6b 	.word	0x08002b6b
 8002ad4:	08002b6b 	.word	0x08002b6b
 8002ad8:	08002b6b 	.word	0x08002b6b
 8002adc:	08002b6b 	.word	0x08002b6b
 8002ae0:	08002b6b 	.word	0x08002b6b
 8002ae4:	08002b6b 	.word	0x08002b6b
 8002ae8:	08002b6b 	.word	0x08002b6b
 8002aec:	08002b6b 	.word	0x08002b6b
 8002af0:	08002b6b 	.word	0x08002b6b
 8002af4:	08002b6b 	.word	0x08002b6b
 8002af8:	08002b6b 	.word	0x08002b6b
 8002afc:	08002b6b 	.word	0x08002b6b
 8002b00:	08002b19 	.word	0x08002b19
 8002b04:	08002b2d 	.word	0x08002b2d
 8002b08:	4a79      	ldr	r2, [pc, #484]	@ (8002cf0 <HAL_GPIO_Init+0x2b4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b0e:	e02c      	b.n	8002b6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	623b      	str	r3, [r7, #32]
          break;
 8002b16:	e029      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	623b      	str	r3, [r7, #32]
          break;
 8002b20:	e024      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	3308      	adds	r3, #8
 8002b28:	623b      	str	r3, [r7, #32]
          break;
 8002b2a:	e01f      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	330c      	adds	r3, #12
 8002b32:	623b      	str	r3, [r7, #32]
          break;
 8002b34:	e01a      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b3e:	2304      	movs	r3, #4
 8002b40:	623b      	str	r3, [r7, #32]
          break;
 8002b42:	e013      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	611a      	str	r2, [r3, #16]
          break;
 8002b56:	e009      	b.n	8002b6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b58:	2308      	movs	r3, #8
 8002b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	615a      	str	r2, [r3, #20]
          break;
 8002b62:	e003      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b64:	2300      	movs	r3, #0
 8002b66:	623b      	str	r3, [r7, #32]
          break;
 8002b68:	e000      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          break;
 8002b6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2bff      	cmp	r3, #255	@ 0xff
 8002b70:	d801      	bhi.n	8002b76 <HAL_GPIO_Init+0x13a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	e001      	b.n	8002b7a <HAL_GPIO_Init+0x13e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2bff      	cmp	r3, #255	@ 0xff
 8002b80:	d802      	bhi.n	8002b88 <HAL_GPIO_Init+0x14c>
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	e002      	b.n	8002b8e <HAL_GPIO_Init+0x152>
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	3b08      	subs	r3, #8
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	210f      	movs	r1, #15
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	6a39      	ldr	r1, [r7, #32]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80b1 	beq.w	8002d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bbc:	4b4d      	ldr	r3, [pc, #308]	@ (8002cf4 <HAL_GPIO_Init+0x2b8>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	4a4c      	ldr	r2, [pc, #304]	@ (8002cf4 <HAL_GPIO_Init+0x2b8>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6193      	str	r3, [r2, #24]
 8002bc8:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf4 <HAL_GPIO_Init+0x2b8>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bd4:	4a48      	ldr	r2, [pc, #288]	@ (8002cf8 <HAL_GPIO_Init+0x2bc>)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a40      	ldr	r2, [pc, #256]	@ (8002cfc <HAL_GPIO_Init+0x2c0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d013      	beq.n	8002c28 <HAL_GPIO_Init+0x1ec>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3f      	ldr	r2, [pc, #252]	@ (8002d00 <HAL_GPIO_Init+0x2c4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00d      	beq.n	8002c24 <HAL_GPIO_Init+0x1e8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002d04 <HAL_GPIO_Init+0x2c8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <HAL_GPIO_Init+0x1e4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a3d      	ldr	r2, [pc, #244]	@ (8002d08 <HAL_GPIO_Init+0x2cc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_GPIO_Init+0x1e0>
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e006      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	e004      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e002      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c2c:	f002 0203 	and.w	r2, r2, #3
 8002c30:	0092      	lsls	r2, r2, #2
 8002c32:	4093      	lsls	r3, r2
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c3a:	492f      	ldr	r1, [pc, #188]	@ (8002cf8 <HAL_GPIO_Init+0x2bc>)
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c54:	4b2d      	ldr	r3, [pc, #180]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	492c      	ldr	r1, [pc, #176]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]
 8002c60:	e006      	b.n	8002c70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c62:	4b2a      	ldr	r3, [pc, #168]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	4928      	ldr	r1, [pc, #160]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c7c:	4b23      	ldr	r3, [pc, #140]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	4922      	ldr	r1, [pc, #136]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c8a:	4b20      	ldr	r3, [pc, #128]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	491e      	ldr	r1, [pc, #120]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	4918      	ldr	r1, [pc, #96]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cb2:	4b16      	ldr	r3, [pc, #88]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	4914      	ldr	r1, [pc, #80]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d021      	beq.n	8002d10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	490e      	ldr	r1, [pc, #56]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
 8002cd8:	e021      	b.n	8002d1e <HAL_GPIO_Init+0x2e2>
 8002cda:	bf00      	nop
 8002cdc:	10320000 	.word	0x10320000
 8002ce0:	10310000 	.word	0x10310000
 8002ce4:	10220000 	.word	0x10220000
 8002ce8:	10210000 	.word	0x10210000
 8002cec:	10120000 	.word	0x10120000
 8002cf0:	10110000 	.word	0x10110000
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40010800 	.word	0x40010800
 8002d00:	40010c00 	.word	0x40010c00
 8002d04:	40011000 	.word	0x40011000
 8002d08:	40011400 	.word	0x40011400
 8002d0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <HAL_GPIO_Init+0x304>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	4909      	ldr	r1, [pc, #36]	@ (8002d40 <HAL_GPIO_Init+0x304>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	3301      	adds	r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f47f ae8e 	bne.w	8002a50 <HAL_GPIO_Init+0x14>
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	372c      	adds	r7, #44	@ 0x2c
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	40010400 	.word	0x40010400

08002d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
 8002d50:	4613      	mov	r3, r2
 8002d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d54:	787b      	ldrb	r3, [r7, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d60:	e003      	b.n	8002d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	041a      	lsls	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	611a      	str	r2, [r3, #16]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d7e:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d006      	beq.n	8002d98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d8a:	4a05      	ldr	r2, [pc, #20]	@ (8002da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f806 	bl	8002da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40010400 	.word	0x40010400

08002da4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e12b      	b.n	8003022 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fe fc46 	bl	8001670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	@ 0x24
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e1c:	f001 faf0 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8002e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4a81      	ldr	r2, [pc, #516]	@ (800302c <HAL_I2C_Init+0x274>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d807      	bhi.n	8002e3c <HAL_I2C_Init+0x84>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a80      	ldr	r2, [pc, #512]	@ (8003030 <HAL_I2C_Init+0x278>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	bf94      	ite	ls
 8002e34:	2301      	movls	r3, #1
 8002e36:	2300      	movhi	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e006      	b.n	8002e4a <HAL_I2C_Init+0x92>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a7d      	ldr	r2, [pc, #500]	@ (8003034 <HAL_I2C_Init+0x27c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	bf94      	ite	ls
 8002e44:	2301      	movls	r3, #1
 8002e46:	2300      	movhi	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e0e7      	b.n	8003022 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4a78      	ldr	r2, [pc, #480]	@ (8003038 <HAL_I2C_Init+0x280>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	0c9b      	lsrs	r3, r3, #18
 8002e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a6a      	ldr	r2, [pc, #424]	@ (800302c <HAL_I2C_Init+0x274>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d802      	bhi.n	8002e8c <HAL_I2C_Init+0xd4>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	e009      	b.n	8002ea0 <HAL_I2C_Init+0xe8>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	4a69      	ldr	r2, [pc, #420]	@ (800303c <HAL_I2C_Init+0x284>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	099b      	lsrs	r3, r3, #6
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002eb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	495c      	ldr	r1, [pc, #368]	@ (800302c <HAL_I2C_Init+0x274>)
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	d819      	bhi.n	8002ef4 <HAL_I2C_Init+0x13c>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e59      	subs	r1, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ece:	1c59      	adds	r1, r3, #1
 8002ed0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ed4:	400b      	ands	r3, r1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_I2C_Init+0x138>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1e59      	subs	r1, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eee:	e051      	b.n	8002f94 <HAL_I2C_Init+0x1dc>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	e04f      	b.n	8002f94 <HAL_I2C_Init+0x1dc>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d111      	bne.n	8002f20 <HAL_I2C_Init+0x168>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	440b      	add	r3, r1
 8002f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e012      	b.n	8002f46 <HAL_I2C_Init+0x18e>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	0099      	lsls	r1, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Init+0x196>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e022      	b.n	8002f94 <HAL_I2C_Init+0x1dc>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10e      	bne.n	8002f74 <HAL_I2C_Init+0x1bc>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1e58      	subs	r0, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	440b      	add	r3, r1
 8002f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f72:	e00f      	b.n	8002f94 <HAL_I2C_Init+0x1dc>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e58      	subs	r0, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	0099      	lsls	r1, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	6809      	ldr	r1, [r1, #0]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6911      	ldr	r1, [r2, #16]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68d2      	ldr	r2, [r2, #12]
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	000186a0 	.word	0x000186a0
 8003030:	001e847f 	.word	0x001e847f
 8003034:	003d08ff 	.word	0x003d08ff
 8003038:	431bde83 	.word	0x431bde83
 800303c:	10624dd3 	.word	0x10624dd3

08003040 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	461a      	mov	r2, r3
 800304c:	460b      	mov	r3, r1
 800304e:	817b      	strh	r3, [r7, #10]
 8003050:	4613      	mov	r3, r2
 8003052:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003054:	f7fe ff8a 	bl	8001f6c <HAL_GetTick>
 8003058:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b20      	cmp	r3, #32
 8003064:	f040 80e0 	bne.w	8003228 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2319      	movs	r3, #25
 800306e:	2201      	movs	r2, #1
 8003070:	4970      	ldr	r1, [pc, #448]	@ (8003234 <HAL_I2C_Master_Transmit+0x1f4>)
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fc22 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800307e:	2302      	movs	r3, #2
 8003080:	e0d3      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_I2C_Master_Transmit+0x50>
 800308c:	2302      	movs	r3, #2
 800308e:	e0cc      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d007      	beq.n	80030b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0201 	orr.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2221      	movs	r2, #33	@ 0x21
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2210      	movs	r2, #16
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	893a      	ldrh	r2, [r7, #8]
 80030e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4a50      	ldr	r2, [pc, #320]	@ (8003238 <HAL_I2C_Master_Transmit+0x1f8>)
 80030f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030f8:	8979      	ldrh	r1, [r7, #10]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	6a3a      	ldr	r2, [r7, #32]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fac4 	bl	800368c <I2C_MasterRequestWrite>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e08d      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003124:	e066      	b.n	80031f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	6a39      	ldr	r1, [r7, #32]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fce0 	bl	8003af0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00d      	beq.n	8003152 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	2b04      	cmp	r3, #4
 800313c:	d107      	bne.n	800314e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800314c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06b      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	781a      	ldrb	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b04      	cmp	r3, #4
 800318e:	d11b      	bne.n	80031c8 <HAL_I2C_Master_Transmit+0x188>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003194:	2b00      	cmp	r3, #0
 8003196:	d017      	beq.n	80031c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	6a39      	ldr	r1, [r7, #32]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 fcd7 	bl	8003b80 <I2C_WaitOnBTFFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00d      	beq.n	80031f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d107      	bne.n	80031f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e01a      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d194      	bne.n	8003126 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800320a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	00100002 	.word	0x00100002
 8003238:	ffff0000 	.word	0xffff0000

0800323c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	4608      	mov	r0, r1
 8003246:	4611      	mov	r1, r2
 8003248:	461a      	mov	r2, r3
 800324a:	4603      	mov	r3, r0
 800324c:	817b      	strh	r3, [r7, #10]
 800324e:	460b      	mov	r3, r1
 8003250:	813b      	strh	r3, [r7, #8]
 8003252:	4613      	mov	r3, r2
 8003254:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003256:	f7fe fe89 	bl	8001f6c <HAL_GetTick>
 800325a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b20      	cmp	r3, #32
 8003266:	f040 80d9 	bne.w	800341c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2319      	movs	r3, #25
 8003270:	2201      	movs	r2, #1
 8003272:	496d      	ldr	r1, [pc, #436]	@ (8003428 <HAL_I2C_Mem_Write+0x1ec>)
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fb21 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
 8003282:	e0cc      	b.n	800341e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_I2C_Mem_Write+0x56>
 800328e:	2302      	movs	r3, #2
 8003290:	e0c5      	b.n	800341e <HAL_I2C_Mem_Write+0x1e2>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d007      	beq.n	80032b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2221      	movs	r2, #33	@ 0x21
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2240      	movs	r2, #64	@ 0x40
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4a4d      	ldr	r2, [pc, #308]	@ (800342c <HAL_I2C_Mem_Write+0x1f0>)
 80032f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032fa:	88f8      	ldrh	r0, [r7, #6]
 80032fc:	893a      	ldrh	r2, [r7, #8]
 80032fe:	8979      	ldrh	r1, [r7, #10]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	4603      	mov	r3, r0
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fa40 	bl	8003790 <I2C_RequestMemoryWrite>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d052      	beq.n	80033bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e081      	b.n	800341e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fbe6 	bl	8003af0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00d      	beq.n	8003346 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	2b04      	cmp	r3, #4
 8003330:	d107      	bne.n	8003342 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003340:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e06b      	b.n	800341e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b04      	cmp	r3, #4
 8003382:	d11b      	bne.n	80033bc <HAL_I2C_Mem_Write+0x180>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003388:	2b00      	cmp	r3, #0
 800338a:	d017      	beq.n	80033bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	781a      	ldrb	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1aa      	bne.n	800331a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fbd9 	bl	8003b80 <I2C_WaitOnBTFFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00d      	beq.n	80033f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d107      	bne.n	80033ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e016      	b.n	800341e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	e000      	b.n	800341e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800341c:	2302      	movs	r3, #2
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	00100002 	.word	0x00100002
 800342c:	ffff0000 	.word	0xffff0000

08003430 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	@ 0x28
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	460b      	mov	r3, r1
 800343e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003440:	f7fe fd94 	bl	8001f6c <HAL_GetTick>
 8003444:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b20      	cmp	r3, #32
 8003454:	f040 8111 	bne.w	800367a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2319      	movs	r3, #25
 800345e:	2201      	movs	r2, #1
 8003460:	4988      	ldr	r1, [pc, #544]	@ (8003684 <HAL_I2C_IsDeviceReady+0x254>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fa2a 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
 8003470:	e104      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_I2C_IsDeviceReady+0x50>
 800347c:	2302      	movs	r3, #2
 800347e:	e0fd      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d007      	beq.n	80034a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0201 	orr.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2224      	movs	r2, #36	@ 0x24
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a70      	ldr	r2, [pc, #448]	@ (8003688 <HAL_I2C_IsDeviceReady+0x258>)
 80034c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f9e8 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00d      	beq.n	800350e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003500:	d103      	bne.n	800350a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003508:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0b6      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800350e:	897b      	ldrh	r3, [r7, #10]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800351c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800351e:	f7fe fd25 	bl	8001f6c <HAL_GetTick>
 8003522:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b02      	cmp	r3, #2
 8003530:	bf0c      	ite	eq
 8003532:	2301      	moveq	r3, #1
 8003534:	2300      	movne	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003548:	bf0c      	ite	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	2300      	movne	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003552:	e025      	b.n	80035a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003554:	f7fe fd0a 	bl	8001f6c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d302      	bcc.n	800356a <HAL_I2C_IsDeviceReady+0x13a>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d103      	bne.n	8003572 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	22a0      	movs	r2, #160	@ 0xa0
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b02      	cmp	r3, #2
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2ba0      	cmp	r3, #160	@ 0xa0
 80035aa:	d005      	beq.n	80035b8 <HAL_I2C_IsDeviceReady+0x188>
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <HAL_I2C_IsDeviceReady+0x188>
 80035b2:	7dbb      	ldrb	r3, [r7, #22]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0cd      	beq.n	8003554 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d129      	bne.n	8003622 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	2319      	movs	r3, #25
 80035fa:	2201      	movs	r2, #1
 80035fc:	4921      	ldr	r1, [pc, #132]	@ (8003684 <HAL_I2C_IsDeviceReady+0x254>)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f95c 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e036      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e02c      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003630:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800363a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2319      	movs	r3, #25
 8003642:	2201      	movs	r2, #1
 8003644:	490f      	ldr	r1, [pc, #60]	@ (8003684 <HAL_I2C_IsDeviceReady+0x254>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f938 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e012      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	3301      	adds	r3, #1
 800365a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	f4ff af32 	bcc.w	80034ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3720      	adds	r7, #32
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	00100002 	.word	0x00100002
 8003688:	ffff0000 	.word	0xffff0000

0800368c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	460b      	mov	r3, r1
 800369a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d006      	beq.n	80036b6 <I2C_MasterRequestWrite+0x2a>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d003      	beq.n	80036b6 <I2C_MasterRequestWrite+0x2a>
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036b4:	d108      	bne.n	80036c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e00b      	b.n	80036e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	2b12      	cmp	r3, #18
 80036ce:	d107      	bne.n	80036e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f8e5 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00d      	beq.n	8003714 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003706:	d103      	bne.n	8003710 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800370e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e035      	b.n	8003780 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800371c:	d108      	bne.n	8003730 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800371e:	897b      	ldrh	r3, [r7, #10]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	461a      	mov	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800372c:	611a      	str	r2, [r3, #16]
 800372e:	e01b      	b.n	8003768 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003730:	897b      	ldrh	r3, [r7, #10]
 8003732:	11db      	asrs	r3, r3, #7
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f003 0306 	and.w	r3, r3, #6
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f063 030f 	orn	r3, r3, #15
 8003740:	b2da      	uxtb	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	490e      	ldr	r1, [pc, #56]	@ (8003788 <I2C_MasterRequestWrite+0xfc>)
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f92e 	bl	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e010      	b.n	8003780 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800375e:	897b      	ldrh	r3, [r7, #10]
 8003760:	b2da      	uxtb	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	4907      	ldr	r1, [pc, #28]	@ (800378c <I2C_MasterRequestWrite+0x100>)
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f91e 	bl	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	00010008 	.word	0x00010008
 800378c:	00010002 	.word	0x00010002

08003790 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	4608      	mov	r0, r1
 800379a:	4611      	mov	r1, r2
 800379c:	461a      	mov	r2, r3
 800379e:	4603      	mov	r3, r0
 80037a0:	817b      	strh	r3, [r7, #10]
 80037a2:	460b      	mov	r3, r1
 80037a4:	813b      	strh	r3, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f878 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00d      	beq.n	80037ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e0:	d103      	bne.n	80037ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e05f      	b.n	80038ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	6a3a      	ldr	r2, [r7, #32]
 8003802:	492d      	ldr	r1, [pc, #180]	@ (80038b8 <I2C_RequestMemoryWrite+0x128>)
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f8d3 	bl	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e04c      	b.n	80038ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800382a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382c:	6a39      	ldr	r1, [r7, #32]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f95e 	bl	8003af0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	2b04      	cmp	r3, #4
 8003840:	d107      	bne.n	8003852 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003850:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e02b      	b.n	80038ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800385c:	893b      	ldrh	r3, [r7, #8]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	611a      	str	r2, [r3, #16]
 8003866:	e021      	b.n	80038ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003868:	893b      	ldrh	r3, [r7, #8]
 800386a:	0a1b      	lsrs	r3, r3, #8
 800386c:	b29b      	uxth	r3, r3
 800386e:	b2da      	uxtb	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003878:	6a39      	ldr	r1, [r7, #32]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f938 	bl	8003af0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00d      	beq.n	80038a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	2b04      	cmp	r3, #4
 800388c:	d107      	bne.n	800389e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800389c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e005      	b.n	80038ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038a2:	893b      	ldrh	r3, [r7, #8]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	00010002 	.word	0x00010002

080038bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038cc:	e048      	b.n	8003960 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d044      	beq.n	8003960 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d6:	f7fe fb49 	bl	8001f6c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d302      	bcc.n	80038ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d139      	bne.n	8003960 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	0c1b      	lsrs	r3, r3, #16
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d10d      	bne.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x56>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	43da      	mvns	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4013      	ands	r3, r2
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	e00c      	b.n	800392c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	43da      	mvns	r2, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4013      	ands	r3, r2
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	429a      	cmp	r2, r3
 8003930:	d116      	bne.n	8003960 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	f043 0220 	orr.w	r2, r3, #32
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e023      	b.n	80039a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d10d      	bne.n	8003986 <I2C_WaitOnFlagUntilTimeout+0xca>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	43da      	mvns	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4013      	ands	r3, r2
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	bf0c      	ite	eq
 800397c:	2301      	moveq	r3, #1
 800397e:	2300      	movne	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	e00c      	b.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	43da      	mvns	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	4013      	ands	r3, r2
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	bf0c      	ite	eq
 8003998:	2301      	moveq	r3, #1
 800399a:	2300      	movne	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d093      	beq.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039be:	e071      	b.n	8003aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ce:	d123      	bne.n	8003a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	f043 0204 	orr.w	r2, r3, #4
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e067      	b.n	8003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d041      	beq.n	8003aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a20:	f7fe faa4 	bl	8001f6c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d302      	bcc.n	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d136      	bne.n	8003aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d10c      	bne.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	43da      	mvns	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bf14      	ite	ne
 8003a52:	2301      	movne	r3, #1
 8003a54:	2300      	moveq	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	e00b      	b.n	8003a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	43da      	mvns	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	4013      	ands	r3, r2
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf14      	ite	ne
 8003a6c:	2301      	movne	r3, #1
 8003a6e:	2300      	moveq	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	f043 0220 	orr.w	r2, r3, #32
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e021      	b.n	8003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	0c1b      	lsrs	r3, r3, #16
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d10c      	bne.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e00b      	b.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f47f af6d 	bne.w	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003afc:	e034      	b.n	8003b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f886 	bl	8003c10 <I2C_IsAcknowledgeFailed>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e034      	b.n	8003b78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b14:	d028      	beq.n	8003b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b16:	f7fe fa29 	bl	8001f6c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d302      	bcc.n	8003b2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d11d      	bne.n	8003b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b36:	2b80      	cmp	r3, #128	@ 0x80
 8003b38:	d016      	beq.n	8003b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e007      	b.n	8003b78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b72:	2b80      	cmp	r3, #128	@ 0x80
 8003b74:	d1c3      	bne.n	8003afe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b8c:	e034      	b.n	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f83e 	bl	8003c10 <I2C_IsAcknowledgeFailed>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e034      	b.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d028      	beq.n	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba6:	f7fe f9e1 	bl	8001f6c <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d302      	bcc.n	8003bbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d11d      	bne.n	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d016      	beq.n	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e007      	b.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d1c3      	bne.n	8003b8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c26:	d11b      	bne.n	8003c60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	f043 0204 	orr.w	r2, r3, #4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e272      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 8087 	beq.w	8003d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c8c:	4b92      	ldr	r3, [pc, #584]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 030c 	and.w	r3, r3, #12
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d00c      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c98:	4b8f      	ldr	r3, [pc, #572]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d112      	bne.n	8003cca <HAL_RCC_OscConfig+0x5e>
 8003ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb0:	d10b      	bne.n	8003cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb2:	4b89      	ldr	r3, [pc, #548]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d06c      	beq.n	8003d98 <HAL_RCC_OscConfig+0x12c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d168      	bne.n	8003d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e24c      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd2:	d106      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x76>
 8003cd4:	4b80      	ldr	r3, [pc, #512]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a7f      	ldr	r2, [pc, #508]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	e02e      	b.n	8003d40 <HAL_RCC_OscConfig+0xd4>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x98>
 8003cea:	4b7b      	ldr	r3, [pc, #492]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a7a      	ldr	r2, [pc, #488]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	4b78      	ldr	r3, [pc, #480]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a77      	ldr	r2, [pc, #476]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	e01d      	b.n	8003d40 <HAL_RCC_OscConfig+0xd4>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0xbc>
 8003d0e:	4b72      	ldr	r3, [pc, #456]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a71      	ldr	r2, [pc, #452]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e00b      	b.n	8003d40 <HAL_RCC_OscConfig+0xd4>
 8003d28:	4b6b      	ldr	r3, [pc, #428]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	4b68      	ldr	r3, [pc, #416]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a67      	ldr	r2, [pc, #412]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d013      	beq.n	8003d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fe f910 	bl	8001f6c <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d50:	f7fe f90c 	bl	8001f6c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b64      	cmp	r3, #100	@ 0x64
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e200      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	4b5d      	ldr	r3, [pc, #372]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0xe4>
 8003d6e:	e014      	b.n	8003d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fe f8fc 	bl	8001f6c <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d78:	f7fe f8f8 	bl	8001f6c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	@ 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1ec      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	4b53      	ldr	r3, [pc, #332]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x10c>
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d063      	beq.n	8003e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003da6:	4b4c      	ldr	r3, [pc, #304]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003db2:	4b49      	ldr	r3, [pc, #292]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d11c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x18c>
 8003dbe:	4b46      	ldr	r3, [pc, #280]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d116      	bne.n	8003df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dca:	4b43      	ldr	r3, [pc, #268]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_RCC_OscConfig+0x176>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e1c0      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4939      	ldr	r1, [pc, #228]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df6:	e03a      	b.n	8003e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e00:	4b36      	ldr	r3, [pc, #216]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e06:	f7fe f8b1 	bl	8001f6c <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0e:	f7fe f8ad 	bl	8001f6c <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e1a1      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e20:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4927      	ldr	r1, [pc, #156]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	600b      	str	r3, [r1, #0]
 8003e40:	e015      	b.n	8003e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e42:	4b26      	ldr	r3, [pc, #152]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fe f890 	bl	8001f6c <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e50:	f7fe f88c 	bl	8001f6c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e180      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d03a      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d019      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e82:	4b17      	ldr	r3, [pc, #92]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e88:	f7fe f870 	bl	8001f6c <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e90:	f7fe f86c 	bl	8001f6c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e160      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003eae:	2001      	movs	r0, #1
 8003eb0:	f000 face 	bl	8004450 <RCC_Delay>
 8003eb4:	e01c      	b.n	8003ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebc:	f7fe f856 	bl	8001f6c <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec2:	e00f      	b.n	8003ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec4:	f7fe f852 	bl	8001f6c <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d908      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e146      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	42420000 	.word	0x42420000
 8003ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee4:	4b92      	ldr	r3, [pc, #584]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e9      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80a6 	beq.w	800404a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f02:	4b8b      	ldr	r3, [pc, #556]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10d      	bne.n	8003f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0e:	4b88      	ldr	r3, [pc, #544]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	4a87      	ldr	r2, [pc, #540]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f18:	61d3      	str	r3, [r2, #28]
 8003f1a:	4b85      	ldr	r3, [pc, #532]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f26:	2301      	movs	r3, #1
 8003f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2a:	4b82      	ldr	r3, [pc, #520]	@ (8004134 <HAL_RCC_OscConfig+0x4c8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d118      	bne.n	8003f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f36:	4b7f      	ldr	r3, [pc, #508]	@ (8004134 <HAL_RCC_OscConfig+0x4c8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004134 <HAL_RCC_OscConfig+0x4c8>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f42:	f7fe f813 	bl	8001f6c <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4a:	f7fe f80f 	bl	8001f6c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b64      	cmp	r3, #100	@ 0x64
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e103      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5c:	4b75      	ldr	r3, [pc, #468]	@ (8004134 <HAL_RCC_OscConfig+0x4c8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCC_OscConfig+0x312>
 8003f70:	4b6f      	ldr	r3, [pc, #444]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	4a6e      	ldr	r2, [pc, #440]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6213      	str	r3, [r2, #32]
 8003f7c:	e02d      	b.n	8003fda <HAL_RCC_OscConfig+0x36e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x334>
 8003f86:	4b6a      	ldr	r3, [pc, #424]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4a69      	ldr	r2, [pc, #420]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6213      	str	r3, [r2, #32]
 8003f92:	4b67      	ldr	r3, [pc, #412]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4a66      	ldr	r2, [pc, #408]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	6213      	str	r3, [r2, #32]
 8003f9e:	e01c      	b.n	8003fda <HAL_RCC_OscConfig+0x36e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	d10c      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x356>
 8003fa8:	4b61      	ldr	r3, [pc, #388]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	4a60      	ldr	r2, [pc, #384]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fae:	f043 0304 	orr.w	r3, r3, #4
 8003fb2:	6213      	str	r3, [r2, #32]
 8003fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	6213      	str	r3, [r2, #32]
 8003fc0:	e00b      	b.n	8003fda <HAL_RCC_OscConfig+0x36e>
 8003fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	4a5a      	ldr	r2, [pc, #360]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	6213      	str	r3, [r2, #32]
 8003fce:	4b58      	ldr	r3, [pc, #352]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	4a57      	ldr	r2, [pc, #348]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	f023 0304 	bic.w	r3, r3, #4
 8003fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d015      	beq.n	800400e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe2:	f7fd ffc3 	bl	8001f6c <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fd ffbf 	bl	8001f6c <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e0b1      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004000:	4b4b      	ldr	r3, [pc, #300]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ee      	beq.n	8003fea <HAL_RCC_OscConfig+0x37e>
 800400c:	e014      	b.n	8004038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400e:	f7fd ffad 	bl	8001f6c <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004014:	e00a      	b.n	800402c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004016:	f7fd ffa9 	bl	8001f6c <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004024:	4293      	cmp	r3, r2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e09b      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402c:	4b40      	ldr	r3, [pc, #256]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ee      	bne.n	8004016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d105      	bne.n	800404a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403e:	4b3c      	ldr	r3, [pc, #240]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	4a3b      	ldr	r2, [pc, #236]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8004044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8087 	beq.w	8004162 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004054:	4b36      	ldr	r3, [pc, #216]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b08      	cmp	r3, #8
 800405e:	d061      	beq.n	8004124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d146      	bne.n	80040f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004068:	4b33      	ldr	r3, [pc, #204]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406e:	f7fd ff7d 	bl	8001f6c <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004076:	f7fd ff79 	bl	8001f6c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e06d      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004088:	4b29      	ldr	r3, [pc, #164]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f0      	bne.n	8004076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800409c:	d108      	bne.n	80040b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800409e:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	4921      	ldr	r1, [pc, #132]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a19      	ldr	r1, [r3, #32]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	430b      	orrs	r3, r1
 80040c2:	491b      	ldr	r1, [pc, #108]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ce:	f7fd ff4d 	bl	8001f6c <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fd ff49 	bl	8001f6c <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e03d      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040e8:	4b11      	ldr	r3, [pc, #68]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x46a>
 80040f4:	e035      	b.n	8004162 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <HAL_RCC_OscConfig+0x4cc>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fd ff36 	bl	8001f6c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004104:	f7fd ff32 	bl	8001f6c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e026      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004116:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x498>
 8004122:	e01e      	b.n	8004162 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d107      	bne.n	800413c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e019      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
 8004130:	40021000 	.word	0x40021000
 8004134:	40007000 	.word	0x40007000
 8004138:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800413c:	4b0b      	ldr	r3, [pc, #44]	@ (800416c <HAL_RCC_OscConfig+0x500>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	429a      	cmp	r2, r3
 800414e:	d106      	bne.n	800415e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415a:	429a      	cmp	r2, r3
 800415c:	d001      	beq.n	8004162 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000

08004170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0d0      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004184:	4b6a      	ldr	r3, [pc, #424]	@ (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d910      	bls.n	80041b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b67      	ldr	r3, [pc, #412]	@ (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 0207 	bic.w	r2, r3, #7
 800419a:	4965      	ldr	r1, [pc, #404]	@ (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b63      	ldr	r3, [pc, #396]	@ (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0b8      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d020      	beq.n	8004202 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041cc:	4b59      	ldr	r3, [pc, #356]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a58      	ldr	r2, [pc, #352]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80041d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041e4:	4b53      	ldr	r3, [pc, #332]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4a52      	ldr	r2, [pc, #328]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80041ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80041ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f0:	4b50      	ldr	r3, [pc, #320]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	494d      	ldr	r1, [pc, #308]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d040      	beq.n	8004290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	4b47      	ldr	r3, [pc, #284]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d115      	bne.n	800424e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e07f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d107      	bne.n	800423e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422e:	4b41      	ldr	r3, [pc, #260]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e073      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423e:	4b3d      	ldr	r3, [pc, #244]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e06b      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800424e:	4b39      	ldr	r3, [pc, #228]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f023 0203 	bic.w	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4936      	ldr	r1, [pc, #216]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004260:	f7fd fe84 	bl	8001f6c <HAL_GetTick>
 8004264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004266:	e00a      	b.n	800427e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004268:	f7fd fe80 	bl	8001f6c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e053      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427e:	4b2d      	ldr	r3, [pc, #180]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 020c 	and.w	r2, r3, #12
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	429a      	cmp	r2, r3
 800428e:	d1eb      	bne.n	8004268 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004290:	4b27      	ldr	r3, [pc, #156]	@ (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d210      	bcs.n	80042c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b24      	ldr	r3, [pc, #144]	@ (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 0207 	bic.w	r2, r3, #7
 80042a6:	4922      	ldr	r1, [pc, #136]	@ (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b20      	ldr	r3, [pc, #128]	@ (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e032      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042cc:	4b19      	ldr	r3, [pc, #100]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4916      	ldr	r1, [pc, #88]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042ea:	4b12      	ldr	r3, [pc, #72]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	490e      	ldr	r1, [pc, #56]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042fe:	f000 f821 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 8004302:	4602      	mov	r2, r0
 8004304:	4b0b      	ldr	r3, [pc, #44]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	490a      	ldr	r1, [pc, #40]	@ (8004338 <HAL_RCC_ClockConfig+0x1c8>)
 8004310:	5ccb      	ldrb	r3, [r1, r3]
 8004312:	fa22 f303 	lsr.w	r3, r2, r3
 8004316:	4a09      	ldr	r2, [pc, #36]	@ (800433c <HAL_RCC_ClockConfig+0x1cc>)
 8004318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800431a:	4b09      	ldr	r3, [pc, #36]	@ (8004340 <HAL_RCC_ClockConfig+0x1d0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fd fde2 	bl	8001ee8 <HAL_InitTick>

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40022000 	.word	0x40022000
 8004334:	40021000 	.word	0x40021000
 8004338:	080073d4 	.word	0x080073d4
 800433c:	20000000 	.word	0x20000000
 8004340:	20000004 	.word	0x20000004

08004344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	2300      	movs	r3, #0
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	2300      	movs	r3, #0
 8004358:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800435e:	4b1e      	ldr	r3, [pc, #120]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b04      	cmp	r3, #4
 800436c:	d002      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0x30>
 800436e:	2b08      	cmp	r3, #8
 8004370:	d003      	beq.n	800437a <HAL_RCC_GetSysClockFreq+0x36>
 8004372:	e027      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004374:	4b19      	ldr	r3, [pc, #100]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x98>)
 8004376:	613b      	str	r3, [r7, #16]
      break;
 8004378:	e027      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	0c9b      	lsrs	r3, r3, #18
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	4a17      	ldr	r2, [pc, #92]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004384:	5cd3      	ldrb	r3, [r2, r3]
 8004386:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d010      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004392:	4b11      	ldr	r3, [pc, #68]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	0c5b      	lsrs	r3, r3, #17
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	4a11      	ldr	r2, [pc, #68]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800439e:	5cd3      	ldrb	r3, [r2, r3]
 80043a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a0d      	ldr	r2, [pc, #52]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x98>)
 80043a6:	fb03 f202 	mul.w	r2, r3, r2
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	e004      	b.n	80043be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a0c      	ldr	r2, [pc, #48]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043b8:	fb02 f303 	mul.w	r3, r2, r3
 80043bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	613b      	str	r3, [r7, #16]
      break;
 80043c2:	e002      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043c4:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x98>)
 80043c6:	613b      	str	r3, [r7, #16]
      break;
 80043c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ca:	693b      	ldr	r3, [r7, #16]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	007a1200 	.word	0x007a1200
 80043e0:	080073ec 	.word	0x080073ec
 80043e4:	080073fc 	.word	0x080073fc
 80043e8:	003d0900 	.word	0x003d0900

080043ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f0:	4b02      	ldr	r3, [pc, #8]	@ (80043fc <HAL_RCC_GetHCLKFreq+0x10>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr
 80043fc:	20000000 	.word	0x20000000

08004400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004404:	f7ff fff2 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4903      	ldr	r1, [pc, #12]	@ (8004424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40021000 	.word	0x40021000
 8004424:	080073e4 	.word	0x080073e4

08004428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800442c:	f7ff ffde 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004430:	4602      	mov	r2, r0
 8004432:	4b05      	ldr	r3, [pc, #20]	@ (8004448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	0adb      	lsrs	r3, r3, #11
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	4903      	ldr	r1, [pc, #12]	@ (800444c <HAL_RCC_GetPCLK2Freq+0x24>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000
 800444c:	080073e4 	.word	0x080073e4

08004450 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004458:	4b0a      	ldr	r3, [pc, #40]	@ (8004484 <RCC_Delay+0x34>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0a      	ldr	r2, [pc, #40]	@ (8004488 <RCC_Delay+0x38>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	0a5b      	lsrs	r3, r3, #9
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800446c:	bf00      	nop
  }
  while (Delay --);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1e5a      	subs	r2, r3, #1
 8004472:	60fa      	str	r2, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f9      	bne.n	800446c <RCC_Delay+0x1c>
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	20000000 	.word	0x20000000
 8004488:	10624dd3 	.word	0x10624dd3

0800448c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d07d      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044a8:	2300      	movs	r3, #0
 80044aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ac:	4b4f      	ldr	r3, [pc, #316]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10d      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b8:	4b4c      	ldr	r3, [pc, #304]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	4a4b      	ldr	r2, [pc, #300]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c2:	61d3      	str	r3, [r2, #28]
 80044c4:	4b49      	ldr	r3, [pc, #292]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d0:	2301      	movs	r3, #1
 80044d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	4b46      	ldr	r3, [pc, #280]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d118      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e0:	4b43      	ldr	r3, [pc, #268]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a42      	ldr	r2, [pc, #264]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ec:	f7fd fd3e 	bl	8001f6c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f2:	e008      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f4:	f7fd fd3a 	bl	8001f6c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	@ 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e06d      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004506:	4b3a      	ldr	r3, [pc, #232]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004512:	4b36      	ldr	r3, [pc, #216]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800451a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d02e      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	429a      	cmp	r2, r3
 800452e:	d027      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004530:	4b2e      	ldr	r3, [pc, #184]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004538:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800453a:	4b2e      	ldr	r3, [pc, #184]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004540:	4b2c      	ldr	r3, [pc, #176]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004546:	4a29      	ldr	r2, [pc, #164]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d014      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004556:	f7fd fd09 	bl	8001f6c <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455c:	e00a      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455e:	f7fd fd05 	bl	8001f6c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e036      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004574:	4b1d      	ldr	r3, [pc, #116]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ee      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004580:	4b1a      	ldr	r3, [pc, #104]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4917      	ldr	r1, [pc, #92]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458e:	4313      	orrs	r3, r2
 8004590:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d105      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004598:	4b14      	ldr	r3, [pc, #80]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	4a13      	ldr	r2, [pc, #76]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045b0:	4b0e      	ldr	r3, [pc, #56]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	490b      	ldr	r1, [pc, #44]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ce:	4b07      	ldr	r3, [pc, #28]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	4904      	ldr	r1, [pc, #16]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40007000 	.word	0x40007000
 80045f4:	42420440 	.word	0x42420440

080045f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	2300      	movs	r3, #0
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	2300      	movs	r3, #0
 800460a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	2300      	movs	r3, #0
 8004612:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b10      	cmp	r3, #16
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b10      	cmp	r3, #16
 800461e:	f200 808a 	bhi.w	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d045      	beq.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d075      	beq.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800462e:	e082      	b.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004630:	4b46      	ldr	r3, [pc, #280]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004636:	4b45      	ldr	r3, [pc, #276]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d07b      	beq.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	0c9b      	lsrs	r3, r3, #18
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	4a41      	ldr	r2, [pc, #260]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800464c:	5cd3      	ldrb	r3, [r2, r3]
 800464e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d015      	beq.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800465a:	4b3c      	ldr	r3, [pc, #240]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	0c5b      	lsrs	r3, r3, #17
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	4a3b      	ldr	r2, [pc, #236]	@ (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004674:	4a38      	ldr	r2, [pc, #224]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	fbb2 f2f3 	udiv	r2, r2, r3
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	fb02 f303 	mul.w	r3, r2, r3
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	e004      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4a34      	ldr	r2, [pc, #208]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004690:	4b2e      	ldr	r3, [pc, #184]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800469c:	d102      	bne.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	61bb      	str	r3, [r7, #24]
      break;
 80046a2:	e04a      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	61bb      	str	r3, [r7, #24]
      break;
 80046b2:	e042      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80046b4:	4b25      	ldr	r3, [pc, #148]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c4:	d108      	bne.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80046d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	e01f      	b.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e2:	d109      	bne.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80046e4:	4b19      	ldr	r3, [pc, #100]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80046f0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	e00f      	b.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004702:	d11c      	bne.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004704:	4b11      	ldr	r3, [pc, #68]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d016      	beq.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004710:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004714:	61bb      	str	r3, [r7, #24]
      break;
 8004716:	e012      	b.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004718:	e011      	b.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800471a:	f7ff fe85 	bl	8004428 <HAL_RCC_GetPCLK2Freq>
 800471e:	4602      	mov	r2, r0
 8004720:	4b0a      	ldr	r3, [pc, #40]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	0b9b      	lsrs	r3, r3, #14
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	3301      	adds	r3, #1
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	61bb      	str	r3, [r7, #24]
      break;
 8004734:	e004      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004736:	bf00      	nop
 8004738:	e002      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800473e:	bf00      	nop
    }
  }
  return (frequency);
 8004740:	69bb      	ldr	r3, [r7, #24]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000
 8004750:	08007400 	.word	0x08007400
 8004754:	08007410 	.word	0x08007410
 8004758:	007a1200 	.word	0x007a1200
 800475c:	003d0900 	.word	0x003d0900
 8004760:	aaaaaaab 	.word	0xaaaaaaab

08004764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e076      	b.n	8004864 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	2b00      	cmp	r3, #0
 800477c:	d108      	bne.n	8004790 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004786:	d009      	beq.n	800479c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	61da      	str	r2, [r3, #28]
 800478e:	e005      	b.n	800479c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fc ffd6 	bl	8001768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004820:	ea42 0103 	orr.w	r1, r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004828:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	0c1a      	lsrs	r2, r3, #16
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f002 0204 	and.w	r2, r2, #4
 8004842:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69da      	ldr	r2, [r3, #28]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004852:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <__cvt>:
 800486c:	2b00      	cmp	r3, #0
 800486e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004872:	461d      	mov	r5, r3
 8004874:	bfbb      	ittet	lt
 8004876:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800487a:	461d      	movlt	r5, r3
 800487c:	2300      	movge	r3, #0
 800487e:	232d      	movlt	r3, #45	@ 0x2d
 8004880:	b088      	sub	sp, #32
 8004882:	4614      	mov	r4, r2
 8004884:	bfb8      	it	lt
 8004886:	4614      	movlt	r4, r2
 8004888:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800488a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800488c:	7013      	strb	r3, [r2, #0]
 800488e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004890:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004894:	f023 0820 	bic.w	r8, r3, #32
 8004898:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800489c:	d005      	beq.n	80048aa <__cvt+0x3e>
 800489e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80048a2:	d100      	bne.n	80048a6 <__cvt+0x3a>
 80048a4:	3601      	adds	r6, #1
 80048a6:	2302      	movs	r3, #2
 80048a8:	e000      	b.n	80048ac <__cvt+0x40>
 80048aa:	2303      	movs	r3, #3
 80048ac:	aa07      	add	r2, sp, #28
 80048ae:	9204      	str	r2, [sp, #16]
 80048b0:	aa06      	add	r2, sp, #24
 80048b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048b6:	e9cd 3600 	strd	r3, r6, [sp]
 80048ba:	4622      	mov	r2, r4
 80048bc:	462b      	mov	r3, r5
 80048be:	f000 ff5f 	bl	8005780 <_dtoa_r>
 80048c2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80048c6:	4607      	mov	r7, r0
 80048c8:	d119      	bne.n	80048fe <__cvt+0x92>
 80048ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80048cc:	07db      	lsls	r3, r3, #31
 80048ce:	d50e      	bpl.n	80048ee <__cvt+0x82>
 80048d0:	eb00 0906 	add.w	r9, r0, r6
 80048d4:	2200      	movs	r2, #0
 80048d6:	2300      	movs	r3, #0
 80048d8:	4620      	mov	r0, r4
 80048da:	4629      	mov	r1, r5
 80048dc:	f7fc f864 	bl	80009a8 <__aeabi_dcmpeq>
 80048e0:	b108      	cbz	r0, 80048e6 <__cvt+0x7a>
 80048e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80048e6:	2230      	movs	r2, #48	@ 0x30
 80048e8:	9b07      	ldr	r3, [sp, #28]
 80048ea:	454b      	cmp	r3, r9
 80048ec:	d31e      	bcc.n	800492c <__cvt+0xc0>
 80048ee:	4638      	mov	r0, r7
 80048f0:	9b07      	ldr	r3, [sp, #28]
 80048f2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80048f4:	1bdb      	subs	r3, r3, r7
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	b008      	add	sp, #32
 80048fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004902:	eb00 0906 	add.w	r9, r0, r6
 8004906:	d1e5      	bne.n	80048d4 <__cvt+0x68>
 8004908:	7803      	ldrb	r3, [r0, #0]
 800490a:	2b30      	cmp	r3, #48	@ 0x30
 800490c:	d10a      	bne.n	8004924 <__cvt+0xb8>
 800490e:	2200      	movs	r2, #0
 8004910:	2300      	movs	r3, #0
 8004912:	4620      	mov	r0, r4
 8004914:	4629      	mov	r1, r5
 8004916:	f7fc f847 	bl	80009a8 <__aeabi_dcmpeq>
 800491a:	b918      	cbnz	r0, 8004924 <__cvt+0xb8>
 800491c:	f1c6 0601 	rsb	r6, r6, #1
 8004920:	f8ca 6000 	str.w	r6, [sl]
 8004924:	f8da 3000 	ldr.w	r3, [sl]
 8004928:	4499      	add	r9, r3
 800492a:	e7d3      	b.n	80048d4 <__cvt+0x68>
 800492c:	1c59      	adds	r1, r3, #1
 800492e:	9107      	str	r1, [sp, #28]
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	e7d9      	b.n	80048e8 <__cvt+0x7c>

08004934 <__exponent>:
 8004934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004936:	2900      	cmp	r1, #0
 8004938:	bfb6      	itet	lt
 800493a:	232d      	movlt	r3, #45	@ 0x2d
 800493c:	232b      	movge	r3, #43	@ 0x2b
 800493e:	4249      	neglt	r1, r1
 8004940:	2909      	cmp	r1, #9
 8004942:	7002      	strb	r2, [r0, #0]
 8004944:	7043      	strb	r3, [r0, #1]
 8004946:	dd29      	ble.n	800499c <__exponent+0x68>
 8004948:	f10d 0307 	add.w	r3, sp, #7
 800494c:	461d      	mov	r5, r3
 800494e:	270a      	movs	r7, #10
 8004950:	fbb1 f6f7 	udiv	r6, r1, r7
 8004954:	461a      	mov	r2, r3
 8004956:	fb07 1416 	mls	r4, r7, r6, r1
 800495a:	3430      	adds	r4, #48	@ 0x30
 800495c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004960:	460c      	mov	r4, r1
 8004962:	2c63      	cmp	r4, #99	@ 0x63
 8004964:	4631      	mov	r1, r6
 8004966:	f103 33ff 	add.w	r3, r3, #4294967295
 800496a:	dcf1      	bgt.n	8004950 <__exponent+0x1c>
 800496c:	3130      	adds	r1, #48	@ 0x30
 800496e:	1e94      	subs	r4, r2, #2
 8004970:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004974:	4623      	mov	r3, r4
 8004976:	1c41      	adds	r1, r0, #1
 8004978:	42ab      	cmp	r3, r5
 800497a:	d30a      	bcc.n	8004992 <__exponent+0x5e>
 800497c:	f10d 0309 	add.w	r3, sp, #9
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	42ac      	cmp	r4, r5
 8004984:	bf88      	it	hi
 8004986:	2300      	movhi	r3, #0
 8004988:	3302      	adds	r3, #2
 800498a:	4403      	add	r3, r0
 800498c:	1a18      	subs	r0, r3, r0
 800498e:	b003      	add	sp, #12
 8004990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004992:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004996:	f801 6f01 	strb.w	r6, [r1, #1]!
 800499a:	e7ed      	b.n	8004978 <__exponent+0x44>
 800499c:	2330      	movs	r3, #48	@ 0x30
 800499e:	3130      	adds	r1, #48	@ 0x30
 80049a0:	7083      	strb	r3, [r0, #2]
 80049a2:	70c1      	strb	r1, [r0, #3]
 80049a4:	1d03      	adds	r3, r0, #4
 80049a6:	e7f1      	b.n	800498c <__exponent+0x58>

080049a8 <_printf_float>:
 80049a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ac:	b091      	sub	sp, #68	@ 0x44
 80049ae:	460c      	mov	r4, r1
 80049b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80049b4:	4616      	mov	r6, r2
 80049b6:	461f      	mov	r7, r3
 80049b8:	4605      	mov	r5, r0
 80049ba:	f000 fdc5 	bl	8005548 <_localeconv_r>
 80049be:	6803      	ldr	r3, [r0, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	9308      	str	r3, [sp, #32]
 80049c4:	f7fb fbc4 	bl	8000150 <strlen>
 80049c8:	2300      	movs	r3, #0
 80049ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80049cc:	f8d8 3000 	ldr.w	r3, [r8]
 80049d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80049d2:	3307      	adds	r3, #7
 80049d4:	f023 0307 	bic.w	r3, r3, #7
 80049d8:	f103 0208 	add.w	r2, r3, #8
 80049dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80049e0:	f8d4 b000 	ldr.w	fp, [r4]
 80049e4:	f8c8 2000 	str.w	r2, [r8]
 80049e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80049f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049f2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80049f6:	f04f 32ff 	mov.w	r2, #4294967295
 80049fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80049fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004a02:	4b9c      	ldr	r3, [pc, #624]	@ (8004c74 <_printf_float+0x2cc>)
 8004a04:	f7fc f802 	bl	8000a0c <__aeabi_dcmpun>
 8004a08:	bb70      	cbnz	r0, 8004a68 <_printf_float+0xc0>
 8004a0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a12:	4b98      	ldr	r3, [pc, #608]	@ (8004c74 <_printf_float+0x2cc>)
 8004a14:	f7fb ffdc 	bl	80009d0 <__aeabi_dcmple>
 8004a18:	bb30      	cbnz	r0, 8004a68 <_printf_float+0xc0>
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4640      	mov	r0, r8
 8004a20:	4649      	mov	r1, r9
 8004a22:	f7fb ffcb 	bl	80009bc <__aeabi_dcmplt>
 8004a26:	b110      	cbz	r0, 8004a2e <_printf_float+0x86>
 8004a28:	232d      	movs	r3, #45	@ 0x2d
 8004a2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a2e:	4a92      	ldr	r2, [pc, #584]	@ (8004c78 <_printf_float+0x2d0>)
 8004a30:	4b92      	ldr	r3, [pc, #584]	@ (8004c7c <_printf_float+0x2d4>)
 8004a32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a36:	bf94      	ite	ls
 8004a38:	4690      	movls	r8, r2
 8004a3a:	4698      	movhi	r8, r3
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	f04f 0900 	mov.w	r9, #0
 8004a42:	6123      	str	r3, [r4, #16]
 8004a44:	f02b 0304 	bic.w	r3, fp, #4
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	4633      	mov	r3, r6
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4628      	mov	r0, r5
 8004a50:	9700      	str	r7, [sp, #0]
 8004a52:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004a54:	f000 f9d4 	bl	8004e00 <_printf_common>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	f040 8090 	bne.w	8004b7e <_printf_float+0x1d6>
 8004a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a62:	b011      	add	sp, #68	@ 0x44
 8004a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a68:	4642      	mov	r2, r8
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	4649      	mov	r1, r9
 8004a70:	f7fb ffcc 	bl	8000a0c <__aeabi_dcmpun>
 8004a74:	b148      	cbz	r0, 8004a8a <_printf_float+0xe2>
 8004a76:	464b      	mov	r3, r9
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bfb8      	it	lt
 8004a7c:	232d      	movlt	r3, #45	@ 0x2d
 8004a7e:	4a80      	ldr	r2, [pc, #512]	@ (8004c80 <_printf_float+0x2d8>)
 8004a80:	bfb8      	it	lt
 8004a82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004a86:	4b7f      	ldr	r3, [pc, #508]	@ (8004c84 <_printf_float+0x2dc>)
 8004a88:	e7d3      	b.n	8004a32 <_printf_float+0x8a>
 8004a8a:	6863      	ldr	r3, [r4, #4]
 8004a8c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	d13f      	bne.n	8004b14 <_printf_float+0x16c>
 8004a94:	2306      	movs	r3, #6
 8004a96:	6063      	str	r3, [r4, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004a9e:	6023      	str	r3, [r4, #0]
 8004aa0:	9206      	str	r2, [sp, #24]
 8004aa2:	aa0e      	add	r2, sp, #56	@ 0x38
 8004aa4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004aa8:	aa0d      	add	r2, sp, #52	@ 0x34
 8004aaa:	9203      	str	r2, [sp, #12]
 8004aac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004ab0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ab4:	6863      	ldr	r3, [r4, #4]
 8004ab6:	4642      	mov	r2, r8
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4628      	mov	r0, r5
 8004abc:	464b      	mov	r3, r9
 8004abe:	910a      	str	r1, [sp, #40]	@ 0x28
 8004ac0:	f7ff fed4 	bl	800486c <__cvt>
 8004ac4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ac6:	4680      	mov	r8, r0
 8004ac8:	2947      	cmp	r1, #71	@ 0x47
 8004aca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004acc:	d128      	bne.n	8004b20 <_printf_float+0x178>
 8004ace:	1cc8      	adds	r0, r1, #3
 8004ad0:	db02      	blt.n	8004ad8 <_printf_float+0x130>
 8004ad2:	6863      	ldr	r3, [r4, #4]
 8004ad4:	4299      	cmp	r1, r3
 8004ad6:	dd40      	ble.n	8004b5a <_printf_float+0x1b2>
 8004ad8:	f1aa 0a02 	sub.w	sl, sl, #2
 8004adc:	fa5f fa8a 	uxtb.w	sl, sl
 8004ae0:	4652      	mov	r2, sl
 8004ae2:	3901      	subs	r1, #1
 8004ae4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ae8:	910d      	str	r1, [sp, #52]	@ 0x34
 8004aea:	f7ff ff23 	bl	8004934 <__exponent>
 8004aee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004af0:	4681      	mov	r9, r0
 8004af2:	1813      	adds	r3, r2, r0
 8004af4:	2a01      	cmp	r2, #1
 8004af6:	6123      	str	r3, [r4, #16]
 8004af8:	dc02      	bgt.n	8004b00 <_printf_float+0x158>
 8004afa:	6822      	ldr	r2, [r4, #0]
 8004afc:	07d2      	lsls	r2, r2, #31
 8004afe:	d501      	bpl.n	8004b04 <_printf_float+0x15c>
 8004b00:	3301      	adds	r3, #1
 8004b02:	6123      	str	r3, [r4, #16]
 8004b04:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d09e      	beq.n	8004a4a <_printf_float+0xa2>
 8004b0c:	232d      	movs	r3, #45	@ 0x2d
 8004b0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b12:	e79a      	b.n	8004a4a <_printf_float+0xa2>
 8004b14:	2947      	cmp	r1, #71	@ 0x47
 8004b16:	d1bf      	bne.n	8004a98 <_printf_float+0xf0>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1bd      	bne.n	8004a98 <_printf_float+0xf0>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e7ba      	b.n	8004a96 <_printf_float+0xee>
 8004b20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b24:	d9dc      	bls.n	8004ae0 <_printf_float+0x138>
 8004b26:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b2a:	d118      	bne.n	8004b5e <_printf_float+0x1b6>
 8004b2c:	2900      	cmp	r1, #0
 8004b2e:	6863      	ldr	r3, [r4, #4]
 8004b30:	dd0b      	ble.n	8004b4a <_printf_float+0x1a2>
 8004b32:	6121      	str	r1, [r4, #16]
 8004b34:	b913      	cbnz	r3, 8004b3c <_printf_float+0x194>
 8004b36:	6822      	ldr	r2, [r4, #0]
 8004b38:	07d0      	lsls	r0, r2, #31
 8004b3a:	d502      	bpl.n	8004b42 <_printf_float+0x19a>
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	440b      	add	r3, r1
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	f04f 0900 	mov.w	r9, #0
 8004b46:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b48:	e7dc      	b.n	8004b04 <_printf_float+0x15c>
 8004b4a:	b913      	cbnz	r3, 8004b52 <_printf_float+0x1aa>
 8004b4c:	6822      	ldr	r2, [r4, #0]
 8004b4e:	07d2      	lsls	r2, r2, #31
 8004b50:	d501      	bpl.n	8004b56 <_printf_float+0x1ae>
 8004b52:	3302      	adds	r3, #2
 8004b54:	e7f4      	b.n	8004b40 <_printf_float+0x198>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e7f2      	b.n	8004b40 <_printf_float+0x198>
 8004b5a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b60:	4299      	cmp	r1, r3
 8004b62:	db05      	blt.n	8004b70 <_printf_float+0x1c8>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	6121      	str	r1, [r4, #16]
 8004b68:	07d8      	lsls	r0, r3, #31
 8004b6a:	d5ea      	bpl.n	8004b42 <_printf_float+0x19a>
 8004b6c:	1c4b      	adds	r3, r1, #1
 8004b6e:	e7e7      	b.n	8004b40 <_printf_float+0x198>
 8004b70:	2900      	cmp	r1, #0
 8004b72:	bfcc      	ite	gt
 8004b74:	2201      	movgt	r2, #1
 8004b76:	f1c1 0202 	rsble	r2, r1, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	e7e0      	b.n	8004b40 <_printf_float+0x198>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	055a      	lsls	r2, r3, #21
 8004b82:	d407      	bmi.n	8004b94 <_printf_float+0x1ec>
 8004b84:	6923      	ldr	r3, [r4, #16]
 8004b86:	4642      	mov	r2, r8
 8004b88:	4631      	mov	r1, r6
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	47b8      	blx	r7
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d12b      	bne.n	8004bea <_printf_float+0x242>
 8004b92:	e764      	b.n	8004a5e <_printf_float+0xb6>
 8004b94:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b98:	f240 80dc 	bls.w	8004d54 <_printf_float+0x3ac>
 8004b9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f7fb ff00 	bl	80009a8 <__aeabi_dcmpeq>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d033      	beq.n	8004c14 <_printf_float+0x26c>
 8004bac:	2301      	movs	r3, #1
 8004bae:	4631      	mov	r1, r6
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	4a35      	ldr	r2, [pc, #212]	@ (8004c88 <_printf_float+0x2e0>)
 8004bb4:	47b8      	blx	r7
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	f43f af51 	beq.w	8004a5e <_printf_float+0xb6>
 8004bbc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004bc0:	4543      	cmp	r3, r8
 8004bc2:	db02      	blt.n	8004bca <_printf_float+0x222>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	07d8      	lsls	r0, r3, #31
 8004bc8:	d50f      	bpl.n	8004bea <_printf_float+0x242>
 8004bca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	47b8      	blx	r7
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	f43f af42 	beq.w	8004a5e <_printf_float+0xb6>
 8004bda:	f04f 0900 	mov.w	r9, #0
 8004bde:	f108 38ff 	add.w	r8, r8, #4294967295
 8004be2:	f104 0a1a 	add.w	sl, r4, #26
 8004be6:	45c8      	cmp	r8, r9
 8004be8:	dc09      	bgt.n	8004bfe <_printf_float+0x256>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	079b      	lsls	r3, r3, #30
 8004bee:	f100 8102 	bmi.w	8004df6 <_printf_float+0x44e>
 8004bf2:	68e0      	ldr	r0, [r4, #12]
 8004bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004bf6:	4298      	cmp	r0, r3
 8004bf8:	bfb8      	it	lt
 8004bfa:	4618      	movlt	r0, r3
 8004bfc:	e731      	b.n	8004a62 <_printf_float+0xba>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4652      	mov	r2, sl
 8004c02:	4631      	mov	r1, r6
 8004c04:	4628      	mov	r0, r5
 8004c06:	47b8      	blx	r7
 8004c08:	3001      	adds	r0, #1
 8004c0a:	f43f af28 	beq.w	8004a5e <_printf_float+0xb6>
 8004c0e:	f109 0901 	add.w	r9, r9, #1
 8004c12:	e7e8      	b.n	8004be6 <_printf_float+0x23e>
 8004c14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	dc38      	bgt.n	8004c8c <_printf_float+0x2e4>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4628      	mov	r0, r5
 8004c20:	4a19      	ldr	r2, [pc, #100]	@ (8004c88 <_printf_float+0x2e0>)
 8004c22:	47b8      	blx	r7
 8004c24:	3001      	adds	r0, #1
 8004c26:	f43f af1a 	beq.w	8004a5e <_printf_float+0xb6>
 8004c2a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004c2e:	ea59 0303 	orrs.w	r3, r9, r3
 8004c32:	d102      	bne.n	8004c3a <_printf_float+0x292>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	07d9      	lsls	r1, r3, #31
 8004c38:	d5d7      	bpl.n	8004bea <_printf_float+0x242>
 8004c3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c3e:	4631      	mov	r1, r6
 8004c40:	4628      	mov	r0, r5
 8004c42:	47b8      	blx	r7
 8004c44:	3001      	adds	r0, #1
 8004c46:	f43f af0a 	beq.w	8004a5e <_printf_float+0xb6>
 8004c4a:	f04f 0a00 	mov.w	sl, #0
 8004c4e:	f104 0b1a 	add.w	fp, r4, #26
 8004c52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c54:	425b      	negs	r3, r3
 8004c56:	4553      	cmp	r3, sl
 8004c58:	dc01      	bgt.n	8004c5e <_printf_float+0x2b6>
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	e793      	b.n	8004b86 <_printf_float+0x1de>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	465a      	mov	r2, fp
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b8      	blx	r7
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f43f aef8 	beq.w	8004a5e <_printf_float+0xb6>
 8004c6e:	f10a 0a01 	add.w	sl, sl, #1
 8004c72:	e7ee      	b.n	8004c52 <_printf_float+0x2aa>
 8004c74:	7fefffff 	.word	0x7fefffff
 8004c78:	08007412 	.word	0x08007412
 8004c7c:	08007416 	.word	0x08007416
 8004c80:	0800741a 	.word	0x0800741a
 8004c84:	0800741e 	.word	0x0800741e
 8004c88:	08007422 	.word	0x08007422
 8004c8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c8e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004c92:	4553      	cmp	r3, sl
 8004c94:	bfa8      	it	ge
 8004c96:	4653      	movge	r3, sl
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	4699      	mov	r9, r3
 8004c9c:	dc36      	bgt.n	8004d0c <_printf_float+0x364>
 8004c9e:	f04f 0b00 	mov.w	fp, #0
 8004ca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ca6:	f104 021a 	add.w	r2, r4, #26
 8004caa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004cac:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cae:	eba3 0309 	sub.w	r3, r3, r9
 8004cb2:	455b      	cmp	r3, fp
 8004cb4:	dc31      	bgt.n	8004d1a <_printf_float+0x372>
 8004cb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cb8:	459a      	cmp	sl, r3
 8004cba:	dc3a      	bgt.n	8004d32 <_printf_float+0x38a>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	07da      	lsls	r2, r3, #31
 8004cc0:	d437      	bmi.n	8004d32 <_printf_float+0x38a>
 8004cc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cc4:	ebaa 0903 	sub.w	r9, sl, r3
 8004cc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cca:	ebaa 0303 	sub.w	r3, sl, r3
 8004cce:	4599      	cmp	r9, r3
 8004cd0:	bfa8      	it	ge
 8004cd2:	4699      	movge	r9, r3
 8004cd4:	f1b9 0f00 	cmp.w	r9, #0
 8004cd8:	dc33      	bgt.n	8004d42 <_printf_float+0x39a>
 8004cda:	f04f 0800 	mov.w	r8, #0
 8004cde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ce2:	f104 0b1a 	add.w	fp, r4, #26
 8004ce6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ce8:	ebaa 0303 	sub.w	r3, sl, r3
 8004cec:	eba3 0309 	sub.w	r3, r3, r9
 8004cf0:	4543      	cmp	r3, r8
 8004cf2:	f77f af7a 	ble.w	8004bea <_printf_float+0x242>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	465a      	mov	r2, fp
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	47b8      	blx	r7
 8004d00:	3001      	adds	r0, #1
 8004d02:	f43f aeac 	beq.w	8004a5e <_printf_float+0xb6>
 8004d06:	f108 0801 	add.w	r8, r8, #1
 8004d0a:	e7ec      	b.n	8004ce6 <_printf_float+0x33e>
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	4631      	mov	r1, r6
 8004d10:	4628      	mov	r0, r5
 8004d12:	47b8      	blx	r7
 8004d14:	3001      	adds	r0, #1
 8004d16:	d1c2      	bne.n	8004c9e <_printf_float+0x2f6>
 8004d18:	e6a1      	b.n	8004a5e <_printf_float+0xb6>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4628      	mov	r0, r5
 8004d20:	920a      	str	r2, [sp, #40]	@ 0x28
 8004d22:	47b8      	blx	r7
 8004d24:	3001      	adds	r0, #1
 8004d26:	f43f ae9a 	beq.w	8004a5e <_printf_float+0xb6>
 8004d2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d2c:	f10b 0b01 	add.w	fp, fp, #1
 8004d30:	e7bb      	b.n	8004caa <_printf_float+0x302>
 8004d32:	4631      	mov	r1, r6
 8004d34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d1c0      	bne.n	8004cc2 <_printf_float+0x31a>
 8004d40:	e68d      	b.n	8004a5e <_printf_float+0xb6>
 8004d42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d44:	464b      	mov	r3, r9
 8004d46:	4631      	mov	r1, r6
 8004d48:	4628      	mov	r0, r5
 8004d4a:	4442      	add	r2, r8
 8004d4c:	47b8      	blx	r7
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d1c3      	bne.n	8004cda <_printf_float+0x332>
 8004d52:	e684      	b.n	8004a5e <_printf_float+0xb6>
 8004d54:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004d58:	f1ba 0f01 	cmp.w	sl, #1
 8004d5c:	dc01      	bgt.n	8004d62 <_printf_float+0x3ba>
 8004d5e:	07db      	lsls	r3, r3, #31
 8004d60:	d536      	bpl.n	8004dd0 <_printf_float+0x428>
 8004d62:	2301      	movs	r3, #1
 8004d64:	4642      	mov	r2, r8
 8004d66:	4631      	mov	r1, r6
 8004d68:	4628      	mov	r0, r5
 8004d6a:	47b8      	blx	r7
 8004d6c:	3001      	adds	r0, #1
 8004d6e:	f43f ae76 	beq.w	8004a5e <_printf_float+0xb6>
 8004d72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d76:	4631      	mov	r1, r6
 8004d78:	4628      	mov	r0, r5
 8004d7a:	47b8      	blx	r7
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	f43f ae6e 	beq.w	8004a5e <_printf_float+0xb6>
 8004d82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d86:	2200      	movs	r2, #0
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d8e:	f7fb fe0b 	bl	80009a8 <__aeabi_dcmpeq>
 8004d92:	b9c0      	cbnz	r0, 8004dc6 <_printf_float+0x41e>
 8004d94:	4653      	mov	r3, sl
 8004d96:	f108 0201 	add.w	r2, r8, #1
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b8      	blx	r7
 8004da0:	3001      	adds	r0, #1
 8004da2:	d10c      	bne.n	8004dbe <_printf_float+0x416>
 8004da4:	e65b      	b.n	8004a5e <_printf_float+0xb6>
 8004da6:	2301      	movs	r3, #1
 8004da8:	465a      	mov	r2, fp
 8004daa:	4631      	mov	r1, r6
 8004dac:	4628      	mov	r0, r5
 8004dae:	47b8      	blx	r7
 8004db0:	3001      	adds	r0, #1
 8004db2:	f43f ae54 	beq.w	8004a5e <_printf_float+0xb6>
 8004db6:	f108 0801 	add.w	r8, r8, #1
 8004dba:	45d0      	cmp	r8, sl
 8004dbc:	dbf3      	blt.n	8004da6 <_printf_float+0x3fe>
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004dc4:	e6e0      	b.n	8004b88 <_printf_float+0x1e0>
 8004dc6:	f04f 0800 	mov.w	r8, #0
 8004dca:	f104 0b1a 	add.w	fp, r4, #26
 8004dce:	e7f4      	b.n	8004dba <_printf_float+0x412>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4642      	mov	r2, r8
 8004dd4:	e7e1      	b.n	8004d9a <_printf_float+0x3f2>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	464a      	mov	r2, r9
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	f43f ae3c 	beq.w	8004a5e <_printf_float+0xb6>
 8004de6:	f108 0801 	add.w	r8, r8, #1
 8004dea:	68e3      	ldr	r3, [r4, #12]
 8004dec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004dee:	1a5b      	subs	r3, r3, r1
 8004df0:	4543      	cmp	r3, r8
 8004df2:	dcf0      	bgt.n	8004dd6 <_printf_float+0x42e>
 8004df4:	e6fd      	b.n	8004bf2 <_printf_float+0x24a>
 8004df6:	f04f 0800 	mov.w	r8, #0
 8004dfa:	f104 0919 	add.w	r9, r4, #25
 8004dfe:	e7f4      	b.n	8004dea <_printf_float+0x442>

08004e00 <_printf_common>:
 8004e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	4616      	mov	r6, r2
 8004e06:	4698      	mov	r8, r3
 8004e08:	688a      	ldr	r2, [r1, #8]
 8004e0a:	690b      	ldr	r3, [r1, #16]
 8004e0c:	4607      	mov	r7, r0
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	bfb8      	it	lt
 8004e12:	4613      	movlt	r3, r2
 8004e14:	6033      	str	r3, [r6, #0]
 8004e16:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e20:	b10a      	cbz	r2, 8004e26 <_printf_common+0x26>
 8004e22:	3301      	adds	r3, #1
 8004e24:	6033      	str	r3, [r6, #0]
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	0699      	lsls	r1, r3, #26
 8004e2a:	bf42      	ittt	mi
 8004e2c:	6833      	ldrmi	r3, [r6, #0]
 8004e2e:	3302      	addmi	r3, #2
 8004e30:	6033      	strmi	r3, [r6, #0]
 8004e32:	6825      	ldr	r5, [r4, #0]
 8004e34:	f015 0506 	ands.w	r5, r5, #6
 8004e38:	d106      	bne.n	8004e48 <_printf_common+0x48>
 8004e3a:	f104 0a19 	add.w	sl, r4, #25
 8004e3e:	68e3      	ldr	r3, [r4, #12]
 8004e40:	6832      	ldr	r2, [r6, #0]
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	42ab      	cmp	r3, r5
 8004e46:	dc2b      	bgt.n	8004ea0 <_printf_common+0xa0>
 8004e48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e4c:	6822      	ldr	r2, [r4, #0]
 8004e4e:	3b00      	subs	r3, #0
 8004e50:	bf18      	it	ne
 8004e52:	2301      	movne	r3, #1
 8004e54:	0692      	lsls	r2, r2, #26
 8004e56:	d430      	bmi.n	8004eba <_printf_common+0xba>
 8004e58:	4641      	mov	r1, r8
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e60:	47c8      	blx	r9
 8004e62:	3001      	adds	r0, #1
 8004e64:	d023      	beq.n	8004eae <_printf_common+0xae>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	6922      	ldr	r2, [r4, #16]
 8004e6a:	f003 0306 	and.w	r3, r3, #6
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	bf14      	ite	ne
 8004e72:	2500      	movne	r5, #0
 8004e74:	6833      	ldreq	r3, [r6, #0]
 8004e76:	f04f 0600 	mov.w	r6, #0
 8004e7a:	bf08      	it	eq
 8004e7c:	68e5      	ldreq	r5, [r4, #12]
 8004e7e:	f104 041a 	add.w	r4, r4, #26
 8004e82:	bf08      	it	eq
 8004e84:	1aed      	subeq	r5, r5, r3
 8004e86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e8a:	bf08      	it	eq
 8004e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e90:	4293      	cmp	r3, r2
 8004e92:	bfc4      	itt	gt
 8004e94:	1a9b      	subgt	r3, r3, r2
 8004e96:	18ed      	addgt	r5, r5, r3
 8004e98:	42b5      	cmp	r5, r6
 8004e9a:	d11a      	bne.n	8004ed2 <_printf_common+0xd2>
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	e008      	b.n	8004eb2 <_printf_common+0xb2>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	4652      	mov	r2, sl
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	47c8      	blx	r9
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d103      	bne.n	8004eb6 <_printf_common+0xb6>
 8004eae:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb6:	3501      	adds	r5, #1
 8004eb8:	e7c1      	b.n	8004e3e <_printf_common+0x3e>
 8004eba:	2030      	movs	r0, #48	@ 0x30
 8004ebc:	18e1      	adds	r1, r4, r3
 8004ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ec8:	4422      	add	r2, r4
 8004eca:	3302      	adds	r3, #2
 8004ecc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ed0:	e7c2      	b.n	8004e58 <_printf_common+0x58>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	4622      	mov	r2, r4
 8004ed6:	4641      	mov	r1, r8
 8004ed8:	4638      	mov	r0, r7
 8004eda:	47c8      	blx	r9
 8004edc:	3001      	adds	r0, #1
 8004ede:	d0e6      	beq.n	8004eae <_printf_common+0xae>
 8004ee0:	3601      	adds	r6, #1
 8004ee2:	e7d9      	b.n	8004e98 <_printf_common+0x98>

08004ee4 <_printf_i>:
 8004ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee8:	7e0f      	ldrb	r7, [r1, #24]
 8004eea:	4691      	mov	r9, r2
 8004eec:	2f78      	cmp	r7, #120	@ 0x78
 8004eee:	4680      	mov	r8, r0
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	469a      	mov	sl, r3
 8004ef4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004efa:	d807      	bhi.n	8004f0c <_printf_i+0x28>
 8004efc:	2f62      	cmp	r7, #98	@ 0x62
 8004efe:	d80a      	bhi.n	8004f16 <_printf_i+0x32>
 8004f00:	2f00      	cmp	r7, #0
 8004f02:	f000 80d3 	beq.w	80050ac <_printf_i+0x1c8>
 8004f06:	2f58      	cmp	r7, #88	@ 0x58
 8004f08:	f000 80ba 	beq.w	8005080 <_printf_i+0x19c>
 8004f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f14:	e03a      	b.n	8004f8c <_printf_i+0xa8>
 8004f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f1a:	2b15      	cmp	r3, #21
 8004f1c:	d8f6      	bhi.n	8004f0c <_printf_i+0x28>
 8004f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f24 <_printf_i+0x40>)
 8004f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f24:	08004f7d 	.word	0x08004f7d
 8004f28:	08004f91 	.word	0x08004f91
 8004f2c:	08004f0d 	.word	0x08004f0d
 8004f30:	08004f0d 	.word	0x08004f0d
 8004f34:	08004f0d 	.word	0x08004f0d
 8004f38:	08004f0d 	.word	0x08004f0d
 8004f3c:	08004f91 	.word	0x08004f91
 8004f40:	08004f0d 	.word	0x08004f0d
 8004f44:	08004f0d 	.word	0x08004f0d
 8004f48:	08004f0d 	.word	0x08004f0d
 8004f4c:	08004f0d 	.word	0x08004f0d
 8004f50:	08005093 	.word	0x08005093
 8004f54:	08004fbb 	.word	0x08004fbb
 8004f58:	0800504d 	.word	0x0800504d
 8004f5c:	08004f0d 	.word	0x08004f0d
 8004f60:	08004f0d 	.word	0x08004f0d
 8004f64:	080050b5 	.word	0x080050b5
 8004f68:	08004f0d 	.word	0x08004f0d
 8004f6c:	08004fbb 	.word	0x08004fbb
 8004f70:	08004f0d 	.word	0x08004f0d
 8004f74:	08004f0d 	.word	0x08004f0d
 8004f78:	08005055 	.word	0x08005055
 8004f7c:	6833      	ldr	r3, [r6, #0]
 8004f7e:	1d1a      	adds	r2, r3, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6032      	str	r2, [r6, #0]
 8004f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e09e      	b.n	80050ce <_printf_i+0x1ea>
 8004f90:	6833      	ldr	r3, [r6, #0]
 8004f92:	6820      	ldr	r0, [r4, #0]
 8004f94:	1d19      	adds	r1, r3, #4
 8004f96:	6031      	str	r1, [r6, #0]
 8004f98:	0606      	lsls	r6, r0, #24
 8004f9a:	d501      	bpl.n	8004fa0 <_printf_i+0xbc>
 8004f9c:	681d      	ldr	r5, [r3, #0]
 8004f9e:	e003      	b.n	8004fa8 <_printf_i+0xc4>
 8004fa0:	0645      	lsls	r5, r0, #25
 8004fa2:	d5fb      	bpl.n	8004f9c <_printf_i+0xb8>
 8004fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fa8:	2d00      	cmp	r5, #0
 8004faa:	da03      	bge.n	8004fb4 <_printf_i+0xd0>
 8004fac:	232d      	movs	r3, #45	@ 0x2d
 8004fae:	426d      	negs	r5, r5
 8004fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb4:	230a      	movs	r3, #10
 8004fb6:	4859      	ldr	r0, [pc, #356]	@ (800511c <_printf_i+0x238>)
 8004fb8:	e011      	b.n	8004fde <_printf_i+0xfa>
 8004fba:	6821      	ldr	r1, [r4, #0]
 8004fbc:	6833      	ldr	r3, [r6, #0]
 8004fbe:	0608      	lsls	r0, r1, #24
 8004fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fc4:	d402      	bmi.n	8004fcc <_printf_i+0xe8>
 8004fc6:	0649      	lsls	r1, r1, #25
 8004fc8:	bf48      	it	mi
 8004fca:	b2ad      	uxthmi	r5, r5
 8004fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fce:	6033      	str	r3, [r6, #0]
 8004fd0:	bf14      	ite	ne
 8004fd2:	230a      	movne	r3, #10
 8004fd4:	2308      	moveq	r3, #8
 8004fd6:	4851      	ldr	r0, [pc, #324]	@ (800511c <_printf_i+0x238>)
 8004fd8:	2100      	movs	r1, #0
 8004fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fde:	6866      	ldr	r6, [r4, #4]
 8004fe0:	2e00      	cmp	r6, #0
 8004fe2:	bfa8      	it	ge
 8004fe4:	6821      	ldrge	r1, [r4, #0]
 8004fe6:	60a6      	str	r6, [r4, #8]
 8004fe8:	bfa4      	itt	ge
 8004fea:	f021 0104 	bicge.w	r1, r1, #4
 8004fee:	6021      	strge	r1, [r4, #0]
 8004ff0:	b90d      	cbnz	r5, 8004ff6 <_printf_i+0x112>
 8004ff2:	2e00      	cmp	r6, #0
 8004ff4:	d04b      	beq.n	800508e <_printf_i+0x1aa>
 8004ff6:	4616      	mov	r6, r2
 8004ff8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ffc:	fb03 5711 	mls	r7, r3, r1, r5
 8005000:	5dc7      	ldrb	r7, [r0, r7]
 8005002:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005006:	462f      	mov	r7, r5
 8005008:	42bb      	cmp	r3, r7
 800500a:	460d      	mov	r5, r1
 800500c:	d9f4      	bls.n	8004ff8 <_printf_i+0x114>
 800500e:	2b08      	cmp	r3, #8
 8005010:	d10b      	bne.n	800502a <_printf_i+0x146>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	07df      	lsls	r7, r3, #31
 8005016:	d508      	bpl.n	800502a <_printf_i+0x146>
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	6861      	ldr	r1, [r4, #4]
 800501c:	4299      	cmp	r1, r3
 800501e:	bfde      	ittt	le
 8005020:	2330      	movle	r3, #48	@ 0x30
 8005022:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005026:	f106 36ff 	addle.w	r6, r6, #4294967295
 800502a:	1b92      	subs	r2, r2, r6
 800502c:	6122      	str	r2, [r4, #16]
 800502e:	464b      	mov	r3, r9
 8005030:	4621      	mov	r1, r4
 8005032:	4640      	mov	r0, r8
 8005034:	f8cd a000 	str.w	sl, [sp]
 8005038:	aa03      	add	r2, sp, #12
 800503a:	f7ff fee1 	bl	8004e00 <_printf_common>
 800503e:	3001      	adds	r0, #1
 8005040:	d14a      	bne.n	80050d8 <_printf_i+0x1f4>
 8005042:	f04f 30ff 	mov.w	r0, #4294967295
 8005046:	b004      	add	sp, #16
 8005048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	f043 0320 	orr.w	r3, r3, #32
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	2778      	movs	r7, #120	@ 0x78
 8005056:	4832      	ldr	r0, [pc, #200]	@ (8005120 <_printf_i+0x23c>)
 8005058:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	6831      	ldr	r1, [r6, #0]
 8005060:	061f      	lsls	r7, r3, #24
 8005062:	f851 5b04 	ldr.w	r5, [r1], #4
 8005066:	d402      	bmi.n	800506e <_printf_i+0x18a>
 8005068:	065f      	lsls	r7, r3, #25
 800506a:	bf48      	it	mi
 800506c:	b2ad      	uxthmi	r5, r5
 800506e:	6031      	str	r1, [r6, #0]
 8005070:	07d9      	lsls	r1, r3, #31
 8005072:	bf44      	itt	mi
 8005074:	f043 0320 	orrmi.w	r3, r3, #32
 8005078:	6023      	strmi	r3, [r4, #0]
 800507a:	b11d      	cbz	r5, 8005084 <_printf_i+0x1a0>
 800507c:	2310      	movs	r3, #16
 800507e:	e7ab      	b.n	8004fd8 <_printf_i+0xf4>
 8005080:	4826      	ldr	r0, [pc, #152]	@ (800511c <_printf_i+0x238>)
 8005082:	e7e9      	b.n	8005058 <_printf_i+0x174>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	f023 0320 	bic.w	r3, r3, #32
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	e7f6      	b.n	800507c <_printf_i+0x198>
 800508e:	4616      	mov	r6, r2
 8005090:	e7bd      	b.n	800500e <_printf_i+0x12a>
 8005092:	6833      	ldr	r3, [r6, #0]
 8005094:	6825      	ldr	r5, [r4, #0]
 8005096:	1d18      	adds	r0, r3, #4
 8005098:	6961      	ldr	r1, [r4, #20]
 800509a:	6030      	str	r0, [r6, #0]
 800509c:	062e      	lsls	r6, r5, #24
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	d501      	bpl.n	80050a6 <_printf_i+0x1c2>
 80050a2:	6019      	str	r1, [r3, #0]
 80050a4:	e002      	b.n	80050ac <_printf_i+0x1c8>
 80050a6:	0668      	lsls	r0, r5, #25
 80050a8:	d5fb      	bpl.n	80050a2 <_printf_i+0x1be>
 80050aa:	8019      	strh	r1, [r3, #0]
 80050ac:	2300      	movs	r3, #0
 80050ae:	4616      	mov	r6, r2
 80050b0:	6123      	str	r3, [r4, #16]
 80050b2:	e7bc      	b.n	800502e <_printf_i+0x14a>
 80050b4:	6833      	ldr	r3, [r6, #0]
 80050b6:	2100      	movs	r1, #0
 80050b8:	1d1a      	adds	r2, r3, #4
 80050ba:	6032      	str	r2, [r6, #0]
 80050bc:	681e      	ldr	r6, [r3, #0]
 80050be:	6862      	ldr	r2, [r4, #4]
 80050c0:	4630      	mov	r0, r6
 80050c2:	f000 fab8 	bl	8005636 <memchr>
 80050c6:	b108      	cbz	r0, 80050cc <_printf_i+0x1e8>
 80050c8:	1b80      	subs	r0, r0, r6
 80050ca:	6060      	str	r0, [r4, #4]
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	6123      	str	r3, [r4, #16]
 80050d0:	2300      	movs	r3, #0
 80050d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050d6:	e7aa      	b.n	800502e <_printf_i+0x14a>
 80050d8:	4632      	mov	r2, r6
 80050da:	4649      	mov	r1, r9
 80050dc:	4640      	mov	r0, r8
 80050de:	6923      	ldr	r3, [r4, #16]
 80050e0:	47d0      	blx	sl
 80050e2:	3001      	adds	r0, #1
 80050e4:	d0ad      	beq.n	8005042 <_printf_i+0x15e>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	079b      	lsls	r3, r3, #30
 80050ea:	d413      	bmi.n	8005114 <_printf_i+0x230>
 80050ec:	68e0      	ldr	r0, [r4, #12]
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	4298      	cmp	r0, r3
 80050f2:	bfb8      	it	lt
 80050f4:	4618      	movlt	r0, r3
 80050f6:	e7a6      	b.n	8005046 <_printf_i+0x162>
 80050f8:	2301      	movs	r3, #1
 80050fa:	4632      	mov	r2, r6
 80050fc:	4649      	mov	r1, r9
 80050fe:	4640      	mov	r0, r8
 8005100:	47d0      	blx	sl
 8005102:	3001      	adds	r0, #1
 8005104:	d09d      	beq.n	8005042 <_printf_i+0x15e>
 8005106:	3501      	adds	r5, #1
 8005108:	68e3      	ldr	r3, [r4, #12]
 800510a:	9903      	ldr	r1, [sp, #12]
 800510c:	1a5b      	subs	r3, r3, r1
 800510e:	42ab      	cmp	r3, r5
 8005110:	dcf2      	bgt.n	80050f8 <_printf_i+0x214>
 8005112:	e7eb      	b.n	80050ec <_printf_i+0x208>
 8005114:	2500      	movs	r5, #0
 8005116:	f104 0619 	add.w	r6, r4, #25
 800511a:	e7f5      	b.n	8005108 <_printf_i+0x224>
 800511c:	08007424 	.word	0x08007424
 8005120:	08007435 	.word	0x08007435

08005124 <std>:
 8005124:	2300      	movs	r3, #0
 8005126:	b510      	push	{r4, lr}
 8005128:	4604      	mov	r4, r0
 800512a:	e9c0 3300 	strd	r3, r3, [r0]
 800512e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005132:	6083      	str	r3, [r0, #8]
 8005134:	8181      	strh	r1, [r0, #12]
 8005136:	6643      	str	r3, [r0, #100]	@ 0x64
 8005138:	81c2      	strh	r2, [r0, #14]
 800513a:	6183      	str	r3, [r0, #24]
 800513c:	4619      	mov	r1, r3
 800513e:	2208      	movs	r2, #8
 8005140:	305c      	adds	r0, #92	@ 0x5c
 8005142:	f000 f9f9 	bl	8005538 <memset>
 8005146:	4b0d      	ldr	r3, [pc, #52]	@ (800517c <std+0x58>)
 8005148:	6224      	str	r4, [r4, #32]
 800514a:	6263      	str	r3, [r4, #36]	@ 0x24
 800514c:	4b0c      	ldr	r3, [pc, #48]	@ (8005180 <std+0x5c>)
 800514e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005150:	4b0c      	ldr	r3, [pc, #48]	@ (8005184 <std+0x60>)
 8005152:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005154:	4b0c      	ldr	r3, [pc, #48]	@ (8005188 <std+0x64>)
 8005156:	6323      	str	r3, [r4, #48]	@ 0x30
 8005158:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <std+0x68>)
 800515a:	429c      	cmp	r4, r3
 800515c:	d006      	beq.n	800516c <std+0x48>
 800515e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005162:	4294      	cmp	r4, r2
 8005164:	d002      	beq.n	800516c <std+0x48>
 8005166:	33d0      	adds	r3, #208	@ 0xd0
 8005168:	429c      	cmp	r4, r3
 800516a:	d105      	bne.n	8005178 <std+0x54>
 800516c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005174:	f000 ba5c 	b.w	8005630 <__retarget_lock_init_recursive>
 8005178:	bd10      	pop	{r4, pc}
 800517a:	bf00      	nop
 800517c:	08005389 	.word	0x08005389
 8005180:	080053ab 	.word	0x080053ab
 8005184:	080053e3 	.word	0x080053e3
 8005188:	08005407 	.word	0x08005407
 800518c:	20000740 	.word	0x20000740

08005190 <stdio_exit_handler>:
 8005190:	4a02      	ldr	r2, [pc, #8]	@ (800519c <stdio_exit_handler+0xc>)
 8005192:	4903      	ldr	r1, [pc, #12]	@ (80051a0 <stdio_exit_handler+0x10>)
 8005194:	4803      	ldr	r0, [pc, #12]	@ (80051a4 <stdio_exit_handler+0x14>)
 8005196:	f000 b869 	b.w	800526c <_fwalk_sglue>
 800519a:	bf00      	nop
 800519c:	2000000c 	.word	0x2000000c
 80051a0:	08006f8d 	.word	0x08006f8d
 80051a4:	2000001c 	.word	0x2000001c

080051a8 <cleanup_stdio>:
 80051a8:	6841      	ldr	r1, [r0, #4]
 80051aa:	4b0c      	ldr	r3, [pc, #48]	@ (80051dc <cleanup_stdio+0x34>)
 80051ac:	b510      	push	{r4, lr}
 80051ae:	4299      	cmp	r1, r3
 80051b0:	4604      	mov	r4, r0
 80051b2:	d001      	beq.n	80051b8 <cleanup_stdio+0x10>
 80051b4:	f001 feea 	bl	8006f8c <_fflush_r>
 80051b8:	68a1      	ldr	r1, [r4, #8]
 80051ba:	4b09      	ldr	r3, [pc, #36]	@ (80051e0 <cleanup_stdio+0x38>)
 80051bc:	4299      	cmp	r1, r3
 80051be:	d002      	beq.n	80051c6 <cleanup_stdio+0x1e>
 80051c0:	4620      	mov	r0, r4
 80051c2:	f001 fee3 	bl	8006f8c <_fflush_r>
 80051c6:	68e1      	ldr	r1, [r4, #12]
 80051c8:	4b06      	ldr	r3, [pc, #24]	@ (80051e4 <cleanup_stdio+0x3c>)
 80051ca:	4299      	cmp	r1, r3
 80051cc:	d004      	beq.n	80051d8 <cleanup_stdio+0x30>
 80051ce:	4620      	mov	r0, r4
 80051d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d4:	f001 beda 	b.w	8006f8c <_fflush_r>
 80051d8:	bd10      	pop	{r4, pc}
 80051da:	bf00      	nop
 80051dc:	20000740 	.word	0x20000740
 80051e0:	200007a8 	.word	0x200007a8
 80051e4:	20000810 	.word	0x20000810

080051e8 <global_stdio_init.part.0>:
 80051e8:	b510      	push	{r4, lr}
 80051ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005218 <global_stdio_init.part.0+0x30>)
 80051ec:	4c0b      	ldr	r4, [pc, #44]	@ (800521c <global_stdio_init.part.0+0x34>)
 80051ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005220 <global_stdio_init.part.0+0x38>)
 80051f0:	4620      	mov	r0, r4
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	2104      	movs	r1, #4
 80051f6:	2200      	movs	r2, #0
 80051f8:	f7ff ff94 	bl	8005124 <std>
 80051fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005200:	2201      	movs	r2, #1
 8005202:	2109      	movs	r1, #9
 8005204:	f7ff ff8e 	bl	8005124 <std>
 8005208:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800520c:	2202      	movs	r2, #2
 800520e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005212:	2112      	movs	r1, #18
 8005214:	f7ff bf86 	b.w	8005124 <std>
 8005218:	20000878 	.word	0x20000878
 800521c:	20000740 	.word	0x20000740
 8005220:	08005191 	.word	0x08005191

08005224 <__sfp_lock_acquire>:
 8005224:	4801      	ldr	r0, [pc, #4]	@ (800522c <__sfp_lock_acquire+0x8>)
 8005226:	f000 ba04 	b.w	8005632 <__retarget_lock_acquire_recursive>
 800522a:	bf00      	nop
 800522c:	20000881 	.word	0x20000881

08005230 <__sfp_lock_release>:
 8005230:	4801      	ldr	r0, [pc, #4]	@ (8005238 <__sfp_lock_release+0x8>)
 8005232:	f000 b9ff 	b.w	8005634 <__retarget_lock_release_recursive>
 8005236:	bf00      	nop
 8005238:	20000881 	.word	0x20000881

0800523c <__sinit>:
 800523c:	b510      	push	{r4, lr}
 800523e:	4604      	mov	r4, r0
 8005240:	f7ff fff0 	bl	8005224 <__sfp_lock_acquire>
 8005244:	6a23      	ldr	r3, [r4, #32]
 8005246:	b11b      	cbz	r3, 8005250 <__sinit+0x14>
 8005248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800524c:	f7ff bff0 	b.w	8005230 <__sfp_lock_release>
 8005250:	4b04      	ldr	r3, [pc, #16]	@ (8005264 <__sinit+0x28>)
 8005252:	6223      	str	r3, [r4, #32]
 8005254:	4b04      	ldr	r3, [pc, #16]	@ (8005268 <__sinit+0x2c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f5      	bne.n	8005248 <__sinit+0xc>
 800525c:	f7ff ffc4 	bl	80051e8 <global_stdio_init.part.0>
 8005260:	e7f2      	b.n	8005248 <__sinit+0xc>
 8005262:	bf00      	nop
 8005264:	080051a9 	.word	0x080051a9
 8005268:	20000878 	.word	0x20000878

0800526c <_fwalk_sglue>:
 800526c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005270:	4607      	mov	r7, r0
 8005272:	4688      	mov	r8, r1
 8005274:	4614      	mov	r4, r2
 8005276:	2600      	movs	r6, #0
 8005278:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800527c:	f1b9 0901 	subs.w	r9, r9, #1
 8005280:	d505      	bpl.n	800528e <_fwalk_sglue+0x22>
 8005282:	6824      	ldr	r4, [r4, #0]
 8005284:	2c00      	cmp	r4, #0
 8005286:	d1f7      	bne.n	8005278 <_fwalk_sglue+0xc>
 8005288:	4630      	mov	r0, r6
 800528a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800528e:	89ab      	ldrh	r3, [r5, #12]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d907      	bls.n	80052a4 <_fwalk_sglue+0x38>
 8005294:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005298:	3301      	adds	r3, #1
 800529a:	d003      	beq.n	80052a4 <_fwalk_sglue+0x38>
 800529c:	4629      	mov	r1, r5
 800529e:	4638      	mov	r0, r7
 80052a0:	47c0      	blx	r8
 80052a2:	4306      	orrs	r6, r0
 80052a4:	3568      	adds	r5, #104	@ 0x68
 80052a6:	e7e9      	b.n	800527c <_fwalk_sglue+0x10>

080052a8 <iprintf>:
 80052a8:	b40f      	push	{r0, r1, r2, r3}
 80052aa:	b507      	push	{r0, r1, r2, lr}
 80052ac:	4906      	ldr	r1, [pc, #24]	@ (80052c8 <iprintf+0x20>)
 80052ae:	ab04      	add	r3, sp, #16
 80052b0:	6808      	ldr	r0, [r1, #0]
 80052b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80052b6:	6881      	ldr	r1, [r0, #8]
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	f001 fccf 	bl	8006c5c <_vfiprintf_r>
 80052be:	b003      	add	sp, #12
 80052c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80052c4:	b004      	add	sp, #16
 80052c6:	4770      	bx	lr
 80052c8:	20000018 	.word	0x20000018

080052cc <_puts_r>:
 80052cc:	6a03      	ldr	r3, [r0, #32]
 80052ce:	b570      	push	{r4, r5, r6, lr}
 80052d0:	4605      	mov	r5, r0
 80052d2:	460e      	mov	r6, r1
 80052d4:	6884      	ldr	r4, [r0, #8]
 80052d6:	b90b      	cbnz	r3, 80052dc <_puts_r+0x10>
 80052d8:	f7ff ffb0 	bl	800523c <__sinit>
 80052dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052de:	07db      	lsls	r3, r3, #31
 80052e0:	d405      	bmi.n	80052ee <_puts_r+0x22>
 80052e2:	89a3      	ldrh	r3, [r4, #12]
 80052e4:	0598      	lsls	r0, r3, #22
 80052e6:	d402      	bmi.n	80052ee <_puts_r+0x22>
 80052e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052ea:	f000 f9a2 	bl	8005632 <__retarget_lock_acquire_recursive>
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	0719      	lsls	r1, r3, #28
 80052f2:	d502      	bpl.n	80052fa <_puts_r+0x2e>
 80052f4:	6923      	ldr	r3, [r4, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d135      	bne.n	8005366 <_puts_r+0x9a>
 80052fa:	4621      	mov	r1, r4
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 f8c5 	bl	800548c <__swsetup_r>
 8005302:	b380      	cbz	r0, 8005366 <_puts_r+0x9a>
 8005304:	f04f 35ff 	mov.w	r5, #4294967295
 8005308:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800530a:	07da      	lsls	r2, r3, #31
 800530c:	d405      	bmi.n	800531a <_puts_r+0x4e>
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	059b      	lsls	r3, r3, #22
 8005312:	d402      	bmi.n	800531a <_puts_r+0x4e>
 8005314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005316:	f000 f98d 	bl	8005634 <__retarget_lock_release_recursive>
 800531a:	4628      	mov	r0, r5
 800531c:	bd70      	pop	{r4, r5, r6, pc}
 800531e:	2b00      	cmp	r3, #0
 8005320:	da04      	bge.n	800532c <_puts_r+0x60>
 8005322:	69a2      	ldr	r2, [r4, #24]
 8005324:	429a      	cmp	r2, r3
 8005326:	dc17      	bgt.n	8005358 <_puts_r+0x8c>
 8005328:	290a      	cmp	r1, #10
 800532a:	d015      	beq.n	8005358 <_puts_r+0x8c>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	6022      	str	r2, [r4, #0]
 8005332:	7019      	strb	r1, [r3, #0]
 8005334:	68a3      	ldr	r3, [r4, #8]
 8005336:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800533a:	3b01      	subs	r3, #1
 800533c:	60a3      	str	r3, [r4, #8]
 800533e:	2900      	cmp	r1, #0
 8005340:	d1ed      	bne.n	800531e <_puts_r+0x52>
 8005342:	2b00      	cmp	r3, #0
 8005344:	da11      	bge.n	800536a <_puts_r+0x9e>
 8005346:	4622      	mov	r2, r4
 8005348:	210a      	movs	r1, #10
 800534a:	4628      	mov	r0, r5
 800534c:	f000 f85f 	bl	800540e <__swbuf_r>
 8005350:	3001      	adds	r0, #1
 8005352:	d0d7      	beq.n	8005304 <_puts_r+0x38>
 8005354:	250a      	movs	r5, #10
 8005356:	e7d7      	b.n	8005308 <_puts_r+0x3c>
 8005358:	4622      	mov	r2, r4
 800535a:	4628      	mov	r0, r5
 800535c:	f000 f857 	bl	800540e <__swbuf_r>
 8005360:	3001      	adds	r0, #1
 8005362:	d1e7      	bne.n	8005334 <_puts_r+0x68>
 8005364:	e7ce      	b.n	8005304 <_puts_r+0x38>
 8005366:	3e01      	subs	r6, #1
 8005368:	e7e4      	b.n	8005334 <_puts_r+0x68>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	6022      	str	r2, [r4, #0]
 8005370:	220a      	movs	r2, #10
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	e7ee      	b.n	8005354 <_puts_r+0x88>
	...

08005378 <puts>:
 8005378:	4b02      	ldr	r3, [pc, #8]	@ (8005384 <puts+0xc>)
 800537a:	4601      	mov	r1, r0
 800537c:	6818      	ldr	r0, [r3, #0]
 800537e:	f7ff bfa5 	b.w	80052cc <_puts_r>
 8005382:	bf00      	nop
 8005384:	20000018 	.word	0x20000018

08005388 <__sread>:
 8005388:	b510      	push	{r4, lr}
 800538a:	460c      	mov	r4, r1
 800538c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005390:	f000 f900 	bl	8005594 <_read_r>
 8005394:	2800      	cmp	r0, #0
 8005396:	bfab      	itete	ge
 8005398:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800539a:	89a3      	ldrhlt	r3, [r4, #12]
 800539c:	181b      	addge	r3, r3, r0
 800539e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053a2:	bfac      	ite	ge
 80053a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053a6:	81a3      	strhlt	r3, [r4, #12]
 80053a8:	bd10      	pop	{r4, pc}

080053aa <__swrite>:
 80053aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ae:	461f      	mov	r7, r3
 80053b0:	898b      	ldrh	r3, [r1, #12]
 80053b2:	4605      	mov	r5, r0
 80053b4:	05db      	lsls	r3, r3, #23
 80053b6:	460c      	mov	r4, r1
 80053b8:	4616      	mov	r6, r2
 80053ba:	d505      	bpl.n	80053c8 <__swrite+0x1e>
 80053bc:	2302      	movs	r3, #2
 80053be:	2200      	movs	r2, #0
 80053c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c4:	f000 f8d4 	bl	8005570 <_lseek_r>
 80053c8:	89a3      	ldrh	r3, [r4, #12]
 80053ca:	4632      	mov	r2, r6
 80053cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053d0:	81a3      	strh	r3, [r4, #12]
 80053d2:	4628      	mov	r0, r5
 80053d4:	463b      	mov	r3, r7
 80053d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053de:	f000 b8eb 	b.w	80055b8 <_write_r>

080053e2 <__sseek>:
 80053e2:	b510      	push	{r4, lr}
 80053e4:	460c      	mov	r4, r1
 80053e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ea:	f000 f8c1 	bl	8005570 <_lseek_r>
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	bf15      	itete	ne
 80053f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053fe:	81a3      	strheq	r3, [r4, #12]
 8005400:	bf18      	it	ne
 8005402:	81a3      	strhne	r3, [r4, #12]
 8005404:	bd10      	pop	{r4, pc}

08005406 <__sclose>:
 8005406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540a:	f000 b8a1 	b.w	8005550 <_close_r>

0800540e <__swbuf_r>:
 800540e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005410:	460e      	mov	r6, r1
 8005412:	4614      	mov	r4, r2
 8005414:	4605      	mov	r5, r0
 8005416:	b118      	cbz	r0, 8005420 <__swbuf_r+0x12>
 8005418:	6a03      	ldr	r3, [r0, #32]
 800541a:	b90b      	cbnz	r3, 8005420 <__swbuf_r+0x12>
 800541c:	f7ff ff0e 	bl	800523c <__sinit>
 8005420:	69a3      	ldr	r3, [r4, #24]
 8005422:	60a3      	str	r3, [r4, #8]
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	071a      	lsls	r2, r3, #28
 8005428:	d501      	bpl.n	800542e <__swbuf_r+0x20>
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	b943      	cbnz	r3, 8005440 <__swbuf_r+0x32>
 800542e:	4621      	mov	r1, r4
 8005430:	4628      	mov	r0, r5
 8005432:	f000 f82b 	bl	800548c <__swsetup_r>
 8005436:	b118      	cbz	r0, 8005440 <__swbuf_r+0x32>
 8005438:	f04f 37ff 	mov.w	r7, #4294967295
 800543c:	4638      	mov	r0, r7
 800543e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	6922      	ldr	r2, [r4, #16]
 8005444:	b2f6      	uxtb	r6, r6
 8005446:	1a98      	subs	r0, r3, r2
 8005448:	6963      	ldr	r3, [r4, #20]
 800544a:	4637      	mov	r7, r6
 800544c:	4283      	cmp	r3, r0
 800544e:	dc05      	bgt.n	800545c <__swbuf_r+0x4e>
 8005450:	4621      	mov	r1, r4
 8005452:	4628      	mov	r0, r5
 8005454:	f001 fd9a 	bl	8006f8c <_fflush_r>
 8005458:	2800      	cmp	r0, #0
 800545a:	d1ed      	bne.n	8005438 <__swbuf_r+0x2a>
 800545c:	68a3      	ldr	r3, [r4, #8]
 800545e:	3b01      	subs	r3, #1
 8005460:	60a3      	str	r3, [r4, #8]
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	6022      	str	r2, [r4, #0]
 8005468:	701e      	strb	r6, [r3, #0]
 800546a:	6962      	ldr	r2, [r4, #20]
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	429a      	cmp	r2, r3
 8005470:	d004      	beq.n	800547c <__swbuf_r+0x6e>
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	07db      	lsls	r3, r3, #31
 8005476:	d5e1      	bpl.n	800543c <__swbuf_r+0x2e>
 8005478:	2e0a      	cmp	r6, #10
 800547a:	d1df      	bne.n	800543c <__swbuf_r+0x2e>
 800547c:	4621      	mov	r1, r4
 800547e:	4628      	mov	r0, r5
 8005480:	f001 fd84 	bl	8006f8c <_fflush_r>
 8005484:	2800      	cmp	r0, #0
 8005486:	d0d9      	beq.n	800543c <__swbuf_r+0x2e>
 8005488:	e7d6      	b.n	8005438 <__swbuf_r+0x2a>
	...

0800548c <__swsetup_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4b29      	ldr	r3, [pc, #164]	@ (8005534 <__swsetup_r+0xa8>)
 8005490:	4605      	mov	r5, r0
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	460c      	mov	r4, r1
 8005496:	b118      	cbz	r0, 80054a0 <__swsetup_r+0x14>
 8005498:	6a03      	ldr	r3, [r0, #32]
 800549a:	b90b      	cbnz	r3, 80054a0 <__swsetup_r+0x14>
 800549c:	f7ff fece 	bl	800523c <__sinit>
 80054a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054a4:	0719      	lsls	r1, r3, #28
 80054a6:	d422      	bmi.n	80054ee <__swsetup_r+0x62>
 80054a8:	06da      	lsls	r2, r3, #27
 80054aa:	d407      	bmi.n	80054bc <__swsetup_r+0x30>
 80054ac:	2209      	movs	r2, #9
 80054ae:	602a      	str	r2, [r5, #0]
 80054b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054b4:	f04f 30ff 	mov.w	r0, #4294967295
 80054b8:	81a3      	strh	r3, [r4, #12]
 80054ba:	e033      	b.n	8005524 <__swsetup_r+0x98>
 80054bc:	0758      	lsls	r0, r3, #29
 80054be:	d512      	bpl.n	80054e6 <__swsetup_r+0x5a>
 80054c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054c2:	b141      	cbz	r1, 80054d6 <__swsetup_r+0x4a>
 80054c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054c8:	4299      	cmp	r1, r3
 80054ca:	d002      	beq.n	80054d2 <__swsetup_r+0x46>
 80054cc:	4628      	mov	r0, r5
 80054ce:	f000 ff1f 	bl	8006310 <_free_r>
 80054d2:	2300      	movs	r3, #0
 80054d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80054dc:	81a3      	strh	r3, [r4, #12]
 80054de:	2300      	movs	r3, #0
 80054e0:	6063      	str	r3, [r4, #4]
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	f043 0308 	orr.w	r3, r3, #8
 80054ec:	81a3      	strh	r3, [r4, #12]
 80054ee:	6923      	ldr	r3, [r4, #16]
 80054f0:	b94b      	cbnz	r3, 8005506 <__swsetup_r+0x7a>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054fc:	d003      	beq.n	8005506 <__swsetup_r+0x7a>
 80054fe:	4621      	mov	r1, r4
 8005500:	4628      	mov	r0, r5
 8005502:	f001 fd90 	bl	8007026 <__smakebuf_r>
 8005506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800550a:	f013 0201 	ands.w	r2, r3, #1
 800550e:	d00a      	beq.n	8005526 <__swsetup_r+0x9a>
 8005510:	2200      	movs	r2, #0
 8005512:	60a2      	str	r2, [r4, #8]
 8005514:	6962      	ldr	r2, [r4, #20]
 8005516:	4252      	negs	r2, r2
 8005518:	61a2      	str	r2, [r4, #24]
 800551a:	6922      	ldr	r2, [r4, #16]
 800551c:	b942      	cbnz	r2, 8005530 <__swsetup_r+0xa4>
 800551e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005522:	d1c5      	bne.n	80054b0 <__swsetup_r+0x24>
 8005524:	bd38      	pop	{r3, r4, r5, pc}
 8005526:	0799      	lsls	r1, r3, #30
 8005528:	bf58      	it	pl
 800552a:	6962      	ldrpl	r2, [r4, #20]
 800552c:	60a2      	str	r2, [r4, #8]
 800552e:	e7f4      	b.n	800551a <__swsetup_r+0x8e>
 8005530:	2000      	movs	r0, #0
 8005532:	e7f7      	b.n	8005524 <__swsetup_r+0x98>
 8005534:	20000018 	.word	0x20000018

08005538 <memset>:
 8005538:	4603      	mov	r3, r0
 800553a:	4402      	add	r2, r0
 800553c:	4293      	cmp	r3, r2
 800553e:	d100      	bne.n	8005542 <memset+0xa>
 8005540:	4770      	bx	lr
 8005542:	f803 1b01 	strb.w	r1, [r3], #1
 8005546:	e7f9      	b.n	800553c <memset+0x4>

08005548 <_localeconv_r>:
 8005548:	4800      	ldr	r0, [pc, #0]	@ (800554c <_localeconv_r+0x4>)
 800554a:	4770      	bx	lr
 800554c:	20000158 	.word	0x20000158

08005550 <_close_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	2300      	movs	r3, #0
 8005554:	4d05      	ldr	r5, [pc, #20]	@ (800556c <_close_r+0x1c>)
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	f7fc fa05 	bl	800196a <_close>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_close_r+0x1a>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_close_r+0x1a>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	2000087c 	.word	0x2000087c

08005570 <_lseek_r>:
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	4611      	mov	r1, r2
 8005578:	2200      	movs	r2, #0
 800557a:	4d05      	ldr	r5, [pc, #20]	@ (8005590 <_lseek_r+0x20>)
 800557c:	602a      	str	r2, [r5, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	f7fc fa17 	bl	80019b2 <_lseek>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d102      	bne.n	800558e <_lseek_r+0x1e>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	b103      	cbz	r3, 800558e <_lseek_r+0x1e>
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	bd38      	pop	{r3, r4, r5, pc}
 8005590:	2000087c 	.word	0x2000087c

08005594 <_read_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4604      	mov	r4, r0
 8005598:	4608      	mov	r0, r1
 800559a:	4611      	mov	r1, r2
 800559c:	2200      	movs	r2, #0
 800559e:	4d05      	ldr	r5, [pc, #20]	@ (80055b4 <_read_r+0x20>)
 80055a0:	602a      	str	r2, [r5, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f7fc f9a8 	bl	80018f8 <_read>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_read_r+0x1e>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_read_r+0x1e>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	2000087c 	.word	0x2000087c

080055b8 <_write_r>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	4604      	mov	r4, r0
 80055bc:	4608      	mov	r0, r1
 80055be:	4611      	mov	r1, r2
 80055c0:	2200      	movs	r2, #0
 80055c2:	4d05      	ldr	r5, [pc, #20]	@ (80055d8 <_write_r+0x20>)
 80055c4:	602a      	str	r2, [r5, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	f7fc f9b3 	bl	8001932 <_write>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_write_r+0x1e>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_write_r+0x1e>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	2000087c 	.word	0x2000087c

080055dc <__errno>:
 80055dc:	4b01      	ldr	r3, [pc, #4]	@ (80055e4 <__errno+0x8>)
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000018 	.word	0x20000018

080055e8 <__libc_init_array>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	2600      	movs	r6, #0
 80055ec:	4d0c      	ldr	r5, [pc, #48]	@ (8005620 <__libc_init_array+0x38>)
 80055ee:	4c0d      	ldr	r4, [pc, #52]	@ (8005624 <__libc_init_array+0x3c>)
 80055f0:	1b64      	subs	r4, r4, r5
 80055f2:	10a4      	asrs	r4, r4, #2
 80055f4:	42a6      	cmp	r6, r4
 80055f6:	d109      	bne.n	800560c <__libc_init_array+0x24>
 80055f8:	f001 fe34 	bl	8007264 <_init>
 80055fc:	2600      	movs	r6, #0
 80055fe:	4d0a      	ldr	r5, [pc, #40]	@ (8005628 <__libc_init_array+0x40>)
 8005600:	4c0a      	ldr	r4, [pc, #40]	@ (800562c <__libc_init_array+0x44>)
 8005602:	1b64      	subs	r4, r4, r5
 8005604:	10a4      	asrs	r4, r4, #2
 8005606:	42a6      	cmp	r6, r4
 8005608:	d105      	bne.n	8005616 <__libc_init_array+0x2e>
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005610:	4798      	blx	r3
 8005612:	3601      	adds	r6, #1
 8005614:	e7ee      	b.n	80055f4 <__libc_init_array+0xc>
 8005616:	f855 3b04 	ldr.w	r3, [r5], #4
 800561a:	4798      	blx	r3
 800561c:	3601      	adds	r6, #1
 800561e:	e7f2      	b.n	8005606 <__libc_init_array+0x1e>
 8005620:	08007788 	.word	0x08007788
 8005624:	08007788 	.word	0x08007788
 8005628:	08007788 	.word	0x08007788
 800562c:	0800778c 	.word	0x0800778c

08005630 <__retarget_lock_init_recursive>:
 8005630:	4770      	bx	lr

08005632 <__retarget_lock_acquire_recursive>:
 8005632:	4770      	bx	lr

08005634 <__retarget_lock_release_recursive>:
 8005634:	4770      	bx	lr

08005636 <memchr>:
 8005636:	4603      	mov	r3, r0
 8005638:	b510      	push	{r4, lr}
 800563a:	b2c9      	uxtb	r1, r1
 800563c:	4402      	add	r2, r0
 800563e:	4293      	cmp	r3, r2
 8005640:	4618      	mov	r0, r3
 8005642:	d101      	bne.n	8005648 <memchr+0x12>
 8005644:	2000      	movs	r0, #0
 8005646:	e003      	b.n	8005650 <memchr+0x1a>
 8005648:	7804      	ldrb	r4, [r0, #0]
 800564a:	3301      	adds	r3, #1
 800564c:	428c      	cmp	r4, r1
 800564e:	d1f6      	bne.n	800563e <memchr+0x8>
 8005650:	bd10      	pop	{r4, pc}

08005652 <memcpy>:
 8005652:	440a      	add	r2, r1
 8005654:	4291      	cmp	r1, r2
 8005656:	f100 33ff 	add.w	r3, r0, #4294967295
 800565a:	d100      	bne.n	800565e <memcpy+0xc>
 800565c:	4770      	bx	lr
 800565e:	b510      	push	{r4, lr}
 8005660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005664:	4291      	cmp	r1, r2
 8005666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800566a:	d1f9      	bne.n	8005660 <memcpy+0xe>
 800566c:	bd10      	pop	{r4, pc}

0800566e <quorem>:
 800566e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005672:	6903      	ldr	r3, [r0, #16]
 8005674:	690c      	ldr	r4, [r1, #16]
 8005676:	4607      	mov	r7, r0
 8005678:	42a3      	cmp	r3, r4
 800567a:	db7e      	blt.n	800577a <quorem+0x10c>
 800567c:	3c01      	subs	r4, #1
 800567e:	00a3      	lsls	r3, r4, #2
 8005680:	f100 0514 	add.w	r5, r0, #20
 8005684:	f101 0814 	add.w	r8, r1, #20
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800568e:	9301      	str	r3, [sp, #4]
 8005690:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005694:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005698:	3301      	adds	r3, #1
 800569a:	429a      	cmp	r2, r3
 800569c:	fbb2 f6f3 	udiv	r6, r2, r3
 80056a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056a4:	d32e      	bcc.n	8005704 <quorem+0x96>
 80056a6:	f04f 0a00 	mov.w	sl, #0
 80056aa:	46c4      	mov	ip, r8
 80056ac:	46ae      	mov	lr, r5
 80056ae:	46d3      	mov	fp, sl
 80056b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056b4:	b298      	uxth	r0, r3
 80056b6:	fb06 a000 	mla	r0, r6, r0, sl
 80056ba:	0c1b      	lsrs	r3, r3, #16
 80056bc:	0c02      	lsrs	r2, r0, #16
 80056be:	fb06 2303 	mla	r3, r6, r3, r2
 80056c2:	f8de 2000 	ldr.w	r2, [lr]
 80056c6:	b280      	uxth	r0, r0
 80056c8:	b292      	uxth	r2, r2
 80056ca:	1a12      	subs	r2, r2, r0
 80056cc:	445a      	add	r2, fp
 80056ce:	f8de 0000 	ldr.w	r0, [lr]
 80056d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80056dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80056e0:	b292      	uxth	r2, r2
 80056e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80056e6:	45e1      	cmp	r9, ip
 80056e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80056ec:	f84e 2b04 	str.w	r2, [lr], #4
 80056f0:	d2de      	bcs.n	80056b0 <quorem+0x42>
 80056f2:	9b00      	ldr	r3, [sp, #0]
 80056f4:	58eb      	ldr	r3, [r5, r3]
 80056f6:	b92b      	cbnz	r3, 8005704 <quorem+0x96>
 80056f8:	9b01      	ldr	r3, [sp, #4]
 80056fa:	3b04      	subs	r3, #4
 80056fc:	429d      	cmp	r5, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	d32f      	bcc.n	8005762 <quorem+0xf4>
 8005702:	613c      	str	r4, [r7, #16]
 8005704:	4638      	mov	r0, r7
 8005706:	f001 f979 	bl	80069fc <__mcmp>
 800570a:	2800      	cmp	r0, #0
 800570c:	db25      	blt.n	800575a <quorem+0xec>
 800570e:	4629      	mov	r1, r5
 8005710:	2000      	movs	r0, #0
 8005712:	f858 2b04 	ldr.w	r2, [r8], #4
 8005716:	f8d1 c000 	ldr.w	ip, [r1]
 800571a:	fa1f fe82 	uxth.w	lr, r2
 800571e:	fa1f f38c 	uxth.w	r3, ip
 8005722:	eba3 030e 	sub.w	r3, r3, lr
 8005726:	4403      	add	r3, r0
 8005728:	0c12      	lsrs	r2, r2, #16
 800572a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800572e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005732:	b29b      	uxth	r3, r3
 8005734:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005738:	45c1      	cmp	r9, r8
 800573a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800573e:	f841 3b04 	str.w	r3, [r1], #4
 8005742:	d2e6      	bcs.n	8005712 <quorem+0xa4>
 8005744:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005748:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800574c:	b922      	cbnz	r2, 8005758 <quorem+0xea>
 800574e:	3b04      	subs	r3, #4
 8005750:	429d      	cmp	r5, r3
 8005752:	461a      	mov	r2, r3
 8005754:	d30b      	bcc.n	800576e <quorem+0x100>
 8005756:	613c      	str	r4, [r7, #16]
 8005758:	3601      	adds	r6, #1
 800575a:	4630      	mov	r0, r6
 800575c:	b003      	add	sp, #12
 800575e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	3b04      	subs	r3, #4
 8005766:	2a00      	cmp	r2, #0
 8005768:	d1cb      	bne.n	8005702 <quorem+0x94>
 800576a:	3c01      	subs	r4, #1
 800576c:	e7c6      	b.n	80056fc <quorem+0x8e>
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	3b04      	subs	r3, #4
 8005772:	2a00      	cmp	r2, #0
 8005774:	d1ef      	bne.n	8005756 <quorem+0xe8>
 8005776:	3c01      	subs	r4, #1
 8005778:	e7ea      	b.n	8005750 <quorem+0xe2>
 800577a:	2000      	movs	r0, #0
 800577c:	e7ee      	b.n	800575c <quorem+0xee>
	...

08005780 <_dtoa_r>:
 8005780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	4614      	mov	r4, r2
 8005786:	461d      	mov	r5, r3
 8005788:	69c7      	ldr	r7, [r0, #28]
 800578a:	b097      	sub	sp, #92	@ 0x5c
 800578c:	4683      	mov	fp, r0
 800578e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005792:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005794:	b97f      	cbnz	r7, 80057b6 <_dtoa_r+0x36>
 8005796:	2010      	movs	r0, #16
 8005798:	f000 fe02 	bl	80063a0 <malloc>
 800579c:	4602      	mov	r2, r0
 800579e:	f8cb 001c 	str.w	r0, [fp, #28]
 80057a2:	b920      	cbnz	r0, 80057ae <_dtoa_r+0x2e>
 80057a4:	21ef      	movs	r1, #239	@ 0xef
 80057a6:	4ba8      	ldr	r3, [pc, #672]	@ (8005a48 <_dtoa_r+0x2c8>)
 80057a8:	48a8      	ldr	r0, [pc, #672]	@ (8005a4c <_dtoa_r+0x2cc>)
 80057aa:	f001 fcab 	bl	8007104 <__assert_func>
 80057ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80057b2:	6007      	str	r7, [r0, #0]
 80057b4:	60c7      	str	r7, [r0, #12]
 80057b6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80057ba:	6819      	ldr	r1, [r3, #0]
 80057bc:	b159      	cbz	r1, 80057d6 <_dtoa_r+0x56>
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	2301      	movs	r3, #1
 80057c2:	4093      	lsls	r3, r2
 80057c4:	604a      	str	r2, [r1, #4]
 80057c6:	608b      	str	r3, [r1, #8]
 80057c8:	4658      	mov	r0, fp
 80057ca:	f000 fedf 	bl	800658c <_Bfree>
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	1e2b      	subs	r3, r5, #0
 80057d8:	bfaf      	iteee	ge
 80057da:	2300      	movge	r3, #0
 80057dc:	2201      	movlt	r2, #1
 80057de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80057e2:	9303      	strlt	r3, [sp, #12]
 80057e4:	bfa8      	it	ge
 80057e6:	6033      	strge	r3, [r6, #0]
 80057e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80057ec:	4b98      	ldr	r3, [pc, #608]	@ (8005a50 <_dtoa_r+0x2d0>)
 80057ee:	bfb8      	it	lt
 80057f0:	6032      	strlt	r2, [r6, #0]
 80057f2:	ea33 0308 	bics.w	r3, r3, r8
 80057f6:	d112      	bne.n	800581e <_dtoa_r+0x9e>
 80057f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80057fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005804:	4323      	orrs	r3, r4
 8005806:	f000 8550 	beq.w	80062aa <_dtoa_r+0xb2a>
 800580a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800580c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005a54 <_dtoa_r+0x2d4>
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8552 	beq.w	80062ba <_dtoa_r+0xb3a>
 8005816:	f10a 0303 	add.w	r3, sl, #3
 800581a:	f000 bd4c 	b.w	80062b6 <_dtoa_r+0xb36>
 800581e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005822:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005826:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800582a:	2200      	movs	r2, #0
 800582c:	2300      	movs	r3, #0
 800582e:	f7fb f8bb 	bl	80009a8 <__aeabi_dcmpeq>
 8005832:	4607      	mov	r7, r0
 8005834:	b158      	cbz	r0, 800584e <_dtoa_r+0xce>
 8005836:	2301      	movs	r3, #1
 8005838:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800583e:	b113      	cbz	r3, 8005846 <_dtoa_r+0xc6>
 8005840:	4b85      	ldr	r3, [pc, #532]	@ (8005a58 <_dtoa_r+0x2d8>)
 8005842:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005a5c <_dtoa_r+0x2dc>
 800584a:	f000 bd36 	b.w	80062ba <_dtoa_r+0xb3a>
 800584e:	ab14      	add	r3, sp, #80	@ 0x50
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	ab15      	add	r3, sp, #84	@ 0x54
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	4658      	mov	r0, fp
 8005858:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800585c:	f001 f97e 	bl	8006b5c <__d2b>
 8005860:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005864:	4681      	mov	r9, r0
 8005866:	2e00      	cmp	r6, #0
 8005868:	d077      	beq.n	800595a <_dtoa_r+0x1da>
 800586a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800586e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005870:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005878:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800587c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005880:	9712      	str	r7, [sp, #72]	@ 0x48
 8005882:	4619      	mov	r1, r3
 8005884:	2200      	movs	r2, #0
 8005886:	4b76      	ldr	r3, [pc, #472]	@ (8005a60 <_dtoa_r+0x2e0>)
 8005888:	f7fa fc6e 	bl	8000168 <__aeabi_dsub>
 800588c:	a368      	add	r3, pc, #416	@ (adr r3, 8005a30 <_dtoa_r+0x2b0>)
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	f7fa fe21 	bl	80004d8 <__aeabi_dmul>
 8005896:	a368      	add	r3, pc, #416	@ (adr r3, 8005a38 <_dtoa_r+0x2b8>)
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f7fa fc66 	bl	800016c <__adddf3>
 80058a0:	4604      	mov	r4, r0
 80058a2:	4630      	mov	r0, r6
 80058a4:	460d      	mov	r5, r1
 80058a6:	f7fa fdad 	bl	8000404 <__aeabi_i2d>
 80058aa:	a365      	add	r3, pc, #404	@ (adr r3, 8005a40 <_dtoa_r+0x2c0>)
 80058ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b0:	f7fa fe12 	bl	80004d8 <__aeabi_dmul>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4620      	mov	r0, r4
 80058ba:	4629      	mov	r1, r5
 80058bc:	f7fa fc56 	bl	800016c <__adddf3>
 80058c0:	4604      	mov	r4, r0
 80058c2:	460d      	mov	r5, r1
 80058c4:	f7fb f8b8 	bl	8000a38 <__aeabi_d2iz>
 80058c8:	2200      	movs	r2, #0
 80058ca:	4607      	mov	r7, r0
 80058cc:	2300      	movs	r3, #0
 80058ce:	4620      	mov	r0, r4
 80058d0:	4629      	mov	r1, r5
 80058d2:	f7fb f873 	bl	80009bc <__aeabi_dcmplt>
 80058d6:	b140      	cbz	r0, 80058ea <_dtoa_r+0x16a>
 80058d8:	4638      	mov	r0, r7
 80058da:	f7fa fd93 	bl	8000404 <__aeabi_i2d>
 80058de:	4622      	mov	r2, r4
 80058e0:	462b      	mov	r3, r5
 80058e2:	f7fb f861 	bl	80009a8 <__aeabi_dcmpeq>
 80058e6:	b900      	cbnz	r0, 80058ea <_dtoa_r+0x16a>
 80058e8:	3f01      	subs	r7, #1
 80058ea:	2f16      	cmp	r7, #22
 80058ec:	d853      	bhi.n	8005996 <_dtoa_r+0x216>
 80058ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005a64 <_dtoa_r+0x2e4>)
 80058f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fc:	f7fb f85e 	bl	80009bc <__aeabi_dcmplt>
 8005900:	2800      	cmp	r0, #0
 8005902:	d04a      	beq.n	800599a <_dtoa_r+0x21a>
 8005904:	2300      	movs	r3, #0
 8005906:	3f01      	subs	r7, #1
 8005908:	930f      	str	r3, [sp, #60]	@ 0x3c
 800590a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800590c:	1b9b      	subs	r3, r3, r6
 800590e:	1e5a      	subs	r2, r3, #1
 8005910:	bf46      	itte	mi
 8005912:	f1c3 0801 	rsbmi	r8, r3, #1
 8005916:	2300      	movmi	r3, #0
 8005918:	f04f 0800 	movpl.w	r8, #0
 800591c:	9209      	str	r2, [sp, #36]	@ 0x24
 800591e:	bf48      	it	mi
 8005920:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005922:	2f00      	cmp	r7, #0
 8005924:	db3b      	blt.n	800599e <_dtoa_r+0x21e>
 8005926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005928:	970e      	str	r7, [sp, #56]	@ 0x38
 800592a:	443b      	add	r3, r7
 800592c:	9309      	str	r3, [sp, #36]	@ 0x24
 800592e:	2300      	movs	r3, #0
 8005930:	930a      	str	r3, [sp, #40]	@ 0x28
 8005932:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005934:	2b09      	cmp	r3, #9
 8005936:	d866      	bhi.n	8005a06 <_dtoa_r+0x286>
 8005938:	2b05      	cmp	r3, #5
 800593a:	bfc4      	itt	gt
 800593c:	3b04      	subgt	r3, #4
 800593e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005940:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005942:	bfc8      	it	gt
 8005944:	2400      	movgt	r4, #0
 8005946:	f1a3 0302 	sub.w	r3, r3, #2
 800594a:	bfd8      	it	le
 800594c:	2401      	movle	r4, #1
 800594e:	2b03      	cmp	r3, #3
 8005950:	d864      	bhi.n	8005a1c <_dtoa_r+0x29c>
 8005952:	e8df f003 	tbb	[pc, r3]
 8005956:	382b      	.short	0x382b
 8005958:	5636      	.short	0x5636
 800595a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800595e:	441e      	add	r6, r3
 8005960:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005964:	2b20      	cmp	r3, #32
 8005966:	bfc1      	itttt	gt
 8005968:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800596c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005970:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005974:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005978:	bfd6      	itet	le
 800597a:	f1c3 0320 	rsble	r3, r3, #32
 800597e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005982:	fa04 f003 	lslle.w	r0, r4, r3
 8005986:	f7fa fd2d 	bl	80003e4 <__aeabi_ui2d>
 800598a:	2201      	movs	r2, #1
 800598c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005990:	3e01      	subs	r6, #1
 8005992:	9212      	str	r2, [sp, #72]	@ 0x48
 8005994:	e775      	b.n	8005882 <_dtoa_r+0x102>
 8005996:	2301      	movs	r3, #1
 8005998:	e7b6      	b.n	8005908 <_dtoa_r+0x188>
 800599a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800599c:	e7b5      	b.n	800590a <_dtoa_r+0x18a>
 800599e:	427b      	negs	r3, r7
 80059a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80059a2:	2300      	movs	r3, #0
 80059a4:	eba8 0807 	sub.w	r8, r8, r7
 80059a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80059aa:	e7c2      	b.n	8005932 <_dtoa_r+0x1b2>
 80059ac:	2300      	movs	r3, #0
 80059ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	dc35      	bgt.n	8005a22 <_dtoa_r+0x2a2>
 80059b6:	2301      	movs	r3, #1
 80059b8:	461a      	mov	r2, r3
 80059ba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80059be:	9221      	str	r2, [sp, #132]	@ 0x84
 80059c0:	e00b      	b.n	80059da <_dtoa_r+0x25a>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e7f3      	b.n	80059ae <_dtoa_r+0x22e>
 80059c6:	2300      	movs	r3, #0
 80059c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059cc:	18fb      	adds	r3, r7, r3
 80059ce:	9308      	str	r3, [sp, #32]
 80059d0:	3301      	adds	r3, #1
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	9307      	str	r3, [sp, #28]
 80059d6:	bfb8      	it	lt
 80059d8:	2301      	movlt	r3, #1
 80059da:	2100      	movs	r1, #0
 80059dc:	2204      	movs	r2, #4
 80059de:	f8db 001c 	ldr.w	r0, [fp, #28]
 80059e2:	f102 0514 	add.w	r5, r2, #20
 80059e6:	429d      	cmp	r5, r3
 80059e8:	d91f      	bls.n	8005a2a <_dtoa_r+0x2aa>
 80059ea:	6041      	str	r1, [r0, #4]
 80059ec:	4658      	mov	r0, fp
 80059ee:	f000 fd8d 	bl	800650c <_Balloc>
 80059f2:	4682      	mov	sl, r0
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d139      	bne.n	8005a6c <_dtoa_r+0x2ec>
 80059f8:	4602      	mov	r2, r0
 80059fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80059fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005a68 <_dtoa_r+0x2e8>)
 8005a00:	e6d2      	b.n	80057a8 <_dtoa_r+0x28>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e7e0      	b.n	80059c8 <_dtoa_r+0x248>
 8005a06:	2401      	movs	r4, #1
 8005a08:	2300      	movs	r3, #0
 8005a0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005a0c:	9320      	str	r3, [sp, #128]	@ 0x80
 8005a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a12:	2200      	movs	r2, #0
 8005a14:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005a18:	2312      	movs	r3, #18
 8005a1a:	e7d0      	b.n	80059be <_dtoa_r+0x23e>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a20:	e7f5      	b.n	8005a0e <_dtoa_r+0x28e>
 8005a22:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005a28:	e7d7      	b.n	80059da <_dtoa_r+0x25a>
 8005a2a:	3101      	adds	r1, #1
 8005a2c:	0052      	lsls	r2, r2, #1
 8005a2e:	e7d8      	b.n	80059e2 <_dtoa_r+0x262>
 8005a30:	636f4361 	.word	0x636f4361
 8005a34:	3fd287a7 	.word	0x3fd287a7
 8005a38:	8b60c8b3 	.word	0x8b60c8b3
 8005a3c:	3fc68a28 	.word	0x3fc68a28
 8005a40:	509f79fb 	.word	0x509f79fb
 8005a44:	3fd34413 	.word	0x3fd34413
 8005a48:	08007453 	.word	0x08007453
 8005a4c:	0800746a 	.word	0x0800746a
 8005a50:	7ff00000 	.word	0x7ff00000
 8005a54:	0800744f 	.word	0x0800744f
 8005a58:	08007423 	.word	0x08007423
 8005a5c:	08007422 	.word	0x08007422
 8005a60:	3ff80000 	.word	0x3ff80000
 8005a64:	08007560 	.word	0x08007560
 8005a68:	080074c2 	.word	0x080074c2
 8005a6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a70:	6018      	str	r0, [r3, #0]
 8005a72:	9b07      	ldr	r3, [sp, #28]
 8005a74:	2b0e      	cmp	r3, #14
 8005a76:	f200 80a4 	bhi.w	8005bc2 <_dtoa_r+0x442>
 8005a7a:	2c00      	cmp	r4, #0
 8005a7c:	f000 80a1 	beq.w	8005bc2 <_dtoa_r+0x442>
 8005a80:	2f00      	cmp	r7, #0
 8005a82:	dd33      	ble.n	8005aec <_dtoa_r+0x36c>
 8005a84:	4b86      	ldr	r3, [pc, #536]	@ (8005ca0 <_dtoa_r+0x520>)
 8005a86:	f007 020f 	and.w	r2, r7, #15
 8005a8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a8e:	05f8      	lsls	r0, r7, #23
 8005a90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a94:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a9c:	d516      	bpl.n	8005acc <_dtoa_r+0x34c>
 8005a9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005aa2:	4b80      	ldr	r3, [pc, #512]	@ (8005ca4 <_dtoa_r+0x524>)
 8005aa4:	2603      	movs	r6, #3
 8005aa6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005aaa:	f7fa fe3f 	bl	800072c <__aeabi_ddiv>
 8005aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ab2:	f004 040f 	and.w	r4, r4, #15
 8005ab6:	4d7b      	ldr	r5, [pc, #492]	@ (8005ca4 <_dtoa_r+0x524>)
 8005ab8:	b954      	cbnz	r4, 8005ad0 <_dtoa_r+0x350>
 8005aba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ac2:	f7fa fe33 	bl	800072c <__aeabi_ddiv>
 8005ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aca:	e028      	b.n	8005b1e <_dtoa_r+0x39e>
 8005acc:	2602      	movs	r6, #2
 8005ace:	e7f2      	b.n	8005ab6 <_dtoa_r+0x336>
 8005ad0:	07e1      	lsls	r1, r4, #31
 8005ad2:	d508      	bpl.n	8005ae6 <_dtoa_r+0x366>
 8005ad4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ad8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005adc:	f7fa fcfc 	bl	80004d8 <__aeabi_dmul>
 8005ae0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ae4:	3601      	adds	r6, #1
 8005ae6:	1064      	asrs	r4, r4, #1
 8005ae8:	3508      	adds	r5, #8
 8005aea:	e7e5      	b.n	8005ab8 <_dtoa_r+0x338>
 8005aec:	f000 80d2 	beq.w	8005c94 <_dtoa_r+0x514>
 8005af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005af4:	427c      	negs	r4, r7
 8005af6:	4b6a      	ldr	r3, [pc, #424]	@ (8005ca0 <_dtoa_r+0x520>)
 8005af8:	f004 020f 	and.w	r2, r4, #15
 8005afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f7fa fce8 	bl	80004d8 <__aeabi_dmul>
 8005b08:	2602      	movs	r6, #2
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b10:	4d64      	ldr	r5, [pc, #400]	@ (8005ca4 <_dtoa_r+0x524>)
 8005b12:	1124      	asrs	r4, r4, #4
 8005b14:	2c00      	cmp	r4, #0
 8005b16:	f040 80b2 	bne.w	8005c7e <_dtoa_r+0x4fe>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1d3      	bne.n	8005ac6 <_dtoa_r+0x346>
 8005b1e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 80b7 	beq.w	8005c98 <_dtoa_r+0x518>
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	4629      	mov	r1, r5
 8005b30:	4b5d      	ldr	r3, [pc, #372]	@ (8005ca8 <_dtoa_r+0x528>)
 8005b32:	f7fa ff43 	bl	80009bc <__aeabi_dcmplt>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	f000 80ae 	beq.w	8005c98 <_dtoa_r+0x518>
 8005b3c:	9b07      	ldr	r3, [sp, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80aa 	beq.w	8005c98 <_dtoa_r+0x518>
 8005b44:	9b08      	ldr	r3, [sp, #32]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	dd37      	ble.n	8005bba <_dtoa_r+0x43a>
 8005b4a:	1e7b      	subs	r3, r7, #1
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	9304      	str	r3, [sp, #16]
 8005b50:	2200      	movs	r2, #0
 8005b52:	4629      	mov	r1, r5
 8005b54:	4b55      	ldr	r3, [pc, #340]	@ (8005cac <_dtoa_r+0x52c>)
 8005b56:	f7fa fcbf 	bl	80004d8 <__aeabi_dmul>
 8005b5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b5e:	9c08      	ldr	r4, [sp, #32]
 8005b60:	3601      	adds	r6, #1
 8005b62:	4630      	mov	r0, r6
 8005b64:	f7fa fc4e 	bl	8000404 <__aeabi_i2d>
 8005b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b6c:	f7fa fcb4 	bl	80004d8 <__aeabi_dmul>
 8005b70:	2200      	movs	r2, #0
 8005b72:	4b4f      	ldr	r3, [pc, #316]	@ (8005cb0 <_dtoa_r+0x530>)
 8005b74:	f7fa fafa 	bl	800016c <__adddf3>
 8005b78:	4605      	mov	r5, r0
 8005b7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005b7e:	2c00      	cmp	r4, #0
 8005b80:	f040 809a 	bne.w	8005cb8 <_dtoa_r+0x538>
 8005b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005cb4 <_dtoa_r+0x534>)
 8005b8c:	f7fa faec 	bl	8000168 <__aeabi_dsub>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b98:	462a      	mov	r2, r5
 8005b9a:	4633      	mov	r3, r6
 8005b9c:	f7fa ff2c 	bl	80009f8 <__aeabi_dcmpgt>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	f040 828e 	bne.w	80060c2 <_dtoa_r+0x942>
 8005ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005baa:	462a      	mov	r2, r5
 8005bac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005bb0:	f7fa ff04 	bl	80009bc <__aeabi_dcmplt>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	f040 8127 	bne.w	8005e08 <_dtoa_r+0x688>
 8005bba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005bbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005bc2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f2c0 8163 	blt.w	8005e90 <_dtoa_r+0x710>
 8005bca:	2f0e      	cmp	r7, #14
 8005bcc:	f300 8160 	bgt.w	8005e90 <_dtoa_r+0x710>
 8005bd0:	4b33      	ldr	r3, [pc, #204]	@ (8005ca0 <_dtoa_r+0x520>)
 8005bd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005bd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bda:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005bde:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	da03      	bge.n	8005bec <_dtoa_r+0x46c>
 8005be4:	9b07      	ldr	r3, [sp, #28]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f340 8100 	ble.w	8005dec <_dtoa_r+0x66c>
 8005bec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005bf0:	4656      	mov	r6, sl
 8005bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	f7fa fd97 	bl	800072c <__aeabi_ddiv>
 8005bfe:	f7fa ff1b 	bl	8000a38 <__aeabi_d2iz>
 8005c02:	4680      	mov	r8, r0
 8005c04:	f7fa fbfe 	bl	8000404 <__aeabi_i2d>
 8005c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c0c:	f7fa fc64 	bl	80004d8 <__aeabi_dmul>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4620      	mov	r0, r4
 8005c16:	4629      	mov	r1, r5
 8005c18:	f7fa faa6 	bl	8000168 <__aeabi_dsub>
 8005c1c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c20:	9d07      	ldr	r5, [sp, #28]
 8005c22:	f806 4b01 	strb.w	r4, [r6], #1
 8005c26:	eba6 040a 	sub.w	r4, r6, sl
 8005c2a:	42a5      	cmp	r5, r4
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	f040 8116 	bne.w	8005e60 <_dtoa_r+0x6e0>
 8005c34:	f7fa fa9a 	bl	800016c <__adddf3>
 8005c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	460d      	mov	r5, r1
 8005c40:	f7fa feda 	bl	80009f8 <__aeabi_dcmpgt>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	f040 80f8 	bne.w	8005e3a <_dtoa_r+0x6ba>
 8005c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c4e:	4620      	mov	r0, r4
 8005c50:	4629      	mov	r1, r5
 8005c52:	f7fa fea9 	bl	80009a8 <__aeabi_dcmpeq>
 8005c56:	b118      	cbz	r0, 8005c60 <_dtoa_r+0x4e0>
 8005c58:	f018 0f01 	tst.w	r8, #1
 8005c5c:	f040 80ed 	bne.w	8005e3a <_dtoa_r+0x6ba>
 8005c60:	4649      	mov	r1, r9
 8005c62:	4658      	mov	r0, fp
 8005c64:	f000 fc92 	bl	800658c <_Bfree>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	7033      	strb	r3, [r6, #0]
 8005c6c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005c6e:	3701      	adds	r7, #1
 8005c70:	601f      	str	r7, [r3, #0]
 8005c72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8320 	beq.w	80062ba <_dtoa_r+0xb3a>
 8005c7a:	601e      	str	r6, [r3, #0]
 8005c7c:	e31d      	b.n	80062ba <_dtoa_r+0xb3a>
 8005c7e:	07e2      	lsls	r2, r4, #31
 8005c80:	d505      	bpl.n	8005c8e <_dtoa_r+0x50e>
 8005c82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c86:	f7fa fc27 	bl	80004d8 <__aeabi_dmul>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	3601      	adds	r6, #1
 8005c8e:	1064      	asrs	r4, r4, #1
 8005c90:	3508      	adds	r5, #8
 8005c92:	e73f      	b.n	8005b14 <_dtoa_r+0x394>
 8005c94:	2602      	movs	r6, #2
 8005c96:	e742      	b.n	8005b1e <_dtoa_r+0x39e>
 8005c98:	9c07      	ldr	r4, [sp, #28]
 8005c9a:	9704      	str	r7, [sp, #16]
 8005c9c:	e761      	b.n	8005b62 <_dtoa_r+0x3e2>
 8005c9e:	bf00      	nop
 8005ca0:	08007560 	.word	0x08007560
 8005ca4:	08007538 	.word	0x08007538
 8005ca8:	3ff00000 	.word	0x3ff00000
 8005cac:	40240000 	.word	0x40240000
 8005cb0:	401c0000 	.word	0x401c0000
 8005cb4:	40140000 	.word	0x40140000
 8005cb8:	4b70      	ldr	r3, [pc, #448]	@ (8005e7c <_dtoa_r+0x6fc>)
 8005cba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cc4:	4454      	add	r4, sl
 8005cc6:	2900      	cmp	r1, #0
 8005cc8:	d045      	beq.n	8005d56 <_dtoa_r+0x5d6>
 8005cca:	2000      	movs	r0, #0
 8005ccc:	496c      	ldr	r1, [pc, #432]	@ (8005e80 <_dtoa_r+0x700>)
 8005cce:	f7fa fd2d 	bl	800072c <__aeabi_ddiv>
 8005cd2:	4633      	mov	r3, r6
 8005cd4:	462a      	mov	r2, r5
 8005cd6:	f7fa fa47 	bl	8000168 <__aeabi_dsub>
 8005cda:	4656      	mov	r6, sl
 8005cdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ce4:	f7fa fea8 	bl	8000a38 <__aeabi_d2iz>
 8005ce8:	4605      	mov	r5, r0
 8005cea:	f7fa fb8b 	bl	8000404 <__aeabi_i2d>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cf6:	f7fa fa37 	bl	8000168 <__aeabi_dsub>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	3530      	adds	r5, #48	@ 0x30
 8005d00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d08:	f806 5b01 	strb.w	r5, [r6], #1
 8005d0c:	f7fa fe56 	bl	80009bc <__aeabi_dcmplt>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d163      	bne.n	8005ddc <_dtoa_r+0x65c>
 8005d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d18:	2000      	movs	r0, #0
 8005d1a:	495a      	ldr	r1, [pc, #360]	@ (8005e84 <_dtoa_r+0x704>)
 8005d1c:	f7fa fa24 	bl	8000168 <__aeabi_dsub>
 8005d20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d24:	f7fa fe4a 	bl	80009bc <__aeabi_dcmplt>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	f040 8087 	bne.w	8005e3c <_dtoa_r+0x6bc>
 8005d2e:	42a6      	cmp	r6, r4
 8005d30:	f43f af43 	beq.w	8005bba <_dtoa_r+0x43a>
 8005d34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d38:	2200      	movs	r2, #0
 8005d3a:	4b53      	ldr	r3, [pc, #332]	@ (8005e88 <_dtoa_r+0x708>)
 8005d3c:	f7fa fbcc 	bl	80004d8 <__aeabi_dmul>
 8005d40:	2200      	movs	r2, #0
 8005d42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d4a:	4b4f      	ldr	r3, [pc, #316]	@ (8005e88 <_dtoa_r+0x708>)
 8005d4c:	f7fa fbc4 	bl	80004d8 <__aeabi_dmul>
 8005d50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d54:	e7c4      	b.n	8005ce0 <_dtoa_r+0x560>
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f7fa fbbd 	bl	80004d8 <__aeabi_dmul>
 8005d5e:	4656      	mov	r6, sl
 8005d60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d64:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d6a:	f7fa fe65 	bl	8000a38 <__aeabi_d2iz>
 8005d6e:	4605      	mov	r5, r0
 8005d70:	f7fa fb48 	bl	8000404 <__aeabi_i2d>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d7c:	f7fa f9f4 	bl	8000168 <__aeabi_dsub>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	3530      	adds	r5, #48	@ 0x30
 8005d86:	f806 5b01 	strb.w	r5, [r6], #1
 8005d8a:	42a6      	cmp	r6, r4
 8005d8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	d124      	bne.n	8005de0 <_dtoa_r+0x660>
 8005d96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d9a:	4b39      	ldr	r3, [pc, #228]	@ (8005e80 <_dtoa_r+0x700>)
 8005d9c:	f7fa f9e6 	bl	800016c <__adddf3>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005da8:	f7fa fe26 	bl	80009f8 <__aeabi_dcmpgt>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d145      	bne.n	8005e3c <_dtoa_r+0x6bc>
 8005db0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005db4:	2000      	movs	r0, #0
 8005db6:	4932      	ldr	r1, [pc, #200]	@ (8005e80 <_dtoa_r+0x700>)
 8005db8:	f7fa f9d6 	bl	8000168 <__aeabi_dsub>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dc4:	f7fa fdfa 	bl	80009bc <__aeabi_dcmplt>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	f43f aef6 	beq.w	8005bba <_dtoa_r+0x43a>
 8005dce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005dd0:	1e73      	subs	r3, r6, #1
 8005dd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005dd4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005dd8:	2b30      	cmp	r3, #48	@ 0x30
 8005dda:	d0f8      	beq.n	8005dce <_dtoa_r+0x64e>
 8005ddc:	9f04      	ldr	r7, [sp, #16]
 8005dde:	e73f      	b.n	8005c60 <_dtoa_r+0x4e0>
 8005de0:	4b29      	ldr	r3, [pc, #164]	@ (8005e88 <_dtoa_r+0x708>)
 8005de2:	f7fa fb79 	bl	80004d8 <__aeabi_dmul>
 8005de6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dea:	e7bc      	b.n	8005d66 <_dtoa_r+0x5e6>
 8005dec:	d10c      	bne.n	8005e08 <_dtoa_r+0x688>
 8005dee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005df2:	2200      	movs	r2, #0
 8005df4:	4b25      	ldr	r3, [pc, #148]	@ (8005e8c <_dtoa_r+0x70c>)
 8005df6:	f7fa fb6f 	bl	80004d8 <__aeabi_dmul>
 8005dfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dfe:	f7fa fdf1 	bl	80009e4 <__aeabi_dcmpge>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	f000 815b 	beq.w	80060be <_dtoa_r+0x93e>
 8005e08:	2400      	movs	r4, #0
 8005e0a:	4625      	mov	r5, r4
 8005e0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e0e:	4656      	mov	r6, sl
 8005e10:	43db      	mvns	r3, r3
 8005e12:	9304      	str	r3, [sp, #16]
 8005e14:	2700      	movs	r7, #0
 8005e16:	4621      	mov	r1, r4
 8005e18:	4658      	mov	r0, fp
 8005e1a:	f000 fbb7 	bl	800658c <_Bfree>
 8005e1e:	2d00      	cmp	r5, #0
 8005e20:	d0dc      	beq.n	8005ddc <_dtoa_r+0x65c>
 8005e22:	b12f      	cbz	r7, 8005e30 <_dtoa_r+0x6b0>
 8005e24:	42af      	cmp	r7, r5
 8005e26:	d003      	beq.n	8005e30 <_dtoa_r+0x6b0>
 8005e28:	4639      	mov	r1, r7
 8005e2a:	4658      	mov	r0, fp
 8005e2c:	f000 fbae 	bl	800658c <_Bfree>
 8005e30:	4629      	mov	r1, r5
 8005e32:	4658      	mov	r0, fp
 8005e34:	f000 fbaa 	bl	800658c <_Bfree>
 8005e38:	e7d0      	b.n	8005ddc <_dtoa_r+0x65c>
 8005e3a:	9704      	str	r7, [sp, #16]
 8005e3c:	4633      	mov	r3, r6
 8005e3e:	461e      	mov	r6, r3
 8005e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e44:	2a39      	cmp	r2, #57	@ 0x39
 8005e46:	d107      	bne.n	8005e58 <_dtoa_r+0x6d8>
 8005e48:	459a      	cmp	sl, r3
 8005e4a:	d1f8      	bne.n	8005e3e <_dtoa_r+0x6be>
 8005e4c:	9a04      	ldr	r2, [sp, #16]
 8005e4e:	3201      	adds	r2, #1
 8005e50:	9204      	str	r2, [sp, #16]
 8005e52:	2230      	movs	r2, #48	@ 0x30
 8005e54:	f88a 2000 	strb.w	r2, [sl]
 8005e58:	781a      	ldrb	r2, [r3, #0]
 8005e5a:	3201      	adds	r2, #1
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	e7bd      	b.n	8005ddc <_dtoa_r+0x65c>
 8005e60:	2200      	movs	r2, #0
 8005e62:	4b09      	ldr	r3, [pc, #36]	@ (8005e88 <_dtoa_r+0x708>)
 8005e64:	f7fa fb38 	bl	80004d8 <__aeabi_dmul>
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	460d      	mov	r5, r1
 8005e70:	f7fa fd9a 	bl	80009a8 <__aeabi_dcmpeq>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	f43f aebc 	beq.w	8005bf2 <_dtoa_r+0x472>
 8005e7a:	e6f1      	b.n	8005c60 <_dtoa_r+0x4e0>
 8005e7c:	08007560 	.word	0x08007560
 8005e80:	3fe00000 	.word	0x3fe00000
 8005e84:	3ff00000 	.word	0x3ff00000
 8005e88:	40240000 	.word	0x40240000
 8005e8c:	40140000 	.word	0x40140000
 8005e90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e92:	2a00      	cmp	r2, #0
 8005e94:	f000 80db 	beq.w	800604e <_dtoa_r+0x8ce>
 8005e98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005e9a:	2a01      	cmp	r2, #1
 8005e9c:	f300 80bf 	bgt.w	800601e <_dtoa_r+0x89e>
 8005ea0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005ea2:	2a00      	cmp	r2, #0
 8005ea4:	f000 80b7 	beq.w	8006016 <_dtoa_r+0x896>
 8005ea8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005eac:	4646      	mov	r6, r8
 8005eae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005eb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	441a      	add	r2, r3
 8005eb6:	4658      	mov	r0, fp
 8005eb8:	4498      	add	r8, r3
 8005eba:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ebc:	f000 fc1a 	bl	80066f4 <__i2b>
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	b15e      	cbz	r6, 8005edc <_dtoa_r+0x75c>
 8005ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	dd08      	ble.n	8005edc <_dtoa_r+0x75c>
 8005eca:	42b3      	cmp	r3, r6
 8005ecc:	bfa8      	it	ge
 8005ece:	4633      	movge	r3, r6
 8005ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ed2:	eba8 0803 	sub.w	r8, r8, r3
 8005ed6:	1af6      	subs	r6, r6, r3
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8005edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ede:	b1f3      	cbz	r3, 8005f1e <_dtoa_r+0x79e>
 8005ee0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80b7 	beq.w	8006056 <_dtoa_r+0x8d6>
 8005ee8:	b18c      	cbz	r4, 8005f0e <_dtoa_r+0x78e>
 8005eea:	4629      	mov	r1, r5
 8005eec:	4622      	mov	r2, r4
 8005eee:	4658      	mov	r0, fp
 8005ef0:	f000 fcbe 	bl	8006870 <__pow5mult>
 8005ef4:	464a      	mov	r2, r9
 8005ef6:	4601      	mov	r1, r0
 8005ef8:	4605      	mov	r5, r0
 8005efa:	4658      	mov	r0, fp
 8005efc:	f000 fc10 	bl	8006720 <__multiply>
 8005f00:	4649      	mov	r1, r9
 8005f02:	9004      	str	r0, [sp, #16]
 8005f04:	4658      	mov	r0, fp
 8005f06:	f000 fb41 	bl	800658c <_Bfree>
 8005f0a:	9b04      	ldr	r3, [sp, #16]
 8005f0c:	4699      	mov	r9, r3
 8005f0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f10:	1b1a      	subs	r2, r3, r4
 8005f12:	d004      	beq.n	8005f1e <_dtoa_r+0x79e>
 8005f14:	4649      	mov	r1, r9
 8005f16:	4658      	mov	r0, fp
 8005f18:	f000 fcaa 	bl	8006870 <__pow5mult>
 8005f1c:	4681      	mov	r9, r0
 8005f1e:	2101      	movs	r1, #1
 8005f20:	4658      	mov	r0, fp
 8005f22:	f000 fbe7 	bl	80066f4 <__i2b>
 8005f26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f28:	4604      	mov	r4, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 81c9 	beq.w	80062c2 <_dtoa_r+0xb42>
 8005f30:	461a      	mov	r2, r3
 8005f32:	4601      	mov	r1, r0
 8005f34:	4658      	mov	r0, fp
 8005f36:	f000 fc9b 	bl	8006870 <__pow5mult>
 8005f3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	f300 808f 	bgt.w	8006062 <_dtoa_r+0x8e2>
 8005f44:	9b02      	ldr	r3, [sp, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f040 8087 	bne.w	800605a <_dtoa_r+0x8da>
 8005f4c:	9b03      	ldr	r3, [sp, #12]
 8005f4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f040 8083 	bne.w	800605e <_dtoa_r+0x8de>
 8005f58:	9b03      	ldr	r3, [sp, #12]
 8005f5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f5e:	0d1b      	lsrs	r3, r3, #20
 8005f60:	051b      	lsls	r3, r3, #20
 8005f62:	b12b      	cbz	r3, 8005f70 <_dtoa_r+0x7f0>
 8005f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f66:	f108 0801 	add.w	r8, r8, #1
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f6e:	2301      	movs	r3, #1
 8005f70:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 81aa 	beq.w	80062ce <_dtoa_r+0xb4e>
 8005f7a:	6923      	ldr	r3, [r4, #16]
 8005f7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f80:	6918      	ldr	r0, [r3, #16]
 8005f82:	f000 fb6b 	bl	800665c <__hi0bits>
 8005f86:	f1c0 0020 	rsb	r0, r0, #32
 8005f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f8c:	4418      	add	r0, r3
 8005f8e:	f010 001f 	ands.w	r0, r0, #31
 8005f92:	d071      	beq.n	8006078 <_dtoa_r+0x8f8>
 8005f94:	f1c0 0320 	rsb	r3, r0, #32
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	dd65      	ble.n	8006068 <_dtoa_r+0x8e8>
 8005f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f9e:	f1c0 001c 	rsb	r0, r0, #28
 8005fa2:	4403      	add	r3, r0
 8005fa4:	4480      	add	r8, r0
 8005fa6:	4406      	add	r6, r0
 8005fa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005faa:	f1b8 0f00 	cmp.w	r8, #0
 8005fae:	dd05      	ble.n	8005fbc <_dtoa_r+0x83c>
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	4642      	mov	r2, r8
 8005fb4:	4658      	mov	r0, fp
 8005fb6:	f000 fcb5 	bl	8006924 <__lshift>
 8005fba:	4681      	mov	r9, r0
 8005fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	dd05      	ble.n	8005fce <_dtoa_r+0x84e>
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	4658      	mov	r0, fp
 8005fc8:	f000 fcac 	bl	8006924 <__lshift>
 8005fcc:	4604      	mov	r4, r0
 8005fce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d053      	beq.n	800607c <_dtoa_r+0x8fc>
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4648      	mov	r0, r9
 8005fd8:	f000 fd10 	bl	80069fc <__mcmp>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	da4d      	bge.n	800607c <_dtoa_r+0x8fc>
 8005fe0:	1e7b      	subs	r3, r7, #1
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	9304      	str	r3, [sp, #16]
 8005fe6:	220a      	movs	r2, #10
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4658      	mov	r0, fp
 8005fec:	f000 faf0 	bl	80065d0 <__multadd>
 8005ff0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ff2:	4681      	mov	r9, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 816c 	beq.w	80062d2 <_dtoa_r+0xb52>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	220a      	movs	r2, #10
 8006000:	4658      	mov	r0, fp
 8006002:	f000 fae5 	bl	80065d0 <__multadd>
 8006006:	9b08      	ldr	r3, [sp, #32]
 8006008:	4605      	mov	r5, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	dc61      	bgt.n	80060d2 <_dtoa_r+0x952>
 800600e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006010:	2b02      	cmp	r3, #2
 8006012:	dc3b      	bgt.n	800608c <_dtoa_r+0x90c>
 8006014:	e05d      	b.n	80060d2 <_dtoa_r+0x952>
 8006016:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006018:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800601c:	e746      	b.n	8005eac <_dtoa_r+0x72c>
 800601e:	9b07      	ldr	r3, [sp, #28]
 8006020:	1e5c      	subs	r4, r3, #1
 8006022:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006024:	42a3      	cmp	r3, r4
 8006026:	bfbf      	itttt	lt
 8006028:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800602a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800602c:	1ae3      	sublt	r3, r4, r3
 800602e:	18d2      	addlt	r2, r2, r3
 8006030:	bfa8      	it	ge
 8006032:	1b1c      	subge	r4, r3, r4
 8006034:	9b07      	ldr	r3, [sp, #28]
 8006036:	bfbe      	ittt	lt
 8006038:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800603a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800603c:	2400      	movlt	r4, #0
 800603e:	2b00      	cmp	r3, #0
 8006040:	bfb5      	itete	lt
 8006042:	eba8 0603 	sublt.w	r6, r8, r3
 8006046:	4646      	movge	r6, r8
 8006048:	2300      	movlt	r3, #0
 800604a:	9b07      	ldrge	r3, [sp, #28]
 800604c:	e730      	b.n	8005eb0 <_dtoa_r+0x730>
 800604e:	4646      	mov	r6, r8
 8006050:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006052:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006054:	e735      	b.n	8005ec2 <_dtoa_r+0x742>
 8006056:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006058:	e75c      	b.n	8005f14 <_dtoa_r+0x794>
 800605a:	2300      	movs	r3, #0
 800605c:	e788      	b.n	8005f70 <_dtoa_r+0x7f0>
 800605e:	9b02      	ldr	r3, [sp, #8]
 8006060:	e786      	b.n	8005f70 <_dtoa_r+0x7f0>
 8006062:	2300      	movs	r3, #0
 8006064:	930a      	str	r3, [sp, #40]	@ 0x28
 8006066:	e788      	b.n	8005f7a <_dtoa_r+0x7fa>
 8006068:	d09f      	beq.n	8005faa <_dtoa_r+0x82a>
 800606a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800606c:	331c      	adds	r3, #28
 800606e:	441a      	add	r2, r3
 8006070:	4498      	add	r8, r3
 8006072:	441e      	add	r6, r3
 8006074:	9209      	str	r2, [sp, #36]	@ 0x24
 8006076:	e798      	b.n	8005faa <_dtoa_r+0x82a>
 8006078:	4603      	mov	r3, r0
 800607a:	e7f6      	b.n	800606a <_dtoa_r+0x8ea>
 800607c:	9b07      	ldr	r3, [sp, #28]
 800607e:	9704      	str	r7, [sp, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	dc20      	bgt.n	80060c6 <_dtoa_r+0x946>
 8006084:	9308      	str	r3, [sp, #32]
 8006086:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006088:	2b02      	cmp	r3, #2
 800608a:	dd1e      	ble.n	80060ca <_dtoa_r+0x94a>
 800608c:	9b08      	ldr	r3, [sp, #32]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f47f aebc 	bne.w	8005e0c <_dtoa_r+0x68c>
 8006094:	4621      	mov	r1, r4
 8006096:	2205      	movs	r2, #5
 8006098:	4658      	mov	r0, fp
 800609a:	f000 fa99 	bl	80065d0 <__multadd>
 800609e:	4601      	mov	r1, r0
 80060a0:	4604      	mov	r4, r0
 80060a2:	4648      	mov	r0, r9
 80060a4:	f000 fcaa 	bl	80069fc <__mcmp>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	f77f aeaf 	ble.w	8005e0c <_dtoa_r+0x68c>
 80060ae:	2331      	movs	r3, #49	@ 0x31
 80060b0:	4656      	mov	r6, sl
 80060b2:	f806 3b01 	strb.w	r3, [r6], #1
 80060b6:	9b04      	ldr	r3, [sp, #16]
 80060b8:	3301      	adds	r3, #1
 80060ba:	9304      	str	r3, [sp, #16]
 80060bc:	e6aa      	b.n	8005e14 <_dtoa_r+0x694>
 80060be:	9c07      	ldr	r4, [sp, #28]
 80060c0:	9704      	str	r7, [sp, #16]
 80060c2:	4625      	mov	r5, r4
 80060c4:	e7f3      	b.n	80060ae <_dtoa_r+0x92e>
 80060c6:	9b07      	ldr	r3, [sp, #28]
 80060c8:	9308      	str	r3, [sp, #32]
 80060ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 8104 	beq.w	80062da <_dtoa_r+0xb5a>
 80060d2:	2e00      	cmp	r6, #0
 80060d4:	dd05      	ble.n	80060e2 <_dtoa_r+0x962>
 80060d6:	4629      	mov	r1, r5
 80060d8:	4632      	mov	r2, r6
 80060da:	4658      	mov	r0, fp
 80060dc:	f000 fc22 	bl	8006924 <__lshift>
 80060e0:	4605      	mov	r5, r0
 80060e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d05a      	beq.n	800619e <_dtoa_r+0xa1e>
 80060e8:	4658      	mov	r0, fp
 80060ea:	6869      	ldr	r1, [r5, #4]
 80060ec:	f000 fa0e 	bl	800650c <_Balloc>
 80060f0:	4606      	mov	r6, r0
 80060f2:	b928      	cbnz	r0, 8006100 <_dtoa_r+0x980>
 80060f4:	4602      	mov	r2, r0
 80060f6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80060fa:	4b83      	ldr	r3, [pc, #524]	@ (8006308 <_dtoa_r+0xb88>)
 80060fc:	f7ff bb54 	b.w	80057a8 <_dtoa_r+0x28>
 8006100:	692a      	ldr	r2, [r5, #16]
 8006102:	f105 010c 	add.w	r1, r5, #12
 8006106:	3202      	adds	r2, #2
 8006108:	0092      	lsls	r2, r2, #2
 800610a:	300c      	adds	r0, #12
 800610c:	f7ff faa1 	bl	8005652 <memcpy>
 8006110:	2201      	movs	r2, #1
 8006112:	4631      	mov	r1, r6
 8006114:	4658      	mov	r0, fp
 8006116:	f000 fc05 	bl	8006924 <__lshift>
 800611a:	462f      	mov	r7, r5
 800611c:	4605      	mov	r5, r0
 800611e:	f10a 0301 	add.w	r3, sl, #1
 8006122:	9307      	str	r3, [sp, #28]
 8006124:	9b08      	ldr	r3, [sp, #32]
 8006126:	4453      	add	r3, sl
 8006128:	930b      	str	r3, [sp, #44]	@ 0x2c
 800612a:	9b02      	ldr	r3, [sp, #8]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	930a      	str	r3, [sp, #40]	@ 0x28
 8006132:	9b07      	ldr	r3, [sp, #28]
 8006134:	4621      	mov	r1, r4
 8006136:	3b01      	subs	r3, #1
 8006138:	4648      	mov	r0, r9
 800613a:	9302      	str	r3, [sp, #8]
 800613c:	f7ff fa97 	bl	800566e <quorem>
 8006140:	4639      	mov	r1, r7
 8006142:	9008      	str	r0, [sp, #32]
 8006144:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006148:	4648      	mov	r0, r9
 800614a:	f000 fc57 	bl	80069fc <__mcmp>
 800614e:	462a      	mov	r2, r5
 8006150:	9009      	str	r0, [sp, #36]	@ 0x24
 8006152:	4621      	mov	r1, r4
 8006154:	4658      	mov	r0, fp
 8006156:	f000 fc6d 	bl	8006a34 <__mdiff>
 800615a:	68c2      	ldr	r2, [r0, #12]
 800615c:	4606      	mov	r6, r0
 800615e:	bb02      	cbnz	r2, 80061a2 <_dtoa_r+0xa22>
 8006160:	4601      	mov	r1, r0
 8006162:	4648      	mov	r0, r9
 8006164:	f000 fc4a 	bl	80069fc <__mcmp>
 8006168:	4602      	mov	r2, r0
 800616a:	4631      	mov	r1, r6
 800616c:	4658      	mov	r0, fp
 800616e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006170:	f000 fa0c 	bl	800658c <_Bfree>
 8006174:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006176:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006178:	9e07      	ldr	r6, [sp, #28]
 800617a:	ea43 0102 	orr.w	r1, r3, r2
 800617e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006180:	4319      	orrs	r1, r3
 8006182:	d110      	bne.n	80061a6 <_dtoa_r+0xa26>
 8006184:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006188:	d029      	beq.n	80061de <_dtoa_r+0xa5e>
 800618a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800618c:	2b00      	cmp	r3, #0
 800618e:	dd02      	ble.n	8006196 <_dtoa_r+0xa16>
 8006190:	9b08      	ldr	r3, [sp, #32]
 8006192:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006196:	9b02      	ldr	r3, [sp, #8]
 8006198:	f883 8000 	strb.w	r8, [r3]
 800619c:	e63b      	b.n	8005e16 <_dtoa_r+0x696>
 800619e:	4628      	mov	r0, r5
 80061a0:	e7bb      	b.n	800611a <_dtoa_r+0x99a>
 80061a2:	2201      	movs	r2, #1
 80061a4:	e7e1      	b.n	800616a <_dtoa_r+0x9ea>
 80061a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	db04      	blt.n	80061b6 <_dtoa_r+0xa36>
 80061ac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80061ae:	430b      	orrs	r3, r1
 80061b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061b2:	430b      	orrs	r3, r1
 80061b4:	d120      	bne.n	80061f8 <_dtoa_r+0xa78>
 80061b6:	2a00      	cmp	r2, #0
 80061b8:	dded      	ble.n	8006196 <_dtoa_r+0xa16>
 80061ba:	4649      	mov	r1, r9
 80061bc:	2201      	movs	r2, #1
 80061be:	4658      	mov	r0, fp
 80061c0:	f000 fbb0 	bl	8006924 <__lshift>
 80061c4:	4621      	mov	r1, r4
 80061c6:	4681      	mov	r9, r0
 80061c8:	f000 fc18 	bl	80069fc <__mcmp>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	dc03      	bgt.n	80061d8 <_dtoa_r+0xa58>
 80061d0:	d1e1      	bne.n	8006196 <_dtoa_r+0xa16>
 80061d2:	f018 0f01 	tst.w	r8, #1
 80061d6:	d0de      	beq.n	8006196 <_dtoa_r+0xa16>
 80061d8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061dc:	d1d8      	bne.n	8006190 <_dtoa_r+0xa10>
 80061de:	2339      	movs	r3, #57	@ 0x39
 80061e0:	9a02      	ldr	r2, [sp, #8]
 80061e2:	7013      	strb	r3, [r2, #0]
 80061e4:	4633      	mov	r3, r6
 80061e6:	461e      	mov	r6, r3
 80061e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	2a39      	cmp	r2, #57	@ 0x39
 80061f0:	d052      	beq.n	8006298 <_dtoa_r+0xb18>
 80061f2:	3201      	adds	r2, #1
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	e60e      	b.n	8005e16 <_dtoa_r+0x696>
 80061f8:	2a00      	cmp	r2, #0
 80061fa:	dd07      	ble.n	800620c <_dtoa_r+0xa8c>
 80061fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006200:	d0ed      	beq.n	80061de <_dtoa_r+0xa5e>
 8006202:	9a02      	ldr	r2, [sp, #8]
 8006204:	f108 0301 	add.w	r3, r8, #1
 8006208:	7013      	strb	r3, [r2, #0]
 800620a:	e604      	b.n	8005e16 <_dtoa_r+0x696>
 800620c:	9b07      	ldr	r3, [sp, #28]
 800620e:	9a07      	ldr	r2, [sp, #28]
 8006210:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006214:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006216:	4293      	cmp	r3, r2
 8006218:	d028      	beq.n	800626c <_dtoa_r+0xaec>
 800621a:	4649      	mov	r1, r9
 800621c:	2300      	movs	r3, #0
 800621e:	220a      	movs	r2, #10
 8006220:	4658      	mov	r0, fp
 8006222:	f000 f9d5 	bl	80065d0 <__multadd>
 8006226:	42af      	cmp	r7, r5
 8006228:	4681      	mov	r9, r0
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	f04f 020a 	mov.w	r2, #10
 8006232:	4639      	mov	r1, r7
 8006234:	4658      	mov	r0, fp
 8006236:	d107      	bne.n	8006248 <_dtoa_r+0xac8>
 8006238:	f000 f9ca 	bl	80065d0 <__multadd>
 800623c:	4607      	mov	r7, r0
 800623e:	4605      	mov	r5, r0
 8006240:	9b07      	ldr	r3, [sp, #28]
 8006242:	3301      	adds	r3, #1
 8006244:	9307      	str	r3, [sp, #28]
 8006246:	e774      	b.n	8006132 <_dtoa_r+0x9b2>
 8006248:	f000 f9c2 	bl	80065d0 <__multadd>
 800624c:	4629      	mov	r1, r5
 800624e:	4607      	mov	r7, r0
 8006250:	2300      	movs	r3, #0
 8006252:	220a      	movs	r2, #10
 8006254:	4658      	mov	r0, fp
 8006256:	f000 f9bb 	bl	80065d0 <__multadd>
 800625a:	4605      	mov	r5, r0
 800625c:	e7f0      	b.n	8006240 <_dtoa_r+0xac0>
 800625e:	9b08      	ldr	r3, [sp, #32]
 8006260:	2700      	movs	r7, #0
 8006262:	2b00      	cmp	r3, #0
 8006264:	bfcc      	ite	gt
 8006266:	461e      	movgt	r6, r3
 8006268:	2601      	movle	r6, #1
 800626a:	4456      	add	r6, sl
 800626c:	4649      	mov	r1, r9
 800626e:	2201      	movs	r2, #1
 8006270:	4658      	mov	r0, fp
 8006272:	f000 fb57 	bl	8006924 <__lshift>
 8006276:	4621      	mov	r1, r4
 8006278:	4681      	mov	r9, r0
 800627a:	f000 fbbf 	bl	80069fc <__mcmp>
 800627e:	2800      	cmp	r0, #0
 8006280:	dcb0      	bgt.n	80061e4 <_dtoa_r+0xa64>
 8006282:	d102      	bne.n	800628a <_dtoa_r+0xb0a>
 8006284:	f018 0f01 	tst.w	r8, #1
 8006288:	d1ac      	bne.n	80061e4 <_dtoa_r+0xa64>
 800628a:	4633      	mov	r3, r6
 800628c:	461e      	mov	r6, r3
 800628e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006292:	2a30      	cmp	r2, #48	@ 0x30
 8006294:	d0fa      	beq.n	800628c <_dtoa_r+0xb0c>
 8006296:	e5be      	b.n	8005e16 <_dtoa_r+0x696>
 8006298:	459a      	cmp	sl, r3
 800629a:	d1a4      	bne.n	80061e6 <_dtoa_r+0xa66>
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	3301      	adds	r3, #1
 80062a0:	9304      	str	r3, [sp, #16]
 80062a2:	2331      	movs	r3, #49	@ 0x31
 80062a4:	f88a 3000 	strb.w	r3, [sl]
 80062a8:	e5b5      	b.n	8005e16 <_dtoa_r+0x696>
 80062aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80062ac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800630c <_dtoa_r+0xb8c>
 80062b0:	b11b      	cbz	r3, 80062ba <_dtoa_r+0xb3a>
 80062b2:	f10a 0308 	add.w	r3, sl, #8
 80062b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	4650      	mov	r0, sl
 80062bc:	b017      	add	sp, #92	@ 0x5c
 80062be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	f77f ae3d 	ble.w	8005f44 <_dtoa_r+0x7c4>
 80062ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80062ce:	2001      	movs	r0, #1
 80062d0:	e65b      	b.n	8005f8a <_dtoa_r+0x80a>
 80062d2:	9b08      	ldr	r3, [sp, #32]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f77f aed6 	ble.w	8006086 <_dtoa_r+0x906>
 80062da:	4656      	mov	r6, sl
 80062dc:	4621      	mov	r1, r4
 80062de:	4648      	mov	r0, r9
 80062e0:	f7ff f9c5 	bl	800566e <quorem>
 80062e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80062e8:	9b08      	ldr	r3, [sp, #32]
 80062ea:	f806 8b01 	strb.w	r8, [r6], #1
 80062ee:	eba6 020a 	sub.w	r2, r6, sl
 80062f2:	4293      	cmp	r3, r2
 80062f4:	ddb3      	ble.n	800625e <_dtoa_r+0xade>
 80062f6:	4649      	mov	r1, r9
 80062f8:	2300      	movs	r3, #0
 80062fa:	220a      	movs	r2, #10
 80062fc:	4658      	mov	r0, fp
 80062fe:	f000 f967 	bl	80065d0 <__multadd>
 8006302:	4681      	mov	r9, r0
 8006304:	e7ea      	b.n	80062dc <_dtoa_r+0xb5c>
 8006306:	bf00      	nop
 8006308:	080074c2 	.word	0x080074c2
 800630c:	08007446 	.word	0x08007446

08006310 <_free_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4605      	mov	r5, r0
 8006314:	2900      	cmp	r1, #0
 8006316:	d040      	beq.n	800639a <_free_r+0x8a>
 8006318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800631c:	1f0c      	subs	r4, r1, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	bfb8      	it	lt
 8006322:	18e4      	addlt	r4, r4, r3
 8006324:	f000 f8e6 	bl	80064f4 <__malloc_lock>
 8006328:	4a1c      	ldr	r2, [pc, #112]	@ (800639c <_free_r+0x8c>)
 800632a:	6813      	ldr	r3, [r2, #0]
 800632c:	b933      	cbnz	r3, 800633c <_free_r+0x2c>
 800632e:	6063      	str	r3, [r4, #4]
 8006330:	6014      	str	r4, [r2, #0]
 8006332:	4628      	mov	r0, r5
 8006334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006338:	f000 b8e2 	b.w	8006500 <__malloc_unlock>
 800633c:	42a3      	cmp	r3, r4
 800633e:	d908      	bls.n	8006352 <_free_r+0x42>
 8006340:	6820      	ldr	r0, [r4, #0]
 8006342:	1821      	adds	r1, r4, r0
 8006344:	428b      	cmp	r3, r1
 8006346:	bf01      	itttt	eq
 8006348:	6819      	ldreq	r1, [r3, #0]
 800634a:	685b      	ldreq	r3, [r3, #4]
 800634c:	1809      	addeq	r1, r1, r0
 800634e:	6021      	streq	r1, [r4, #0]
 8006350:	e7ed      	b.n	800632e <_free_r+0x1e>
 8006352:	461a      	mov	r2, r3
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	b10b      	cbz	r3, 800635c <_free_r+0x4c>
 8006358:	42a3      	cmp	r3, r4
 800635a:	d9fa      	bls.n	8006352 <_free_r+0x42>
 800635c:	6811      	ldr	r1, [r2, #0]
 800635e:	1850      	adds	r0, r2, r1
 8006360:	42a0      	cmp	r0, r4
 8006362:	d10b      	bne.n	800637c <_free_r+0x6c>
 8006364:	6820      	ldr	r0, [r4, #0]
 8006366:	4401      	add	r1, r0
 8006368:	1850      	adds	r0, r2, r1
 800636a:	4283      	cmp	r3, r0
 800636c:	6011      	str	r1, [r2, #0]
 800636e:	d1e0      	bne.n	8006332 <_free_r+0x22>
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	4408      	add	r0, r1
 8006376:	6010      	str	r0, [r2, #0]
 8006378:	6053      	str	r3, [r2, #4]
 800637a:	e7da      	b.n	8006332 <_free_r+0x22>
 800637c:	d902      	bls.n	8006384 <_free_r+0x74>
 800637e:	230c      	movs	r3, #12
 8006380:	602b      	str	r3, [r5, #0]
 8006382:	e7d6      	b.n	8006332 <_free_r+0x22>
 8006384:	6820      	ldr	r0, [r4, #0]
 8006386:	1821      	adds	r1, r4, r0
 8006388:	428b      	cmp	r3, r1
 800638a:	bf01      	itttt	eq
 800638c:	6819      	ldreq	r1, [r3, #0]
 800638e:	685b      	ldreq	r3, [r3, #4]
 8006390:	1809      	addeq	r1, r1, r0
 8006392:	6021      	streq	r1, [r4, #0]
 8006394:	6063      	str	r3, [r4, #4]
 8006396:	6054      	str	r4, [r2, #4]
 8006398:	e7cb      	b.n	8006332 <_free_r+0x22>
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	20000888 	.word	0x20000888

080063a0 <malloc>:
 80063a0:	4b02      	ldr	r3, [pc, #8]	@ (80063ac <malloc+0xc>)
 80063a2:	4601      	mov	r1, r0
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	f000 b825 	b.w	80063f4 <_malloc_r>
 80063aa:	bf00      	nop
 80063ac:	20000018 	.word	0x20000018

080063b0 <sbrk_aligned>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	4e0f      	ldr	r6, [pc, #60]	@ (80063f0 <sbrk_aligned+0x40>)
 80063b4:	460c      	mov	r4, r1
 80063b6:	6831      	ldr	r1, [r6, #0]
 80063b8:	4605      	mov	r5, r0
 80063ba:	b911      	cbnz	r1, 80063c2 <sbrk_aligned+0x12>
 80063bc:	f000 fe92 	bl	80070e4 <_sbrk_r>
 80063c0:	6030      	str	r0, [r6, #0]
 80063c2:	4621      	mov	r1, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	f000 fe8d 	bl	80070e4 <_sbrk_r>
 80063ca:	1c43      	adds	r3, r0, #1
 80063cc:	d103      	bne.n	80063d6 <sbrk_aligned+0x26>
 80063ce:	f04f 34ff 	mov.w	r4, #4294967295
 80063d2:	4620      	mov	r0, r4
 80063d4:	bd70      	pop	{r4, r5, r6, pc}
 80063d6:	1cc4      	adds	r4, r0, #3
 80063d8:	f024 0403 	bic.w	r4, r4, #3
 80063dc:	42a0      	cmp	r0, r4
 80063de:	d0f8      	beq.n	80063d2 <sbrk_aligned+0x22>
 80063e0:	1a21      	subs	r1, r4, r0
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 fe7e 	bl	80070e4 <_sbrk_r>
 80063e8:	3001      	adds	r0, #1
 80063ea:	d1f2      	bne.n	80063d2 <sbrk_aligned+0x22>
 80063ec:	e7ef      	b.n	80063ce <sbrk_aligned+0x1e>
 80063ee:	bf00      	nop
 80063f0:	20000884 	.word	0x20000884

080063f4 <_malloc_r>:
 80063f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f8:	1ccd      	adds	r5, r1, #3
 80063fa:	f025 0503 	bic.w	r5, r5, #3
 80063fe:	3508      	adds	r5, #8
 8006400:	2d0c      	cmp	r5, #12
 8006402:	bf38      	it	cc
 8006404:	250c      	movcc	r5, #12
 8006406:	2d00      	cmp	r5, #0
 8006408:	4606      	mov	r6, r0
 800640a:	db01      	blt.n	8006410 <_malloc_r+0x1c>
 800640c:	42a9      	cmp	r1, r5
 800640e:	d904      	bls.n	800641a <_malloc_r+0x26>
 8006410:	230c      	movs	r3, #12
 8006412:	6033      	str	r3, [r6, #0]
 8006414:	2000      	movs	r0, #0
 8006416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800641a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064f0 <_malloc_r+0xfc>
 800641e:	f000 f869 	bl	80064f4 <__malloc_lock>
 8006422:	f8d8 3000 	ldr.w	r3, [r8]
 8006426:	461c      	mov	r4, r3
 8006428:	bb44      	cbnz	r4, 800647c <_malloc_r+0x88>
 800642a:	4629      	mov	r1, r5
 800642c:	4630      	mov	r0, r6
 800642e:	f7ff ffbf 	bl	80063b0 <sbrk_aligned>
 8006432:	1c43      	adds	r3, r0, #1
 8006434:	4604      	mov	r4, r0
 8006436:	d158      	bne.n	80064ea <_malloc_r+0xf6>
 8006438:	f8d8 4000 	ldr.w	r4, [r8]
 800643c:	4627      	mov	r7, r4
 800643e:	2f00      	cmp	r7, #0
 8006440:	d143      	bne.n	80064ca <_malloc_r+0xd6>
 8006442:	2c00      	cmp	r4, #0
 8006444:	d04b      	beq.n	80064de <_malloc_r+0xea>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	4639      	mov	r1, r7
 800644a:	4630      	mov	r0, r6
 800644c:	eb04 0903 	add.w	r9, r4, r3
 8006450:	f000 fe48 	bl	80070e4 <_sbrk_r>
 8006454:	4581      	cmp	r9, r0
 8006456:	d142      	bne.n	80064de <_malloc_r+0xea>
 8006458:	6821      	ldr	r1, [r4, #0]
 800645a:	4630      	mov	r0, r6
 800645c:	1a6d      	subs	r5, r5, r1
 800645e:	4629      	mov	r1, r5
 8006460:	f7ff ffa6 	bl	80063b0 <sbrk_aligned>
 8006464:	3001      	adds	r0, #1
 8006466:	d03a      	beq.n	80064de <_malloc_r+0xea>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	442b      	add	r3, r5
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	f8d8 3000 	ldr.w	r3, [r8]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	bb62      	cbnz	r2, 80064d0 <_malloc_r+0xdc>
 8006476:	f8c8 7000 	str.w	r7, [r8]
 800647a:	e00f      	b.n	800649c <_malloc_r+0xa8>
 800647c:	6822      	ldr	r2, [r4, #0]
 800647e:	1b52      	subs	r2, r2, r5
 8006480:	d420      	bmi.n	80064c4 <_malloc_r+0xd0>
 8006482:	2a0b      	cmp	r2, #11
 8006484:	d917      	bls.n	80064b6 <_malloc_r+0xc2>
 8006486:	1961      	adds	r1, r4, r5
 8006488:	42a3      	cmp	r3, r4
 800648a:	6025      	str	r5, [r4, #0]
 800648c:	bf18      	it	ne
 800648e:	6059      	strne	r1, [r3, #4]
 8006490:	6863      	ldr	r3, [r4, #4]
 8006492:	bf08      	it	eq
 8006494:	f8c8 1000 	streq.w	r1, [r8]
 8006498:	5162      	str	r2, [r4, r5]
 800649a:	604b      	str	r3, [r1, #4]
 800649c:	4630      	mov	r0, r6
 800649e:	f000 f82f 	bl	8006500 <__malloc_unlock>
 80064a2:	f104 000b 	add.w	r0, r4, #11
 80064a6:	1d23      	adds	r3, r4, #4
 80064a8:	f020 0007 	bic.w	r0, r0, #7
 80064ac:	1ac2      	subs	r2, r0, r3
 80064ae:	bf1c      	itt	ne
 80064b0:	1a1b      	subne	r3, r3, r0
 80064b2:	50a3      	strne	r3, [r4, r2]
 80064b4:	e7af      	b.n	8006416 <_malloc_r+0x22>
 80064b6:	6862      	ldr	r2, [r4, #4]
 80064b8:	42a3      	cmp	r3, r4
 80064ba:	bf0c      	ite	eq
 80064bc:	f8c8 2000 	streq.w	r2, [r8]
 80064c0:	605a      	strne	r2, [r3, #4]
 80064c2:	e7eb      	b.n	800649c <_malloc_r+0xa8>
 80064c4:	4623      	mov	r3, r4
 80064c6:	6864      	ldr	r4, [r4, #4]
 80064c8:	e7ae      	b.n	8006428 <_malloc_r+0x34>
 80064ca:	463c      	mov	r4, r7
 80064cc:	687f      	ldr	r7, [r7, #4]
 80064ce:	e7b6      	b.n	800643e <_malloc_r+0x4a>
 80064d0:	461a      	mov	r2, r3
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	42a3      	cmp	r3, r4
 80064d6:	d1fb      	bne.n	80064d0 <_malloc_r+0xdc>
 80064d8:	2300      	movs	r3, #0
 80064da:	6053      	str	r3, [r2, #4]
 80064dc:	e7de      	b.n	800649c <_malloc_r+0xa8>
 80064de:	230c      	movs	r3, #12
 80064e0:	4630      	mov	r0, r6
 80064e2:	6033      	str	r3, [r6, #0]
 80064e4:	f000 f80c 	bl	8006500 <__malloc_unlock>
 80064e8:	e794      	b.n	8006414 <_malloc_r+0x20>
 80064ea:	6005      	str	r5, [r0, #0]
 80064ec:	e7d6      	b.n	800649c <_malloc_r+0xa8>
 80064ee:	bf00      	nop
 80064f0:	20000888 	.word	0x20000888

080064f4 <__malloc_lock>:
 80064f4:	4801      	ldr	r0, [pc, #4]	@ (80064fc <__malloc_lock+0x8>)
 80064f6:	f7ff b89c 	b.w	8005632 <__retarget_lock_acquire_recursive>
 80064fa:	bf00      	nop
 80064fc:	20000880 	.word	0x20000880

08006500 <__malloc_unlock>:
 8006500:	4801      	ldr	r0, [pc, #4]	@ (8006508 <__malloc_unlock+0x8>)
 8006502:	f7ff b897 	b.w	8005634 <__retarget_lock_release_recursive>
 8006506:	bf00      	nop
 8006508:	20000880 	.word	0x20000880

0800650c <_Balloc>:
 800650c:	b570      	push	{r4, r5, r6, lr}
 800650e:	69c6      	ldr	r6, [r0, #28]
 8006510:	4604      	mov	r4, r0
 8006512:	460d      	mov	r5, r1
 8006514:	b976      	cbnz	r6, 8006534 <_Balloc+0x28>
 8006516:	2010      	movs	r0, #16
 8006518:	f7ff ff42 	bl	80063a0 <malloc>
 800651c:	4602      	mov	r2, r0
 800651e:	61e0      	str	r0, [r4, #28]
 8006520:	b920      	cbnz	r0, 800652c <_Balloc+0x20>
 8006522:	216b      	movs	r1, #107	@ 0x6b
 8006524:	4b17      	ldr	r3, [pc, #92]	@ (8006584 <_Balloc+0x78>)
 8006526:	4818      	ldr	r0, [pc, #96]	@ (8006588 <_Balloc+0x7c>)
 8006528:	f000 fdec 	bl	8007104 <__assert_func>
 800652c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006530:	6006      	str	r6, [r0, #0]
 8006532:	60c6      	str	r6, [r0, #12]
 8006534:	69e6      	ldr	r6, [r4, #28]
 8006536:	68f3      	ldr	r3, [r6, #12]
 8006538:	b183      	cbz	r3, 800655c <_Balloc+0x50>
 800653a:	69e3      	ldr	r3, [r4, #28]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006542:	b9b8      	cbnz	r0, 8006574 <_Balloc+0x68>
 8006544:	2101      	movs	r1, #1
 8006546:	fa01 f605 	lsl.w	r6, r1, r5
 800654a:	1d72      	adds	r2, r6, #5
 800654c:	4620      	mov	r0, r4
 800654e:	0092      	lsls	r2, r2, #2
 8006550:	f000 fdf6 	bl	8007140 <_calloc_r>
 8006554:	b160      	cbz	r0, 8006570 <_Balloc+0x64>
 8006556:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800655a:	e00e      	b.n	800657a <_Balloc+0x6e>
 800655c:	2221      	movs	r2, #33	@ 0x21
 800655e:	2104      	movs	r1, #4
 8006560:	4620      	mov	r0, r4
 8006562:	f000 fded 	bl	8007140 <_calloc_r>
 8006566:	69e3      	ldr	r3, [r4, #28]
 8006568:	60f0      	str	r0, [r6, #12]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e4      	bne.n	800653a <_Balloc+0x2e>
 8006570:	2000      	movs	r0, #0
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	6802      	ldr	r2, [r0, #0]
 8006576:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800657a:	2300      	movs	r3, #0
 800657c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006580:	e7f7      	b.n	8006572 <_Balloc+0x66>
 8006582:	bf00      	nop
 8006584:	08007453 	.word	0x08007453
 8006588:	080074d3 	.word	0x080074d3

0800658c <_Bfree>:
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	69c6      	ldr	r6, [r0, #28]
 8006590:	4605      	mov	r5, r0
 8006592:	460c      	mov	r4, r1
 8006594:	b976      	cbnz	r6, 80065b4 <_Bfree+0x28>
 8006596:	2010      	movs	r0, #16
 8006598:	f7ff ff02 	bl	80063a0 <malloc>
 800659c:	4602      	mov	r2, r0
 800659e:	61e8      	str	r0, [r5, #28]
 80065a0:	b920      	cbnz	r0, 80065ac <_Bfree+0x20>
 80065a2:	218f      	movs	r1, #143	@ 0x8f
 80065a4:	4b08      	ldr	r3, [pc, #32]	@ (80065c8 <_Bfree+0x3c>)
 80065a6:	4809      	ldr	r0, [pc, #36]	@ (80065cc <_Bfree+0x40>)
 80065a8:	f000 fdac 	bl	8007104 <__assert_func>
 80065ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065b0:	6006      	str	r6, [r0, #0]
 80065b2:	60c6      	str	r6, [r0, #12]
 80065b4:	b13c      	cbz	r4, 80065c6 <_Bfree+0x3a>
 80065b6:	69eb      	ldr	r3, [r5, #28]
 80065b8:	6862      	ldr	r2, [r4, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065c0:	6021      	str	r1, [r4, #0]
 80065c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
 80065c8:	08007453 	.word	0x08007453
 80065cc:	080074d3 	.word	0x080074d3

080065d0 <__multadd>:
 80065d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d4:	4607      	mov	r7, r0
 80065d6:	460c      	mov	r4, r1
 80065d8:	461e      	mov	r6, r3
 80065da:	2000      	movs	r0, #0
 80065dc:	690d      	ldr	r5, [r1, #16]
 80065de:	f101 0c14 	add.w	ip, r1, #20
 80065e2:	f8dc 3000 	ldr.w	r3, [ip]
 80065e6:	3001      	adds	r0, #1
 80065e8:	b299      	uxth	r1, r3
 80065ea:	fb02 6101 	mla	r1, r2, r1, r6
 80065ee:	0c1e      	lsrs	r6, r3, #16
 80065f0:	0c0b      	lsrs	r3, r1, #16
 80065f2:	fb02 3306 	mla	r3, r2, r6, r3
 80065f6:	b289      	uxth	r1, r1
 80065f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065fc:	4285      	cmp	r5, r0
 80065fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006602:	f84c 1b04 	str.w	r1, [ip], #4
 8006606:	dcec      	bgt.n	80065e2 <__multadd+0x12>
 8006608:	b30e      	cbz	r6, 800664e <__multadd+0x7e>
 800660a:	68a3      	ldr	r3, [r4, #8]
 800660c:	42ab      	cmp	r3, r5
 800660e:	dc19      	bgt.n	8006644 <__multadd+0x74>
 8006610:	6861      	ldr	r1, [r4, #4]
 8006612:	4638      	mov	r0, r7
 8006614:	3101      	adds	r1, #1
 8006616:	f7ff ff79 	bl	800650c <_Balloc>
 800661a:	4680      	mov	r8, r0
 800661c:	b928      	cbnz	r0, 800662a <__multadd+0x5a>
 800661e:	4602      	mov	r2, r0
 8006620:	21ba      	movs	r1, #186	@ 0xba
 8006622:	4b0c      	ldr	r3, [pc, #48]	@ (8006654 <__multadd+0x84>)
 8006624:	480c      	ldr	r0, [pc, #48]	@ (8006658 <__multadd+0x88>)
 8006626:	f000 fd6d 	bl	8007104 <__assert_func>
 800662a:	6922      	ldr	r2, [r4, #16]
 800662c:	f104 010c 	add.w	r1, r4, #12
 8006630:	3202      	adds	r2, #2
 8006632:	0092      	lsls	r2, r2, #2
 8006634:	300c      	adds	r0, #12
 8006636:	f7ff f80c 	bl	8005652 <memcpy>
 800663a:	4621      	mov	r1, r4
 800663c:	4638      	mov	r0, r7
 800663e:	f7ff ffa5 	bl	800658c <_Bfree>
 8006642:	4644      	mov	r4, r8
 8006644:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006648:	3501      	adds	r5, #1
 800664a:	615e      	str	r6, [r3, #20]
 800664c:	6125      	str	r5, [r4, #16]
 800664e:	4620      	mov	r0, r4
 8006650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006654:	080074c2 	.word	0x080074c2
 8006658:	080074d3 	.word	0x080074d3

0800665c <__hi0bits>:
 800665c:	4603      	mov	r3, r0
 800665e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006662:	bf3a      	itte	cc
 8006664:	0403      	lslcc	r3, r0, #16
 8006666:	2010      	movcc	r0, #16
 8006668:	2000      	movcs	r0, #0
 800666a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800666e:	bf3c      	itt	cc
 8006670:	021b      	lslcc	r3, r3, #8
 8006672:	3008      	addcc	r0, #8
 8006674:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006678:	bf3c      	itt	cc
 800667a:	011b      	lslcc	r3, r3, #4
 800667c:	3004      	addcc	r0, #4
 800667e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006682:	bf3c      	itt	cc
 8006684:	009b      	lslcc	r3, r3, #2
 8006686:	3002      	addcc	r0, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	db05      	blt.n	8006698 <__hi0bits+0x3c>
 800668c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006690:	f100 0001 	add.w	r0, r0, #1
 8006694:	bf08      	it	eq
 8006696:	2020      	moveq	r0, #32
 8006698:	4770      	bx	lr

0800669a <__lo0bits>:
 800669a:	6803      	ldr	r3, [r0, #0]
 800669c:	4602      	mov	r2, r0
 800669e:	f013 0007 	ands.w	r0, r3, #7
 80066a2:	d00b      	beq.n	80066bc <__lo0bits+0x22>
 80066a4:	07d9      	lsls	r1, r3, #31
 80066a6:	d421      	bmi.n	80066ec <__lo0bits+0x52>
 80066a8:	0798      	lsls	r0, r3, #30
 80066aa:	bf49      	itett	mi
 80066ac:	085b      	lsrmi	r3, r3, #1
 80066ae:	089b      	lsrpl	r3, r3, #2
 80066b0:	2001      	movmi	r0, #1
 80066b2:	6013      	strmi	r3, [r2, #0]
 80066b4:	bf5c      	itt	pl
 80066b6:	2002      	movpl	r0, #2
 80066b8:	6013      	strpl	r3, [r2, #0]
 80066ba:	4770      	bx	lr
 80066bc:	b299      	uxth	r1, r3
 80066be:	b909      	cbnz	r1, 80066c4 <__lo0bits+0x2a>
 80066c0:	2010      	movs	r0, #16
 80066c2:	0c1b      	lsrs	r3, r3, #16
 80066c4:	b2d9      	uxtb	r1, r3
 80066c6:	b909      	cbnz	r1, 80066cc <__lo0bits+0x32>
 80066c8:	3008      	adds	r0, #8
 80066ca:	0a1b      	lsrs	r3, r3, #8
 80066cc:	0719      	lsls	r1, r3, #28
 80066ce:	bf04      	itt	eq
 80066d0:	091b      	lsreq	r3, r3, #4
 80066d2:	3004      	addeq	r0, #4
 80066d4:	0799      	lsls	r1, r3, #30
 80066d6:	bf04      	itt	eq
 80066d8:	089b      	lsreq	r3, r3, #2
 80066da:	3002      	addeq	r0, #2
 80066dc:	07d9      	lsls	r1, r3, #31
 80066de:	d403      	bmi.n	80066e8 <__lo0bits+0x4e>
 80066e0:	085b      	lsrs	r3, r3, #1
 80066e2:	f100 0001 	add.w	r0, r0, #1
 80066e6:	d003      	beq.n	80066f0 <__lo0bits+0x56>
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	4770      	bx	lr
 80066ec:	2000      	movs	r0, #0
 80066ee:	4770      	bx	lr
 80066f0:	2020      	movs	r0, #32
 80066f2:	4770      	bx	lr

080066f4 <__i2b>:
 80066f4:	b510      	push	{r4, lr}
 80066f6:	460c      	mov	r4, r1
 80066f8:	2101      	movs	r1, #1
 80066fa:	f7ff ff07 	bl	800650c <_Balloc>
 80066fe:	4602      	mov	r2, r0
 8006700:	b928      	cbnz	r0, 800670e <__i2b+0x1a>
 8006702:	f240 1145 	movw	r1, #325	@ 0x145
 8006706:	4b04      	ldr	r3, [pc, #16]	@ (8006718 <__i2b+0x24>)
 8006708:	4804      	ldr	r0, [pc, #16]	@ (800671c <__i2b+0x28>)
 800670a:	f000 fcfb 	bl	8007104 <__assert_func>
 800670e:	2301      	movs	r3, #1
 8006710:	6144      	str	r4, [r0, #20]
 8006712:	6103      	str	r3, [r0, #16]
 8006714:	bd10      	pop	{r4, pc}
 8006716:	bf00      	nop
 8006718:	080074c2 	.word	0x080074c2
 800671c:	080074d3 	.word	0x080074d3

08006720 <__multiply>:
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	4614      	mov	r4, r2
 8006726:	690a      	ldr	r2, [r1, #16]
 8006728:	6923      	ldr	r3, [r4, #16]
 800672a:	460f      	mov	r7, r1
 800672c:	429a      	cmp	r2, r3
 800672e:	bfa2      	ittt	ge
 8006730:	4623      	movge	r3, r4
 8006732:	460c      	movge	r4, r1
 8006734:	461f      	movge	r7, r3
 8006736:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800673a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800673e:	68a3      	ldr	r3, [r4, #8]
 8006740:	6861      	ldr	r1, [r4, #4]
 8006742:	eb0a 0609 	add.w	r6, sl, r9
 8006746:	42b3      	cmp	r3, r6
 8006748:	b085      	sub	sp, #20
 800674a:	bfb8      	it	lt
 800674c:	3101      	addlt	r1, #1
 800674e:	f7ff fedd 	bl	800650c <_Balloc>
 8006752:	b930      	cbnz	r0, 8006762 <__multiply+0x42>
 8006754:	4602      	mov	r2, r0
 8006756:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800675a:	4b43      	ldr	r3, [pc, #268]	@ (8006868 <__multiply+0x148>)
 800675c:	4843      	ldr	r0, [pc, #268]	@ (800686c <__multiply+0x14c>)
 800675e:	f000 fcd1 	bl	8007104 <__assert_func>
 8006762:	f100 0514 	add.w	r5, r0, #20
 8006766:	462b      	mov	r3, r5
 8006768:	2200      	movs	r2, #0
 800676a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800676e:	4543      	cmp	r3, r8
 8006770:	d321      	bcc.n	80067b6 <__multiply+0x96>
 8006772:	f107 0114 	add.w	r1, r7, #20
 8006776:	f104 0214 	add.w	r2, r4, #20
 800677a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800677e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006782:	9302      	str	r3, [sp, #8]
 8006784:	1b13      	subs	r3, r2, r4
 8006786:	3b15      	subs	r3, #21
 8006788:	f023 0303 	bic.w	r3, r3, #3
 800678c:	3304      	adds	r3, #4
 800678e:	f104 0715 	add.w	r7, r4, #21
 8006792:	42ba      	cmp	r2, r7
 8006794:	bf38      	it	cc
 8006796:	2304      	movcc	r3, #4
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	9b02      	ldr	r3, [sp, #8]
 800679c:	9103      	str	r1, [sp, #12]
 800679e:	428b      	cmp	r3, r1
 80067a0:	d80c      	bhi.n	80067bc <__multiply+0x9c>
 80067a2:	2e00      	cmp	r6, #0
 80067a4:	dd03      	ble.n	80067ae <__multiply+0x8e>
 80067a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d05a      	beq.n	8006864 <__multiply+0x144>
 80067ae:	6106      	str	r6, [r0, #16]
 80067b0:	b005      	add	sp, #20
 80067b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b6:	f843 2b04 	str.w	r2, [r3], #4
 80067ba:	e7d8      	b.n	800676e <__multiply+0x4e>
 80067bc:	f8b1 a000 	ldrh.w	sl, [r1]
 80067c0:	f1ba 0f00 	cmp.w	sl, #0
 80067c4:	d023      	beq.n	800680e <__multiply+0xee>
 80067c6:	46a9      	mov	r9, r5
 80067c8:	f04f 0c00 	mov.w	ip, #0
 80067cc:	f104 0e14 	add.w	lr, r4, #20
 80067d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80067d4:	f8d9 3000 	ldr.w	r3, [r9]
 80067d8:	fa1f fb87 	uxth.w	fp, r7
 80067dc:	b29b      	uxth	r3, r3
 80067de:	fb0a 330b 	mla	r3, sl, fp, r3
 80067e2:	4463      	add	r3, ip
 80067e4:	f8d9 c000 	ldr.w	ip, [r9]
 80067e8:	0c3f      	lsrs	r7, r7, #16
 80067ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80067ee:	fb0a c707 	mla	r7, sl, r7, ip
 80067f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80067fc:	4572      	cmp	r2, lr
 80067fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006802:	f849 3b04 	str.w	r3, [r9], #4
 8006806:	d8e3      	bhi.n	80067d0 <__multiply+0xb0>
 8006808:	9b01      	ldr	r3, [sp, #4]
 800680a:	f845 c003 	str.w	ip, [r5, r3]
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	3104      	adds	r1, #4
 8006812:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006816:	f1b9 0f00 	cmp.w	r9, #0
 800681a:	d021      	beq.n	8006860 <__multiply+0x140>
 800681c:	46ae      	mov	lr, r5
 800681e:	f04f 0a00 	mov.w	sl, #0
 8006822:	682b      	ldr	r3, [r5, #0]
 8006824:	f104 0c14 	add.w	ip, r4, #20
 8006828:	f8bc b000 	ldrh.w	fp, [ip]
 800682c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006830:	b29b      	uxth	r3, r3
 8006832:	fb09 770b 	mla	r7, r9, fp, r7
 8006836:	4457      	add	r7, sl
 8006838:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800683c:	f84e 3b04 	str.w	r3, [lr], #4
 8006840:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006844:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006848:	f8be 3000 	ldrh.w	r3, [lr]
 800684c:	4562      	cmp	r2, ip
 800684e:	fb09 330a 	mla	r3, r9, sl, r3
 8006852:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006856:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800685a:	d8e5      	bhi.n	8006828 <__multiply+0x108>
 800685c:	9f01      	ldr	r7, [sp, #4]
 800685e:	51eb      	str	r3, [r5, r7]
 8006860:	3504      	adds	r5, #4
 8006862:	e79a      	b.n	800679a <__multiply+0x7a>
 8006864:	3e01      	subs	r6, #1
 8006866:	e79c      	b.n	80067a2 <__multiply+0x82>
 8006868:	080074c2 	.word	0x080074c2
 800686c:	080074d3 	.word	0x080074d3

08006870 <__pow5mult>:
 8006870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006874:	4615      	mov	r5, r2
 8006876:	f012 0203 	ands.w	r2, r2, #3
 800687a:	4607      	mov	r7, r0
 800687c:	460e      	mov	r6, r1
 800687e:	d007      	beq.n	8006890 <__pow5mult+0x20>
 8006880:	4c25      	ldr	r4, [pc, #148]	@ (8006918 <__pow5mult+0xa8>)
 8006882:	3a01      	subs	r2, #1
 8006884:	2300      	movs	r3, #0
 8006886:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800688a:	f7ff fea1 	bl	80065d0 <__multadd>
 800688e:	4606      	mov	r6, r0
 8006890:	10ad      	asrs	r5, r5, #2
 8006892:	d03d      	beq.n	8006910 <__pow5mult+0xa0>
 8006894:	69fc      	ldr	r4, [r7, #28]
 8006896:	b97c      	cbnz	r4, 80068b8 <__pow5mult+0x48>
 8006898:	2010      	movs	r0, #16
 800689a:	f7ff fd81 	bl	80063a0 <malloc>
 800689e:	4602      	mov	r2, r0
 80068a0:	61f8      	str	r0, [r7, #28]
 80068a2:	b928      	cbnz	r0, 80068b0 <__pow5mult+0x40>
 80068a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80068a8:	4b1c      	ldr	r3, [pc, #112]	@ (800691c <__pow5mult+0xac>)
 80068aa:	481d      	ldr	r0, [pc, #116]	@ (8006920 <__pow5mult+0xb0>)
 80068ac:	f000 fc2a 	bl	8007104 <__assert_func>
 80068b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068b4:	6004      	str	r4, [r0, #0]
 80068b6:	60c4      	str	r4, [r0, #12]
 80068b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80068bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068c0:	b94c      	cbnz	r4, 80068d6 <__pow5mult+0x66>
 80068c2:	f240 2171 	movw	r1, #625	@ 0x271
 80068c6:	4638      	mov	r0, r7
 80068c8:	f7ff ff14 	bl	80066f4 <__i2b>
 80068cc:	2300      	movs	r3, #0
 80068ce:	4604      	mov	r4, r0
 80068d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80068d4:	6003      	str	r3, [r0, #0]
 80068d6:	f04f 0900 	mov.w	r9, #0
 80068da:	07eb      	lsls	r3, r5, #31
 80068dc:	d50a      	bpl.n	80068f4 <__pow5mult+0x84>
 80068de:	4631      	mov	r1, r6
 80068e0:	4622      	mov	r2, r4
 80068e2:	4638      	mov	r0, r7
 80068e4:	f7ff ff1c 	bl	8006720 <__multiply>
 80068e8:	4680      	mov	r8, r0
 80068ea:	4631      	mov	r1, r6
 80068ec:	4638      	mov	r0, r7
 80068ee:	f7ff fe4d 	bl	800658c <_Bfree>
 80068f2:	4646      	mov	r6, r8
 80068f4:	106d      	asrs	r5, r5, #1
 80068f6:	d00b      	beq.n	8006910 <__pow5mult+0xa0>
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	b938      	cbnz	r0, 800690c <__pow5mult+0x9c>
 80068fc:	4622      	mov	r2, r4
 80068fe:	4621      	mov	r1, r4
 8006900:	4638      	mov	r0, r7
 8006902:	f7ff ff0d 	bl	8006720 <__multiply>
 8006906:	6020      	str	r0, [r4, #0]
 8006908:	f8c0 9000 	str.w	r9, [r0]
 800690c:	4604      	mov	r4, r0
 800690e:	e7e4      	b.n	80068da <__pow5mult+0x6a>
 8006910:	4630      	mov	r0, r6
 8006912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006916:	bf00      	nop
 8006918:	0800752c 	.word	0x0800752c
 800691c:	08007453 	.word	0x08007453
 8006920:	080074d3 	.word	0x080074d3

08006924 <__lshift>:
 8006924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006928:	460c      	mov	r4, r1
 800692a:	4607      	mov	r7, r0
 800692c:	4691      	mov	r9, r2
 800692e:	6923      	ldr	r3, [r4, #16]
 8006930:	6849      	ldr	r1, [r1, #4]
 8006932:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006936:	68a3      	ldr	r3, [r4, #8]
 8006938:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800693c:	f108 0601 	add.w	r6, r8, #1
 8006940:	42b3      	cmp	r3, r6
 8006942:	db0b      	blt.n	800695c <__lshift+0x38>
 8006944:	4638      	mov	r0, r7
 8006946:	f7ff fde1 	bl	800650c <_Balloc>
 800694a:	4605      	mov	r5, r0
 800694c:	b948      	cbnz	r0, 8006962 <__lshift+0x3e>
 800694e:	4602      	mov	r2, r0
 8006950:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006954:	4b27      	ldr	r3, [pc, #156]	@ (80069f4 <__lshift+0xd0>)
 8006956:	4828      	ldr	r0, [pc, #160]	@ (80069f8 <__lshift+0xd4>)
 8006958:	f000 fbd4 	bl	8007104 <__assert_func>
 800695c:	3101      	adds	r1, #1
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	e7ee      	b.n	8006940 <__lshift+0x1c>
 8006962:	2300      	movs	r3, #0
 8006964:	f100 0114 	add.w	r1, r0, #20
 8006968:	f100 0210 	add.w	r2, r0, #16
 800696c:	4618      	mov	r0, r3
 800696e:	4553      	cmp	r3, sl
 8006970:	db33      	blt.n	80069da <__lshift+0xb6>
 8006972:	6920      	ldr	r0, [r4, #16]
 8006974:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006978:	f104 0314 	add.w	r3, r4, #20
 800697c:	f019 091f 	ands.w	r9, r9, #31
 8006980:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006984:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006988:	d02b      	beq.n	80069e2 <__lshift+0xbe>
 800698a:	468a      	mov	sl, r1
 800698c:	2200      	movs	r2, #0
 800698e:	f1c9 0e20 	rsb	lr, r9, #32
 8006992:	6818      	ldr	r0, [r3, #0]
 8006994:	fa00 f009 	lsl.w	r0, r0, r9
 8006998:	4310      	orrs	r0, r2
 800699a:	f84a 0b04 	str.w	r0, [sl], #4
 800699e:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a2:	459c      	cmp	ip, r3
 80069a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80069a8:	d8f3      	bhi.n	8006992 <__lshift+0x6e>
 80069aa:	ebac 0304 	sub.w	r3, ip, r4
 80069ae:	3b15      	subs	r3, #21
 80069b0:	f023 0303 	bic.w	r3, r3, #3
 80069b4:	3304      	adds	r3, #4
 80069b6:	f104 0015 	add.w	r0, r4, #21
 80069ba:	4584      	cmp	ip, r0
 80069bc:	bf38      	it	cc
 80069be:	2304      	movcc	r3, #4
 80069c0:	50ca      	str	r2, [r1, r3]
 80069c2:	b10a      	cbz	r2, 80069c8 <__lshift+0xa4>
 80069c4:	f108 0602 	add.w	r6, r8, #2
 80069c8:	3e01      	subs	r6, #1
 80069ca:	4638      	mov	r0, r7
 80069cc:	4621      	mov	r1, r4
 80069ce:	612e      	str	r6, [r5, #16]
 80069d0:	f7ff fddc 	bl	800658c <_Bfree>
 80069d4:	4628      	mov	r0, r5
 80069d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069da:	f842 0f04 	str.w	r0, [r2, #4]!
 80069de:	3301      	adds	r3, #1
 80069e0:	e7c5      	b.n	800696e <__lshift+0x4a>
 80069e2:	3904      	subs	r1, #4
 80069e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e8:	459c      	cmp	ip, r3
 80069ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80069ee:	d8f9      	bhi.n	80069e4 <__lshift+0xc0>
 80069f0:	e7ea      	b.n	80069c8 <__lshift+0xa4>
 80069f2:	bf00      	nop
 80069f4:	080074c2 	.word	0x080074c2
 80069f8:	080074d3 	.word	0x080074d3

080069fc <__mcmp>:
 80069fc:	4603      	mov	r3, r0
 80069fe:	690a      	ldr	r2, [r1, #16]
 8006a00:	6900      	ldr	r0, [r0, #16]
 8006a02:	b530      	push	{r4, r5, lr}
 8006a04:	1a80      	subs	r0, r0, r2
 8006a06:	d10e      	bne.n	8006a26 <__mcmp+0x2a>
 8006a08:	3314      	adds	r3, #20
 8006a0a:	3114      	adds	r1, #20
 8006a0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a1c:	4295      	cmp	r5, r2
 8006a1e:	d003      	beq.n	8006a28 <__mcmp+0x2c>
 8006a20:	d205      	bcs.n	8006a2e <__mcmp+0x32>
 8006a22:	f04f 30ff 	mov.w	r0, #4294967295
 8006a26:	bd30      	pop	{r4, r5, pc}
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	d3f3      	bcc.n	8006a14 <__mcmp+0x18>
 8006a2c:	e7fb      	b.n	8006a26 <__mcmp+0x2a>
 8006a2e:	2001      	movs	r0, #1
 8006a30:	e7f9      	b.n	8006a26 <__mcmp+0x2a>
	...

08006a34 <__mdiff>:
 8006a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a38:	4689      	mov	r9, r1
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4648      	mov	r0, r9
 8006a40:	4614      	mov	r4, r2
 8006a42:	f7ff ffdb 	bl	80069fc <__mcmp>
 8006a46:	1e05      	subs	r5, r0, #0
 8006a48:	d112      	bne.n	8006a70 <__mdiff+0x3c>
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f7ff fd5d 	bl	800650c <_Balloc>
 8006a52:	4602      	mov	r2, r0
 8006a54:	b928      	cbnz	r0, 8006a62 <__mdiff+0x2e>
 8006a56:	f240 2137 	movw	r1, #567	@ 0x237
 8006a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b54 <__mdiff+0x120>)
 8006a5c:	483e      	ldr	r0, [pc, #248]	@ (8006b58 <__mdiff+0x124>)
 8006a5e:	f000 fb51 	bl	8007104 <__assert_func>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a68:	4610      	mov	r0, r2
 8006a6a:	b003      	add	sp, #12
 8006a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a70:	bfbc      	itt	lt
 8006a72:	464b      	movlt	r3, r9
 8006a74:	46a1      	movlt	r9, r4
 8006a76:	4630      	mov	r0, r6
 8006a78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a7c:	bfba      	itte	lt
 8006a7e:	461c      	movlt	r4, r3
 8006a80:	2501      	movlt	r5, #1
 8006a82:	2500      	movge	r5, #0
 8006a84:	f7ff fd42 	bl	800650c <_Balloc>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	b918      	cbnz	r0, 8006a94 <__mdiff+0x60>
 8006a8c:	f240 2145 	movw	r1, #581	@ 0x245
 8006a90:	4b30      	ldr	r3, [pc, #192]	@ (8006b54 <__mdiff+0x120>)
 8006a92:	e7e3      	b.n	8006a5c <__mdiff+0x28>
 8006a94:	f100 0b14 	add.w	fp, r0, #20
 8006a98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a9c:	f109 0310 	add.w	r3, r9, #16
 8006aa0:	60c5      	str	r5, [r0, #12]
 8006aa2:	f04f 0c00 	mov.w	ip, #0
 8006aa6:	f109 0514 	add.w	r5, r9, #20
 8006aaa:	46d9      	mov	r9, fp
 8006aac:	6926      	ldr	r6, [r4, #16]
 8006aae:	f104 0e14 	add.w	lr, r4, #20
 8006ab2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ab6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	9b01      	ldr	r3, [sp, #4]
 8006abe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006ac2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006ac6:	b281      	uxth	r1, r0
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	fa1f f38a 	uxth.w	r3, sl
 8006ace:	1a5b      	subs	r3, r3, r1
 8006ad0:	0c00      	lsrs	r0, r0, #16
 8006ad2:	4463      	add	r3, ip
 8006ad4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006ad8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ae2:	4576      	cmp	r6, lr
 8006ae4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ae8:	f849 3b04 	str.w	r3, [r9], #4
 8006aec:	d8e6      	bhi.n	8006abc <__mdiff+0x88>
 8006aee:	1b33      	subs	r3, r6, r4
 8006af0:	3b15      	subs	r3, #21
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	3415      	adds	r4, #21
 8006af8:	3304      	adds	r3, #4
 8006afa:	42a6      	cmp	r6, r4
 8006afc:	bf38      	it	cc
 8006afe:	2304      	movcc	r3, #4
 8006b00:	441d      	add	r5, r3
 8006b02:	445b      	add	r3, fp
 8006b04:	461e      	mov	r6, r3
 8006b06:	462c      	mov	r4, r5
 8006b08:	4544      	cmp	r4, r8
 8006b0a:	d30e      	bcc.n	8006b2a <__mdiff+0xf6>
 8006b0c:	f108 0103 	add.w	r1, r8, #3
 8006b10:	1b49      	subs	r1, r1, r5
 8006b12:	f021 0103 	bic.w	r1, r1, #3
 8006b16:	3d03      	subs	r5, #3
 8006b18:	45a8      	cmp	r8, r5
 8006b1a:	bf38      	it	cc
 8006b1c:	2100      	movcc	r1, #0
 8006b1e:	440b      	add	r3, r1
 8006b20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b24:	b199      	cbz	r1, 8006b4e <__mdiff+0x11a>
 8006b26:	6117      	str	r7, [r2, #16]
 8006b28:	e79e      	b.n	8006a68 <__mdiff+0x34>
 8006b2a:	46e6      	mov	lr, ip
 8006b2c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b30:	fa1f fc81 	uxth.w	ip, r1
 8006b34:	44f4      	add	ip, lr
 8006b36:	0c08      	lsrs	r0, r1, #16
 8006b38:	4471      	add	r1, lr
 8006b3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b3e:	b289      	uxth	r1, r1
 8006b40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b48:	f846 1b04 	str.w	r1, [r6], #4
 8006b4c:	e7dc      	b.n	8006b08 <__mdiff+0xd4>
 8006b4e:	3f01      	subs	r7, #1
 8006b50:	e7e6      	b.n	8006b20 <__mdiff+0xec>
 8006b52:	bf00      	nop
 8006b54:	080074c2 	.word	0x080074c2
 8006b58:	080074d3 	.word	0x080074d3

08006b5c <__d2b>:
 8006b5c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006b60:	2101      	movs	r1, #1
 8006b62:	4690      	mov	r8, r2
 8006b64:	4699      	mov	r9, r3
 8006b66:	9e08      	ldr	r6, [sp, #32]
 8006b68:	f7ff fcd0 	bl	800650c <_Balloc>
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	b930      	cbnz	r0, 8006b7e <__d2b+0x22>
 8006b70:	4602      	mov	r2, r0
 8006b72:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b76:	4b23      	ldr	r3, [pc, #140]	@ (8006c04 <__d2b+0xa8>)
 8006b78:	4823      	ldr	r0, [pc, #140]	@ (8006c08 <__d2b+0xac>)
 8006b7a:	f000 fac3 	bl	8007104 <__assert_func>
 8006b7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b86:	b10d      	cbz	r5, 8006b8c <__d2b+0x30>
 8006b88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	f1b8 0300 	subs.w	r3, r8, #0
 8006b92:	d024      	beq.n	8006bde <__d2b+0x82>
 8006b94:	4668      	mov	r0, sp
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	f7ff fd7f 	bl	800669a <__lo0bits>
 8006b9c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ba0:	b1d8      	cbz	r0, 8006bda <__d2b+0x7e>
 8006ba2:	f1c0 0320 	rsb	r3, r0, #32
 8006ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8006baa:	430b      	orrs	r3, r1
 8006bac:	40c2      	lsrs	r2, r0
 8006bae:	6163      	str	r3, [r4, #20]
 8006bb0:	9201      	str	r2, [sp, #4]
 8006bb2:	9b01      	ldr	r3, [sp, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	bf0c      	ite	eq
 8006bb8:	2201      	moveq	r2, #1
 8006bba:	2202      	movne	r2, #2
 8006bbc:	61a3      	str	r3, [r4, #24]
 8006bbe:	6122      	str	r2, [r4, #16]
 8006bc0:	b1ad      	cbz	r5, 8006bee <__d2b+0x92>
 8006bc2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006bc6:	4405      	add	r5, r0
 8006bc8:	6035      	str	r5, [r6, #0]
 8006bca:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd0:	6018      	str	r0, [r3, #0]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	b002      	add	sp, #8
 8006bd6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006bda:	6161      	str	r1, [r4, #20]
 8006bdc:	e7e9      	b.n	8006bb2 <__d2b+0x56>
 8006bde:	a801      	add	r0, sp, #4
 8006be0:	f7ff fd5b 	bl	800669a <__lo0bits>
 8006be4:	9b01      	ldr	r3, [sp, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	6163      	str	r3, [r4, #20]
 8006bea:	3020      	adds	r0, #32
 8006bec:	e7e7      	b.n	8006bbe <__d2b+0x62>
 8006bee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006bf2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bf6:	6030      	str	r0, [r6, #0]
 8006bf8:	6918      	ldr	r0, [r3, #16]
 8006bfa:	f7ff fd2f 	bl	800665c <__hi0bits>
 8006bfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c02:	e7e4      	b.n	8006bce <__d2b+0x72>
 8006c04:	080074c2 	.word	0x080074c2
 8006c08:	080074d3 	.word	0x080074d3

08006c0c <__sfputc_r>:
 8006c0c:	6893      	ldr	r3, [r2, #8]
 8006c0e:	b410      	push	{r4}
 8006c10:	3b01      	subs	r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	6093      	str	r3, [r2, #8]
 8006c16:	da07      	bge.n	8006c28 <__sfputc_r+0x1c>
 8006c18:	6994      	ldr	r4, [r2, #24]
 8006c1a:	42a3      	cmp	r3, r4
 8006c1c:	db01      	blt.n	8006c22 <__sfputc_r+0x16>
 8006c1e:	290a      	cmp	r1, #10
 8006c20:	d102      	bne.n	8006c28 <__sfputc_r+0x1c>
 8006c22:	bc10      	pop	{r4}
 8006c24:	f7fe bbf3 	b.w	800540e <__swbuf_r>
 8006c28:	6813      	ldr	r3, [r2, #0]
 8006c2a:	1c58      	adds	r0, r3, #1
 8006c2c:	6010      	str	r0, [r2, #0]
 8006c2e:	7019      	strb	r1, [r3, #0]
 8006c30:	4608      	mov	r0, r1
 8006c32:	bc10      	pop	{r4}
 8006c34:	4770      	bx	lr

08006c36 <__sfputs_r>:
 8006c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c38:	4606      	mov	r6, r0
 8006c3a:	460f      	mov	r7, r1
 8006c3c:	4614      	mov	r4, r2
 8006c3e:	18d5      	adds	r5, r2, r3
 8006c40:	42ac      	cmp	r4, r5
 8006c42:	d101      	bne.n	8006c48 <__sfputs_r+0x12>
 8006c44:	2000      	movs	r0, #0
 8006c46:	e007      	b.n	8006c58 <__sfputs_r+0x22>
 8006c48:	463a      	mov	r2, r7
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c50:	f7ff ffdc 	bl	8006c0c <__sfputc_r>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d1f3      	bne.n	8006c40 <__sfputs_r+0xa>
 8006c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c5c <_vfiprintf_r>:
 8006c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c60:	460d      	mov	r5, r1
 8006c62:	4614      	mov	r4, r2
 8006c64:	4698      	mov	r8, r3
 8006c66:	4606      	mov	r6, r0
 8006c68:	b09d      	sub	sp, #116	@ 0x74
 8006c6a:	b118      	cbz	r0, 8006c74 <_vfiprintf_r+0x18>
 8006c6c:	6a03      	ldr	r3, [r0, #32]
 8006c6e:	b90b      	cbnz	r3, 8006c74 <_vfiprintf_r+0x18>
 8006c70:	f7fe fae4 	bl	800523c <__sinit>
 8006c74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c76:	07d9      	lsls	r1, r3, #31
 8006c78:	d405      	bmi.n	8006c86 <_vfiprintf_r+0x2a>
 8006c7a:	89ab      	ldrh	r3, [r5, #12]
 8006c7c:	059a      	lsls	r2, r3, #22
 8006c7e:	d402      	bmi.n	8006c86 <_vfiprintf_r+0x2a>
 8006c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c82:	f7fe fcd6 	bl	8005632 <__retarget_lock_acquire_recursive>
 8006c86:	89ab      	ldrh	r3, [r5, #12]
 8006c88:	071b      	lsls	r3, r3, #28
 8006c8a:	d501      	bpl.n	8006c90 <_vfiprintf_r+0x34>
 8006c8c:	692b      	ldr	r3, [r5, #16]
 8006c8e:	b99b      	cbnz	r3, 8006cb8 <_vfiprintf_r+0x5c>
 8006c90:	4629      	mov	r1, r5
 8006c92:	4630      	mov	r0, r6
 8006c94:	f7fe fbfa 	bl	800548c <__swsetup_r>
 8006c98:	b170      	cbz	r0, 8006cb8 <_vfiprintf_r+0x5c>
 8006c9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c9c:	07dc      	lsls	r4, r3, #31
 8006c9e:	d504      	bpl.n	8006caa <_vfiprintf_r+0x4e>
 8006ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca4:	b01d      	add	sp, #116	@ 0x74
 8006ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006caa:	89ab      	ldrh	r3, [r5, #12]
 8006cac:	0598      	lsls	r0, r3, #22
 8006cae:	d4f7      	bmi.n	8006ca0 <_vfiprintf_r+0x44>
 8006cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cb2:	f7fe fcbf 	bl	8005634 <__retarget_lock_release_recursive>
 8006cb6:	e7f3      	b.n	8006ca0 <_vfiprintf_r+0x44>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cbc:	2320      	movs	r3, #32
 8006cbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cc2:	2330      	movs	r3, #48	@ 0x30
 8006cc4:	f04f 0901 	mov.w	r9, #1
 8006cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ccc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006e78 <_vfiprintf_r+0x21c>
 8006cd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cd4:	4623      	mov	r3, r4
 8006cd6:	469a      	mov	sl, r3
 8006cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cdc:	b10a      	cbz	r2, 8006ce2 <_vfiprintf_r+0x86>
 8006cde:	2a25      	cmp	r2, #37	@ 0x25
 8006ce0:	d1f9      	bne.n	8006cd6 <_vfiprintf_r+0x7a>
 8006ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8006ce6:	d00b      	beq.n	8006d00 <_vfiprintf_r+0xa4>
 8006ce8:	465b      	mov	r3, fp
 8006cea:	4622      	mov	r2, r4
 8006cec:	4629      	mov	r1, r5
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f7ff ffa1 	bl	8006c36 <__sfputs_r>
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	f000 80a7 	beq.w	8006e48 <_vfiprintf_r+0x1ec>
 8006cfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cfc:	445a      	add	r2, fp
 8006cfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d00:	f89a 3000 	ldrb.w	r3, [sl]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 809f 	beq.w	8006e48 <_vfiprintf_r+0x1ec>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d14:	f10a 0a01 	add.w	sl, sl, #1
 8006d18:	9304      	str	r3, [sp, #16]
 8006d1a:	9307      	str	r3, [sp, #28]
 8006d1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d20:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d22:	4654      	mov	r4, sl
 8006d24:	2205      	movs	r2, #5
 8006d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d2a:	4853      	ldr	r0, [pc, #332]	@ (8006e78 <_vfiprintf_r+0x21c>)
 8006d2c:	f7fe fc83 	bl	8005636 <memchr>
 8006d30:	9a04      	ldr	r2, [sp, #16]
 8006d32:	b9d8      	cbnz	r0, 8006d6c <_vfiprintf_r+0x110>
 8006d34:	06d1      	lsls	r1, r2, #27
 8006d36:	bf44      	itt	mi
 8006d38:	2320      	movmi	r3, #32
 8006d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d3e:	0713      	lsls	r3, r2, #28
 8006d40:	bf44      	itt	mi
 8006d42:	232b      	movmi	r3, #43	@ 0x2b
 8006d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d48:	f89a 3000 	ldrb.w	r3, [sl]
 8006d4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d4e:	d015      	beq.n	8006d7c <_vfiprintf_r+0x120>
 8006d50:	4654      	mov	r4, sl
 8006d52:	2000      	movs	r0, #0
 8006d54:	f04f 0c0a 	mov.w	ip, #10
 8006d58:	9a07      	ldr	r2, [sp, #28]
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d60:	3b30      	subs	r3, #48	@ 0x30
 8006d62:	2b09      	cmp	r3, #9
 8006d64:	d94b      	bls.n	8006dfe <_vfiprintf_r+0x1a2>
 8006d66:	b1b0      	cbz	r0, 8006d96 <_vfiprintf_r+0x13a>
 8006d68:	9207      	str	r2, [sp, #28]
 8006d6a:	e014      	b.n	8006d96 <_vfiprintf_r+0x13a>
 8006d6c:	eba0 0308 	sub.w	r3, r0, r8
 8006d70:	fa09 f303 	lsl.w	r3, r9, r3
 8006d74:	4313      	orrs	r3, r2
 8006d76:	46a2      	mov	sl, r4
 8006d78:	9304      	str	r3, [sp, #16]
 8006d7a:	e7d2      	b.n	8006d22 <_vfiprintf_r+0xc6>
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	1d19      	adds	r1, r3, #4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	9103      	str	r1, [sp, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bfbb      	ittet	lt
 8006d88:	425b      	neglt	r3, r3
 8006d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8006d8e:	9307      	strge	r3, [sp, #28]
 8006d90:	9307      	strlt	r3, [sp, #28]
 8006d92:	bfb8      	it	lt
 8006d94:	9204      	strlt	r2, [sp, #16]
 8006d96:	7823      	ldrb	r3, [r4, #0]
 8006d98:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d9a:	d10a      	bne.n	8006db2 <_vfiprintf_r+0x156>
 8006d9c:	7863      	ldrb	r3, [r4, #1]
 8006d9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006da0:	d132      	bne.n	8006e08 <_vfiprintf_r+0x1ac>
 8006da2:	9b03      	ldr	r3, [sp, #12]
 8006da4:	3402      	adds	r4, #2
 8006da6:	1d1a      	adds	r2, r3, #4
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	9203      	str	r2, [sp, #12]
 8006dac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006db0:	9305      	str	r3, [sp, #20]
 8006db2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006e7c <_vfiprintf_r+0x220>
 8006db6:	2203      	movs	r2, #3
 8006db8:	4650      	mov	r0, sl
 8006dba:	7821      	ldrb	r1, [r4, #0]
 8006dbc:	f7fe fc3b 	bl	8005636 <memchr>
 8006dc0:	b138      	cbz	r0, 8006dd2 <_vfiprintf_r+0x176>
 8006dc2:	2240      	movs	r2, #64	@ 0x40
 8006dc4:	9b04      	ldr	r3, [sp, #16]
 8006dc6:	eba0 000a 	sub.w	r0, r0, sl
 8006dca:	4082      	lsls	r2, r0
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	3401      	adds	r4, #1
 8006dd0:	9304      	str	r3, [sp, #16]
 8006dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd6:	2206      	movs	r2, #6
 8006dd8:	4829      	ldr	r0, [pc, #164]	@ (8006e80 <_vfiprintf_r+0x224>)
 8006dda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006dde:	f7fe fc2a 	bl	8005636 <memchr>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d03f      	beq.n	8006e66 <_vfiprintf_r+0x20a>
 8006de6:	4b27      	ldr	r3, [pc, #156]	@ (8006e84 <_vfiprintf_r+0x228>)
 8006de8:	bb1b      	cbnz	r3, 8006e32 <_vfiprintf_r+0x1d6>
 8006dea:	9b03      	ldr	r3, [sp, #12]
 8006dec:	3307      	adds	r3, #7
 8006dee:	f023 0307 	bic.w	r3, r3, #7
 8006df2:	3308      	adds	r3, #8
 8006df4:	9303      	str	r3, [sp, #12]
 8006df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df8:	443b      	add	r3, r7
 8006dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dfc:	e76a      	b.n	8006cd4 <_vfiprintf_r+0x78>
 8006dfe:	460c      	mov	r4, r1
 8006e00:	2001      	movs	r0, #1
 8006e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e06:	e7a8      	b.n	8006d5a <_vfiprintf_r+0xfe>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f04f 0c0a 	mov.w	ip, #10
 8006e0e:	4619      	mov	r1, r3
 8006e10:	3401      	adds	r4, #1
 8006e12:	9305      	str	r3, [sp, #20]
 8006e14:	4620      	mov	r0, r4
 8006e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e1a:	3a30      	subs	r2, #48	@ 0x30
 8006e1c:	2a09      	cmp	r2, #9
 8006e1e:	d903      	bls.n	8006e28 <_vfiprintf_r+0x1cc>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0c6      	beq.n	8006db2 <_vfiprintf_r+0x156>
 8006e24:	9105      	str	r1, [sp, #20]
 8006e26:	e7c4      	b.n	8006db2 <_vfiprintf_r+0x156>
 8006e28:	4604      	mov	r4, r0
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e30:	e7f0      	b.n	8006e14 <_vfiprintf_r+0x1b8>
 8006e32:	ab03      	add	r3, sp, #12
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	462a      	mov	r2, r5
 8006e38:	4630      	mov	r0, r6
 8006e3a:	4b13      	ldr	r3, [pc, #76]	@ (8006e88 <_vfiprintf_r+0x22c>)
 8006e3c:	a904      	add	r1, sp, #16
 8006e3e:	f7fd fdb3 	bl	80049a8 <_printf_float>
 8006e42:	4607      	mov	r7, r0
 8006e44:	1c78      	adds	r0, r7, #1
 8006e46:	d1d6      	bne.n	8006df6 <_vfiprintf_r+0x19a>
 8006e48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e4a:	07d9      	lsls	r1, r3, #31
 8006e4c:	d405      	bmi.n	8006e5a <_vfiprintf_r+0x1fe>
 8006e4e:	89ab      	ldrh	r3, [r5, #12]
 8006e50:	059a      	lsls	r2, r3, #22
 8006e52:	d402      	bmi.n	8006e5a <_vfiprintf_r+0x1fe>
 8006e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e56:	f7fe fbed 	bl	8005634 <__retarget_lock_release_recursive>
 8006e5a:	89ab      	ldrh	r3, [r5, #12]
 8006e5c:	065b      	lsls	r3, r3, #25
 8006e5e:	f53f af1f 	bmi.w	8006ca0 <_vfiprintf_r+0x44>
 8006e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e64:	e71e      	b.n	8006ca4 <_vfiprintf_r+0x48>
 8006e66:	ab03      	add	r3, sp, #12
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	462a      	mov	r2, r5
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	4b06      	ldr	r3, [pc, #24]	@ (8006e88 <_vfiprintf_r+0x22c>)
 8006e70:	a904      	add	r1, sp, #16
 8006e72:	f7fe f837 	bl	8004ee4 <_printf_i>
 8006e76:	e7e4      	b.n	8006e42 <_vfiprintf_r+0x1e6>
 8006e78:	08007628 	.word	0x08007628
 8006e7c:	0800762e 	.word	0x0800762e
 8006e80:	08007632 	.word	0x08007632
 8006e84:	080049a9 	.word	0x080049a9
 8006e88:	08006c37 	.word	0x08006c37

08006e8c <__sflush_r>:
 8006e8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e92:	0716      	lsls	r6, r2, #28
 8006e94:	4605      	mov	r5, r0
 8006e96:	460c      	mov	r4, r1
 8006e98:	d454      	bmi.n	8006f44 <__sflush_r+0xb8>
 8006e9a:	684b      	ldr	r3, [r1, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	dc02      	bgt.n	8006ea6 <__sflush_r+0x1a>
 8006ea0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	dd48      	ble.n	8006f38 <__sflush_r+0xac>
 8006ea6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ea8:	2e00      	cmp	r6, #0
 8006eaa:	d045      	beq.n	8006f38 <__sflush_r+0xac>
 8006eac:	2300      	movs	r3, #0
 8006eae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006eb2:	682f      	ldr	r7, [r5, #0]
 8006eb4:	6a21      	ldr	r1, [r4, #32]
 8006eb6:	602b      	str	r3, [r5, #0]
 8006eb8:	d030      	beq.n	8006f1c <__sflush_r+0x90>
 8006eba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	0759      	lsls	r1, r3, #29
 8006ec0:	d505      	bpl.n	8006ece <__sflush_r+0x42>
 8006ec2:	6863      	ldr	r3, [r4, #4]
 8006ec4:	1ad2      	subs	r2, r2, r3
 8006ec6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ec8:	b10b      	cbz	r3, 8006ece <__sflush_r+0x42>
 8006eca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ecc:	1ad2      	subs	r2, r2, r3
 8006ece:	2300      	movs	r3, #0
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ed4:	6a21      	ldr	r1, [r4, #32]
 8006ed6:	47b0      	blx	r6
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	d106      	bne.n	8006eec <__sflush_r+0x60>
 8006ede:	6829      	ldr	r1, [r5, #0]
 8006ee0:	291d      	cmp	r1, #29
 8006ee2:	d82b      	bhi.n	8006f3c <__sflush_r+0xb0>
 8006ee4:	4a28      	ldr	r2, [pc, #160]	@ (8006f88 <__sflush_r+0xfc>)
 8006ee6:	410a      	asrs	r2, r1
 8006ee8:	07d6      	lsls	r6, r2, #31
 8006eea:	d427      	bmi.n	8006f3c <__sflush_r+0xb0>
 8006eec:	2200      	movs	r2, #0
 8006eee:	6062      	str	r2, [r4, #4]
 8006ef0:	6922      	ldr	r2, [r4, #16]
 8006ef2:	04d9      	lsls	r1, r3, #19
 8006ef4:	6022      	str	r2, [r4, #0]
 8006ef6:	d504      	bpl.n	8006f02 <__sflush_r+0x76>
 8006ef8:	1c42      	adds	r2, r0, #1
 8006efa:	d101      	bne.n	8006f00 <__sflush_r+0x74>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b903      	cbnz	r3, 8006f02 <__sflush_r+0x76>
 8006f00:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f04:	602f      	str	r7, [r5, #0]
 8006f06:	b1b9      	cbz	r1, 8006f38 <__sflush_r+0xac>
 8006f08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f0c:	4299      	cmp	r1, r3
 8006f0e:	d002      	beq.n	8006f16 <__sflush_r+0x8a>
 8006f10:	4628      	mov	r0, r5
 8006f12:	f7ff f9fd 	bl	8006310 <_free_r>
 8006f16:	2300      	movs	r3, #0
 8006f18:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f1a:	e00d      	b.n	8006f38 <__sflush_r+0xac>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4628      	mov	r0, r5
 8006f20:	47b0      	blx	r6
 8006f22:	4602      	mov	r2, r0
 8006f24:	1c50      	adds	r0, r2, #1
 8006f26:	d1c9      	bne.n	8006ebc <__sflush_r+0x30>
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0c6      	beq.n	8006ebc <__sflush_r+0x30>
 8006f2e:	2b1d      	cmp	r3, #29
 8006f30:	d001      	beq.n	8006f36 <__sflush_r+0xaa>
 8006f32:	2b16      	cmp	r3, #22
 8006f34:	d11d      	bne.n	8006f72 <__sflush_r+0xe6>
 8006f36:	602f      	str	r7, [r5, #0]
 8006f38:	2000      	movs	r0, #0
 8006f3a:	e021      	b.n	8006f80 <__sflush_r+0xf4>
 8006f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f40:	b21b      	sxth	r3, r3
 8006f42:	e01a      	b.n	8006f7a <__sflush_r+0xee>
 8006f44:	690f      	ldr	r7, [r1, #16]
 8006f46:	2f00      	cmp	r7, #0
 8006f48:	d0f6      	beq.n	8006f38 <__sflush_r+0xac>
 8006f4a:	0793      	lsls	r3, r2, #30
 8006f4c:	bf18      	it	ne
 8006f4e:	2300      	movne	r3, #0
 8006f50:	680e      	ldr	r6, [r1, #0]
 8006f52:	bf08      	it	eq
 8006f54:	694b      	ldreq	r3, [r1, #20]
 8006f56:	1bf6      	subs	r6, r6, r7
 8006f58:	600f      	str	r7, [r1, #0]
 8006f5a:	608b      	str	r3, [r1, #8]
 8006f5c:	2e00      	cmp	r6, #0
 8006f5e:	ddeb      	ble.n	8006f38 <__sflush_r+0xac>
 8006f60:	4633      	mov	r3, r6
 8006f62:	463a      	mov	r2, r7
 8006f64:	4628      	mov	r0, r5
 8006f66:	6a21      	ldr	r1, [r4, #32]
 8006f68:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006f6c:	47e0      	blx	ip
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	dc07      	bgt.n	8006f82 <__sflush_r+0xf6>
 8006f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7e:	81a3      	strh	r3, [r4, #12]
 8006f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f82:	4407      	add	r7, r0
 8006f84:	1a36      	subs	r6, r6, r0
 8006f86:	e7e9      	b.n	8006f5c <__sflush_r+0xd0>
 8006f88:	dfbffffe 	.word	0xdfbffffe

08006f8c <_fflush_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	690b      	ldr	r3, [r1, #16]
 8006f90:	4605      	mov	r5, r0
 8006f92:	460c      	mov	r4, r1
 8006f94:	b913      	cbnz	r3, 8006f9c <_fflush_r+0x10>
 8006f96:	2500      	movs	r5, #0
 8006f98:	4628      	mov	r0, r5
 8006f9a:	bd38      	pop	{r3, r4, r5, pc}
 8006f9c:	b118      	cbz	r0, 8006fa6 <_fflush_r+0x1a>
 8006f9e:	6a03      	ldr	r3, [r0, #32]
 8006fa0:	b90b      	cbnz	r3, 8006fa6 <_fflush_r+0x1a>
 8006fa2:	f7fe f94b 	bl	800523c <__sinit>
 8006fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0f3      	beq.n	8006f96 <_fflush_r+0xa>
 8006fae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fb0:	07d0      	lsls	r0, r2, #31
 8006fb2:	d404      	bmi.n	8006fbe <_fflush_r+0x32>
 8006fb4:	0599      	lsls	r1, r3, #22
 8006fb6:	d402      	bmi.n	8006fbe <_fflush_r+0x32>
 8006fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fba:	f7fe fb3a 	bl	8005632 <__retarget_lock_acquire_recursive>
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	f7ff ff63 	bl	8006e8c <__sflush_r>
 8006fc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fc8:	4605      	mov	r5, r0
 8006fca:	07da      	lsls	r2, r3, #31
 8006fcc:	d4e4      	bmi.n	8006f98 <_fflush_r+0xc>
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	059b      	lsls	r3, r3, #22
 8006fd2:	d4e1      	bmi.n	8006f98 <_fflush_r+0xc>
 8006fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fd6:	f7fe fb2d 	bl	8005634 <__retarget_lock_release_recursive>
 8006fda:	e7dd      	b.n	8006f98 <_fflush_r+0xc>

08006fdc <__swhatbuf_r>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	460c      	mov	r4, r1
 8006fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe4:	4615      	mov	r5, r2
 8006fe6:	2900      	cmp	r1, #0
 8006fe8:	461e      	mov	r6, r3
 8006fea:	b096      	sub	sp, #88	@ 0x58
 8006fec:	da0c      	bge.n	8007008 <__swhatbuf_r+0x2c>
 8006fee:	89a3      	ldrh	r3, [r4, #12]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ff6:	bf14      	ite	ne
 8006ff8:	2340      	movne	r3, #64	@ 0x40
 8006ffa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ffe:	2000      	movs	r0, #0
 8007000:	6031      	str	r1, [r6, #0]
 8007002:	602b      	str	r3, [r5, #0]
 8007004:	b016      	add	sp, #88	@ 0x58
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	466a      	mov	r2, sp
 800700a:	f000 f849 	bl	80070a0 <_fstat_r>
 800700e:	2800      	cmp	r0, #0
 8007010:	dbed      	blt.n	8006fee <__swhatbuf_r+0x12>
 8007012:	9901      	ldr	r1, [sp, #4]
 8007014:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007018:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800701c:	4259      	negs	r1, r3
 800701e:	4159      	adcs	r1, r3
 8007020:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007024:	e7eb      	b.n	8006ffe <__swhatbuf_r+0x22>

08007026 <__smakebuf_r>:
 8007026:	898b      	ldrh	r3, [r1, #12]
 8007028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800702a:	079d      	lsls	r5, r3, #30
 800702c:	4606      	mov	r6, r0
 800702e:	460c      	mov	r4, r1
 8007030:	d507      	bpl.n	8007042 <__smakebuf_r+0x1c>
 8007032:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007036:	6023      	str	r3, [r4, #0]
 8007038:	6123      	str	r3, [r4, #16]
 800703a:	2301      	movs	r3, #1
 800703c:	6163      	str	r3, [r4, #20]
 800703e:	b003      	add	sp, #12
 8007040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007042:	466a      	mov	r2, sp
 8007044:	ab01      	add	r3, sp, #4
 8007046:	f7ff ffc9 	bl	8006fdc <__swhatbuf_r>
 800704a:	9f00      	ldr	r7, [sp, #0]
 800704c:	4605      	mov	r5, r0
 800704e:	4639      	mov	r1, r7
 8007050:	4630      	mov	r0, r6
 8007052:	f7ff f9cf 	bl	80063f4 <_malloc_r>
 8007056:	b948      	cbnz	r0, 800706c <__smakebuf_r+0x46>
 8007058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800705c:	059a      	lsls	r2, r3, #22
 800705e:	d4ee      	bmi.n	800703e <__smakebuf_r+0x18>
 8007060:	f023 0303 	bic.w	r3, r3, #3
 8007064:	f043 0302 	orr.w	r3, r3, #2
 8007068:	81a3      	strh	r3, [r4, #12]
 800706a:	e7e2      	b.n	8007032 <__smakebuf_r+0xc>
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007076:	81a3      	strh	r3, [r4, #12]
 8007078:	9b01      	ldr	r3, [sp, #4]
 800707a:	6020      	str	r0, [r4, #0]
 800707c:	b15b      	cbz	r3, 8007096 <__smakebuf_r+0x70>
 800707e:	4630      	mov	r0, r6
 8007080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007084:	f000 f81e 	bl	80070c4 <_isatty_r>
 8007088:	b128      	cbz	r0, 8007096 <__smakebuf_r+0x70>
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	f023 0303 	bic.w	r3, r3, #3
 8007090:	f043 0301 	orr.w	r3, r3, #1
 8007094:	81a3      	strh	r3, [r4, #12]
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	431d      	orrs	r5, r3
 800709a:	81a5      	strh	r5, [r4, #12]
 800709c:	e7cf      	b.n	800703e <__smakebuf_r+0x18>
	...

080070a0 <_fstat_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	2300      	movs	r3, #0
 80070a4:	4d06      	ldr	r5, [pc, #24]	@ (80070c0 <_fstat_r+0x20>)
 80070a6:	4604      	mov	r4, r0
 80070a8:	4608      	mov	r0, r1
 80070aa:	4611      	mov	r1, r2
 80070ac:	602b      	str	r3, [r5, #0]
 80070ae:	f7fa fc67 	bl	8001980 <_fstat>
 80070b2:	1c43      	adds	r3, r0, #1
 80070b4:	d102      	bne.n	80070bc <_fstat_r+0x1c>
 80070b6:	682b      	ldr	r3, [r5, #0]
 80070b8:	b103      	cbz	r3, 80070bc <_fstat_r+0x1c>
 80070ba:	6023      	str	r3, [r4, #0]
 80070bc:	bd38      	pop	{r3, r4, r5, pc}
 80070be:	bf00      	nop
 80070c0:	2000087c 	.word	0x2000087c

080070c4 <_isatty_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	2300      	movs	r3, #0
 80070c8:	4d05      	ldr	r5, [pc, #20]	@ (80070e0 <_isatty_r+0x1c>)
 80070ca:	4604      	mov	r4, r0
 80070cc:	4608      	mov	r0, r1
 80070ce:	602b      	str	r3, [r5, #0]
 80070d0:	f7fa fc65 	bl	800199e <_isatty>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d102      	bne.n	80070de <_isatty_r+0x1a>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	b103      	cbz	r3, 80070de <_isatty_r+0x1a>
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	2000087c 	.word	0x2000087c

080070e4 <_sbrk_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	2300      	movs	r3, #0
 80070e8:	4d05      	ldr	r5, [pc, #20]	@ (8007100 <_sbrk_r+0x1c>)
 80070ea:	4604      	mov	r4, r0
 80070ec:	4608      	mov	r0, r1
 80070ee:	602b      	str	r3, [r5, #0]
 80070f0:	f7fa fc6c 	bl	80019cc <_sbrk>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_sbrk_r+0x1a>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_sbrk_r+0x1a>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	2000087c 	.word	0x2000087c

08007104 <__assert_func>:
 8007104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007106:	4614      	mov	r4, r2
 8007108:	461a      	mov	r2, r3
 800710a:	4b09      	ldr	r3, [pc, #36]	@ (8007130 <__assert_func+0x2c>)
 800710c:	4605      	mov	r5, r0
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68d8      	ldr	r0, [r3, #12]
 8007112:	b954      	cbnz	r4, 800712a <__assert_func+0x26>
 8007114:	4b07      	ldr	r3, [pc, #28]	@ (8007134 <__assert_func+0x30>)
 8007116:	461c      	mov	r4, r3
 8007118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800711c:	9100      	str	r1, [sp, #0]
 800711e:	462b      	mov	r3, r5
 8007120:	4905      	ldr	r1, [pc, #20]	@ (8007138 <__assert_func+0x34>)
 8007122:	f000 f841 	bl	80071a8 <fiprintf>
 8007126:	f000 f851 	bl	80071cc <abort>
 800712a:	4b04      	ldr	r3, [pc, #16]	@ (800713c <__assert_func+0x38>)
 800712c:	e7f4      	b.n	8007118 <__assert_func+0x14>
 800712e:	bf00      	nop
 8007130:	20000018 	.word	0x20000018
 8007134:	0800767e 	.word	0x0800767e
 8007138:	08007650 	.word	0x08007650
 800713c:	08007643 	.word	0x08007643

08007140 <_calloc_r>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	fba1 5402 	umull	r5, r4, r1, r2
 8007146:	b93c      	cbnz	r4, 8007158 <_calloc_r+0x18>
 8007148:	4629      	mov	r1, r5
 800714a:	f7ff f953 	bl	80063f4 <_malloc_r>
 800714e:	4606      	mov	r6, r0
 8007150:	b928      	cbnz	r0, 800715e <_calloc_r+0x1e>
 8007152:	2600      	movs	r6, #0
 8007154:	4630      	mov	r0, r6
 8007156:	bd70      	pop	{r4, r5, r6, pc}
 8007158:	220c      	movs	r2, #12
 800715a:	6002      	str	r2, [r0, #0]
 800715c:	e7f9      	b.n	8007152 <_calloc_r+0x12>
 800715e:	462a      	mov	r2, r5
 8007160:	4621      	mov	r1, r4
 8007162:	f7fe f9e9 	bl	8005538 <memset>
 8007166:	e7f5      	b.n	8007154 <_calloc_r+0x14>

08007168 <__ascii_mbtowc>:
 8007168:	b082      	sub	sp, #8
 800716a:	b901      	cbnz	r1, 800716e <__ascii_mbtowc+0x6>
 800716c:	a901      	add	r1, sp, #4
 800716e:	b142      	cbz	r2, 8007182 <__ascii_mbtowc+0x1a>
 8007170:	b14b      	cbz	r3, 8007186 <__ascii_mbtowc+0x1e>
 8007172:	7813      	ldrb	r3, [r2, #0]
 8007174:	600b      	str	r3, [r1, #0]
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	1e10      	subs	r0, r2, #0
 800717a:	bf18      	it	ne
 800717c:	2001      	movne	r0, #1
 800717e:	b002      	add	sp, #8
 8007180:	4770      	bx	lr
 8007182:	4610      	mov	r0, r2
 8007184:	e7fb      	b.n	800717e <__ascii_mbtowc+0x16>
 8007186:	f06f 0001 	mvn.w	r0, #1
 800718a:	e7f8      	b.n	800717e <__ascii_mbtowc+0x16>

0800718c <__ascii_wctomb>:
 800718c:	4603      	mov	r3, r0
 800718e:	4608      	mov	r0, r1
 8007190:	b141      	cbz	r1, 80071a4 <__ascii_wctomb+0x18>
 8007192:	2aff      	cmp	r2, #255	@ 0xff
 8007194:	d904      	bls.n	80071a0 <__ascii_wctomb+0x14>
 8007196:	228a      	movs	r2, #138	@ 0x8a
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	4770      	bx	lr
 80071a0:	2001      	movs	r0, #1
 80071a2:	700a      	strb	r2, [r1, #0]
 80071a4:	4770      	bx	lr
	...

080071a8 <fiprintf>:
 80071a8:	b40e      	push	{r1, r2, r3}
 80071aa:	b503      	push	{r0, r1, lr}
 80071ac:	4601      	mov	r1, r0
 80071ae:	ab03      	add	r3, sp, #12
 80071b0:	4805      	ldr	r0, [pc, #20]	@ (80071c8 <fiprintf+0x20>)
 80071b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b6:	6800      	ldr	r0, [r0, #0]
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	f7ff fd4f 	bl	8006c5c <_vfiprintf_r>
 80071be:	b002      	add	sp, #8
 80071c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c4:	b003      	add	sp, #12
 80071c6:	4770      	bx	lr
 80071c8:	20000018 	.word	0x20000018

080071cc <abort>:
 80071cc:	2006      	movs	r0, #6
 80071ce:	b508      	push	{r3, lr}
 80071d0:	f000 f82c 	bl	800722c <raise>
 80071d4:	2001      	movs	r0, #1
 80071d6:	f7fa fb84 	bl	80018e2 <_exit>

080071da <_raise_r>:
 80071da:	291f      	cmp	r1, #31
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4605      	mov	r5, r0
 80071e0:	460c      	mov	r4, r1
 80071e2:	d904      	bls.n	80071ee <_raise_r+0x14>
 80071e4:	2316      	movs	r3, #22
 80071e6:	6003      	str	r3, [r0, #0]
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ec:	bd38      	pop	{r3, r4, r5, pc}
 80071ee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80071f0:	b112      	cbz	r2, 80071f8 <_raise_r+0x1e>
 80071f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071f6:	b94b      	cbnz	r3, 800720c <_raise_r+0x32>
 80071f8:	4628      	mov	r0, r5
 80071fa:	f000 f831 	bl	8007260 <_getpid_r>
 80071fe:	4622      	mov	r2, r4
 8007200:	4601      	mov	r1, r0
 8007202:	4628      	mov	r0, r5
 8007204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007208:	f000 b818 	b.w	800723c <_kill_r>
 800720c:	2b01      	cmp	r3, #1
 800720e:	d00a      	beq.n	8007226 <_raise_r+0x4c>
 8007210:	1c59      	adds	r1, r3, #1
 8007212:	d103      	bne.n	800721c <_raise_r+0x42>
 8007214:	2316      	movs	r3, #22
 8007216:	6003      	str	r3, [r0, #0]
 8007218:	2001      	movs	r0, #1
 800721a:	e7e7      	b.n	80071ec <_raise_r+0x12>
 800721c:	2100      	movs	r1, #0
 800721e:	4620      	mov	r0, r4
 8007220:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007224:	4798      	blx	r3
 8007226:	2000      	movs	r0, #0
 8007228:	e7e0      	b.n	80071ec <_raise_r+0x12>
	...

0800722c <raise>:
 800722c:	4b02      	ldr	r3, [pc, #8]	@ (8007238 <raise+0xc>)
 800722e:	4601      	mov	r1, r0
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	f7ff bfd2 	b.w	80071da <_raise_r>
 8007236:	bf00      	nop
 8007238:	20000018 	.word	0x20000018

0800723c <_kill_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	2300      	movs	r3, #0
 8007240:	4d06      	ldr	r5, [pc, #24]	@ (800725c <_kill_r+0x20>)
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	4611      	mov	r1, r2
 8007248:	602b      	str	r3, [r5, #0]
 800724a:	f7fa fb3a 	bl	80018c2 <_kill>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	d102      	bne.n	8007258 <_kill_r+0x1c>
 8007252:	682b      	ldr	r3, [r5, #0]
 8007254:	b103      	cbz	r3, 8007258 <_kill_r+0x1c>
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	bd38      	pop	{r3, r4, r5, pc}
 800725a:	bf00      	nop
 800725c:	2000087c 	.word	0x2000087c

08007260 <_getpid_r>:
 8007260:	f7fa bb28 	b.w	80018b4 <_getpid>

08007264 <_init>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	bf00      	nop
 8007268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726a:	bc08      	pop	{r3}
 800726c:	469e      	mov	lr, r3
 800726e:	4770      	bx	lr

08007270 <_fini>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	bf00      	nop
 8007274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007276:	bc08      	pop	{r3}
 8007278:	469e      	mov	lr, r3
 800727a:	4770      	bx	lr
