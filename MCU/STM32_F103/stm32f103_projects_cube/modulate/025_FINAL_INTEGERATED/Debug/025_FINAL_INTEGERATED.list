
025_FINAL_INTEGERATED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000663c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08006750  08006750  00007750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b58  08006b58  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006b58  08006b58  00007b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b60  08006b60  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b60  08006b60  00007b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b64  08006b64  00007b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006b68  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  200001d4  08006d3c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  08006d3c  0000888c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2a2  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002169  00000000  00000000  0001349f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00015608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000922  00000000  00000000  000161f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019322  00000000  00000000  00016b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f491  00000000  00000000  0002fe3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bda5  00000000  00000000  0003f2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb072  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004260  00000000  00000000  000cb0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000cf318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006734 	.word	0x08006734

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006734 	.word	0x08006734

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_fmul>:
 8000a88:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a90:	bf1e      	ittt	ne
 8000a92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a96:	ea92 0f0c 	teqne	r2, ip
 8000a9a:	ea93 0f0c 	teqne	r3, ip
 8000a9e:	d06f      	beq.n	8000b80 <__aeabi_fmul+0xf8>
 8000aa0:	441a      	add	r2, r3
 8000aa2:	ea80 0c01 	eor.w	ip, r0, r1
 8000aa6:	0240      	lsls	r0, r0, #9
 8000aa8:	bf18      	it	ne
 8000aaa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000aae:	d01e      	beq.n	8000aee <__aeabi_fmul+0x66>
 8000ab0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ab4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ab8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000abc:	fba0 3101 	umull	r3, r1, r0, r1
 8000ac0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ac4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ac8:	bf3e      	ittt	cc
 8000aca:	0049      	lslcc	r1, r1, #1
 8000acc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ad0:	005b      	lslcc	r3, r3, #1
 8000ad2:	ea40 0001 	orr.w	r0, r0, r1
 8000ad6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ada:	2afd      	cmp	r2, #253	@ 0xfd
 8000adc:	d81d      	bhi.n	8000b1a <__aeabi_fmul+0x92>
 8000ade:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ae2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ae6:	bf08      	it	eq
 8000ae8:	f020 0001 	biceq.w	r0, r0, #1
 8000aec:	4770      	bx	lr
 8000aee:	f090 0f00 	teq	r0, #0
 8000af2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000af6:	bf08      	it	eq
 8000af8:	0249      	lsleq	r1, r1, #9
 8000afa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000afe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b02:	3a7f      	subs	r2, #127	@ 0x7f
 8000b04:	bfc2      	ittt	gt
 8000b06:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b0e:	4770      	bxgt	lr
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b14:	f04f 0300 	mov.w	r3, #0
 8000b18:	3a01      	subs	r2, #1
 8000b1a:	dc5d      	bgt.n	8000bd8 <__aeabi_fmul+0x150>
 8000b1c:	f112 0f19 	cmn.w	r2, #25
 8000b20:	bfdc      	itt	le
 8000b22:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bxle	lr
 8000b28:	f1c2 0200 	rsb	r2, r2, #0
 8000b2c:	0041      	lsls	r1, r0, #1
 8000b2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000b32:	f1c2 0220 	rsb	r2, r2, #32
 8000b36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b3e:	f140 0000 	adc.w	r0, r0, #0
 8000b42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b46:	bf08      	it	eq
 8000b48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b4c:	4770      	bx	lr
 8000b4e:	f092 0f00 	teq	r2, #0
 8000b52:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b56:	bf02      	ittt	eq
 8000b58:	0040      	lsleq	r0, r0, #1
 8000b5a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b5e:	3a01      	subeq	r2, #1
 8000b60:	d0f9      	beq.n	8000b56 <__aeabi_fmul+0xce>
 8000b62:	ea40 000c 	orr.w	r0, r0, ip
 8000b66:	f093 0f00 	teq	r3, #0
 8000b6a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6e:	bf02      	ittt	eq
 8000b70:	0049      	lsleq	r1, r1, #1
 8000b72:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b76:	3b01      	subeq	r3, #1
 8000b78:	d0f9      	beq.n	8000b6e <__aeabi_fmul+0xe6>
 8000b7a:	ea41 010c 	orr.w	r1, r1, ip
 8000b7e:	e78f      	b.n	8000aa0 <__aeabi_fmul+0x18>
 8000b80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b84:	ea92 0f0c 	teq	r2, ip
 8000b88:	bf18      	it	ne
 8000b8a:	ea93 0f0c 	teqne	r3, ip
 8000b8e:	d00a      	beq.n	8000ba6 <__aeabi_fmul+0x11e>
 8000b90:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b94:	bf18      	it	ne
 8000b96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b9a:	d1d8      	bne.n	8000b4e <__aeabi_fmul+0xc6>
 8000b9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ba0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ba4:	4770      	bx	lr
 8000ba6:	f090 0f00 	teq	r0, #0
 8000baa:	bf17      	itett	ne
 8000bac:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	f091 0f00 	teqne	r1, #0
 8000bb6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000bba:	d014      	beq.n	8000be6 <__aeabi_fmul+0x15e>
 8000bbc:	ea92 0f0c 	teq	r2, ip
 8000bc0:	d101      	bne.n	8000bc6 <__aeabi_fmul+0x13e>
 8000bc2:	0242      	lsls	r2, r0, #9
 8000bc4:	d10f      	bne.n	8000be6 <__aeabi_fmul+0x15e>
 8000bc6:	ea93 0f0c 	teq	r3, ip
 8000bca:	d103      	bne.n	8000bd4 <__aeabi_fmul+0x14c>
 8000bcc:	024b      	lsls	r3, r1, #9
 8000bce:	bf18      	it	ne
 8000bd0:	4608      	movne	r0, r1
 8000bd2:	d108      	bne.n	8000be6 <__aeabi_fmul+0x15e>
 8000bd4:	ea80 0001 	eor.w	r0, r0, r1
 8000bd8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bea:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_fdiv>:
 8000bf0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bf4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf8:	bf1e      	ittt	ne
 8000bfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bfe:	ea92 0f0c 	teqne	r2, ip
 8000c02:	ea93 0f0c 	teqne	r3, ip
 8000c06:	d069      	beq.n	8000cdc <__aeabi_fdiv+0xec>
 8000c08:	eba2 0203 	sub.w	r2, r2, r3
 8000c0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000c10:	0249      	lsls	r1, r1, #9
 8000c12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c16:	d037      	beq.n	8000c88 <__aeabi_fdiv+0x98>
 8000c18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c24:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	bf38      	it	cc
 8000c2c:	005b      	lslcc	r3, r3, #1
 8000c2e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000c32:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000c36:	428b      	cmp	r3, r1
 8000c38:	bf24      	itt	cs
 8000c3a:	1a5b      	subcs	r3, r3, r1
 8000c3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c44:	bf24      	itt	cs
 8000c46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c52:	bf24      	itt	cs
 8000c54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c60:	bf24      	itt	cs
 8000c62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	bf18      	it	ne
 8000c6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c72:	d1e0      	bne.n	8000c36 <__aeabi_fdiv+0x46>
 8000c74:	2afd      	cmp	r2, #253	@ 0xfd
 8000c76:	f63f af50 	bhi.w	8000b1a <__aeabi_fmul+0x92>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c90:	327f      	adds	r2, #127	@ 0x7f
 8000c92:	bfc2      	ittt	gt
 8000c94:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c9c:	4770      	bxgt	lr
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	f04f 0300 	mov.w	r3, #0
 8000ca6:	3a01      	subs	r2, #1
 8000ca8:	e737      	b.n	8000b1a <__aeabi_fmul+0x92>
 8000caa:	f092 0f00 	teq	r2, #0
 8000cae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cb2:	bf02      	ittt	eq
 8000cb4:	0040      	lsleq	r0, r0, #1
 8000cb6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cba:	3a01      	subeq	r2, #1
 8000cbc:	d0f9      	beq.n	8000cb2 <__aeabi_fdiv+0xc2>
 8000cbe:	ea40 000c 	orr.w	r0, r0, ip
 8000cc2:	f093 0f00 	teq	r3, #0
 8000cc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cca:	bf02      	ittt	eq
 8000ccc:	0049      	lsleq	r1, r1, #1
 8000cce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000cd2:	3b01      	subeq	r3, #1
 8000cd4:	d0f9      	beq.n	8000cca <__aeabi_fdiv+0xda>
 8000cd6:	ea41 010c 	orr.w	r1, r1, ip
 8000cda:	e795      	b.n	8000c08 <__aeabi_fdiv+0x18>
 8000cdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce0:	ea92 0f0c 	teq	r2, ip
 8000ce4:	d108      	bne.n	8000cf8 <__aeabi_fdiv+0x108>
 8000ce6:	0242      	lsls	r2, r0, #9
 8000ce8:	f47f af7d 	bne.w	8000be6 <__aeabi_fmul+0x15e>
 8000cec:	ea93 0f0c 	teq	r3, ip
 8000cf0:	f47f af70 	bne.w	8000bd4 <__aeabi_fmul+0x14c>
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e776      	b.n	8000be6 <__aeabi_fmul+0x15e>
 8000cf8:	ea93 0f0c 	teq	r3, ip
 8000cfc:	d104      	bne.n	8000d08 <__aeabi_fdiv+0x118>
 8000cfe:	024b      	lsls	r3, r1, #9
 8000d00:	f43f af4c 	beq.w	8000b9c <__aeabi_fmul+0x114>
 8000d04:	4608      	mov	r0, r1
 8000d06:	e76e      	b.n	8000be6 <__aeabi_fmul+0x15e>
 8000d08:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d0c:	bf18      	it	ne
 8000d0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d12:	d1ca      	bne.n	8000caa <__aeabi_fdiv+0xba>
 8000d14:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000d18:	f47f af5c 	bne.w	8000bd4 <__aeabi_fmul+0x14c>
 8000d1c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000d20:	f47f af3c 	bne.w	8000b9c <__aeabi_fmul+0x114>
 8000d24:	e75f      	b.n	8000be6 <__aeabi_fmul+0x15e>
 8000d26:	bf00      	nop

08000d28 <__gesf2>:
 8000d28:	f04f 3cff 	mov.w	ip, #4294967295
 8000d2c:	e006      	b.n	8000d3c <__cmpsf2+0x4>
 8000d2e:	bf00      	nop

08000d30 <__lesf2>:
 8000d30:	f04f 0c01 	mov.w	ip, #1
 8000d34:	e002      	b.n	8000d3c <__cmpsf2+0x4>
 8000d36:	bf00      	nop

08000d38 <__cmpsf2>:
 8000d38:	f04f 0c01 	mov.w	ip, #1
 8000d3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d4c:	bf18      	it	ne
 8000d4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d52:	d011      	beq.n	8000d78 <__cmpsf2+0x40>
 8000d54:	b001      	add	sp, #4
 8000d56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d5a:	bf18      	it	ne
 8000d5c:	ea90 0f01 	teqne	r0, r1
 8000d60:	bf58      	it	pl
 8000d62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d66:	bf88      	it	hi
 8000d68:	17c8      	asrhi	r0, r1, #31
 8000d6a:	bf38      	it	cc
 8000d6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d70:	bf18      	it	ne
 8000d72:	f040 0001 	orrne.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d7c:	d102      	bne.n	8000d84 <__cmpsf2+0x4c>
 8000d7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d82:	d105      	bne.n	8000d90 <__cmpsf2+0x58>
 8000d84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d88:	d1e4      	bne.n	8000d54 <__cmpsf2+0x1c>
 8000d8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d8e:	d0e1      	beq.n	8000d54 <__cmpsf2+0x1c>
 8000d90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <__aeabi_cfrcmple>:
 8000d98:	4684      	mov	ip, r0
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	4661      	mov	r1, ip
 8000d9e:	e7ff      	b.n	8000da0 <__aeabi_cfcmpeq>

08000da0 <__aeabi_cfcmpeq>:
 8000da0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000da2:	f7ff ffc9 	bl	8000d38 <__cmpsf2>
 8000da6:	2800      	cmp	r0, #0
 8000da8:	bf48      	it	mi
 8000daa:	f110 0f00 	cmnmi.w	r0, #0
 8000dae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000db0 <__aeabi_fcmpeq>:
 8000db0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db4:	f7ff fff4 	bl	8000da0 <__aeabi_cfcmpeq>
 8000db8:	bf0c      	ite	eq
 8000dba:	2001      	moveq	r0, #1
 8000dbc:	2000      	movne	r0, #0
 8000dbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_fcmplt>:
 8000dc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc8:	f7ff ffea 	bl	8000da0 <__aeabi_cfcmpeq>
 8000dcc:	bf34      	ite	cc
 8000dce:	2001      	movcc	r0, #1
 8000dd0:	2000      	movcs	r0, #0
 8000dd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_fcmple>:
 8000dd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ddc:	f7ff ffe0 	bl	8000da0 <__aeabi_cfcmpeq>
 8000de0:	bf94      	ite	ls
 8000de2:	2001      	movls	r0, #1
 8000de4:	2000      	movhi	r0, #0
 8000de6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dea:	bf00      	nop

08000dec <__aeabi_fcmpge>:
 8000dec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df0:	f7ff ffd2 	bl	8000d98 <__aeabi_cfrcmple>
 8000df4:	bf94      	ite	ls
 8000df6:	2001      	movls	r0, #1
 8000df8:	2000      	movhi	r0, #0
 8000dfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfe:	bf00      	nop

08000e00 <__aeabi_fcmpgt>:
 8000e00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e04:	f7ff ffc8 	bl	8000d98 <__aeabi_cfrcmple>
 8000e08:	bf34      	ite	cc
 8000e0a:	2001      	movcc	r0, #1
 8000e0c:	2000      	movcs	r0, #0
 8000e0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e12:	bf00      	nop

08000e14 <__aeabi_f2uiz>:
 8000e14:	0042      	lsls	r2, r0, #1
 8000e16:	d20e      	bcs.n	8000e36 <__aeabi_f2uiz+0x22>
 8000e18:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e1c:	d30b      	bcc.n	8000e36 <__aeabi_f2uiz+0x22>
 8000e1e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e22:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e26:	d409      	bmi.n	8000e3c <__aeabi_f2uiz+0x28>
 8000e28:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e30:	fa23 f002 	lsr.w	r0, r3, r2
 8000e34:	4770      	bx	lr
 8000e36:	f04f 0000 	mov.w	r0, #0
 8000e3a:	4770      	bx	lr
 8000e3c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e40:	d101      	bne.n	8000e46 <__aeabi_f2uiz+0x32>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d102      	bne.n	8000e4c <__aeabi_f2uiz+0x38>
 8000e46:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4a:	4770      	bx	lr
 8000e4c:	f04f 0000 	mov.w	r0, #0
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5a:	f000 fdf3 	bl	8001a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5e:	f000 f83f 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e62:	f000 f961 	bl	8001128 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e66:	f000 f88d 	bl	8000f84 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000e6a:	f000 f8f7 	bl	800105c <MX_I2C2_Init>
  MX_I2C1_Init();
 8000e6e:	f000 f8c7 	bl	8001000 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000e72:	f000 f921 	bl	80010b8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start (&hadc1);
 8000e76:	4813      	ldr	r0, [pc, #76]	@ (8000ec4 <main+0x70>)
 8000e78:	f000 ff42 	bl	8001d00 <HAL_ADC_Start>

// OLED INIT
  ssd1306_Init();
 8000e7c:	f000 fd06 	bl	800188c <ssd1306_Init>

  // Second, initilaize the MCP4725 object:
  	myMCP4725 = MCP4725_init(&hi2c2, MCP4725A0_ADDR_A01, 5.0);
 8000e80:	4c11      	ldr	r4, [pc, #68]	@ (8000ec8 <main+0x74>)
 8000e82:	4638      	mov	r0, r7
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <main+0x78>)
 8000e86:	2261      	movs	r2, #97	@ 0x61
 8000e88:	4911      	ldr	r1, [pc, #68]	@ (8000ed0 <main+0x7c>)
 8000e8a:	f000 fc54 	bl	8001736 <MCP4725_init>
 8000e8e:	463b      	mov	r3, r7
 8000e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}




  	// Check the connection:
  	if(MCP4725_isConnected(&myMCP4725)){
 8000e96:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <main+0x74>)
 8000e98:	f000 fc6c 	bl	8001774 <MCP4725_isConnected>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <main+0x56>

  		// Print that the DAC is coonected
  		printf("dac is connected -- \n");
 8000ea2:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <main+0x80>)
 8000ea4:	f003 fcd0 	bl	8004848 <puts>
 8000ea8:	e002      	b.n	8000eb0 <main+0x5c>

  	}
  	else{

  		// Print that the DAC is NOT coonected
  		printf("not connected\n");
 8000eaa:	480b      	ldr	r0, [pc, #44]	@ (8000ed8 <main+0x84>)
 8000eac:	f003 fccc 	bl	8004848 <puts>

  	}

  	HAL_Delay(5000);
 8000eb0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000eb4:	f000 fe28 	bl	8001b08 <HAL_Delay>
  	printf("delay 5sec after dac is connected \n");
 8000eb8:	4808      	ldr	r0, [pc, #32]	@ (8000edc <main+0x88>)
 8000eba:	f003 fcc5 	bl	8004848 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ebe:	bf00      	nop
 8000ec0:	e7fd      	b.n	8000ebe <main+0x6a>
 8000ec2:	bf00      	nop
 8000ec4:	200001f0 	.word	0x200001f0
 8000ec8:	20000320 	.word	0x20000320
 8000ecc:	40a00000 	.word	0x40a00000
 8000ed0:	20000274 	.word	0x20000274
 8000ed4:	08006750 	.word	0x08006750
 8000ed8:	08006768 	.word	0x08006768
 8000edc:	08006778 	.word	0x08006778

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	@ 0x50
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eea:	2228      	movs	r2, #40	@ 0x28
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 fd8a 	bl	8004a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f10:	2302      	movs	r3, #2
 8000f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f14:	2301      	movs	r3, #1
 8000f16:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 f9d3 	bl	80032d0 <HAL_RCC_OscConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000f30:	f000 f97e 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f34:	230f      	movs	r3, #15
 8000f36:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f44:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 fc3f 	bl	80037d4 <HAL_RCC_ClockConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f5c:	f000 f968 	bl	8001230 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f60:	2302      	movs	r3, #2
 8000f62:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fdac 	bl	8003ac8 <HAL_RCCEx_PeriphCLKConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f76:	f000 f95b 	bl	8001230 <Error_Handler>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3750      	adds	r7, #80	@ 0x50
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000f96:	4a19      	ldr	r2, [pc, #100]	@ (8000ffc <MX_ADC1_Init+0x78>)
 8000f98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fae:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000fb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc0:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fc2:	f000 fdc5 	bl	8001b50 <HAL_ADC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fcc:	f000 f930 	bl	8001230 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_ADC1_Init+0x74>)
 8000fe2:	f000 ff3b 	bl	8001e5c <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000fec:	f000 f920 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200001f0 	.word	0x200001f0
 8000ffc:	40012400 	.word	0x40012400

08001000 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001004:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <MX_I2C1_Init+0x50>)
 8001006:	4a13      	ldr	r2, [pc, #76]	@ (8001054 <MX_I2C1_Init+0x54>)
 8001008:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <MX_I2C1_Init+0x50>)
 800100c:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <MX_I2C1_Init+0x58>)
 800100e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <MX_I2C1_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <MX_I2C1_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <MX_I2C1_Init+0x50>)
 800101e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001022:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001024:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <MX_I2C1_Init+0x50>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <MX_I2C1_Init+0x50>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <MX_I2C1_Init+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_I2C1_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	@ (8001050 <MX_I2C1_Init+0x50>)
 800103e:	f001 fb6d 	bl	800271c <HAL_I2C_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001048:	f000 f8f2 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000220 	.word	0x20000220
 8001054:	40005400 	.word	0x40005400
 8001058:	000186a0 	.word	0x000186a0

0800105c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_I2C2_Init+0x50>)
 8001062:	4a13      	ldr	r2, [pc, #76]	@ (80010b0 <MX_I2C2_Init+0x54>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_I2C2_Init+0x50>)
 8001068:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <MX_I2C2_Init+0x58>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_I2C2_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_I2C2_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_I2C2_Init+0x50>)
 800107a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800107e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <MX_I2C2_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_I2C2_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <MX_I2C2_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_I2C2_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <MX_I2C2_Init+0x50>)
 800109a:	f001 fb3f 	bl	800271c <HAL_I2C_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010a4:	f000 f8c4 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000274 	.word	0x20000274
 80010b0:	40005800 	.word	0x40005800
 80010b4:	000186a0 	.word	0x000186a0

080010b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010bc:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <MX_SPI2_Init+0x68>)
 80010be:	4a19      	ldr	r2, [pc, #100]	@ (8001124 <MX_SPI2_Init+0x6c>)
 80010c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <MX_SPI2_Init+0x68>)
 80010c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <MX_SPI2_Init+0x68>)
 80010cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010d0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <MX_SPI2_Init+0x68>)
 80010d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_SPI2_Init+0x68>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_SPI2_Init+0x68>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_SPI2_Init+0x68>)
 80010e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <MX_SPI2_Init+0x68>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <MX_SPI2_Init+0x68>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <MX_SPI2_Init+0x68>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001100:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <MX_SPI2_Init+0x68>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <MX_SPI2_Init+0x68>)
 8001108:	220a      	movs	r2, #10
 800110a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <MX_SPI2_Init+0x68>)
 800110e:	f002 fd91 	bl	8003c34 <HAL_SPI_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8001118:	f000 f88a 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200002c8 	.word	0x200002c8
 8001124:	40003800 	.word	0x40003800

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113c:	4b38      	ldr	r3, [pc, #224]	@ (8001220 <MX_GPIO_Init+0xf8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a37      	ldr	r2, [pc, #220]	@ (8001220 <MX_GPIO_Init+0xf8>)
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b35      	ldr	r3, [pc, #212]	@ (8001220 <MX_GPIO_Init+0xf8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001154:	4b32      	ldr	r3, [pc, #200]	@ (8001220 <MX_GPIO_Init+0xf8>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a31      	ldr	r2, [pc, #196]	@ (8001220 <MX_GPIO_Init+0xf8>)
 800115a:	f043 0320 	orr.w	r3, r3, #32
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b2f      	ldr	r3, [pc, #188]	@ (8001220 <MX_GPIO_Init+0xf8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0320 	and.w	r3, r3, #32
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b2c      	ldr	r3, [pc, #176]	@ (8001220 <MX_GPIO_Init+0xf8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a2b      	ldr	r2, [pc, #172]	@ (8001220 <MX_GPIO_Init+0xf8>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <MX_GPIO_Init+0xf8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <MX_GPIO_Init+0xf8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <MX_GPIO_Init+0xf8>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <MX_GPIO_Init+0xf8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2101      	movs	r1, #1
 80011a0:	4820      	ldr	r0, [pc, #128]	@ (8001224 <MX_GPIO_Init+0xfc>)
 80011a2:	f001 fa81 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_BUTTON_GPIO_Port, RELAY_BUTTON_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011ac:	481e      	ldr	r0, [pc, #120]	@ (8001228 <MX_GPIO_Init+0x100>)
 80011ae:	f001 fa7b 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <MX_GPIO_Init+0x104>)
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4619      	mov	r1, r3
 80011c6:	4818      	ldr	r0, [pc, #96]	@ (8001228 <MX_GPIO_Init+0x100>)
 80011c8:	f001 f8ea 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHIP_SELECT_Pin */
  GPIO_InitStruct.Pin = CHIP_SELECT_Pin;
 80011cc:	2301      	movs	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2302      	movs	r3, #2
 80011da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHIP_SELECT_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4619      	mov	r1, r3
 80011e2:	4810      	ldr	r0, [pc, #64]	@ (8001224 <MX_GPIO_Init+0xfc>)
 80011e4:	f001 f8dc 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = RELAY_BUTTON_Pin;
 80011e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011ee:	2311      	movs	r3, #17
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	4619      	mov	r1, r3
 8001200:	4809      	ldr	r0, [pc, #36]	@ (8001228 <MX_GPIO_Init+0x100>)
 8001202:	f001 f8cd 	bl	80023a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2028      	movs	r0, #40	@ 0x28
 800120c:	f001 f891 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001210:	2028      	movs	r0, #40	@ 0x28
 8001212:	f001 f8aa 	bl	800236a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001216:	bf00      	nop
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	40010c00 	.word	0x40010c00
 8001228:	40011000 	.word	0x40011000
 800122c:	10110000 	.word	0x10110000

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <Error_Handler+0x8>

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <HAL_MspInit+0x5c>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <HAL_MspInit+0x5c>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6193      	str	r3, [r2, #24]
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_MspInit+0x5c>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <HAL_MspInit+0x5c>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a0e      	ldr	r2, [pc, #56]	@ (8001298 <HAL_MspInit+0x5c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <HAL_MspInit+0x5c>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_MspInit+0x60>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <HAL_MspInit+0x60>)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000

080012a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a14      	ldr	r2, [pc, #80]	@ (800130c <HAL_ADC_MspInit+0x6c>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d121      	bne.n	8001304 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c0:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <HAL_ADC_MspInit+0x70>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a12      	ldr	r2, [pc, #72]	@ (8001310 <HAL_ADC_MspInit+0x70>)
 80012c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <HAL_ADC_MspInit+0x70>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <HAL_ADC_MspInit+0x70>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001310 <HAL_ADC_MspInit+0x70>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_ADC_MspInit+0x70>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012f0:	2302      	movs	r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f4:	2303      	movs	r3, #3
 80012f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	4619      	mov	r1, r3
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <HAL_ADC_MspInit+0x74>)
 8001300:	f001 f84e 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40012400 	.word	0x40012400
 8001310:	40021000 	.word	0x40021000
 8001314:	40010800 	.word	0x40010800

08001318 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	@ 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a32      	ldr	r2, [pc, #200]	@ (80013fc <HAL_I2C_MspInit+0xe4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d133      	bne.n	80013a0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001338:	4b31      	ldr	r3, [pc, #196]	@ (8001400 <HAL_I2C_MspInit+0xe8>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a30      	ldr	r2, [pc, #192]	@ (8001400 <HAL_I2C_MspInit+0xe8>)
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <HAL_I2C_MspInit+0xe8>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001350:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001356:	2312      	movs	r3, #18
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	4827      	ldr	r0, [pc, #156]	@ (8001404 <HAL_I2C_MspInit+0xec>)
 8001366:	f001 f81b 	bl	80023a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800136a:	4b27      	ldr	r3, [pc, #156]	@ (8001408 <HAL_I2C_MspInit+0xf0>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001372:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001380:	4a21      	ldr	r2, [pc, #132]	@ (8001408 <HAL_I2C_MspInit+0xf0>)
 8001382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001384:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001386:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <HAL_I2C_MspInit+0xe8>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a1d      	ldr	r2, [pc, #116]	@ (8001400 <HAL_I2C_MspInit+0xe8>)
 800138c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <HAL_I2C_MspInit+0xe8>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800139e:	e029      	b.n	80013f4 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a19      	ldr	r2, [pc, #100]	@ (800140c <HAL_I2C_MspInit+0xf4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d124      	bne.n	80013f4 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_I2C_MspInit+0xe8>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4a14      	ldr	r2, [pc, #80]	@ (8001400 <HAL_I2C_MspInit+0xe8>)
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	6193      	str	r3, [r2, #24]
 80013b6:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <HAL_I2C_MspInit+0xe8>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c8:	2312      	movs	r3, #18
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	480b      	ldr	r0, [pc, #44]	@ (8001404 <HAL_I2C_MspInit+0xec>)
 80013d8:	f000 ffe2 	bl	80023a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <HAL_I2C_MspInit+0xe8>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	4a07      	ldr	r2, [pc, #28]	@ (8001400 <HAL_I2C_MspInit+0xe8>)
 80013e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013e6:	61d3      	str	r3, [r2, #28]
 80013e8:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <HAL_I2C_MspInit+0xe8>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	@ 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40005400 	.word	0x40005400
 8001400:	40021000 	.word	0x40021000
 8001404:	40010c00 	.word	0x40010c00
 8001408:	40010000 	.word	0x40010000
 800140c:	40005800 	.word	0x40005800

08001410 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a1c      	ldr	r2, [pc, #112]	@ (800149c <HAL_SPI_MspInit+0x8c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d131      	bne.n	8001494 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <HAL_SPI_MspInit+0x90>)
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	4a1a      	ldr	r2, [pc, #104]	@ (80014a0 <HAL_SPI_MspInit+0x90>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800143a:	61d3      	str	r3, [r2, #28]
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <HAL_SPI_MspInit+0x90>)
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <HAL_SPI_MspInit+0x90>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a14      	ldr	r2, [pc, #80]	@ (80014a0 <HAL_SPI_MspInit+0x90>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_SPI_MspInit+0x90>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001460:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001464:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	4619      	mov	r1, r3
 8001474:	480b      	ldr	r0, [pc, #44]	@ (80014a4 <HAL_SPI_MspInit+0x94>)
 8001476:	f000 ff93 	bl	80023a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800147a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800147e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4619      	mov	r1, r3
 800148e:	4805      	ldr	r0, [pc, #20]	@ (80014a4 <HAL_SPI_MspInit+0x94>)
 8001490:	f000 ff86 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001494:	bf00      	nop
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40003800 	.word	0x40003800
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010c00 	.word	0x40010c00

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <NMI_Handler+0x4>

080014b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f8:	f000 faea 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001504:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001508:	f001 f8e6 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <ITM_SendChar+0x44>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a0d      	ldr	r2, [pc, #52]	@ (8001554 <ITM_SendChar+0x44>)
 8001520:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001524:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <ITM_SendChar+0x48>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a0b      	ldr	r2, [pc, #44]	@ (8001558 <ITM_SendChar+0x48>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001532:	bf00      	nop
 8001534:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f8      	beq.n	8001534 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001542:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	6013      	str	r3, [r2, #0]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	e000edfc 	.word	0xe000edfc
 8001558:	e0000e00 	.word	0xe0000e00

0800155c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return 1;
 8001560:	2301      	movs	r3, #1
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <_kill>:

int _kill(int pid, int sig)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001574:	f003 fa9a 	bl	8004aac <__errno>
 8001578:	4603      	mov	r3, r0
 800157a:	2216      	movs	r2, #22
 800157c:	601a      	str	r2, [r3, #0]
  return -1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_exit>:

void _exit (int status)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001592:	f04f 31ff 	mov.w	r1, #4294967295
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffe7 	bl	800156a <_kill>
  while (1) {}    /* Make sure we hang here */
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <_exit+0x12>

080015a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e00a      	b.n	80015c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015b2:	f3af 8000 	nop.w
 80015b6:	4601      	mov	r1, r0
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	60ba      	str	r2, [r7, #8]
 80015be:	b2ca      	uxtb	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dbf0      	blt.n	80015b2 <_read+0x12>
  }

  return len;
 80015d0:	687b      	ldr	r3, [r7, #4]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e009      	b.n	8001600 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	60ba      	str	r2, [r7, #8]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff8b 	bl	8001510 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	dbf1      	blt.n	80015ec <_write+0x12>
  }
  return len;
 8001608:	687b      	ldr	r3, [r7, #4]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_close>:

int _close(int file)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001638:	605a      	str	r2, [r3, #4]
  return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <_isatty>:

int _isatty(int file)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
	...

08001674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800167c:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <_sbrk+0x5c>)
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <_sbrk+0x60>)
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <_sbrk+0x64>)
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <_sbrk+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d207      	bcs.n	80016b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a4:	f003 fa02 	bl	8004aac <__errno>
 80016a8:	4603      	mov	r3, r0
 80016aa:	220c      	movs	r2, #12
 80016ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	e009      	b.n	80016c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b4:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	4a05      	ldr	r2, [pc, #20]	@ (80016d8 <_sbrk+0x64>)
 80016c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20005000 	.word	0x20005000
 80016d4:	00000400 	.word	0x00000400
 80016d8:	20000330 	.word	0x20000330
 80016dc:	20000890 	.word	0x20000890

080016e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016ec:	f7ff fff8 	bl	80016e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f0:	480b      	ldr	r0, [pc, #44]	@ (8001720 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016f2:	490c      	ldr	r1, [pc, #48]	@ (8001724 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001728 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a09      	ldr	r2, [pc, #36]	@ (800172c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001708:	4c09      	ldr	r4, [pc, #36]	@ (8001730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001716:	f003 f9cf 	bl	8004ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800171a:	f7ff fb9b 	bl	8000e54 <main>
  bx lr
 800171e:	4770      	bx	lr
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001728:	08006b68 	.word	0x08006b68
  ldr r2, =_sbss
 800172c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001730:	2000088c 	.word	0x2000088c

08001734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC1_2_IRQHandler>

08001736 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8001736:	b590      	push	{r4, r7, lr}
 8001738:	b089      	sub	sp, #36	@ 0x24
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	4613      	mov	r3, r2
 8001744:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	6839      	ldr	r1, [r7, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f000 f835 	bl	80017c8 <MCP4725_setReferenceVoltage>
	//printf("set ref voltage to 3.3\n");

	return _MCP4725;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	461c      	mov	r4, r3
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	3724      	adds	r7, #36	@ 0x24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}

08001774 <MCP4725_isConnected>:

    Check the connection
*/
/**************************************************************************/
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	//printf("mcp4725_is connectde ??\n");
	int x = HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, HAL_MAX_DELAY);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	791b      	ldrb	r3, [r3, #4]
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	2202      	movs	r2, #2
 800178c:	f001 fa04 	bl	8002b98 <HAL_I2C_IsDeviceReady>
 8001790:	4603      	mov	r3, r0
 8001792:	60fb      	str	r3, [r7, #12]
	printf("hal i2c is  device ready == %d\n",x);
 8001794:	68f9      	ldr	r1, [r7, #12]
 8001796:	480b      	ldr	r0, [pc, #44]	@ (80017c4 <MCP4725_isConnected+0x50>)
 8001798:	f002 ffee 	bl	8004778 <iprintf>

	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	791b      	ldrb	r3, [r3, #4]
 80017a4:	4619      	mov	r1, r3
 80017a6:	2364      	movs	r3, #100	@ 0x64
 80017a8:	2202      	movs	r2, #2
 80017aa:	f001 f9f5 	bl	8002b98 <HAL_I2C_IsDeviceReady>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	0800679c 	.word	0x0800679c

080017c8 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 80017d2:	f04f 0100 	mov.w	r1, #0
 80017d6:	6838      	ldr	r0, [r7, #0]
 80017d8:	f7ff faea 	bl	8000db0 <__aeabi_fcmpeq>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <MCP4725_setReferenceVoltage+0x22>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001818 <MCP4725_setReferenceVoltage+0x50>)
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	e002      	b.n	80017f0 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f04f 408b 	mov.w	r0, #1166016512	@ 0x45800000
 80017fa:	f7ff f9f9 	bl	8000bf0 <__aeabi_fdiv>
 80017fe:	4603      	mov	r3, r0
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fb07 	bl	8000e14 <__aeabi_f2uiz>
 8001806:	4603      	mov	r3, r0
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	819a      	strh	r2, [r3, #12]
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40533333 	.word	0x40533333

0800181c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af04      	add	r7, sp, #16
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	2301      	movs	r3, #1
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	1dfb      	adds	r3, r7, #7
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2301      	movs	r3, #1
 8001842:	2200      	movs	r2, #0
 8001844:	2178      	movs	r1, #120	@ 0x78
 8001846:	4803      	ldr	r0, [pc, #12]	@ (8001854 <ssd1306_WriteCommand+0x2c>)
 8001848:	f001 f8ac 	bl	80029a4 <HAL_I2C_Mem_Write>
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000220 	.word	0x20000220

08001858 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af04      	add	r7, sp, #16
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	f04f 32ff 	mov.w	r2, #4294967295
 800186a:	9202      	str	r2, [sp, #8]
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2301      	movs	r3, #1
 8001874:	2240      	movs	r2, #64	@ 0x40
 8001876:	2178      	movs	r1, #120	@ 0x78
 8001878:	4803      	ldr	r0, [pc, #12]	@ (8001888 <ssd1306_WriteData+0x30>)
 800187a:	f001 f893 	bl	80029a4 <HAL_I2C_Mem_Write>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000220 	.word	0x20000220

0800188c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001890:	f7ff ffc4 	bl	800181c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001894:	2064      	movs	r0, #100	@ 0x64
 8001896:	f000 f937 	bl	8001b08 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f8b4 	bl	8001a08 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80018a0:	2020      	movs	r0, #32
 80018a2:	f7ff ffc1 	bl	8001828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff ffbe 	bl	8001828 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80018ac:	20b0      	movs	r0, #176	@ 0xb0
 80018ae:	f7ff ffbb 	bl	8001828 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80018b2:	20c8      	movs	r0, #200	@ 0xc8
 80018b4:	f7ff ffb8 	bl	8001828 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff ffb5 	bl	8001828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80018be:	2010      	movs	r0, #16
 80018c0:	f7ff ffb2 	bl	8001828 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80018c4:	2040      	movs	r0, #64	@ 0x40
 80018c6:	f7ff ffaf 	bl	8001828 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80018ca:	20ff      	movs	r0, #255	@ 0xff
 80018cc:	f000 f888 	bl	80019e0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80018d0:	20a1      	movs	r0, #161	@ 0xa1
 80018d2:	f7ff ffa9 	bl	8001828 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80018d6:	20a6      	movs	r0, #166	@ 0xa6
 80018d8:	f7ff ffa6 	bl	8001828 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80018dc:	20a8      	movs	r0, #168	@ 0xa8
 80018de:	f7ff ffa3 	bl	8001828 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80018e2:	203f      	movs	r0, #63	@ 0x3f
 80018e4:	f7ff ffa0 	bl	8001828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018e8:	20a4      	movs	r0, #164	@ 0xa4
 80018ea:	f7ff ff9d 	bl	8001828 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80018ee:	20d3      	movs	r0, #211	@ 0xd3
 80018f0:	f7ff ff9a 	bl	8001828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff ff97 	bl	8001828 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80018fa:	20d5      	movs	r0, #213	@ 0xd5
 80018fc:	f7ff ff94 	bl	8001828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001900:	20f0      	movs	r0, #240	@ 0xf0
 8001902:	f7ff ff91 	bl	8001828 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001906:	20d9      	movs	r0, #217	@ 0xd9
 8001908:	f7ff ff8e 	bl	8001828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800190c:	2022      	movs	r0, #34	@ 0x22
 800190e:	f7ff ff8b 	bl	8001828 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001912:	20da      	movs	r0, #218	@ 0xda
 8001914:	f7ff ff88 	bl	8001828 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001918:	2012      	movs	r0, #18
 800191a:	f7ff ff85 	bl	8001828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800191e:	20db      	movs	r0, #219	@ 0xdb
 8001920:	f7ff ff82 	bl	8001828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001924:	2020      	movs	r0, #32
 8001926:	f7ff ff7f 	bl	8001828 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800192a:	208d      	movs	r0, #141	@ 0x8d
 800192c:	f7ff ff7c 	bl	8001828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001930:	2014      	movs	r0, #20
 8001932:	f7ff ff79 	bl	8001828 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001936:	2001      	movs	r0, #1
 8001938:	f000 f866 	bl	8001a08 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800193c:	2000      	movs	r0, #0
 800193e:	f000 f80f 	bl	8001960 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001942:	f000 f825 	bl	8001990 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <ssd1306_Init+0xd0>)
 8001948:	2200      	movs	r2, #0
 800194a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800194c:	4b03      	ldr	r3, [pc, #12]	@ (800195c <ssd1306_Init+0xd0>)
 800194e:	2200      	movs	r2, #0
 8001950:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001952:	4b02      	ldr	r3, [pc, #8]	@ (800195c <ssd1306_Init+0xd0>)
 8001954:	2201      	movs	r2, #1
 8001956:	711a      	strb	r2, [r3, #4]
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000734 	.word	0x20000734

08001960 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <ssd1306_Fill+0x14>
 8001970:	2300      	movs	r3, #0
 8001972:	e000      	b.n	8001976 <ssd1306_Fill+0x16>
 8001974:	23ff      	movs	r3, #255	@ 0xff
 8001976:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800197a:	4619      	mov	r1, r3
 800197c:	4803      	ldr	r0, [pc, #12]	@ (800198c <ssd1306_Fill+0x2c>)
 800197e:	f003 f843 	bl	8004a08 <memset>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000334 	.word	0x20000334

08001990 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001996:	2300      	movs	r3, #0
 8001998:	71fb      	strb	r3, [r7, #7]
 800199a:	e016      	b.n	80019ca <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	3b50      	subs	r3, #80	@ 0x50
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff40 	bl	8001828 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff ff3d 	bl	8001828 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80019ae:	2010      	movs	r0, #16
 80019b0:	f7ff ff3a 	bl	8001828 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	01db      	lsls	r3, r3, #7
 80019b8:	4a08      	ldr	r2, [pc, #32]	@ (80019dc <ssd1306_UpdateScreen+0x4c>)
 80019ba:	4413      	add	r3, r2
 80019bc:	2180      	movs	r1, #128	@ 0x80
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff4a 	bl	8001858 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	3301      	adds	r3, #1
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b07      	cmp	r3, #7
 80019ce:	d9e5      	bls.n	800199c <ssd1306_UpdateScreen+0xc>
    }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000334 	.word	0x20000334

080019e0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80019ea:	2381      	movs	r3, #129	@ 0x81
 80019ec:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff19 	bl	8001828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff15 	bl	8001828 <ssd1306_WriteCommand>
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001a18:	23af      	movs	r3, #175	@ 0xaf
 8001a1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <ssd1306_SetDisplayOn+0x38>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	715a      	strb	r2, [r3, #5]
 8001a22:	e004      	b.n	8001a2e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001a24:	23ae      	movs	r3, #174	@ 0xae
 8001a26:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <ssd1306_SetDisplayOn+0x38>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fef9 	bl	8001828 <ssd1306_WriteCommand>
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000734 	.word	0x20000734

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <HAL_Init+0x28>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <HAL_Init+0x28>)
 8001a4e:	f043 0310 	orr.w	r3, r3, #16
 8001a52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f000 fc61 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f000 f808 	bl	8001a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a60:	f7ff fbec 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40022000 	.word	0x40022000

08001a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a78:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <HAL_InitTick+0x54>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <HAL_InitTick+0x58>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4619      	mov	r1, r3
 8001a82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fc79 	bl	8002386 <HAL_SYSTICK_Config>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00e      	b.n	8001abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b0f      	cmp	r3, #15
 8001aa2:	d80a      	bhi.n	8001aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f000 fc41 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab0:	4a06      	ldr	r2, [pc, #24]	@ (8001acc <HAL_InitTick+0x5c>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_IncTick+0x1c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_IncTick+0x20>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a03      	ldr	r2, [pc, #12]	@ (8001af0 <HAL_IncTick+0x20>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	20000008 	.word	0x20000008
 8001af0:	2000073c 	.word	0x2000073c

08001af4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;
 8001af8:	4b02      	ldr	r3, [pc, #8]	@ (8001b04 <HAL_GetTick+0x10>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	2000073c 	.word	0x2000073c

08001b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff fff0 	bl	8001af4 <HAL_GetTick>
 8001b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d005      	beq.n	8001b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <HAL_Delay+0x44>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b2e:	bf00      	nop
 8001b30:	f7ff ffe0 	bl	8001af4 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d8f7      	bhi.n	8001b30 <HAL_Delay+0x28>
  {
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000008 	.word	0x20000008

08001b50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e0be      	b.n	8001cf0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fb86 	bl	80012a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fab3 	bl	8002100 <ADC_ConversionStop_Disable>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 8099 	bne.w	8001cde <HAL_ADC_Init+0x18e>
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 8095 	bne.w	8001cde <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bbc:	f023 0302 	bic.w	r3, r3, #2
 8001bc0:	f043 0202 	orr.w	r2, r3, #2
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bd0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7b1b      	ldrb	r3, [r3, #12]
 8001bd6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bd8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001be8:	d003      	beq.n	8001bf2 <HAL_ADC_Init+0xa2>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d102      	bne.n	8001bf8 <HAL_ADC_Init+0xa8>
 8001bf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bf6:	e000      	b.n	8001bfa <HAL_ADC_Init+0xaa>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7d1b      	ldrb	r3, [r3, #20]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d119      	bne.n	8001c3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7b1b      	ldrb	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	035a      	lsls	r2, r3, #13
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e00b      	b.n	8001c3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	f043 0220 	orr.w	r2, r3, #32
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	4b28      	ldr	r3, [pc, #160]	@ (8001cf8 <HAL_ADC_Init+0x1a8>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c6c:	d003      	beq.n	8001c76 <HAL_ADC_Init+0x126>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d104      	bne.n	8001c80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	051b      	lsls	r3, r3, #20
 8001c7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c86:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <HAL_ADC_Init+0x1ac>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d10b      	bne.n	8001cbc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cae:	f023 0303 	bic.w	r3, r3, #3
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cba:	e018      	b.n	8001cee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc0:	f023 0312 	bic.w	r3, r3, #18
 8001cc4:	f043 0210 	orr.w	r2, r3, #16
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cdc:	e007      	b.n	8001cee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce2:	f043 0210 	orr.w	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	ffe1f7fd 	.word	0xffe1f7fd
 8001cfc:	ff1f0efe 	.word	0xff1f0efe

08001d00 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_Start+0x1a>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e098      	b.n	8001e4c <HAL_ADC_Start+0x14c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f992 	bl	800204c <ADC_Enable>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 8087 	bne.w	8001e42 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a41      	ldr	r2, [pc, #260]	@ (8001e54 <HAL_ADC_Start+0x154>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d105      	bne.n	8001d5e <HAL_ADC_Start+0x5e>
 8001d52:	4b41      	ldr	r3, [pc, #260]	@ (8001e58 <HAL_ADC_Start+0x158>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d115      	bne.n	8001d8a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d62:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d026      	beq.n	8001dc6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d88:	e01d      	b.n	8001dc6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e58 <HAL_ADC_Start+0x158>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d004      	beq.n	8001daa <HAL_ADC_Start+0xaa>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e54 <HAL_ADC_Start+0x154>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d10d      	bne.n	8001dc6 <HAL_ADC_Start+0xc6>
 8001daa:	4b2b      	ldr	r3, [pc, #172]	@ (8001e58 <HAL_ADC_Start+0x158>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dbe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d006      	beq.n	8001de0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd6:	f023 0206 	bic.w	r2, r3, #6
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001dde:	e002      	b.n	8001de6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f06f 0202 	mvn.w	r2, #2
 8001df6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e02:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e06:	d113      	bne.n	8001e30 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e0c:	4a11      	ldr	r2, [pc, #68]	@ (8001e54 <HAL_ADC_Start+0x154>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d105      	bne.n	8001e1e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_ADC_Start+0x158>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d108      	bne.n	8001e30 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	e00c      	b.n	8001e4a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	e003      	b.n	8001e4a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40012800 	.word	0x40012800
 8001e58:	40012400 	.word	0x40012400

08001e5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x20>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e0dc      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1da>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b06      	cmp	r3, #6
 8001e8a:	d81c      	bhi.n	8001ec6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b05      	subs	r3, #5
 8001e9e:	221f      	movs	r2, #31
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	4019      	ands	r1, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b05      	subs	r3, #5
 8001eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ec4:	e03c      	b.n	8001f40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	d81c      	bhi.n	8001f08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	3b23      	subs	r3, #35	@ 0x23
 8001ee0:	221f      	movs	r2, #31
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	4019      	ands	r1, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b23      	subs	r3, #35	@ 0x23
 8001efa:	fa00 f203 	lsl.w	r2, r0, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f06:	e01b      	b.n	8001f40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	3b41      	subs	r3, #65	@ 0x41
 8001f1a:	221f      	movs	r2, #31
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4019      	ands	r1, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	3b41      	subs	r3, #65	@ 0x41
 8001f34:	fa00 f203 	lsl.w	r2, r0, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b09      	cmp	r3, #9
 8001f46:	d91c      	bls.n	8001f82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68d9      	ldr	r1, [r3, #12]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	3b1e      	subs	r3, #30
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	4019      	ands	r1, r3
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6898      	ldr	r0, [r3, #8]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	3b1e      	subs	r3, #30
 8001f74:	fa00 f203 	lsl.w	r2, r0, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	e019      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6919      	ldr	r1, [r3, #16]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	2207      	movs	r2, #7
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4019      	ands	r1, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6898      	ldr	r0, [r3, #8]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	fa00 f203 	lsl.w	r2, r0, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b10      	cmp	r3, #16
 8001fbc:	d003      	beq.n	8001fc6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fc2:	2b11      	cmp	r3, #17
 8001fc4:	d132      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1d      	ldr	r2, [pc, #116]	@ (8002040 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d125      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d126      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001fec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d11a      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff6:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a13      	ldr	r2, [pc, #76]	@ (8002048 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	0c9a      	lsrs	r2, r3, #18
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800200c:	e002      	b.n	8002014 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3b01      	subs	r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f9      	bne.n	800200e <HAL_ADC_ConfigChannel+0x1b2>
 800201a:	e007      	b.n	800202c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	40012400 	.word	0x40012400
 8002044:	20000000 	.word	0x20000000
 8002048:	431bde83 	.word	0x431bde83

0800204c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b01      	cmp	r3, #1
 8002068:	d040      	beq.n	80020ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800207a:	4b1f      	ldr	r3, [pc, #124]	@ (80020f8 <ADC_Enable+0xac>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1f      	ldr	r2, [pc, #124]	@ (80020fc <ADC_Enable+0xb0>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	0c9b      	lsrs	r3, r3, #18
 8002086:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002088:	e002      	b.n	8002090 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	3b01      	subs	r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f9      	bne.n	800208a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002096:	f7ff fd2d 	bl	8001af4 <HAL_GetTick>
 800209a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800209c:	e01f      	b.n	80020de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800209e:	f7ff fd29 	bl	8001af4 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d918      	bls.n	80020de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d011      	beq.n	80020de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	f043 0210 	orr.w	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e007      	b.n	80020ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d1d8      	bne.n	800209e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000000 	.word	0x20000000
 80020fc:	431bde83 	.word	0x431bde83

08002100 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b01      	cmp	r3, #1
 8002118:	d12e      	bne.n	8002178 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800212a:	f7ff fce3 	bl	8001af4 <HAL_GetTick>
 800212e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002130:	e01b      	b.n	800216a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002132:	f7ff fcdf 	bl	8001af4 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d914      	bls.n	800216a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d10d      	bne.n	800216a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002152:	f043 0210 	orr.w	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	f043 0201 	orr.w	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e007      	b.n	800217a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d0dc      	beq.n	8002132 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4906      	ldr	r1, [pc, #24]	@ (800221c <__NVIC_EnableIRQ+0x34>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	@ (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	@ (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	@ 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	@ 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff90 	bl	8002220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff2d 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff42 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff90 	bl	8002274 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5f 	bl	8002220 <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff35 	bl	80021e8 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa2 	bl	80022d8 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b08b      	sub	sp, #44	@ 0x2c
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b2:	e169      	b.n	8002688 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023b4:	2201      	movs	r2, #1
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	f040 8158 	bne.w	8002682 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4a9a      	ldr	r2, [pc, #616]	@ (8002640 <HAL_GPIO_Init+0x2a0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d05e      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023dc:	4a98      	ldr	r2, [pc, #608]	@ (8002640 <HAL_GPIO_Init+0x2a0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d875      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023e2:	4a98      	ldr	r2, [pc, #608]	@ (8002644 <HAL_GPIO_Init+0x2a4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d058      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023e8:	4a96      	ldr	r2, [pc, #600]	@ (8002644 <HAL_GPIO_Init+0x2a4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d86f      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023ee:	4a96      	ldr	r2, [pc, #600]	@ (8002648 <HAL_GPIO_Init+0x2a8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d052      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023f4:	4a94      	ldr	r2, [pc, #592]	@ (8002648 <HAL_GPIO_Init+0x2a8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d869      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023fa:	4a94      	ldr	r2, [pc, #592]	@ (800264c <HAL_GPIO_Init+0x2ac>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d04c      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 8002400:	4a92      	ldr	r2, [pc, #584]	@ (800264c <HAL_GPIO_Init+0x2ac>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d863      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 8002406:	4a92      	ldr	r2, [pc, #584]	@ (8002650 <HAL_GPIO_Init+0x2b0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d046      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 800240c:	4a90      	ldr	r2, [pc, #576]	@ (8002650 <HAL_GPIO_Init+0x2b0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d85d      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 8002412:	2b12      	cmp	r3, #18
 8002414:	d82a      	bhi.n	800246c <HAL_GPIO_Init+0xcc>
 8002416:	2b12      	cmp	r3, #18
 8002418:	d859      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 800241a:	a201      	add	r2, pc, #4	@ (adr r2, 8002420 <HAL_GPIO_Init+0x80>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	0800249b 	.word	0x0800249b
 8002424:	08002475 	.word	0x08002475
 8002428:	08002487 	.word	0x08002487
 800242c:	080024c9 	.word	0x080024c9
 8002430:	080024cf 	.word	0x080024cf
 8002434:	080024cf 	.word	0x080024cf
 8002438:	080024cf 	.word	0x080024cf
 800243c:	080024cf 	.word	0x080024cf
 8002440:	080024cf 	.word	0x080024cf
 8002444:	080024cf 	.word	0x080024cf
 8002448:	080024cf 	.word	0x080024cf
 800244c:	080024cf 	.word	0x080024cf
 8002450:	080024cf 	.word	0x080024cf
 8002454:	080024cf 	.word	0x080024cf
 8002458:	080024cf 	.word	0x080024cf
 800245c:	080024cf 	.word	0x080024cf
 8002460:	080024cf 	.word	0x080024cf
 8002464:	0800247d 	.word	0x0800247d
 8002468:	08002491 	.word	0x08002491
 800246c:	4a79      	ldr	r2, [pc, #484]	@ (8002654 <HAL_GPIO_Init+0x2b4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002472:	e02c      	b.n	80024ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	623b      	str	r3, [r7, #32]
          break;
 800247a:	e029      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	3304      	adds	r3, #4
 8002482:	623b      	str	r3, [r7, #32]
          break;
 8002484:	e024      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	3308      	adds	r3, #8
 800248c:	623b      	str	r3, [r7, #32]
          break;
 800248e:	e01f      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	330c      	adds	r3, #12
 8002496:	623b      	str	r3, [r7, #32]
          break;
 8002498:	e01a      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024a2:	2304      	movs	r3, #4
 80024a4:	623b      	str	r3, [r7, #32]
          break;
 80024a6:	e013      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b0:	2308      	movs	r3, #8
 80024b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	611a      	str	r2, [r3, #16]
          break;
 80024ba:	e009      	b.n	80024d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024bc:	2308      	movs	r3, #8
 80024be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	615a      	str	r2, [r3, #20]
          break;
 80024c6:	e003      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
          break;
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          break;
 80024ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2bff      	cmp	r3, #255	@ 0xff
 80024d4:	d801      	bhi.n	80024da <HAL_GPIO_Init+0x13a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	e001      	b.n	80024de <HAL_GPIO_Init+0x13e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3304      	adds	r3, #4
 80024de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2bff      	cmp	r3, #255	@ 0xff
 80024e4:	d802      	bhi.n	80024ec <HAL_GPIO_Init+0x14c>
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	e002      	b.n	80024f2 <HAL_GPIO_Init+0x152>
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	3b08      	subs	r3, #8
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	210f      	movs	r1, #15
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	401a      	ands	r2, r3
 8002504:	6a39      	ldr	r1, [r7, #32]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	431a      	orrs	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80b1 	beq.w	8002682 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002520:	4b4d      	ldr	r3, [pc, #308]	@ (8002658 <HAL_GPIO_Init+0x2b8>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4a4c      	ldr	r2, [pc, #304]	@ (8002658 <HAL_GPIO_Init+0x2b8>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6193      	str	r3, [r2, #24]
 800252c:	4b4a      	ldr	r3, [pc, #296]	@ (8002658 <HAL_GPIO_Init+0x2b8>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002538:	4a48      	ldr	r2, [pc, #288]	@ (800265c <HAL_GPIO_Init+0x2bc>)
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a40      	ldr	r2, [pc, #256]	@ (8002660 <HAL_GPIO_Init+0x2c0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d013      	beq.n	800258c <HAL_GPIO_Init+0x1ec>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a3f      	ldr	r2, [pc, #252]	@ (8002664 <HAL_GPIO_Init+0x2c4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00d      	beq.n	8002588 <HAL_GPIO_Init+0x1e8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3e      	ldr	r2, [pc, #248]	@ (8002668 <HAL_GPIO_Init+0x2c8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d007      	beq.n	8002584 <HAL_GPIO_Init+0x1e4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3d      	ldr	r2, [pc, #244]	@ (800266c <HAL_GPIO_Init+0x2cc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d101      	bne.n	8002580 <HAL_GPIO_Init+0x1e0>
 800257c:	2303      	movs	r3, #3
 800257e:	e006      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002580:	2304      	movs	r3, #4
 8002582:	e004      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002584:	2302      	movs	r3, #2
 8002586:	e002      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 800258c:	2300      	movs	r3, #0
 800258e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002590:	f002 0203 	and.w	r2, r2, #3
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	4093      	lsls	r3, r2
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800259e:	492f      	ldr	r1, [pc, #188]	@ (800265c <HAL_GPIO_Init+0x2bc>)
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	3302      	adds	r3, #2
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	492c      	ldr	r1, [pc, #176]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	4928      	ldr	r1, [pc, #160]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d006      	beq.n	80025ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025e0:	4b23      	ldr	r3, [pc, #140]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	4922      	ldr	r1, [pc, #136]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60cb      	str	r3, [r1, #12]
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	491e      	ldr	r1, [pc, #120]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	4918      	ldr	r1, [pc, #96]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002616:	4b16      	ldr	r3, [pc, #88]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	43db      	mvns	r3, r3
 800261e:	4914      	ldr	r1, [pc, #80]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 8002620:	4013      	ands	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d021      	beq.n	8002674 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002630:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	490e      	ldr	r1, [pc, #56]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
 800263c:	e021      	b.n	8002682 <HAL_GPIO_Init+0x2e2>
 800263e:	bf00      	nop
 8002640:	10320000 	.word	0x10320000
 8002644:	10310000 	.word	0x10310000
 8002648:	10220000 	.word	0x10220000
 800264c:	10210000 	.word	0x10210000
 8002650:	10120000 	.word	0x10120000
 8002654:	10110000 	.word	0x10110000
 8002658:	40021000 	.word	0x40021000
 800265c:	40010000 	.word	0x40010000
 8002660:	40010800 	.word	0x40010800
 8002664:	40010c00 	.word	0x40010c00
 8002668:	40011000 	.word	0x40011000
 800266c:	40011400 	.word	0x40011400
 8002670:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	43db      	mvns	r3, r3
 800267c:	4909      	ldr	r1, [pc, #36]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 800267e:	4013      	ands	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	3301      	adds	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	f47f ae8e 	bne.w	80023b4 <HAL_GPIO_Init+0x14>
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	372c      	adds	r7, #44	@ 0x2c
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	40010400 	.word	0x40010400

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026c4:	e003      	b.n	80026ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	611a      	str	r2, [r3, #16]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026e2:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ee:	4a05      	ldr	r2, [pc, #20]	@ (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f806 	bl	8002708 <HAL_GPIO_EXTI_Callback>
  }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40010400 	.word	0x40010400

08002708 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e12b      	b.n	8002986 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fde8 	bl	8001318 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	@ 0x24
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800276e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800277e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002780:	f001 f970 	bl	8003a64 <HAL_RCC_GetPCLK1Freq>
 8002784:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a81      	ldr	r2, [pc, #516]	@ (8002990 <HAL_I2C_Init+0x274>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d807      	bhi.n	80027a0 <HAL_I2C_Init+0x84>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a80      	ldr	r2, [pc, #512]	@ (8002994 <HAL_I2C_Init+0x278>)
 8002794:	4293      	cmp	r3, r2
 8002796:	bf94      	ite	ls
 8002798:	2301      	movls	r3, #1
 800279a:	2300      	movhi	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e006      	b.n	80027ae <HAL_I2C_Init+0x92>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002998 <HAL_I2C_Init+0x27c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	bf94      	ite	ls
 80027a8:	2301      	movls	r3, #1
 80027aa:	2300      	movhi	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0e7      	b.n	8002986 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a78      	ldr	r2, [pc, #480]	@ (800299c <HAL_I2C_Init+0x280>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0c9b      	lsrs	r3, r3, #18
 80027c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002990 <HAL_I2C_Init+0x274>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d802      	bhi.n	80027f0 <HAL_I2C_Init+0xd4>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3301      	adds	r3, #1
 80027ee:	e009      	b.n	8002804 <HAL_I2C_Init+0xe8>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	4a69      	ldr	r2, [pc, #420]	@ (80029a0 <HAL_I2C_Init+0x284>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	3301      	adds	r3, #1
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	430b      	orrs	r3, r1
 800280a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002816:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	495c      	ldr	r1, [pc, #368]	@ (8002990 <HAL_I2C_Init+0x274>)
 8002820:	428b      	cmp	r3, r1
 8002822:	d819      	bhi.n	8002858 <HAL_I2C_Init+0x13c>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1e59      	subs	r1, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002832:	1c59      	adds	r1, r3, #1
 8002834:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002838:	400b      	ands	r3, r1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_I2C_Init+0x138>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e59      	subs	r1, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fbb1 f3f3 	udiv	r3, r1, r3
 800284c:	3301      	adds	r3, #1
 800284e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002852:	e051      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 8002854:	2304      	movs	r3, #4
 8002856:	e04f      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <HAL_I2C_Init+0x168>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e58      	subs	r0, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	440b      	add	r3, r1
 800286e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e012      	b.n	80028aa <HAL_I2C_Init+0x18e>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e58      	subs	r0, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	0099      	lsls	r1, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	fbb0 f3f3 	udiv	r3, r0, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Init+0x196>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e022      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10e      	bne.n	80028d8 <HAL_I2C_Init+0x1bc>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1e58      	subs	r0, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	440b      	add	r3, r1
 80028c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028d6:	e00f      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	6809      	ldr	r1, [r1, #0]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002926:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6911      	ldr	r1, [r2, #16]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	4311      	orrs	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	430b      	orrs	r3, r1
 800293a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	000186a0 	.word	0x000186a0
 8002994:	001e847f 	.word	0x001e847f
 8002998:	003d08ff 	.word	0x003d08ff
 800299c:	431bde83 	.word	0x431bde83
 80029a0:	10624dd3 	.word	0x10624dd3

080029a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	4608      	mov	r0, r1
 80029ae:	4611      	mov	r1, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	817b      	strh	r3, [r7, #10]
 80029b6:	460b      	mov	r3, r1
 80029b8:	813b      	strh	r3, [r7, #8]
 80029ba:	4613      	mov	r3, r2
 80029bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029be:	f7ff f899 	bl	8001af4 <HAL_GetTick>
 80029c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	f040 80d9 	bne.w	8002b84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	2319      	movs	r3, #25
 80029d8:	2201      	movs	r2, #1
 80029da:	496d      	ldr	r1, [pc, #436]	@ (8002b90 <HAL_I2C_Mem_Write+0x1ec>)
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fa9f 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029e8:	2302      	movs	r3, #2
 80029ea:	e0cc      	b.n	8002b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_I2C_Mem_Write+0x56>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e0c5      	b.n	8002b86 <HAL_I2C_Mem_Write+0x1e2>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d007      	beq.n	8002a20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2221      	movs	r2, #33	@ 0x21
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2240      	movs	r2, #64	@ 0x40
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a3a      	ldr	r2, [r7, #32]
 8002a4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a4d      	ldr	r2, [pc, #308]	@ (8002b94 <HAL_I2C_Mem_Write+0x1f0>)
 8002a60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a62:	88f8      	ldrh	r0, [r7, #6]
 8002a64:	893a      	ldrh	r2, [r7, #8]
 8002a66:	8979      	ldrh	r1, [r7, #10]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	4603      	mov	r3, r0
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f9be 	bl	8002df4 <I2C_RequestMemoryWrite>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d052      	beq.n	8002b24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e081      	b.n	8002b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fb64 	bl	8003154 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d107      	bne.n	8002aaa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e06b      	b.n	8002b86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab2:	781a      	ldrb	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d11b      	bne.n	8002b24 <HAL_I2C_Mem_Write+0x180>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d017      	beq.n	8002b24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1aa      	bne.n	8002a82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fb57 	bl	80031e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00d      	beq.n	8002b58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d107      	bne.n	8002b54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e016      	b.n	8002b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e000      	b.n	8002b86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	00100002 	.word	0x00100002
 8002b94:	ffff0000 	.word	0xffff0000

08002b98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	@ 0x28
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ba8:	f7fe ffa4 	bl	8001af4 <HAL_GetTick>
 8002bac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	f040 8111 	bne.w	8002de2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2319      	movs	r3, #25
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4988      	ldr	r1, [pc, #544]	@ (8002dec <HAL_I2C_IsDeviceReady+0x254>)
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f9a8 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e104      	b.n	8002de4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_I2C_IsDeviceReady+0x50>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e0fd      	b.n	8002de4 <HAL_I2C_IsDeviceReady+0x24c>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d007      	beq.n	8002c0e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2224      	movs	r2, #36	@ 0x24
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4a70      	ldr	r2, [pc, #448]	@ (8002df0 <HAL_I2C_IsDeviceReady+0x258>)
 8002c30:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c40:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f966 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c68:	d103      	bne.n	8002c72 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c70:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0b6      	b.n	8002de4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c76:	897b      	ldrh	r3, [r7, #10]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c86:	f7fe ff35 	bl	8001af4 <HAL_GetTick>
 8002c8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb0:	bf0c      	ite	eq
 8002cb2:	2301      	moveq	r3, #1
 8002cb4:	2300      	movne	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cba:	e025      	b.n	8002d08 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cbc:	f7fe ff1a 	bl	8001af4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d302      	bcc.n	8002cd2 <HAL_I2C_IsDeviceReady+0x13a>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d103      	bne.n	8002cda <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	22a0      	movs	r2, #160	@ 0xa0
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d12:	d005      	beq.n	8002d20 <HAL_I2C_IsDeviceReady+0x188>
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <HAL_I2C_IsDeviceReady+0x188>
 8002d1a:	7dbb      	ldrb	r3, [r7, #22]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0cd      	beq.n	8002cbc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d129      	bne.n	8002d8a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d44:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2319      	movs	r3, #25
 8002d62:	2201      	movs	r2, #1
 8002d64:	4921      	ldr	r1, [pc, #132]	@ (8002dec <HAL_I2C_IsDeviceReady+0x254>)
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f8da 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e036      	b.n	8002de4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e02c      	b.n	8002de4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d98:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002da2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2319      	movs	r3, #25
 8002daa:	2201      	movs	r2, #1
 8002dac:	490f      	ldr	r1, [pc, #60]	@ (8002dec <HAL_I2C_IsDeviceReady+0x254>)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f8b6 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e012      	b.n	8002de4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	f4ff af32 	bcc.w	8002c32 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
  }
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	00100002 	.word	0x00100002
 8002df0:	ffff0000 	.word	0xffff0000

08002df4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	4608      	mov	r0, r1
 8002dfe:	4611      	mov	r1, r2
 8002e00:	461a      	mov	r2, r3
 8002e02:	4603      	mov	r3, r0
 8002e04:	817b      	strh	r3, [r7, #10]
 8002e06:	460b      	mov	r3, r1
 8002e08:	813b      	strh	r3, [r7, #8]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f878 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00d      	beq.n	8002e52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e44:	d103      	bne.n	8002e4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e05f      	b.n	8002f12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e52:	897b      	ldrh	r3, [r7, #10]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	6a3a      	ldr	r2, [r7, #32]
 8002e66:	492d      	ldr	r1, [pc, #180]	@ (8002f1c <I2C_RequestMemoryWrite+0x128>)
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f8d3 	bl	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e04c      	b.n	8002f12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e90:	6a39      	ldr	r1, [r7, #32]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f95e 	bl	8003154 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d107      	bne.n	8002eb6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e02b      	b.n	8002f12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d105      	bne.n	8002ecc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec0:	893b      	ldrh	r3, [r7, #8]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	611a      	str	r2, [r3, #16]
 8002eca:	e021      	b.n	8002f10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ecc:	893b      	ldrh	r3, [r7, #8]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002edc:	6a39      	ldr	r1, [r7, #32]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f938 	bl	8003154 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00d      	beq.n	8002f06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d107      	bne.n	8002f02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e005      	b.n	8002f12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f06:	893b      	ldrh	r3, [r7, #8]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	00010002 	.word	0x00010002

08002f20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f30:	e048      	b.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d044      	beq.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3a:	f7fe fddb 	bl	8001af4 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d302      	bcc.n	8002f50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d139      	bne.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	0c1b      	lsrs	r3, r3, #16
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d10d      	bne.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	43da      	mvns	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	e00c      	b.n	8002f90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4013      	ands	r3, r2
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d116      	bne.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e023      	b.n	800300c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	0c1b      	lsrs	r3, r3, #16
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10d      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	e00c      	b.n	8003004 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	43da      	mvns	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	429a      	cmp	r2, r3
 8003008:	d093      	beq.n	8002f32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003022:	e071      	b.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003032:	d123      	bne.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003042:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800304c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003068:	f043 0204 	orr.w	r2, r3, #4
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e067      	b.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d041      	beq.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003084:	f7fe fd36 	bl	8001af4 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	d302      	bcc.n	800309a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d136      	bne.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d10c      	bne.n	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	43da      	mvns	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4013      	ands	r3, r2
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	bf14      	ite	ne
 80030b6:	2301      	movne	r3, #1
 80030b8:	2300      	moveq	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	e00b      	b.n	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	43da      	mvns	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4013      	ands	r3, r2
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d016      	beq.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e021      	b.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	0c1b      	lsrs	r3, r3, #16
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d10c      	bne.n	800312c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	43da      	mvns	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4013      	ands	r3, r2
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e00b      	b.n	8003144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	43da      	mvns	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	f47f af6d 	bne.w	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003160:	e034      	b.n	80031cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f886 	bl	8003274 <I2C_IsAcknowledgeFailed>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e034      	b.n	80031dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d028      	beq.n	80031cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7fe fcbb 	bl	8001af4 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11d      	bne.n	80031cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319a:	2b80      	cmp	r3, #128	@ 0x80
 800319c:	d016      	beq.n	80031cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e007      	b.n	80031dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d6:	2b80      	cmp	r3, #128	@ 0x80
 80031d8:	d1c3      	bne.n	8003162 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f0:	e034      	b.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f83e 	bl	8003274 <I2C_IsAcknowledgeFailed>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e034      	b.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d028      	beq.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320a:	f7fe fc73 	bl	8001af4 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d11d      	bne.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b04      	cmp	r3, #4
 800322c:	d016      	beq.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e007      	b.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d1c3      	bne.n	80031f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328a:	d11b      	bne.n	80032c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003294:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	f043 0204 	orr.w	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e272      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8087 	beq.w	80033fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f0:	4b92      	ldr	r3, [pc, #584]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d00c      	beq.n	8003316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032fc:	4b8f      	ldr	r3, [pc, #572]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d112      	bne.n	800332e <HAL_RCC_OscConfig+0x5e>
 8003308:	4b8c      	ldr	r3, [pc, #560]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003314:	d10b      	bne.n	800332e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003316:	4b89      	ldr	r3, [pc, #548]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d06c      	beq.n	80033fc <HAL_RCC_OscConfig+0x12c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d168      	bne.n	80033fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e24c      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x76>
 8003338:	4b80      	ldr	r3, [pc, #512]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a7f      	ldr	r2, [pc, #508]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800333e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	e02e      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x98>
 800334e:	4b7b      	ldr	r3, [pc, #492]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a7a      	ldr	r2, [pc, #488]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b78      	ldr	r3, [pc, #480]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a77      	ldr	r2, [pc, #476]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e01d      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0xbc>
 8003372:	4b72      	ldr	r3, [pc, #456]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a71      	ldr	r2, [pc, #452]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b6f      	ldr	r3, [pc, #444]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6e      	ldr	r2, [pc, #440]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 800338c:	4b6b      	ldr	r3, [pc, #428]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6a      	ldr	r2, [pc, #424]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4b68      	ldr	r3, [pc, #416]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a67      	ldr	r2, [pc, #412]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800339e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7fe fba2 	bl	8001af4 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fe fb9e 	bl	8001af4 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	@ 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e200      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b5d      	ldr	r3, [pc, #372]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0xe4>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fe fb8e 	bl	8001af4 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033dc:	f7fe fb8a 	bl	8001af4 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	@ 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e1ec      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	4b53      	ldr	r3, [pc, #332]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x10c>
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d063      	beq.n	80034d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800340a:	4b4c      	ldr	r3, [pc, #304]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003416:	4b49      	ldr	r3, [pc, #292]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b08      	cmp	r3, #8
 8003420:	d11c      	bne.n	800345c <HAL_RCC_OscConfig+0x18c>
 8003422:	4b46      	ldr	r3, [pc, #280]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d116      	bne.n	800345c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342e:	4b43      	ldr	r3, [pc, #268]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_RCC_OscConfig+0x176>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e1c0      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b3d      	ldr	r3, [pc, #244]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4939      	ldr	r1, [pc, #228]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	e03a      	b.n	80034d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003464:	4b36      	ldr	r3, [pc, #216]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7fe fb43 	bl	8001af4 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003472:	f7fe fb3f 	bl	8001af4 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e1a1      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	4b2d      	ldr	r3, [pc, #180]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b2a      	ldr	r3, [pc, #168]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4927      	ldr	r1, [pc, #156]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
 80034a4:	e015      	b.n	80034d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a6:	4b26      	ldr	r3, [pc, #152]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe fb22 	bl	8001af4 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7fe fb1e 	bl	8001af4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e180      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	4b1d      	ldr	r3, [pc, #116]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d03a      	beq.n	8003554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d019      	beq.n	800351a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e6:	4b17      	ldr	r3, [pc, #92]	@ (8003544 <HAL_RCC_OscConfig+0x274>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ec:	f7fe fb02 	bl	8001af4 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f4:	f7fe fafe 	bl	8001af4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e160      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	4b0d      	ldr	r3, [pc, #52]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003512:	2001      	movs	r0, #1
 8003514:	f000 faba 	bl	8003a8c <RCC_Delay>
 8003518:	e01c      	b.n	8003554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <HAL_RCC_OscConfig+0x274>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003520:	f7fe fae8 	bl	8001af4 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003526:	e00f      	b.n	8003548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003528:	f7fe fae4 	bl	8001af4 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d908      	bls.n	8003548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e146      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	42420000 	.word	0x42420000
 8003544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	4b92      	ldr	r3, [pc, #584]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e9      	bne.n	8003528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80a6 	beq.w	80036ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003566:	4b8b      	ldr	r3, [pc, #556]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	4b88      	ldr	r3, [pc, #544]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4a87      	ldr	r2, [pc, #540]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800357c:	61d3      	str	r3, [r2, #28]
 800357e:	4b85      	ldr	r3, [pc, #532]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b82      	ldr	r3, [pc, #520]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359a:	4b7f      	ldr	r3, [pc, #508]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7e      	ldr	r2, [pc, #504]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a6:	f7fe faa5 	bl	8001af4 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ae:	f7fe faa1 	bl	8001af4 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b64      	cmp	r3, #100	@ 0x64
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e103      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	4b75      	ldr	r3, [pc, #468]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x312>
 80035d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6213      	str	r3, [r2, #32]
 80035e0:	e02d      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x334>
 80035ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4a69      	ldr	r2, [pc, #420]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	6213      	str	r3, [r2, #32]
 80035f6:	4b67      	ldr	r3, [pc, #412]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4a66      	ldr	r2, [pc, #408]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	6213      	str	r3, [r2, #32]
 8003602:	e01c      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b05      	cmp	r3, #5
 800360a:	d10c      	bne.n	8003626 <HAL_RCC_OscConfig+0x356>
 800360c:	4b61      	ldr	r3, [pc, #388]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4a60      	ldr	r2, [pc, #384]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	6213      	str	r3, [r2, #32]
 8003618:	4b5e      	ldr	r3, [pc, #376]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	4a5d      	ldr	r2, [pc, #372]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6213      	str	r3, [r2, #32]
 8003624:	e00b      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 8003626:	4b5b      	ldr	r3, [pc, #364]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4a5a      	ldr	r2, [pc, #360]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6213      	str	r3, [r2, #32]
 8003632:	4b58      	ldr	r3, [pc, #352]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a57      	ldr	r2, [pc, #348]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d015      	beq.n	8003672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003646:	f7fe fa55 	bl	8001af4 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fe fa51 	bl	8001af4 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0b1      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003664:	4b4b      	ldr	r3, [pc, #300]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ee      	beq.n	800364e <HAL_RCC_OscConfig+0x37e>
 8003670:	e014      	b.n	800369c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003672:	f7fe fa3f 	bl	8001af4 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe fa3b 	bl	8001af4 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e09b      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003690:	4b40      	ldr	r3, [pc, #256]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ee      	bne.n	800367a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d105      	bne.n	80036ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8087 	beq.w	80037c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b8:	4b36      	ldr	r3, [pc, #216]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d061      	beq.n	8003788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d146      	bne.n	800375a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036cc:	4b33      	ldr	r3, [pc, #204]	@ (800379c <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fe fa0f 	bl	8001af4 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7fe fa0b 	bl	8001af4 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e06d      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ec:	4b29      	ldr	r3, [pc, #164]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003700:	d108      	bne.n	8003714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003702:	4b24      	ldr	r3, [pc, #144]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4921      	ldr	r1, [pc, #132]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003714:	4b1f      	ldr	r3, [pc, #124]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a19      	ldr	r1, [r3, #32]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	430b      	orrs	r3, r1
 8003726:	491b      	ldr	r1, [pc, #108]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372c:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x4cc>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fe f9df 	bl	8001af4 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe f9db 	bl	8001af4 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e03d      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800374c:	4b11      	ldr	r3, [pc, #68]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x46a>
 8003758:	e035      	b.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b10      	ldr	r3, [pc, #64]	@ (800379c <HAL_RCC_OscConfig+0x4cc>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fe f9c8 	bl	8001af4 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe f9c4 	bl	8001af4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e026      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x498>
 8003786:	e01e      	b.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e019      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
 800379c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <HAL_RCC_OscConfig+0x500>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000

080037d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0d0      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d910      	bls.n	8003818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b67      	ldr	r3, [pc, #412]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 0207 	bic.w	r2, r3, #7
 80037fe:	4965      	ldr	r1, [pc, #404]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b63      	ldr	r3, [pc, #396]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0b8      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003830:	4b59      	ldr	r3, [pc, #356]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a58      	ldr	r2, [pc, #352]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800383a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003848:	4b53      	ldr	r3, [pc, #332]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4a52      	ldr	r2, [pc, #328]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4b50      	ldr	r3, [pc, #320]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	494d      	ldr	r1, [pc, #308]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d040      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b47      	ldr	r3, [pc, #284]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d115      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07f      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	4b41      	ldr	r3, [pc, #260]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e073      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e06b      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b39      	ldr	r3, [pc, #228]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4936      	ldr	r1, [pc, #216]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7fe f916 	bl	8001af4 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fe f912 	bl	8001af4 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e053      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b27      	ldr	r3, [pc, #156]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d210      	bcs.n	8003924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b24      	ldr	r3, [pc, #144]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 0207 	bic.w	r2, r3, #7
 800390a:	4922      	ldr	r1, [pc, #136]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b20      	ldr	r3, [pc, #128]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e032      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003930:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4916      	ldr	r1, [pc, #88]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800394e:	4b12      	ldr	r3, [pc, #72]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	490e      	ldr	r1, [pc, #56]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003962:	f000 f821 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003966:	4602      	mov	r2, r0
 8003968:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	490a      	ldr	r1, [pc, #40]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	5ccb      	ldrb	r3, [r1, r3]
 8003976:	fa22 f303 	lsr.w	r3, r2, r3
 800397a:	4a09      	ldr	r2, [pc, #36]	@ (80039a0 <HAL_RCC_ClockConfig+0x1cc>)
 800397c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800397e:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe f874 	bl	8001a70 <HAL_InitTick>

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40022000 	.word	0x40022000
 8003998:	40021000 	.word	0x40021000
 800399c:	080067bc 	.word	0x080067bc
 80039a0:	20000000 	.word	0x20000000
 80039a4:	20000004 	.word	0x20000004

080039a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039c2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d002      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x30>
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d003      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0x36>
 80039d6:	e027      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039d8:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 80039da:	613b      	str	r3, [r7, #16]
      break;
 80039dc:	e027      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	0c9b      	lsrs	r3, r3, #18
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	4a17      	ldr	r2, [pc, #92]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d010      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039f6:	4b11      	ldr	r3, [pc, #68]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	0c5b      	lsrs	r3, r3, #17
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	4a11      	ldr	r2, [pc, #68]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a0d      	ldr	r2, [pc, #52]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a0a:	fb03 f202 	mul.w	r2, r3, r2
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e004      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	613b      	str	r3, [r7, #16]
      break;
 8003a26:	e002      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a2a:	613b      	str	r3, [r7, #16]
      break;
 8003a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2e:	693b      	ldr	r3, [r7, #16]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	007a1200 	.word	0x007a1200
 8003a44:	080067d4 	.word	0x080067d4
 8003a48:	080067e4 	.word	0x080067e4
 8003a4c:	003d0900 	.word	0x003d0900

08003a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a54:	4b02      	ldr	r3, [pc, #8]	@ (8003a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	20000000 	.word	0x20000000

08003a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a68:	f7ff fff2 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	4903      	ldr	r1, [pc, #12]	@ (8003a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7a:	5ccb      	ldrb	r3, [r1, r3]
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000
 8003a88:	080067cc 	.word	0x080067cc

08003a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <RCC_Delay+0x34>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac4 <RCC_Delay+0x38>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	0a5b      	lsrs	r3, r3, #9
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003aa8:	bf00      	nop
  }
  while (Delay --);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1e5a      	subs	r2, r3, #1
 8003aae:	60fa      	str	r2, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f9      	bne.n	8003aa8 <RCC_Delay+0x1c>
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	20000000 	.word	0x20000000
 8003ac4:	10624dd3 	.word	0x10624dd3

08003ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d07d      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae8:	4b4f      	ldr	r3, [pc, #316]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10d      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af4:	4b4c      	ldr	r3, [pc, #304]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	4a4b      	ldr	r2, [pc, #300]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	61d3      	str	r3, [r2, #28]
 8003b00:	4b49      	ldr	r3, [pc, #292]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b10:	4b46      	ldr	r3, [pc, #280]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d118      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1c:	4b43      	ldr	r3, [pc, #268]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a42      	ldr	r2, [pc, #264]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b28:	f7fd ffe4 	bl	8001af4 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2e:	e008      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b30:	f7fd ffe0 	bl	8001af4 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	@ 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e06d      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	4b3a      	ldr	r3, [pc, #232]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b4e:	4b36      	ldr	r3, [pc, #216]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d02e      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d027      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b76:	4b2e      	ldr	r3, [pc, #184]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b82:	4a29      	ldr	r2, [pc, #164]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d014      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b92:	f7fd ffaf 	bl	8001af4 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	e00a      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9a:	f7fd ffab 	bl	8001af4 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e036      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ee      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4917      	ldr	r1, [pc, #92]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d105      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd4:	4b14      	ldr	r3, [pc, #80]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	4a13      	ldr	r2, [pc, #76]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bec:	4b0e      	ldr	r3, [pc, #56]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	490b      	ldr	r1, [pc, #44]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c0a:	4b07      	ldr	r3, [pc, #28]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	4904      	ldr	r1, [pc, #16]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40007000 	.word	0x40007000
 8003c30:	42420440 	.word	0x42420440

08003c34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e076      	b.n	8003d34 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d108      	bne.n	8003c60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c56:	d009      	beq.n	8003c6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	61da      	str	r2, [r3, #28]
 8003c5e:	e005      	b.n	8003c6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fd fbc2 	bl	8001410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ca2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf0:	ea42 0103 	orr.w	r1, r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	0c1a      	lsrs	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f002 0204 	and.w	r2, r2, #4
 8003d12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69da      	ldr	r2, [r3, #28]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <__cvt>:
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d42:	461d      	mov	r5, r3
 8003d44:	bfbb      	ittet	lt
 8003d46:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003d4a:	461d      	movlt	r5, r3
 8003d4c:	2300      	movge	r3, #0
 8003d4e:	232d      	movlt	r3, #45	@ 0x2d
 8003d50:	b088      	sub	sp, #32
 8003d52:	4614      	mov	r4, r2
 8003d54:	bfb8      	it	lt
 8003d56:	4614      	movlt	r4, r2
 8003d58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003d5a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003d5c:	7013      	strb	r3, [r2, #0]
 8003d5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d60:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003d64:	f023 0820 	bic.w	r8, r3, #32
 8003d68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d6c:	d005      	beq.n	8003d7a <__cvt+0x3e>
 8003d6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003d72:	d100      	bne.n	8003d76 <__cvt+0x3a>
 8003d74:	3601      	adds	r6, #1
 8003d76:	2302      	movs	r3, #2
 8003d78:	e000      	b.n	8003d7c <__cvt+0x40>
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	aa07      	add	r2, sp, #28
 8003d7e:	9204      	str	r2, [sp, #16]
 8003d80:	aa06      	add	r2, sp, #24
 8003d82:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d86:	e9cd 3600 	strd	r3, r6, [sp]
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	462b      	mov	r3, r5
 8003d8e:	f000 ff5f 	bl	8004c50 <_dtoa_r>
 8003d92:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003d96:	4607      	mov	r7, r0
 8003d98:	d119      	bne.n	8003dce <__cvt+0x92>
 8003d9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003d9c:	07db      	lsls	r3, r3, #31
 8003d9e:	d50e      	bpl.n	8003dbe <__cvt+0x82>
 8003da0:	eb00 0906 	add.w	r9, r0, r6
 8003da4:	2200      	movs	r2, #0
 8003da6:	2300      	movs	r3, #0
 8003da8:	4620      	mov	r0, r4
 8003daa:	4629      	mov	r1, r5
 8003dac:	f7fc fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8003db0:	b108      	cbz	r0, 8003db6 <__cvt+0x7a>
 8003db2:	f8cd 901c 	str.w	r9, [sp, #28]
 8003db6:	2230      	movs	r2, #48	@ 0x30
 8003db8:	9b07      	ldr	r3, [sp, #28]
 8003dba:	454b      	cmp	r3, r9
 8003dbc:	d31e      	bcc.n	8003dfc <__cvt+0xc0>
 8003dbe:	4638      	mov	r0, r7
 8003dc0:	9b07      	ldr	r3, [sp, #28]
 8003dc2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003dc4:	1bdb      	subs	r3, r3, r7
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	b008      	add	sp, #32
 8003dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003dd2:	eb00 0906 	add.w	r9, r0, r6
 8003dd6:	d1e5      	bne.n	8003da4 <__cvt+0x68>
 8003dd8:	7803      	ldrb	r3, [r0, #0]
 8003dda:	2b30      	cmp	r3, #48	@ 0x30
 8003ddc:	d10a      	bne.n	8003df4 <__cvt+0xb8>
 8003dde:	2200      	movs	r2, #0
 8003de0:	2300      	movs	r3, #0
 8003de2:	4620      	mov	r0, r4
 8003de4:	4629      	mov	r1, r5
 8003de6:	f7fc fddf 	bl	80009a8 <__aeabi_dcmpeq>
 8003dea:	b918      	cbnz	r0, 8003df4 <__cvt+0xb8>
 8003dec:	f1c6 0601 	rsb	r6, r6, #1
 8003df0:	f8ca 6000 	str.w	r6, [sl]
 8003df4:	f8da 3000 	ldr.w	r3, [sl]
 8003df8:	4499      	add	r9, r3
 8003dfa:	e7d3      	b.n	8003da4 <__cvt+0x68>
 8003dfc:	1c59      	adds	r1, r3, #1
 8003dfe:	9107      	str	r1, [sp, #28]
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e7d9      	b.n	8003db8 <__cvt+0x7c>

08003e04 <__exponent>:
 8003e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e06:	2900      	cmp	r1, #0
 8003e08:	bfb6      	itet	lt
 8003e0a:	232d      	movlt	r3, #45	@ 0x2d
 8003e0c:	232b      	movge	r3, #43	@ 0x2b
 8003e0e:	4249      	neglt	r1, r1
 8003e10:	2909      	cmp	r1, #9
 8003e12:	7002      	strb	r2, [r0, #0]
 8003e14:	7043      	strb	r3, [r0, #1]
 8003e16:	dd29      	ble.n	8003e6c <__exponent+0x68>
 8003e18:	f10d 0307 	add.w	r3, sp, #7
 8003e1c:	461d      	mov	r5, r3
 8003e1e:	270a      	movs	r7, #10
 8003e20:	fbb1 f6f7 	udiv	r6, r1, r7
 8003e24:	461a      	mov	r2, r3
 8003e26:	fb07 1416 	mls	r4, r7, r6, r1
 8003e2a:	3430      	adds	r4, #48	@ 0x30
 8003e2c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003e30:	460c      	mov	r4, r1
 8003e32:	2c63      	cmp	r4, #99	@ 0x63
 8003e34:	4631      	mov	r1, r6
 8003e36:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e3a:	dcf1      	bgt.n	8003e20 <__exponent+0x1c>
 8003e3c:	3130      	adds	r1, #48	@ 0x30
 8003e3e:	1e94      	subs	r4, r2, #2
 8003e40:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e44:	4623      	mov	r3, r4
 8003e46:	1c41      	adds	r1, r0, #1
 8003e48:	42ab      	cmp	r3, r5
 8003e4a:	d30a      	bcc.n	8003e62 <__exponent+0x5e>
 8003e4c:	f10d 0309 	add.w	r3, sp, #9
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	42ac      	cmp	r4, r5
 8003e54:	bf88      	it	hi
 8003e56:	2300      	movhi	r3, #0
 8003e58:	3302      	adds	r3, #2
 8003e5a:	4403      	add	r3, r0
 8003e5c:	1a18      	subs	r0, r3, r0
 8003e5e:	b003      	add	sp, #12
 8003e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e62:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003e66:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003e6a:	e7ed      	b.n	8003e48 <__exponent+0x44>
 8003e6c:	2330      	movs	r3, #48	@ 0x30
 8003e6e:	3130      	adds	r1, #48	@ 0x30
 8003e70:	7083      	strb	r3, [r0, #2]
 8003e72:	70c1      	strb	r1, [r0, #3]
 8003e74:	1d03      	adds	r3, r0, #4
 8003e76:	e7f1      	b.n	8003e5c <__exponent+0x58>

08003e78 <_printf_float>:
 8003e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7c:	b091      	sub	sp, #68	@ 0x44
 8003e7e:	460c      	mov	r4, r1
 8003e80:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003e84:	4616      	mov	r6, r2
 8003e86:	461f      	mov	r7, r3
 8003e88:	4605      	mov	r5, r0
 8003e8a:	f000 fdc5 	bl	8004a18 <_localeconv_r>
 8003e8e:	6803      	ldr	r3, [r0, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	9308      	str	r3, [sp, #32]
 8003e94:	f7fc f95c 	bl	8000150 <strlen>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	930e      	str	r3, [sp, #56]	@ 0x38
 8003e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea0:	9009      	str	r0, [sp, #36]	@ 0x24
 8003ea2:	3307      	adds	r3, #7
 8003ea4:	f023 0307 	bic.w	r3, r3, #7
 8003ea8:	f103 0208 	add.w	r2, r3, #8
 8003eac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003eb0:	f8d4 b000 	ldr.w	fp, [r4]
 8003eb4:	f8c8 2000 	str.w	r2, [r8]
 8003eb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ebc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003ec0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ec2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ece:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003ed2:	4b9c      	ldr	r3, [pc, #624]	@ (8004144 <_printf_float+0x2cc>)
 8003ed4:	f7fc fd9a 	bl	8000a0c <__aeabi_dcmpun>
 8003ed8:	bb70      	cbnz	r0, 8003f38 <_printf_float+0xc0>
 8003eda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee2:	4b98      	ldr	r3, [pc, #608]	@ (8004144 <_printf_float+0x2cc>)
 8003ee4:	f7fc fd74 	bl	80009d0 <__aeabi_dcmple>
 8003ee8:	bb30      	cbnz	r0, 8003f38 <_printf_float+0xc0>
 8003eea:	2200      	movs	r2, #0
 8003eec:	2300      	movs	r3, #0
 8003eee:	4640      	mov	r0, r8
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	f7fc fd63 	bl	80009bc <__aeabi_dcmplt>
 8003ef6:	b110      	cbz	r0, 8003efe <_printf_float+0x86>
 8003ef8:	232d      	movs	r3, #45	@ 0x2d
 8003efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003efe:	4a92      	ldr	r2, [pc, #584]	@ (8004148 <_printf_float+0x2d0>)
 8003f00:	4b92      	ldr	r3, [pc, #584]	@ (800414c <_printf_float+0x2d4>)
 8003f02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003f06:	bf94      	ite	ls
 8003f08:	4690      	movls	r8, r2
 8003f0a:	4698      	movhi	r8, r3
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	f04f 0900 	mov.w	r9, #0
 8003f12:	6123      	str	r3, [r4, #16]
 8003f14:	f02b 0304 	bic.w	r3, fp, #4
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	4633      	mov	r3, r6
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	4628      	mov	r0, r5
 8003f20:	9700      	str	r7, [sp, #0]
 8003f22:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003f24:	f000 f9d4 	bl	80042d0 <_printf_common>
 8003f28:	3001      	adds	r0, #1
 8003f2a:	f040 8090 	bne.w	800404e <_printf_float+0x1d6>
 8003f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f32:	b011      	add	sp, #68	@ 0x44
 8003f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f38:	4642      	mov	r2, r8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	4640      	mov	r0, r8
 8003f3e:	4649      	mov	r1, r9
 8003f40:	f7fc fd64 	bl	8000a0c <__aeabi_dcmpun>
 8003f44:	b148      	cbz	r0, 8003f5a <_printf_float+0xe2>
 8003f46:	464b      	mov	r3, r9
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bfb8      	it	lt
 8003f4c:	232d      	movlt	r3, #45	@ 0x2d
 8003f4e:	4a80      	ldr	r2, [pc, #512]	@ (8004150 <_printf_float+0x2d8>)
 8003f50:	bfb8      	it	lt
 8003f52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003f56:	4b7f      	ldr	r3, [pc, #508]	@ (8004154 <_printf_float+0x2dc>)
 8003f58:	e7d3      	b.n	8003f02 <_printf_float+0x8a>
 8003f5a:	6863      	ldr	r3, [r4, #4]
 8003f5c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	d13f      	bne.n	8003fe4 <_printf_float+0x16c>
 8003f64:	2306      	movs	r3, #6
 8003f66:	6063      	str	r3, [r4, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	9206      	str	r2, [sp, #24]
 8003f72:	aa0e      	add	r2, sp, #56	@ 0x38
 8003f74:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003f78:	aa0d      	add	r2, sp, #52	@ 0x34
 8003f7a:	9203      	str	r2, [sp, #12]
 8003f7c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003f80:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f84:	6863      	ldr	r3, [r4, #4]
 8003f86:	4642      	mov	r2, r8
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003f90:	f7ff fed4 	bl	8003d3c <__cvt>
 8003f94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003f96:	4680      	mov	r8, r0
 8003f98:	2947      	cmp	r1, #71	@ 0x47
 8003f9a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003f9c:	d128      	bne.n	8003ff0 <_printf_float+0x178>
 8003f9e:	1cc8      	adds	r0, r1, #3
 8003fa0:	db02      	blt.n	8003fa8 <_printf_float+0x130>
 8003fa2:	6863      	ldr	r3, [r4, #4]
 8003fa4:	4299      	cmp	r1, r3
 8003fa6:	dd40      	ble.n	800402a <_printf_float+0x1b2>
 8003fa8:	f1aa 0a02 	sub.w	sl, sl, #2
 8003fac:	fa5f fa8a 	uxtb.w	sl, sl
 8003fb0:	4652      	mov	r2, sl
 8003fb2:	3901      	subs	r1, #1
 8003fb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003fb8:	910d      	str	r1, [sp, #52]	@ 0x34
 8003fba:	f7ff ff23 	bl	8003e04 <__exponent>
 8003fbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003fc0:	4681      	mov	r9, r0
 8003fc2:	1813      	adds	r3, r2, r0
 8003fc4:	2a01      	cmp	r2, #1
 8003fc6:	6123      	str	r3, [r4, #16]
 8003fc8:	dc02      	bgt.n	8003fd0 <_printf_float+0x158>
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	07d2      	lsls	r2, r2, #31
 8003fce:	d501      	bpl.n	8003fd4 <_printf_float+0x15c>
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	6123      	str	r3, [r4, #16]
 8003fd4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d09e      	beq.n	8003f1a <_printf_float+0xa2>
 8003fdc:	232d      	movs	r3, #45	@ 0x2d
 8003fde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fe2:	e79a      	b.n	8003f1a <_printf_float+0xa2>
 8003fe4:	2947      	cmp	r1, #71	@ 0x47
 8003fe6:	d1bf      	bne.n	8003f68 <_printf_float+0xf0>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1bd      	bne.n	8003f68 <_printf_float+0xf0>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e7ba      	b.n	8003f66 <_printf_float+0xee>
 8003ff0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ff4:	d9dc      	bls.n	8003fb0 <_printf_float+0x138>
 8003ff6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ffa:	d118      	bne.n	800402e <_printf_float+0x1b6>
 8003ffc:	2900      	cmp	r1, #0
 8003ffe:	6863      	ldr	r3, [r4, #4]
 8004000:	dd0b      	ble.n	800401a <_printf_float+0x1a2>
 8004002:	6121      	str	r1, [r4, #16]
 8004004:	b913      	cbnz	r3, 800400c <_printf_float+0x194>
 8004006:	6822      	ldr	r2, [r4, #0]
 8004008:	07d0      	lsls	r0, r2, #31
 800400a:	d502      	bpl.n	8004012 <_printf_float+0x19a>
 800400c:	3301      	adds	r3, #1
 800400e:	440b      	add	r3, r1
 8004010:	6123      	str	r3, [r4, #16]
 8004012:	f04f 0900 	mov.w	r9, #0
 8004016:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004018:	e7dc      	b.n	8003fd4 <_printf_float+0x15c>
 800401a:	b913      	cbnz	r3, 8004022 <_printf_float+0x1aa>
 800401c:	6822      	ldr	r2, [r4, #0]
 800401e:	07d2      	lsls	r2, r2, #31
 8004020:	d501      	bpl.n	8004026 <_printf_float+0x1ae>
 8004022:	3302      	adds	r3, #2
 8004024:	e7f4      	b.n	8004010 <_printf_float+0x198>
 8004026:	2301      	movs	r3, #1
 8004028:	e7f2      	b.n	8004010 <_printf_float+0x198>
 800402a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800402e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004030:	4299      	cmp	r1, r3
 8004032:	db05      	blt.n	8004040 <_printf_float+0x1c8>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	6121      	str	r1, [r4, #16]
 8004038:	07d8      	lsls	r0, r3, #31
 800403a:	d5ea      	bpl.n	8004012 <_printf_float+0x19a>
 800403c:	1c4b      	adds	r3, r1, #1
 800403e:	e7e7      	b.n	8004010 <_printf_float+0x198>
 8004040:	2900      	cmp	r1, #0
 8004042:	bfcc      	ite	gt
 8004044:	2201      	movgt	r2, #1
 8004046:	f1c1 0202 	rsble	r2, r1, #2
 800404a:	4413      	add	r3, r2
 800404c:	e7e0      	b.n	8004010 <_printf_float+0x198>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	055a      	lsls	r2, r3, #21
 8004052:	d407      	bmi.n	8004064 <_printf_float+0x1ec>
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	4642      	mov	r2, r8
 8004058:	4631      	mov	r1, r6
 800405a:	4628      	mov	r0, r5
 800405c:	47b8      	blx	r7
 800405e:	3001      	adds	r0, #1
 8004060:	d12b      	bne.n	80040ba <_printf_float+0x242>
 8004062:	e764      	b.n	8003f2e <_printf_float+0xb6>
 8004064:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004068:	f240 80dc 	bls.w	8004224 <_printf_float+0x3ac>
 800406c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004070:	2200      	movs	r2, #0
 8004072:	2300      	movs	r3, #0
 8004074:	f7fc fc98 	bl	80009a8 <__aeabi_dcmpeq>
 8004078:	2800      	cmp	r0, #0
 800407a:	d033      	beq.n	80040e4 <_printf_float+0x26c>
 800407c:	2301      	movs	r3, #1
 800407e:	4631      	mov	r1, r6
 8004080:	4628      	mov	r0, r5
 8004082:	4a35      	ldr	r2, [pc, #212]	@ (8004158 <_printf_float+0x2e0>)
 8004084:	47b8      	blx	r7
 8004086:	3001      	adds	r0, #1
 8004088:	f43f af51 	beq.w	8003f2e <_printf_float+0xb6>
 800408c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004090:	4543      	cmp	r3, r8
 8004092:	db02      	blt.n	800409a <_printf_float+0x222>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	07d8      	lsls	r0, r3, #31
 8004098:	d50f      	bpl.n	80040ba <_printf_float+0x242>
 800409a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800409e:	4631      	mov	r1, r6
 80040a0:	4628      	mov	r0, r5
 80040a2:	47b8      	blx	r7
 80040a4:	3001      	adds	r0, #1
 80040a6:	f43f af42 	beq.w	8003f2e <_printf_float+0xb6>
 80040aa:	f04f 0900 	mov.w	r9, #0
 80040ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80040b2:	f104 0a1a 	add.w	sl, r4, #26
 80040b6:	45c8      	cmp	r8, r9
 80040b8:	dc09      	bgt.n	80040ce <_printf_float+0x256>
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	079b      	lsls	r3, r3, #30
 80040be:	f100 8102 	bmi.w	80042c6 <_printf_float+0x44e>
 80040c2:	68e0      	ldr	r0, [r4, #12]
 80040c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040c6:	4298      	cmp	r0, r3
 80040c8:	bfb8      	it	lt
 80040ca:	4618      	movlt	r0, r3
 80040cc:	e731      	b.n	8003f32 <_printf_float+0xba>
 80040ce:	2301      	movs	r3, #1
 80040d0:	4652      	mov	r2, sl
 80040d2:	4631      	mov	r1, r6
 80040d4:	4628      	mov	r0, r5
 80040d6:	47b8      	blx	r7
 80040d8:	3001      	adds	r0, #1
 80040da:	f43f af28 	beq.w	8003f2e <_printf_float+0xb6>
 80040de:	f109 0901 	add.w	r9, r9, #1
 80040e2:	e7e8      	b.n	80040b6 <_printf_float+0x23e>
 80040e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	dc38      	bgt.n	800415c <_printf_float+0x2e4>
 80040ea:	2301      	movs	r3, #1
 80040ec:	4631      	mov	r1, r6
 80040ee:	4628      	mov	r0, r5
 80040f0:	4a19      	ldr	r2, [pc, #100]	@ (8004158 <_printf_float+0x2e0>)
 80040f2:	47b8      	blx	r7
 80040f4:	3001      	adds	r0, #1
 80040f6:	f43f af1a 	beq.w	8003f2e <_printf_float+0xb6>
 80040fa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80040fe:	ea59 0303 	orrs.w	r3, r9, r3
 8004102:	d102      	bne.n	800410a <_printf_float+0x292>
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	07d9      	lsls	r1, r3, #31
 8004108:	d5d7      	bpl.n	80040ba <_printf_float+0x242>
 800410a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800410e:	4631      	mov	r1, r6
 8004110:	4628      	mov	r0, r5
 8004112:	47b8      	blx	r7
 8004114:	3001      	adds	r0, #1
 8004116:	f43f af0a 	beq.w	8003f2e <_printf_float+0xb6>
 800411a:	f04f 0a00 	mov.w	sl, #0
 800411e:	f104 0b1a 	add.w	fp, r4, #26
 8004122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004124:	425b      	negs	r3, r3
 8004126:	4553      	cmp	r3, sl
 8004128:	dc01      	bgt.n	800412e <_printf_float+0x2b6>
 800412a:	464b      	mov	r3, r9
 800412c:	e793      	b.n	8004056 <_printf_float+0x1de>
 800412e:	2301      	movs	r3, #1
 8004130:	465a      	mov	r2, fp
 8004132:	4631      	mov	r1, r6
 8004134:	4628      	mov	r0, r5
 8004136:	47b8      	blx	r7
 8004138:	3001      	adds	r0, #1
 800413a:	f43f aef8 	beq.w	8003f2e <_printf_float+0xb6>
 800413e:	f10a 0a01 	add.w	sl, sl, #1
 8004142:	e7ee      	b.n	8004122 <_printf_float+0x2aa>
 8004144:	7fefffff 	.word	0x7fefffff
 8004148:	080067e6 	.word	0x080067e6
 800414c:	080067ea 	.word	0x080067ea
 8004150:	080067ee 	.word	0x080067ee
 8004154:	080067f2 	.word	0x080067f2
 8004158:	080067f6 	.word	0x080067f6
 800415c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800415e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004162:	4553      	cmp	r3, sl
 8004164:	bfa8      	it	ge
 8004166:	4653      	movge	r3, sl
 8004168:	2b00      	cmp	r3, #0
 800416a:	4699      	mov	r9, r3
 800416c:	dc36      	bgt.n	80041dc <_printf_float+0x364>
 800416e:	f04f 0b00 	mov.w	fp, #0
 8004172:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004176:	f104 021a 	add.w	r2, r4, #26
 800417a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800417c:	930a      	str	r3, [sp, #40]	@ 0x28
 800417e:	eba3 0309 	sub.w	r3, r3, r9
 8004182:	455b      	cmp	r3, fp
 8004184:	dc31      	bgt.n	80041ea <_printf_float+0x372>
 8004186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004188:	459a      	cmp	sl, r3
 800418a:	dc3a      	bgt.n	8004202 <_printf_float+0x38a>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	07da      	lsls	r2, r3, #31
 8004190:	d437      	bmi.n	8004202 <_printf_float+0x38a>
 8004192:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004194:	ebaa 0903 	sub.w	r9, sl, r3
 8004198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800419a:	ebaa 0303 	sub.w	r3, sl, r3
 800419e:	4599      	cmp	r9, r3
 80041a0:	bfa8      	it	ge
 80041a2:	4699      	movge	r9, r3
 80041a4:	f1b9 0f00 	cmp.w	r9, #0
 80041a8:	dc33      	bgt.n	8004212 <_printf_float+0x39a>
 80041aa:	f04f 0800 	mov.w	r8, #0
 80041ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041b2:	f104 0b1a 	add.w	fp, r4, #26
 80041b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041b8:	ebaa 0303 	sub.w	r3, sl, r3
 80041bc:	eba3 0309 	sub.w	r3, r3, r9
 80041c0:	4543      	cmp	r3, r8
 80041c2:	f77f af7a 	ble.w	80040ba <_printf_float+0x242>
 80041c6:	2301      	movs	r3, #1
 80041c8:	465a      	mov	r2, fp
 80041ca:	4631      	mov	r1, r6
 80041cc:	4628      	mov	r0, r5
 80041ce:	47b8      	blx	r7
 80041d0:	3001      	adds	r0, #1
 80041d2:	f43f aeac 	beq.w	8003f2e <_printf_float+0xb6>
 80041d6:	f108 0801 	add.w	r8, r8, #1
 80041da:	e7ec      	b.n	80041b6 <_printf_float+0x33e>
 80041dc:	4642      	mov	r2, r8
 80041de:	4631      	mov	r1, r6
 80041e0:	4628      	mov	r0, r5
 80041e2:	47b8      	blx	r7
 80041e4:	3001      	adds	r0, #1
 80041e6:	d1c2      	bne.n	800416e <_printf_float+0x2f6>
 80041e8:	e6a1      	b.n	8003f2e <_printf_float+0xb6>
 80041ea:	2301      	movs	r3, #1
 80041ec:	4631      	mov	r1, r6
 80041ee:	4628      	mov	r0, r5
 80041f0:	920a      	str	r2, [sp, #40]	@ 0x28
 80041f2:	47b8      	blx	r7
 80041f4:	3001      	adds	r0, #1
 80041f6:	f43f ae9a 	beq.w	8003f2e <_printf_float+0xb6>
 80041fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041fc:	f10b 0b01 	add.w	fp, fp, #1
 8004200:	e7bb      	b.n	800417a <_printf_float+0x302>
 8004202:	4631      	mov	r1, r6
 8004204:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004208:	4628      	mov	r0, r5
 800420a:	47b8      	blx	r7
 800420c:	3001      	adds	r0, #1
 800420e:	d1c0      	bne.n	8004192 <_printf_float+0x31a>
 8004210:	e68d      	b.n	8003f2e <_printf_float+0xb6>
 8004212:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004214:	464b      	mov	r3, r9
 8004216:	4631      	mov	r1, r6
 8004218:	4628      	mov	r0, r5
 800421a:	4442      	add	r2, r8
 800421c:	47b8      	blx	r7
 800421e:	3001      	adds	r0, #1
 8004220:	d1c3      	bne.n	80041aa <_printf_float+0x332>
 8004222:	e684      	b.n	8003f2e <_printf_float+0xb6>
 8004224:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004228:	f1ba 0f01 	cmp.w	sl, #1
 800422c:	dc01      	bgt.n	8004232 <_printf_float+0x3ba>
 800422e:	07db      	lsls	r3, r3, #31
 8004230:	d536      	bpl.n	80042a0 <_printf_float+0x428>
 8004232:	2301      	movs	r3, #1
 8004234:	4642      	mov	r2, r8
 8004236:	4631      	mov	r1, r6
 8004238:	4628      	mov	r0, r5
 800423a:	47b8      	blx	r7
 800423c:	3001      	adds	r0, #1
 800423e:	f43f ae76 	beq.w	8003f2e <_printf_float+0xb6>
 8004242:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004246:	4631      	mov	r1, r6
 8004248:	4628      	mov	r0, r5
 800424a:	47b8      	blx	r7
 800424c:	3001      	adds	r0, #1
 800424e:	f43f ae6e 	beq.w	8003f2e <_printf_float+0xb6>
 8004252:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004256:	2200      	movs	r2, #0
 8004258:	2300      	movs	r3, #0
 800425a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800425e:	f7fc fba3 	bl	80009a8 <__aeabi_dcmpeq>
 8004262:	b9c0      	cbnz	r0, 8004296 <_printf_float+0x41e>
 8004264:	4653      	mov	r3, sl
 8004266:	f108 0201 	add.w	r2, r8, #1
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	d10c      	bne.n	800428e <_printf_float+0x416>
 8004274:	e65b      	b.n	8003f2e <_printf_float+0xb6>
 8004276:	2301      	movs	r3, #1
 8004278:	465a      	mov	r2, fp
 800427a:	4631      	mov	r1, r6
 800427c:	4628      	mov	r0, r5
 800427e:	47b8      	blx	r7
 8004280:	3001      	adds	r0, #1
 8004282:	f43f ae54 	beq.w	8003f2e <_printf_float+0xb6>
 8004286:	f108 0801 	add.w	r8, r8, #1
 800428a:	45d0      	cmp	r8, sl
 800428c:	dbf3      	blt.n	8004276 <_printf_float+0x3fe>
 800428e:	464b      	mov	r3, r9
 8004290:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004294:	e6e0      	b.n	8004058 <_printf_float+0x1e0>
 8004296:	f04f 0800 	mov.w	r8, #0
 800429a:	f104 0b1a 	add.w	fp, r4, #26
 800429e:	e7f4      	b.n	800428a <_printf_float+0x412>
 80042a0:	2301      	movs	r3, #1
 80042a2:	4642      	mov	r2, r8
 80042a4:	e7e1      	b.n	800426a <_printf_float+0x3f2>
 80042a6:	2301      	movs	r3, #1
 80042a8:	464a      	mov	r2, r9
 80042aa:	4631      	mov	r1, r6
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b8      	blx	r7
 80042b0:	3001      	adds	r0, #1
 80042b2:	f43f ae3c 	beq.w	8003f2e <_printf_float+0xb6>
 80042b6:	f108 0801 	add.w	r8, r8, #1
 80042ba:	68e3      	ldr	r3, [r4, #12]
 80042bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80042be:	1a5b      	subs	r3, r3, r1
 80042c0:	4543      	cmp	r3, r8
 80042c2:	dcf0      	bgt.n	80042a6 <_printf_float+0x42e>
 80042c4:	e6fd      	b.n	80040c2 <_printf_float+0x24a>
 80042c6:	f04f 0800 	mov.w	r8, #0
 80042ca:	f104 0919 	add.w	r9, r4, #25
 80042ce:	e7f4      	b.n	80042ba <_printf_float+0x442>

080042d0 <_printf_common>:
 80042d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d4:	4616      	mov	r6, r2
 80042d6:	4698      	mov	r8, r3
 80042d8:	688a      	ldr	r2, [r1, #8]
 80042da:	690b      	ldr	r3, [r1, #16]
 80042dc:	4607      	mov	r7, r0
 80042de:	4293      	cmp	r3, r2
 80042e0:	bfb8      	it	lt
 80042e2:	4613      	movlt	r3, r2
 80042e4:	6033      	str	r3, [r6, #0]
 80042e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042ea:	460c      	mov	r4, r1
 80042ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042f0:	b10a      	cbz	r2, 80042f6 <_printf_common+0x26>
 80042f2:	3301      	adds	r3, #1
 80042f4:	6033      	str	r3, [r6, #0]
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	0699      	lsls	r1, r3, #26
 80042fa:	bf42      	ittt	mi
 80042fc:	6833      	ldrmi	r3, [r6, #0]
 80042fe:	3302      	addmi	r3, #2
 8004300:	6033      	strmi	r3, [r6, #0]
 8004302:	6825      	ldr	r5, [r4, #0]
 8004304:	f015 0506 	ands.w	r5, r5, #6
 8004308:	d106      	bne.n	8004318 <_printf_common+0x48>
 800430a:	f104 0a19 	add.w	sl, r4, #25
 800430e:	68e3      	ldr	r3, [r4, #12]
 8004310:	6832      	ldr	r2, [r6, #0]
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	42ab      	cmp	r3, r5
 8004316:	dc2b      	bgt.n	8004370 <_printf_common+0xa0>
 8004318:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800431c:	6822      	ldr	r2, [r4, #0]
 800431e:	3b00      	subs	r3, #0
 8004320:	bf18      	it	ne
 8004322:	2301      	movne	r3, #1
 8004324:	0692      	lsls	r2, r2, #26
 8004326:	d430      	bmi.n	800438a <_printf_common+0xba>
 8004328:	4641      	mov	r1, r8
 800432a:	4638      	mov	r0, r7
 800432c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004330:	47c8      	blx	r9
 8004332:	3001      	adds	r0, #1
 8004334:	d023      	beq.n	800437e <_printf_common+0xae>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	6922      	ldr	r2, [r4, #16]
 800433a:	f003 0306 	and.w	r3, r3, #6
 800433e:	2b04      	cmp	r3, #4
 8004340:	bf14      	ite	ne
 8004342:	2500      	movne	r5, #0
 8004344:	6833      	ldreq	r3, [r6, #0]
 8004346:	f04f 0600 	mov.w	r6, #0
 800434a:	bf08      	it	eq
 800434c:	68e5      	ldreq	r5, [r4, #12]
 800434e:	f104 041a 	add.w	r4, r4, #26
 8004352:	bf08      	it	eq
 8004354:	1aed      	subeq	r5, r5, r3
 8004356:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800435a:	bf08      	it	eq
 800435c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004360:	4293      	cmp	r3, r2
 8004362:	bfc4      	itt	gt
 8004364:	1a9b      	subgt	r3, r3, r2
 8004366:	18ed      	addgt	r5, r5, r3
 8004368:	42b5      	cmp	r5, r6
 800436a:	d11a      	bne.n	80043a2 <_printf_common+0xd2>
 800436c:	2000      	movs	r0, #0
 800436e:	e008      	b.n	8004382 <_printf_common+0xb2>
 8004370:	2301      	movs	r3, #1
 8004372:	4652      	mov	r2, sl
 8004374:	4641      	mov	r1, r8
 8004376:	4638      	mov	r0, r7
 8004378:	47c8      	blx	r9
 800437a:	3001      	adds	r0, #1
 800437c:	d103      	bne.n	8004386 <_printf_common+0xb6>
 800437e:	f04f 30ff 	mov.w	r0, #4294967295
 8004382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004386:	3501      	adds	r5, #1
 8004388:	e7c1      	b.n	800430e <_printf_common+0x3e>
 800438a:	2030      	movs	r0, #48	@ 0x30
 800438c:	18e1      	adds	r1, r4, r3
 800438e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004398:	4422      	add	r2, r4
 800439a:	3302      	adds	r3, #2
 800439c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043a0:	e7c2      	b.n	8004328 <_printf_common+0x58>
 80043a2:	2301      	movs	r3, #1
 80043a4:	4622      	mov	r2, r4
 80043a6:	4641      	mov	r1, r8
 80043a8:	4638      	mov	r0, r7
 80043aa:	47c8      	blx	r9
 80043ac:	3001      	adds	r0, #1
 80043ae:	d0e6      	beq.n	800437e <_printf_common+0xae>
 80043b0:	3601      	adds	r6, #1
 80043b2:	e7d9      	b.n	8004368 <_printf_common+0x98>

080043b4 <_printf_i>:
 80043b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043b8:	7e0f      	ldrb	r7, [r1, #24]
 80043ba:	4691      	mov	r9, r2
 80043bc:	2f78      	cmp	r7, #120	@ 0x78
 80043be:	4680      	mov	r8, r0
 80043c0:	460c      	mov	r4, r1
 80043c2:	469a      	mov	sl, r3
 80043c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043ca:	d807      	bhi.n	80043dc <_printf_i+0x28>
 80043cc:	2f62      	cmp	r7, #98	@ 0x62
 80043ce:	d80a      	bhi.n	80043e6 <_printf_i+0x32>
 80043d0:	2f00      	cmp	r7, #0
 80043d2:	f000 80d3 	beq.w	800457c <_printf_i+0x1c8>
 80043d6:	2f58      	cmp	r7, #88	@ 0x58
 80043d8:	f000 80ba 	beq.w	8004550 <_printf_i+0x19c>
 80043dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80043e4:	e03a      	b.n	800445c <_printf_i+0xa8>
 80043e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043ea:	2b15      	cmp	r3, #21
 80043ec:	d8f6      	bhi.n	80043dc <_printf_i+0x28>
 80043ee:	a101      	add	r1, pc, #4	@ (adr r1, 80043f4 <_printf_i+0x40>)
 80043f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043f4:	0800444d 	.word	0x0800444d
 80043f8:	08004461 	.word	0x08004461
 80043fc:	080043dd 	.word	0x080043dd
 8004400:	080043dd 	.word	0x080043dd
 8004404:	080043dd 	.word	0x080043dd
 8004408:	080043dd 	.word	0x080043dd
 800440c:	08004461 	.word	0x08004461
 8004410:	080043dd 	.word	0x080043dd
 8004414:	080043dd 	.word	0x080043dd
 8004418:	080043dd 	.word	0x080043dd
 800441c:	080043dd 	.word	0x080043dd
 8004420:	08004563 	.word	0x08004563
 8004424:	0800448b 	.word	0x0800448b
 8004428:	0800451d 	.word	0x0800451d
 800442c:	080043dd 	.word	0x080043dd
 8004430:	080043dd 	.word	0x080043dd
 8004434:	08004585 	.word	0x08004585
 8004438:	080043dd 	.word	0x080043dd
 800443c:	0800448b 	.word	0x0800448b
 8004440:	080043dd 	.word	0x080043dd
 8004444:	080043dd 	.word	0x080043dd
 8004448:	08004525 	.word	0x08004525
 800444c:	6833      	ldr	r3, [r6, #0]
 800444e:	1d1a      	adds	r2, r3, #4
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6032      	str	r2, [r6, #0]
 8004454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004458:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800445c:	2301      	movs	r3, #1
 800445e:	e09e      	b.n	800459e <_printf_i+0x1ea>
 8004460:	6833      	ldr	r3, [r6, #0]
 8004462:	6820      	ldr	r0, [r4, #0]
 8004464:	1d19      	adds	r1, r3, #4
 8004466:	6031      	str	r1, [r6, #0]
 8004468:	0606      	lsls	r6, r0, #24
 800446a:	d501      	bpl.n	8004470 <_printf_i+0xbc>
 800446c:	681d      	ldr	r5, [r3, #0]
 800446e:	e003      	b.n	8004478 <_printf_i+0xc4>
 8004470:	0645      	lsls	r5, r0, #25
 8004472:	d5fb      	bpl.n	800446c <_printf_i+0xb8>
 8004474:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004478:	2d00      	cmp	r5, #0
 800447a:	da03      	bge.n	8004484 <_printf_i+0xd0>
 800447c:	232d      	movs	r3, #45	@ 0x2d
 800447e:	426d      	negs	r5, r5
 8004480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004484:	230a      	movs	r3, #10
 8004486:	4859      	ldr	r0, [pc, #356]	@ (80045ec <_printf_i+0x238>)
 8004488:	e011      	b.n	80044ae <_printf_i+0xfa>
 800448a:	6821      	ldr	r1, [r4, #0]
 800448c:	6833      	ldr	r3, [r6, #0]
 800448e:	0608      	lsls	r0, r1, #24
 8004490:	f853 5b04 	ldr.w	r5, [r3], #4
 8004494:	d402      	bmi.n	800449c <_printf_i+0xe8>
 8004496:	0649      	lsls	r1, r1, #25
 8004498:	bf48      	it	mi
 800449a:	b2ad      	uxthmi	r5, r5
 800449c:	2f6f      	cmp	r7, #111	@ 0x6f
 800449e:	6033      	str	r3, [r6, #0]
 80044a0:	bf14      	ite	ne
 80044a2:	230a      	movne	r3, #10
 80044a4:	2308      	moveq	r3, #8
 80044a6:	4851      	ldr	r0, [pc, #324]	@ (80045ec <_printf_i+0x238>)
 80044a8:	2100      	movs	r1, #0
 80044aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044ae:	6866      	ldr	r6, [r4, #4]
 80044b0:	2e00      	cmp	r6, #0
 80044b2:	bfa8      	it	ge
 80044b4:	6821      	ldrge	r1, [r4, #0]
 80044b6:	60a6      	str	r6, [r4, #8]
 80044b8:	bfa4      	itt	ge
 80044ba:	f021 0104 	bicge.w	r1, r1, #4
 80044be:	6021      	strge	r1, [r4, #0]
 80044c0:	b90d      	cbnz	r5, 80044c6 <_printf_i+0x112>
 80044c2:	2e00      	cmp	r6, #0
 80044c4:	d04b      	beq.n	800455e <_printf_i+0x1aa>
 80044c6:	4616      	mov	r6, r2
 80044c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80044cc:	fb03 5711 	mls	r7, r3, r1, r5
 80044d0:	5dc7      	ldrb	r7, [r0, r7]
 80044d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044d6:	462f      	mov	r7, r5
 80044d8:	42bb      	cmp	r3, r7
 80044da:	460d      	mov	r5, r1
 80044dc:	d9f4      	bls.n	80044c8 <_printf_i+0x114>
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d10b      	bne.n	80044fa <_printf_i+0x146>
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	07df      	lsls	r7, r3, #31
 80044e6:	d508      	bpl.n	80044fa <_printf_i+0x146>
 80044e8:	6923      	ldr	r3, [r4, #16]
 80044ea:	6861      	ldr	r1, [r4, #4]
 80044ec:	4299      	cmp	r1, r3
 80044ee:	bfde      	ittt	le
 80044f0:	2330      	movle	r3, #48	@ 0x30
 80044f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044fa:	1b92      	subs	r2, r2, r6
 80044fc:	6122      	str	r2, [r4, #16]
 80044fe:	464b      	mov	r3, r9
 8004500:	4621      	mov	r1, r4
 8004502:	4640      	mov	r0, r8
 8004504:	f8cd a000 	str.w	sl, [sp]
 8004508:	aa03      	add	r2, sp, #12
 800450a:	f7ff fee1 	bl	80042d0 <_printf_common>
 800450e:	3001      	adds	r0, #1
 8004510:	d14a      	bne.n	80045a8 <_printf_i+0x1f4>
 8004512:	f04f 30ff 	mov.w	r0, #4294967295
 8004516:	b004      	add	sp, #16
 8004518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	f043 0320 	orr.w	r3, r3, #32
 8004522:	6023      	str	r3, [r4, #0]
 8004524:	2778      	movs	r7, #120	@ 0x78
 8004526:	4832      	ldr	r0, [pc, #200]	@ (80045f0 <_printf_i+0x23c>)
 8004528:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	6831      	ldr	r1, [r6, #0]
 8004530:	061f      	lsls	r7, r3, #24
 8004532:	f851 5b04 	ldr.w	r5, [r1], #4
 8004536:	d402      	bmi.n	800453e <_printf_i+0x18a>
 8004538:	065f      	lsls	r7, r3, #25
 800453a:	bf48      	it	mi
 800453c:	b2ad      	uxthmi	r5, r5
 800453e:	6031      	str	r1, [r6, #0]
 8004540:	07d9      	lsls	r1, r3, #31
 8004542:	bf44      	itt	mi
 8004544:	f043 0320 	orrmi.w	r3, r3, #32
 8004548:	6023      	strmi	r3, [r4, #0]
 800454a:	b11d      	cbz	r5, 8004554 <_printf_i+0x1a0>
 800454c:	2310      	movs	r3, #16
 800454e:	e7ab      	b.n	80044a8 <_printf_i+0xf4>
 8004550:	4826      	ldr	r0, [pc, #152]	@ (80045ec <_printf_i+0x238>)
 8004552:	e7e9      	b.n	8004528 <_printf_i+0x174>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	f023 0320 	bic.w	r3, r3, #32
 800455a:	6023      	str	r3, [r4, #0]
 800455c:	e7f6      	b.n	800454c <_printf_i+0x198>
 800455e:	4616      	mov	r6, r2
 8004560:	e7bd      	b.n	80044de <_printf_i+0x12a>
 8004562:	6833      	ldr	r3, [r6, #0]
 8004564:	6825      	ldr	r5, [r4, #0]
 8004566:	1d18      	adds	r0, r3, #4
 8004568:	6961      	ldr	r1, [r4, #20]
 800456a:	6030      	str	r0, [r6, #0]
 800456c:	062e      	lsls	r6, r5, #24
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	d501      	bpl.n	8004576 <_printf_i+0x1c2>
 8004572:	6019      	str	r1, [r3, #0]
 8004574:	e002      	b.n	800457c <_printf_i+0x1c8>
 8004576:	0668      	lsls	r0, r5, #25
 8004578:	d5fb      	bpl.n	8004572 <_printf_i+0x1be>
 800457a:	8019      	strh	r1, [r3, #0]
 800457c:	2300      	movs	r3, #0
 800457e:	4616      	mov	r6, r2
 8004580:	6123      	str	r3, [r4, #16]
 8004582:	e7bc      	b.n	80044fe <_printf_i+0x14a>
 8004584:	6833      	ldr	r3, [r6, #0]
 8004586:	2100      	movs	r1, #0
 8004588:	1d1a      	adds	r2, r3, #4
 800458a:	6032      	str	r2, [r6, #0]
 800458c:	681e      	ldr	r6, [r3, #0]
 800458e:	6862      	ldr	r2, [r4, #4]
 8004590:	4630      	mov	r0, r6
 8004592:	f000 fab8 	bl	8004b06 <memchr>
 8004596:	b108      	cbz	r0, 800459c <_printf_i+0x1e8>
 8004598:	1b80      	subs	r0, r0, r6
 800459a:	6060      	str	r0, [r4, #4]
 800459c:	6863      	ldr	r3, [r4, #4]
 800459e:	6123      	str	r3, [r4, #16]
 80045a0:	2300      	movs	r3, #0
 80045a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045a6:	e7aa      	b.n	80044fe <_printf_i+0x14a>
 80045a8:	4632      	mov	r2, r6
 80045aa:	4649      	mov	r1, r9
 80045ac:	4640      	mov	r0, r8
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	47d0      	blx	sl
 80045b2:	3001      	adds	r0, #1
 80045b4:	d0ad      	beq.n	8004512 <_printf_i+0x15e>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	079b      	lsls	r3, r3, #30
 80045ba:	d413      	bmi.n	80045e4 <_printf_i+0x230>
 80045bc:	68e0      	ldr	r0, [r4, #12]
 80045be:	9b03      	ldr	r3, [sp, #12]
 80045c0:	4298      	cmp	r0, r3
 80045c2:	bfb8      	it	lt
 80045c4:	4618      	movlt	r0, r3
 80045c6:	e7a6      	b.n	8004516 <_printf_i+0x162>
 80045c8:	2301      	movs	r3, #1
 80045ca:	4632      	mov	r2, r6
 80045cc:	4649      	mov	r1, r9
 80045ce:	4640      	mov	r0, r8
 80045d0:	47d0      	blx	sl
 80045d2:	3001      	adds	r0, #1
 80045d4:	d09d      	beq.n	8004512 <_printf_i+0x15e>
 80045d6:	3501      	adds	r5, #1
 80045d8:	68e3      	ldr	r3, [r4, #12]
 80045da:	9903      	ldr	r1, [sp, #12]
 80045dc:	1a5b      	subs	r3, r3, r1
 80045de:	42ab      	cmp	r3, r5
 80045e0:	dcf2      	bgt.n	80045c8 <_printf_i+0x214>
 80045e2:	e7eb      	b.n	80045bc <_printf_i+0x208>
 80045e4:	2500      	movs	r5, #0
 80045e6:	f104 0619 	add.w	r6, r4, #25
 80045ea:	e7f5      	b.n	80045d8 <_printf_i+0x224>
 80045ec:	080067f8 	.word	0x080067f8
 80045f0:	08006809 	.word	0x08006809

080045f4 <std>:
 80045f4:	2300      	movs	r3, #0
 80045f6:	b510      	push	{r4, lr}
 80045f8:	4604      	mov	r4, r0
 80045fa:	e9c0 3300 	strd	r3, r3, [r0]
 80045fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004602:	6083      	str	r3, [r0, #8]
 8004604:	8181      	strh	r1, [r0, #12]
 8004606:	6643      	str	r3, [r0, #100]	@ 0x64
 8004608:	81c2      	strh	r2, [r0, #14]
 800460a:	6183      	str	r3, [r0, #24]
 800460c:	4619      	mov	r1, r3
 800460e:	2208      	movs	r2, #8
 8004610:	305c      	adds	r0, #92	@ 0x5c
 8004612:	f000 f9f9 	bl	8004a08 <memset>
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <std+0x58>)
 8004618:	6224      	str	r4, [r4, #32]
 800461a:	6263      	str	r3, [r4, #36]	@ 0x24
 800461c:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <std+0x5c>)
 800461e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004620:	4b0c      	ldr	r3, [pc, #48]	@ (8004654 <std+0x60>)
 8004622:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004624:	4b0c      	ldr	r3, [pc, #48]	@ (8004658 <std+0x64>)
 8004626:	6323      	str	r3, [r4, #48]	@ 0x30
 8004628:	4b0c      	ldr	r3, [pc, #48]	@ (800465c <std+0x68>)
 800462a:	429c      	cmp	r4, r3
 800462c:	d006      	beq.n	800463c <std+0x48>
 800462e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004632:	4294      	cmp	r4, r2
 8004634:	d002      	beq.n	800463c <std+0x48>
 8004636:	33d0      	adds	r3, #208	@ 0xd0
 8004638:	429c      	cmp	r4, r3
 800463a:	d105      	bne.n	8004648 <std+0x54>
 800463c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004644:	f000 ba5c 	b.w	8004b00 <__retarget_lock_init_recursive>
 8004648:	bd10      	pop	{r4, pc}
 800464a:	bf00      	nop
 800464c:	08004859 	.word	0x08004859
 8004650:	0800487b 	.word	0x0800487b
 8004654:	080048b3 	.word	0x080048b3
 8004658:	080048d7 	.word	0x080048d7
 800465c:	20000740 	.word	0x20000740

08004660 <stdio_exit_handler>:
 8004660:	4a02      	ldr	r2, [pc, #8]	@ (800466c <stdio_exit_handler+0xc>)
 8004662:	4903      	ldr	r1, [pc, #12]	@ (8004670 <stdio_exit_handler+0x10>)
 8004664:	4803      	ldr	r0, [pc, #12]	@ (8004674 <stdio_exit_handler+0x14>)
 8004666:	f000 b869 	b.w	800473c <_fwalk_sglue>
 800466a:	bf00      	nop
 800466c:	2000000c 	.word	0x2000000c
 8004670:	0800645d 	.word	0x0800645d
 8004674:	2000001c 	.word	0x2000001c

08004678 <cleanup_stdio>:
 8004678:	6841      	ldr	r1, [r0, #4]
 800467a:	4b0c      	ldr	r3, [pc, #48]	@ (80046ac <cleanup_stdio+0x34>)
 800467c:	b510      	push	{r4, lr}
 800467e:	4299      	cmp	r1, r3
 8004680:	4604      	mov	r4, r0
 8004682:	d001      	beq.n	8004688 <cleanup_stdio+0x10>
 8004684:	f001 feea 	bl	800645c <_fflush_r>
 8004688:	68a1      	ldr	r1, [r4, #8]
 800468a:	4b09      	ldr	r3, [pc, #36]	@ (80046b0 <cleanup_stdio+0x38>)
 800468c:	4299      	cmp	r1, r3
 800468e:	d002      	beq.n	8004696 <cleanup_stdio+0x1e>
 8004690:	4620      	mov	r0, r4
 8004692:	f001 fee3 	bl	800645c <_fflush_r>
 8004696:	68e1      	ldr	r1, [r4, #12]
 8004698:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <cleanup_stdio+0x3c>)
 800469a:	4299      	cmp	r1, r3
 800469c:	d004      	beq.n	80046a8 <cleanup_stdio+0x30>
 800469e:	4620      	mov	r0, r4
 80046a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046a4:	f001 beda 	b.w	800645c <_fflush_r>
 80046a8:	bd10      	pop	{r4, pc}
 80046aa:	bf00      	nop
 80046ac:	20000740 	.word	0x20000740
 80046b0:	200007a8 	.word	0x200007a8
 80046b4:	20000810 	.word	0x20000810

080046b8 <global_stdio_init.part.0>:
 80046b8:	b510      	push	{r4, lr}
 80046ba:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <global_stdio_init.part.0+0x30>)
 80046bc:	4c0b      	ldr	r4, [pc, #44]	@ (80046ec <global_stdio_init.part.0+0x34>)
 80046be:	4a0c      	ldr	r2, [pc, #48]	@ (80046f0 <global_stdio_init.part.0+0x38>)
 80046c0:	4620      	mov	r0, r4
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	2104      	movs	r1, #4
 80046c6:	2200      	movs	r2, #0
 80046c8:	f7ff ff94 	bl	80045f4 <std>
 80046cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80046d0:	2201      	movs	r2, #1
 80046d2:	2109      	movs	r1, #9
 80046d4:	f7ff ff8e 	bl	80045f4 <std>
 80046d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046dc:	2202      	movs	r2, #2
 80046de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046e2:	2112      	movs	r1, #18
 80046e4:	f7ff bf86 	b.w	80045f4 <std>
 80046e8:	20000878 	.word	0x20000878
 80046ec:	20000740 	.word	0x20000740
 80046f0:	08004661 	.word	0x08004661

080046f4 <__sfp_lock_acquire>:
 80046f4:	4801      	ldr	r0, [pc, #4]	@ (80046fc <__sfp_lock_acquire+0x8>)
 80046f6:	f000 ba04 	b.w	8004b02 <__retarget_lock_acquire_recursive>
 80046fa:	bf00      	nop
 80046fc:	20000881 	.word	0x20000881

08004700 <__sfp_lock_release>:
 8004700:	4801      	ldr	r0, [pc, #4]	@ (8004708 <__sfp_lock_release+0x8>)
 8004702:	f000 b9ff 	b.w	8004b04 <__retarget_lock_release_recursive>
 8004706:	bf00      	nop
 8004708:	20000881 	.word	0x20000881

0800470c <__sinit>:
 800470c:	b510      	push	{r4, lr}
 800470e:	4604      	mov	r4, r0
 8004710:	f7ff fff0 	bl	80046f4 <__sfp_lock_acquire>
 8004714:	6a23      	ldr	r3, [r4, #32]
 8004716:	b11b      	cbz	r3, 8004720 <__sinit+0x14>
 8004718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800471c:	f7ff bff0 	b.w	8004700 <__sfp_lock_release>
 8004720:	4b04      	ldr	r3, [pc, #16]	@ (8004734 <__sinit+0x28>)
 8004722:	6223      	str	r3, [r4, #32]
 8004724:	4b04      	ldr	r3, [pc, #16]	@ (8004738 <__sinit+0x2c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f5      	bne.n	8004718 <__sinit+0xc>
 800472c:	f7ff ffc4 	bl	80046b8 <global_stdio_init.part.0>
 8004730:	e7f2      	b.n	8004718 <__sinit+0xc>
 8004732:	bf00      	nop
 8004734:	08004679 	.word	0x08004679
 8004738:	20000878 	.word	0x20000878

0800473c <_fwalk_sglue>:
 800473c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004740:	4607      	mov	r7, r0
 8004742:	4688      	mov	r8, r1
 8004744:	4614      	mov	r4, r2
 8004746:	2600      	movs	r6, #0
 8004748:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800474c:	f1b9 0901 	subs.w	r9, r9, #1
 8004750:	d505      	bpl.n	800475e <_fwalk_sglue+0x22>
 8004752:	6824      	ldr	r4, [r4, #0]
 8004754:	2c00      	cmp	r4, #0
 8004756:	d1f7      	bne.n	8004748 <_fwalk_sglue+0xc>
 8004758:	4630      	mov	r0, r6
 800475a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800475e:	89ab      	ldrh	r3, [r5, #12]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d907      	bls.n	8004774 <_fwalk_sglue+0x38>
 8004764:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004768:	3301      	adds	r3, #1
 800476a:	d003      	beq.n	8004774 <_fwalk_sglue+0x38>
 800476c:	4629      	mov	r1, r5
 800476e:	4638      	mov	r0, r7
 8004770:	47c0      	blx	r8
 8004772:	4306      	orrs	r6, r0
 8004774:	3568      	adds	r5, #104	@ 0x68
 8004776:	e7e9      	b.n	800474c <_fwalk_sglue+0x10>

08004778 <iprintf>:
 8004778:	b40f      	push	{r0, r1, r2, r3}
 800477a:	b507      	push	{r0, r1, r2, lr}
 800477c:	4906      	ldr	r1, [pc, #24]	@ (8004798 <iprintf+0x20>)
 800477e:	ab04      	add	r3, sp, #16
 8004780:	6808      	ldr	r0, [r1, #0]
 8004782:	f853 2b04 	ldr.w	r2, [r3], #4
 8004786:	6881      	ldr	r1, [r0, #8]
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	f001 fccf 	bl	800612c <_vfiprintf_r>
 800478e:	b003      	add	sp, #12
 8004790:	f85d eb04 	ldr.w	lr, [sp], #4
 8004794:	b004      	add	sp, #16
 8004796:	4770      	bx	lr
 8004798:	20000018 	.word	0x20000018

0800479c <_puts_r>:
 800479c:	6a03      	ldr	r3, [r0, #32]
 800479e:	b570      	push	{r4, r5, r6, lr}
 80047a0:	4605      	mov	r5, r0
 80047a2:	460e      	mov	r6, r1
 80047a4:	6884      	ldr	r4, [r0, #8]
 80047a6:	b90b      	cbnz	r3, 80047ac <_puts_r+0x10>
 80047a8:	f7ff ffb0 	bl	800470c <__sinit>
 80047ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047ae:	07db      	lsls	r3, r3, #31
 80047b0:	d405      	bmi.n	80047be <_puts_r+0x22>
 80047b2:	89a3      	ldrh	r3, [r4, #12]
 80047b4:	0598      	lsls	r0, r3, #22
 80047b6:	d402      	bmi.n	80047be <_puts_r+0x22>
 80047b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ba:	f000 f9a2 	bl	8004b02 <__retarget_lock_acquire_recursive>
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	0719      	lsls	r1, r3, #28
 80047c2:	d502      	bpl.n	80047ca <_puts_r+0x2e>
 80047c4:	6923      	ldr	r3, [r4, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d135      	bne.n	8004836 <_puts_r+0x9a>
 80047ca:	4621      	mov	r1, r4
 80047cc:	4628      	mov	r0, r5
 80047ce:	f000 f8c5 	bl	800495c <__swsetup_r>
 80047d2:	b380      	cbz	r0, 8004836 <_puts_r+0x9a>
 80047d4:	f04f 35ff 	mov.w	r5, #4294967295
 80047d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047da:	07da      	lsls	r2, r3, #31
 80047dc:	d405      	bmi.n	80047ea <_puts_r+0x4e>
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	059b      	lsls	r3, r3, #22
 80047e2:	d402      	bmi.n	80047ea <_puts_r+0x4e>
 80047e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047e6:	f000 f98d 	bl	8004b04 <__retarget_lock_release_recursive>
 80047ea:	4628      	mov	r0, r5
 80047ec:	bd70      	pop	{r4, r5, r6, pc}
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	da04      	bge.n	80047fc <_puts_r+0x60>
 80047f2:	69a2      	ldr	r2, [r4, #24]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	dc17      	bgt.n	8004828 <_puts_r+0x8c>
 80047f8:	290a      	cmp	r1, #10
 80047fa:	d015      	beq.n	8004828 <_puts_r+0x8c>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	6022      	str	r2, [r4, #0]
 8004802:	7019      	strb	r1, [r3, #0]
 8004804:	68a3      	ldr	r3, [r4, #8]
 8004806:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800480a:	3b01      	subs	r3, #1
 800480c:	60a3      	str	r3, [r4, #8]
 800480e:	2900      	cmp	r1, #0
 8004810:	d1ed      	bne.n	80047ee <_puts_r+0x52>
 8004812:	2b00      	cmp	r3, #0
 8004814:	da11      	bge.n	800483a <_puts_r+0x9e>
 8004816:	4622      	mov	r2, r4
 8004818:	210a      	movs	r1, #10
 800481a:	4628      	mov	r0, r5
 800481c:	f000 f85f 	bl	80048de <__swbuf_r>
 8004820:	3001      	adds	r0, #1
 8004822:	d0d7      	beq.n	80047d4 <_puts_r+0x38>
 8004824:	250a      	movs	r5, #10
 8004826:	e7d7      	b.n	80047d8 <_puts_r+0x3c>
 8004828:	4622      	mov	r2, r4
 800482a:	4628      	mov	r0, r5
 800482c:	f000 f857 	bl	80048de <__swbuf_r>
 8004830:	3001      	adds	r0, #1
 8004832:	d1e7      	bne.n	8004804 <_puts_r+0x68>
 8004834:	e7ce      	b.n	80047d4 <_puts_r+0x38>
 8004836:	3e01      	subs	r6, #1
 8004838:	e7e4      	b.n	8004804 <_puts_r+0x68>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	6022      	str	r2, [r4, #0]
 8004840:	220a      	movs	r2, #10
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e7ee      	b.n	8004824 <_puts_r+0x88>
	...

08004848 <puts>:
 8004848:	4b02      	ldr	r3, [pc, #8]	@ (8004854 <puts+0xc>)
 800484a:	4601      	mov	r1, r0
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	f7ff bfa5 	b.w	800479c <_puts_r>
 8004852:	bf00      	nop
 8004854:	20000018 	.word	0x20000018

08004858 <__sread>:
 8004858:	b510      	push	{r4, lr}
 800485a:	460c      	mov	r4, r1
 800485c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004860:	f000 f900 	bl	8004a64 <_read_r>
 8004864:	2800      	cmp	r0, #0
 8004866:	bfab      	itete	ge
 8004868:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800486a:	89a3      	ldrhlt	r3, [r4, #12]
 800486c:	181b      	addge	r3, r3, r0
 800486e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004872:	bfac      	ite	ge
 8004874:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004876:	81a3      	strhlt	r3, [r4, #12]
 8004878:	bd10      	pop	{r4, pc}

0800487a <__swrite>:
 800487a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800487e:	461f      	mov	r7, r3
 8004880:	898b      	ldrh	r3, [r1, #12]
 8004882:	4605      	mov	r5, r0
 8004884:	05db      	lsls	r3, r3, #23
 8004886:	460c      	mov	r4, r1
 8004888:	4616      	mov	r6, r2
 800488a:	d505      	bpl.n	8004898 <__swrite+0x1e>
 800488c:	2302      	movs	r3, #2
 800488e:	2200      	movs	r2, #0
 8004890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004894:	f000 f8d4 	bl	8004a40 <_lseek_r>
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	4632      	mov	r2, r6
 800489c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048a0:	81a3      	strh	r3, [r4, #12]
 80048a2:	4628      	mov	r0, r5
 80048a4:	463b      	mov	r3, r7
 80048a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048ae:	f000 b8eb 	b.w	8004a88 <_write_r>

080048b2 <__sseek>:
 80048b2:	b510      	push	{r4, lr}
 80048b4:	460c      	mov	r4, r1
 80048b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ba:	f000 f8c1 	bl	8004a40 <_lseek_r>
 80048be:	1c43      	adds	r3, r0, #1
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	bf15      	itete	ne
 80048c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048ce:	81a3      	strheq	r3, [r4, #12]
 80048d0:	bf18      	it	ne
 80048d2:	81a3      	strhne	r3, [r4, #12]
 80048d4:	bd10      	pop	{r4, pc}

080048d6 <__sclose>:
 80048d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048da:	f000 b8a1 	b.w	8004a20 <_close_r>

080048de <__swbuf_r>:
 80048de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e0:	460e      	mov	r6, r1
 80048e2:	4614      	mov	r4, r2
 80048e4:	4605      	mov	r5, r0
 80048e6:	b118      	cbz	r0, 80048f0 <__swbuf_r+0x12>
 80048e8:	6a03      	ldr	r3, [r0, #32]
 80048ea:	b90b      	cbnz	r3, 80048f0 <__swbuf_r+0x12>
 80048ec:	f7ff ff0e 	bl	800470c <__sinit>
 80048f0:	69a3      	ldr	r3, [r4, #24]
 80048f2:	60a3      	str	r3, [r4, #8]
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	071a      	lsls	r2, r3, #28
 80048f8:	d501      	bpl.n	80048fe <__swbuf_r+0x20>
 80048fa:	6923      	ldr	r3, [r4, #16]
 80048fc:	b943      	cbnz	r3, 8004910 <__swbuf_r+0x32>
 80048fe:	4621      	mov	r1, r4
 8004900:	4628      	mov	r0, r5
 8004902:	f000 f82b 	bl	800495c <__swsetup_r>
 8004906:	b118      	cbz	r0, 8004910 <__swbuf_r+0x32>
 8004908:	f04f 37ff 	mov.w	r7, #4294967295
 800490c:	4638      	mov	r0, r7
 800490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	6922      	ldr	r2, [r4, #16]
 8004914:	b2f6      	uxtb	r6, r6
 8004916:	1a98      	subs	r0, r3, r2
 8004918:	6963      	ldr	r3, [r4, #20]
 800491a:	4637      	mov	r7, r6
 800491c:	4283      	cmp	r3, r0
 800491e:	dc05      	bgt.n	800492c <__swbuf_r+0x4e>
 8004920:	4621      	mov	r1, r4
 8004922:	4628      	mov	r0, r5
 8004924:	f001 fd9a 	bl	800645c <_fflush_r>
 8004928:	2800      	cmp	r0, #0
 800492a:	d1ed      	bne.n	8004908 <__swbuf_r+0x2a>
 800492c:	68a3      	ldr	r3, [r4, #8]
 800492e:	3b01      	subs	r3, #1
 8004930:	60a3      	str	r3, [r4, #8]
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	6022      	str	r2, [r4, #0]
 8004938:	701e      	strb	r6, [r3, #0]
 800493a:	6962      	ldr	r2, [r4, #20]
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	429a      	cmp	r2, r3
 8004940:	d004      	beq.n	800494c <__swbuf_r+0x6e>
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	07db      	lsls	r3, r3, #31
 8004946:	d5e1      	bpl.n	800490c <__swbuf_r+0x2e>
 8004948:	2e0a      	cmp	r6, #10
 800494a:	d1df      	bne.n	800490c <__swbuf_r+0x2e>
 800494c:	4621      	mov	r1, r4
 800494e:	4628      	mov	r0, r5
 8004950:	f001 fd84 	bl	800645c <_fflush_r>
 8004954:	2800      	cmp	r0, #0
 8004956:	d0d9      	beq.n	800490c <__swbuf_r+0x2e>
 8004958:	e7d6      	b.n	8004908 <__swbuf_r+0x2a>
	...

0800495c <__swsetup_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4b29      	ldr	r3, [pc, #164]	@ (8004a04 <__swsetup_r+0xa8>)
 8004960:	4605      	mov	r5, r0
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	460c      	mov	r4, r1
 8004966:	b118      	cbz	r0, 8004970 <__swsetup_r+0x14>
 8004968:	6a03      	ldr	r3, [r0, #32]
 800496a:	b90b      	cbnz	r3, 8004970 <__swsetup_r+0x14>
 800496c:	f7ff fece 	bl	800470c <__sinit>
 8004970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004974:	0719      	lsls	r1, r3, #28
 8004976:	d422      	bmi.n	80049be <__swsetup_r+0x62>
 8004978:	06da      	lsls	r2, r3, #27
 800497a:	d407      	bmi.n	800498c <__swsetup_r+0x30>
 800497c:	2209      	movs	r2, #9
 800497e:	602a      	str	r2, [r5, #0]
 8004980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004984:	f04f 30ff 	mov.w	r0, #4294967295
 8004988:	81a3      	strh	r3, [r4, #12]
 800498a:	e033      	b.n	80049f4 <__swsetup_r+0x98>
 800498c:	0758      	lsls	r0, r3, #29
 800498e:	d512      	bpl.n	80049b6 <__swsetup_r+0x5a>
 8004990:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004992:	b141      	cbz	r1, 80049a6 <__swsetup_r+0x4a>
 8004994:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004998:	4299      	cmp	r1, r3
 800499a:	d002      	beq.n	80049a2 <__swsetup_r+0x46>
 800499c:	4628      	mov	r0, r5
 800499e:	f000 ff1f 	bl	80057e0 <_free_r>
 80049a2:	2300      	movs	r3, #0
 80049a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	2300      	movs	r3, #0
 80049b0:	6063      	str	r3, [r4, #4]
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	f043 0308 	orr.w	r3, r3, #8
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	6923      	ldr	r3, [r4, #16]
 80049c0:	b94b      	cbnz	r3, 80049d6 <__swsetup_r+0x7a>
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049cc:	d003      	beq.n	80049d6 <__swsetup_r+0x7a>
 80049ce:	4621      	mov	r1, r4
 80049d0:	4628      	mov	r0, r5
 80049d2:	f001 fd90 	bl	80064f6 <__smakebuf_r>
 80049d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049da:	f013 0201 	ands.w	r2, r3, #1
 80049de:	d00a      	beq.n	80049f6 <__swsetup_r+0x9a>
 80049e0:	2200      	movs	r2, #0
 80049e2:	60a2      	str	r2, [r4, #8]
 80049e4:	6962      	ldr	r2, [r4, #20]
 80049e6:	4252      	negs	r2, r2
 80049e8:	61a2      	str	r2, [r4, #24]
 80049ea:	6922      	ldr	r2, [r4, #16]
 80049ec:	b942      	cbnz	r2, 8004a00 <__swsetup_r+0xa4>
 80049ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80049f2:	d1c5      	bne.n	8004980 <__swsetup_r+0x24>
 80049f4:	bd38      	pop	{r3, r4, r5, pc}
 80049f6:	0799      	lsls	r1, r3, #30
 80049f8:	bf58      	it	pl
 80049fa:	6962      	ldrpl	r2, [r4, #20]
 80049fc:	60a2      	str	r2, [r4, #8]
 80049fe:	e7f4      	b.n	80049ea <__swsetup_r+0x8e>
 8004a00:	2000      	movs	r0, #0
 8004a02:	e7f7      	b.n	80049f4 <__swsetup_r+0x98>
 8004a04:	20000018 	.word	0x20000018

08004a08 <memset>:
 8004a08:	4603      	mov	r3, r0
 8004a0a:	4402      	add	r2, r0
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d100      	bne.n	8004a12 <memset+0xa>
 8004a10:	4770      	bx	lr
 8004a12:	f803 1b01 	strb.w	r1, [r3], #1
 8004a16:	e7f9      	b.n	8004a0c <memset+0x4>

08004a18 <_localeconv_r>:
 8004a18:	4800      	ldr	r0, [pc, #0]	@ (8004a1c <_localeconv_r+0x4>)
 8004a1a:	4770      	bx	lr
 8004a1c:	20000158 	.word	0x20000158

08004a20 <_close_r>:
 8004a20:	b538      	push	{r3, r4, r5, lr}
 8004a22:	2300      	movs	r3, #0
 8004a24:	4d05      	ldr	r5, [pc, #20]	@ (8004a3c <_close_r+0x1c>)
 8004a26:	4604      	mov	r4, r0
 8004a28:	4608      	mov	r0, r1
 8004a2a:	602b      	str	r3, [r5, #0]
 8004a2c:	f7fc fdf1 	bl	8001612 <_close>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <_close_r+0x1a>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b103      	cbz	r3, 8004a3a <_close_r+0x1a>
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	2000087c 	.word	0x2000087c

08004a40 <_lseek_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4d05      	ldr	r5, [pc, #20]	@ (8004a60 <_lseek_r+0x20>)
 8004a4c:	602a      	str	r2, [r5, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f7fc fe03 	bl	800165a <_lseek>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_lseek_r+0x1e>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_lseek_r+0x1e>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	2000087c 	.word	0x2000087c

08004a64 <_read_r>:
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	4604      	mov	r4, r0
 8004a68:	4608      	mov	r0, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	4d05      	ldr	r5, [pc, #20]	@ (8004a84 <_read_r+0x20>)
 8004a70:	602a      	str	r2, [r5, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	f7fc fd94 	bl	80015a0 <_read>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d102      	bne.n	8004a82 <_read_r+0x1e>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	b103      	cbz	r3, 8004a82 <_read_r+0x1e>
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	bd38      	pop	{r3, r4, r5, pc}
 8004a84:	2000087c 	.word	0x2000087c

08004a88 <_write_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	2200      	movs	r2, #0
 8004a92:	4d05      	ldr	r5, [pc, #20]	@ (8004aa8 <_write_r+0x20>)
 8004a94:	602a      	str	r2, [r5, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f7fc fd9f 	bl	80015da <_write>
 8004a9c:	1c43      	adds	r3, r0, #1
 8004a9e:	d102      	bne.n	8004aa6 <_write_r+0x1e>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	b103      	cbz	r3, 8004aa6 <_write_r+0x1e>
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	bd38      	pop	{r3, r4, r5, pc}
 8004aa8:	2000087c 	.word	0x2000087c

08004aac <__errno>:
 8004aac:	4b01      	ldr	r3, [pc, #4]	@ (8004ab4 <__errno+0x8>)
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000018 	.word	0x20000018

08004ab8 <__libc_init_array>:
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	2600      	movs	r6, #0
 8004abc:	4d0c      	ldr	r5, [pc, #48]	@ (8004af0 <__libc_init_array+0x38>)
 8004abe:	4c0d      	ldr	r4, [pc, #52]	@ (8004af4 <__libc_init_array+0x3c>)
 8004ac0:	1b64      	subs	r4, r4, r5
 8004ac2:	10a4      	asrs	r4, r4, #2
 8004ac4:	42a6      	cmp	r6, r4
 8004ac6:	d109      	bne.n	8004adc <__libc_init_array+0x24>
 8004ac8:	f001 fe34 	bl	8006734 <_init>
 8004acc:	2600      	movs	r6, #0
 8004ace:	4d0a      	ldr	r5, [pc, #40]	@ (8004af8 <__libc_init_array+0x40>)
 8004ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8004afc <__libc_init_array+0x44>)
 8004ad2:	1b64      	subs	r4, r4, r5
 8004ad4:	10a4      	asrs	r4, r4, #2
 8004ad6:	42a6      	cmp	r6, r4
 8004ad8:	d105      	bne.n	8004ae6 <__libc_init_array+0x2e>
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae0:	4798      	blx	r3
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	e7ee      	b.n	8004ac4 <__libc_init_array+0xc>
 8004ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aea:	4798      	blx	r3
 8004aec:	3601      	adds	r6, #1
 8004aee:	e7f2      	b.n	8004ad6 <__libc_init_array+0x1e>
 8004af0:	08006b60 	.word	0x08006b60
 8004af4:	08006b60 	.word	0x08006b60
 8004af8:	08006b60 	.word	0x08006b60
 8004afc:	08006b64 	.word	0x08006b64

08004b00 <__retarget_lock_init_recursive>:
 8004b00:	4770      	bx	lr

08004b02 <__retarget_lock_acquire_recursive>:
 8004b02:	4770      	bx	lr

08004b04 <__retarget_lock_release_recursive>:
 8004b04:	4770      	bx	lr

08004b06 <memchr>:
 8004b06:	4603      	mov	r3, r0
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	b2c9      	uxtb	r1, r1
 8004b0c:	4402      	add	r2, r0
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	d101      	bne.n	8004b18 <memchr+0x12>
 8004b14:	2000      	movs	r0, #0
 8004b16:	e003      	b.n	8004b20 <memchr+0x1a>
 8004b18:	7804      	ldrb	r4, [r0, #0]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	428c      	cmp	r4, r1
 8004b1e:	d1f6      	bne.n	8004b0e <memchr+0x8>
 8004b20:	bd10      	pop	{r4, pc}

08004b22 <memcpy>:
 8004b22:	440a      	add	r2, r1
 8004b24:	4291      	cmp	r1, r2
 8004b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b2a:	d100      	bne.n	8004b2e <memcpy+0xc>
 8004b2c:	4770      	bx	lr
 8004b2e:	b510      	push	{r4, lr}
 8004b30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b34:	4291      	cmp	r1, r2
 8004b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b3a:	d1f9      	bne.n	8004b30 <memcpy+0xe>
 8004b3c:	bd10      	pop	{r4, pc}

08004b3e <quorem>:
 8004b3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b42:	6903      	ldr	r3, [r0, #16]
 8004b44:	690c      	ldr	r4, [r1, #16]
 8004b46:	4607      	mov	r7, r0
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	db7e      	blt.n	8004c4a <quorem+0x10c>
 8004b4c:	3c01      	subs	r4, #1
 8004b4e:	00a3      	lsls	r3, r4, #2
 8004b50:	f100 0514 	add.w	r5, r0, #20
 8004b54:	f101 0814 	add.w	r8, r1, #20
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b74:	d32e      	bcc.n	8004bd4 <quorem+0x96>
 8004b76:	f04f 0a00 	mov.w	sl, #0
 8004b7a:	46c4      	mov	ip, r8
 8004b7c:	46ae      	mov	lr, r5
 8004b7e:	46d3      	mov	fp, sl
 8004b80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b84:	b298      	uxth	r0, r3
 8004b86:	fb06 a000 	mla	r0, r6, r0, sl
 8004b8a:	0c1b      	lsrs	r3, r3, #16
 8004b8c:	0c02      	lsrs	r2, r0, #16
 8004b8e:	fb06 2303 	mla	r3, r6, r3, r2
 8004b92:	f8de 2000 	ldr.w	r2, [lr]
 8004b96:	b280      	uxth	r0, r0
 8004b98:	b292      	uxth	r2, r2
 8004b9a:	1a12      	subs	r2, r2, r0
 8004b9c:	445a      	add	r2, fp
 8004b9e:	f8de 0000 	ldr.w	r0, [lr]
 8004ba2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004bac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004bb0:	b292      	uxth	r2, r2
 8004bb2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004bb6:	45e1      	cmp	r9, ip
 8004bb8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004bbc:	f84e 2b04 	str.w	r2, [lr], #4
 8004bc0:	d2de      	bcs.n	8004b80 <quorem+0x42>
 8004bc2:	9b00      	ldr	r3, [sp, #0]
 8004bc4:	58eb      	ldr	r3, [r5, r3]
 8004bc6:	b92b      	cbnz	r3, 8004bd4 <quorem+0x96>
 8004bc8:	9b01      	ldr	r3, [sp, #4]
 8004bca:	3b04      	subs	r3, #4
 8004bcc:	429d      	cmp	r5, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	d32f      	bcc.n	8004c32 <quorem+0xf4>
 8004bd2:	613c      	str	r4, [r7, #16]
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	f001 f979 	bl	8005ecc <__mcmp>
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	db25      	blt.n	8004c2a <quorem+0xec>
 8004bde:	4629      	mov	r1, r5
 8004be0:	2000      	movs	r0, #0
 8004be2:	f858 2b04 	ldr.w	r2, [r8], #4
 8004be6:	f8d1 c000 	ldr.w	ip, [r1]
 8004bea:	fa1f fe82 	uxth.w	lr, r2
 8004bee:	fa1f f38c 	uxth.w	r3, ip
 8004bf2:	eba3 030e 	sub.w	r3, r3, lr
 8004bf6:	4403      	add	r3, r0
 8004bf8:	0c12      	lsrs	r2, r2, #16
 8004bfa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004bfe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c08:	45c1      	cmp	r9, r8
 8004c0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c0e:	f841 3b04 	str.w	r3, [r1], #4
 8004c12:	d2e6      	bcs.n	8004be2 <quorem+0xa4>
 8004c14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c1c:	b922      	cbnz	r2, 8004c28 <quorem+0xea>
 8004c1e:	3b04      	subs	r3, #4
 8004c20:	429d      	cmp	r5, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	d30b      	bcc.n	8004c3e <quorem+0x100>
 8004c26:	613c      	str	r4, [r7, #16]
 8004c28:	3601      	adds	r6, #1
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	b003      	add	sp, #12
 8004c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	3b04      	subs	r3, #4
 8004c36:	2a00      	cmp	r2, #0
 8004c38:	d1cb      	bne.n	8004bd2 <quorem+0x94>
 8004c3a:	3c01      	subs	r4, #1
 8004c3c:	e7c6      	b.n	8004bcc <quorem+0x8e>
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	3b04      	subs	r3, #4
 8004c42:	2a00      	cmp	r2, #0
 8004c44:	d1ef      	bne.n	8004c26 <quorem+0xe8>
 8004c46:	3c01      	subs	r4, #1
 8004c48:	e7ea      	b.n	8004c20 <quorem+0xe2>
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	e7ee      	b.n	8004c2c <quorem+0xee>
	...

08004c50 <_dtoa_r>:
 8004c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c54:	4614      	mov	r4, r2
 8004c56:	461d      	mov	r5, r3
 8004c58:	69c7      	ldr	r7, [r0, #28]
 8004c5a:	b097      	sub	sp, #92	@ 0x5c
 8004c5c:	4683      	mov	fp, r0
 8004c5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004c62:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004c64:	b97f      	cbnz	r7, 8004c86 <_dtoa_r+0x36>
 8004c66:	2010      	movs	r0, #16
 8004c68:	f000 fe02 	bl	8005870 <malloc>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004c72:	b920      	cbnz	r0, 8004c7e <_dtoa_r+0x2e>
 8004c74:	21ef      	movs	r1, #239	@ 0xef
 8004c76:	4ba8      	ldr	r3, [pc, #672]	@ (8004f18 <_dtoa_r+0x2c8>)
 8004c78:	48a8      	ldr	r0, [pc, #672]	@ (8004f1c <_dtoa_r+0x2cc>)
 8004c7a:	f001 fcab 	bl	80065d4 <__assert_func>
 8004c7e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004c82:	6007      	str	r7, [r0, #0]
 8004c84:	60c7      	str	r7, [r0, #12]
 8004c86:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c8a:	6819      	ldr	r1, [r3, #0]
 8004c8c:	b159      	cbz	r1, 8004ca6 <_dtoa_r+0x56>
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	2301      	movs	r3, #1
 8004c92:	4093      	lsls	r3, r2
 8004c94:	604a      	str	r2, [r1, #4]
 8004c96:	608b      	str	r3, [r1, #8]
 8004c98:	4658      	mov	r0, fp
 8004c9a:	f000 fedf 	bl	8005a5c <_Bfree>
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	1e2b      	subs	r3, r5, #0
 8004ca8:	bfaf      	iteee	ge
 8004caa:	2300      	movge	r3, #0
 8004cac:	2201      	movlt	r2, #1
 8004cae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004cb2:	9303      	strlt	r3, [sp, #12]
 8004cb4:	bfa8      	it	ge
 8004cb6:	6033      	strge	r3, [r6, #0]
 8004cb8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004cbc:	4b98      	ldr	r3, [pc, #608]	@ (8004f20 <_dtoa_r+0x2d0>)
 8004cbe:	bfb8      	it	lt
 8004cc0:	6032      	strlt	r2, [r6, #0]
 8004cc2:	ea33 0308 	bics.w	r3, r3, r8
 8004cc6:	d112      	bne.n	8004cee <_dtoa_r+0x9e>
 8004cc8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004ccc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004cd4:	4323      	orrs	r3, r4
 8004cd6:	f000 8550 	beq.w	800577a <_dtoa_r+0xb2a>
 8004cda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004cdc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004f24 <_dtoa_r+0x2d4>
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 8552 	beq.w	800578a <_dtoa_r+0xb3a>
 8004ce6:	f10a 0303 	add.w	r3, sl, #3
 8004cea:	f000 bd4c 	b.w	8005786 <_dtoa_r+0xb36>
 8004cee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cf2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f7fb fe53 	bl	80009a8 <__aeabi_dcmpeq>
 8004d02:	4607      	mov	r7, r0
 8004d04:	b158      	cbz	r0, 8004d1e <_dtoa_r+0xce>
 8004d06:	2301      	movs	r3, #1
 8004d08:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d0e:	b113      	cbz	r3, 8004d16 <_dtoa_r+0xc6>
 8004d10:	4b85      	ldr	r3, [pc, #532]	@ (8004f28 <_dtoa_r+0x2d8>)
 8004d12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004f2c <_dtoa_r+0x2dc>
 8004d1a:	f000 bd36 	b.w	800578a <_dtoa_r+0xb3a>
 8004d1e:	ab14      	add	r3, sp, #80	@ 0x50
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	ab15      	add	r3, sp, #84	@ 0x54
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	4658      	mov	r0, fp
 8004d28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004d2c:	f001 f97e 	bl	800602c <__d2b>
 8004d30:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004d34:	4681      	mov	r9, r0
 8004d36:	2e00      	cmp	r6, #0
 8004d38:	d077      	beq.n	8004e2a <_dtoa_r+0x1da>
 8004d3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d40:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d48:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004d4c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004d50:	9712      	str	r7, [sp, #72]	@ 0x48
 8004d52:	4619      	mov	r1, r3
 8004d54:	2200      	movs	r2, #0
 8004d56:	4b76      	ldr	r3, [pc, #472]	@ (8004f30 <_dtoa_r+0x2e0>)
 8004d58:	f7fb fa06 	bl	8000168 <__aeabi_dsub>
 8004d5c:	a368      	add	r3, pc, #416	@ (adr r3, 8004f00 <_dtoa_r+0x2b0>)
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f7fb fbb9 	bl	80004d8 <__aeabi_dmul>
 8004d66:	a368      	add	r3, pc, #416	@ (adr r3, 8004f08 <_dtoa_r+0x2b8>)
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb f9fe 	bl	800016c <__adddf3>
 8004d70:	4604      	mov	r4, r0
 8004d72:	4630      	mov	r0, r6
 8004d74:	460d      	mov	r5, r1
 8004d76:	f7fb fb45 	bl	8000404 <__aeabi_i2d>
 8004d7a:	a365      	add	r3, pc, #404	@ (adr r3, 8004f10 <_dtoa_r+0x2c0>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f7fb fbaa 	bl	80004d8 <__aeabi_dmul>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4620      	mov	r0, r4
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	f7fb f9ee 	bl	800016c <__adddf3>
 8004d90:	4604      	mov	r4, r0
 8004d92:	460d      	mov	r5, r1
 8004d94:	f7fb fe50 	bl	8000a38 <__aeabi_d2iz>
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4607      	mov	r7, r0
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	4620      	mov	r0, r4
 8004da0:	4629      	mov	r1, r5
 8004da2:	f7fb fe0b 	bl	80009bc <__aeabi_dcmplt>
 8004da6:	b140      	cbz	r0, 8004dba <_dtoa_r+0x16a>
 8004da8:	4638      	mov	r0, r7
 8004daa:	f7fb fb2b 	bl	8000404 <__aeabi_i2d>
 8004dae:	4622      	mov	r2, r4
 8004db0:	462b      	mov	r3, r5
 8004db2:	f7fb fdf9 	bl	80009a8 <__aeabi_dcmpeq>
 8004db6:	b900      	cbnz	r0, 8004dba <_dtoa_r+0x16a>
 8004db8:	3f01      	subs	r7, #1
 8004dba:	2f16      	cmp	r7, #22
 8004dbc:	d853      	bhi.n	8004e66 <_dtoa_r+0x216>
 8004dbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f34 <_dtoa_r+0x2e4>)
 8004dc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	f7fb fdf6 	bl	80009bc <__aeabi_dcmplt>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d04a      	beq.n	8004e6a <_dtoa_r+0x21a>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	3f01      	subs	r7, #1
 8004dd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004dda:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ddc:	1b9b      	subs	r3, r3, r6
 8004dde:	1e5a      	subs	r2, r3, #1
 8004de0:	bf46      	itte	mi
 8004de2:	f1c3 0801 	rsbmi	r8, r3, #1
 8004de6:	2300      	movmi	r3, #0
 8004de8:	f04f 0800 	movpl.w	r8, #0
 8004dec:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dee:	bf48      	it	mi
 8004df0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004df2:	2f00      	cmp	r7, #0
 8004df4:	db3b      	blt.n	8004e6e <_dtoa_r+0x21e>
 8004df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004df8:	970e      	str	r7, [sp, #56]	@ 0x38
 8004dfa:	443b      	add	r3, r7
 8004dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dfe:	2300      	movs	r3, #0
 8004e00:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e04:	2b09      	cmp	r3, #9
 8004e06:	d866      	bhi.n	8004ed6 <_dtoa_r+0x286>
 8004e08:	2b05      	cmp	r3, #5
 8004e0a:	bfc4      	itt	gt
 8004e0c:	3b04      	subgt	r3, #4
 8004e0e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004e10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e12:	bfc8      	it	gt
 8004e14:	2400      	movgt	r4, #0
 8004e16:	f1a3 0302 	sub.w	r3, r3, #2
 8004e1a:	bfd8      	it	le
 8004e1c:	2401      	movle	r4, #1
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d864      	bhi.n	8004eec <_dtoa_r+0x29c>
 8004e22:	e8df f003 	tbb	[pc, r3]
 8004e26:	382b      	.short	0x382b
 8004e28:	5636      	.short	0x5636
 8004e2a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004e2e:	441e      	add	r6, r3
 8004e30:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	bfc1      	itttt	gt
 8004e38:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004e3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004e40:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004e44:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004e48:	bfd6      	itet	le
 8004e4a:	f1c3 0320 	rsble	r3, r3, #32
 8004e4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004e52:	fa04 f003 	lslle.w	r0, r4, r3
 8004e56:	f7fb fac5 	bl	80003e4 <__aeabi_ui2d>
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004e60:	3e01      	subs	r6, #1
 8004e62:	9212      	str	r2, [sp, #72]	@ 0x48
 8004e64:	e775      	b.n	8004d52 <_dtoa_r+0x102>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e7b6      	b.n	8004dd8 <_dtoa_r+0x188>
 8004e6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004e6c:	e7b5      	b.n	8004dda <_dtoa_r+0x18a>
 8004e6e:	427b      	negs	r3, r7
 8004e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e72:	2300      	movs	r3, #0
 8004e74:	eba8 0807 	sub.w	r8, r8, r7
 8004e78:	930e      	str	r3, [sp, #56]	@ 0x38
 8004e7a:	e7c2      	b.n	8004e02 <_dtoa_r+0x1b2>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	dc35      	bgt.n	8004ef2 <_dtoa_r+0x2a2>
 8004e86:	2301      	movs	r3, #1
 8004e88:	461a      	mov	r2, r3
 8004e8a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004e8e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004e90:	e00b      	b.n	8004eaa <_dtoa_r+0x25a>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e7f3      	b.n	8004e7e <_dtoa_r+0x22e>
 8004e96:	2300      	movs	r3, #0
 8004e98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	9308      	str	r3, [sp, #32]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	9307      	str	r3, [sp, #28]
 8004ea6:	bfb8      	it	lt
 8004ea8:	2301      	movlt	r3, #1
 8004eaa:	2100      	movs	r1, #0
 8004eac:	2204      	movs	r2, #4
 8004eae:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004eb2:	f102 0514 	add.w	r5, r2, #20
 8004eb6:	429d      	cmp	r5, r3
 8004eb8:	d91f      	bls.n	8004efa <_dtoa_r+0x2aa>
 8004eba:	6041      	str	r1, [r0, #4]
 8004ebc:	4658      	mov	r0, fp
 8004ebe:	f000 fd8d 	bl	80059dc <_Balloc>
 8004ec2:	4682      	mov	sl, r0
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d139      	bne.n	8004f3c <_dtoa_r+0x2ec>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	f240 11af 	movw	r1, #431	@ 0x1af
 8004ece:	4b1a      	ldr	r3, [pc, #104]	@ (8004f38 <_dtoa_r+0x2e8>)
 8004ed0:	e6d2      	b.n	8004c78 <_dtoa_r+0x28>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e7e0      	b.n	8004e98 <_dtoa_r+0x248>
 8004ed6:	2401      	movs	r4, #1
 8004ed8:	2300      	movs	r3, #0
 8004eda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004edc:	9320      	str	r3, [sp, #128]	@ 0x80
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004ee8:	2312      	movs	r3, #18
 8004eea:	e7d0      	b.n	8004e8e <_dtoa_r+0x23e>
 8004eec:	2301      	movs	r3, #1
 8004eee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ef0:	e7f5      	b.n	8004ede <_dtoa_r+0x28e>
 8004ef2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ef4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004ef8:	e7d7      	b.n	8004eaa <_dtoa_r+0x25a>
 8004efa:	3101      	adds	r1, #1
 8004efc:	0052      	lsls	r2, r2, #1
 8004efe:	e7d8      	b.n	8004eb2 <_dtoa_r+0x262>
 8004f00:	636f4361 	.word	0x636f4361
 8004f04:	3fd287a7 	.word	0x3fd287a7
 8004f08:	8b60c8b3 	.word	0x8b60c8b3
 8004f0c:	3fc68a28 	.word	0x3fc68a28
 8004f10:	509f79fb 	.word	0x509f79fb
 8004f14:	3fd34413 	.word	0x3fd34413
 8004f18:	08006827 	.word	0x08006827
 8004f1c:	0800683e 	.word	0x0800683e
 8004f20:	7ff00000 	.word	0x7ff00000
 8004f24:	08006823 	.word	0x08006823
 8004f28:	080067f7 	.word	0x080067f7
 8004f2c:	080067f6 	.word	0x080067f6
 8004f30:	3ff80000 	.word	0x3ff80000
 8004f34:	08006938 	.word	0x08006938
 8004f38:	08006896 	.word	0x08006896
 8004f3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004f40:	6018      	str	r0, [r3, #0]
 8004f42:	9b07      	ldr	r3, [sp, #28]
 8004f44:	2b0e      	cmp	r3, #14
 8004f46:	f200 80a4 	bhi.w	8005092 <_dtoa_r+0x442>
 8004f4a:	2c00      	cmp	r4, #0
 8004f4c:	f000 80a1 	beq.w	8005092 <_dtoa_r+0x442>
 8004f50:	2f00      	cmp	r7, #0
 8004f52:	dd33      	ble.n	8004fbc <_dtoa_r+0x36c>
 8004f54:	4b86      	ldr	r3, [pc, #536]	@ (8005170 <_dtoa_r+0x520>)
 8004f56:	f007 020f 	and.w	r2, r7, #15
 8004f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f5e:	05f8      	lsls	r0, r7, #23
 8004f60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004f6c:	d516      	bpl.n	8004f9c <_dtoa_r+0x34c>
 8004f6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f72:	4b80      	ldr	r3, [pc, #512]	@ (8005174 <_dtoa_r+0x524>)
 8004f74:	2603      	movs	r6, #3
 8004f76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f7a:	f7fb fbd7 	bl	800072c <__aeabi_ddiv>
 8004f7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f82:	f004 040f 	and.w	r4, r4, #15
 8004f86:	4d7b      	ldr	r5, [pc, #492]	@ (8005174 <_dtoa_r+0x524>)
 8004f88:	b954      	cbnz	r4, 8004fa0 <_dtoa_r+0x350>
 8004f8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f92:	f7fb fbcb 	bl	800072c <__aeabi_ddiv>
 8004f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f9a:	e028      	b.n	8004fee <_dtoa_r+0x39e>
 8004f9c:	2602      	movs	r6, #2
 8004f9e:	e7f2      	b.n	8004f86 <_dtoa_r+0x336>
 8004fa0:	07e1      	lsls	r1, r4, #31
 8004fa2:	d508      	bpl.n	8004fb6 <_dtoa_r+0x366>
 8004fa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004fac:	f7fb fa94 	bl	80004d8 <__aeabi_dmul>
 8004fb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fb4:	3601      	adds	r6, #1
 8004fb6:	1064      	asrs	r4, r4, #1
 8004fb8:	3508      	adds	r5, #8
 8004fba:	e7e5      	b.n	8004f88 <_dtoa_r+0x338>
 8004fbc:	f000 80d2 	beq.w	8005164 <_dtoa_r+0x514>
 8004fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fc4:	427c      	negs	r4, r7
 8004fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005170 <_dtoa_r+0x520>)
 8004fc8:	f004 020f 	and.w	r2, r4, #15
 8004fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f7fb fa80 	bl	80004d8 <__aeabi_dmul>
 8004fd8:	2602      	movs	r6, #2
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fe0:	4d64      	ldr	r5, [pc, #400]	@ (8005174 <_dtoa_r+0x524>)
 8004fe2:	1124      	asrs	r4, r4, #4
 8004fe4:	2c00      	cmp	r4, #0
 8004fe6:	f040 80b2 	bne.w	800514e <_dtoa_r+0x4fe>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1d3      	bne.n	8004f96 <_dtoa_r+0x346>
 8004fee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004ff2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80b7 	beq.w	8005168 <_dtoa_r+0x518>
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	4629      	mov	r1, r5
 8005000:	4b5d      	ldr	r3, [pc, #372]	@ (8005178 <_dtoa_r+0x528>)
 8005002:	f7fb fcdb 	bl	80009bc <__aeabi_dcmplt>
 8005006:	2800      	cmp	r0, #0
 8005008:	f000 80ae 	beq.w	8005168 <_dtoa_r+0x518>
 800500c:	9b07      	ldr	r3, [sp, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80aa 	beq.w	8005168 <_dtoa_r+0x518>
 8005014:	9b08      	ldr	r3, [sp, #32]
 8005016:	2b00      	cmp	r3, #0
 8005018:	dd37      	ble.n	800508a <_dtoa_r+0x43a>
 800501a:	1e7b      	subs	r3, r7, #1
 800501c:	4620      	mov	r0, r4
 800501e:	9304      	str	r3, [sp, #16]
 8005020:	2200      	movs	r2, #0
 8005022:	4629      	mov	r1, r5
 8005024:	4b55      	ldr	r3, [pc, #340]	@ (800517c <_dtoa_r+0x52c>)
 8005026:	f7fb fa57 	bl	80004d8 <__aeabi_dmul>
 800502a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800502e:	9c08      	ldr	r4, [sp, #32]
 8005030:	3601      	adds	r6, #1
 8005032:	4630      	mov	r0, r6
 8005034:	f7fb f9e6 	bl	8000404 <__aeabi_i2d>
 8005038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800503c:	f7fb fa4c 	bl	80004d8 <__aeabi_dmul>
 8005040:	2200      	movs	r2, #0
 8005042:	4b4f      	ldr	r3, [pc, #316]	@ (8005180 <_dtoa_r+0x530>)
 8005044:	f7fb f892 	bl	800016c <__adddf3>
 8005048:	4605      	mov	r5, r0
 800504a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800504e:	2c00      	cmp	r4, #0
 8005050:	f040 809a 	bne.w	8005188 <_dtoa_r+0x538>
 8005054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	4b4a      	ldr	r3, [pc, #296]	@ (8005184 <_dtoa_r+0x534>)
 800505c:	f7fb f884 	bl	8000168 <__aeabi_dsub>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005068:	462a      	mov	r2, r5
 800506a:	4633      	mov	r3, r6
 800506c:	f7fb fcc4 	bl	80009f8 <__aeabi_dcmpgt>
 8005070:	2800      	cmp	r0, #0
 8005072:	f040 828e 	bne.w	8005592 <_dtoa_r+0x942>
 8005076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800507a:	462a      	mov	r2, r5
 800507c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005080:	f7fb fc9c 	bl	80009bc <__aeabi_dcmplt>
 8005084:	2800      	cmp	r0, #0
 8005086:	f040 8127 	bne.w	80052d8 <_dtoa_r+0x688>
 800508a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800508e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005092:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005094:	2b00      	cmp	r3, #0
 8005096:	f2c0 8163 	blt.w	8005360 <_dtoa_r+0x710>
 800509a:	2f0e      	cmp	r7, #14
 800509c:	f300 8160 	bgt.w	8005360 <_dtoa_r+0x710>
 80050a0:	4b33      	ldr	r3, [pc, #204]	@ (8005170 <_dtoa_r+0x520>)
 80050a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80050a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	da03      	bge.n	80050bc <_dtoa_r+0x46c>
 80050b4:	9b07      	ldr	r3, [sp, #28]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f340 8100 	ble.w	80052bc <_dtoa_r+0x66c>
 80050bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80050c0:	4656      	mov	r6, sl
 80050c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050c6:	4620      	mov	r0, r4
 80050c8:	4629      	mov	r1, r5
 80050ca:	f7fb fb2f 	bl	800072c <__aeabi_ddiv>
 80050ce:	f7fb fcb3 	bl	8000a38 <__aeabi_d2iz>
 80050d2:	4680      	mov	r8, r0
 80050d4:	f7fb f996 	bl	8000404 <__aeabi_i2d>
 80050d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050dc:	f7fb f9fc 	bl	80004d8 <__aeabi_dmul>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4620      	mov	r0, r4
 80050e6:	4629      	mov	r1, r5
 80050e8:	f7fb f83e 	bl	8000168 <__aeabi_dsub>
 80050ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80050f0:	9d07      	ldr	r5, [sp, #28]
 80050f2:	f806 4b01 	strb.w	r4, [r6], #1
 80050f6:	eba6 040a 	sub.w	r4, r6, sl
 80050fa:	42a5      	cmp	r5, r4
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	f040 8116 	bne.w	8005330 <_dtoa_r+0x6e0>
 8005104:	f7fb f832 	bl	800016c <__adddf3>
 8005108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800510c:	4604      	mov	r4, r0
 800510e:	460d      	mov	r5, r1
 8005110:	f7fb fc72 	bl	80009f8 <__aeabi_dcmpgt>
 8005114:	2800      	cmp	r0, #0
 8005116:	f040 80f8 	bne.w	800530a <_dtoa_r+0x6ba>
 800511a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800511e:	4620      	mov	r0, r4
 8005120:	4629      	mov	r1, r5
 8005122:	f7fb fc41 	bl	80009a8 <__aeabi_dcmpeq>
 8005126:	b118      	cbz	r0, 8005130 <_dtoa_r+0x4e0>
 8005128:	f018 0f01 	tst.w	r8, #1
 800512c:	f040 80ed 	bne.w	800530a <_dtoa_r+0x6ba>
 8005130:	4649      	mov	r1, r9
 8005132:	4658      	mov	r0, fp
 8005134:	f000 fc92 	bl	8005a5c <_Bfree>
 8005138:	2300      	movs	r3, #0
 800513a:	7033      	strb	r3, [r6, #0]
 800513c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800513e:	3701      	adds	r7, #1
 8005140:	601f      	str	r7, [r3, #0]
 8005142:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 8320 	beq.w	800578a <_dtoa_r+0xb3a>
 800514a:	601e      	str	r6, [r3, #0]
 800514c:	e31d      	b.n	800578a <_dtoa_r+0xb3a>
 800514e:	07e2      	lsls	r2, r4, #31
 8005150:	d505      	bpl.n	800515e <_dtoa_r+0x50e>
 8005152:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005156:	f7fb f9bf 	bl	80004d8 <__aeabi_dmul>
 800515a:	2301      	movs	r3, #1
 800515c:	3601      	adds	r6, #1
 800515e:	1064      	asrs	r4, r4, #1
 8005160:	3508      	adds	r5, #8
 8005162:	e73f      	b.n	8004fe4 <_dtoa_r+0x394>
 8005164:	2602      	movs	r6, #2
 8005166:	e742      	b.n	8004fee <_dtoa_r+0x39e>
 8005168:	9c07      	ldr	r4, [sp, #28]
 800516a:	9704      	str	r7, [sp, #16]
 800516c:	e761      	b.n	8005032 <_dtoa_r+0x3e2>
 800516e:	bf00      	nop
 8005170:	08006938 	.word	0x08006938
 8005174:	08006910 	.word	0x08006910
 8005178:	3ff00000 	.word	0x3ff00000
 800517c:	40240000 	.word	0x40240000
 8005180:	401c0000 	.word	0x401c0000
 8005184:	40140000 	.word	0x40140000
 8005188:	4b70      	ldr	r3, [pc, #448]	@ (800534c <_dtoa_r+0x6fc>)
 800518a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800518c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005190:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005194:	4454      	add	r4, sl
 8005196:	2900      	cmp	r1, #0
 8005198:	d045      	beq.n	8005226 <_dtoa_r+0x5d6>
 800519a:	2000      	movs	r0, #0
 800519c:	496c      	ldr	r1, [pc, #432]	@ (8005350 <_dtoa_r+0x700>)
 800519e:	f7fb fac5 	bl	800072c <__aeabi_ddiv>
 80051a2:	4633      	mov	r3, r6
 80051a4:	462a      	mov	r2, r5
 80051a6:	f7fa ffdf 	bl	8000168 <__aeabi_dsub>
 80051aa:	4656      	mov	r6, sl
 80051ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051b4:	f7fb fc40 	bl	8000a38 <__aeabi_d2iz>
 80051b8:	4605      	mov	r5, r0
 80051ba:	f7fb f923 	bl	8000404 <__aeabi_i2d>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051c6:	f7fa ffcf 	bl	8000168 <__aeabi_dsub>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	3530      	adds	r5, #48	@ 0x30
 80051d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80051d8:	f806 5b01 	strb.w	r5, [r6], #1
 80051dc:	f7fb fbee 	bl	80009bc <__aeabi_dcmplt>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d163      	bne.n	80052ac <_dtoa_r+0x65c>
 80051e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051e8:	2000      	movs	r0, #0
 80051ea:	495a      	ldr	r1, [pc, #360]	@ (8005354 <_dtoa_r+0x704>)
 80051ec:	f7fa ffbc 	bl	8000168 <__aeabi_dsub>
 80051f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80051f4:	f7fb fbe2 	bl	80009bc <__aeabi_dcmplt>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	f040 8087 	bne.w	800530c <_dtoa_r+0x6bc>
 80051fe:	42a6      	cmp	r6, r4
 8005200:	f43f af43 	beq.w	800508a <_dtoa_r+0x43a>
 8005204:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005208:	2200      	movs	r2, #0
 800520a:	4b53      	ldr	r3, [pc, #332]	@ (8005358 <_dtoa_r+0x708>)
 800520c:	f7fb f964 	bl	80004d8 <__aeabi_dmul>
 8005210:	2200      	movs	r2, #0
 8005212:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800521a:	4b4f      	ldr	r3, [pc, #316]	@ (8005358 <_dtoa_r+0x708>)
 800521c:	f7fb f95c 	bl	80004d8 <__aeabi_dmul>
 8005220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005224:	e7c4      	b.n	80051b0 <_dtoa_r+0x560>
 8005226:	4631      	mov	r1, r6
 8005228:	4628      	mov	r0, r5
 800522a:	f7fb f955 	bl	80004d8 <__aeabi_dmul>
 800522e:	4656      	mov	r6, sl
 8005230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005234:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800523a:	f7fb fbfd 	bl	8000a38 <__aeabi_d2iz>
 800523e:	4605      	mov	r5, r0
 8005240:	f7fb f8e0 	bl	8000404 <__aeabi_i2d>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800524c:	f7fa ff8c 	bl	8000168 <__aeabi_dsub>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	3530      	adds	r5, #48	@ 0x30
 8005256:	f806 5b01 	strb.w	r5, [r6], #1
 800525a:	42a6      	cmp	r6, r4
 800525c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	d124      	bne.n	80052b0 <_dtoa_r+0x660>
 8005266:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800526a:	4b39      	ldr	r3, [pc, #228]	@ (8005350 <_dtoa_r+0x700>)
 800526c:	f7fa ff7e 	bl	800016c <__adddf3>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005278:	f7fb fbbe 	bl	80009f8 <__aeabi_dcmpgt>
 800527c:	2800      	cmp	r0, #0
 800527e:	d145      	bne.n	800530c <_dtoa_r+0x6bc>
 8005280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005284:	2000      	movs	r0, #0
 8005286:	4932      	ldr	r1, [pc, #200]	@ (8005350 <_dtoa_r+0x700>)
 8005288:	f7fa ff6e 	bl	8000168 <__aeabi_dsub>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005294:	f7fb fb92 	bl	80009bc <__aeabi_dcmplt>
 8005298:	2800      	cmp	r0, #0
 800529a:	f43f aef6 	beq.w	800508a <_dtoa_r+0x43a>
 800529e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80052a0:	1e73      	subs	r3, r6, #1
 80052a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80052a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80052a8:	2b30      	cmp	r3, #48	@ 0x30
 80052aa:	d0f8      	beq.n	800529e <_dtoa_r+0x64e>
 80052ac:	9f04      	ldr	r7, [sp, #16]
 80052ae:	e73f      	b.n	8005130 <_dtoa_r+0x4e0>
 80052b0:	4b29      	ldr	r3, [pc, #164]	@ (8005358 <_dtoa_r+0x708>)
 80052b2:	f7fb f911 	bl	80004d8 <__aeabi_dmul>
 80052b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052ba:	e7bc      	b.n	8005236 <_dtoa_r+0x5e6>
 80052bc:	d10c      	bne.n	80052d8 <_dtoa_r+0x688>
 80052be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052c2:	2200      	movs	r2, #0
 80052c4:	4b25      	ldr	r3, [pc, #148]	@ (800535c <_dtoa_r+0x70c>)
 80052c6:	f7fb f907 	bl	80004d8 <__aeabi_dmul>
 80052ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ce:	f7fb fb89 	bl	80009e4 <__aeabi_dcmpge>
 80052d2:	2800      	cmp	r0, #0
 80052d4:	f000 815b 	beq.w	800558e <_dtoa_r+0x93e>
 80052d8:	2400      	movs	r4, #0
 80052da:	4625      	mov	r5, r4
 80052dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052de:	4656      	mov	r6, sl
 80052e0:	43db      	mvns	r3, r3
 80052e2:	9304      	str	r3, [sp, #16]
 80052e4:	2700      	movs	r7, #0
 80052e6:	4621      	mov	r1, r4
 80052e8:	4658      	mov	r0, fp
 80052ea:	f000 fbb7 	bl	8005a5c <_Bfree>
 80052ee:	2d00      	cmp	r5, #0
 80052f0:	d0dc      	beq.n	80052ac <_dtoa_r+0x65c>
 80052f2:	b12f      	cbz	r7, 8005300 <_dtoa_r+0x6b0>
 80052f4:	42af      	cmp	r7, r5
 80052f6:	d003      	beq.n	8005300 <_dtoa_r+0x6b0>
 80052f8:	4639      	mov	r1, r7
 80052fa:	4658      	mov	r0, fp
 80052fc:	f000 fbae 	bl	8005a5c <_Bfree>
 8005300:	4629      	mov	r1, r5
 8005302:	4658      	mov	r0, fp
 8005304:	f000 fbaa 	bl	8005a5c <_Bfree>
 8005308:	e7d0      	b.n	80052ac <_dtoa_r+0x65c>
 800530a:	9704      	str	r7, [sp, #16]
 800530c:	4633      	mov	r3, r6
 800530e:	461e      	mov	r6, r3
 8005310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005314:	2a39      	cmp	r2, #57	@ 0x39
 8005316:	d107      	bne.n	8005328 <_dtoa_r+0x6d8>
 8005318:	459a      	cmp	sl, r3
 800531a:	d1f8      	bne.n	800530e <_dtoa_r+0x6be>
 800531c:	9a04      	ldr	r2, [sp, #16]
 800531e:	3201      	adds	r2, #1
 8005320:	9204      	str	r2, [sp, #16]
 8005322:	2230      	movs	r2, #48	@ 0x30
 8005324:	f88a 2000 	strb.w	r2, [sl]
 8005328:	781a      	ldrb	r2, [r3, #0]
 800532a:	3201      	adds	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e7bd      	b.n	80052ac <_dtoa_r+0x65c>
 8005330:	2200      	movs	r2, #0
 8005332:	4b09      	ldr	r3, [pc, #36]	@ (8005358 <_dtoa_r+0x708>)
 8005334:	f7fb f8d0 	bl	80004d8 <__aeabi_dmul>
 8005338:	2200      	movs	r2, #0
 800533a:	2300      	movs	r3, #0
 800533c:	4604      	mov	r4, r0
 800533e:	460d      	mov	r5, r1
 8005340:	f7fb fb32 	bl	80009a8 <__aeabi_dcmpeq>
 8005344:	2800      	cmp	r0, #0
 8005346:	f43f aebc 	beq.w	80050c2 <_dtoa_r+0x472>
 800534a:	e6f1      	b.n	8005130 <_dtoa_r+0x4e0>
 800534c:	08006938 	.word	0x08006938
 8005350:	3fe00000 	.word	0x3fe00000
 8005354:	3ff00000 	.word	0x3ff00000
 8005358:	40240000 	.word	0x40240000
 800535c:	40140000 	.word	0x40140000
 8005360:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005362:	2a00      	cmp	r2, #0
 8005364:	f000 80db 	beq.w	800551e <_dtoa_r+0x8ce>
 8005368:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800536a:	2a01      	cmp	r2, #1
 800536c:	f300 80bf 	bgt.w	80054ee <_dtoa_r+0x89e>
 8005370:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005372:	2a00      	cmp	r2, #0
 8005374:	f000 80b7 	beq.w	80054e6 <_dtoa_r+0x896>
 8005378:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800537c:	4646      	mov	r6, r8
 800537e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005382:	2101      	movs	r1, #1
 8005384:	441a      	add	r2, r3
 8005386:	4658      	mov	r0, fp
 8005388:	4498      	add	r8, r3
 800538a:	9209      	str	r2, [sp, #36]	@ 0x24
 800538c:	f000 fc1a 	bl	8005bc4 <__i2b>
 8005390:	4605      	mov	r5, r0
 8005392:	b15e      	cbz	r6, 80053ac <_dtoa_r+0x75c>
 8005394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005396:	2b00      	cmp	r3, #0
 8005398:	dd08      	ble.n	80053ac <_dtoa_r+0x75c>
 800539a:	42b3      	cmp	r3, r6
 800539c:	bfa8      	it	ge
 800539e:	4633      	movge	r3, r6
 80053a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053a2:	eba8 0803 	sub.w	r8, r8, r3
 80053a6:	1af6      	subs	r6, r6, r3
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80053ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053ae:	b1f3      	cbz	r3, 80053ee <_dtoa_r+0x79e>
 80053b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80b7 	beq.w	8005526 <_dtoa_r+0x8d6>
 80053b8:	b18c      	cbz	r4, 80053de <_dtoa_r+0x78e>
 80053ba:	4629      	mov	r1, r5
 80053bc:	4622      	mov	r2, r4
 80053be:	4658      	mov	r0, fp
 80053c0:	f000 fcbe 	bl	8005d40 <__pow5mult>
 80053c4:	464a      	mov	r2, r9
 80053c6:	4601      	mov	r1, r0
 80053c8:	4605      	mov	r5, r0
 80053ca:	4658      	mov	r0, fp
 80053cc:	f000 fc10 	bl	8005bf0 <__multiply>
 80053d0:	4649      	mov	r1, r9
 80053d2:	9004      	str	r0, [sp, #16]
 80053d4:	4658      	mov	r0, fp
 80053d6:	f000 fb41 	bl	8005a5c <_Bfree>
 80053da:	9b04      	ldr	r3, [sp, #16]
 80053dc:	4699      	mov	r9, r3
 80053de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053e0:	1b1a      	subs	r2, r3, r4
 80053e2:	d004      	beq.n	80053ee <_dtoa_r+0x79e>
 80053e4:	4649      	mov	r1, r9
 80053e6:	4658      	mov	r0, fp
 80053e8:	f000 fcaa 	bl	8005d40 <__pow5mult>
 80053ec:	4681      	mov	r9, r0
 80053ee:	2101      	movs	r1, #1
 80053f0:	4658      	mov	r0, fp
 80053f2:	f000 fbe7 	bl	8005bc4 <__i2b>
 80053f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053f8:	4604      	mov	r4, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 81c9 	beq.w	8005792 <_dtoa_r+0xb42>
 8005400:	461a      	mov	r2, r3
 8005402:	4601      	mov	r1, r0
 8005404:	4658      	mov	r0, fp
 8005406:	f000 fc9b 	bl	8005d40 <__pow5mult>
 800540a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800540c:	4604      	mov	r4, r0
 800540e:	2b01      	cmp	r3, #1
 8005410:	f300 808f 	bgt.w	8005532 <_dtoa_r+0x8e2>
 8005414:	9b02      	ldr	r3, [sp, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f040 8087 	bne.w	800552a <_dtoa_r+0x8da>
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005422:	2b00      	cmp	r3, #0
 8005424:	f040 8083 	bne.w	800552e <_dtoa_r+0x8de>
 8005428:	9b03      	ldr	r3, [sp, #12]
 800542a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800542e:	0d1b      	lsrs	r3, r3, #20
 8005430:	051b      	lsls	r3, r3, #20
 8005432:	b12b      	cbz	r3, 8005440 <_dtoa_r+0x7f0>
 8005434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005436:	f108 0801 	add.w	r8, r8, #1
 800543a:	3301      	adds	r3, #1
 800543c:	9309      	str	r3, [sp, #36]	@ 0x24
 800543e:	2301      	movs	r3, #1
 8005440:	930a      	str	r3, [sp, #40]	@ 0x28
 8005442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 81aa 	beq.w	800579e <_dtoa_r+0xb4e>
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005450:	6918      	ldr	r0, [r3, #16]
 8005452:	f000 fb6b 	bl	8005b2c <__hi0bits>
 8005456:	f1c0 0020 	rsb	r0, r0, #32
 800545a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800545c:	4418      	add	r0, r3
 800545e:	f010 001f 	ands.w	r0, r0, #31
 8005462:	d071      	beq.n	8005548 <_dtoa_r+0x8f8>
 8005464:	f1c0 0320 	rsb	r3, r0, #32
 8005468:	2b04      	cmp	r3, #4
 800546a:	dd65      	ble.n	8005538 <_dtoa_r+0x8e8>
 800546c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800546e:	f1c0 001c 	rsb	r0, r0, #28
 8005472:	4403      	add	r3, r0
 8005474:	4480      	add	r8, r0
 8005476:	4406      	add	r6, r0
 8005478:	9309      	str	r3, [sp, #36]	@ 0x24
 800547a:	f1b8 0f00 	cmp.w	r8, #0
 800547e:	dd05      	ble.n	800548c <_dtoa_r+0x83c>
 8005480:	4649      	mov	r1, r9
 8005482:	4642      	mov	r2, r8
 8005484:	4658      	mov	r0, fp
 8005486:	f000 fcb5 	bl	8005df4 <__lshift>
 800548a:	4681      	mov	r9, r0
 800548c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800548e:	2b00      	cmp	r3, #0
 8005490:	dd05      	ble.n	800549e <_dtoa_r+0x84e>
 8005492:	4621      	mov	r1, r4
 8005494:	461a      	mov	r2, r3
 8005496:	4658      	mov	r0, fp
 8005498:	f000 fcac 	bl	8005df4 <__lshift>
 800549c:	4604      	mov	r4, r0
 800549e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d053      	beq.n	800554c <_dtoa_r+0x8fc>
 80054a4:	4621      	mov	r1, r4
 80054a6:	4648      	mov	r0, r9
 80054a8:	f000 fd10 	bl	8005ecc <__mcmp>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	da4d      	bge.n	800554c <_dtoa_r+0x8fc>
 80054b0:	1e7b      	subs	r3, r7, #1
 80054b2:	4649      	mov	r1, r9
 80054b4:	9304      	str	r3, [sp, #16]
 80054b6:	220a      	movs	r2, #10
 80054b8:	2300      	movs	r3, #0
 80054ba:	4658      	mov	r0, fp
 80054bc:	f000 faf0 	bl	8005aa0 <__multadd>
 80054c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054c2:	4681      	mov	r9, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 816c 	beq.w	80057a2 <_dtoa_r+0xb52>
 80054ca:	2300      	movs	r3, #0
 80054cc:	4629      	mov	r1, r5
 80054ce:	220a      	movs	r2, #10
 80054d0:	4658      	mov	r0, fp
 80054d2:	f000 fae5 	bl	8005aa0 <__multadd>
 80054d6:	9b08      	ldr	r3, [sp, #32]
 80054d8:	4605      	mov	r5, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	dc61      	bgt.n	80055a2 <_dtoa_r+0x952>
 80054de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	dc3b      	bgt.n	800555c <_dtoa_r+0x90c>
 80054e4:	e05d      	b.n	80055a2 <_dtoa_r+0x952>
 80054e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80054e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80054ec:	e746      	b.n	800537c <_dtoa_r+0x72c>
 80054ee:	9b07      	ldr	r3, [sp, #28]
 80054f0:	1e5c      	subs	r4, r3, #1
 80054f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	bfbf      	itttt	lt
 80054f8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80054fa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80054fc:	1ae3      	sublt	r3, r4, r3
 80054fe:	18d2      	addlt	r2, r2, r3
 8005500:	bfa8      	it	ge
 8005502:	1b1c      	subge	r4, r3, r4
 8005504:	9b07      	ldr	r3, [sp, #28]
 8005506:	bfbe      	ittt	lt
 8005508:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800550a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800550c:	2400      	movlt	r4, #0
 800550e:	2b00      	cmp	r3, #0
 8005510:	bfb5      	itete	lt
 8005512:	eba8 0603 	sublt.w	r6, r8, r3
 8005516:	4646      	movge	r6, r8
 8005518:	2300      	movlt	r3, #0
 800551a:	9b07      	ldrge	r3, [sp, #28]
 800551c:	e730      	b.n	8005380 <_dtoa_r+0x730>
 800551e:	4646      	mov	r6, r8
 8005520:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005522:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005524:	e735      	b.n	8005392 <_dtoa_r+0x742>
 8005526:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005528:	e75c      	b.n	80053e4 <_dtoa_r+0x794>
 800552a:	2300      	movs	r3, #0
 800552c:	e788      	b.n	8005440 <_dtoa_r+0x7f0>
 800552e:	9b02      	ldr	r3, [sp, #8]
 8005530:	e786      	b.n	8005440 <_dtoa_r+0x7f0>
 8005532:	2300      	movs	r3, #0
 8005534:	930a      	str	r3, [sp, #40]	@ 0x28
 8005536:	e788      	b.n	800544a <_dtoa_r+0x7fa>
 8005538:	d09f      	beq.n	800547a <_dtoa_r+0x82a>
 800553a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800553c:	331c      	adds	r3, #28
 800553e:	441a      	add	r2, r3
 8005540:	4498      	add	r8, r3
 8005542:	441e      	add	r6, r3
 8005544:	9209      	str	r2, [sp, #36]	@ 0x24
 8005546:	e798      	b.n	800547a <_dtoa_r+0x82a>
 8005548:	4603      	mov	r3, r0
 800554a:	e7f6      	b.n	800553a <_dtoa_r+0x8ea>
 800554c:	9b07      	ldr	r3, [sp, #28]
 800554e:	9704      	str	r7, [sp, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	dc20      	bgt.n	8005596 <_dtoa_r+0x946>
 8005554:	9308      	str	r3, [sp, #32]
 8005556:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005558:	2b02      	cmp	r3, #2
 800555a:	dd1e      	ble.n	800559a <_dtoa_r+0x94a>
 800555c:	9b08      	ldr	r3, [sp, #32]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f47f aebc 	bne.w	80052dc <_dtoa_r+0x68c>
 8005564:	4621      	mov	r1, r4
 8005566:	2205      	movs	r2, #5
 8005568:	4658      	mov	r0, fp
 800556a:	f000 fa99 	bl	8005aa0 <__multadd>
 800556e:	4601      	mov	r1, r0
 8005570:	4604      	mov	r4, r0
 8005572:	4648      	mov	r0, r9
 8005574:	f000 fcaa 	bl	8005ecc <__mcmp>
 8005578:	2800      	cmp	r0, #0
 800557a:	f77f aeaf 	ble.w	80052dc <_dtoa_r+0x68c>
 800557e:	2331      	movs	r3, #49	@ 0x31
 8005580:	4656      	mov	r6, sl
 8005582:	f806 3b01 	strb.w	r3, [r6], #1
 8005586:	9b04      	ldr	r3, [sp, #16]
 8005588:	3301      	adds	r3, #1
 800558a:	9304      	str	r3, [sp, #16]
 800558c:	e6aa      	b.n	80052e4 <_dtoa_r+0x694>
 800558e:	9c07      	ldr	r4, [sp, #28]
 8005590:	9704      	str	r7, [sp, #16]
 8005592:	4625      	mov	r5, r4
 8005594:	e7f3      	b.n	800557e <_dtoa_r+0x92e>
 8005596:	9b07      	ldr	r3, [sp, #28]
 8005598:	9308      	str	r3, [sp, #32]
 800559a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8104 	beq.w	80057aa <_dtoa_r+0xb5a>
 80055a2:	2e00      	cmp	r6, #0
 80055a4:	dd05      	ble.n	80055b2 <_dtoa_r+0x962>
 80055a6:	4629      	mov	r1, r5
 80055a8:	4632      	mov	r2, r6
 80055aa:	4658      	mov	r0, fp
 80055ac:	f000 fc22 	bl	8005df4 <__lshift>
 80055b0:	4605      	mov	r5, r0
 80055b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d05a      	beq.n	800566e <_dtoa_r+0xa1e>
 80055b8:	4658      	mov	r0, fp
 80055ba:	6869      	ldr	r1, [r5, #4]
 80055bc:	f000 fa0e 	bl	80059dc <_Balloc>
 80055c0:	4606      	mov	r6, r0
 80055c2:	b928      	cbnz	r0, 80055d0 <_dtoa_r+0x980>
 80055c4:	4602      	mov	r2, r0
 80055c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80055ca:	4b83      	ldr	r3, [pc, #524]	@ (80057d8 <_dtoa_r+0xb88>)
 80055cc:	f7ff bb54 	b.w	8004c78 <_dtoa_r+0x28>
 80055d0:	692a      	ldr	r2, [r5, #16]
 80055d2:	f105 010c 	add.w	r1, r5, #12
 80055d6:	3202      	adds	r2, #2
 80055d8:	0092      	lsls	r2, r2, #2
 80055da:	300c      	adds	r0, #12
 80055dc:	f7ff faa1 	bl	8004b22 <memcpy>
 80055e0:	2201      	movs	r2, #1
 80055e2:	4631      	mov	r1, r6
 80055e4:	4658      	mov	r0, fp
 80055e6:	f000 fc05 	bl	8005df4 <__lshift>
 80055ea:	462f      	mov	r7, r5
 80055ec:	4605      	mov	r5, r0
 80055ee:	f10a 0301 	add.w	r3, sl, #1
 80055f2:	9307      	str	r3, [sp, #28]
 80055f4:	9b08      	ldr	r3, [sp, #32]
 80055f6:	4453      	add	r3, sl
 80055f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055fa:	9b02      	ldr	r3, [sp, #8]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	930a      	str	r3, [sp, #40]	@ 0x28
 8005602:	9b07      	ldr	r3, [sp, #28]
 8005604:	4621      	mov	r1, r4
 8005606:	3b01      	subs	r3, #1
 8005608:	4648      	mov	r0, r9
 800560a:	9302      	str	r3, [sp, #8]
 800560c:	f7ff fa97 	bl	8004b3e <quorem>
 8005610:	4639      	mov	r1, r7
 8005612:	9008      	str	r0, [sp, #32]
 8005614:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005618:	4648      	mov	r0, r9
 800561a:	f000 fc57 	bl	8005ecc <__mcmp>
 800561e:	462a      	mov	r2, r5
 8005620:	9009      	str	r0, [sp, #36]	@ 0x24
 8005622:	4621      	mov	r1, r4
 8005624:	4658      	mov	r0, fp
 8005626:	f000 fc6d 	bl	8005f04 <__mdiff>
 800562a:	68c2      	ldr	r2, [r0, #12]
 800562c:	4606      	mov	r6, r0
 800562e:	bb02      	cbnz	r2, 8005672 <_dtoa_r+0xa22>
 8005630:	4601      	mov	r1, r0
 8005632:	4648      	mov	r0, r9
 8005634:	f000 fc4a 	bl	8005ecc <__mcmp>
 8005638:	4602      	mov	r2, r0
 800563a:	4631      	mov	r1, r6
 800563c:	4658      	mov	r0, fp
 800563e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005640:	f000 fa0c 	bl	8005a5c <_Bfree>
 8005644:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005646:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005648:	9e07      	ldr	r6, [sp, #28]
 800564a:	ea43 0102 	orr.w	r1, r3, r2
 800564e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005650:	4319      	orrs	r1, r3
 8005652:	d110      	bne.n	8005676 <_dtoa_r+0xa26>
 8005654:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005658:	d029      	beq.n	80056ae <_dtoa_r+0xa5e>
 800565a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800565c:	2b00      	cmp	r3, #0
 800565e:	dd02      	ble.n	8005666 <_dtoa_r+0xa16>
 8005660:	9b08      	ldr	r3, [sp, #32]
 8005662:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005666:	9b02      	ldr	r3, [sp, #8]
 8005668:	f883 8000 	strb.w	r8, [r3]
 800566c:	e63b      	b.n	80052e6 <_dtoa_r+0x696>
 800566e:	4628      	mov	r0, r5
 8005670:	e7bb      	b.n	80055ea <_dtoa_r+0x99a>
 8005672:	2201      	movs	r2, #1
 8005674:	e7e1      	b.n	800563a <_dtoa_r+0x9ea>
 8005676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005678:	2b00      	cmp	r3, #0
 800567a:	db04      	blt.n	8005686 <_dtoa_r+0xa36>
 800567c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800567e:	430b      	orrs	r3, r1
 8005680:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005682:	430b      	orrs	r3, r1
 8005684:	d120      	bne.n	80056c8 <_dtoa_r+0xa78>
 8005686:	2a00      	cmp	r2, #0
 8005688:	dded      	ble.n	8005666 <_dtoa_r+0xa16>
 800568a:	4649      	mov	r1, r9
 800568c:	2201      	movs	r2, #1
 800568e:	4658      	mov	r0, fp
 8005690:	f000 fbb0 	bl	8005df4 <__lshift>
 8005694:	4621      	mov	r1, r4
 8005696:	4681      	mov	r9, r0
 8005698:	f000 fc18 	bl	8005ecc <__mcmp>
 800569c:	2800      	cmp	r0, #0
 800569e:	dc03      	bgt.n	80056a8 <_dtoa_r+0xa58>
 80056a0:	d1e1      	bne.n	8005666 <_dtoa_r+0xa16>
 80056a2:	f018 0f01 	tst.w	r8, #1
 80056a6:	d0de      	beq.n	8005666 <_dtoa_r+0xa16>
 80056a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80056ac:	d1d8      	bne.n	8005660 <_dtoa_r+0xa10>
 80056ae:	2339      	movs	r3, #57	@ 0x39
 80056b0:	9a02      	ldr	r2, [sp, #8]
 80056b2:	7013      	strb	r3, [r2, #0]
 80056b4:	4633      	mov	r3, r6
 80056b6:	461e      	mov	r6, r3
 80056b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80056bc:	3b01      	subs	r3, #1
 80056be:	2a39      	cmp	r2, #57	@ 0x39
 80056c0:	d052      	beq.n	8005768 <_dtoa_r+0xb18>
 80056c2:	3201      	adds	r2, #1
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	e60e      	b.n	80052e6 <_dtoa_r+0x696>
 80056c8:	2a00      	cmp	r2, #0
 80056ca:	dd07      	ble.n	80056dc <_dtoa_r+0xa8c>
 80056cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80056d0:	d0ed      	beq.n	80056ae <_dtoa_r+0xa5e>
 80056d2:	9a02      	ldr	r2, [sp, #8]
 80056d4:	f108 0301 	add.w	r3, r8, #1
 80056d8:	7013      	strb	r3, [r2, #0]
 80056da:	e604      	b.n	80052e6 <_dtoa_r+0x696>
 80056dc:	9b07      	ldr	r3, [sp, #28]
 80056de:	9a07      	ldr	r2, [sp, #28]
 80056e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80056e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d028      	beq.n	800573c <_dtoa_r+0xaec>
 80056ea:	4649      	mov	r1, r9
 80056ec:	2300      	movs	r3, #0
 80056ee:	220a      	movs	r2, #10
 80056f0:	4658      	mov	r0, fp
 80056f2:	f000 f9d5 	bl	8005aa0 <__multadd>
 80056f6:	42af      	cmp	r7, r5
 80056f8:	4681      	mov	r9, r0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	f04f 020a 	mov.w	r2, #10
 8005702:	4639      	mov	r1, r7
 8005704:	4658      	mov	r0, fp
 8005706:	d107      	bne.n	8005718 <_dtoa_r+0xac8>
 8005708:	f000 f9ca 	bl	8005aa0 <__multadd>
 800570c:	4607      	mov	r7, r0
 800570e:	4605      	mov	r5, r0
 8005710:	9b07      	ldr	r3, [sp, #28]
 8005712:	3301      	adds	r3, #1
 8005714:	9307      	str	r3, [sp, #28]
 8005716:	e774      	b.n	8005602 <_dtoa_r+0x9b2>
 8005718:	f000 f9c2 	bl	8005aa0 <__multadd>
 800571c:	4629      	mov	r1, r5
 800571e:	4607      	mov	r7, r0
 8005720:	2300      	movs	r3, #0
 8005722:	220a      	movs	r2, #10
 8005724:	4658      	mov	r0, fp
 8005726:	f000 f9bb 	bl	8005aa0 <__multadd>
 800572a:	4605      	mov	r5, r0
 800572c:	e7f0      	b.n	8005710 <_dtoa_r+0xac0>
 800572e:	9b08      	ldr	r3, [sp, #32]
 8005730:	2700      	movs	r7, #0
 8005732:	2b00      	cmp	r3, #0
 8005734:	bfcc      	ite	gt
 8005736:	461e      	movgt	r6, r3
 8005738:	2601      	movle	r6, #1
 800573a:	4456      	add	r6, sl
 800573c:	4649      	mov	r1, r9
 800573e:	2201      	movs	r2, #1
 8005740:	4658      	mov	r0, fp
 8005742:	f000 fb57 	bl	8005df4 <__lshift>
 8005746:	4621      	mov	r1, r4
 8005748:	4681      	mov	r9, r0
 800574a:	f000 fbbf 	bl	8005ecc <__mcmp>
 800574e:	2800      	cmp	r0, #0
 8005750:	dcb0      	bgt.n	80056b4 <_dtoa_r+0xa64>
 8005752:	d102      	bne.n	800575a <_dtoa_r+0xb0a>
 8005754:	f018 0f01 	tst.w	r8, #1
 8005758:	d1ac      	bne.n	80056b4 <_dtoa_r+0xa64>
 800575a:	4633      	mov	r3, r6
 800575c:	461e      	mov	r6, r3
 800575e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005762:	2a30      	cmp	r2, #48	@ 0x30
 8005764:	d0fa      	beq.n	800575c <_dtoa_r+0xb0c>
 8005766:	e5be      	b.n	80052e6 <_dtoa_r+0x696>
 8005768:	459a      	cmp	sl, r3
 800576a:	d1a4      	bne.n	80056b6 <_dtoa_r+0xa66>
 800576c:	9b04      	ldr	r3, [sp, #16]
 800576e:	3301      	adds	r3, #1
 8005770:	9304      	str	r3, [sp, #16]
 8005772:	2331      	movs	r3, #49	@ 0x31
 8005774:	f88a 3000 	strb.w	r3, [sl]
 8005778:	e5b5      	b.n	80052e6 <_dtoa_r+0x696>
 800577a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800577c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80057dc <_dtoa_r+0xb8c>
 8005780:	b11b      	cbz	r3, 800578a <_dtoa_r+0xb3a>
 8005782:	f10a 0308 	add.w	r3, sl, #8
 8005786:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	4650      	mov	r0, sl
 800578c:	b017      	add	sp, #92	@ 0x5c
 800578e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005792:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005794:	2b01      	cmp	r3, #1
 8005796:	f77f ae3d 	ble.w	8005414 <_dtoa_r+0x7c4>
 800579a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800579c:	930a      	str	r3, [sp, #40]	@ 0x28
 800579e:	2001      	movs	r0, #1
 80057a0:	e65b      	b.n	800545a <_dtoa_r+0x80a>
 80057a2:	9b08      	ldr	r3, [sp, #32]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f77f aed6 	ble.w	8005556 <_dtoa_r+0x906>
 80057aa:	4656      	mov	r6, sl
 80057ac:	4621      	mov	r1, r4
 80057ae:	4648      	mov	r0, r9
 80057b0:	f7ff f9c5 	bl	8004b3e <quorem>
 80057b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80057b8:	9b08      	ldr	r3, [sp, #32]
 80057ba:	f806 8b01 	strb.w	r8, [r6], #1
 80057be:	eba6 020a 	sub.w	r2, r6, sl
 80057c2:	4293      	cmp	r3, r2
 80057c4:	ddb3      	ble.n	800572e <_dtoa_r+0xade>
 80057c6:	4649      	mov	r1, r9
 80057c8:	2300      	movs	r3, #0
 80057ca:	220a      	movs	r2, #10
 80057cc:	4658      	mov	r0, fp
 80057ce:	f000 f967 	bl	8005aa0 <__multadd>
 80057d2:	4681      	mov	r9, r0
 80057d4:	e7ea      	b.n	80057ac <_dtoa_r+0xb5c>
 80057d6:	bf00      	nop
 80057d8:	08006896 	.word	0x08006896
 80057dc:	0800681a 	.word	0x0800681a

080057e0 <_free_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4605      	mov	r5, r0
 80057e4:	2900      	cmp	r1, #0
 80057e6:	d040      	beq.n	800586a <_free_r+0x8a>
 80057e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ec:	1f0c      	subs	r4, r1, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bfb8      	it	lt
 80057f2:	18e4      	addlt	r4, r4, r3
 80057f4:	f000 f8e6 	bl	80059c4 <__malloc_lock>
 80057f8:	4a1c      	ldr	r2, [pc, #112]	@ (800586c <_free_r+0x8c>)
 80057fa:	6813      	ldr	r3, [r2, #0]
 80057fc:	b933      	cbnz	r3, 800580c <_free_r+0x2c>
 80057fe:	6063      	str	r3, [r4, #4]
 8005800:	6014      	str	r4, [r2, #0]
 8005802:	4628      	mov	r0, r5
 8005804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005808:	f000 b8e2 	b.w	80059d0 <__malloc_unlock>
 800580c:	42a3      	cmp	r3, r4
 800580e:	d908      	bls.n	8005822 <_free_r+0x42>
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	1821      	adds	r1, r4, r0
 8005814:	428b      	cmp	r3, r1
 8005816:	bf01      	itttt	eq
 8005818:	6819      	ldreq	r1, [r3, #0]
 800581a:	685b      	ldreq	r3, [r3, #4]
 800581c:	1809      	addeq	r1, r1, r0
 800581e:	6021      	streq	r1, [r4, #0]
 8005820:	e7ed      	b.n	80057fe <_free_r+0x1e>
 8005822:	461a      	mov	r2, r3
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	b10b      	cbz	r3, 800582c <_free_r+0x4c>
 8005828:	42a3      	cmp	r3, r4
 800582a:	d9fa      	bls.n	8005822 <_free_r+0x42>
 800582c:	6811      	ldr	r1, [r2, #0]
 800582e:	1850      	adds	r0, r2, r1
 8005830:	42a0      	cmp	r0, r4
 8005832:	d10b      	bne.n	800584c <_free_r+0x6c>
 8005834:	6820      	ldr	r0, [r4, #0]
 8005836:	4401      	add	r1, r0
 8005838:	1850      	adds	r0, r2, r1
 800583a:	4283      	cmp	r3, r0
 800583c:	6011      	str	r1, [r2, #0]
 800583e:	d1e0      	bne.n	8005802 <_free_r+0x22>
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4408      	add	r0, r1
 8005846:	6010      	str	r0, [r2, #0]
 8005848:	6053      	str	r3, [r2, #4]
 800584a:	e7da      	b.n	8005802 <_free_r+0x22>
 800584c:	d902      	bls.n	8005854 <_free_r+0x74>
 800584e:	230c      	movs	r3, #12
 8005850:	602b      	str	r3, [r5, #0]
 8005852:	e7d6      	b.n	8005802 <_free_r+0x22>
 8005854:	6820      	ldr	r0, [r4, #0]
 8005856:	1821      	adds	r1, r4, r0
 8005858:	428b      	cmp	r3, r1
 800585a:	bf01      	itttt	eq
 800585c:	6819      	ldreq	r1, [r3, #0]
 800585e:	685b      	ldreq	r3, [r3, #4]
 8005860:	1809      	addeq	r1, r1, r0
 8005862:	6021      	streq	r1, [r4, #0]
 8005864:	6063      	str	r3, [r4, #4]
 8005866:	6054      	str	r4, [r2, #4]
 8005868:	e7cb      	b.n	8005802 <_free_r+0x22>
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	20000888 	.word	0x20000888

08005870 <malloc>:
 8005870:	4b02      	ldr	r3, [pc, #8]	@ (800587c <malloc+0xc>)
 8005872:	4601      	mov	r1, r0
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	f000 b825 	b.w	80058c4 <_malloc_r>
 800587a:	bf00      	nop
 800587c:	20000018 	.word	0x20000018

08005880 <sbrk_aligned>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	4e0f      	ldr	r6, [pc, #60]	@ (80058c0 <sbrk_aligned+0x40>)
 8005884:	460c      	mov	r4, r1
 8005886:	6831      	ldr	r1, [r6, #0]
 8005888:	4605      	mov	r5, r0
 800588a:	b911      	cbnz	r1, 8005892 <sbrk_aligned+0x12>
 800588c:	f000 fe92 	bl	80065b4 <_sbrk_r>
 8005890:	6030      	str	r0, [r6, #0]
 8005892:	4621      	mov	r1, r4
 8005894:	4628      	mov	r0, r5
 8005896:	f000 fe8d 	bl	80065b4 <_sbrk_r>
 800589a:	1c43      	adds	r3, r0, #1
 800589c:	d103      	bne.n	80058a6 <sbrk_aligned+0x26>
 800589e:	f04f 34ff 	mov.w	r4, #4294967295
 80058a2:	4620      	mov	r0, r4
 80058a4:	bd70      	pop	{r4, r5, r6, pc}
 80058a6:	1cc4      	adds	r4, r0, #3
 80058a8:	f024 0403 	bic.w	r4, r4, #3
 80058ac:	42a0      	cmp	r0, r4
 80058ae:	d0f8      	beq.n	80058a2 <sbrk_aligned+0x22>
 80058b0:	1a21      	subs	r1, r4, r0
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 fe7e 	bl	80065b4 <_sbrk_r>
 80058b8:	3001      	adds	r0, #1
 80058ba:	d1f2      	bne.n	80058a2 <sbrk_aligned+0x22>
 80058bc:	e7ef      	b.n	800589e <sbrk_aligned+0x1e>
 80058be:	bf00      	nop
 80058c0:	20000884 	.word	0x20000884

080058c4 <_malloc_r>:
 80058c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c8:	1ccd      	adds	r5, r1, #3
 80058ca:	f025 0503 	bic.w	r5, r5, #3
 80058ce:	3508      	adds	r5, #8
 80058d0:	2d0c      	cmp	r5, #12
 80058d2:	bf38      	it	cc
 80058d4:	250c      	movcc	r5, #12
 80058d6:	2d00      	cmp	r5, #0
 80058d8:	4606      	mov	r6, r0
 80058da:	db01      	blt.n	80058e0 <_malloc_r+0x1c>
 80058dc:	42a9      	cmp	r1, r5
 80058de:	d904      	bls.n	80058ea <_malloc_r+0x26>
 80058e0:	230c      	movs	r3, #12
 80058e2:	6033      	str	r3, [r6, #0]
 80058e4:	2000      	movs	r0, #0
 80058e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059c0 <_malloc_r+0xfc>
 80058ee:	f000 f869 	bl	80059c4 <__malloc_lock>
 80058f2:	f8d8 3000 	ldr.w	r3, [r8]
 80058f6:	461c      	mov	r4, r3
 80058f8:	bb44      	cbnz	r4, 800594c <_malloc_r+0x88>
 80058fa:	4629      	mov	r1, r5
 80058fc:	4630      	mov	r0, r6
 80058fe:	f7ff ffbf 	bl	8005880 <sbrk_aligned>
 8005902:	1c43      	adds	r3, r0, #1
 8005904:	4604      	mov	r4, r0
 8005906:	d158      	bne.n	80059ba <_malloc_r+0xf6>
 8005908:	f8d8 4000 	ldr.w	r4, [r8]
 800590c:	4627      	mov	r7, r4
 800590e:	2f00      	cmp	r7, #0
 8005910:	d143      	bne.n	800599a <_malloc_r+0xd6>
 8005912:	2c00      	cmp	r4, #0
 8005914:	d04b      	beq.n	80059ae <_malloc_r+0xea>
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	4639      	mov	r1, r7
 800591a:	4630      	mov	r0, r6
 800591c:	eb04 0903 	add.w	r9, r4, r3
 8005920:	f000 fe48 	bl	80065b4 <_sbrk_r>
 8005924:	4581      	cmp	r9, r0
 8005926:	d142      	bne.n	80059ae <_malloc_r+0xea>
 8005928:	6821      	ldr	r1, [r4, #0]
 800592a:	4630      	mov	r0, r6
 800592c:	1a6d      	subs	r5, r5, r1
 800592e:	4629      	mov	r1, r5
 8005930:	f7ff ffa6 	bl	8005880 <sbrk_aligned>
 8005934:	3001      	adds	r0, #1
 8005936:	d03a      	beq.n	80059ae <_malloc_r+0xea>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	442b      	add	r3, r5
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	f8d8 3000 	ldr.w	r3, [r8]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	bb62      	cbnz	r2, 80059a0 <_malloc_r+0xdc>
 8005946:	f8c8 7000 	str.w	r7, [r8]
 800594a:	e00f      	b.n	800596c <_malloc_r+0xa8>
 800594c:	6822      	ldr	r2, [r4, #0]
 800594e:	1b52      	subs	r2, r2, r5
 8005950:	d420      	bmi.n	8005994 <_malloc_r+0xd0>
 8005952:	2a0b      	cmp	r2, #11
 8005954:	d917      	bls.n	8005986 <_malloc_r+0xc2>
 8005956:	1961      	adds	r1, r4, r5
 8005958:	42a3      	cmp	r3, r4
 800595a:	6025      	str	r5, [r4, #0]
 800595c:	bf18      	it	ne
 800595e:	6059      	strne	r1, [r3, #4]
 8005960:	6863      	ldr	r3, [r4, #4]
 8005962:	bf08      	it	eq
 8005964:	f8c8 1000 	streq.w	r1, [r8]
 8005968:	5162      	str	r2, [r4, r5]
 800596a:	604b      	str	r3, [r1, #4]
 800596c:	4630      	mov	r0, r6
 800596e:	f000 f82f 	bl	80059d0 <__malloc_unlock>
 8005972:	f104 000b 	add.w	r0, r4, #11
 8005976:	1d23      	adds	r3, r4, #4
 8005978:	f020 0007 	bic.w	r0, r0, #7
 800597c:	1ac2      	subs	r2, r0, r3
 800597e:	bf1c      	itt	ne
 8005980:	1a1b      	subne	r3, r3, r0
 8005982:	50a3      	strne	r3, [r4, r2]
 8005984:	e7af      	b.n	80058e6 <_malloc_r+0x22>
 8005986:	6862      	ldr	r2, [r4, #4]
 8005988:	42a3      	cmp	r3, r4
 800598a:	bf0c      	ite	eq
 800598c:	f8c8 2000 	streq.w	r2, [r8]
 8005990:	605a      	strne	r2, [r3, #4]
 8005992:	e7eb      	b.n	800596c <_malloc_r+0xa8>
 8005994:	4623      	mov	r3, r4
 8005996:	6864      	ldr	r4, [r4, #4]
 8005998:	e7ae      	b.n	80058f8 <_malloc_r+0x34>
 800599a:	463c      	mov	r4, r7
 800599c:	687f      	ldr	r7, [r7, #4]
 800599e:	e7b6      	b.n	800590e <_malloc_r+0x4a>
 80059a0:	461a      	mov	r2, r3
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	42a3      	cmp	r3, r4
 80059a6:	d1fb      	bne.n	80059a0 <_malloc_r+0xdc>
 80059a8:	2300      	movs	r3, #0
 80059aa:	6053      	str	r3, [r2, #4]
 80059ac:	e7de      	b.n	800596c <_malloc_r+0xa8>
 80059ae:	230c      	movs	r3, #12
 80059b0:	4630      	mov	r0, r6
 80059b2:	6033      	str	r3, [r6, #0]
 80059b4:	f000 f80c 	bl	80059d0 <__malloc_unlock>
 80059b8:	e794      	b.n	80058e4 <_malloc_r+0x20>
 80059ba:	6005      	str	r5, [r0, #0]
 80059bc:	e7d6      	b.n	800596c <_malloc_r+0xa8>
 80059be:	bf00      	nop
 80059c0:	20000888 	.word	0x20000888

080059c4 <__malloc_lock>:
 80059c4:	4801      	ldr	r0, [pc, #4]	@ (80059cc <__malloc_lock+0x8>)
 80059c6:	f7ff b89c 	b.w	8004b02 <__retarget_lock_acquire_recursive>
 80059ca:	bf00      	nop
 80059cc:	20000880 	.word	0x20000880

080059d0 <__malloc_unlock>:
 80059d0:	4801      	ldr	r0, [pc, #4]	@ (80059d8 <__malloc_unlock+0x8>)
 80059d2:	f7ff b897 	b.w	8004b04 <__retarget_lock_release_recursive>
 80059d6:	bf00      	nop
 80059d8:	20000880 	.word	0x20000880

080059dc <_Balloc>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	69c6      	ldr	r6, [r0, #28]
 80059e0:	4604      	mov	r4, r0
 80059e2:	460d      	mov	r5, r1
 80059e4:	b976      	cbnz	r6, 8005a04 <_Balloc+0x28>
 80059e6:	2010      	movs	r0, #16
 80059e8:	f7ff ff42 	bl	8005870 <malloc>
 80059ec:	4602      	mov	r2, r0
 80059ee:	61e0      	str	r0, [r4, #28]
 80059f0:	b920      	cbnz	r0, 80059fc <_Balloc+0x20>
 80059f2:	216b      	movs	r1, #107	@ 0x6b
 80059f4:	4b17      	ldr	r3, [pc, #92]	@ (8005a54 <_Balloc+0x78>)
 80059f6:	4818      	ldr	r0, [pc, #96]	@ (8005a58 <_Balloc+0x7c>)
 80059f8:	f000 fdec 	bl	80065d4 <__assert_func>
 80059fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a00:	6006      	str	r6, [r0, #0]
 8005a02:	60c6      	str	r6, [r0, #12]
 8005a04:	69e6      	ldr	r6, [r4, #28]
 8005a06:	68f3      	ldr	r3, [r6, #12]
 8005a08:	b183      	cbz	r3, 8005a2c <_Balloc+0x50>
 8005a0a:	69e3      	ldr	r3, [r4, #28]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a12:	b9b8      	cbnz	r0, 8005a44 <_Balloc+0x68>
 8005a14:	2101      	movs	r1, #1
 8005a16:	fa01 f605 	lsl.w	r6, r1, r5
 8005a1a:	1d72      	adds	r2, r6, #5
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	0092      	lsls	r2, r2, #2
 8005a20:	f000 fdf6 	bl	8006610 <_calloc_r>
 8005a24:	b160      	cbz	r0, 8005a40 <_Balloc+0x64>
 8005a26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a2a:	e00e      	b.n	8005a4a <_Balloc+0x6e>
 8005a2c:	2221      	movs	r2, #33	@ 0x21
 8005a2e:	2104      	movs	r1, #4
 8005a30:	4620      	mov	r0, r4
 8005a32:	f000 fded 	bl	8006610 <_calloc_r>
 8005a36:	69e3      	ldr	r3, [r4, #28]
 8005a38:	60f0      	str	r0, [r6, #12]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e4      	bne.n	8005a0a <_Balloc+0x2e>
 8005a40:	2000      	movs	r0, #0
 8005a42:	bd70      	pop	{r4, r5, r6, pc}
 8005a44:	6802      	ldr	r2, [r0, #0]
 8005a46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a50:	e7f7      	b.n	8005a42 <_Balloc+0x66>
 8005a52:	bf00      	nop
 8005a54:	08006827 	.word	0x08006827
 8005a58:	080068a7 	.word	0x080068a7

08005a5c <_Bfree>:
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	69c6      	ldr	r6, [r0, #28]
 8005a60:	4605      	mov	r5, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	b976      	cbnz	r6, 8005a84 <_Bfree+0x28>
 8005a66:	2010      	movs	r0, #16
 8005a68:	f7ff ff02 	bl	8005870 <malloc>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	61e8      	str	r0, [r5, #28]
 8005a70:	b920      	cbnz	r0, 8005a7c <_Bfree+0x20>
 8005a72:	218f      	movs	r1, #143	@ 0x8f
 8005a74:	4b08      	ldr	r3, [pc, #32]	@ (8005a98 <_Bfree+0x3c>)
 8005a76:	4809      	ldr	r0, [pc, #36]	@ (8005a9c <_Bfree+0x40>)
 8005a78:	f000 fdac 	bl	80065d4 <__assert_func>
 8005a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a80:	6006      	str	r6, [r0, #0]
 8005a82:	60c6      	str	r6, [r0, #12]
 8005a84:	b13c      	cbz	r4, 8005a96 <_Bfree+0x3a>
 8005a86:	69eb      	ldr	r3, [r5, #28]
 8005a88:	6862      	ldr	r2, [r4, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a90:	6021      	str	r1, [r4, #0]
 8005a92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a96:	bd70      	pop	{r4, r5, r6, pc}
 8005a98:	08006827 	.word	0x08006827
 8005a9c:	080068a7 	.word	0x080068a7

08005aa0 <__multadd>:
 8005aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	461e      	mov	r6, r3
 8005aaa:	2000      	movs	r0, #0
 8005aac:	690d      	ldr	r5, [r1, #16]
 8005aae:	f101 0c14 	add.w	ip, r1, #20
 8005ab2:	f8dc 3000 	ldr.w	r3, [ip]
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	b299      	uxth	r1, r3
 8005aba:	fb02 6101 	mla	r1, r2, r1, r6
 8005abe:	0c1e      	lsrs	r6, r3, #16
 8005ac0:	0c0b      	lsrs	r3, r1, #16
 8005ac2:	fb02 3306 	mla	r3, r2, r6, r3
 8005ac6:	b289      	uxth	r1, r1
 8005ac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005acc:	4285      	cmp	r5, r0
 8005ace:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ad2:	f84c 1b04 	str.w	r1, [ip], #4
 8005ad6:	dcec      	bgt.n	8005ab2 <__multadd+0x12>
 8005ad8:	b30e      	cbz	r6, 8005b1e <__multadd+0x7e>
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	42ab      	cmp	r3, r5
 8005ade:	dc19      	bgt.n	8005b14 <__multadd+0x74>
 8005ae0:	6861      	ldr	r1, [r4, #4]
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	3101      	adds	r1, #1
 8005ae6:	f7ff ff79 	bl	80059dc <_Balloc>
 8005aea:	4680      	mov	r8, r0
 8005aec:	b928      	cbnz	r0, 8005afa <__multadd+0x5a>
 8005aee:	4602      	mov	r2, r0
 8005af0:	21ba      	movs	r1, #186	@ 0xba
 8005af2:	4b0c      	ldr	r3, [pc, #48]	@ (8005b24 <__multadd+0x84>)
 8005af4:	480c      	ldr	r0, [pc, #48]	@ (8005b28 <__multadd+0x88>)
 8005af6:	f000 fd6d 	bl	80065d4 <__assert_func>
 8005afa:	6922      	ldr	r2, [r4, #16]
 8005afc:	f104 010c 	add.w	r1, r4, #12
 8005b00:	3202      	adds	r2, #2
 8005b02:	0092      	lsls	r2, r2, #2
 8005b04:	300c      	adds	r0, #12
 8005b06:	f7ff f80c 	bl	8004b22 <memcpy>
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	f7ff ffa5 	bl	8005a5c <_Bfree>
 8005b12:	4644      	mov	r4, r8
 8005b14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b18:	3501      	adds	r5, #1
 8005b1a:	615e      	str	r6, [r3, #20]
 8005b1c:	6125      	str	r5, [r4, #16]
 8005b1e:	4620      	mov	r0, r4
 8005b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b24:	08006896 	.word	0x08006896
 8005b28:	080068a7 	.word	0x080068a7

08005b2c <__hi0bits>:
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005b32:	bf3a      	itte	cc
 8005b34:	0403      	lslcc	r3, r0, #16
 8005b36:	2010      	movcc	r0, #16
 8005b38:	2000      	movcs	r0, #0
 8005b3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b3e:	bf3c      	itt	cc
 8005b40:	021b      	lslcc	r3, r3, #8
 8005b42:	3008      	addcc	r0, #8
 8005b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b48:	bf3c      	itt	cc
 8005b4a:	011b      	lslcc	r3, r3, #4
 8005b4c:	3004      	addcc	r0, #4
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b52:	bf3c      	itt	cc
 8005b54:	009b      	lslcc	r3, r3, #2
 8005b56:	3002      	addcc	r0, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	db05      	blt.n	8005b68 <__hi0bits+0x3c>
 8005b5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005b60:	f100 0001 	add.w	r0, r0, #1
 8005b64:	bf08      	it	eq
 8005b66:	2020      	moveq	r0, #32
 8005b68:	4770      	bx	lr

08005b6a <__lo0bits>:
 8005b6a:	6803      	ldr	r3, [r0, #0]
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	f013 0007 	ands.w	r0, r3, #7
 8005b72:	d00b      	beq.n	8005b8c <__lo0bits+0x22>
 8005b74:	07d9      	lsls	r1, r3, #31
 8005b76:	d421      	bmi.n	8005bbc <__lo0bits+0x52>
 8005b78:	0798      	lsls	r0, r3, #30
 8005b7a:	bf49      	itett	mi
 8005b7c:	085b      	lsrmi	r3, r3, #1
 8005b7e:	089b      	lsrpl	r3, r3, #2
 8005b80:	2001      	movmi	r0, #1
 8005b82:	6013      	strmi	r3, [r2, #0]
 8005b84:	bf5c      	itt	pl
 8005b86:	2002      	movpl	r0, #2
 8005b88:	6013      	strpl	r3, [r2, #0]
 8005b8a:	4770      	bx	lr
 8005b8c:	b299      	uxth	r1, r3
 8005b8e:	b909      	cbnz	r1, 8005b94 <__lo0bits+0x2a>
 8005b90:	2010      	movs	r0, #16
 8005b92:	0c1b      	lsrs	r3, r3, #16
 8005b94:	b2d9      	uxtb	r1, r3
 8005b96:	b909      	cbnz	r1, 8005b9c <__lo0bits+0x32>
 8005b98:	3008      	adds	r0, #8
 8005b9a:	0a1b      	lsrs	r3, r3, #8
 8005b9c:	0719      	lsls	r1, r3, #28
 8005b9e:	bf04      	itt	eq
 8005ba0:	091b      	lsreq	r3, r3, #4
 8005ba2:	3004      	addeq	r0, #4
 8005ba4:	0799      	lsls	r1, r3, #30
 8005ba6:	bf04      	itt	eq
 8005ba8:	089b      	lsreq	r3, r3, #2
 8005baa:	3002      	addeq	r0, #2
 8005bac:	07d9      	lsls	r1, r3, #31
 8005bae:	d403      	bmi.n	8005bb8 <__lo0bits+0x4e>
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	f100 0001 	add.w	r0, r0, #1
 8005bb6:	d003      	beq.n	8005bc0 <__lo0bits+0x56>
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	4770      	bx	lr
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	4770      	bx	lr
 8005bc0:	2020      	movs	r0, #32
 8005bc2:	4770      	bx	lr

08005bc4 <__i2b>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	2101      	movs	r1, #1
 8005bca:	f7ff ff07 	bl	80059dc <_Balloc>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	b928      	cbnz	r0, 8005bde <__i2b+0x1a>
 8005bd2:	f240 1145 	movw	r1, #325	@ 0x145
 8005bd6:	4b04      	ldr	r3, [pc, #16]	@ (8005be8 <__i2b+0x24>)
 8005bd8:	4804      	ldr	r0, [pc, #16]	@ (8005bec <__i2b+0x28>)
 8005bda:	f000 fcfb 	bl	80065d4 <__assert_func>
 8005bde:	2301      	movs	r3, #1
 8005be0:	6144      	str	r4, [r0, #20]
 8005be2:	6103      	str	r3, [r0, #16]
 8005be4:	bd10      	pop	{r4, pc}
 8005be6:	bf00      	nop
 8005be8:	08006896 	.word	0x08006896
 8005bec:	080068a7 	.word	0x080068a7

08005bf0 <__multiply>:
 8005bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	4614      	mov	r4, r2
 8005bf6:	690a      	ldr	r2, [r1, #16]
 8005bf8:	6923      	ldr	r3, [r4, #16]
 8005bfa:	460f      	mov	r7, r1
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	bfa2      	ittt	ge
 8005c00:	4623      	movge	r3, r4
 8005c02:	460c      	movge	r4, r1
 8005c04:	461f      	movge	r7, r3
 8005c06:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005c0a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005c0e:	68a3      	ldr	r3, [r4, #8]
 8005c10:	6861      	ldr	r1, [r4, #4]
 8005c12:	eb0a 0609 	add.w	r6, sl, r9
 8005c16:	42b3      	cmp	r3, r6
 8005c18:	b085      	sub	sp, #20
 8005c1a:	bfb8      	it	lt
 8005c1c:	3101      	addlt	r1, #1
 8005c1e:	f7ff fedd 	bl	80059dc <_Balloc>
 8005c22:	b930      	cbnz	r0, 8005c32 <__multiply+0x42>
 8005c24:	4602      	mov	r2, r0
 8005c26:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005c2a:	4b43      	ldr	r3, [pc, #268]	@ (8005d38 <__multiply+0x148>)
 8005c2c:	4843      	ldr	r0, [pc, #268]	@ (8005d3c <__multiply+0x14c>)
 8005c2e:	f000 fcd1 	bl	80065d4 <__assert_func>
 8005c32:	f100 0514 	add.w	r5, r0, #20
 8005c36:	462b      	mov	r3, r5
 8005c38:	2200      	movs	r2, #0
 8005c3a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c3e:	4543      	cmp	r3, r8
 8005c40:	d321      	bcc.n	8005c86 <__multiply+0x96>
 8005c42:	f107 0114 	add.w	r1, r7, #20
 8005c46:	f104 0214 	add.w	r2, r4, #20
 8005c4a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005c4e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005c52:	9302      	str	r3, [sp, #8]
 8005c54:	1b13      	subs	r3, r2, r4
 8005c56:	3b15      	subs	r3, #21
 8005c58:	f023 0303 	bic.w	r3, r3, #3
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	f104 0715 	add.w	r7, r4, #21
 8005c62:	42ba      	cmp	r2, r7
 8005c64:	bf38      	it	cc
 8005c66:	2304      	movcc	r3, #4
 8005c68:	9301      	str	r3, [sp, #4]
 8005c6a:	9b02      	ldr	r3, [sp, #8]
 8005c6c:	9103      	str	r1, [sp, #12]
 8005c6e:	428b      	cmp	r3, r1
 8005c70:	d80c      	bhi.n	8005c8c <__multiply+0x9c>
 8005c72:	2e00      	cmp	r6, #0
 8005c74:	dd03      	ble.n	8005c7e <__multiply+0x8e>
 8005c76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d05a      	beq.n	8005d34 <__multiply+0x144>
 8005c7e:	6106      	str	r6, [r0, #16]
 8005c80:	b005      	add	sp, #20
 8005c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c86:	f843 2b04 	str.w	r2, [r3], #4
 8005c8a:	e7d8      	b.n	8005c3e <__multiply+0x4e>
 8005c8c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005c90:	f1ba 0f00 	cmp.w	sl, #0
 8005c94:	d023      	beq.n	8005cde <__multiply+0xee>
 8005c96:	46a9      	mov	r9, r5
 8005c98:	f04f 0c00 	mov.w	ip, #0
 8005c9c:	f104 0e14 	add.w	lr, r4, #20
 8005ca0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ca4:	f8d9 3000 	ldr.w	r3, [r9]
 8005ca8:	fa1f fb87 	uxth.w	fp, r7
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	fb0a 330b 	mla	r3, sl, fp, r3
 8005cb2:	4463      	add	r3, ip
 8005cb4:	f8d9 c000 	ldr.w	ip, [r9]
 8005cb8:	0c3f      	lsrs	r7, r7, #16
 8005cba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005cbe:	fb0a c707 	mla	r7, sl, r7, ip
 8005cc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ccc:	4572      	cmp	r2, lr
 8005cce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005cd2:	f849 3b04 	str.w	r3, [r9], #4
 8005cd6:	d8e3      	bhi.n	8005ca0 <__multiply+0xb0>
 8005cd8:	9b01      	ldr	r3, [sp, #4]
 8005cda:	f845 c003 	str.w	ip, [r5, r3]
 8005cde:	9b03      	ldr	r3, [sp, #12]
 8005ce0:	3104      	adds	r1, #4
 8005ce2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005ce6:	f1b9 0f00 	cmp.w	r9, #0
 8005cea:	d021      	beq.n	8005d30 <__multiply+0x140>
 8005cec:	46ae      	mov	lr, r5
 8005cee:	f04f 0a00 	mov.w	sl, #0
 8005cf2:	682b      	ldr	r3, [r5, #0]
 8005cf4:	f104 0c14 	add.w	ip, r4, #20
 8005cf8:	f8bc b000 	ldrh.w	fp, [ip]
 8005cfc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	fb09 770b 	mla	r7, r9, fp, r7
 8005d06:	4457      	add	r7, sl
 8005d08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d0c:	f84e 3b04 	str.w	r3, [lr], #4
 8005d10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d18:	f8be 3000 	ldrh.w	r3, [lr]
 8005d1c:	4562      	cmp	r2, ip
 8005d1e:	fb09 330a 	mla	r3, r9, sl, r3
 8005d22:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005d26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d2a:	d8e5      	bhi.n	8005cf8 <__multiply+0x108>
 8005d2c:	9f01      	ldr	r7, [sp, #4]
 8005d2e:	51eb      	str	r3, [r5, r7]
 8005d30:	3504      	adds	r5, #4
 8005d32:	e79a      	b.n	8005c6a <__multiply+0x7a>
 8005d34:	3e01      	subs	r6, #1
 8005d36:	e79c      	b.n	8005c72 <__multiply+0x82>
 8005d38:	08006896 	.word	0x08006896
 8005d3c:	080068a7 	.word	0x080068a7

08005d40 <__pow5mult>:
 8005d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d44:	4615      	mov	r5, r2
 8005d46:	f012 0203 	ands.w	r2, r2, #3
 8005d4a:	4607      	mov	r7, r0
 8005d4c:	460e      	mov	r6, r1
 8005d4e:	d007      	beq.n	8005d60 <__pow5mult+0x20>
 8005d50:	4c25      	ldr	r4, [pc, #148]	@ (8005de8 <__pow5mult+0xa8>)
 8005d52:	3a01      	subs	r2, #1
 8005d54:	2300      	movs	r3, #0
 8005d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d5a:	f7ff fea1 	bl	8005aa0 <__multadd>
 8005d5e:	4606      	mov	r6, r0
 8005d60:	10ad      	asrs	r5, r5, #2
 8005d62:	d03d      	beq.n	8005de0 <__pow5mult+0xa0>
 8005d64:	69fc      	ldr	r4, [r7, #28]
 8005d66:	b97c      	cbnz	r4, 8005d88 <__pow5mult+0x48>
 8005d68:	2010      	movs	r0, #16
 8005d6a:	f7ff fd81 	bl	8005870 <malloc>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	61f8      	str	r0, [r7, #28]
 8005d72:	b928      	cbnz	r0, 8005d80 <__pow5mult+0x40>
 8005d74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005d78:	4b1c      	ldr	r3, [pc, #112]	@ (8005dec <__pow5mult+0xac>)
 8005d7a:	481d      	ldr	r0, [pc, #116]	@ (8005df0 <__pow5mult+0xb0>)
 8005d7c:	f000 fc2a 	bl	80065d4 <__assert_func>
 8005d80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d84:	6004      	str	r4, [r0, #0]
 8005d86:	60c4      	str	r4, [r0, #12]
 8005d88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d90:	b94c      	cbnz	r4, 8005da6 <__pow5mult+0x66>
 8005d92:	f240 2171 	movw	r1, #625	@ 0x271
 8005d96:	4638      	mov	r0, r7
 8005d98:	f7ff ff14 	bl	8005bc4 <__i2b>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4604      	mov	r4, r0
 8005da0:	f8c8 0008 	str.w	r0, [r8, #8]
 8005da4:	6003      	str	r3, [r0, #0]
 8005da6:	f04f 0900 	mov.w	r9, #0
 8005daa:	07eb      	lsls	r3, r5, #31
 8005dac:	d50a      	bpl.n	8005dc4 <__pow5mult+0x84>
 8005dae:	4631      	mov	r1, r6
 8005db0:	4622      	mov	r2, r4
 8005db2:	4638      	mov	r0, r7
 8005db4:	f7ff ff1c 	bl	8005bf0 <__multiply>
 8005db8:	4680      	mov	r8, r0
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	f7ff fe4d 	bl	8005a5c <_Bfree>
 8005dc2:	4646      	mov	r6, r8
 8005dc4:	106d      	asrs	r5, r5, #1
 8005dc6:	d00b      	beq.n	8005de0 <__pow5mult+0xa0>
 8005dc8:	6820      	ldr	r0, [r4, #0]
 8005dca:	b938      	cbnz	r0, 8005ddc <__pow5mult+0x9c>
 8005dcc:	4622      	mov	r2, r4
 8005dce:	4621      	mov	r1, r4
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f7ff ff0d 	bl	8005bf0 <__multiply>
 8005dd6:	6020      	str	r0, [r4, #0]
 8005dd8:	f8c0 9000 	str.w	r9, [r0]
 8005ddc:	4604      	mov	r4, r0
 8005dde:	e7e4      	b.n	8005daa <__pow5mult+0x6a>
 8005de0:	4630      	mov	r0, r6
 8005de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de6:	bf00      	nop
 8005de8:	08006900 	.word	0x08006900
 8005dec:	08006827 	.word	0x08006827
 8005df0:	080068a7 	.word	0x080068a7

08005df4 <__lshift>:
 8005df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df8:	460c      	mov	r4, r1
 8005dfa:	4607      	mov	r7, r0
 8005dfc:	4691      	mov	r9, r2
 8005dfe:	6923      	ldr	r3, [r4, #16]
 8005e00:	6849      	ldr	r1, [r1, #4]
 8005e02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e06:	68a3      	ldr	r3, [r4, #8]
 8005e08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e0c:	f108 0601 	add.w	r6, r8, #1
 8005e10:	42b3      	cmp	r3, r6
 8005e12:	db0b      	blt.n	8005e2c <__lshift+0x38>
 8005e14:	4638      	mov	r0, r7
 8005e16:	f7ff fde1 	bl	80059dc <_Balloc>
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	b948      	cbnz	r0, 8005e32 <__lshift+0x3e>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005e24:	4b27      	ldr	r3, [pc, #156]	@ (8005ec4 <__lshift+0xd0>)
 8005e26:	4828      	ldr	r0, [pc, #160]	@ (8005ec8 <__lshift+0xd4>)
 8005e28:	f000 fbd4 	bl	80065d4 <__assert_func>
 8005e2c:	3101      	adds	r1, #1
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	e7ee      	b.n	8005e10 <__lshift+0x1c>
 8005e32:	2300      	movs	r3, #0
 8005e34:	f100 0114 	add.w	r1, r0, #20
 8005e38:	f100 0210 	add.w	r2, r0, #16
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	4553      	cmp	r3, sl
 8005e40:	db33      	blt.n	8005eaa <__lshift+0xb6>
 8005e42:	6920      	ldr	r0, [r4, #16]
 8005e44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e48:	f104 0314 	add.w	r3, r4, #20
 8005e4c:	f019 091f 	ands.w	r9, r9, #31
 8005e50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e58:	d02b      	beq.n	8005eb2 <__lshift+0xbe>
 8005e5a:	468a      	mov	sl, r1
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f1c9 0e20 	rsb	lr, r9, #32
 8005e62:	6818      	ldr	r0, [r3, #0]
 8005e64:	fa00 f009 	lsl.w	r0, r0, r9
 8005e68:	4310      	orrs	r0, r2
 8005e6a:	f84a 0b04 	str.w	r0, [sl], #4
 8005e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e72:	459c      	cmp	ip, r3
 8005e74:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e78:	d8f3      	bhi.n	8005e62 <__lshift+0x6e>
 8005e7a:	ebac 0304 	sub.w	r3, ip, r4
 8005e7e:	3b15      	subs	r3, #21
 8005e80:	f023 0303 	bic.w	r3, r3, #3
 8005e84:	3304      	adds	r3, #4
 8005e86:	f104 0015 	add.w	r0, r4, #21
 8005e8a:	4584      	cmp	ip, r0
 8005e8c:	bf38      	it	cc
 8005e8e:	2304      	movcc	r3, #4
 8005e90:	50ca      	str	r2, [r1, r3]
 8005e92:	b10a      	cbz	r2, 8005e98 <__lshift+0xa4>
 8005e94:	f108 0602 	add.w	r6, r8, #2
 8005e98:	3e01      	subs	r6, #1
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	612e      	str	r6, [r5, #16]
 8005ea0:	f7ff fddc 	bl	8005a5c <_Bfree>
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8005eae:	3301      	adds	r3, #1
 8005eb0:	e7c5      	b.n	8005e3e <__lshift+0x4a>
 8005eb2:	3904      	subs	r1, #4
 8005eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eb8:	459c      	cmp	ip, r3
 8005eba:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ebe:	d8f9      	bhi.n	8005eb4 <__lshift+0xc0>
 8005ec0:	e7ea      	b.n	8005e98 <__lshift+0xa4>
 8005ec2:	bf00      	nop
 8005ec4:	08006896 	.word	0x08006896
 8005ec8:	080068a7 	.word	0x080068a7

08005ecc <__mcmp>:
 8005ecc:	4603      	mov	r3, r0
 8005ece:	690a      	ldr	r2, [r1, #16]
 8005ed0:	6900      	ldr	r0, [r0, #16]
 8005ed2:	b530      	push	{r4, r5, lr}
 8005ed4:	1a80      	subs	r0, r0, r2
 8005ed6:	d10e      	bne.n	8005ef6 <__mcmp+0x2a>
 8005ed8:	3314      	adds	r3, #20
 8005eda:	3114      	adds	r1, #20
 8005edc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ee0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ee4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ee8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005eec:	4295      	cmp	r5, r2
 8005eee:	d003      	beq.n	8005ef8 <__mcmp+0x2c>
 8005ef0:	d205      	bcs.n	8005efe <__mcmp+0x32>
 8005ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef6:	bd30      	pop	{r4, r5, pc}
 8005ef8:	42a3      	cmp	r3, r4
 8005efa:	d3f3      	bcc.n	8005ee4 <__mcmp+0x18>
 8005efc:	e7fb      	b.n	8005ef6 <__mcmp+0x2a>
 8005efe:	2001      	movs	r0, #1
 8005f00:	e7f9      	b.n	8005ef6 <__mcmp+0x2a>
	...

08005f04 <__mdiff>:
 8005f04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f08:	4689      	mov	r9, r1
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4648      	mov	r0, r9
 8005f10:	4614      	mov	r4, r2
 8005f12:	f7ff ffdb 	bl	8005ecc <__mcmp>
 8005f16:	1e05      	subs	r5, r0, #0
 8005f18:	d112      	bne.n	8005f40 <__mdiff+0x3c>
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f7ff fd5d 	bl	80059dc <_Balloc>
 8005f22:	4602      	mov	r2, r0
 8005f24:	b928      	cbnz	r0, 8005f32 <__mdiff+0x2e>
 8005f26:	f240 2137 	movw	r1, #567	@ 0x237
 8005f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8006024 <__mdiff+0x120>)
 8005f2c:	483e      	ldr	r0, [pc, #248]	@ (8006028 <__mdiff+0x124>)
 8005f2e:	f000 fb51 	bl	80065d4 <__assert_func>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f38:	4610      	mov	r0, r2
 8005f3a:	b003      	add	sp, #12
 8005f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f40:	bfbc      	itt	lt
 8005f42:	464b      	movlt	r3, r9
 8005f44:	46a1      	movlt	r9, r4
 8005f46:	4630      	mov	r0, r6
 8005f48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005f4c:	bfba      	itte	lt
 8005f4e:	461c      	movlt	r4, r3
 8005f50:	2501      	movlt	r5, #1
 8005f52:	2500      	movge	r5, #0
 8005f54:	f7ff fd42 	bl	80059dc <_Balloc>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	b918      	cbnz	r0, 8005f64 <__mdiff+0x60>
 8005f5c:	f240 2145 	movw	r1, #581	@ 0x245
 8005f60:	4b30      	ldr	r3, [pc, #192]	@ (8006024 <__mdiff+0x120>)
 8005f62:	e7e3      	b.n	8005f2c <__mdiff+0x28>
 8005f64:	f100 0b14 	add.w	fp, r0, #20
 8005f68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005f6c:	f109 0310 	add.w	r3, r9, #16
 8005f70:	60c5      	str	r5, [r0, #12]
 8005f72:	f04f 0c00 	mov.w	ip, #0
 8005f76:	f109 0514 	add.w	r5, r9, #20
 8005f7a:	46d9      	mov	r9, fp
 8005f7c:	6926      	ldr	r6, [r4, #16]
 8005f7e:	f104 0e14 	add.w	lr, r4, #20
 8005f82:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005f86:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	9b01      	ldr	r3, [sp, #4]
 8005f8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005f92:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005f96:	b281      	uxth	r1, r0
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	fa1f f38a 	uxth.w	r3, sl
 8005f9e:	1a5b      	subs	r3, r3, r1
 8005fa0:	0c00      	lsrs	r0, r0, #16
 8005fa2:	4463      	add	r3, ip
 8005fa4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005fa8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005fb2:	4576      	cmp	r6, lr
 8005fb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005fb8:	f849 3b04 	str.w	r3, [r9], #4
 8005fbc:	d8e6      	bhi.n	8005f8c <__mdiff+0x88>
 8005fbe:	1b33      	subs	r3, r6, r4
 8005fc0:	3b15      	subs	r3, #21
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	3415      	adds	r4, #21
 8005fc8:	3304      	adds	r3, #4
 8005fca:	42a6      	cmp	r6, r4
 8005fcc:	bf38      	it	cc
 8005fce:	2304      	movcc	r3, #4
 8005fd0:	441d      	add	r5, r3
 8005fd2:	445b      	add	r3, fp
 8005fd4:	461e      	mov	r6, r3
 8005fd6:	462c      	mov	r4, r5
 8005fd8:	4544      	cmp	r4, r8
 8005fda:	d30e      	bcc.n	8005ffa <__mdiff+0xf6>
 8005fdc:	f108 0103 	add.w	r1, r8, #3
 8005fe0:	1b49      	subs	r1, r1, r5
 8005fe2:	f021 0103 	bic.w	r1, r1, #3
 8005fe6:	3d03      	subs	r5, #3
 8005fe8:	45a8      	cmp	r8, r5
 8005fea:	bf38      	it	cc
 8005fec:	2100      	movcc	r1, #0
 8005fee:	440b      	add	r3, r1
 8005ff0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ff4:	b199      	cbz	r1, 800601e <__mdiff+0x11a>
 8005ff6:	6117      	str	r7, [r2, #16]
 8005ff8:	e79e      	b.n	8005f38 <__mdiff+0x34>
 8005ffa:	46e6      	mov	lr, ip
 8005ffc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006000:	fa1f fc81 	uxth.w	ip, r1
 8006004:	44f4      	add	ip, lr
 8006006:	0c08      	lsrs	r0, r1, #16
 8006008:	4471      	add	r1, lr
 800600a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800600e:	b289      	uxth	r1, r1
 8006010:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006014:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006018:	f846 1b04 	str.w	r1, [r6], #4
 800601c:	e7dc      	b.n	8005fd8 <__mdiff+0xd4>
 800601e:	3f01      	subs	r7, #1
 8006020:	e7e6      	b.n	8005ff0 <__mdiff+0xec>
 8006022:	bf00      	nop
 8006024:	08006896 	.word	0x08006896
 8006028:	080068a7 	.word	0x080068a7

0800602c <__d2b>:
 800602c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006030:	2101      	movs	r1, #1
 8006032:	4690      	mov	r8, r2
 8006034:	4699      	mov	r9, r3
 8006036:	9e08      	ldr	r6, [sp, #32]
 8006038:	f7ff fcd0 	bl	80059dc <_Balloc>
 800603c:	4604      	mov	r4, r0
 800603e:	b930      	cbnz	r0, 800604e <__d2b+0x22>
 8006040:	4602      	mov	r2, r0
 8006042:	f240 310f 	movw	r1, #783	@ 0x30f
 8006046:	4b23      	ldr	r3, [pc, #140]	@ (80060d4 <__d2b+0xa8>)
 8006048:	4823      	ldr	r0, [pc, #140]	@ (80060d8 <__d2b+0xac>)
 800604a:	f000 fac3 	bl	80065d4 <__assert_func>
 800604e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006052:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006056:	b10d      	cbz	r5, 800605c <__d2b+0x30>
 8006058:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800605c:	9301      	str	r3, [sp, #4]
 800605e:	f1b8 0300 	subs.w	r3, r8, #0
 8006062:	d024      	beq.n	80060ae <__d2b+0x82>
 8006064:	4668      	mov	r0, sp
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	f7ff fd7f 	bl	8005b6a <__lo0bits>
 800606c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006070:	b1d8      	cbz	r0, 80060aa <__d2b+0x7e>
 8006072:	f1c0 0320 	rsb	r3, r0, #32
 8006076:	fa02 f303 	lsl.w	r3, r2, r3
 800607a:	430b      	orrs	r3, r1
 800607c:	40c2      	lsrs	r2, r0
 800607e:	6163      	str	r3, [r4, #20]
 8006080:	9201      	str	r2, [sp, #4]
 8006082:	9b01      	ldr	r3, [sp, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	bf0c      	ite	eq
 8006088:	2201      	moveq	r2, #1
 800608a:	2202      	movne	r2, #2
 800608c:	61a3      	str	r3, [r4, #24]
 800608e:	6122      	str	r2, [r4, #16]
 8006090:	b1ad      	cbz	r5, 80060be <__d2b+0x92>
 8006092:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006096:	4405      	add	r5, r0
 8006098:	6035      	str	r5, [r6, #0]
 800609a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800609e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a0:	6018      	str	r0, [r3, #0]
 80060a2:	4620      	mov	r0, r4
 80060a4:	b002      	add	sp, #8
 80060a6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80060aa:	6161      	str	r1, [r4, #20]
 80060ac:	e7e9      	b.n	8006082 <__d2b+0x56>
 80060ae:	a801      	add	r0, sp, #4
 80060b0:	f7ff fd5b 	bl	8005b6a <__lo0bits>
 80060b4:	9b01      	ldr	r3, [sp, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	6163      	str	r3, [r4, #20]
 80060ba:	3020      	adds	r0, #32
 80060bc:	e7e7      	b.n	800608e <__d2b+0x62>
 80060be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80060c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80060c6:	6030      	str	r0, [r6, #0]
 80060c8:	6918      	ldr	r0, [r3, #16]
 80060ca:	f7ff fd2f 	bl	8005b2c <__hi0bits>
 80060ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80060d2:	e7e4      	b.n	800609e <__d2b+0x72>
 80060d4:	08006896 	.word	0x08006896
 80060d8:	080068a7 	.word	0x080068a7

080060dc <__sfputc_r>:
 80060dc:	6893      	ldr	r3, [r2, #8]
 80060de:	b410      	push	{r4}
 80060e0:	3b01      	subs	r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	6093      	str	r3, [r2, #8]
 80060e6:	da07      	bge.n	80060f8 <__sfputc_r+0x1c>
 80060e8:	6994      	ldr	r4, [r2, #24]
 80060ea:	42a3      	cmp	r3, r4
 80060ec:	db01      	blt.n	80060f2 <__sfputc_r+0x16>
 80060ee:	290a      	cmp	r1, #10
 80060f0:	d102      	bne.n	80060f8 <__sfputc_r+0x1c>
 80060f2:	bc10      	pop	{r4}
 80060f4:	f7fe bbf3 	b.w	80048de <__swbuf_r>
 80060f8:	6813      	ldr	r3, [r2, #0]
 80060fa:	1c58      	adds	r0, r3, #1
 80060fc:	6010      	str	r0, [r2, #0]
 80060fe:	7019      	strb	r1, [r3, #0]
 8006100:	4608      	mov	r0, r1
 8006102:	bc10      	pop	{r4}
 8006104:	4770      	bx	lr

08006106 <__sfputs_r>:
 8006106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006108:	4606      	mov	r6, r0
 800610a:	460f      	mov	r7, r1
 800610c:	4614      	mov	r4, r2
 800610e:	18d5      	adds	r5, r2, r3
 8006110:	42ac      	cmp	r4, r5
 8006112:	d101      	bne.n	8006118 <__sfputs_r+0x12>
 8006114:	2000      	movs	r0, #0
 8006116:	e007      	b.n	8006128 <__sfputs_r+0x22>
 8006118:	463a      	mov	r2, r7
 800611a:	4630      	mov	r0, r6
 800611c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006120:	f7ff ffdc 	bl	80060dc <__sfputc_r>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d1f3      	bne.n	8006110 <__sfputs_r+0xa>
 8006128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800612c <_vfiprintf_r>:
 800612c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006130:	460d      	mov	r5, r1
 8006132:	4614      	mov	r4, r2
 8006134:	4698      	mov	r8, r3
 8006136:	4606      	mov	r6, r0
 8006138:	b09d      	sub	sp, #116	@ 0x74
 800613a:	b118      	cbz	r0, 8006144 <_vfiprintf_r+0x18>
 800613c:	6a03      	ldr	r3, [r0, #32]
 800613e:	b90b      	cbnz	r3, 8006144 <_vfiprintf_r+0x18>
 8006140:	f7fe fae4 	bl	800470c <__sinit>
 8006144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006146:	07d9      	lsls	r1, r3, #31
 8006148:	d405      	bmi.n	8006156 <_vfiprintf_r+0x2a>
 800614a:	89ab      	ldrh	r3, [r5, #12]
 800614c:	059a      	lsls	r2, r3, #22
 800614e:	d402      	bmi.n	8006156 <_vfiprintf_r+0x2a>
 8006150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006152:	f7fe fcd6 	bl	8004b02 <__retarget_lock_acquire_recursive>
 8006156:	89ab      	ldrh	r3, [r5, #12]
 8006158:	071b      	lsls	r3, r3, #28
 800615a:	d501      	bpl.n	8006160 <_vfiprintf_r+0x34>
 800615c:	692b      	ldr	r3, [r5, #16]
 800615e:	b99b      	cbnz	r3, 8006188 <_vfiprintf_r+0x5c>
 8006160:	4629      	mov	r1, r5
 8006162:	4630      	mov	r0, r6
 8006164:	f7fe fbfa 	bl	800495c <__swsetup_r>
 8006168:	b170      	cbz	r0, 8006188 <_vfiprintf_r+0x5c>
 800616a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800616c:	07dc      	lsls	r4, r3, #31
 800616e:	d504      	bpl.n	800617a <_vfiprintf_r+0x4e>
 8006170:	f04f 30ff 	mov.w	r0, #4294967295
 8006174:	b01d      	add	sp, #116	@ 0x74
 8006176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617a:	89ab      	ldrh	r3, [r5, #12]
 800617c:	0598      	lsls	r0, r3, #22
 800617e:	d4f7      	bmi.n	8006170 <_vfiprintf_r+0x44>
 8006180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006182:	f7fe fcbf 	bl	8004b04 <__retarget_lock_release_recursive>
 8006186:	e7f3      	b.n	8006170 <_vfiprintf_r+0x44>
 8006188:	2300      	movs	r3, #0
 800618a:	9309      	str	r3, [sp, #36]	@ 0x24
 800618c:	2320      	movs	r3, #32
 800618e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006192:	2330      	movs	r3, #48	@ 0x30
 8006194:	f04f 0901 	mov.w	r9, #1
 8006198:	f8cd 800c 	str.w	r8, [sp, #12]
 800619c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006348 <_vfiprintf_r+0x21c>
 80061a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061a4:	4623      	mov	r3, r4
 80061a6:	469a      	mov	sl, r3
 80061a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061ac:	b10a      	cbz	r2, 80061b2 <_vfiprintf_r+0x86>
 80061ae:	2a25      	cmp	r2, #37	@ 0x25
 80061b0:	d1f9      	bne.n	80061a6 <_vfiprintf_r+0x7a>
 80061b2:	ebba 0b04 	subs.w	fp, sl, r4
 80061b6:	d00b      	beq.n	80061d0 <_vfiprintf_r+0xa4>
 80061b8:	465b      	mov	r3, fp
 80061ba:	4622      	mov	r2, r4
 80061bc:	4629      	mov	r1, r5
 80061be:	4630      	mov	r0, r6
 80061c0:	f7ff ffa1 	bl	8006106 <__sfputs_r>
 80061c4:	3001      	adds	r0, #1
 80061c6:	f000 80a7 	beq.w	8006318 <_vfiprintf_r+0x1ec>
 80061ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061cc:	445a      	add	r2, fp
 80061ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80061d0:	f89a 3000 	ldrb.w	r3, [sl]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 809f 	beq.w	8006318 <_vfiprintf_r+0x1ec>
 80061da:	2300      	movs	r3, #0
 80061dc:	f04f 32ff 	mov.w	r2, #4294967295
 80061e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061e4:	f10a 0a01 	add.w	sl, sl, #1
 80061e8:	9304      	str	r3, [sp, #16]
 80061ea:	9307      	str	r3, [sp, #28]
 80061ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80061f2:	4654      	mov	r4, sl
 80061f4:	2205      	movs	r2, #5
 80061f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061fa:	4853      	ldr	r0, [pc, #332]	@ (8006348 <_vfiprintf_r+0x21c>)
 80061fc:	f7fe fc83 	bl	8004b06 <memchr>
 8006200:	9a04      	ldr	r2, [sp, #16]
 8006202:	b9d8      	cbnz	r0, 800623c <_vfiprintf_r+0x110>
 8006204:	06d1      	lsls	r1, r2, #27
 8006206:	bf44      	itt	mi
 8006208:	2320      	movmi	r3, #32
 800620a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800620e:	0713      	lsls	r3, r2, #28
 8006210:	bf44      	itt	mi
 8006212:	232b      	movmi	r3, #43	@ 0x2b
 8006214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006218:	f89a 3000 	ldrb.w	r3, [sl]
 800621c:	2b2a      	cmp	r3, #42	@ 0x2a
 800621e:	d015      	beq.n	800624c <_vfiprintf_r+0x120>
 8006220:	4654      	mov	r4, sl
 8006222:	2000      	movs	r0, #0
 8006224:	f04f 0c0a 	mov.w	ip, #10
 8006228:	9a07      	ldr	r2, [sp, #28]
 800622a:	4621      	mov	r1, r4
 800622c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006230:	3b30      	subs	r3, #48	@ 0x30
 8006232:	2b09      	cmp	r3, #9
 8006234:	d94b      	bls.n	80062ce <_vfiprintf_r+0x1a2>
 8006236:	b1b0      	cbz	r0, 8006266 <_vfiprintf_r+0x13a>
 8006238:	9207      	str	r2, [sp, #28]
 800623a:	e014      	b.n	8006266 <_vfiprintf_r+0x13a>
 800623c:	eba0 0308 	sub.w	r3, r0, r8
 8006240:	fa09 f303 	lsl.w	r3, r9, r3
 8006244:	4313      	orrs	r3, r2
 8006246:	46a2      	mov	sl, r4
 8006248:	9304      	str	r3, [sp, #16]
 800624a:	e7d2      	b.n	80061f2 <_vfiprintf_r+0xc6>
 800624c:	9b03      	ldr	r3, [sp, #12]
 800624e:	1d19      	adds	r1, r3, #4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	9103      	str	r1, [sp, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	bfbb      	ittet	lt
 8006258:	425b      	neglt	r3, r3
 800625a:	f042 0202 	orrlt.w	r2, r2, #2
 800625e:	9307      	strge	r3, [sp, #28]
 8006260:	9307      	strlt	r3, [sp, #28]
 8006262:	bfb8      	it	lt
 8006264:	9204      	strlt	r2, [sp, #16]
 8006266:	7823      	ldrb	r3, [r4, #0]
 8006268:	2b2e      	cmp	r3, #46	@ 0x2e
 800626a:	d10a      	bne.n	8006282 <_vfiprintf_r+0x156>
 800626c:	7863      	ldrb	r3, [r4, #1]
 800626e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006270:	d132      	bne.n	80062d8 <_vfiprintf_r+0x1ac>
 8006272:	9b03      	ldr	r3, [sp, #12]
 8006274:	3402      	adds	r4, #2
 8006276:	1d1a      	adds	r2, r3, #4
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	9203      	str	r2, [sp, #12]
 800627c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006280:	9305      	str	r3, [sp, #20]
 8006282:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800634c <_vfiprintf_r+0x220>
 8006286:	2203      	movs	r2, #3
 8006288:	4650      	mov	r0, sl
 800628a:	7821      	ldrb	r1, [r4, #0]
 800628c:	f7fe fc3b 	bl	8004b06 <memchr>
 8006290:	b138      	cbz	r0, 80062a2 <_vfiprintf_r+0x176>
 8006292:	2240      	movs	r2, #64	@ 0x40
 8006294:	9b04      	ldr	r3, [sp, #16]
 8006296:	eba0 000a 	sub.w	r0, r0, sl
 800629a:	4082      	lsls	r2, r0
 800629c:	4313      	orrs	r3, r2
 800629e:	3401      	adds	r4, #1
 80062a0:	9304      	str	r3, [sp, #16]
 80062a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a6:	2206      	movs	r2, #6
 80062a8:	4829      	ldr	r0, [pc, #164]	@ (8006350 <_vfiprintf_r+0x224>)
 80062aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062ae:	f7fe fc2a 	bl	8004b06 <memchr>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d03f      	beq.n	8006336 <_vfiprintf_r+0x20a>
 80062b6:	4b27      	ldr	r3, [pc, #156]	@ (8006354 <_vfiprintf_r+0x228>)
 80062b8:	bb1b      	cbnz	r3, 8006302 <_vfiprintf_r+0x1d6>
 80062ba:	9b03      	ldr	r3, [sp, #12]
 80062bc:	3307      	adds	r3, #7
 80062be:	f023 0307 	bic.w	r3, r3, #7
 80062c2:	3308      	adds	r3, #8
 80062c4:	9303      	str	r3, [sp, #12]
 80062c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c8:	443b      	add	r3, r7
 80062ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80062cc:	e76a      	b.n	80061a4 <_vfiprintf_r+0x78>
 80062ce:	460c      	mov	r4, r1
 80062d0:	2001      	movs	r0, #1
 80062d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80062d6:	e7a8      	b.n	800622a <_vfiprintf_r+0xfe>
 80062d8:	2300      	movs	r3, #0
 80062da:	f04f 0c0a 	mov.w	ip, #10
 80062de:	4619      	mov	r1, r3
 80062e0:	3401      	adds	r4, #1
 80062e2:	9305      	str	r3, [sp, #20]
 80062e4:	4620      	mov	r0, r4
 80062e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ea:	3a30      	subs	r2, #48	@ 0x30
 80062ec:	2a09      	cmp	r2, #9
 80062ee:	d903      	bls.n	80062f8 <_vfiprintf_r+0x1cc>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0c6      	beq.n	8006282 <_vfiprintf_r+0x156>
 80062f4:	9105      	str	r1, [sp, #20]
 80062f6:	e7c4      	b.n	8006282 <_vfiprintf_r+0x156>
 80062f8:	4604      	mov	r4, r0
 80062fa:	2301      	movs	r3, #1
 80062fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006300:	e7f0      	b.n	80062e4 <_vfiprintf_r+0x1b8>
 8006302:	ab03      	add	r3, sp, #12
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	462a      	mov	r2, r5
 8006308:	4630      	mov	r0, r6
 800630a:	4b13      	ldr	r3, [pc, #76]	@ (8006358 <_vfiprintf_r+0x22c>)
 800630c:	a904      	add	r1, sp, #16
 800630e:	f7fd fdb3 	bl	8003e78 <_printf_float>
 8006312:	4607      	mov	r7, r0
 8006314:	1c78      	adds	r0, r7, #1
 8006316:	d1d6      	bne.n	80062c6 <_vfiprintf_r+0x19a>
 8006318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800631a:	07d9      	lsls	r1, r3, #31
 800631c:	d405      	bmi.n	800632a <_vfiprintf_r+0x1fe>
 800631e:	89ab      	ldrh	r3, [r5, #12]
 8006320:	059a      	lsls	r2, r3, #22
 8006322:	d402      	bmi.n	800632a <_vfiprintf_r+0x1fe>
 8006324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006326:	f7fe fbed 	bl	8004b04 <__retarget_lock_release_recursive>
 800632a:	89ab      	ldrh	r3, [r5, #12]
 800632c:	065b      	lsls	r3, r3, #25
 800632e:	f53f af1f 	bmi.w	8006170 <_vfiprintf_r+0x44>
 8006332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006334:	e71e      	b.n	8006174 <_vfiprintf_r+0x48>
 8006336:	ab03      	add	r3, sp, #12
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	462a      	mov	r2, r5
 800633c:	4630      	mov	r0, r6
 800633e:	4b06      	ldr	r3, [pc, #24]	@ (8006358 <_vfiprintf_r+0x22c>)
 8006340:	a904      	add	r1, sp, #16
 8006342:	f7fe f837 	bl	80043b4 <_printf_i>
 8006346:	e7e4      	b.n	8006312 <_vfiprintf_r+0x1e6>
 8006348:	08006a00 	.word	0x08006a00
 800634c:	08006a06 	.word	0x08006a06
 8006350:	08006a0a 	.word	0x08006a0a
 8006354:	08003e79 	.word	0x08003e79
 8006358:	08006107 	.word	0x08006107

0800635c <__sflush_r>:
 800635c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	0716      	lsls	r6, r2, #28
 8006364:	4605      	mov	r5, r0
 8006366:	460c      	mov	r4, r1
 8006368:	d454      	bmi.n	8006414 <__sflush_r+0xb8>
 800636a:	684b      	ldr	r3, [r1, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	dc02      	bgt.n	8006376 <__sflush_r+0x1a>
 8006370:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	dd48      	ble.n	8006408 <__sflush_r+0xac>
 8006376:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006378:	2e00      	cmp	r6, #0
 800637a:	d045      	beq.n	8006408 <__sflush_r+0xac>
 800637c:	2300      	movs	r3, #0
 800637e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006382:	682f      	ldr	r7, [r5, #0]
 8006384:	6a21      	ldr	r1, [r4, #32]
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	d030      	beq.n	80063ec <__sflush_r+0x90>
 800638a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	0759      	lsls	r1, r3, #29
 8006390:	d505      	bpl.n	800639e <__sflush_r+0x42>
 8006392:	6863      	ldr	r3, [r4, #4]
 8006394:	1ad2      	subs	r2, r2, r3
 8006396:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006398:	b10b      	cbz	r3, 800639e <__sflush_r+0x42>
 800639a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800639c:	1ad2      	subs	r2, r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	4628      	mov	r0, r5
 80063a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063a4:	6a21      	ldr	r1, [r4, #32]
 80063a6:	47b0      	blx	r6
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	d106      	bne.n	80063bc <__sflush_r+0x60>
 80063ae:	6829      	ldr	r1, [r5, #0]
 80063b0:	291d      	cmp	r1, #29
 80063b2:	d82b      	bhi.n	800640c <__sflush_r+0xb0>
 80063b4:	4a28      	ldr	r2, [pc, #160]	@ (8006458 <__sflush_r+0xfc>)
 80063b6:	410a      	asrs	r2, r1
 80063b8:	07d6      	lsls	r6, r2, #31
 80063ba:	d427      	bmi.n	800640c <__sflush_r+0xb0>
 80063bc:	2200      	movs	r2, #0
 80063be:	6062      	str	r2, [r4, #4]
 80063c0:	6922      	ldr	r2, [r4, #16]
 80063c2:	04d9      	lsls	r1, r3, #19
 80063c4:	6022      	str	r2, [r4, #0]
 80063c6:	d504      	bpl.n	80063d2 <__sflush_r+0x76>
 80063c8:	1c42      	adds	r2, r0, #1
 80063ca:	d101      	bne.n	80063d0 <__sflush_r+0x74>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	b903      	cbnz	r3, 80063d2 <__sflush_r+0x76>
 80063d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80063d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063d4:	602f      	str	r7, [r5, #0]
 80063d6:	b1b9      	cbz	r1, 8006408 <__sflush_r+0xac>
 80063d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063dc:	4299      	cmp	r1, r3
 80063de:	d002      	beq.n	80063e6 <__sflush_r+0x8a>
 80063e0:	4628      	mov	r0, r5
 80063e2:	f7ff f9fd 	bl	80057e0 <_free_r>
 80063e6:	2300      	movs	r3, #0
 80063e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80063ea:	e00d      	b.n	8006408 <__sflush_r+0xac>
 80063ec:	2301      	movs	r3, #1
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b0      	blx	r6
 80063f2:	4602      	mov	r2, r0
 80063f4:	1c50      	adds	r0, r2, #1
 80063f6:	d1c9      	bne.n	800638c <__sflush_r+0x30>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0c6      	beq.n	800638c <__sflush_r+0x30>
 80063fe:	2b1d      	cmp	r3, #29
 8006400:	d001      	beq.n	8006406 <__sflush_r+0xaa>
 8006402:	2b16      	cmp	r3, #22
 8006404:	d11d      	bne.n	8006442 <__sflush_r+0xe6>
 8006406:	602f      	str	r7, [r5, #0]
 8006408:	2000      	movs	r0, #0
 800640a:	e021      	b.n	8006450 <__sflush_r+0xf4>
 800640c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006410:	b21b      	sxth	r3, r3
 8006412:	e01a      	b.n	800644a <__sflush_r+0xee>
 8006414:	690f      	ldr	r7, [r1, #16]
 8006416:	2f00      	cmp	r7, #0
 8006418:	d0f6      	beq.n	8006408 <__sflush_r+0xac>
 800641a:	0793      	lsls	r3, r2, #30
 800641c:	bf18      	it	ne
 800641e:	2300      	movne	r3, #0
 8006420:	680e      	ldr	r6, [r1, #0]
 8006422:	bf08      	it	eq
 8006424:	694b      	ldreq	r3, [r1, #20]
 8006426:	1bf6      	subs	r6, r6, r7
 8006428:	600f      	str	r7, [r1, #0]
 800642a:	608b      	str	r3, [r1, #8]
 800642c:	2e00      	cmp	r6, #0
 800642e:	ddeb      	ble.n	8006408 <__sflush_r+0xac>
 8006430:	4633      	mov	r3, r6
 8006432:	463a      	mov	r2, r7
 8006434:	4628      	mov	r0, r5
 8006436:	6a21      	ldr	r1, [r4, #32]
 8006438:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800643c:	47e0      	blx	ip
 800643e:	2800      	cmp	r0, #0
 8006440:	dc07      	bgt.n	8006452 <__sflush_r+0xf6>
 8006442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800644a:	f04f 30ff 	mov.w	r0, #4294967295
 800644e:	81a3      	strh	r3, [r4, #12]
 8006450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006452:	4407      	add	r7, r0
 8006454:	1a36      	subs	r6, r6, r0
 8006456:	e7e9      	b.n	800642c <__sflush_r+0xd0>
 8006458:	dfbffffe 	.word	0xdfbffffe

0800645c <_fflush_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	690b      	ldr	r3, [r1, #16]
 8006460:	4605      	mov	r5, r0
 8006462:	460c      	mov	r4, r1
 8006464:	b913      	cbnz	r3, 800646c <_fflush_r+0x10>
 8006466:	2500      	movs	r5, #0
 8006468:	4628      	mov	r0, r5
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	b118      	cbz	r0, 8006476 <_fflush_r+0x1a>
 800646e:	6a03      	ldr	r3, [r0, #32]
 8006470:	b90b      	cbnz	r3, 8006476 <_fflush_r+0x1a>
 8006472:	f7fe f94b 	bl	800470c <__sinit>
 8006476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f3      	beq.n	8006466 <_fflush_r+0xa>
 800647e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006480:	07d0      	lsls	r0, r2, #31
 8006482:	d404      	bmi.n	800648e <_fflush_r+0x32>
 8006484:	0599      	lsls	r1, r3, #22
 8006486:	d402      	bmi.n	800648e <_fflush_r+0x32>
 8006488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800648a:	f7fe fb3a 	bl	8004b02 <__retarget_lock_acquire_recursive>
 800648e:	4628      	mov	r0, r5
 8006490:	4621      	mov	r1, r4
 8006492:	f7ff ff63 	bl	800635c <__sflush_r>
 8006496:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006498:	4605      	mov	r5, r0
 800649a:	07da      	lsls	r2, r3, #31
 800649c:	d4e4      	bmi.n	8006468 <_fflush_r+0xc>
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	059b      	lsls	r3, r3, #22
 80064a2:	d4e1      	bmi.n	8006468 <_fflush_r+0xc>
 80064a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064a6:	f7fe fb2d 	bl	8004b04 <__retarget_lock_release_recursive>
 80064aa:	e7dd      	b.n	8006468 <_fflush_r+0xc>

080064ac <__swhatbuf_r>:
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	460c      	mov	r4, r1
 80064b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b4:	4615      	mov	r5, r2
 80064b6:	2900      	cmp	r1, #0
 80064b8:	461e      	mov	r6, r3
 80064ba:	b096      	sub	sp, #88	@ 0x58
 80064bc:	da0c      	bge.n	80064d8 <__swhatbuf_r+0x2c>
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	2100      	movs	r1, #0
 80064c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80064c6:	bf14      	ite	ne
 80064c8:	2340      	movne	r3, #64	@ 0x40
 80064ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80064ce:	2000      	movs	r0, #0
 80064d0:	6031      	str	r1, [r6, #0]
 80064d2:	602b      	str	r3, [r5, #0]
 80064d4:	b016      	add	sp, #88	@ 0x58
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	466a      	mov	r2, sp
 80064da:	f000 f849 	bl	8006570 <_fstat_r>
 80064de:	2800      	cmp	r0, #0
 80064e0:	dbed      	blt.n	80064be <__swhatbuf_r+0x12>
 80064e2:	9901      	ldr	r1, [sp, #4]
 80064e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064ec:	4259      	negs	r1, r3
 80064ee:	4159      	adcs	r1, r3
 80064f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064f4:	e7eb      	b.n	80064ce <__swhatbuf_r+0x22>

080064f6 <__smakebuf_r>:
 80064f6:	898b      	ldrh	r3, [r1, #12]
 80064f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064fa:	079d      	lsls	r5, r3, #30
 80064fc:	4606      	mov	r6, r0
 80064fe:	460c      	mov	r4, r1
 8006500:	d507      	bpl.n	8006512 <__smakebuf_r+0x1c>
 8006502:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006506:	6023      	str	r3, [r4, #0]
 8006508:	6123      	str	r3, [r4, #16]
 800650a:	2301      	movs	r3, #1
 800650c:	6163      	str	r3, [r4, #20]
 800650e:	b003      	add	sp, #12
 8006510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006512:	466a      	mov	r2, sp
 8006514:	ab01      	add	r3, sp, #4
 8006516:	f7ff ffc9 	bl	80064ac <__swhatbuf_r>
 800651a:	9f00      	ldr	r7, [sp, #0]
 800651c:	4605      	mov	r5, r0
 800651e:	4639      	mov	r1, r7
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff f9cf 	bl	80058c4 <_malloc_r>
 8006526:	b948      	cbnz	r0, 800653c <__smakebuf_r+0x46>
 8006528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800652c:	059a      	lsls	r2, r3, #22
 800652e:	d4ee      	bmi.n	800650e <__smakebuf_r+0x18>
 8006530:	f023 0303 	bic.w	r3, r3, #3
 8006534:	f043 0302 	orr.w	r3, r3, #2
 8006538:	81a3      	strh	r3, [r4, #12]
 800653a:	e7e2      	b.n	8006502 <__smakebuf_r+0xc>
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006546:	81a3      	strh	r3, [r4, #12]
 8006548:	9b01      	ldr	r3, [sp, #4]
 800654a:	6020      	str	r0, [r4, #0]
 800654c:	b15b      	cbz	r3, 8006566 <__smakebuf_r+0x70>
 800654e:	4630      	mov	r0, r6
 8006550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006554:	f000 f81e 	bl	8006594 <_isatty_r>
 8006558:	b128      	cbz	r0, 8006566 <__smakebuf_r+0x70>
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	f023 0303 	bic.w	r3, r3, #3
 8006560:	f043 0301 	orr.w	r3, r3, #1
 8006564:	81a3      	strh	r3, [r4, #12]
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	431d      	orrs	r5, r3
 800656a:	81a5      	strh	r5, [r4, #12]
 800656c:	e7cf      	b.n	800650e <__smakebuf_r+0x18>
	...

08006570 <_fstat_r>:
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	2300      	movs	r3, #0
 8006574:	4d06      	ldr	r5, [pc, #24]	@ (8006590 <_fstat_r+0x20>)
 8006576:	4604      	mov	r4, r0
 8006578:	4608      	mov	r0, r1
 800657a:	4611      	mov	r1, r2
 800657c:	602b      	str	r3, [r5, #0]
 800657e:	f7fb f853 	bl	8001628 <_fstat>
 8006582:	1c43      	adds	r3, r0, #1
 8006584:	d102      	bne.n	800658c <_fstat_r+0x1c>
 8006586:	682b      	ldr	r3, [r5, #0]
 8006588:	b103      	cbz	r3, 800658c <_fstat_r+0x1c>
 800658a:	6023      	str	r3, [r4, #0]
 800658c:	bd38      	pop	{r3, r4, r5, pc}
 800658e:	bf00      	nop
 8006590:	2000087c 	.word	0x2000087c

08006594 <_isatty_r>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	2300      	movs	r3, #0
 8006598:	4d05      	ldr	r5, [pc, #20]	@ (80065b0 <_isatty_r+0x1c>)
 800659a:	4604      	mov	r4, r0
 800659c:	4608      	mov	r0, r1
 800659e:	602b      	str	r3, [r5, #0]
 80065a0:	f7fb f851 	bl	8001646 <_isatty>
 80065a4:	1c43      	adds	r3, r0, #1
 80065a6:	d102      	bne.n	80065ae <_isatty_r+0x1a>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	b103      	cbz	r3, 80065ae <_isatty_r+0x1a>
 80065ac:	6023      	str	r3, [r4, #0]
 80065ae:	bd38      	pop	{r3, r4, r5, pc}
 80065b0:	2000087c 	.word	0x2000087c

080065b4 <_sbrk_r>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	2300      	movs	r3, #0
 80065b8:	4d05      	ldr	r5, [pc, #20]	@ (80065d0 <_sbrk_r+0x1c>)
 80065ba:	4604      	mov	r4, r0
 80065bc:	4608      	mov	r0, r1
 80065be:	602b      	str	r3, [r5, #0]
 80065c0:	f7fb f858 	bl	8001674 <_sbrk>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d102      	bne.n	80065ce <_sbrk_r+0x1a>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	b103      	cbz	r3, 80065ce <_sbrk_r+0x1a>
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	2000087c 	.word	0x2000087c

080065d4 <__assert_func>:
 80065d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065d6:	4614      	mov	r4, r2
 80065d8:	461a      	mov	r2, r3
 80065da:	4b09      	ldr	r3, [pc, #36]	@ (8006600 <__assert_func+0x2c>)
 80065dc:	4605      	mov	r5, r0
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68d8      	ldr	r0, [r3, #12]
 80065e2:	b954      	cbnz	r4, 80065fa <__assert_func+0x26>
 80065e4:	4b07      	ldr	r3, [pc, #28]	@ (8006604 <__assert_func+0x30>)
 80065e6:	461c      	mov	r4, r3
 80065e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065ec:	9100      	str	r1, [sp, #0]
 80065ee:	462b      	mov	r3, r5
 80065f0:	4905      	ldr	r1, [pc, #20]	@ (8006608 <__assert_func+0x34>)
 80065f2:	f000 f841 	bl	8006678 <fiprintf>
 80065f6:	f000 f851 	bl	800669c <abort>
 80065fa:	4b04      	ldr	r3, [pc, #16]	@ (800660c <__assert_func+0x38>)
 80065fc:	e7f4      	b.n	80065e8 <__assert_func+0x14>
 80065fe:	bf00      	nop
 8006600:	20000018 	.word	0x20000018
 8006604:	08006a56 	.word	0x08006a56
 8006608:	08006a28 	.word	0x08006a28
 800660c:	08006a1b 	.word	0x08006a1b

08006610 <_calloc_r>:
 8006610:	b570      	push	{r4, r5, r6, lr}
 8006612:	fba1 5402 	umull	r5, r4, r1, r2
 8006616:	b93c      	cbnz	r4, 8006628 <_calloc_r+0x18>
 8006618:	4629      	mov	r1, r5
 800661a:	f7ff f953 	bl	80058c4 <_malloc_r>
 800661e:	4606      	mov	r6, r0
 8006620:	b928      	cbnz	r0, 800662e <_calloc_r+0x1e>
 8006622:	2600      	movs	r6, #0
 8006624:	4630      	mov	r0, r6
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	220c      	movs	r2, #12
 800662a:	6002      	str	r2, [r0, #0]
 800662c:	e7f9      	b.n	8006622 <_calloc_r+0x12>
 800662e:	462a      	mov	r2, r5
 8006630:	4621      	mov	r1, r4
 8006632:	f7fe f9e9 	bl	8004a08 <memset>
 8006636:	e7f5      	b.n	8006624 <_calloc_r+0x14>

08006638 <__ascii_mbtowc>:
 8006638:	b082      	sub	sp, #8
 800663a:	b901      	cbnz	r1, 800663e <__ascii_mbtowc+0x6>
 800663c:	a901      	add	r1, sp, #4
 800663e:	b142      	cbz	r2, 8006652 <__ascii_mbtowc+0x1a>
 8006640:	b14b      	cbz	r3, 8006656 <__ascii_mbtowc+0x1e>
 8006642:	7813      	ldrb	r3, [r2, #0]
 8006644:	600b      	str	r3, [r1, #0]
 8006646:	7812      	ldrb	r2, [r2, #0]
 8006648:	1e10      	subs	r0, r2, #0
 800664a:	bf18      	it	ne
 800664c:	2001      	movne	r0, #1
 800664e:	b002      	add	sp, #8
 8006650:	4770      	bx	lr
 8006652:	4610      	mov	r0, r2
 8006654:	e7fb      	b.n	800664e <__ascii_mbtowc+0x16>
 8006656:	f06f 0001 	mvn.w	r0, #1
 800665a:	e7f8      	b.n	800664e <__ascii_mbtowc+0x16>

0800665c <__ascii_wctomb>:
 800665c:	4603      	mov	r3, r0
 800665e:	4608      	mov	r0, r1
 8006660:	b141      	cbz	r1, 8006674 <__ascii_wctomb+0x18>
 8006662:	2aff      	cmp	r2, #255	@ 0xff
 8006664:	d904      	bls.n	8006670 <__ascii_wctomb+0x14>
 8006666:	228a      	movs	r2, #138	@ 0x8a
 8006668:	f04f 30ff 	mov.w	r0, #4294967295
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	4770      	bx	lr
 8006670:	2001      	movs	r0, #1
 8006672:	700a      	strb	r2, [r1, #0]
 8006674:	4770      	bx	lr
	...

08006678 <fiprintf>:
 8006678:	b40e      	push	{r1, r2, r3}
 800667a:	b503      	push	{r0, r1, lr}
 800667c:	4601      	mov	r1, r0
 800667e:	ab03      	add	r3, sp, #12
 8006680:	4805      	ldr	r0, [pc, #20]	@ (8006698 <fiprintf+0x20>)
 8006682:	f853 2b04 	ldr.w	r2, [r3], #4
 8006686:	6800      	ldr	r0, [r0, #0]
 8006688:	9301      	str	r3, [sp, #4]
 800668a:	f7ff fd4f 	bl	800612c <_vfiprintf_r>
 800668e:	b002      	add	sp, #8
 8006690:	f85d eb04 	ldr.w	lr, [sp], #4
 8006694:	b003      	add	sp, #12
 8006696:	4770      	bx	lr
 8006698:	20000018 	.word	0x20000018

0800669c <abort>:
 800669c:	2006      	movs	r0, #6
 800669e:	b508      	push	{r3, lr}
 80066a0:	f000 f82c 	bl	80066fc <raise>
 80066a4:	2001      	movs	r0, #1
 80066a6:	f7fa ff70 	bl	800158a <_exit>

080066aa <_raise_r>:
 80066aa:	291f      	cmp	r1, #31
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4605      	mov	r5, r0
 80066b0:	460c      	mov	r4, r1
 80066b2:	d904      	bls.n	80066be <_raise_r+0x14>
 80066b4:	2316      	movs	r3, #22
 80066b6:	6003      	str	r3, [r0, #0]
 80066b8:	f04f 30ff 	mov.w	r0, #4294967295
 80066bc:	bd38      	pop	{r3, r4, r5, pc}
 80066be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80066c0:	b112      	cbz	r2, 80066c8 <_raise_r+0x1e>
 80066c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066c6:	b94b      	cbnz	r3, 80066dc <_raise_r+0x32>
 80066c8:	4628      	mov	r0, r5
 80066ca:	f000 f831 	bl	8006730 <_getpid_r>
 80066ce:	4622      	mov	r2, r4
 80066d0:	4601      	mov	r1, r0
 80066d2:	4628      	mov	r0, r5
 80066d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066d8:	f000 b818 	b.w	800670c <_kill_r>
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d00a      	beq.n	80066f6 <_raise_r+0x4c>
 80066e0:	1c59      	adds	r1, r3, #1
 80066e2:	d103      	bne.n	80066ec <_raise_r+0x42>
 80066e4:	2316      	movs	r3, #22
 80066e6:	6003      	str	r3, [r0, #0]
 80066e8:	2001      	movs	r0, #1
 80066ea:	e7e7      	b.n	80066bc <_raise_r+0x12>
 80066ec:	2100      	movs	r1, #0
 80066ee:	4620      	mov	r0, r4
 80066f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80066f4:	4798      	blx	r3
 80066f6:	2000      	movs	r0, #0
 80066f8:	e7e0      	b.n	80066bc <_raise_r+0x12>
	...

080066fc <raise>:
 80066fc:	4b02      	ldr	r3, [pc, #8]	@ (8006708 <raise+0xc>)
 80066fe:	4601      	mov	r1, r0
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	f7ff bfd2 	b.w	80066aa <_raise_r>
 8006706:	bf00      	nop
 8006708:	20000018 	.word	0x20000018

0800670c <_kill_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	2300      	movs	r3, #0
 8006710:	4d06      	ldr	r5, [pc, #24]	@ (800672c <_kill_r+0x20>)
 8006712:	4604      	mov	r4, r0
 8006714:	4608      	mov	r0, r1
 8006716:	4611      	mov	r1, r2
 8006718:	602b      	str	r3, [r5, #0]
 800671a:	f7fa ff26 	bl	800156a <_kill>
 800671e:	1c43      	adds	r3, r0, #1
 8006720:	d102      	bne.n	8006728 <_kill_r+0x1c>
 8006722:	682b      	ldr	r3, [r5, #0]
 8006724:	b103      	cbz	r3, 8006728 <_kill_r+0x1c>
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	bd38      	pop	{r3, r4, r5, pc}
 800672a:	bf00      	nop
 800672c:	2000087c 	.word	0x2000087c

08006730 <_getpid_r>:
 8006730:	f7fa bf14 	b.w	800155c <_getpid>

08006734 <_init>:
 8006734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006736:	bf00      	nop
 8006738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673a:	bc08      	pop	{r3}
 800673c:	469e      	mov	lr, r3
 800673e:	4770      	bx	lr

08006740 <_fini>:
 8006740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006742:	bf00      	nop
 8006744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006746:	bc08      	pop	{r3}
 8006748:	469e      	mov	lr, r3
 800674a:	4770      	bx	lr
