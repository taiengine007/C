
003_toggle_PA6_GPIO_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f84  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002090  08002090  00003090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020d0  080020d0  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  080020d0  080020d0  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020d0  080020d0  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020d0  080020d0  000030d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020d4  080020d4  000030d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080020d8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002140  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002140  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d0a  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014da  00000000  00000000  0000ad9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0000c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051f  00000000  00000000  0000c940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017830  00000000  00000000  0000ce5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008308  00000000  00000000  0002468f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083c67  00000000  00000000  0002c997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b05fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002048  00000000  00000000  000b0644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b268c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002078 	.word	0x08002078

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002078 	.word	0x08002078

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa92 	bl	8000678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81a 	bl	800018c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f884 	bl	8000264 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f858 	bl	8000210 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000160:	2140      	movs	r1, #64	@ 0x40
 8000162:	4807      	ldr	r0, [pc, #28]	@ (8000180 <main+0x34>)
 8000164:	f000 fdb8 	bl	8000cd8 <HAL_GPIO_TogglePin>
	  //GPIO_PIN6
	  printf("blink\n");
 8000168:	4806      	ldr	r0, [pc, #24]	@ (8000184 <main+0x38>)
 800016a:	f001 fbf7 	bl	800195c <puts>
	  HAL_Delay(1000);
 800016e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000172:	f000 fae3 	bl	800073c <HAL_Delay>
	  printf("delay 1 sec\n");
 8000176:	4804      	ldr	r0, [pc, #16]	@ (8000188 <main+0x3c>)
 8000178:	f001 fbf0 	bl	800195c <puts>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800017c:	bf00      	nop
 800017e:	e7ef      	b.n	8000160 <main+0x14>
 8000180:	40010800 	.word	0x40010800
 8000184:	08002090 	.word	0x08002090
 8000188:	08002098 	.word	0x08002098

0800018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b090      	sub	sp, #64	@ 0x40
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0318 	add.w	r3, r7, #24
 8000196:	2228      	movs	r2, #40	@ 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f001 fcbe 	bl	8001b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]
 80001ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ae:	2302      	movs	r3, #2
 80001b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b2:	2301      	movs	r3, #1
 80001b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b6:	2310      	movs	r3, #16
 80001b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ba:	2302      	movs	r3, #2
 80001bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001be:	2300      	movs	r3, #0
 80001c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001c2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c8:	f107 0318 	add.w	r3, r7, #24
 80001cc:	4618      	mov	r0, r3
 80001ce:	f000 fdbf 	bl	8000d50 <HAL_RCC_OscConfig>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001d8:	f000 f8b2 	bl	8000340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001dc:	230f      	movs	r3, #15
 80001de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e0:	2302      	movs	r3, #2
 80001e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	2102      	movs	r1, #2
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 f82c 	bl	8001254 <HAL_RCC_ClockConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000202:	f000 f89d 	bl	8000340 <Error_Handler>
  }
}
 8000206:	bf00      	nop
 8000208:	3740      	adds	r7, #64	@ 0x40
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000214:	4b11      	ldr	r3, [pc, #68]	@ (800025c <MX_USART2_UART_Init+0x4c>)
 8000216:	4a12      	ldr	r2, [pc, #72]	@ (8000260 <MX_USART2_UART_Init+0x50>)
 8000218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800021a:	4b10      	ldr	r3, [pc, #64]	@ (800025c <MX_USART2_UART_Init+0x4c>)
 800021c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000222:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <MX_USART2_UART_Init+0x4c>)
 8000224:	2200      	movs	r2, #0
 8000226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000228:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <MX_USART2_UART_Init+0x4c>)
 800022a:	2200      	movs	r2, #0
 800022c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800022e:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <MX_USART2_UART_Init+0x4c>)
 8000230:	2200      	movs	r2, #0
 8000232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000234:	4b09      	ldr	r3, [pc, #36]	@ (800025c <MX_USART2_UART_Init+0x4c>)
 8000236:	220c      	movs	r2, #12
 8000238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800023a:	4b08      	ldr	r3, [pc, #32]	@ (800025c <MX_USART2_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000240:	4b06      	ldr	r3, [pc, #24]	@ (800025c <MX_USART2_UART_Init+0x4c>)
 8000242:	2200      	movs	r2, #0
 8000244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000246:	4805      	ldr	r0, [pc, #20]	@ (800025c <MX_USART2_UART_Init+0x4c>)
 8000248:	f001 f992 	bl	8001570 <HAL_UART_Init>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000252:	f000 f875 	bl	8000340 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000084 	.word	0x20000084
 8000260:	40004400 	.word	0x40004400

08000264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b088      	sub	sp, #32
 8000268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026a:	f107 0310 	add.w	r3, r7, #16
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000278:	4b2d      	ldr	r3, [pc, #180]	@ (8000330 <MX_GPIO_Init+0xcc>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a2c      	ldr	r2, [pc, #176]	@ (8000330 <MX_GPIO_Init+0xcc>)
 800027e:	f043 0310 	orr.w	r3, r3, #16
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b2a      	ldr	r3, [pc, #168]	@ (8000330 <MX_GPIO_Init+0xcc>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0310 	and.w	r3, r3, #16
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000290:	4b27      	ldr	r3, [pc, #156]	@ (8000330 <MX_GPIO_Init+0xcc>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a26      	ldr	r2, [pc, #152]	@ (8000330 <MX_GPIO_Init+0xcc>)
 8000296:	f043 0320 	orr.w	r3, r3, #32
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b24      	ldr	r3, [pc, #144]	@ (8000330 <MX_GPIO_Init+0xcc>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0320 	and.w	r3, r3, #32
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a8:	4b21      	ldr	r3, [pc, #132]	@ (8000330 <MX_GPIO_Init+0xcc>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a20      	ldr	r2, [pc, #128]	@ (8000330 <MX_GPIO_Init+0xcc>)
 80002ae:	f043 0304 	orr.w	r3, r3, #4
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000330 <MX_GPIO_Init+0xcc>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0304 	and.w	r3, r3, #4
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000330 <MX_GPIO_Init+0xcc>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000330 <MX_GPIO_Init+0xcc>)
 80002c6:	f043 0308 	orr.w	r3, r3, #8
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b18      	ldr	r3, [pc, #96]	@ (8000330 <MX_GPIO_Init+0xcc>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0308 	and.w	r3, r3, #8
 80002d4:	603b      	str	r3, [r7, #0]
 80002d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2140      	movs	r1, #64	@ 0x40
 80002dc:	4815      	ldr	r0, [pc, #84]	@ (8000334 <MX_GPIO_Init+0xd0>)
 80002de:	f000 fce3 	bl	8000ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002e8:	4b13      	ldr	r3, [pc, #76]	@ (8000338 <MX_GPIO_Init+0xd4>)
 80002ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002f0:	f107 0310 	add.w	r3, r7, #16
 80002f4:	4619      	mov	r1, r3
 80002f6:	4811      	ldr	r0, [pc, #68]	@ (800033c <MX_GPIO_Init+0xd8>)
 80002f8:	f000 fb52 	bl	80009a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80002fc:	2340      	movs	r3, #64	@ 0x40
 80002fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000300:	2301      	movs	r3, #1
 8000302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	2300      	movs	r3, #0
 8000306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000308:	2302      	movs	r3, #2
 800030a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800030c:	f107 0310 	add.w	r3, r7, #16
 8000310:	4619      	mov	r1, r3
 8000312:	4808      	ldr	r0, [pc, #32]	@ (8000334 <MX_GPIO_Init+0xd0>)
 8000314:	f000 fb44 	bl	80009a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	2100      	movs	r1, #0
 800031c:	2028      	movs	r0, #40	@ 0x28
 800031e:	f000 fb08 	bl	8000932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000322:	2028      	movs	r0, #40	@ 0x28
 8000324:	f000 fb21 	bl	800096a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000328:	bf00      	nop
 800032a:	3720      	adds	r7, #32
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000
 8000334:	40010800 	.word	0x40010800
 8000338:	10110000 	.word	0x10110000
 800033c:	40011000 	.word	0x40011000

08000340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000344:	b672      	cpsid	i
}
 8000346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <Error_Handler+0x8>

0800034c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000352:	4b15      	ldr	r3, [pc, #84]	@ (80003a8 <HAL_MspInit+0x5c>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	4a14      	ldr	r2, [pc, #80]	@ (80003a8 <HAL_MspInit+0x5c>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6193      	str	r3, [r2, #24]
 800035e:	4b12      	ldr	r3, [pc, #72]	@ (80003a8 <HAL_MspInit+0x5c>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
 8000368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036a:	4b0f      	ldr	r3, [pc, #60]	@ (80003a8 <HAL_MspInit+0x5c>)
 800036c:	69db      	ldr	r3, [r3, #28]
 800036e:	4a0e      	ldr	r2, [pc, #56]	@ (80003a8 <HAL_MspInit+0x5c>)
 8000370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000374:	61d3      	str	r3, [r2, #28]
 8000376:	4b0c      	ldr	r3, [pc, #48]	@ (80003a8 <HAL_MspInit+0x5c>)
 8000378:	69db      	ldr	r3, [r3, #28]
 800037a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000382:	4b0a      	ldr	r3, [pc, #40]	@ (80003ac <HAL_MspInit+0x60>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	4a04      	ldr	r2, [pc, #16]	@ (80003ac <HAL_MspInit+0x60>)
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40010000 	.word	0x40010000

080003b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a15      	ldr	r2, [pc, #84]	@ (8000420 <HAL_UART_MspInit+0x70>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d123      	bne.n	8000418 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003d0:	4b14      	ldr	r3, [pc, #80]	@ (8000424 <HAL_UART_MspInit+0x74>)
 80003d2:	69db      	ldr	r3, [r3, #28]
 80003d4:	4a13      	ldr	r2, [pc, #76]	@ (8000424 <HAL_UART_MspInit+0x74>)
 80003d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003da:	61d3      	str	r3, [r2, #28]
 80003dc:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <HAL_UART_MspInit+0x74>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <HAL_UART_MspInit+0x74>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000424 <HAL_UART_MspInit+0x74>)
 80003ee:	f043 0304 	orr.w	r3, r3, #4
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <HAL_UART_MspInit+0x74>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0304 	and.w	r3, r3, #4
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000400:	230c      	movs	r3, #12
 8000402:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000404:	2302      	movs	r3, #2
 8000406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2302      	movs	r3, #2
 800040a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	4805      	ldr	r0, [pc, #20]	@ (8000428 <HAL_UART_MspInit+0x78>)
 8000414:	f000 fac4 	bl	80009a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000418:	bf00      	nop
 800041a:	3720      	adds	r7, #32
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40004400 	.word	0x40004400
 8000424:	40021000 	.word	0x40021000
 8000428:	40010800 	.word	0x40010800

0800042c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <NMI_Handler+0x4>

08000434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <HardFault_Handler+0x4>

0800043c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000440:	bf00      	nop
 8000442:	e7fd      	b.n	8000440 <MemManage_Handler+0x4>

08000444 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000448:	bf00      	nop
 800044a:	e7fd      	b.n	8000448 <BusFault_Handler+0x4>

0800044c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <UsageFault_Handler+0x4>

08000454 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800047c:	f000 f942 	bl	8000704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}

08000484 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000488:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800048c:	f000 fc3e 	bl	8000d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}

08000494 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800049e:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <ITM_SendChar+0x44>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a0d      	ldr	r2, [pc, #52]	@ (80004d8 <ITM_SendChar+0x44>)
 80004a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004a8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004aa:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <ITM_SendChar+0x48>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a0b      	ldr	r2, [pc, #44]	@ (80004dc <ITM_SendChar+0x48>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004b6:	bf00      	nop
 80004b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f8      	beq.n	80004b8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004c6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	6013      	str	r3, [r2, #0]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	e000edfc 	.word	0xe000edfc
 80004dc:	e0000e00 	.word	0xe0000e00

080004e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	e00a      	b.n	8000508 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004f2:	f3af 8000 	nop.w
 80004f6:	4601      	mov	r1, r0
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	60ba      	str	r2, [r7, #8]
 80004fe:	b2ca      	uxtb	r2, r1
 8000500:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	3301      	adds	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	429a      	cmp	r2, r3
 800050e:	dbf0      	blt.n	80004f2 <_read+0x12>
  }

  return len;
 8000510:	687b      	ldr	r3, [r7, #4]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b086      	sub	sp, #24
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e009      	b.n	8000540 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ffad 	bl	8000494 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	3301      	adds	r3, #1
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	dbf1      	blt.n	800052c <_write+0x12>
  }
  return len;
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <_close>:

int _close(int file)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000578:	605a      	str	r2, [r3, #4]
  return 0;
 800057a:	2300      	movs	r3, #0
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <_isatty>:

int _isatty(int file)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800058e:	2301      	movs	r3, #1
}
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
	...

080005b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005bc:	4a14      	ldr	r2, [pc, #80]	@ (8000610 <_sbrk+0x5c>)
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <_sbrk+0x60>)
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c8:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <_sbrk+0x64>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d102      	bne.n	80005d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <_sbrk+0x64>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	@ (800061c <_sbrk+0x68>)
 80005d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d207      	bcs.n	80005f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e4:	f001 fae8 	bl	8001bb8 <__errno>
 80005e8:	4603      	mov	r3, r0
 80005ea:	220c      	movs	r2, #12
 80005ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	e009      	b.n	8000608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <_sbrk+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fa:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <_sbrk+0x64>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	@ (8000618 <_sbrk+0x64>)
 8000604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20005000 	.word	0x20005000
 8000614:	00000400 	.word	0x00000400
 8000618:	200000cc 	.word	0x200000cc
 800061c:	20000220 	.word	0x20000220

08000620 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800062c:	f7ff fff8 	bl	8000620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480b      	ldr	r0, [pc, #44]	@ (8000660 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000632:	490c      	ldr	r1, [pc, #48]	@ (8000664 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000634:	4a0c      	ldr	r2, [pc, #48]	@ (8000668 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a09      	ldr	r2, [pc, #36]	@ (800066c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000648:	4c09      	ldr	r4, [pc, #36]	@ (8000670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000656:	f001 fab5 	bl	8001bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065a:	f7ff fd77 	bl	800014c <main>
  bx lr
 800065e:	4770      	bx	lr
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000668:	080020d8 	.word	0x080020d8
  ldr r2, =_sbss
 800066c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000670:	20000220 	.word	0x20000220

08000674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC1_2_IRQHandler>
	...

08000678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <HAL_Init+0x28>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a07      	ldr	r2, [pc, #28]	@ (80006a0 <HAL_Init+0x28>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000688:	2003      	movs	r0, #3
 800068a:	f000 f947 	bl	800091c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800068e:	2000      	movs	r0, #0
 8000690:	f000 f808 	bl	80006a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000694:	f7ff fe5a 	bl	800034c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40022000 	.word	0x40022000

080006a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <HAL_InitTick+0x54>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <HAL_InitTick+0x58>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80006be:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f95f 	bl	8000986 <HAL_SYSTICK_Config>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e00e      	b.n	80006f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b0f      	cmp	r3, #15
 80006d6:	d80a      	bhi.n	80006ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d8:	2200      	movs	r2, #0
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295
 80006e0:	f000 f927 	bl	8000932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e4:	4a06      	ldr	r2, [pc, #24]	@ (8000700 <HAL_InitTick+0x5c>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e000      	b.n	80006f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000000 	.word	0x20000000
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000004 	.word	0x20000004

08000704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <HAL_IncTick+0x1c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <HAL_IncTick+0x20>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4413      	add	r3, r2
 8000714:	4a03      	ldr	r2, [pc, #12]	@ (8000724 <HAL_IncTick+0x20>)
 8000716:	6013      	str	r3, [r2, #0]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	20000008 	.word	0x20000008
 8000724:	200000d0 	.word	0x200000d0

08000728 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return uwTick;
 800072c:	4b02      	ldr	r3, [pc, #8]	@ (8000738 <HAL_GetTick+0x10>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	200000d0 	.word	0x200000d0

0800073c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000744:	f7ff fff0 	bl	8000728 <HAL_GetTick>
 8000748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000754:	d005      	beq.n	8000762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000756:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <HAL_Delay+0x44>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4413      	add	r3, r2
 8000760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000762:	bf00      	nop
 8000764:	f7ff ffe0 	bl	8000728 <HAL_GetTick>
 8000768:	4602      	mov	r2, r0
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	429a      	cmp	r2, r3
 8000772:	d8f7      	bhi.n	8000764 <HAL_Delay+0x28>
  {
  }
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000008 	.word	0x20000008

08000784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007a0:	4013      	ands	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b6:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	60d3      	str	r3, [r2, #12]
}
 80007bc:	bf00      	nop
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d0:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <__NVIC_GetPriorityGrouping+0x18>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	f003 0307 	and.w	r3, r3, #7
}
 80007da:	4618      	mov	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	db0b      	blt.n	8000812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	f003 021f 	and.w	r2, r3, #31
 8000800:	4906      	ldr	r1, [pc, #24]	@ (800081c <__NVIC_EnableIRQ+0x34>)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	095b      	lsrs	r3, r3, #5
 8000808:	2001      	movs	r0, #1
 800080a:	fa00 f202 	lsl.w	r2, r0, r2
 800080e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	e000e100 	.word	0xe000e100

08000820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	db0a      	blt.n	800084a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	b2da      	uxtb	r2, r3
 8000838:	490c      	ldr	r1, [pc, #48]	@ (800086c <__NVIC_SetPriority+0x4c>)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	0112      	lsls	r2, r2, #4
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	440b      	add	r3, r1
 8000844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000848:	e00a      	b.n	8000860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4908      	ldr	r1, [pc, #32]	@ (8000870 <__NVIC_SetPriority+0x50>)
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	f003 030f 	and.w	r3, r3, #15
 8000856:	3b04      	subs	r3, #4
 8000858:	0112      	lsls	r2, r2, #4
 800085a:	b2d2      	uxtb	r2, r2
 800085c:	440b      	add	r3, r1
 800085e:	761a      	strb	r2, [r3, #24]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000e100 	.word	0xe000e100
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000874:	b480      	push	{r7}
 8000876:	b089      	sub	sp, #36	@ 0x24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	f1c3 0307 	rsb	r3, r3, #7
 800088e:	2b04      	cmp	r3, #4
 8000890:	bf28      	it	cs
 8000892:	2304      	movcs	r3, #4
 8000894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3304      	adds	r3, #4
 800089a:	2b06      	cmp	r3, #6
 800089c:	d902      	bls.n	80008a4 <NVIC_EncodePriority+0x30>
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3b03      	subs	r3, #3
 80008a2:	e000      	b.n	80008a6 <NVIC_EncodePriority+0x32>
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43da      	mvns	r2, r3
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	401a      	ands	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008bc:	f04f 31ff 	mov.w	r1, #4294967295
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	fa01 f303 	lsl.w	r3, r1, r3
 80008c6:	43d9      	mvns	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008cc:	4313      	orrs	r3, r2
         );
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3724      	adds	r7, #36	@ 0x24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008e8:	d301      	bcc.n	80008ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00f      	b.n	800090e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <SysTick_Config+0x40>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f6:	210f      	movs	r1, #15
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f7ff ff90 	bl	8000820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <SysTick_Config+0x40>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000906:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <SysTick_Config+0x40>)
 8000908:	2207      	movs	r2, #7
 800090a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	e000e010 	.word	0xe000e010

0800091c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff2d 	bl	8000784 <__NVIC_SetPriorityGrouping>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000932:	b580      	push	{r7, lr}
 8000934:	b086      	sub	sp, #24
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000944:	f7ff ff42 	bl	80007cc <__NVIC_GetPriorityGrouping>
 8000948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	6978      	ldr	r0, [r7, #20]
 8000950:	f7ff ff90 	bl	8000874 <NVIC_EncodePriority>
 8000954:	4602      	mov	r2, r0
 8000956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff5f 	bl	8000820 <__NVIC_SetPriority>
}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff35 	bl	80007e8 <__NVIC_EnableIRQ>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff ffa2 	bl	80008d8 <SysTick_Config>
 8000994:	4603      	mov	r3, r0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b08b      	sub	sp, #44	@ 0x2c
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b2:	e169      	b.n	8000c88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009b4:	2201      	movs	r2, #1
 80009b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	4013      	ands	r3, r2
 80009c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	f040 8158 	bne.w	8000c82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	4a9a      	ldr	r2, [pc, #616]	@ (8000c40 <HAL_GPIO_Init+0x2a0>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d05e      	beq.n	8000a9a <HAL_GPIO_Init+0xfa>
 80009dc:	4a98      	ldr	r2, [pc, #608]	@ (8000c40 <HAL_GPIO_Init+0x2a0>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d875      	bhi.n	8000ace <HAL_GPIO_Init+0x12e>
 80009e2:	4a98      	ldr	r2, [pc, #608]	@ (8000c44 <HAL_GPIO_Init+0x2a4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d058      	beq.n	8000a9a <HAL_GPIO_Init+0xfa>
 80009e8:	4a96      	ldr	r2, [pc, #600]	@ (8000c44 <HAL_GPIO_Init+0x2a4>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d86f      	bhi.n	8000ace <HAL_GPIO_Init+0x12e>
 80009ee:	4a96      	ldr	r2, [pc, #600]	@ (8000c48 <HAL_GPIO_Init+0x2a8>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d052      	beq.n	8000a9a <HAL_GPIO_Init+0xfa>
 80009f4:	4a94      	ldr	r2, [pc, #592]	@ (8000c48 <HAL_GPIO_Init+0x2a8>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d869      	bhi.n	8000ace <HAL_GPIO_Init+0x12e>
 80009fa:	4a94      	ldr	r2, [pc, #592]	@ (8000c4c <HAL_GPIO_Init+0x2ac>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d04c      	beq.n	8000a9a <HAL_GPIO_Init+0xfa>
 8000a00:	4a92      	ldr	r2, [pc, #584]	@ (8000c4c <HAL_GPIO_Init+0x2ac>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d863      	bhi.n	8000ace <HAL_GPIO_Init+0x12e>
 8000a06:	4a92      	ldr	r2, [pc, #584]	@ (8000c50 <HAL_GPIO_Init+0x2b0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d046      	beq.n	8000a9a <HAL_GPIO_Init+0xfa>
 8000a0c:	4a90      	ldr	r2, [pc, #576]	@ (8000c50 <HAL_GPIO_Init+0x2b0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d85d      	bhi.n	8000ace <HAL_GPIO_Init+0x12e>
 8000a12:	2b12      	cmp	r3, #18
 8000a14:	d82a      	bhi.n	8000a6c <HAL_GPIO_Init+0xcc>
 8000a16:	2b12      	cmp	r3, #18
 8000a18:	d859      	bhi.n	8000ace <HAL_GPIO_Init+0x12e>
 8000a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a20 <HAL_GPIO_Init+0x80>)
 8000a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a20:	08000a9b 	.word	0x08000a9b
 8000a24:	08000a75 	.word	0x08000a75
 8000a28:	08000a87 	.word	0x08000a87
 8000a2c:	08000ac9 	.word	0x08000ac9
 8000a30:	08000acf 	.word	0x08000acf
 8000a34:	08000acf 	.word	0x08000acf
 8000a38:	08000acf 	.word	0x08000acf
 8000a3c:	08000acf 	.word	0x08000acf
 8000a40:	08000acf 	.word	0x08000acf
 8000a44:	08000acf 	.word	0x08000acf
 8000a48:	08000acf 	.word	0x08000acf
 8000a4c:	08000acf 	.word	0x08000acf
 8000a50:	08000acf 	.word	0x08000acf
 8000a54:	08000acf 	.word	0x08000acf
 8000a58:	08000acf 	.word	0x08000acf
 8000a5c:	08000acf 	.word	0x08000acf
 8000a60:	08000acf 	.word	0x08000acf
 8000a64:	08000a7d 	.word	0x08000a7d
 8000a68:	08000a91 	.word	0x08000a91
 8000a6c:	4a79      	ldr	r2, [pc, #484]	@ (8000c54 <HAL_GPIO_Init+0x2b4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d013      	beq.n	8000a9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a72:	e02c      	b.n	8000ace <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	623b      	str	r3, [r7, #32]
          break;
 8000a7a:	e029      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	3304      	adds	r3, #4
 8000a82:	623b      	str	r3, [r7, #32]
          break;
 8000a84:	e024      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	3308      	adds	r3, #8
 8000a8c:	623b      	str	r3, [r7, #32]
          break;
 8000a8e:	e01f      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	330c      	adds	r3, #12
 8000a96:	623b      	str	r3, [r7, #32]
          break;
 8000a98:	e01a      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	623b      	str	r3, [r7, #32]
          break;
 8000aa6:	e013      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d105      	bne.n	8000abc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	611a      	str	r2, [r3, #16]
          break;
 8000aba:	e009      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000abc:	2308      	movs	r3, #8
 8000abe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	69fa      	ldr	r2, [r7, #28]
 8000ac4:	615a      	str	r2, [r3, #20]
          break;
 8000ac6:	e003      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
          break;
 8000acc:	e000      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          break;
 8000ace:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	2bff      	cmp	r3, #255	@ 0xff
 8000ad4:	d801      	bhi.n	8000ada <HAL_GPIO_Init+0x13a>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	e001      	b.n	8000ade <HAL_GPIO_Init+0x13e>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3304      	adds	r3, #4
 8000ade:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	2bff      	cmp	r3, #255	@ 0xff
 8000ae4:	d802      	bhi.n	8000aec <HAL_GPIO_Init+0x14c>
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	e002      	b.n	8000af2 <HAL_GPIO_Init+0x152>
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	3b08      	subs	r3, #8
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	210f      	movs	r1, #15
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	fa01 f303 	lsl.w	r3, r1, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	401a      	ands	r2, r3
 8000b04:	6a39      	ldr	r1, [r7, #32]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 80b1 	beq.w	8000c82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b20:	4b4d      	ldr	r3, [pc, #308]	@ (8000c58 <HAL_GPIO_Init+0x2b8>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a4c      	ldr	r2, [pc, #304]	@ (8000c58 <HAL_GPIO_Init+0x2b8>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c58 <HAL_GPIO_Init+0x2b8>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b38:	4a48      	ldr	r2, [pc, #288]	@ (8000c5c <HAL_GPIO_Init+0x2bc>)
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3c:	089b      	lsrs	r3, r3, #2
 8000b3e:	3302      	adds	r3, #2
 8000b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b48:	f003 0303 	and.w	r3, r3, #3
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	220f      	movs	r2, #15
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a40      	ldr	r2, [pc, #256]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d013      	beq.n	8000b8c <HAL_GPIO_Init+0x1ec>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a3f      	ldr	r2, [pc, #252]	@ (8000c64 <HAL_GPIO_Init+0x2c4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d00d      	beq.n	8000b88 <HAL_GPIO_Init+0x1e8>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c68 <HAL_GPIO_Init+0x2c8>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d007      	beq.n	8000b84 <HAL_GPIO_Init+0x1e4>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a3d      	ldr	r2, [pc, #244]	@ (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d101      	bne.n	8000b80 <HAL_GPIO_Init+0x1e0>
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	e006      	b.n	8000b8e <HAL_GPIO_Init+0x1ee>
 8000b80:	2304      	movs	r3, #4
 8000b82:	e004      	b.n	8000b8e <HAL_GPIO_Init+0x1ee>
 8000b84:	2302      	movs	r3, #2
 8000b86:	e002      	b.n	8000b8e <HAL_GPIO_Init+0x1ee>
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e000      	b.n	8000b8e <HAL_GPIO_Init+0x1ee>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b90:	f002 0203 	and.w	r2, r2, #3
 8000b94:	0092      	lsls	r2, r2, #2
 8000b96:	4093      	lsls	r3, r2
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b9e:	492f      	ldr	r1, [pc, #188]	@ (8000c5c <HAL_GPIO_Init+0x2bc>)
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	3302      	adds	r3, #2
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	492c      	ldr	r1, [pc, #176]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	608b      	str	r3, [r1, #8]
 8000bc4:	e006      	b.n	8000bd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	4928      	ldr	r1, [pc, #160]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d006      	beq.n	8000bee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000be0:	4b23      	ldr	r3, [pc, #140]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	4922      	ldr	r1, [pc, #136]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	60cb      	str	r3, [r1, #12]
 8000bec:	e006      	b.n	8000bfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bee:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	491e      	ldr	r1, [pc, #120]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d006      	beq.n	8000c16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c08:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	4918      	ldr	r1, [pc, #96]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	604b      	str	r3, [r1, #4]
 8000c14:	e006      	b.n	8000c24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c16:	4b16      	ldr	r3, [pc, #88]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	4914      	ldr	r1, [pc, #80]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d021      	beq.n	8000c74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	490e      	ldr	r1, [pc, #56]	@ (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	600b      	str	r3, [r1, #0]
 8000c3c:	e021      	b.n	8000c82 <HAL_GPIO_Init+0x2e2>
 8000c3e:	bf00      	nop
 8000c40:	10320000 	.word	0x10320000
 8000c44:	10310000 	.word	0x10310000
 8000c48:	10220000 	.word	0x10220000
 8000c4c:	10210000 	.word	0x10210000
 8000c50:	10120000 	.word	0x10120000
 8000c54:	10110000 	.word	0x10110000
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010000 	.word	0x40010000
 8000c60:	40010800 	.word	0x40010800
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	40011000 	.word	0x40011000
 8000c6c:	40011400 	.word	0x40011400
 8000c70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <HAL_GPIO_Init+0x304>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	4909      	ldr	r1, [pc, #36]	@ (8000ca4 <HAL_GPIO_Init+0x304>)
 8000c7e:	4013      	ands	r3, r2
 8000c80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c84:	3301      	adds	r3, #1
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f47f ae8e 	bne.w	80009b4 <HAL_GPIO_Init+0x14>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	372c      	adds	r7, #44	@ 0x2c
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	40010400 	.word	0x40010400

08000ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cb8:	787b      	ldrb	r3, [r7, #1]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cbe:	887a      	ldrh	r2, [r7, #2]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cc4:	e003      	b.n	8000cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	041a      	lsls	r2, r3, #16
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	611a      	str	r2, [r3, #16]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	041a      	lsls	r2, r3, #16
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43d9      	mvns	r1, r3
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	400b      	ands	r3, r1
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	611a      	str	r2, [r3, #16]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
	...

08000d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d16:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d18:	695a      	ldr	r2, [r3, #20]
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d006      	beq.n	8000d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f806 	bl	8000d3c <HAL_GPIO_EXTI_Callback>
  }
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40010400 	.word	0x40010400

08000d3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e272      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 8087 	beq.w	8000e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d70:	4b92      	ldr	r3, [pc, #584]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d00c      	beq.n	8000d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d7c:	4b8f      	ldr	r3, [pc, #572]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d112      	bne.n	8000dae <HAL_RCC_OscConfig+0x5e>
 8000d88:	4b8c      	ldr	r3, [pc, #560]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d94:	d10b      	bne.n	8000dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d96:	4b89      	ldr	r3, [pc, #548]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d06c      	beq.n	8000e7c <HAL_RCC_OscConfig+0x12c>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d168      	bne.n	8000e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e24c      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000db6:	d106      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x76>
 8000db8:	4b80      	ldr	r3, [pc, #512]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a7f      	ldr	r2, [pc, #508]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	e02e      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10c      	bne.n	8000de8 <HAL_RCC_OscConfig+0x98>
 8000dce:	4b7b      	ldr	r3, [pc, #492]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a7a      	ldr	r2, [pc, #488]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b78      	ldr	r3, [pc, #480]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a77      	ldr	r2, [pc, #476]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000de0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e01d      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000df0:	d10c      	bne.n	8000e0c <HAL_RCC_OscConfig+0xbc>
 8000df2:	4b72      	ldr	r3, [pc, #456]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a71      	ldr	r2, [pc, #452]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a6e      	ldr	r2, [pc, #440]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e00b      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000e0c:	4b6b      	ldr	r3, [pc, #428]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a6a      	ldr	r2, [pc, #424]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b68      	ldr	r3, [pc, #416]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a67      	ldr	r2, [pc, #412]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d013      	beq.n	8000e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fc7c 	bl	8000728 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e34:	f7ff fc78 	bl	8000728 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b64      	cmp	r3, #100	@ 0x64
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e200      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e46:	4b5d      	ldr	r3, [pc, #372]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f0      	beq.n	8000e34 <HAL_RCC_OscConfig+0xe4>
 8000e52:	e014      	b.n	8000e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fc68 	bl	8000728 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e5c:	f7ff fc64 	bl	8000728 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b64      	cmp	r3, #100	@ 0x64
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e1ec      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6e:	4b53      	ldr	r3, [pc, #332]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x10c>
 8000e7a:	e000      	b.n	8000e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d063      	beq.n	8000f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d00b      	beq.n	8000eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e96:	4b49      	ldr	r3, [pc, #292]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d11c      	bne.n	8000edc <HAL_RCC_OscConfig+0x18c>
 8000ea2:	4b46      	ldr	r3, [pc, #280]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d116      	bne.n	8000edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eae:	4b43      	ldr	r3, [pc, #268]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x176>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d001      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e1c0      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4939      	ldr	r1, [pc, #228]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eda:	e03a      	b.n	8000f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d020      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee4:	4b36      	ldr	r3, [pc, #216]	@ (8000fc0 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eea:	f7ff fc1d 	bl	8000728 <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fc19 	bl	8000728 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e1a1      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f04:	4b2d      	ldr	r3, [pc, #180]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f0      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f10:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	4927      	ldr	r1, [pc, #156]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
 8000f24:	e015      	b.n	8000f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f26:	4b26      	ldr	r3, [pc, #152]	@ (8000fc0 <HAL_RCC_OscConfig+0x270>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fbfc 	bl	8000728 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f34:	f7ff fbf8 	bl	8000728 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e180      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f46:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d03a      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d019      	beq.n	8000f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f66:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <HAL_RCC_OscConfig+0x274>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fbdc 	bl	8000728 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f74:	f7ff fbd8 	bl	8000728 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e160      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 face 	bl	8001534 <RCC_Delay>
 8000f98:	e01c      	b.n	8000fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_RCC_OscConfig+0x274>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fbc2 	bl	8000728 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa6:	e00f      	b.n	8000fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa8:	f7ff fbbe 	bl	8000728 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d908      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e146      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	42420000 	.word	0x42420000
 8000fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc8:	4b92      	ldr	r3, [pc, #584]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1e9      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80a6 	beq.w	800112e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe6:	4b8b      	ldr	r3, [pc, #556]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10d      	bne.n	800100e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b88      	ldr	r3, [pc, #544]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a87      	ldr	r2, [pc, #540]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b85      	ldr	r3, [pc, #532]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800100a:	2301      	movs	r3, #1
 800100c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100e:	4b82      	ldr	r3, [pc, #520]	@ (8001218 <HAL_RCC_OscConfig+0x4c8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001016:	2b00      	cmp	r3, #0
 8001018:	d118      	bne.n	800104c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101a:	4b7f      	ldr	r3, [pc, #508]	@ (8001218 <HAL_RCC_OscConfig+0x4c8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a7e      	ldr	r2, [pc, #504]	@ (8001218 <HAL_RCC_OscConfig+0x4c8>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001026:	f7ff fb7f 	bl	8000728 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102e:	f7ff fb7b 	bl	8000728 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b64      	cmp	r3, #100	@ 0x64
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e103      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001040:	4b75      	ldr	r3, [pc, #468]	@ (8001218 <HAL_RCC_OscConfig+0x4c8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d106      	bne.n	8001062 <HAL_RCC_OscConfig+0x312>
 8001054:	4b6f      	ldr	r3, [pc, #444]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4a6e      	ldr	r2, [pc, #440]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6213      	str	r3, [r2, #32]
 8001060:	e02d      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x334>
 800106a:	4b6a      	ldr	r3, [pc, #424]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a69      	ldr	r2, [pc, #420]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	4b67      	ldr	r3, [pc, #412]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a66      	ldr	r2, [pc, #408]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	e01c      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b05      	cmp	r3, #5
 800108a:	d10c      	bne.n	80010a6 <HAL_RCC_OscConfig+0x356>
 800108c:	4b61      	ldr	r3, [pc, #388]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4a60      	ldr	r2, [pc, #384]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6213      	str	r3, [r2, #32]
 8001098:	4b5e      	ldr	r3, [pc, #376]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a5d      	ldr	r2, [pc, #372]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	e00b      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 80010a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	6213      	str	r3, [r2, #32]
 80010b2:	4b58      	ldr	r3, [pc, #352]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a57      	ldr	r2, [pc, #348]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	f023 0304 	bic.w	r3, r3, #4
 80010bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d015      	beq.n	80010f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fb2f 	bl	8000728 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010cc:	e00a      	b.n	80010e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ce:	f7ff fb2b 	bl	8000728 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010dc:	4293      	cmp	r3, r2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e0b1      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0ee      	beq.n	80010ce <HAL_RCC_OscConfig+0x37e>
 80010f0:	e014      	b.n	800111c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fb19 	bl	8000728 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f7ff fb15 	bl	8000728 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e09b      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001110:	4b40      	ldr	r3, [pc, #256]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1ee      	bne.n	80010fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d105      	bne.n	800112e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001122:	4b3c      	ldr	r3, [pc, #240]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a3b      	ldr	r2, [pc, #236]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800112c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8087 	beq.w	8001246 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001138:	4b36      	ldr	r3, [pc, #216]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b08      	cmp	r3, #8
 8001142:	d061      	beq.n	8001208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d146      	bne.n	80011da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114c:	4b33      	ldr	r3, [pc, #204]	@ (800121c <HAL_RCC_OscConfig+0x4cc>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fae9 	bl	8000728 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115a:	f7ff fae5 	bl	8000728 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e06d      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116c:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f0      	bne.n	800115a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001180:	d108      	bne.n	8001194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001182:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4921      	ldr	r1, [pc, #132]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001194:	4b1f      	ldr	r3, [pc, #124]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a19      	ldr	r1, [r3, #32]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a4:	430b      	orrs	r3, r1
 80011a6:	491b      	ldr	r1, [pc, #108]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <HAL_RCC_OscConfig+0x4cc>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fab9 	bl	8000728 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ba:	f7ff fab5 	bl	8000728 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e03d      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x46a>
 80011d8:	e035      	b.n	8001246 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <HAL_RCC_OscConfig+0x4cc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff faa2 	bl	8000728 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e8:	f7ff fa9e 	bl	8000728 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e026      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x498>
 8001206:	e01e      	b.n	8001246 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d107      	bne.n	8001220 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e019      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
 8001214:	40021000 	.word	0x40021000
 8001218:	40007000 	.word	0x40007000
 800121c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001220:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <HAL_RCC_OscConfig+0x500>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	429a      	cmp	r2, r3
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123e:	429a      	cmp	r2, r3
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0d0      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001268:	4b6a      	ldr	r3, [pc, #424]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d910      	bls.n	8001298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001276:	4b67      	ldr	r3, [pc, #412]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 0207 	bic.w	r2, r3, #7
 800127e:	4965      	ldr	r1, [pc, #404]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b63      	ldr	r3, [pc, #396]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0b8      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b0:	4b59      	ldr	r3, [pc, #356]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4a58      	ldr	r2, [pc, #352]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c8:	4b53      	ldr	r3, [pc, #332]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a52      	ldr	r2, [pc, #328]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80012d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d4:	4b50      	ldr	r3, [pc, #320]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	494d      	ldr	r1, [pc, #308]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d040      	beq.n	8001374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b47      	ldr	r3, [pc, #284]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d115      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e07f      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	4b41      	ldr	r3, [pc, #260]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e073      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	4b3d      	ldr	r3, [pc, #244]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e06b      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001332:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f023 0203 	bic.w	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4936      	ldr	r1, [pc, #216]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001344:	f7ff f9f0 	bl	8000728 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134a:	e00a      	b.n	8001362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134c:	f7ff f9ec 	bl	8000728 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e053      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 020c 	and.w	r2, r3, #12
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	429a      	cmp	r2, r3
 8001372:	d1eb      	bne.n	800134c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001374:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d210      	bcs.n	80013a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 0207 	bic.w	r2, r3, #7
 800138a:	4922      	ldr	r1, [pc, #136]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e032      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b0:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4916      	ldr	r1, [pc, #88]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	490e      	ldr	r1, [pc, #56]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013e2:	f000 f821 	bl	8001428 <HAL_RCC_GetSysClockFreq>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	490a      	ldr	r1, [pc, #40]	@ (800141c <HAL_RCC_ClockConfig+0x1c8>)
 80013f4:	5ccb      	ldrb	r3, [r1, r3]
 80013f6:	fa22 f303 	lsr.w	r3, r2, r3
 80013fa:	4a09      	ldr	r2, [pc, #36]	@ (8001420 <HAL_RCC_ClockConfig+0x1cc>)
 80013fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_RCC_ClockConfig+0x1d0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f94e 	bl	80006a4 <HAL_InitTick>

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000
 8001418:	40021000 	.word	0x40021000
 800141c:	080020a4 	.word	0x080020a4
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001442:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b04      	cmp	r3, #4
 8001450:	d002      	beq.n	8001458 <HAL_RCC_GetSysClockFreq+0x30>
 8001452:	2b08      	cmp	r3, #8
 8001454:	d003      	beq.n	800145e <HAL_RCC_GetSysClockFreq+0x36>
 8001456:	e027      	b.n	80014a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800145a:	613b      	str	r3, [r7, #16]
      break;
 800145c:	e027      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	0c9b      	lsrs	r3, r3, #18
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	4a17      	ldr	r2, [pc, #92]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001468:	5cd3      	ldrb	r3, [r2, r3]
 800146a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d010      	beq.n	8001498 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	0c5b      	lsrs	r3, r3, #17
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	4a11      	ldr	r2, [pc, #68]	@ (80014c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001482:	5cd3      	ldrb	r3, [r2, r3]
 8001484:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a0d      	ldr	r2, [pc, #52]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800148a:	fb03 f202 	mul.w	r2, r3, r2
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	fbb2 f3f3 	udiv	r3, r2, r3
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	e004      	b.n	80014a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a0c      	ldr	r2, [pc, #48]	@ (80014cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800149c:	fb02 f303 	mul.w	r3, r2, r3
 80014a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	613b      	str	r3, [r7, #16]
      break;
 80014a6:	e002      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80014aa:	613b      	str	r3, [r7, #16]
      break;
 80014ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ae:	693b      	ldr	r3, [r7, #16]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	007a1200 	.word	0x007a1200
 80014c4:	080020bc 	.word	0x080020bc
 80014c8:	080020cc 	.word	0x080020cc
 80014cc:	003d0900 	.word	0x003d0900

080014d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014d4:	4b02      	ldr	r3, [pc, #8]	@ (80014e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	20000000 	.word	0x20000000

080014e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014e8:	f7ff fff2 	bl	80014d0 <HAL_RCC_GetHCLKFreq>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	4903      	ldr	r1, [pc, #12]	@ (8001508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014fa:	5ccb      	ldrb	r3, [r1, r3]
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	080020b4 	.word	0x080020b4

0800150c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001510:	f7ff ffde 	bl	80014d0 <HAL_RCC_GetHCLKFreq>
 8001514:	4602      	mov	r2, r0
 8001516:	4b05      	ldr	r3, [pc, #20]	@ (800152c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	0adb      	lsrs	r3, r3, #11
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	4903      	ldr	r1, [pc, #12]	@ (8001530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001522:	5ccb      	ldrb	r3, [r1, r3]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001528:	4618      	mov	r0, r3
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000
 8001530:	080020b4 	.word	0x080020b4

08001534 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800153c:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <RCC_Delay+0x34>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <RCC_Delay+0x38>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0a5b      	lsrs	r3, r3, #9
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001550:	bf00      	nop
  }
  while (Delay --);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1e5a      	subs	r2, r3, #1
 8001556:	60fa      	str	r2, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f9      	bne.n	8001550 <RCC_Delay+0x1c>
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	20000000 	.word	0x20000000
 800156c:	10624dd3 	.word	0x10624dd3

08001570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e042      	b.n	8001608 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d106      	bne.n	800159c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7fe ff0a 	bl	80003b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2224      	movs	r2, #36	@ 0x24
 80015a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80015b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f82b 	bl	8001610 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80015c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80015d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80015e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2220      	movs	r2, #32
 80015f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2220      	movs	r2, #32
 80015fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	4313      	orrs	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800164a:	f023 030c 	bic.w	r3, r3, #12
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	430b      	orrs	r3, r1
 8001656:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699a      	ldr	r2, [r3, #24]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a2c      	ldr	r2, [pc, #176]	@ (8001724 <UART_SetConfig+0x114>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d103      	bne.n	8001680 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001678:	f7ff ff48 	bl	800150c <HAL_RCC_GetPCLK2Freq>
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	e002      	b.n	8001686 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001680:	f7ff ff30 	bl	80014e4 <HAL_RCC_GetPCLK1Freq>
 8001684:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	009a      	lsls	r2, r3, #2
 8001690:	441a      	add	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
 800169c:	4a22      	ldr	r2, [pc, #136]	@ (8001728 <UART_SetConfig+0x118>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	0119      	lsls	r1, r3, #4
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	009a      	lsls	r2, r3, #2
 80016b0:	441a      	add	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80016bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <UART_SetConfig+0x118>)
 80016be:	fba3 0302 	umull	r0, r3, r3, r2
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	2064      	movs	r0, #100	@ 0x64
 80016c6:	fb00 f303 	mul.w	r3, r0, r3
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	3332      	adds	r3, #50	@ 0x32
 80016d0:	4a15      	ldr	r2, [pc, #84]	@ (8001728 <UART_SetConfig+0x118>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016dc:	4419      	add	r1, r3
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	009a      	lsls	r2, r3, #2
 80016e8:	441a      	add	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <UART_SetConfig+0x118>)
 80016f6:	fba3 0302 	umull	r0, r3, r3, r2
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2064      	movs	r0, #100	@ 0x64
 80016fe:	fb00 f303 	mul.w	r3, r0, r3
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	3332      	adds	r3, #50	@ 0x32
 8001708:	4a07      	ldr	r2, [pc, #28]	@ (8001728 <UART_SetConfig+0x118>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	f003 020f 	and.w	r2, r3, #15
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	440a      	add	r2, r1
 800171a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40013800 	.word	0x40013800
 8001728:	51eb851f 	.word	0x51eb851f

0800172c <std>:
 800172c:	2300      	movs	r3, #0
 800172e:	b510      	push	{r4, lr}
 8001730:	4604      	mov	r4, r0
 8001732:	e9c0 3300 	strd	r3, r3, [r0]
 8001736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800173a:	6083      	str	r3, [r0, #8]
 800173c:	8181      	strh	r1, [r0, #12]
 800173e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001740:	81c2      	strh	r2, [r0, #14]
 8001742:	6183      	str	r3, [r0, #24]
 8001744:	4619      	mov	r1, r3
 8001746:	2208      	movs	r2, #8
 8001748:	305c      	adds	r0, #92	@ 0x5c
 800174a:	f000 f9e7 	bl	8001b1c <memset>
 800174e:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <std+0x58>)
 8001750:	6224      	str	r4, [r4, #32]
 8001752:	6263      	str	r3, [r4, #36]	@ 0x24
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <std+0x5c>)
 8001756:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <std+0x60>)
 800175a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800175c:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <std+0x64>)
 800175e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <std+0x68>)
 8001762:	429c      	cmp	r4, r3
 8001764:	d006      	beq.n	8001774 <std+0x48>
 8001766:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800176a:	4294      	cmp	r4, r2
 800176c:	d002      	beq.n	8001774 <std+0x48>
 800176e:	33d0      	adds	r3, #208	@ 0xd0
 8001770:	429c      	cmp	r4, r3
 8001772:	d105      	bne.n	8001780 <std+0x54>
 8001774:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800177c:	f000 ba46 	b.w	8001c0c <__retarget_lock_init_recursive>
 8001780:	bd10      	pop	{r4, pc}
 8001782:	bf00      	nop
 8001784:	0800196d 	.word	0x0800196d
 8001788:	0800198f 	.word	0x0800198f
 800178c:	080019c7 	.word	0x080019c7
 8001790:	080019eb 	.word	0x080019eb
 8001794:	200000d4 	.word	0x200000d4

08001798 <stdio_exit_handler>:
 8001798:	4a02      	ldr	r2, [pc, #8]	@ (80017a4 <stdio_exit_handler+0xc>)
 800179a:	4903      	ldr	r1, [pc, #12]	@ (80017a8 <stdio_exit_handler+0x10>)
 800179c:	4803      	ldr	r0, [pc, #12]	@ (80017ac <stdio_exit_handler+0x14>)
 800179e:	f000 b869 	b.w	8001874 <_fwalk_sglue>
 80017a2:	bf00      	nop
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	08001f01 	.word	0x08001f01
 80017ac:	2000001c 	.word	0x2000001c

080017b0 <cleanup_stdio>:
 80017b0:	6841      	ldr	r1, [r0, #4]
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <cleanup_stdio+0x34>)
 80017b4:	b510      	push	{r4, lr}
 80017b6:	4299      	cmp	r1, r3
 80017b8:	4604      	mov	r4, r0
 80017ba:	d001      	beq.n	80017c0 <cleanup_stdio+0x10>
 80017bc:	f000 fba0 	bl	8001f00 <_fflush_r>
 80017c0:	68a1      	ldr	r1, [r4, #8]
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <cleanup_stdio+0x38>)
 80017c4:	4299      	cmp	r1, r3
 80017c6:	d002      	beq.n	80017ce <cleanup_stdio+0x1e>
 80017c8:	4620      	mov	r0, r4
 80017ca:	f000 fb99 	bl	8001f00 <_fflush_r>
 80017ce:	68e1      	ldr	r1, [r4, #12]
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <cleanup_stdio+0x3c>)
 80017d2:	4299      	cmp	r1, r3
 80017d4:	d004      	beq.n	80017e0 <cleanup_stdio+0x30>
 80017d6:	4620      	mov	r0, r4
 80017d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017dc:	f000 bb90 	b.w	8001f00 <_fflush_r>
 80017e0:	bd10      	pop	{r4, pc}
 80017e2:	bf00      	nop
 80017e4:	200000d4 	.word	0x200000d4
 80017e8:	2000013c 	.word	0x2000013c
 80017ec:	200001a4 	.word	0x200001a4

080017f0 <global_stdio_init.part.0>:
 80017f0:	b510      	push	{r4, lr}
 80017f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <global_stdio_init.part.0+0x30>)
 80017f4:	4c0b      	ldr	r4, [pc, #44]	@ (8001824 <global_stdio_init.part.0+0x34>)
 80017f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001828 <global_stdio_init.part.0+0x38>)
 80017f8:	4620      	mov	r0, r4
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	2104      	movs	r1, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	f7ff ff94 	bl	800172c <std>
 8001804:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001808:	2201      	movs	r2, #1
 800180a:	2109      	movs	r1, #9
 800180c:	f7ff ff8e 	bl	800172c <std>
 8001810:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001814:	2202      	movs	r2, #2
 8001816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800181a:	2112      	movs	r1, #18
 800181c:	f7ff bf86 	b.w	800172c <std>
 8001820:	2000020c 	.word	0x2000020c
 8001824:	200000d4 	.word	0x200000d4
 8001828:	08001799 	.word	0x08001799

0800182c <__sfp_lock_acquire>:
 800182c:	4801      	ldr	r0, [pc, #4]	@ (8001834 <__sfp_lock_acquire+0x8>)
 800182e:	f000 b9ee 	b.w	8001c0e <__retarget_lock_acquire_recursive>
 8001832:	bf00      	nop
 8001834:	20000215 	.word	0x20000215

08001838 <__sfp_lock_release>:
 8001838:	4801      	ldr	r0, [pc, #4]	@ (8001840 <__sfp_lock_release+0x8>)
 800183a:	f000 b9e9 	b.w	8001c10 <__retarget_lock_release_recursive>
 800183e:	bf00      	nop
 8001840:	20000215 	.word	0x20000215

08001844 <__sinit>:
 8001844:	b510      	push	{r4, lr}
 8001846:	4604      	mov	r4, r0
 8001848:	f7ff fff0 	bl	800182c <__sfp_lock_acquire>
 800184c:	6a23      	ldr	r3, [r4, #32]
 800184e:	b11b      	cbz	r3, 8001858 <__sinit+0x14>
 8001850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001854:	f7ff bff0 	b.w	8001838 <__sfp_lock_release>
 8001858:	4b04      	ldr	r3, [pc, #16]	@ (800186c <__sinit+0x28>)
 800185a:	6223      	str	r3, [r4, #32]
 800185c:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <__sinit+0x2c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f5      	bne.n	8001850 <__sinit+0xc>
 8001864:	f7ff ffc4 	bl	80017f0 <global_stdio_init.part.0>
 8001868:	e7f2      	b.n	8001850 <__sinit+0xc>
 800186a:	bf00      	nop
 800186c:	080017b1 	.word	0x080017b1
 8001870:	2000020c 	.word	0x2000020c

08001874 <_fwalk_sglue>:
 8001874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001878:	4607      	mov	r7, r0
 800187a:	4688      	mov	r8, r1
 800187c:	4614      	mov	r4, r2
 800187e:	2600      	movs	r6, #0
 8001880:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001884:	f1b9 0901 	subs.w	r9, r9, #1
 8001888:	d505      	bpl.n	8001896 <_fwalk_sglue+0x22>
 800188a:	6824      	ldr	r4, [r4, #0]
 800188c:	2c00      	cmp	r4, #0
 800188e:	d1f7      	bne.n	8001880 <_fwalk_sglue+0xc>
 8001890:	4630      	mov	r0, r6
 8001892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001896:	89ab      	ldrh	r3, [r5, #12]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d907      	bls.n	80018ac <_fwalk_sglue+0x38>
 800189c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018a0:	3301      	adds	r3, #1
 80018a2:	d003      	beq.n	80018ac <_fwalk_sglue+0x38>
 80018a4:	4629      	mov	r1, r5
 80018a6:	4638      	mov	r0, r7
 80018a8:	47c0      	blx	r8
 80018aa:	4306      	orrs	r6, r0
 80018ac:	3568      	adds	r5, #104	@ 0x68
 80018ae:	e7e9      	b.n	8001884 <_fwalk_sglue+0x10>

080018b0 <_puts_r>:
 80018b0:	6a03      	ldr	r3, [r0, #32]
 80018b2:	b570      	push	{r4, r5, r6, lr}
 80018b4:	4605      	mov	r5, r0
 80018b6:	460e      	mov	r6, r1
 80018b8:	6884      	ldr	r4, [r0, #8]
 80018ba:	b90b      	cbnz	r3, 80018c0 <_puts_r+0x10>
 80018bc:	f7ff ffc2 	bl	8001844 <__sinit>
 80018c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018c2:	07db      	lsls	r3, r3, #31
 80018c4:	d405      	bmi.n	80018d2 <_puts_r+0x22>
 80018c6:	89a3      	ldrh	r3, [r4, #12]
 80018c8:	0598      	lsls	r0, r3, #22
 80018ca:	d402      	bmi.n	80018d2 <_puts_r+0x22>
 80018cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018ce:	f000 f99e 	bl	8001c0e <__retarget_lock_acquire_recursive>
 80018d2:	89a3      	ldrh	r3, [r4, #12]
 80018d4:	0719      	lsls	r1, r3, #28
 80018d6:	d502      	bpl.n	80018de <_puts_r+0x2e>
 80018d8:	6923      	ldr	r3, [r4, #16]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d135      	bne.n	800194a <_puts_r+0x9a>
 80018de:	4621      	mov	r1, r4
 80018e0:	4628      	mov	r0, r5
 80018e2:	f000 f8c5 	bl	8001a70 <__swsetup_r>
 80018e6:	b380      	cbz	r0, 800194a <_puts_r+0x9a>
 80018e8:	f04f 35ff 	mov.w	r5, #4294967295
 80018ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018ee:	07da      	lsls	r2, r3, #31
 80018f0:	d405      	bmi.n	80018fe <_puts_r+0x4e>
 80018f2:	89a3      	ldrh	r3, [r4, #12]
 80018f4:	059b      	lsls	r3, r3, #22
 80018f6:	d402      	bmi.n	80018fe <_puts_r+0x4e>
 80018f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018fa:	f000 f989 	bl	8001c10 <__retarget_lock_release_recursive>
 80018fe:	4628      	mov	r0, r5
 8001900:	bd70      	pop	{r4, r5, r6, pc}
 8001902:	2b00      	cmp	r3, #0
 8001904:	da04      	bge.n	8001910 <_puts_r+0x60>
 8001906:	69a2      	ldr	r2, [r4, #24]
 8001908:	429a      	cmp	r2, r3
 800190a:	dc17      	bgt.n	800193c <_puts_r+0x8c>
 800190c:	290a      	cmp	r1, #10
 800190e:	d015      	beq.n	800193c <_puts_r+0x8c>
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	6022      	str	r2, [r4, #0]
 8001916:	7019      	strb	r1, [r3, #0]
 8001918:	68a3      	ldr	r3, [r4, #8]
 800191a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800191e:	3b01      	subs	r3, #1
 8001920:	60a3      	str	r3, [r4, #8]
 8001922:	2900      	cmp	r1, #0
 8001924:	d1ed      	bne.n	8001902 <_puts_r+0x52>
 8001926:	2b00      	cmp	r3, #0
 8001928:	da11      	bge.n	800194e <_puts_r+0x9e>
 800192a:	4622      	mov	r2, r4
 800192c:	210a      	movs	r1, #10
 800192e:	4628      	mov	r0, r5
 8001930:	f000 f85f 	bl	80019f2 <__swbuf_r>
 8001934:	3001      	adds	r0, #1
 8001936:	d0d7      	beq.n	80018e8 <_puts_r+0x38>
 8001938:	250a      	movs	r5, #10
 800193a:	e7d7      	b.n	80018ec <_puts_r+0x3c>
 800193c:	4622      	mov	r2, r4
 800193e:	4628      	mov	r0, r5
 8001940:	f000 f857 	bl	80019f2 <__swbuf_r>
 8001944:	3001      	adds	r0, #1
 8001946:	d1e7      	bne.n	8001918 <_puts_r+0x68>
 8001948:	e7ce      	b.n	80018e8 <_puts_r+0x38>
 800194a:	3e01      	subs	r6, #1
 800194c:	e7e4      	b.n	8001918 <_puts_r+0x68>
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	6022      	str	r2, [r4, #0]
 8001954:	220a      	movs	r2, #10
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	e7ee      	b.n	8001938 <_puts_r+0x88>
	...

0800195c <puts>:
 800195c:	4b02      	ldr	r3, [pc, #8]	@ (8001968 <puts+0xc>)
 800195e:	4601      	mov	r1, r0
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	f7ff bfa5 	b.w	80018b0 <_puts_r>
 8001966:	bf00      	nop
 8001968:	20000018 	.word	0x20000018

0800196c <__sread>:
 800196c:	b510      	push	{r4, lr}
 800196e:	460c      	mov	r4, r1
 8001970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001974:	f000 f8fc 	bl	8001b70 <_read_r>
 8001978:	2800      	cmp	r0, #0
 800197a:	bfab      	itete	ge
 800197c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800197e:	89a3      	ldrhlt	r3, [r4, #12]
 8001980:	181b      	addge	r3, r3, r0
 8001982:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001986:	bfac      	ite	ge
 8001988:	6563      	strge	r3, [r4, #84]	@ 0x54
 800198a:	81a3      	strhlt	r3, [r4, #12]
 800198c:	bd10      	pop	{r4, pc}

0800198e <__swrite>:
 800198e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001992:	461f      	mov	r7, r3
 8001994:	898b      	ldrh	r3, [r1, #12]
 8001996:	4605      	mov	r5, r0
 8001998:	05db      	lsls	r3, r3, #23
 800199a:	460c      	mov	r4, r1
 800199c:	4616      	mov	r6, r2
 800199e:	d505      	bpl.n	80019ac <__swrite+0x1e>
 80019a0:	2302      	movs	r3, #2
 80019a2:	2200      	movs	r2, #0
 80019a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019a8:	f000 f8d0 	bl	8001b4c <_lseek_r>
 80019ac:	89a3      	ldrh	r3, [r4, #12]
 80019ae:	4632      	mov	r2, r6
 80019b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019b4:	81a3      	strh	r3, [r4, #12]
 80019b6:	4628      	mov	r0, r5
 80019b8:	463b      	mov	r3, r7
 80019ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019c2:	f000 b8e7 	b.w	8001b94 <_write_r>

080019c6 <__sseek>:
 80019c6:	b510      	push	{r4, lr}
 80019c8:	460c      	mov	r4, r1
 80019ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019ce:	f000 f8bd 	bl	8001b4c <_lseek_r>
 80019d2:	1c43      	adds	r3, r0, #1
 80019d4:	89a3      	ldrh	r3, [r4, #12]
 80019d6:	bf15      	itete	ne
 80019d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80019da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80019de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80019e2:	81a3      	strheq	r3, [r4, #12]
 80019e4:	bf18      	it	ne
 80019e6:	81a3      	strhne	r3, [r4, #12]
 80019e8:	bd10      	pop	{r4, pc}

080019ea <__sclose>:
 80019ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019ee:	f000 b89d 	b.w	8001b2c <_close_r>

080019f2 <__swbuf_r>:
 80019f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f4:	460e      	mov	r6, r1
 80019f6:	4614      	mov	r4, r2
 80019f8:	4605      	mov	r5, r0
 80019fa:	b118      	cbz	r0, 8001a04 <__swbuf_r+0x12>
 80019fc:	6a03      	ldr	r3, [r0, #32]
 80019fe:	b90b      	cbnz	r3, 8001a04 <__swbuf_r+0x12>
 8001a00:	f7ff ff20 	bl	8001844 <__sinit>
 8001a04:	69a3      	ldr	r3, [r4, #24]
 8001a06:	60a3      	str	r3, [r4, #8]
 8001a08:	89a3      	ldrh	r3, [r4, #12]
 8001a0a:	071a      	lsls	r2, r3, #28
 8001a0c:	d501      	bpl.n	8001a12 <__swbuf_r+0x20>
 8001a0e:	6923      	ldr	r3, [r4, #16]
 8001a10:	b943      	cbnz	r3, 8001a24 <__swbuf_r+0x32>
 8001a12:	4621      	mov	r1, r4
 8001a14:	4628      	mov	r0, r5
 8001a16:	f000 f82b 	bl	8001a70 <__swsetup_r>
 8001a1a:	b118      	cbz	r0, 8001a24 <__swbuf_r+0x32>
 8001a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8001a20:	4638      	mov	r0, r7
 8001a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	6922      	ldr	r2, [r4, #16]
 8001a28:	b2f6      	uxtb	r6, r6
 8001a2a:	1a98      	subs	r0, r3, r2
 8001a2c:	6963      	ldr	r3, [r4, #20]
 8001a2e:	4637      	mov	r7, r6
 8001a30:	4283      	cmp	r3, r0
 8001a32:	dc05      	bgt.n	8001a40 <__swbuf_r+0x4e>
 8001a34:	4621      	mov	r1, r4
 8001a36:	4628      	mov	r0, r5
 8001a38:	f000 fa62 	bl	8001f00 <_fflush_r>
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d1ed      	bne.n	8001a1c <__swbuf_r+0x2a>
 8001a40:	68a3      	ldr	r3, [r4, #8]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	60a3      	str	r3, [r4, #8]
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	6022      	str	r2, [r4, #0]
 8001a4c:	701e      	strb	r6, [r3, #0]
 8001a4e:	6962      	ldr	r2, [r4, #20]
 8001a50:	1c43      	adds	r3, r0, #1
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d004      	beq.n	8001a60 <__swbuf_r+0x6e>
 8001a56:	89a3      	ldrh	r3, [r4, #12]
 8001a58:	07db      	lsls	r3, r3, #31
 8001a5a:	d5e1      	bpl.n	8001a20 <__swbuf_r+0x2e>
 8001a5c:	2e0a      	cmp	r6, #10
 8001a5e:	d1df      	bne.n	8001a20 <__swbuf_r+0x2e>
 8001a60:	4621      	mov	r1, r4
 8001a62:	4628      	mov	r0, r5
 8001a64:	f000 fa4c 	bl	8001f00 <_fflush_r>
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d0d9      	beq.n	8001a20 <__swbuf_r+0x2e>
 8001a6c:	e7d6      	b.n	8001a1c <__swbuf_r+0x2a>
	...

08001a70 <__swsetup_r>:
 8001a70:	b538      	push	{r3, r4, r5, lr}
 8001a72:	4b29      	ldr	r3, [pc, #164]	@ (8001b18 <__swsetup_r+0xa8>)
 8001a74:	4605      	mov	r5, r0
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	460c      	mov	r4, r1
 8001a7a:	b118      	cbz	r0, 8001a84 <__swsetup_r+0x14>
 8001a7c:	6a03      	ldr	r3, [r0, #32]
 8001a7e:	b90b      	cbnz	r3, 8001a84 <__swsetup_r+0x14>
 8001a80:	f7ff fee0 	bl	8001844 <__sinit>
 8001a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a88:	0719      	lsls	r1, r3, #28
 8001a8a:	d422      	bmi.n	8001ad2 <__swsetup_r+0x62>
 8001a8c:	06da      	lsls	r2, r3, #27
 8001a8e:	d407      	bmi.n	8001aa0 <__swsetup_r+0x30>
 8001a90:	2209      	movs	r2, #9
 8001a92:	602a      	str	r2, [r5, #0]
 8001a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	81a3      	strh	r3, [r4, #12]
 8001a9e:	e033      	b.n	8001b08 <__swsetup_r+0x98>
 8001aa0:	0758      	lsls	r0, r3, #29
 8001aa2:	d512      	bpl.n	8001aca <__swsetup_r+0x5a>
 8001aa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001aa6:	b141      	cbz	r1, 8001aba <__swsetup_r+0x4a>
 8001aa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001aac:	4299      	cmp	r1, r3
 8001aae:	d002      	beq.n	8001ab6 <__swsetup_r+0x46>
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	f000 f8af 	bl	8001c14 <_free_r>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	6363      	str	r3, [r4, #52]	@ 0x34
 8001aba:	89a3      	ldrh	r3, [r4, #12]
 8001abc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001ac0:	81a3      	strh	r3, [r4, #12]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	6063      	str	r3, [r4, #4]
 8001ac6:	6923      	ldr	r3, [r4, #16]
 8001ac8:	6023      	str	r3, [r4, #0]
 8001aca:	89a3      	ldrh	r3, [r4, #12]
 8001acc:	f043 0308 	orr.w	r3, r3, #8
 8001ad0:	81a3      	strh	r3, [r4, #12]
 8001ad2:	6923      	ldr	r3, [r4, #16]
 8001ad4:	b94b      	cbnz	r3, 8001aea <__swsetup_r+0x7a>
 8001ad6:	89a3      	ldrh	r3, [r4, #12]
 8001ad8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ae0:	d003      	beq.n	8001aea <__swsetup_r+0x7a>
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	f000 fa58 	bl	8001f9a <__smakebuf_r>
 8001aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aee:	f013 0201 	ands.w	r2, r3, #1
 8001af2:	d00a      	beq.n	8001b0a <__swsetup_r+0x9a>
 8001af4:	2200      	movs	r2, #0
 8001af6:	60a2      	str	r2, [r4, #8]
 8001af8:	6962      	ldr	r2, [r4, #20]
 8001afa:	4252      	negs	r2, r2
 8001afc:	61a2      	str	r2, [r4, #24]
 8001afe:	6922      	ldr	r2, [r4, #16]
 8001b00:	b942      	cbnz	r2, 8001b14 <__swsetup_r+0xa4>
 8001b02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001b06:	d1c5      	bne.n	8001a94 <__swsetup_r+0x24>
 8001b08:	bd38      	pop	{r3, r4, r5, pc}
 8001b0a:	0799      	lsls	r1, r3, #30
 8001b0c:	bf58      	it	pl
 8001b0e:	6962      	ldrpl	r2, [r4, #20]
 8001b10:	60a2      	str	r2, [r4, #8]
 8001b12:	e7f4      	b.n	8001afe <__swsetup_r+0x8e>
 8001b14:	2000      	movs	r0, #0
 8001b16:	e7f7      	b.n	8001b08 <__swsetup_r+0x98>
 8001b18:	20000018 	.word	0x20000018

08001b1c <memset>:
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4402      	add	r2, r0
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d100      	bne.n	8001b26 <memset+0xa>
 8001b24:	4770      	bx	lr
 8001b26:	f803 1b01 	strb.w	r1, [r3], #1
 8001b2a:	e7f9      	b.n	8001b20 <memset+0x4>

08001b2c <_close_r>:
 8001b2c:	b538      	push	{r3, r4, r5, lr}
 8001b2e:	2300      	movs	r3, #0
 8001b30:	4d05      	ldr	r5, [pc, #20]	@ (8001b48 <_close_r+0x1c>)
 8001b32:	4604      	mov	r4, r0
 8001b34:	4608      	mov	r0, r1
 8001b36:	602b      	str	r3, [r5, #0]
 8001b38:	f7fe fd0b 	bl	8000552 <_close>
 8001b3c:	1c43      	adds	r3, r0, #1
 8001b3e:	d102      	bne.n	8001b46 <_close_r+0x1a>
 8001b40:	682b      	ldr	r3, [r5, #0]
 8001b42:	b103      	cbz	r3, 8001b46 <_close_r+0x1a>
 8001b44:	6023      	str	r3, [r4, #0]
 8001b46:	bd38      	pop	{r3, r4, r5, pc}
 8001b48:	20000210 	.word	0x20000210

08001b4c <_lseek_r>:
 8001b4c:	b538      	push	{r3, r4, r5, lr}
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	2200      	movs	r2, #0
 8001b56:	4d05      	ldr	r5, [pc, #20]	@ (8001b6c <_lseek_r+0x20>)
 8001b58:	602a      	str	r2, [r5, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f7fe fd1d 	bl	800059a <_lseek>
 8001b60:	1c43      	adds	r3, r0, #1
 8001b62:	d102      	bne.n	8001b6a <_lseek_r+0x1e>
 8001b64:	682b      	ldr	r3, [r5, #0]
 8001b66:	b103      	cbz	r3, 8001b6a <_lseek_r+0x1e>
 8001b68:	6023      	str	r3, [r4, #0]
 8001b6a:	bd38      	pop	{r3, r4, r5, pc}
 8001b6c:	20000210 	.word	0x20000210

08001b70 <_read_r>:
 8001b70:	b538      	push	{r3, r4, r5, lr}
 8001b72:	4604      	mov	r4, r0
 8001b74:	4608      	mov	r0, r1
 8001b76:	4611      	mov	r1, r2
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4d05      	ldr	r5, [pc, #20]	@ (8001b90 <_read_r+0x20>)
 8001b7c:	602a      	str	r2, [r5, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f7fe fcae 	bl	80004e0 <_read>
 8001b84:	1c43      	adds	r3, r0, #1
 8001b86:	d102      	bne.n	8001b8e <_read_r+0x1e>
 8001b88:	682b      	ldr	r3, [r5, #0]
 8001b8a:	b103      	cbz	r3, 8001b8e <_read_r+0x1e>
 8001b8c:	6023      	str	r3, [r4, #0]
 8001b8e:	bd38      	pop	{r3, r4, r5, pc}
 8001b90:	20000210 	.word	0x20000210

08001b94 <_write_r>:
 8001b94:	b538      	push	{r3, r4, r5, lr}
 8001b96:	4604      	mov	r4, r0
 8001b98:	4608      	mov	r0, r1
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	4d05      	ldr	r5, [pc, #20]	@ (8001bb4 <_write_r+0x20>)
 8001ba0:	602a      	str	r2, [r5, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f7fe fcb9 	bl	800051a <_write>
 8001ba8:	1c43      	adds	r3, r0, #1
 8001baa:	d102      	bne.n	8001bb2 <_write_r+0x1e>
 8001bac:	682b      	ldr	r3, [r5, #0]
 8001bae:	b103      	cbz	r3, 8001bb2 <_write_r+0x1e>
 8001bb0:	6023      	str	r3, [r4, #0]
 8001bb2:	bd38      	pop	{r3, r4, r5, pc}
 8001bb4:	20000210 	.word	0x20000210

08001bb8 <__errno>:
 8001bb8:	4b01      	ldr	r3, [pc, #4]	@ (8001bc0 <__errno+0x8>)
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000018 	.word	0x20000018

08001bc4 <__libc_init_array>:
 8001bc4:	b570      	push	{r4, r5, r6, lr}
 8001bc6:	2600      	movs	r6, #0
 8001bc8:	4d0c      	ldr	r5, [pc, #48]	@ (8001bfc <__libc_init_array+0x38>)
 8001bca:	4c0d      	ldr	r4, [pc, #52]	@ (8001c00 <__libc_init_array+0x3c>)
 8001bcc:	1b64      	subs	r4, r4, r5
 8001bce:	10a4      	asrs	r4, r4, #2
 8001bd0:	42a6      	cmp	r6, r4
 8001bd2:	d109      	bne.n	8001be8 <__libc_init_array+0x24>
 8001bd4:	f000 fa50 	bl	8002078 <_init>
 8001bd8:	2600      	movs	r6, #0
 8001bda:	4d0a      	ldr	r5, [pc, #40]	@ (8001c04 <__libc_init_array+0x40>)
 8001bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001c08 <__libc_init_array+0x44>)
 8001bde:	1b64      	subs	r4, r4, r5
 8001be0:	10a4      	asrs	r4, r4, #2
 8001be2:	42a6      	cmp	r6, r4
 8001be4:	d105      	bne.n	8001bf2 <__libc_init_array+0x2e>
 8001be6:	bd70      	pop	{r4, r5, r6, pc}
 8001be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bec:	4798      	blx	r3
 8001bee:	3601      	adds	r6, #1
 8001bf0:	e7ee      	b.n	8001bd0 <__libc_init_array+0xc>
 8001bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bf6:	4798      	blx	r3
 8001bf8:	3601      	adds	r6, #1
 8001bfa:	e7f2      	b.n	8001be2 <__libc_init_array+0x1e>
 8001bfc:	080020d0 	.word	0x080020d0
 8001c00:	080020d0 	.word	0x080020d0
 8001c04:	080020d0 	.word	0x080020d0
 8001c08:	080020d4 	.word	0x080020d4

08001c0c <__retarget_lock_init_recursive>:
 8001c0c:	4770      	bx	lr

08001c0e <__retarget_lock_acquire_recursive>:
 8001c0e:	4770      	bx	lr

08001c10 <__retarget_lock_release_recursive>:
 8001c10:	4770      	bx	lr
	...

08001c14 <_free_r>:
 8001c14:	b538      	push	{r3, r4, r5, lr}
 8001c16:	4605      	mov	r5, r0
 8001c18:	2900      	cmp	r1, #0
 8001c1a:	d040      	beq.n	8001c9e <_free_r+0x8a>
 8001c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c20:	1f0c      	subs	r4, r1, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bfb8      	it	lt
 8001c26:	18e4      	addlt	r4, r4, r3
 8001c28:	f000 f8de 	bl	8001de8 <__malloc_lock>
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca0 <_free_r+0x8c>)
 8001c2e:	6813      	ldr	r3, [r2, #0]
 8001c30:	b933      	cbnz	r3, 8001c40 <_free_r+0x2c>
 8001c32:	6063      	str	r3, [r4, #4]
 8001c34:	6014      	str	r4, [r2, #0]
 8001c36:	4628      	mov	r0, r5
 8001c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c3c:	f000 b8da 	b.w	8001df4 <__malloc_unlock>
 8001c40:	42a3      	cmp	r3, r4
 8001c42:	d908      	bls.n	8001c56 <_free_r+0x42>
 8001c44:	6820      	ldr	r0, [r4, #0]
 8001c46:	1821      	adds	r1, r4, r0
 8001c48:	428b      	cmp	r3, r1
 8001c4a:	bf01      	itttt	eq
 8001c4c:	6819      	ldreq	r1, [r3, #0]
 8001c4e:	685b      	ldreq	r3, [r3, #4]
 8001c50:	1809      	addeq	r1, r1, r0
 8001c52:	6021      	streq	r1, [r4, #0]
 8001c54:	e7ed      	b.n	8001c32 <_free_r+0x1e>
 8001c56:	461a      	mov	r2, r3
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	b10b      	cbz	r3, 8001c60 <_free_r+0x4c>
 8001c5c:	42a3      	cmp	r3, r4
 8001c5e:	d9fa      	bls.n	8001c56 <_free_r+0x42>
 8001c60:	6811      	ldr	r1, [r2, #0]
 8001c62:	1850      	adds	r0, r2, r1
 8001c64:	42a0      	cmp	r0, r4
 8001c66:	d10b      	bne.n	8001c80 <_free_r+0x6c>
 8001c68:	6820      	ldr	r0, [r4, #0]
 8001c6a:	4401      	add	r1, r0
 8001c6c:	1850      	adds	r0, r2, r1
 8001c6e:	4283      	cmp	r3, r0
 8001c70:	6011      	str	r1, [r2, #0]
 8001c72:	d1e0      	bne.n	8001c36 <_free_r+0x22>
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4408      	add	r0, r1
 8001c7a:	6010      	str	r0, [r2, #0]
 8001c7c:	6053      	str	r3, [r2, #4]
 8001c7e:	e7da      	b.n	8001c36 <_free_r+0x22>
 8001c80:	d902      	bls.n	8001c88 <_free_r+0x74>
 8001c82:	230c      	movs	r3, #12
 8001c84:	602b      	str	r3, [r5, #0]
 8001c86:	e7d6      	b.n	8001c36 <_free_r+0x22>
 8001c88:	6820      	ldr	r0, [r4, #0]
 8001c8a:	1821      	adds	r1, r4, r0
 8001c8c:	428b      	cmp	r3, r1
 8001c8e:	bf01      	itttt	eq
 8001c90:	6819      	ldreq	r1, [r3, #0]
 8001c92:	685b      	ldreq	r3, [r3, #4]
 8001c94:	1809      	addeq	r1, r1, r0
 8001c96:	6021      	streq	r1, [r4, #0]
 8001c98:	6063      	str	r3, [r4, #4]
 8001c9a:	6054      	str	r4, [r2, #4]
 8001c9c:	e7cb      	b.n	8001c36 <_free_r+0x22>
 8001c9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ca0:	2000021c 	.word	0x2000021c

08001ca4 <sbrk_aligned>:
 8001ca4:	b570      	push	{r4, r5, r6, lr}
 8001ca6:	4e0f      	ldr	r6, [pc, #60]	@ (8001ce4 <sbrk_aligned+0x40>)
 8001ca8:	460c      	mov	r4, r1
 8001caa:	6831      	ldr	r1, [r6, #0]
 8001cac:	4605      	mov	r5, r0
 8001cae:	b911      	cbnz	r1, 8001cb6 <sbrk_aligned+0x12>
 8001cb0:	f000 f9d2 	bl	8002058 <_sbrk_r>
 8001cb4:	6030      	str	r0, [r6, #0]
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	4628      	mov	r0, r5
 8001cba:	f000 f9cd 	bl	8002058 <_sbrk_r>
 8001cbe:	1c43      	adds	r3, r0, #1
 8001cc0:	d103      	bne.n	8001cca <sbrk_aligned+0x26>
 8001cc2:	f04f 34ff 	mov.w	r4, #4294967295
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	bd70      	pop	{r4, r5, r6, pc}
 8001cca:	1cc4      	adds	r4, r0, #3
 8001ccc:	f024 0403 	bic.w	r4, r4, #3
 8001cd0:	42a0      	cmp	r0, r4
 8001cd2:	d0f8      	beq.n	8001cc6 <sbrk_aligned+0x22>
 8001cd4:	1a21      	subs	r1, r4, r0
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	f000 f9be 	bl	8002058 <_sbrk_r>
 8001cdc:	3001      	adds	r0, #1
 8001cde:	d1f2      	bne.n	8001cc6 <sbrk_aligned+0x22>
 8001ce0:	e7ef      	b.n	8001cc2 <sbrk_aligned+0x1e>
 8001ce2:	bf00      	nop
 8001ce4:	20000218 	.word	0x20000218

08001ce8 <_malloc_r>:
 8001ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cec:	1ccd      	adds	r5, r1, #3
 8001cee:	f025 0503 	bic.w	r5, r5, #3
 8001cf2:	3508      	adds	r5, #8
 8001cf4:	2d0c      	cmp	r5, #12
 8001cf6:	bf38      	it	cc
 8001cf8:	250c      	movcc	r5, #12
 8001cfa:	2d00      	cmp	r5, #0
 8001cfc:	4606      	mov	r6, r0
 8001cfe:	db01      	blt.n	8001d04 <_malloc_r+0x1c>
 8001d00:	42a9      	cmp	r1, r5
 8001d02:	d904      	bls.n	8001d0e <_malloc_r+0x26>
 8001d04:	230c      	movs	r3, #12
 8001d06:	6033      	str	r3, [r6, #0]
 8001d08:	2000      	movs	r0, #0
 8001d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001de4 <_malloc_r+0xfc>
 8001d12:	f000 f869 	bl	8001de8 <__malloc_lock>
 8001d16:	f8d8 3000 	ldr.w	r3, [r8]
 8001d1a:	461c      	mov	r4, r3
 8001d1c:	bb44      	cbnz	r4, 8001d70 <_malloc_r+0x88>
 8001d1e:	4629      	mov	r1, r5
 8001d20:	4630      	mov	r0, r6
 8001d22:	f7ff ffbf 	bl	8001ca4 <sbrk_aligned>
 8001d26:	1c43      	adds	r3, r0, #1
 8001d28:	4604      	mov	r4, r0
 8001d2a:	d158      	bne.n	8001dde <_malloc_r+0xf6>
 8001d2c:	f8d8 4000 	ldr.w	r4, [r8]
 8001d30:	4627      	mov	r7, r4
 8001d32:	2f00      	cmp	r7, #0
 8001d34:	d143      	bne.n	8001dbe <_malloc_r+0xd6>
 8001d36:	2c00      	cmp	r4, #0
 8001d38:	d04b      	beq.n	8001dd2 <_malloc_r+0xea>
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	4639      	mov	r1, r7
 8001d3e:	4630      	mov	r0, r6
 8001d40:	eb04 0903 	add.w	r9, r4, r3
 8001d44:	f000 f988 	bl	8002058 <_sbrk_r>
 8001d48:	4581      	cmp	r9, r0
 8001d4a:	d142      	bne.n	8001dd2 <_malloc_r+0xea>
 8001d4c:	6821      	ldr	r1, [r4, #0]
 8001d4e:	4630      	mov	r0, r6
 8001d50:	1a6d      	subs	r5, r5, r1
 8001d52:	4629      	mov	r1, r5
 8001d54:	f7ff ffa6 	bl	8001ca4 <sbrk_aligned>
 8001d58:	3001      	adds	r0, #1
 8001d5a:	d03a      	beq.n	8001dd2 <_malloc_r+0xea>
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	442b      	add	r3, r5
 8001d60:	6023      	str	r3, [r4, #0]
 8001d62:	f8d8 3000 	ldr.w	r3, [r8]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	bb62      	cbnz	r2, 8001dc4 <_malloc_r+0xdc>
 8001d6a:	f8c8 7000 	str.w	r7, [r8]
 8001d6e:	e00f      	b.n	8001d90 <_malloc_r+0xa8>
 8001d70:	6822      	ldr	r2, [r4, #0]
 8001d72:	1b52      	subs	r2, r2, r5
 8001d74:	d420      	bmi.n	8001db8 <_malloc_r+0xd0>
 8001d76:	2a0b      	cmp	r2, #11
 8001d78:	d917      	bls.n	8001daa <_malloc_r+0xc2>
 8001d7a:	1961      	adds	r1, r4, r5
 8001d7c:	42a3      	cmp	r3, r4
 8001d7e:	6025      	str	r5, [r4, #0]
 8001d80:	bf18      	it	ne
 8001d82:	6059      	strne	r1, [r3, #4]
 8001d84:	6863      	ldr	r3, [r4, #4]
 8001d86:	bf08      	it	eq
 8001d88:	f8c8 1000 	streq.w	r1, [r8]
 8001d8c:	5162      	str	r2, [r4, r5]
 8001d8e:	604b      	str	r3, [r1, #4]
 8001d90:	4630      	mov	r0, r6
 8001d92:	f000 f82f 	bl	8001df4 <__malloc_unlock>
 8001d96:	f104 000b 	add.w	r0, r4, #11
 8001d9a:	1d23      	adds	r3, r4, #4
 8001d9c:	f020 0007 	bic.w	r0, r0, #7
 8001da0:	1ac2      	subs	r2, r0, r3
 8001da2:	bf1c      	itt	ne
 8001da4:	1a1b      	subne	r3, r3, r0
 8001da6:	50a3      	strne	r3, [r4, r2]
 8001da8:	e7af      	b.n	8001d0a <_malloc_r+0x22>
 8001daa:	6862      	ldr	r2, [r4, #4]
 8001dac:	42a3      	cmp	r3, r4
 8001dae:	bf0c      	ite	eq
 8001db0:	f8c8 2000 	streq.w	r2, [r8]
 8001db4:	605a      	strne	r2, [r3, #4]
 8001db6:	e7eb      	b.n	8001d90 <_malloc_r+0xa8>
 8001db8:	4623      	mov	r3, r4
 8001dba:	6864      	ldr	r4, [r4, #4]
 8001dbc:	e7ae      	b.n	8001d1c <_malloc_r+0x34>
 8001dbe:	463c      	mov	r4, r7
 8001dc0:	687f      	ldr	r7, [r7, #4]
 8001dc2:	e7b6      	b.n	8001d32 <_malloc_r+0x4a>
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	42a3      	cmp	r3, r4
 8001dca:	d1fb      	bne.n	8001dc4 <_malloc_r+0xdc>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	6053      	str	r3, [r2, #4]
 8001dd0:	e7de      	b.n	8001d90 <_malloc_r+0xa8>
 8001dd2:	230c      	movs	r3, #12
 8001dd4:	4630      	mov	r0, r6
 8001dd6:	6033      	str	r3, [r6, #0]
 8001dd8:	f000 f80c 	bl	8001df4 <__malloc_unlock>
 8001ddc:	e794      	b.n	8001d08 <_malloc_r+0x20>
 8001dde:	6005      	str	r5, [r0, #0]
 8001de0:	e7d6      	b.n	8001d90 <_malloc_r+0xa8>
 8001de2:	bf00      	nop
 8001de4:	2000021c 	.word	0x2000021c

08001de8 <__malloc_lock>:
 8001de8:	4801      	ldr	r0, [pc, #4]	@ (8001df0 <__malloc_lock+0x8>)
 8001dea:	f7ff bf10 	b.w	8001c0e <__retarget_lock_acquire_recursive>
 8001dee:	bf00      	nop
 8001df0:	20000214 	.word	0x20000214

08001df4 <__malloc_unlock>:
 8001df4:	4801      	ldr	r0, [pc, #4]	@ (8001dfc <__malloc_unlock+0x8>)
 8001df6:	f7ff bf0b 	b.w	8001c10 <__retarget_lock_release_recursive>
 8001dfa:	bf00      	nop
 8001dfc:	20000214 	.word	0x20000214

08001e00 <__sflush_r>:
 8001e00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	0716      	lsls	r6, r2, #28
 8001e08:	4605      	mov	r5, r0
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	d454      	bmi.n	8001eb8 <__sflush_r+0xb8>
 8001e0e:	684b      	ldr	r3, [r1, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	dc02      	bgt.n	8001e1a <__sflush_r+0x1a>
 8001e14:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	dd48      	ble.n	8001eac <__sflush_r+0xac>
 8001e1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e1c:	2e00      	cmp	r6, #0
 8001e1e:	d045      	beq.n	8001eac <__sflush_r+0xac>
 8001e20:	2300      	movs	r3, #0
 8001e22:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001e26:	682f      	ldr	r7, [r5, #0]
 8001e28:	6a21      	ldr	r1, [r4, #32]
 8001e2a:	602b      	str	r3, [r5, #0]
 8001e2c:	d030      	beq.n	8001e90 <__sflush_r+0x90>
 8001e2e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e30:	89a3      	ldrh	r3, [r4, #12]
 8001e32:	0759      	lsls	r1, r3, #29
 8001e34:	d505      	bpl.n	8001e42 <__sflush_r+0x42>
 8001e36:	6863      	ldr	r3, [r4, #4]
 8001e38:	1ad2      	subs	r2, r2, r3
 8001e3a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e3c:	b10b      	cbz	r3, 8001e42 <__sflush_r+0x42>
 8001e3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e40:	1ad2      	subs	r2, r2, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	4628      	mov	r0, r5
 8001e46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e48:	6a21      	ldr	r1, [r4, #32]
 8001e4a:	47b0      	blx	r6
 8001e4c:	1c43      	adds	r3, r0, #1
 8001e4e:	89a3      	ldrh	r3, [r4, #12]
 8001e50:	d106      	bne.n	8001e60 <__sflush_r+0x60>
 8001e52:	6829      	ldr	r1, [r5, #0]
 8001e54:	291d      	cmp	r1, #29
 8001e56:	d82b      	bhi.n	8001eb0 <__sflush_r+0xb0>
 8001e58:	4a28      	ldr	r2, [pc, #160]	@ (8001efc <__sflush_r+0xfc>)
 8001e5a:	410a      	asrs	r2, r1
 8001e5c:	07d6      	lsls	r6, r2, #31
 8001e5e:	d427      	bmi.n	8001eb0 <__sflush_r+0xb0>
 8001e60:	2200      	movs	r2, #0
 8001e62:	6062      	str	r2, [r4, #4]
 8001e64:	6922      	ldr	r2, [r4, #16]
 8001e66:	04d9      	lsls	r1, r3, #19
 8001e68:	6022      	str	r2, [r4, #0]
 8001e6a:	d504      	bpl.n	8001e76 <__sflush_r+0x76>
 8001e6c:	1c42      	adds	r2, r0, #1
 8001e6e:	d101      	bne.n	8001e74 <__sflush_r+0x74>
 8001e70:	682b      	ldr	r3, [r5, #0]
 8001e72:	b903      	cbnz	r3, 8001e76 <__sflush_r+0x76>
 8001e74:	6560      	str	r0, [r4, #84]	@ 0x54
 8001e76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e78:	602f      	str	r7, [r5, #0]
 8001e7a:	b1b9      	cbz	r1, 8001eac <__sflush_r+0xac>
 8001e7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e80:	4299      	cmp	r1, r3
 8001e82:	d002      	beq.n	8001e8a <__sflush_r+0x8a>
 8001e84:	4628      	mov	r0, r5
 8001e86:	f7ff fec5 	bl	8001c14 <_free_r>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e8e:	e00d      	b.n	8001eac <__sflush_r+0xac>
 8001e90:	2301      	movs	r3, #1
 8001e92:	4628      	mov	r0, r5
 8001e94:	47b0      	blx	r6
 8001e96:	4602      	mov	r2, r0
 8001e98:	1c50      	adds	r0, r2, #1
 8001e9a:	d1c9      	bne.n	8001e30 <__sflush_r+0x30>
 8001e9c:	682b      	ldr	r3, [r5, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0c6      	beq.n	8001e30 <__sflush_r+0x30>
 8001ea2:	2b1d      	cmp	r3, #29
 8001ea4:	d001      	beq.n	8001eaa <__sflush_r+0xaa>
 8001ea6:	2b16      	cmp	r3, #22
 8001ea8:	d11d      	bne.n	8001ee6 <__sflush_r+0xe6>
 8001eaa:	602f      	str	r7, [r5, #0]
 8001eac:	2000      	movs	r0, #0
 8001eae:	e021      	b.n	8001ef4 <__sflush_r+0xf4>
 8001eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	e01a      	b.n	8001eee <__sflush_r+0xee>
 8001eb8:	690f      	ldr	r7, [r1, #16]
 8001eba:	2f00      	cmp	r7, #0
 8001ebc:	d0f6      	beq.n	8001eac <__sflush_r+0xac>
 8001ebe:	0793      	lsls	r3, r2, #30
 8001ec0:	bf18      	it	ne
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	680e      	ldr	r6, [r1, #0]
 8001ec6:	bf08      	it	eq
 8001ec8:	694b      	ldreq	r3, [r1, #20]
 8001eca:	1bf6      	subs	r6, r6, r7
 8001ecc:	600f      	str	r7, [r1, #0]
 8001ece:	608b      	str	r3, [r1, #8]
 8001ed0:	2e00      	cmp	r6, #0
 8001ed2:	ddeb      	ble.n	8001eac <__sflush_r+0xac>
 8001ed4:	4633      	mov	r3, r6
 8001ed6:	463a      	mov	r2, r7
 8001ed8:	4628      	mov	r0, r5
 8001eda:	6a21      	ldr	r1, [r4, #32]
 8001edc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001ee0:	47e0      	blx	ip
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	dc07      	bgt.n	8001ef6 <__sflush_r+0xf6>
 8001ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eee:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef2:	81a3      	strh	r3, [r4, #12]
 8001ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ef6:	4407      	add	r7, r0
 8001ef8:	1a36      	subs	r6, r6, r0
 8001efa:	e7e9      	b.n	8001ed0 <__sflush_r+0xd0>
 8001efc:	dfbffffe 	.word	0xdfbffffe

08001f00 <_fflush_r>:
 8001f00:	b538      	push	{r3, r4, r5, lr}
 8001f02:	690b      	ldr	r3, [r1, #16]
 8001f04:	4605      	mov	r5, r0
 8001f06:	460c      	mov	r4, r1
 8001f08:	b913      	cbnz	r3, 8001f10 <_fflush_r+0x10>
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	bd38      	pop	{r3, r4, r5, pc}
 8001f10:	b118      	cbz	r0, 8001f1a <_fflush_r+0x1a>
 8001f12:	6a03      	ldr	r3, [r0, #32]
 8001f14:	b90b      	cbnz	r3, 8001f1a <_fflush_r+0x1a>
 8001f16:	f7ff fc95 	bl	8001844 <__sinit>
 8001f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f3      	beq.n	8001f0a <_fflush_r+0xa>
 8001f22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f24:	07d0      	lsls	r0, r2, #31
 8001f26:	d404      	bmi.n	8001f32 <_fflush_r+0x32>
 8001f28:	0599      	lsls	r1, r3, #22
 8001f2a:	d402      	bmi.n	8001f32 <_fflush_r+0x32>
 8001f2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f2e:	f7ff fe6e 	bl	8001c0e <__retarget_lock_acquire_recursive>
 8001f32:	4628      	mov	r0, r5
 8001f34:	4621      	mov	r1, r4
 8001f36:	f7ff ff63 	bl	8001e00 <__sflush_r>
 8001f3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	07da      	lsls	r2, r3, #31
 8001f40:	d4e4      	bmi.n	8001f0c <_fflush_r+0xc>
 8001f42:	89a3      	ldrh	r3, [r4, #12]
 8001f44:	059b      	lsls	r3, r3, #22
 8001f46:	d4e1      	bmi.n	8001f0c <_fflush_r+0xc>
 8001f48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f4a:	f7ff fe61 	bl	8001c10 <__retarget_lock_release_recursive>
 8001f4e:	e7dd      	b.n	8001f0c <_fflush_r+0xc>

08001f50 <__swhatbuf_r>:
 8001f50:	b570      	push	{r4, r5, r6, lr}
 8001f52:	460c      	mov	r4, r1
 8001f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f58:	4615      	mov	r5, r2
 8001f5a:	2900      	cmp	r1, #0
 8001f5c:	461e      	mov	r6, r3
 8001f5e:	b096      	sub	sp, #88	@ 0x58
 8001f60:	da0c      	bge.n	8001f7c <__swhatbuf_r+0x2c>
 8001f62:	89a3      	ldrh	r3, [r4, #12]
 8001f64:	2100      	movs	r1, #0
 8001f66:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f6a:	bf14      	ite	ne
 8001f6c:	2340      	movne	r3, #64	@ 0x40
 8001f6e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001f72:	2000      	movs	r0, #0
 8001f74:	6031      	str	r1, [r6, #0]
 8001f76:	602b      	str	r3, [r5, #0]
 8001f78:	b016      	add	sp, #88	@ 0x58
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}
 8001f7c:	466a      	mov	r2, sp
 8001f7e:	f000 f849 	bl	8002014 <_fstat_r>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	dbed      	blt.n	8001f62 <__swhatbuf_r+0x12>
 8001f86:	9901      	ldr	r1, [sp, #4]
 8001f88:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001f8c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001f90:	4259      	negs	r1, r3
 8001f92:	4159      	adcs	r1, r3
 8001f94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f98:	e7eb      	b.n	8001f72 <__swhatbuf_r+0x22>

08001f9a <__smakebuf_r>:
 8001f9a:	898b      	ldrh	r3, [r1, #12]
 8001f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f9e:	079d      	lsls	r5, r3, #30
 8001fa0:	4606      	mov	r6, r0
 8001fa2:	460c      	mov	r4, r1
 8001fa4:	d507      	bpl.n	8001fb6 <__smakebuf_r+0x1c>
 8001fa6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001faa:	6023      	str	r3, [r4, #0]
 8001fac:	6123      	str	r3, [r4, #16]
 8001fae:	2301      	movs	r3, #1
 8001fb0:	6163      	str	r3, [r4, #20]
 8001fb2:	b003      	add	sp, #12
 8001fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb6:	466a      	mov	r2, sp
 8001fb8:	ab01      	add	r3, sp, #4
 8001fba:	f7ff ffc9 	bl	8001f50 <__swhatbuf_r>
 8001fbe:	9f00      	ldr	r7, [sp, #0]
 8001fc0:	4605      	mov	r5, r0
 8001fc2:	4639      	mov	r1, r7
 8001fc4:	4630      	mov	r0, r6
 8001fc6:	f7ff fe8f 	bl	8001ce8 <_malloc_r>
 8001fca:	b948      	cbnz	r0, 8001fe0 <__smakebuf_r+0x46>
 8001fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fd0:	059a      	lsls	r2, r3, #22
 8001fd2:	d4ee      	bmi.n	8001fb2 <__smakebuf_r+0x18>
 8001fd4:	f023 0303 	bic.w	r3, r3, #3
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	81a3      	strh	r3, [r4, #12]
 8001fde:	e7e2      	b.n	8001fa6 <__smakebuf_r+0xc>
 8001fe0:	89a3      	ldrh	r3, [r4, #12]
 8001fe2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fea:	81a3      	strh	r3, [r4, #12]
 8001fec:	9b01      	ldr	r3, [sp, #4]
 8001fee:	6020      	str	r0, [r4, #0]
 8001ff0:	b15b      	cbz	r3, 800200a <__smakebuf_r+0x70>
 8001ff2:	4630      	mov	r0, r6
 8001ff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ff8:	f000 f81e 	bl	8002038 <_isatty_r>
 8001ffc:	b128      	cbz	r0, 800200a <__smakebuf_r+0x70>
 8001ffe:	89a3      	ldrh	r3, [r4, #12]
 8002000:	f023 0303 	bic.w	r3, r3, #3
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	81a3      	strh	r3, [r4, #12]
 800200a:	89a3      	ldrh	r3, [r4, #12]
 800200c:	431d      	orrs	r5, r3
 800200e:	81a5      	strh	r5, [r4, #12]
 8002010:	e7cf      	b.n	8001fb2 <__smakebuf_r+0x18>
	...

08002014 <_fstat_r>:
 8002014:	b538      	push	{r3, r4, r5, lr}
 8002016:	2300      	movs	r3, #0
 8002018:	4d06      	ldr	r5, [pc, #24]	@ (8002034 <_fstat_r+0x20>)
 800201a:	4604      	mov	r4, r0
 800201c:	4608      	mov	r0, r1
 800201e:	4611      	mov	r1, r2
 8002020:	602b      	str	r3, [r5, #0]
 8002022:	f7fe faa1 	bl	8000568 <_fstat>
 8002026:	1c43      	adds	r3, r0, #1
 8002028:	d102      	bne.n	8002030 <_fstat_r+0x1c>
 800202a:	682b      	ldr	r3, [r5, #0]
 800202c:	b103      	cbz	r3, 8002030 <_fstat_r+0x1c>
 800202e:	6023      	str	r3, [r4, #0]
 8002030:	bd38      	pop	{r3, r4, r5, pc}
 8002032:	bf00      	nop
 8002034:	20000210 	.word	0x20000210

08002038 <_isatty_r>:
 8002038:	b538      	push	{r3, r4, r5, lr}
 800203a:	2300      	movs	r3, #0
 800203c:	4d05      	ldr	r5, [pc, #20]	@ (8002054 <_isatty_r+0x1c>)
 800203e:	4604      	mov	r4, r0
 8002040:	4608      	mov	r0, r1
 8002042:	602b      	str	r3, [r5, #0]
 8002044:	f7fe fa9f 	bl	8000586 <_isatty>
 8002048:	1c43      	adds	r3, r0, #1
 800204a:	d102      	bne.n	8002052 <_isatty_r+0x1a>
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	b103      	cbz	r3, 8002052 <_isatty_r+0x1a>
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	bd38      	pop	{r3, r4, r5, pc}
 8002054:	20000210 	.word	0x20000210

08002058 <_sbrk_r>:
 8002058:	b538      	push	{r3, r4, r5, lr}
 800205a:	2300      	movs	r3, #0
 800205c:	4d05      	ldr	r5, [pc, #20]	@ (8002074 <_sbrk_r+0x1c>)
 800205e:	4604      	mov	r4, r0
 8002060:	4608      	mov	r0, r1
 8002062:	602b      	str	r3, [r5, #0]
 8002064:	f7fe faa6 	bl	80005b4 <_sbrk>
 8002068:	1c43      	adds	r3, r0, #1
 800206a:	d102      	bne.n	8002072 <_sbrk_r+0x1a>
 800206c:	682b      	ldr	r3, [r5, #0]
 800206e:	b103      	cbz	r3, 8002072 <_sbrk_r+0x1a>
 8002070:	6023      	str	r3, [r4, #0]
 8002072:	bd38      	pop	{r3, r4, r5, pc}
 8002074:	20000210 	.word	0x20000210

08002078 <_init>:
 8002078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207a:	bf00      	nop
 800207c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800207e:	bc08      	pop	{r3}
 8002080:	469e      	mov	lr, r3
 8002082:	4770      	bx	lr

08002084 <_fini>:
 8002084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002086:	bf00      	nop
 8002088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800208a:	bc08      	pop	{r3}
 800208c:	469e      	mov	lr, r3
 800208e:	4770      	bx	lr
