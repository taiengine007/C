
011_spi_1_max6675_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003a08  08003a08  00004a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a84  08003a84  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003a84  08003a84  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a84  08003a84  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a84  08003a84  00004a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a88  08003a88  00004a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003a8c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000068  08003af4  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08003af4  0000528c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f44  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191c  00000000  00000000  0000dfd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  0000f8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c1  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180f9  00000000  00000000  00010899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acd2  00000000  00000000  00028992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008592f  00000000  00000000  00033664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8f93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d28  00000000  00000000  000b8fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000bbd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080039f0 	.word	0x080039f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080039f0 	.word	0x080039f0

0800014c <__aeabi_dmul>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000152:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015a:	bf1d      	ittte	ne
 800015c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000160:	ea94 0f0c 	teqne	r4, ip
 8000164:	ea95 0f0c 	teqne	r5, ip
 8000168:	f000 f8de 	bleq	8000328 <__aeabi_dmul+0x1dc>
 800016c:	442c      	add	r4, r5
 800016e:	ea81 0603 	eor.w	r6, r1, r3
 8000172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800017e:	bf18      	it	ne
 8000180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000184:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000188:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800018c:	d038      	beq.n	8000200 <__aeabi_dmul+0xb4>
 800018e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000192:	f04f 0500 	mov.w	r5, #0
 8000196:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800019e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a2:	f04f 0600 	mov.w	r6, #0
 80001a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001aa:	f09c 0f00 	teq	ip, #0
 80001ae:	bf18      	it	ne
 80001b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c0:	d204      	bcs.n	80001cc <__aeabi_dmul+0x80>
 80001c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001c6:	416d      	adcs	r5, r5
 80001c8:	eb46 0606 	adc.w	r6, r6, r6
 80001cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e4:	bf88      	it	hi
 80001e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ea:	d81e      	bhi.n	800022a <__aeabi_dmul+0xde>
 80001ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f0:	bf08      	it	eq
 80001f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001f6:	f150 0000 	adcs.w	r0, r0, #0
 80001fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000204:	ea46 0101 	orr.w	r1, r6, r1
 8000208:	ea40 0002 	orr.w	r0, r0, r2
 800020c:	ea81 0103 	eor.w	r1, r1, r3
 8000210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000214:	bfc2      	ittt	gt
 8000216:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800021e:	bd70      	popgt	{r4, r5, r6, pc}
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000224:	f04f 0e00 	mov.w	lr, #0
 8000228:	3c01      	subs	r4, #1
 800022a:	f300 80ab 	bgt.w	8000384 <__aeabi_dmul+0x238>
 800022e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000232:	bfde      	ittt	le
 8000234:	2000      	movle	r0, #0
 8000236:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023a:	bd70      	pople	{r4, r5, r6, pc}
 800023c:	f1c4 0400 	rsb	r4, r4, #0
 8000240:	3c20      	subs	r4, #32
 8000242:	da35      	bge.n	80002b0 <__aeabi_dmul+0x164>
 8000244:	340c      	adds	r4, #12
 8000246:	dc1b      	bgt.n	8000280 <__aeabi_dmul+0x134>
 8000248:	f104 0414 	add.w	r4, r4, #20
 800024c:	f1c4 0520 	rsb	r5, r4, #32
 8000250:	fa00 f305 	lsl.w	r3, r0, r5
 8000254:	fa20 f004 	lsr.w	r0, r0, r4
 8000258:	fa01 f205 	lsl.w	r2, r1, r5
 800025c:	ea40 0002 	orr.w	r0, r0, r2
 8000260:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000264:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800026c:	fa21 f604 	lsr.w	r6, r1, r4
 8000270:	eb42 0106 	adc.w	r1, r2, r6
 8000274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000278:	bf08      	it	eq
 800027a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f1c4 040c 	rsb	r4, r4, #12
 8000284:	f1c4 0520 	rsb	r5, r4, #32
 8000288:	fa00 f304 	lsl.w	r3, r0, r4
 800028c:	fa20 f005 	lsr.w	r0, r0, r5
 8000290:	fa01 f204 	lsl.w	r2, r1, r4
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a8:	bf08      	it	eq
 80002aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f205 	lsl.w	r2, r0, r5
 80002b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002bc:	fa20 f304 	lsr.w	r3, r0, r4
 80002c0:	fa01 f205 	lsl.w	r2, r1, r5
 80002c4:	ea43 0302 	orr.w	r3, r3, r2
 80002c8:	fa21 f004 	lsr.w	r0, r1, r4
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d0:	fa21 f204 	lsr.w	r2, r1, r4
 80002d4:	ea20 0002 	bic.w	r0, r0, r2
 80002d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e0:	bf08      	it	eq
 80002e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f094 0f00 	teq	r4, #0
 80002ec:	d10f      	bne.n	800030e <__aeabi_dmul+0x1c2>
 80002ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f2:	0040      	lsls	r0, r0, #1
 80002f4:	eb41 0101 	adc.w	r1, r1, r1
 80002f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80002fc:	bf08      	it	eq
 80002fe:	3c01      	subeq	r4, #1
 8000300:	d0f7      	beq.n	80002f2 <__aeabi_dmul+0x1a6>
 8000302:	ea41 0106 	orr.w	r1, r1, r6
 8000306:	f095 0f00 	teq	r5, #0
 800030a:	bf18      	it	ne
 800030c:	4770      	bxne	lr
 800030e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	eb43 0303 	adc.w	r3, r3, r3
 8000318:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800031c:	bf08      	it	eq
 800031e:	3d01      	subeq	r5, #1
 8000320:	d0f7      	beq.n	8000312 <__aeabi_dmul+0x1c6>
 8000322:	ea43 0306 	orr.w	r3, r3, r6
 8000326:	4770      	bx	lr
 8000328:	ea94 0f0c 	teq	r4, ip
 800032c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000330:	bf18      	it	ne
 8000332:	ea95 0f0c 	teqne	r5, ip
 8000336:	d00c      	beq.n	8000352 <__aeabi_dmul+0x206>
 8000338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800033c:	bf18      	it	ne
 800033e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000342:	d1d1      	bne.n	80002e8 <__aeabi_dmul+0x19c>
 8000344:	ea81 0103 	eor.w	r1, r1, r3
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	f04f 0000 	mov.w	r0, #0
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000356:	bf06      	itte	eq
 8000358:	4610      	moveq	r0, r2
 800035a:	4619      	moveq	r1, r3
 800035c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000360:	d019      	beq.n	8000396 <__aeabi_dmul+0x24a>
 8000362:	ea94 0f0c 	teq	r4, ip
 8000366:	d102      	bne.n	800036e <__aeabi_dmul+0x222>
 8000368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800036c:	d113      	bne.n	8000396 <__aeabi_dmul+0x24a>
 800036e:	ea95 0f0c 	teq	r5, ip
 8000372:	d105      	bne.n	8000380 <__aeabi_dmul+0x234>
 8000374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000378:	bf1c      	itt	ne
 800037a:	4610      	movne	r0, r2
 800037c:	4619      	movne	r1, r3
 800037e:	d10a      	bne.n	8000396 <__aeabi_dmul+0x24a>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800038c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800039e:	bd70      	pop	{r4, r5, r6, pc}

080003a0 <__aeabi_fmul>:
 80003a0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a8:	bf1e      	ittt	ne
 80003aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ae:	ea92 0f0c 	teqne	r2, ip
 80003b2:	ea93 0f0c 	teqne	r3, ip
 80003b6:	d06f      	beq.n	8000498 <__aeabi_fmul+0xf8>
 80003b8:	441a      	add	r2, r3
 80003ba:	ea80 0c01 	eor.w	ip, r0, r1
 80003be:	0240      	lsls	r0, r0, #9
 80003c0:	bf18      	it	ne
 80003c2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003c6:	d01e      	beq.n	8000406 <__aeabi_fmul+0x66>
 80003c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003cc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d4:	fba0 3101 	umull	r3, r1, r0, r1
 80003d8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003dc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003e0:	bf3e      	ittt	cc
 80003e2:	0049      	lslcc	r1, r1, #1
 80003e4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e8:	005b      	lslcc	r3, r3, #1
 80003ea:	ea40 0001 	orr.w	r0, r0, r1
 80003ee:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003f2:	2afd      	cmp	r2, #253	@ 0xfd
 80003f4:	d81d      	bhi.n	8000432 <__aeabi_fmul+0x92>
 80003f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003fe:	bf08      	it	eq
 8000400:	f020 0001 	biceq.w	r0, r0, #1
 8000404:	4770      	bx	lr
 8000406:	f090 0f00 	teq	r0, #0
 800040a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800040e:	bf08      	it	eq
 8000410:	0249      	lsleq	r1, r1, #9
 8000412:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000416:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041a:	3a7f      	subs	r2, #127	@ 0x7f
 800041c:	bfc2      	ittt	gt
 800041e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000422:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000426:	4770      	bxgt	lr
 8000428:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800042c:	f04f 0300 	mov.w	r3, #0
 8000430:	3a01      	subs	r2, #1
 8000432:	dc5d      	bgt.n	80004f0 <__aeabi_fmul+0x150>
 8000434:	f112 0f19 	cmn.w	r2, #25
 8000438:	bfdc      	itt	le
 800043a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800043e:	4770      	bxle	lr
 8000440:	f1c2 0200 	rsb	r2, r2, #0
 8000444:	0041      	lsls	r1, r0, #1
 8000446:	fa21 f102 	lsr.w	r1, r1, r2
 800044a:	f1c2 0220 	rsb	r2, r2, #32
 800044e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000452:	ea5f 0031 	movs.w	r0, r1, rrx
 8000456:	f140 0000 	adc.w	r0, r0, #0
 800045a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800045e:	bf08      	it	eq
 8000460:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000464:	4770      	bx	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800046e:	bf02      	ittt	eq
 8000470:	0040      	lsleq	r0, r0, #1
 8000472:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000476:	3a01      	subeq	r2, #1
 8000478:	d0f9      	beq.n	800046e <__aeabi_fmul+0xce>
 800047a:	ea40 000c 	orr.w	r0, r0, ip
 800047e:	f093 0f00 	teq	r3, #0
 8000482:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000486:	bf02      	ittt	eq
 8000488:	0049      	lsleq	r1, r1, #1
 800048a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800048e:	3b01      	subeq	r3, #1
 8000490:	d0f9      	beq.n	8000486 <__aeabi_fmul+0xe6>
 8000492:	ea41 010c 	orr.w	r1, r1, ip
 8000496:	e78f      	b.n	80003b8 <__aeabi_fmul+0x18>
 8000498:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	bf18      	it	ne
 80004a2:	ea93 0f0c 	teqne	r3, ip
 80004a6:	d00a      	beq.n	80004be <__aeabi_fmul+0x11e>
 80004a8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80004ac:	bf18      	it	ne
 80004ae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80004b2:	d1d8      	bne.n	8000466 <__aeabi_fmul+0xc6>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f090 0f00 	teq	r0, #0
 80004c2:	bf17      	itett	ne
 80004c4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004c8:	4608      	moveq	r0, r1
 80004ca:	f091 0f00 	teqne	r1, #0
 80004ce:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004d2:	d014      	beq.n	80004fe <__aeabi_fmul+0x15e>
 80004d4:	ea92 0f0c 	teq	r2, ip
 80004d8:	d101      	bne.n	80004de <__aeabi_fmul+0x13e>
 80004da:	0242      	lsls	r2, r0, #9
 80004dc:	d10f      	bne.n	80004fe <__aeabi_fmul+0x15e>
 80004de:	ea93 0f0c 	teq	r3, ip
 80004e2:	d103      	bne.n	80004ec <__aeabi_fmul+0x14c>
 80004e4:	024b      	lsls	r3, r1, #9
 80004e6:	bf18      	it	ne
 80004e8:	4608      	movne	r0, r1
 80004ea:	d108      	bne.n	80004fe <__aeabi_fmul+0x15e>
 80004ec:	ea80 0001 	eor.w	r0, r0, r1
 80004f0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004f4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004f8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004fc:	4770      	bx	lr
 80004fe:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000502:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000506:	4770      	bx	lr

08000508 <__aeabi_drsub>:
 8000508:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	e002      	b.n	8000514 <__adddf3>
 800050e:	bf00      	nop

08000510 <__aeabi_dsub>:
 8000510:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000514 <__adddf3>:
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800051a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051e:	ea94 0f05 	teq	r4, r5
 8000522:	bf08      	it	eq
 8000524:	ea90 0f02 	teqeq	r0, r2
 8000528:	bf1f      	itttt	ne
 800052a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000532:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000536:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053a:	f000 80e2 	beq.w	8000702 <__adddf3+0x1ee>
 800053e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000542:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000546:	bfb8      	it	lt
 8000548:	426d      	neglt	r5, r5
 800054a:	dd0c      	ble.n	8000566 <__adddf3+0x52>
 800054c:	442c      	add	r4, r5
 800054e:	ea80 0202 	eor.w	r2, r0, r2
 8000552:	ea81 0303 	eor.w	r3, r1, r3
 8000556:	ea82 0000 	eor.w	r0, r2, r0
 800055a:	ea83 0101 	eor.w	r1, r3, r1
 800055e:	ea80 0202 	eor.w	r2, r0, r2
 8000562:	ea81 0303 	eor.w	r3, r1, r3
 8000566:	2d36      	cmp	r5, #54	@ 0x36
 8000568:	bf88      	it	hi
 800056a:	bd30      	pophi	{r4, r5, pc}
 800056c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000570:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000574:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000578:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x70>
 800057e:	4240      	negs	r0, r0
 8000580:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000584:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000588:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800058c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000590:	d002      	beq.n	8000598 <__adddf3+0x84>
 8000592:	4252      	negs	r2, r2
 8000594:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000598:	ea94 0f05 	teq	r4, r5
 800059c:	f000 80a7 	beq.w	80006ee <__adddf3+0x1da>
 80005a0:	f1a4 0401 	sub.w	r4, r4, #1
 80005a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a8:	db0d      	blt.n	80005c6 <__adddf3+0xb2>
 80005aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ae:	fa22 f205 	lsr.w	r2, r2, r5
 80005b2:	1880      	adds	r0, r0, r2
 80005b4:	f141 0100 	adc.w	r1, r1, #0
 80005b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80005bc:	1880      	adds	r0, r0, r2
 80005be:	fa43 f305 	asr.w	r3, r3, r5
 80005c2:	4159      	adcs	r1, r3
 80005c4:	e00e      	b.n	80005e4 <__adddf3+0xd0>
 80005c6:	f1a5 0520 	sub.w	r5, r5, #32
 80005ca:	f10e 0e20 	add.w	lr, lr, #32
 80005ce:	2a01      	cmp	r2, #1
 80005d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d4:	bf28      	it	cs
 80005d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	18c0      	adds	r0, r0, r3
 80005e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e8:	d507      	bpl.n	80005fa <__adddf3+0xe6>
 80005ea:	f04f 0e00 	mov.w	lr, #0
 80005ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80005f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80005fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fe:	d31b      	bcc.n	8000638 <__adddf3+0x124>
 8000600:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000604:	d30c      	bcc.n	8000620 <__adddf3+0x10c>
 8000606:	0849      	lsrs	r1, r1, #1
 8000608:	ea5f 0030 	movs.w	r0, r0, rrx
 800060c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000610:	f104 0401 	add.w	r4, r4, #1
 8000614:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000618:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800061c:	f080 809a 	bcs.w	8000754 <__adddf3+0x240>
 8000620:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	ea41 0105 	orr.w	r1, r1, r5
 8000636:	bd30      	pop	{r4, r5, pc}
 8000638:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800063c:	4140      	adcs	r0, r0
 800063e:	eb41 0101 	adc.w	r1, r1, r1
 8000642:	3c01      	subs	r4, #1
 8000644:	bf28      	it	cs
 8000646:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800064a:	d2e9      	bcs.n	8000620 <__adddf3+0x10c>
 800064c:	f091 0f00 	teq	r1, #0
 8000650:	bf04      	itt	eq
 8000652:	4601      	moveq	r1, r0
 8000654:	2000      	moveq	r0, #0
 8000656:	fab1 f381 	clz	r3, r1
 800065a:	bf08      	it	eq
 800065c:	3320      	addeq	r3, #32
 800065e:	f1a3 030b 	sub.w	r3, r3, #11
 8000662:	f1b3 0220 	subs.w	r2, r3, #32
 8000666:	da0c      	bge.n	8000682 <__adddf3+0x16e>
 8000668:	320c      	adds	r2, #12
 800066a:	dd08      	ble.n	800067e <__adddf3+0x16a>
 800066c:	f102 0c14 	add.w	ip, r2, #20
 8000670:	f1c2 020c 	rsb	r2, r2, #12
 8000674:	fa01 f00c 	lsl.w	r0, r1, ip
 8000678:	fa21 f102 	lsr.w	r1, r1, r2
 800067c:	e00c      	b.n	8000698 <__adddf3+0x184>
 800067e:	f102 0214 	add.w	r2, r2, #20
 8000682:	bfd8      	it	le
 8000684:	f1c2 0c20 	rsble	ip, r2, #32
 8000688:	fa01 f102 	lsl.w	r1, r1, r2
 800068c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000690:	bfdc      	itt	le
 8000692:	ea41 010c 	orrle.w	r1, r1, ip
 8000696:	4090      	lslle	r0, r2
 8000698:	1ae4      	subs	r4, r4, r3
 800069a:	bfa2      	ittt	ge
 800069c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a0:	4329      	orrge	r1, r5
 80006a2:	bd30      	popge	{r4, r5, pc}
 80006a4:	ea6f 0404 	mvn.w	r4, r4
 80006a8:	3c1f      	subs	r4, #31
 80006aa:	da1c      	bge.n	80006e6 <__adddf3+0x1d2>
 80006ac:	340c      	adds	r4, #12
 80006ae:	dc0e      	bgt.n	80006ce <__adddf3+0x1ba>
 80006b0:	f104 0414 	add.w	r4, r4, #20
 80006b4:	f1c4 0220 	rsb	r2, r4, #32
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f302 	lsl.w	r3, r1, r2
 80006c0:	ea40 0003 	orr.w	r0, r0, r3
 80006c4:	fa21 f304 	lsr.w	r3, r1, r4
 80006c8:	ea45 0103 	orr.w	r1, r5, r3
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	f1c4 040c 	rsb	r4, r4, #12
 80006d2:	f1c4 0220 	rsb	r2, r4, #32
 80006d6:	fa20 f002 	lsr.w	r0, r0, r2
 80006da:	fa01 f304 	lsl.w	r3, r1, r4
 80006de:	ea40 0003 	orr.w	r0, r0, r3
 80006e2:	4629      	mov	r1, r5
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	fa21 f004 	lsr.w	r0, r1, r4
 80006ea:	4629      	mov	r1, r5
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	f094 0f00 	teq	r4, #0
 80006f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f6:	bf06      	itte	eq
 80006f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006fc:	3401      	addeq	r4, #1
 80006fe:	3d01      	subne	r5, #1
 8000700:	e74e      	b.n	80005a0 <__adddf3+0x8c>
 8000702:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000706:	bf18      	it	ne
 8000708:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800070c:	d029      	beq.n	8000762 <__adddf3+0x24e>
 800070e:	ea94 0f05 	teq	r4, r5
 8000712:	bf08      	it	eq
 8000714:	ea90 0f02 	teqeq	r0, r2
 8000718:	d005      	beq.n	8000726 <__adddf3+0x212>
 800071a:	ea54 0c00 	orrs.w	ip, r4, r0
 800071e:	bf04      	itt	eq
 8000720:	4619      	moveq	r1, r3
 8000722:	4610      	moveq	r0, r2
 8000724:	bd30      	pop	{r4, r5, pc}
 8000726:	ea91 0f03 	teq	r1, r3
 800072a:	bf1e      	ittt	ne
 800072c:	2100      	movne	r1, #0
 800072e:	2000      	movne	r0, #0
 8000730:	bd30      	popne	{r4, r5, pc}
 8000732:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000736:	d105      	bne.n	8000744 <__adddf3+0x230>
 8000738:	0040      	lsls	r0, r0, #1
 800073a:	4149      	adcs	r1, r1
 800073c:	bf28      	it	cs
 800073e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000742:	bd30      	pop	{r4, r5, pc}
 8000744:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000748:	bf3c      	itt	cc
 800074a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074e:	bd30      	popcc	{r4, r5, pc}
 8000750:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000754:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000758:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd30      	pop	{r4, r5, pc}
 8000762:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000766:	bf1a      	itte	ne
 8000768:	4619      	movne	r1, r3
 800076a:	4610      	movne	r0, r2
 800076c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000770:	bf1c      	itt	ne
 8000772:	460b      	movne	r3, r1
 8000774:	4602      	movne	r2, r0
 8000776:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800077a:	bf06      	itte	eq
 800077c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000780:	ea91 0f03 	teqeq	r1, r3
 8000784:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000788:	bd30      	pop	{r4, r5, pc}
 800078a:	bf00      	nop

0800078c <__aeabi_ui2d>:
 800078c:	f090 0f00 	teq	r0, #0
 8000790:	bf04      	itt	eq
 8000792:	2100      	moveq	r1, #0
 8000794:	4770      	bxeq	lr
 8000796:	b530      	push	{r4, r5, lr}
 8000798:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800079c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a0:	f04f 0500 	mov.w	r5, #0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e750      	b.n	800064c <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_i2d>:
 80007ac:	f090 0f00 	teq	r0, #0
 80007b0:	bf04      	itt	eq
 80007b2:	2100      	moveq	r1, #0
 80007b4:	4770      	bxeq	lr
 80007b6:	b530      	push	{r4, r5, lr}
 80007b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c4:	bf48      	it	mi
 80007c6:	4240      	negmi	r0, r0
 80007c8:	f04f 0100 	mov.w	r1, #0
 80007cc:	e73e      	b.n	800064c <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_f2d>:
 80007d0:	0042      	lsls	r2, r0, #1
 80007d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80007da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007de:	bf1f      	itttt	ne
 80007e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007ec:	4770      	bxne	lr
 80007ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007f2:	bf08      	it	eq
 80007f4:	4770      	bxeq	lr
 80007f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007fa:	bf04      	itt	eq
 80007fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000800:	4770      	bxeq	lr
 8000802:	b530      	push	{r4, r5, lr}
 8000804:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000808:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800080c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000810:	e71c      	b.n	800064c <__adddf3+0x138>
 8000812:	bf00      	nop

08000814 <__aeabi_ul2d>:
 8000814:	ea50 0201 	orrs.w	r2, r0, r1
 8000818:	bf08      	it	eq
 800081a:	4770      	bxeq	lr
 800081c:	b530      	push	{r4, r5, lr}
 800081e:	f04f 0500 	mov.w	r5, #0
 8000822:	e00a      	b.n	800083a <__aeabi_l2d+0x16>

08000824 <__aeabi_l2d>:
 8000824:	ea50 0201 	orrs.w	r2, r0, r1
 8000828:	bf08      	it	eq
 800082a:	4770      	bxeq	lr
 800082c:	b530      	push	{r4, r5, lr}
 800082e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000832:	d502      	bpl.n	800083a <__aeabi_l2d+0x16>
 8000834:	4240      	negs	r0, r0
 8000836:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000842:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000846:	f43f aed8 	beq.w	80005fa <__adddf3+0xe6>
 800084a:	f04f 0203 	mov.w	r2, #3
 800084e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000852:	bf18      	it	ne
 8000854:	3203      	addne	r2, #3
 8000856:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085a:	bf18      	it	ne
 800085c:	3203      	addne	r2, #3
 800085e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000862:	f1c2 0320 	rsb	r3, r2, #32
 8000866:	fa00 fc03 	lsl.w	ip, r0, r3
 800086a:	fa20 f002 	lsr.w	r0, r0, r2
 800086e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000872:	ea40 000e 	orr.w	r0, r0, lr
 8000876:	fa21 f102 	lsr.w	r1, r1, r2
 800087a:	4414      	add	r4, r2
 800087c:	e6bd      	b.n	80005fa <__adddf3+0xe6>
 800087e:	bf00      	nop

08000880 <__aeabi_d2f>:
 8000880:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000884:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000888:	bf24      	itt	cs
 800088a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800088e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000892:	d90d      	bls.n	80008b0 <__aeabi_d2f+0x30>
 8000894:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000898:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800089c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008a0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a8:	bf08      	it	eq
 80008aa:	f020 0001 	biceq.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008b4:	d121      	bne.n	80008fa <__aeabi_d2f+0x7a>
 80008b6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008ba:	bfbc      	itt	lt
 80008bc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008c0:	4770      	bxlt	lr
 80008c2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ca:	f1c2 0218 	rsb	r2, r2, #24
 80008ce:	f1c2 0c20 	rsb	ip, r2, #32
 80008d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d6:	fa20 f002 	lsr.w	r0, r0, r2
 80008da:	bf18      	it	ne
 80008dc:	f040 0001 	orrne.w	r0, r0, #1
 80008e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008ec:	ea40 000c 	orr.w	r0, r0, ip
 80008f0:	fa23 f302 	lsr.w	r3, r3, r2
 80008f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f8:	e7cc      	b.n	8000894 <__aeabi_d2f+0x14>
 80008fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fe:	d107      	bne.n	8000910 <__aeabi_d2f+0x90>
 8000900:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000904:	bf1e      	ittt	ne
 8000906:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800090a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800090e:	4770      	bxne	lr
 8000910:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000914:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000918:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <__aeabi_frsub>:
 8000920:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000924:	e002      	b.n	800092c <__addsf3>
 8000926:	bf00      	nop

08000928 <__aeabi_fsub>:
 8000928:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800092c <__addsf3>:
 800092c:	0042      	lsls	r2, r0, #1
 800092e:	bf1f      	itttt	ne
 8000930:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000934:	ea92 0f03 	teqne	r2, r3
 8000938:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800093c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000940:	d06a      	beq.n	8000a18 <__addsf3+0xec>
 8000942:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000946:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800094a:	bfc1      	itttt	gt
 800094c:	18d2      	addgt	r2, r2, r3
 800094e:	4041      	eorgt	r1, r0
 8000950:	4048      	eorgt	r0, r1
 8000952:	4041      	eorgt	r1, r0
 8000954:	bfb8      	it	lt
 8000956:	425b      	neglt	r3, r3
 8000958:	2b19      	cmp	r3, #25
 800095a:	bf88      	it	hi
 800095c:	4770      	bxhi	lr
 800095e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000962:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000966:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800096a:	bf18      	it	ne
 800096c:	4240      	negne	r0, r0
 800096e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000972:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000976:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800097a:	bf18      	it	ne
 800097c:	4249      	negne	r1, r1
 800097e:	ea92 0f03 	teq	r2, r3
 8000982:	d03f      	beq.n	8000a04 <__addsf3+0xd8>
 8000984:	f1a2 0201 	sub.w	r2, r2, #1
 8000988:	fa41 fc03 	asr.w	ip, r1, r3
 800098c:	eb10 000c 	adds.w	r0, r0, ip
 8000990:	f1c3 0320 	rsb	r3, r3, #32
 8000994:	fa01 f103 	lsl.w	r1, r1, r3
 8000998:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800099c:	d502      	bpl.n	80009a4 <__addsf3+0x78>
 800099e:	4249      	negs	r1, r1
 80009a0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009a4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009a8:	d313      	bcc.n	80009d2 <__addsf3+0xa6>
 80009aa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009ae:	d306      	bcc.n	80009be <__addsf3+0x92>
 80009b0:	0840      	lsrs	r0, r0, #1
 80009b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009b6:	f102 0201 	add.w	r2, r2, #1
 80009ba:	2afe      	cmp	r2, #254	@ 0xfe
 80009bc:	d251      	bcs.n	8000a62 <__addsf3+0x136>
 80009be:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009c6:	bf08      	it	eq
 80009c8:	f020 0001 	biceq.w	r0, r0, #1
 80009cc:	ea40 0003 	orr.w	r0, r0, r3
 80009d0:	4770      	bx	lr
 80009d2:	0049      	lsls	r1, r1, #1
 80009d4:	eb40 0000 	adc.w	r0, r0, r0
 80009d8:	3a01      	subs	r2, #1
 80009da:	bf28      	it	cs
 80009dc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009e0:	d2ed      	bcs.n	80009be <__addsf3+0x92>
 80009e2:	fab0 fc80 	clz	ip, r0
 80009e6:	f1ac 0c08 	sub.w	ip, ip, #8
 80009ea:	ebb2 020c 	subs.w	r2, r2, ip
 80009ee:	fa00 f00c 	lsl.w	r0, r0, ip
 80009f2:	bfaa      	itet	ge
 80009f4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009f8:	4252      	neglt	r2, r2
 80009fa:	4318      	orrge	r0, r3
 80009fc:	bfbc      	itt	lt
 80009fe:	40d0      	lsrlt	r0, r2
 8000a00:	4318      	orrlt	r0, r3
 8000a02:	4770      	bx	lr
 8000a04:	f092 0f00 	teq	r2, #0
 8000a08:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a0c:	bf06      	itte	eq
 8000a0e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a12:	3201      	addeq	r2, #1
 8000a14:	3b01      	subne	r3, #1
 8000a16:	e7b5      	b.n	8000984 <__addsf3+0x58>
 8000a18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a20:	bf18      	it	ne
 8000a22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a26:	d021      	beq.n	8000a6c <__addsf3+0x140>
 8000a28:	ea92 0f03 	teq	r2, r3
 8000a2c:	d004      	beq.n	8000a38 <__addsf3+0x10c>
 8000a2e:	f092 0f00 	teq	r2, #0
 8000a32:	bf08      	it	eq
 8000a34:	4608      	moveq	r0, r1
 8000a36:	4770      	bx	lr
 8000a38:	ea90 0f01 	teq	r0, r1
 8000a3c:	bf1c      	itt	ne
 8000a3e:	2000      	movne	r0, #0
 8000a40:	4770      	bxne	lr
 8000a42:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a46:	d104      	bne.n	8000a52 <__addsf3+0x126>
 8000a48:	0040      	lsls	r0, r0, #1
 8000a4a:	bf28      	it	cs
 8000a4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a50:	4770      	bx	lr
 8000a52:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a56:	bf3c      	itt	cc
 8000a58:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a5c:	4770      	bxcc	lr
 8000a5e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a62:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a66:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a6a:	4770      	bx	lr
 8000a6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a70:	bf16      	itet	ne
 8000a72:	4608      	movne	r0, r1
 8000a74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a78:	4601      	movne	r1, r0
 8000a7a:	0242      	lsls	r2, r0, #9
 8000a7c:	bf06      	itte	eq
 8000a7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a82:	ea90 0f01 	teqeq	r0, r1
 8000a86:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_ui2f>:
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	e004      	b.n	8000a9c <__aeabi_i2f+0x8>
 8000a92:	bf00      	nop

08000a94 <__aeabi_i2f>:
 8000a94:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000a98:	bf48      	it	mi
 8000a9a:	4240      	negmi	r0, r0
 8000a9c:	ea5f 0c00 	movs.w	ip, r0
 8000aa0:	bf08      	it	eq
 8000aa2:	4770      	bxeq	lr
 8000aa4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000aa8:	4601      	mov	r1, r0
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	e01c      	b.n	8000aea <__aeabi_l2f+0x2a>

08000ab0 <__aeabi_ul2f>:
 8000ab0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ab4:	bf08      	it	eq
 8000ab6:	4770      	bxeq	lr
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e00a      	b.n	8000ad4 <__aeabi_l2f+0x14>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_l2f>:
 8000ac0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac4:	bf08      	it	eq
 8000ac6:	4770      	bxeq	lr
 8000ac8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000acc:	d502      	bpl.n	8000ad4 <__aeabi_l2f+0x14>
 8000ace:	4240      	negs	r0, r0
 8000ad0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad4:	ea5f 0c01 	movs.w	ip, r1
 8000ad8:	bf02      	ittt	eq
 8000ada:	4684      	moveq	ip, r0
 8000adc:	4601      	moveq	r1, r0
 8000ade:	2000      	moveq	r0, #0
 8000ae0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ae4:	bf08      	it	eq
 8000ae6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000aee:	fabc f28c 	clz	r2, ip
 8000af2:	3a08      	subs	r2, #8
 8000af4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000af8:	db10      	blt.n	8000b1c <__aeabi_l2f+0x5c>
 8000afa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000afe:	4463      	add	r3, ip
 8000b00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b04:	f1c2 0220 	rsb	r2, r2, #32
 8000b08:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b10:	eb43 0002 	adc.w	r0, r3, r2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f102 0220 	add.w	r2, r2, #32
 8000b20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b24:	f1c2 0220 	rsb	r2, r2, #32
 8000b28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b30:	eb43 0002 	adc.w	r0, r3, r2
 8000b34:	bf08      	it	eq
 8000b36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_f2iz>:
 8000b3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b40:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b44:	d30f      	bcc.n	8000b66 <__aeabi_f2iz+0x2a>
 8000b46:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b4a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_f2iz+0x30>
 8000b50:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b58:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b60:	bf18      	it	ne
 8000b62:	4240      	negne	r0, r0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr
 8000b6c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b70:	d101      	bne.n	8000b76 <__aeabi_f2iz+0x3a>
 8000b72:	0242      	lsls	r2, r0, #9
 8000b74:	d105      	bne.n	8000b82 <__aeabi_f2iz+0x46>
 8000b76:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b7a:	bf08      	it	eq
 8000b7c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8e:	f000 fbcb 	bl	8001328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b92:	f000 f861 	bl	8000c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b96:	f000 f903 	bl	8000da0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b9a:	f000 f8d7 	bl	8000d4c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000b9e:	f000 f89d 	bl	8000cdc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  InitThermocouple1();
 8000ba2:	f000 f843 	bl	8000c2c <InitThermocouple1>

  /* USER CODE END 2 */

  /* Infinite loop */
  float Th1_temp =0;
 8000ba6:	f04f 0300 	mov.w	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  int intpart, fracpart;
  //char txt1[11];
  char txt1[12];

  /* USER CODE BEGIN WHILE */
  printf("before while\n");
 8000bac:	481b      	ldr	r0, [pc, #108]	@ (8000c1c <main+0x94>)
 8000bae:	f002 f807 	bl	8002bc0 <puts>
  while (1)
  {
    /* USER CODE END WHILE */
	  ReadThermoCouple(&sensor_th1);
 8000bb2:	481b      	ldr	r0, [pc, #108]	@ (8000c20 <main+0x98>)
 8000bb4:	f000 fb66 	bl	8001284 <ReadThermoCouple>
 	  if (sensor_th1.connected){
 8000bb8:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <main+0x98>)
 8000bba:	7c1b      	ldrb	r3, [r3, #16]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d028      	beq.n	8000c12 <main+0x8a>
 		  Th1_temp = sensor_th1.Thx_celcius;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <main+0x98>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	617b      	str	r3, [r7, #20]
 		  intpart = (int)Th1_temp;
 8000bc6:	6978      	ldr	r0, [r7, #20]
 8000bc8:	f7ff ffb8 	bl	8000b3c <__aeabi_f2iz>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	613b      	str	r3, [r7, #16]
 		  fracpart = (int)((Th1_temp - intpart) * 100);
 8000bd0:	6938      	ldr	r0, [r7, #16]
 8000bd2:	f7ff ff5f 	bl	8000a94 <__aeabi_i2f>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff fea4 	bl	8000928 <__aeabi_fsub>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4910      	ldr	r1, [pc, #64]	@ (8000c24 <main+0x9c>)
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fbdb 	bl	80003a0 <__aeabi_fmul>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ffa5 	bl	8000b3c <__aeabi_f2iz>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	60fb      	str	r3, [r7, #12]
 		  snprintf(txt1, 11, "%3d.%02d", intpart, fracpart);
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <main+0xa0>)
 8000c00:	210b      	movs	r1, #11
 8000c02:	f001 ffe5 	bl	8002bd0 <sniprintf>
 		  txt1[11]='\0';
 8000c06:	2300      	movs	r3, #0
 8000c08:	72fb      	strb	r3, [r7, #11]
 		  printf("%s\n",txt1);
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 ffd7 	bl	8002bc0 <puts>
 	  // else {
 	  // 	 SSD1306_GotoXY (1, 1);
 	  // 	 SSD1306_Puts ("disconnected", &Font_7x10, 1);
 	  // 	 SSD1306_UpdateScreen(); // update screen
 	  // }
	  HAL_Delay(300);
 8000c12:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c16:	f000 fbe9 	bl	80013ec <HAL_Delay>
	  ReadThermoCouple(&sensor_th1);
 8000c1a:	e7ca      	b.n	8000bb2 <main+0x2a>
 8000c1c:	08003a08 	.word	0x08003a08
 8000c20:	200000dc 	.word	0x200000dc
 8000c24:	42c80000 	.word	0x42c80000
 8000c28:	08003a18 	.word	0x08003a18

08000c2c <InitThermocouple1>:
  }
  /* USER CODE END 3 */
}

void InitThermocouple1(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
	  sensor_th1.Thx_CS_Pin = Th1_CS_Pin;			// CS Pin
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <InitThermocouple1+0x20>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	811a      	strh	r2, [r3, #8]
	  sensor_th1.Thx_CS_Port = Th1_CS_GPIO_Port;	// CS GPIO PORT
 8000c36:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <InitThermocouple1+0x20>)
 8000c38:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <InitThermocouple1+0x24>)
 8000c3a:	605a      	str	r2, [r3, #4]
	  sensor_th1.hspi = &hspi1;						// SPI1
 8000c3c:	4b03      	ldr	r3, [pc, #12]	@ (8000c4c <InitThermocouple1+0x20>)
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <InitThermocouple1+0x28>)
 8000c40:	601a      	str	r2, [r3, #0]
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	200000dc 	.word	0x200000dc
 8000c50:	40010c00 	.word	0x40010c00
 8000c54:	20000084 	.word	0x20000084

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b090      	sub	sp, #64	@ 0x40
 8000c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 0318 	add.w	r3, r7, #24
 8000c62:	2228      	movs	r2, #40	@ 0x28
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 f8be 	bl	8002de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c82:	2310      	movs	r3, #16
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c86:	2302      	movs	r3, #2
 8000c88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c8e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	f107 0318 	add.w	r3, r7, #24
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fe97 	bl	80019cc <HAL_RCC_OscConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ca4:	f000 f8ea 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca8:	230f      	movs	r3, #15
 8000caa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cac:	2302      	movs	r3, #2
 8000cae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 f904 	bl	8001ed0 <HAL_RCC_ClockConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000cce:	f000 f8d5 	bl	8000e7c <Error_Handler>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3740      	adds	r7, #64	@ 0x40
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000ce2:	4a19      	ldr	r2, [pc, #100]	@ (8000d48 <MX_SPI1_Init+0x6c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000ce8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cf4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000d12:	2210      	movs	r2, #16
 8000d14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000d2a:	220a      	movs	r2, #10
 8000d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_SPI1_Init+0x68>)
 8000d30:	f001 fa5c 	bl	80021ec <HAL_SPI_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000d3a:	f000 f89f 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000084 	.word	0x20000084
 8000d48:	40013000 	.word	0x40013000

08000d4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	@ (8000d9c <MX_USART2_UART_Init+0x50>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f001 fd25 	bl	80027d2 <HAL_UART_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d8e:	f000 f875 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000f0 	.word	0x200000f0
 8000d9c:	40004400 	.word	0x40004400

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e6c <MX_GPIO_Init+0xcc>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a2c      	ldr	r2, [pc, #176]	@ (8000e6c <MX_GPIO_Init+0xcc>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e6c <MX_GPIO_Init+0xcc>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0310 	and.w	r3, r3, #16
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dcc:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <MX_GPIO_Init+0xcc>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a26      	ldr	r2, [pc, #152]	@ (8000e6c <MX_GPIO_Init+0xcc>)
 8000dd2:	f043 0320 	orr.w	r3, r3, #32
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b24      	ldr	r3, [pc, #144]	@ (8000e6c <MX_GPIO_Init+0xcc>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0320 	and.w	r3, r3, #32
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b21      	ldr	r3, [pc, #132]	@ (8000e6c <MX_GPIO_Init+0xcc>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a20      	ldr	r2, [pc, #128]	@ (8000e6c <MX_GPIO_Init+0xcc>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e6c <MX_GPIO_Init+0xcc>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <MX_GPIO_Init+0xcc>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a1a      	ldr	r2, [pc, #104]	@ (8000e6c <MX_GPIO_Init+0xcc>)
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b18      	ldr	r3, [pc, #96]	@ (8000e6c <MX_GPIO_Init+0xcc>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHIP_SELECT_GPIO_Port, CHIP_SELECT_Pin, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2101      	movs	r1, #1
 8000e18:	4815      	ldr	r0, [pc, #84]	@ (8000e70 <MX_GPIO_Init+0xd0>)
 8000e1a:	f000 fd9d 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <MX_GPIO_Init+0xd4>)
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4619      	mov	r1, r3
 8000e32:	4811      	ldr	r0, [pc, #68]	@ (8000e78 <MX_GPIO_Init+0xd8>)
 8000e34:	f000 fc0c 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHIP_SELECT_Pin */
  GPIO_InitStruct.Pin = CHIP_SELECT_Pin;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHIP_SELECT_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4808      	ldr	r0, [pc, #32]	@ (8000e70 <MX_GPIO_Init+0xd0>)
 8000e50:	f000 fbfe 	bl	8001650 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	2028      	movs	r0, #40	@ 0x28
 8000e5a:	f000 fbc2 	bl	80015e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e5e:	2028      	movs	r0, #40	@ 0x28
 8000e60:	f000 fbdb 	bl	800161a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e64:	bf00      	nop
 8000e66:	3720      	adds	r7, #32
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010c00 	.word	0x40010c00
 8000e74:	10110000 	.word	0x10110000
 8000e78:	40011000 	.word	0x40011000

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_MspInit+0x5c>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4a14      	ldr	r2, [pc, #80]	@ (8000ee4 <HAL_MspInit+0x5c>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6193      	str	r3, [r2, #24]
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_MspInit+0x5c>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_MspInit+0x5c>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee4 <HAL_MspInit+0x5c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <HAL_MspInit+0x5c>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <HAL_MspInit+0x60>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <HAL_MspInit+0x60>)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000

08000eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a1b      	ldr	r2, [pc, #108]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d12f      	bne.n	8000f6c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <HAL_SPI_MspInit+0x8c>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a19      	ldr	r2, [pc, #100]	@ (8000f78 <HAL_SPI_MspInit+0x8c>)
 8000f12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <HAL_SPI_MspInit+0x8c>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <HAL_SPI_MspInit+0x8c>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a13      	ldr	r2, [pc, #76]	@ (8000f78 <HAL_SPI_MspInit+0x8c>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <HAL_SPI_MspInit+0x8c>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f3c:	2320      	movs	r3, #32
 8000f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480b      	ldr	r0, [pc, #44]	@ (8000f7c <HAL_SPI_MspInit+0x90>)
 8000f50:	f000 fb7e 	bl	8001650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f54:	2340      	movs	r3, #64	@ 0x40
 8000f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	4619      	mov	r1, r3
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <HAL_SPI_MspInit+0x90>)
 8000f68:	f000 fb72 	bl	8001650 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40013000 	.word	0x40013000
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010800 	.word	0x40010800

08000f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a15      	ldr	r2, [pc, #84]	@ (8000ff0 <HAL_UART_MspInit+0x70>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d123      	bne.n	8000fe8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <HAL_UART_MspInit+0x74>)
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	4a13      	ldr	r2, [pc, #76]	@ (8000ff4 <HAL_UART_MspInit+0x74>)
 8000fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000faa:	61d3      	str	r3, [r2, #28]
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <HAL_UART_MspInit+0x74>)
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <HAL_UART_MspInit+0x74>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <HAL_UART_MspInit+0x74>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <HAL_UART_MspInit+0x74>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fd0:	230c      	movs	r3, #12
 8000fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <HAL_UART_MspInit+0x78>)
 8000fe4:	f000 fb34 	bl	8001650 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010800 	.word	0x40010800

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <NMI_Handler+0x4>

08001004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <MemManage_Handler+0x4>

08001014 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <UsageFault_Handler+0x4>

08001024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 f9b2 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001058:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800105c:	f000 fc94 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <ITM_SendChar+0x44>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <ITM_SendChar+0x44>)
 8001074:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001078:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <ITM_SendChar+0x48>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <ITM_SendChar+0x48>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001086:	bf00      	nop
 8001088:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f8      	beq.n	8001088 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001096:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	6013      	str	r3, [r2, #0]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	e000edfc 	.word	0xe000edfc
 80010ac:	e0000e00 	.word	0xe0000e00

080010b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e00a      	b.n	80010d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010c2:	f3af 8000 	nop.w
 80010c6:	4601      	mov	r1, r0
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	60ba      	str	r2, [r7, #8]
 80010ce:	b2ca      	uxtb	r2, r1
 80010d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3301      	adds	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbf0      	blt.n	80010c2 <_read+0x12>
  }

  return len;
 80010e0:	687b      	ldr	r3, [r7, #4]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	e009      	b.n	8001110 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	60ba      	str	r2, [r7, #8]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffad 	bl	8001064 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	dbf1      	blt.n	80010fc <_write+0x12>
  }
  return len;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_close>:

int _close(int file)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001148:	605a      	str	r2, [r3, #4]
  return 0;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <_isatty>:

int _isatty(int file)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800116a:	b480      	push	{r7}
 800116c:	b085      	sub	sp, #20
 800116e:	af00      	add	r7, sp, #0
 8001170:	60f8      	str	r0, [r7, #12]
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
	...

08001184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800118c:	4a14      	ldr	r2, [pc, #80]	@ (80011e0 <_sbrk+0x5c>)
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <_sbrk+0x60>)
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001198:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a0:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <_sbrk+0x64>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <_sbrk+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d207      	bcs.n	80011c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b4:	f001 fe66 	bl	8002e84 <__errno>
 80011b8:	4603      	mov	r3, r0
 80011ba:	220c      	movs	r2, #12
 80011bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	e009      	b.n	80011d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c4:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ca:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <_sbrk+0x64>)
 80011d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20005000 	.word	0x20005000
 80011e4:	00000400 	.word	0x00000400
 80011e8:	20000138 	.word	0x20000138
 80011ec:	20000290 	.word	0x20000290

080011f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011fc:	f7ff fff8 	bl	80011f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480b      	ldr	r0, [pc, #44]	@ (8001230 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001202:	490c      	ldr	r1, [pc, #48]	@ (8001234 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001204:	4a0c      	ldr	r2, [pc, #48]	@ (8001238 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a09      	ldr	r2, [pc, #36]	@ (800123c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001218:	4c09      	ldr	r4, [pc, #36]	@ (8001240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001226:	f001 fe33 	bl	8002e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800122a:	f7ff fcad 	bl	8000b88 <main>
  bx lr
 800122e:	4770      	bx	lr
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001238:	08003a8c 	.word	0x08003a8c
  ldr r2, =_sbss
 800123c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001240:	2000028c 	.word	0x2000028c

08001244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC1_2_IRQHandler>

08001246 <SPI_RxByte>:



/* SPI Receive one Byte */
static uint8_t SPI_RxByte(SPI_HandleTypeDef *hspi)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af02      	add	r7, sp, #8
 800124c:	6078      	str	r0, [r7, #4]
  uint8_t dummy, data;
  dummy = 0xFF;
 800124e:	23ff      	movs	r3, #255	@ 0xff
 8001250:	73fb      	strb	r3, [r7, #15]
  data = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	73bb      	strb	r3, [r7, #14]

  while ((HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY));
 8001256:	bf00      	nop
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f001 f9f4 	bl	8002646 <HAL_SPI_GetState>
 800125e:	4603      	mov	r3, r0
 8001260:	2b01      	cmp	r3, #1
 8001262:	d1f9      	bne.n	8001258 <SPI_RxByte+0x12>
  HAL_SPI_TransmitReceive(hspi, &dummy, &data, 1, SPI_TIMEOUT);
 8001264:	f107 020e 	add.w	r2, r7, #14
 8001268:	f107 010f 	add.w	r1, r7, #15
 800126c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2301      	movs	r3, #1
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f001 f83d 	bl	80022f4 <HAL_SPI_TransmitReceive>

  return data;
 800127a:	7bbb      	ldrb	r3, [r7, #14]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <ReadThermoCouple>:

void ReadThermoCouple(ThermoCouple *Th)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	unsigned short data;


	HAL_GPIO_WritePin(Th->Thx_CS_Port, Th->Thx_CS_Pin, GPIO_PIN_RESET);	//Chip Select level low
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6858      	ldr	r0, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	891b      	ldrh	r3, [r3, #8]
 8001294:	2200      	movs	r2, #0
 8001296:	4619      	mov	r1, r3
 8001298:	f000 fb5e 	bl	8001958 <HAL_GPIO_WritePin>

	data = SPI_RxByte(Th->hspi);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ffd0 	bl	8001246 <SPI_RxByte>
 80012a6:	4603      	mov	r3, r0
 80012a8:	81fb      	strh	r3, [r7, #14]
	data <<= 8;
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	81fb      	strh	r3, [r7, #14]
	data |= SPI_RxByte(Th->hspi);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffc6 	bl	8001246 <SPI_RxByte>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	81fb      	strh	r3, [r7, #14]
	//printf("data = %");

	HAL_GPIO_WritePin(Th->Thx_CS_Port, Th->Thx_CS_Pin, GPIO_PIN_SET);	//Chip select level high
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6858      	ldr	r0, [r3, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	891b      	ldrh	r3, [r3, #8]
 80012cc:	2201      	movs	r2, #1
 80012ce:	4619      	mov	r1, r3
 80012d0:	f000 fb42 	bl	8001958 <HAL_GPIO_WritePin>

	Th->Thx_rawdata = data;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	89fa      	ldrh	r2, [r7, #14]
 80012d8:	815a      	strh	r2, [r3, #10]

	if (data & 4) Th->connected = FALSE;
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <ReadThermoCouple+0x68>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	741a      	strb	r2, [r3, #16]
 80012ea:	e002      	b.n	80012f2 <ReadThermoCouple+0x6e>
	else Th->connected = TRUE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	741a      	strb	r2, [r3, #16]

	data  >>= 3;
 80012f2:	89fb      	ldrh	r3, [r7, #14]
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	81fb      	strh	r3, [r7, #14]
	Th->Thx_celcius = data * 0.25;
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fa56 	bl	80007ac <__aeabi_i2d>
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <ReadThermoCouple+0xa0>)
 8001306:	f7fe ff21 	bl	800014c <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fab5 	bl	8000880 <__aeabi_d2f>
 8001316:	4602      	mov	r2, r0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	60da      	str	r2, [r3, #12]

}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	3fd00000 	.word	0x3fd00000

08001328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <HAL_Init+0x28>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a07      	ldr	r2, [pc, #28]	@ (8001350 <HAL_Init+0x28>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f000 f947 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f808 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001344:	f7ff fda0 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40022000 	.word	0x40022000

08001354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_InitTick+0x54>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_InitTick+0x58>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136a:	fbb3 f3f1 	udiv	r3, r3, r1
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f95f 	bl	8001636 <HAL_SYSTICK_Config>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e00e      	b.n	80013a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d80a      	bhi.n	800139e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f000 f927 	bl	80015e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001394:	4a06      	ldr	r2, [pc, #24]	@ (80013b0 <HAL_InitTick+0x5c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000004 	.word	0x20000004

080013b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <HAL_IncTick+0x1c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_IncTick+0x20>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a03      	ldr	r2, [pc, #12]	@ (80013d4 <HAL_IncTick+0x20>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000008 	.word	0x20000008
 80013d4:	2000013c 	.word	0x2000013c

080013d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b02      	ldr	r3, [pc, #8]	@ (80013e8 <HAL_GetTick+0x10>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	2000013c 	.word	0x2000013c

080013ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff fff0 	bl	80013d8 <HAL_GetTick>
 80013f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001404:	d005      	beq.n	8001412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <HAL_Delay+0x44>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001412:	bf00      	nop
 8001414:	f7ff ffe0 	bl	80013d8 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	429a      	cmp	r2, r3
 8001422:	d8f7      	bhi.n	8001414 <HAL_Delay+0x28>
  {
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008

08001434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800145c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	@ (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db0b      	blt.n	80014c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	4906      	ldr	r1, [pc, #24]	@ (80014cc <__NVIC_EnableIRQ+0x34>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	@ (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	@ (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	@ 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	@ 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f7ff ff90 	bl	80014d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff2d 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f4:	f7ff ff42 	bl	800147c <__NVIC_GetPriorityGrouping>
 80015f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7ff ff90 	bl	8001524 <NVIC_EncodePriority>
 8001604:	4602      	mov	r2, r0
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5f 	bl	80014d0 <__NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff35 	bl	8001498 <__NVIC_EnableIRQ>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffa2 	bl	8001588 <SysTick_Config>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b480      	push	{r7}
 8001652:	b08b      	sub	sp, #44	@ 0x2c
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001662:	e169      	b.n	8001938 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001664:	2201      	movs	r2, #1
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	429a      	cmp	r2, r3
 800167e:	f040 8158 	bne.w	8001932 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4a9a      	ldr	r2, [pc, #616]	@ (80018f0 <HAL_GPIO_Init+0x2a0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d05e      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 800168c:	4a98      	ldr	r2, [pc, #608]	@ (80018f0 <HAL_GPIO_Init+0x2a0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d875      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 8001692:	4a98      	ldr	r2, [pc, #608]	@ (80018f4 <HAL_GPIO_Init+0x2a4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d058      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 8001698:	4a96      	ldr	r2, [pc, #600]	@ (80018f4 <HAL_GPIO_Init+0x2a4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d86f      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 800169e:	4a96      	ldr	r2, [pc, #600]	@ (80018f8 <HAL_GPIO_Init+0x2a8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d052      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 80016a4:	4a94      	ldr	r2, [pc, #592]	@ (80018f8 <HAL_GPIO_Init+0x2a8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d869      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 80016aa:	4a94      	ldr	r2, [pc, #592]	@ (80018fc <HAL_GPIO_Init+0x2ac>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d04c      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 80016b0:	4a92      	ldr	r2, [pc, #584]	@ (80018fc <HAL_GPIO_Init+0x2ac>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d863      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 80016b6:	4a92      	ldr	r2, [pc, #584]	@ (8001900 <HAL_GPIO_Init+0x2b0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d046      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 80016bc:	4a90      	ldr	r2, [pc, #576]	@ (8001900 <HAL_GPIO_Init+0x2b0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d85d      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 80016c2:	2b12      	cmp	r3, #18
 80016c4:	d82a      	bhi.n	800171c <HAL_GPIO_Init+0xcc>
 80016c6:	2b12      	cmp	r3, #18
 80016c8:	d859      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 80016ca:	a201      	add	r2, pc, #4	@ (adr r2, 80016d0 <HAL_GPIO_Init+0x80>)
 80016cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d0:	0800174b 	.word	0x0800174b
 80016d4:	08001725 	.word	0x08001725
 80016d8:	08001737 	.word	0x08001737
 80016dc:	08001779 	.word	0x08001779
 80016e0:	0800177f 	.word	0x0800177f
 80016e4:	0800177f 	.word	0x0800177f
 80016e8:	0800177f 	.word	0x0800177f
 80016ec:	0800177f 	.word	0x0800177f
 80016f0:	0800177f 	.word	0x0800177f
 80016f4:	0800177f 	.word	0x0800177f
 80016f8:	0800177f 	.word	0x0800177f
 80016fc:	0800177f 	.word	0x0800177f
 8001700:	0800177f 	.word	0x0800177f
 8001704:	0800177f 	.word	0x0800177f
 8001708:	0800177f 	.word	0x0800177f
 800170c:	0800177f 	.word	0x0800177f
 8001710:	0800177f 	.word	0x0800177f
 8001714:	0800172d 	.word	0x0800172d
 8001718:	08001741 	.word	0x08001741
 800171c:	4a79      	ldr	r2, [pc, #484]	@ (8001904 <HAL_GPIO_Init+0x2b4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d013      	beq.n	800174a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001722:	e02c      	b.n	800177e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	623b      	str	r3, [r7, #32]
          break;
 800172a:	e029      	b.n	8001780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	3304      	adds	r3, #4
 8001732:	623b      	str	r3, [r7, #32]
          break;
 8001734:	e024      	b.n	8001780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	3308      	adds	r3, #8
 800173c:	623b      	str	r3, [r7, #32]
          break;
 800173e:	e01f      	b.n	8001780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	330c      	adds	r3, #12
 8001746:	623b      	str	r3, [r7, #32]
          break;
 8001748:	e01a      	b.n	8001780 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d102      	bne.n	8001758 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001752:	2304      	movs	r3, #4
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e013      	b.n	8001780 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d105      	bne.n	800176c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001760:	2308      	movs	r3, #8
 8001762:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	611a      	str	r2, [r3, #16]
          break;
 800176a:	e009      	b.n	8001780 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800176c:	2308      	movs	r3, #8
 800176e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	615a      	str	r2, [r3, #20]
          break;
 8001776:	e003      	b.n	8001780 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
          break;
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x130>
          break;
 800177e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2bff      	cmp	r3, #255	@ 0xff
 8001784:	d801      	bhi.n	800178a <HAL_GPIO_Init+0x13a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	e001      	b.n	800178e <HAL_GPIO_Init+0x13e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3304      	adds	r3, #4
 800178e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2bff      	cmp	r3, #255	@ 0xff
 8001794:	d802      	bhi.n	800179c <HAL_GPIO_Init+0x14c>
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	e002      	b.n	80017a2 <HAL_GPIO_Init+0x152>
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	3b08      	subs	r3, #8
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	210f      	movs	r1, #15
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	401a      	ands	r2, r3
 80017b4:	6a39      	ldr	r1, [r7, #32]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	431a      	orrs	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80b1 	beq.w	8001932 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001908 <HAL_GPIO_Init+0x2b8>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001908 <HAL_GPIO_Init+0x2b8>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001908 <HAL_GPIO_Init+0x2b8>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017e8:	4a48      	ldr	r2, [pc, #288]	@ (800190c <HAL_GPIO_Init+0x2bc>)
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	220f      	movs	r2, #15
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a40      	ldr	r2, [pc, #256]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d013      	beq.n	800183c <HAL_GPIO_Init+0x1ec>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a3f      	ldr	r2, [pc, #252]	@ (8001914 <HAL_GPIO_Init+0x2c4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00d      	beq.n	8001838 <HAL_GPIO_Init+0x1e8>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a3e      	ldr	r2, [pc, #248]	@ (8001918 <HAL_GPIO_Init+0x2c8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d007      	beq.n	8001834 <HAL_GPIO_Init+0x1e4>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a3d      	ldr	r2, [pc, #244]	@ (800191c <HAL_GPIO_Init+0x2cc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d101      	bne.n	8001830 <HAL_GPIO_Init+0x1e0>
 800182c:	2303      	movs	r3, #3
 800182e:	e006      	b.n	800183e <HAL_GPIO_Init+0x1ee>
 8001830:	2304      	movs	r3, #4
 8001832:	e004      	b.n	800183e <HAL_GPIO_Init+0x1ee>
 8001834:	2302      	movs	r3, #2
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x1ee>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <HAL_GPIO_Init+0x1ee>
 800183c:	2300      	movs	r3, #0
 800183e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001840:	f002 0203 	and.w	r2, r2, #3
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	4093      	lsls	r3, r2
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800184e:	492f      	ldr	r1, [pc, #188]	@ (800190c <HAL_GPIO_Init+0x2bc>)
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001868:	4b2d      	ldr	r3, [pc, #180]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	492c      	ldr	r1, [pc, #176]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	608b      	str	r3, [r1, #8]
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001876:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	43db      	mvns	r3, r3
 800187e:	4928      	ldr	r1, [pc, #160]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 8001880:	4013      	ands	r3, r2
 8001882:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001890:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	4922      	ldr	r1, [pc, #136]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	60cb      	str	r3, [r1, #12]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800189e:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	491e      	ldr	r1, [pc, #120]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4918      	ldr	r1, [pc, #96]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c6:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	4914      	ldr	r1, [pc, #80]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d021      	beq.n	8001924 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	490e      	ldr	r1, [pc, #56]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
 80018ec:	e021      	b.n	8001932 <HAL_GPIO_Init+0x2e2>
 80018ee:	bf00      	nop
 80018f0:	10320000 	.word	0x10320000
 80018f4:	10310000 	.word	0x10310000
 80018f8:	10220000 	.word	0x10220000
 80018fc:	10210000 	.word	0x10210000
 8001900:	10120000 	.word	0x10120000
 8001904:	10110000 	.word	0x10110000
 8001908:	40021000 	.word	0x40021000
 800190c:	40010000 	.word	0x40010000
 8001910:	40010800 	.word	0x40010800
 8001914:	40010c00 	.word	0x40010c00
 8001918:	40011000 	.word	0x40011000
 800191c:	40011400 	.word	0x40011400
 8001920:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_GPIO_Init+0x304>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	43db      	mvns	r3, r3
 800192c:	4909      	ldr	r1, [pc, #36]	@ (8001954 <HAL_GPIO_Init+0x304>)
 800192e:	4013      	ands	r3, r2
 8001930:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	3301      	adds	r3, #1
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	f47f ae8e 	bne.w	8001664 <HAL_GPIO_Init+0x14>
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	372c      	adds	r7, #44	@ 0x2c
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	40010400 	.word	0x40010400

08001958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001968:	787b      	ldrb	r3, [r7, #1]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001974:	e003      	b.n	800197e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001976:	887b      	ldrh	r3, [r7, #2]
 8001978:	041a      	lsls	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	611a      	str	r2, [r3, #16]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800199e:	4a05      	ldr	r2, [pc, #20]	@ (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f806 	bl	80019b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e272      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 8087 	beq.w	8001afa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ec:	4b92      	ldr	r3, [pc, #584]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d00c      	beq.n	8001a12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f8:	4b8f      	ldr	r3, [pc, #572]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d112      	bne.n	8001a2a <HAL_RCC_OscConfig+0x5e>
 8001a04:	4b8c      	ldr	r3, [pc, #560]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a10:	d10b      	bne.n	8001a2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a12:	4b89      	ldr	r3, [pc, #548]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d06c      	beq.n	8001af8 <HAL_RCC_OscConfig+0x12c>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d168      	bne.n	8001af8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e24c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x76>
 8001a34:	4b80      	ldr	r3, [pc, #512]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a7f      	ldr	r2, [pc, #508]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	e02e      	b.n	8001aa0 <HAL_RCC_OscConfig+0xd4>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x98>
 8001a4a:	4b7b      	ldr	r3, [pc, #492]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a7a      	ldr	r2, [pc, #488]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b78      	ldr	r3, [pc, #480]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a77      	ldr	r2, [pc, #476]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e01d      	b.n	8001aa0 <HAL_RCC_OscConfig+0xd4>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0xbc>
 8001a6e:	4b72      	ldr	r3, [pc, #456]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a71      	ldr	r2, [pc, #452]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0xd4>
 8001a88:	4b6b      	ldr	r3, [pc, #428]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a6a      	ldr	r2, [pc, #424]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b68      	ldr	r3, [pc, #416]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a67      	ldr	r2, [pc, #412]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d013      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fc96 	bl	80013d8 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fc92 	bl	80013d8 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	@ 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e200      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0xe4>
 8001ace:	e014      	b.n	8001afa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fc82 	bl	80013d8 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff fc7e 	bl	80013d8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	@ 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e1ec      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	4b53      	ldr	r3, [pc, #332]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x10c>
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d063      	beq.n	8001bce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b06:	4b4c      	ldr	r3, [pc, #304]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00b      	beq.n	8001b2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b12:	4b49      	ldr	r3, [pc, #292]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d11c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x18c>
 8001b1e:	4b46      	ldr	r3, [pc, #280]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d116      	bne.n	8001b58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d005      	beq.n	8001b42 <HAL_RCC_OscConfig+0x176>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e1c0      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b42:	4b3d      	ldr	r3, [pc, #244]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4939      	ldr	r1, [pc, #228]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b56:	e03a      	b.n	8001bce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d020      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b60:	4b36      	ldr	r3, [pc, #216]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff fc37 	bl	80013d8 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fc33 	bl	80013d8 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e1a1      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	4b2d      	ldr	r3, [pc, #180]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4927      	ldr	r1, [pc, #156]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]
 8001ba0:	e015      	b.n	8001bce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba2:	4b26      	ldr	r3, [pc, #152]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fc16 	bl	80013d8 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fc12 	bl	80013d8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e180      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d03a      	beq.n	8001c50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d019      	beq.n	8001c16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be2:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be8:	f7ff fbf6 	bl	80013d8 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fbf2 	bl	80013d8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e160      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c02:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f000 face 	bl	80021b0 <RCC_Delay>
 8001c14:	e01c      	b.n	8001c50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c16:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1c:	f7ff fbdc 	bl	80013d8 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c22:	e00f      	b.n	8001c44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff fbd8 	bl	80013d8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d908      	bls.n	8001c44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e146      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	42420000 	.word	0x42420000
 8001c40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	4b92      	ldr	r3, [pc, #584]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e9      	bne.n	8001c24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80a6 	beq.w	8001daa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c62:	4b8b      	ldr	r3, [pc, #556]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10d      	bne.n	8001c8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b88      	ldr	r3, [pc, #544]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	4a87      	ldr	r2, [pc, #540]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	61d3      	str	r3, [r2, #28]
 8001c7a:	4b85      	ldr	r3, [pc, #532]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c86:	2301      	movs	r3, #1
 8001c88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8a:	4b82      	ldr	r3, [pc, #520]	@ (8001e94 <HAL_RCC_OscConfig+0x4c8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d118      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c96:	4b7f      	ldr	r3, [pc, #508]	@ (8001e94 <HAL_RCC_OscConfig+0x4c8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e94 <HAL_RCC_OscConfig+0x4c8>)
 8001c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca2:	f7ff fb99 	bl	80013d8 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001caa:	f7ff fb95 	bl	80013d8 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b64      	cmp	r3, #100	@ 0x64
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e103      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	4b75      	ldr	r3, [pc, #468]	@ (8001e94 <HAL_RCC_OscConfig+0x4c8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x312>
 8001cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a6e      	ldr	r2, [pc, #440]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	e02d      	b.n	8001d3a <HAL_RCC_OscConfig+0x36e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x334>
 8001ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a69      	ldr	r2, [pc, #420]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f023 0301 	bic.w	r3, r3, #1
 8001cf0:	6213      	str	r3, [r2, #32]
 8001cf2:	4b67      	ldr	r3, [pc, #412]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a66      	ldr	r2, [pc, #408]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	f023 0304 	bic.w	r3, r3, #4
 8001cfc:	6213      	str	r3, [r2, #32]
 8001cfe:	e01c      	b.n	8001d3a <HAL_RCC_OscConfig+0x36e>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	d10c      	bne.n	8001d22 <HAL_RCC_OscConfig+0x356>
 8001d08:	4b61      	ldr	r3, [pc, #388]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a60      	ldr	r2, [pc, #384]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6213      	str	r3, [r2, #32]
 8001d14:	4b5e      	ldr	r3, [pc, #376]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4a5d      	ldr	r2, [pc, #372]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6213      	str	r3, [r2, #32]
 8001d20:	e00b      	b.n	8001d3a <HAL_RCC_OscConfig+0x36e>
 8001d22:	4b5b      	ldr	r3, [pc, #364]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a5a      	ldr	r2, [pc, #360]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6213      	str	r3, [r2, #32]
 8001d2e:	4b58      	ldr	r3, [pc, #352]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a57      	ldr	r2, [pc, #348]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d015      	beq.n	8001d6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fb49 	bl	80013d8 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff fb45 	bl	80013d8 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e0b1      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	4b4b      	ldr	r3, [pc, #300]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0ee      	beq.n	8001d4a <HAL_RCC_OscConfig+0x37e>
 8001d6c:	e014      	b.n	8001d98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fb33 	bl	80013d8 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7ff fb2f 	bl	80013d8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e09b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8c:	4b40      	ldr	r3, [pc, #256]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1ee      	bne.n	8001d76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d105      	bne.n	8001daa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a3b      	ldr	r2, [pc, #236]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8087 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db4:	4b36      	ldr	r3, [pc, #216]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d061      	beq.n	8001e84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d146      	bne.n	8001e56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc8:	4b33      	ldr	r3, [pc, #204]	@ (8001e98 <HAL_RCC_OscConfig+0x4cc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7ff fb03 	bl	80013d8 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd6:	f7ff faff 	bl	80013d8 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e06d      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de8:	4b29      	ldr	r3, [pc, #164]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dfc:	d108      	bne.n	8001e10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dfe:	4b24      	ldr	r3, [pc, #144]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4921      	ldr	r1, [pc, #132]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b1f      	ldr	r3, [pc, #124]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a19      	ldr	r1, [r3, #32]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	430b      	orrs	r3, r1
 8001e22:	491b      	ldr	r1, [pc, #108]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e28:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fad3 	bl	80013d8 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e36:	f7ff facf 	bl	80013d8 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e03d      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x46a>
 8001e54:	e035      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e56:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <HAL_RCC_OscConfig+0x4cc>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fabc 	bl	80013d8 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e64:	f7ff fab8 	bl	80013d8 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e026      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e76:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x498>
 8001e82:	e01e      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e019      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40007000 	.word	0x40007000
 8001e98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_RCC_OscConfig+0x500>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d106      	bne.n	8001ebe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d001      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000

08001ed0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0d0      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	@ (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d910      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b67      	ldr	r3, [pc, #412]	@ (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 0207 	bic.w	r2, r3, #7
 8001efa:	4965      	ldr	r1, [pc, #404]	@ (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b63      	ldr	r3, [pc, #396]	@ (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0b8      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f2c:	4b59      	ldr	r3, [pc, #356]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a58      	ldr	r2, [pc, #352]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f44:	4b53      	ldr	r3, [pc, #332]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a52      	ldr	r2, [pc, #328]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b50      	ldr	r3, [pc, #320]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	494d      	ldr	r1, [pc, #308]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d040      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b47      	ldr	r3, [pc, #284]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e07f      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8e:	4b41      	ldr	r3, [pc, #260]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e073      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e06b      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b39      	ldr	r3, [pc, #228]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4936      	ldr	r1, [pc, #216]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc0:	f7ff fa0a 	bl	80013d8 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7ff fa06 	bl	80013d8 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e053      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b2d      	ldr	r3, [pc, #180]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b27      	ldr	r3, [pc, #156]	@ (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d210      	bcs.n	8002020 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b24      	ldr	r3, [pc, #144]	@ (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 0207 	bic.w	r2, r3, #7
 8002006:	4922      	ldr	r1, [pc, #136]	@ (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b20      	ldr	r3, [pc, #128]	@ (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e032      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4916      	ldr	r1, [pc, #88]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800204a:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	490e      	ldr	r1, [pc, #56]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800205e:	f000 f821 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8002062:	4602      	mov	r2, r0
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	490a      	ldr	r1, [pc, #40]	@ (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	5ccb      	ldrb	r3, [r1, r3]
 8002072:	fa22 f303 	lsr.w	r3, r2, r3
 8002076:	4a09      	ldr	r2, [pc, #36]	@ (800209c <HAL_RCC_ClockConfig+0x1cc>)
 8002078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800207a:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_RCC_ClockConfig+0x1d0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f968 	bl	8001354 <HAL_InitTick>

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40022000 	.word	0x40022000
 8002094:	40021000 	.word	0x40021000
 8002098:	08003a24 	.word	0x08003a24
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020be:	4b1e      	ldr	r3, [pc, #120]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x94>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d002      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x30>
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d003      	beq.n	80020da <HAL_RCC_GetSysClockFreq+0x36>
 80020d2:	e027      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020d4:	4b19      	ldr	r3, [pc, #100]	@ (800213c <HAL_RCC_GetSysClockFreq+0x98>)
 80020d6:	613b      	str	r3, [r7, #16]
      break;
 80020d8:	e027      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	0c9b      	lsrs	r3, r3, #18
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	4a17      	ldr	r2, [pc, #92]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020e4:	5cd3      	ldrb	r3, [r2, r3]
 80020e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d010      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020f2:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x94>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	0c5b      	lsrs	r3, r3, #17
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	4a11      	ldr	r2, [pc, #68]	@ (8002144 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a0d      	ldr	r2, [pc, #52]	@ (800213c <HAL_RCC_GetSysClockFreq+0x98>)
 8002106:	fb03 f202 	mul.w	r2, r3, r2
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	e004      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a0c      	ldr	r2, [pc, #48]	@ (8002148 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002118:	fb02 f303 	mul.w	r3, r2, r3
 800211c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	613b      	str	r3, [r7, #16]
      break;
 8002122:	e002      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_RCC_GetSysClockFreq+0x98>)
 8002126:	613b      	str	r3, [r7, #16]
      break;
 8002128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800212a:	693b      	ldr	r3, [r7, #16]
}
 800212c:	4618      	mov	r0, r3
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	007a1200 	.word	0x007a1200
 8002140:	08003a3c 	.word	0x08003a3c
 8002144:	08003a4c 	.word	0x08003a4c
 8002148:	003d0900 	.word	0x003d0900

0800214c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002150:	4b02      	ldr	r3, [pc, #8]	@ (800215c <HAL_RCC_GetHCLKFreq+0x10>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	20000000 	.word	0x20000000

08002160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002164:	f7ff fff2 	bl	800214c <HAL_RCC_GetHCLKFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	4903      	ldr	r1, [pc, #12]	@ (8002184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800217c:	4618      	mov	r0, r3
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000
 8002184:	08003a34 	.word	0x08003a34

08002188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800218c:	f7ff ffde 	bl	800214c <HAL_RCC_GetHCLKFreq>
 8002190:	4602      	mov	r2, r0
 8002192:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	0adb      	lsrs	r3, r3, #11
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	4903      	ldr	r1, [pc, #12]	@ (80021ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800219e:	5ccb      	ldrb	r3, [r1, r3]
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08003a34 	.word	0x08003a34

080021b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021b8:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <RCC_Delay+0x34>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <RCC_Delay+0x38>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0a5b      	lsrs	r3, r3, #9
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021cc:	bf00      	nop
  }
  while (Delay --);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1e5a      	subs	r2, r3, #1
 80021d2:	60fa      	str	r2, [r7, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f9      	bne.n	80021cc <RCC_Delay+0x1c>
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	20000000 	.word	0x20000000
 80021e8:	10624dd3 	.word	0x10624dd3

080021ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e076      	b.n	80022ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	2b00      	cmp	r3, #0
 8002204:	d108      	bne.n	8002218 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800220e:	d009      	beq.n	8002224 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]
 8002216:	e005      	b.n	8002224 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d106      	bne.n	8002244 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe fe54 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800225a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a8:	ea42 0103 	orr.w	r1, r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	0c1a      	lsrs	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f002 0204 	and.w	r2, r2, #4
 80022ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69da      	ldr	r2, [r3, #28]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	@ 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002302:	2301      	movs	r3, #1
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002306:	f7ff f867 	bl	80013d8 <HAL_GetTick>
 800230a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002312:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800231a:	887b      	ldrh	r3, [r7, #2]
 800231c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800231e:	7ffb      	ldrb	r3, [r7, #31]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d00c      	beq.n	800233e <HAL_SPI_TransmitReceive+0x4a>
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800232a:	d106      	bne.n	800233a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <HAL_SPI_TransmitReceive+0x46>
 8002334:	7ffb      	ldrb	r3, [r7, #31]
 8002336:	2b04      	cmp	r3, #4
 8002338:	d001      	beq.n	800233e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
 800233c:	e17f      	b.n	800263e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_SPI_TransmitReceive+0x5c>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_SPI_TransmitReceive+0x5c>
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e174      	b.n	800263e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_SPI_TransmitReceive+0x6e>
 800235e:	2302      	movs	r3, #2
 8002360:	e16d      	b.n	800263e <HAL_SPI_TransmitReceive+0x34a>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b04      	cmp	r3, #4
 8002374:	d003      	beq.n	800237e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2205      	movs	r2, #5
 800237a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	887a      	ldrh	r2, [r7, #2]
 800238e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	887a      	ldrh	r2, [r7, #2]
 80023a6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023be:	2b40      	cmp	r3, #64	@ 0x40
 80023c0:	d007      	beq.n	80023d2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023da:	d17e      	bne.n	80024da <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_SPI_TransmitReceive+0xf6>
 80023e4:	8afb      	ldrh	r3, [r7, #22]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d16c      	bne.n	80024c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	881a      	ldrh	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	1c9a      	adds	r2, r3, #2
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800240e:	e059      	b.n	80024c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b02      	cmp	r3, #2
 800241c:	d11b      	bne.n	8002456 <HAL_SPI_TransmitReceive+0x162>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d016      	beq.n	8002456 <HAL_SPI_TransmitReceive+0x162>
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	2b01      	cmp	r3, #1
 800242c:	d113      	bne.n	8002456 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	881a      	ldrh	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	1c9a      	adds	r2, r3, #2
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d119      	bne.n	8002498 <HAL_SPI_TransmitReceive+0x1a4>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d014      	beq.n	8002498 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002478:	b292      	uxth	r2, r2
 800247a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002480:	1c9a      	adds	r2, r3, #2
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002494:	2301      	movs	r3, #1
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002498:	f7fe ff9e 	bl	80013d8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d80d      	bhi.n	80024c4 <HAL_SPI_TransmitReceive+0x1d0>
 80024a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ae:	d009      	beq.n	80024c4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0bc      	b.n	800263e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1a0      	bne.n	8002410 <HAL_SPI_TransmitReceive+0x11c>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d19b      	bne.n	8002410 <HAL_SPI_TransmitReceive+0x11c>
 80024d8:	e082      	b.n	80025e0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_SPI_TransmitReceive+0x1f4>
 80024e2:	8afb      	ldrh	r3, [r7, #22]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d171      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	7812      	ldrb	r2, [r2, #0]
 80024f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800250e:	e05d      	b.n	80025cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d11c      	bne.n	8002558 <HAL_SPI_TransmitReceive+0x264>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d017      	beq.n	8002558 <HAL_SPI_TransmitReceive+0x264>
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	2b01      	cmp	r3, #1
 800252c:	d114      	bne.n	8002558 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d119      	bne.n	800259a <HAL_SPI_TransmitReceive+0x2a6>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d014      	beq.n	800259a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002596:	2301      	movs	r3, #1
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800259a:	f7fe ff1d 	bl	80013d8 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d803      	bhi.n	80025b2 <HAL_SPI_TransmitReceive+0x2be>
 80025aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d102      	bne.n	80025b8 <HAL_SPI_TransmitReceive+0x2c4>
 80025b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e038      	b.n	800263e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d19c      	bne.n	8002510 <HAL_SPI_TransmitReceive+0x21c>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d197      	bne.n	8002510 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025e0:	6a3a      	ldr	r2, [r7, #32]
 80025e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f8c3 	bl	8002770 <SPI_EndRxTxTransaction>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e01d      	b.n	800263e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800263c:	2300      	movs	r3, #0
  }
}
 800263e:	4618      	mov	r0, r3
 8002640:	3728      	adds	r7, #40	@ 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002654:	b2db      	uxtb	r3, r3
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002670:	f7fe feb2 	bl	80013d8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	4413      	add	r3, r2
 800267e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002680:	f7fe feaa 	bl	80013d8 <HAL_GetTick>
 8002684:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002686:	4b39      	ldr	r3, [pc, #228]	@ (800276c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	015b      	lsls	r3, r3, #5
 800268c:	0d1b      	lsrs	r3, r3, #20
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002696:	e054      	b.n	8002742 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d050      	beq.n	8002742 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026a0:	f7fe fe9a 	bl	80013d8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d902      	bls.n	80026b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d13d      	bne.n	8002732 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80026c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026ce:	d111      	bne.n	80026f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026d8:	d004      	beq.n	80026e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026e2:	d107      	bne.n	80026f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026fc:	d10f      	bne.n	800271e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800271c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e017      	b.n	8002762 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3b01      	subs	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4013      	ands	r3, r2
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	429a      	cmp	r2, r3
 800275e:	d19b      	bne.n	8002698 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000000 	.word	0x20000000

08002770 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2201      	movs	r2, #1
 8002784:	2102      	movs	r1, #2
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff ff6a 	bl	8002660 <SPI_WaitFlagStateUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002796:	f043 0220 	orr.w	r2, r3, #32
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e013      	b.n	80027ca <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2180      	movs	r1, #128	@ 0x80
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff ff57 	bl	8002660 <SPI_WaitFlagStateUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e000      	b.n	80027ca <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e042      	b.n	800286a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d106      	bne.n	80027fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7fe fbc1 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2224      	movs	r2, #36	@ 0x24
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002814:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f82c 	bl	8002874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800282a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800283a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800284a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80028ae:	f023 030c 	bic.w	r3, r3, #12
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002988 <UART_SetConfig+0x114>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d103      	bne.n	80028e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028dc:	f7ff fc54 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	e002      	b.n	80028ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028e4:	f7ff fc3c 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 80028e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	009a      	lsls	r2, r3, #2
 80028f4:	441a      	add	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	4a22      	ldr	r2, [pc, #136]	@ (800298c <UART_SetConfig+0x118>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	0119      	lsls	r1, r3, #4
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	009a      	lsls	r2, r3, #2
 8002914:	441a      	add	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002920:	4b1a      	ldr	r3, [pc, #104]	@ (800298c <UART_SetConfig+0x118>)
 8002922:	fba3 0302 	umull	r0, r3, r3, r2
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2064      	movs	r0, #100	@ 0x64
 800292a:	fb00 f303 	mul.w	r3, r0, r3
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	3332      	adds	r3, #50	@ 0x32
 8002934:	4a15      	ldr	r2, [pc, #84]	@ (800298c <UART_SetConfig+0x118>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002940:	4419      	add	r1, r3
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	009a      	lsls	r2, r3, #2
 800294c:	441a      	add	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	fbb2 f2f3 	udiv	r2, r2, r3
 8002958:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <UART_SetConfig+0x118>)
 800295a:	fba3 0302 	umull	r0, r3, r3, r2
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2064      	movs	r0, #100	@ 0x64
 8002962:	fb00 f303 	mul.w	r3, r0, r3
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	3332      	adds	r3, #50	@ 0x32
 800296c:	4a07      	ldr	r2, [pc, #28]	@ (800298c <UART_SetConfig+0x118>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	f003 020f 	and.w	r2, r3, #15
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	440a      	add	r2, r1
 800297e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40013800 	.word	0x40013800
 800298c:	51eb851f 	.word	0x51eb851f

08002990 <std>:
 8002990:	2300      	movs	r3, #0
 8002992:	b510      	push	{r4, lr}
 8002994:	4604      	mov	r4, r0
 8002996:	e9c0 3300 	strd	r3, r3, [r0]
 800299a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800299e:	6083      	str	r3, [r0, #8]
 80029a0:	8181      	strh	r1, [r0, #12]
 80029a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80029a4:	81c2      	strh	r2, [r0, #14]
 80029a6:	6183      	str	r3, [r0, #24]
 80029a8:	4619      	mov	r1, r3
 80029aa:	2208      	movs	r2, #8
 80029ac:	305c      	adds	r0, #92	@ 0x5c
 80029ae:	f000 fa1b 	bl	8002de8 <memset>
 80029b2:	4b0d      	ldr	r3, [pc, #52]	@ (80029e8 <std+0x58>)
 80029b4:	6224      	str	r4, [r4, #32]
 80029b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80029b8:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <std+0x5c>)
 80029ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80029bc:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <std+0x60>)
 80029be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80029c0:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <std+0x64>)
 80029c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <std+0x68>)
 80029c6:	429c      	cmp	r4, r3
 80029c8:	d006      	beq.n	80029d8 <std+0x48>
 80029ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80029ce:	4294      	cmp	r4, r2
 80029d0:	d002      	beq.n	80029d8 <std+0x48>
 80029d2:	33d0      	adds	r3, #208	@ 0xd0
 80029d4:	429c      	cmp	r4, r3
 80029d6:	d105      	bne.n	80029e4 <std+0x54>
 80029d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80029dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029e0:	f000 ba7a 	b.w	8002ed8 <__retarget_lock_init_recursive>
 80029e4:	bd10      	pop	{r4, pc}
 80029e6:	bf00      	nop
 80029e8:	08002c39 	.word	0x08002c39
 80029ec:	08002c5b 	.word	0x08002c5b
 80029f0:	08002c93 	.word	0x08002c93
 80029f4:	08002cb7 	.word	0x08002cb7
 80029f8:	20000140 	.word	0x20000140

080029fc <stdio_exit_handler>:
 80029fc:	4a02      	ldr	r2, [pc, #8]	@ (8002a08 <stdio_exit_handler+0xc>)
 80029fe:	4903      	ldr	r1, [pc, #12]	@ (8002a0c <stdio_exit_handler+0x10>)
 8002a00:	4803      	ldr	r0, [pc, #12]	@ (8002a10 <stdio_exit_handler+0x14>)
 8002a02:	f000 b869 	b.w	8002ad8 <_fwalk_sglue>
 8002a06:	bf00      	nop
 8002a08:	2000000c 	.word	0x2000000c
 8002a0c:	080037a1 	.word	0x080037a1
 8002a10:	2000001c 	.word	0x2000001c

08002a14 <cleanup_stdio>:
 8002a14:	6841      	ldr	r1, [r0, #4]
 8002a16:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <cleanup_stdio+0x34>)
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	4299      	cmp	r1, r3
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	d001      	beq.n	8002a24 <cleanup_stdio+0x10>
 8002a20:	f000 febe 	bl	80037a0 <_fflush_r>
 8002a24:	68a1      	ldr	r1, [r4, #8]
 8002a26:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <cleanup_stdio+0x38>)
 8002a28:	4299      	cmp	r1, r3
 8002a2a:	d002      	beq.n	8002a32 <cleanup_stdio+0x1e>
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f000 feb7 	bl	80037a0 <_fflush_r>
 8002a32:	68e1      	ldr	r1, [r4, #12]
 8002a34:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <cleanup_stdio+0x3c>)
 8002a36:	4299      	cmp	r1, r3
 8002a38:	d004      	beq.n	8002a44 <cleanup_stdio+0x30>
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a40:	f000 beae 	b.w	80037a0 <_fflush_r>
 8002a44:	bd10      	pop	{r4, pc}
 8002a46:	bf00      	nop
 8002a48:	20000140 	.word	0x20000140
 8002a4c:	200001a8 	.word	0x200001a8
 8002a50:	20000210 	.word	0x20000210

08002a54 <global_stdio_init.part.0>:
 8002a54:	b510      	push	{r4, lr}
 8002a56:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <global_stdio_init.part.0+0x30>)
 8002a58:	4c0b      	ldr	r4, [pc, #44]	@ (8002a88 <global_stdio_init.part.0+0x34>)
 8002a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a8c <global_stdio_init.part.0+0x38>)
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	2104      	movs	r1, #4
 8002a62:	2200      	movs	r2, #0
 8002a64:	f7ff ff94 	bl	8002990 <std>
 8002a68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	2109      	movs	r1, #9
 8002a70:	f7ff ff8e 	bl	8002990 <std>
 8002a74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002a78:	2202      	movs	r2, #2
 8002a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a7e:	2112      	movs	r1, #18
 8002a80:	f7ff bf86 	b.w	8002990 <std>
 8002a84:	20000278 	.word	0x20000278
 8002a88:	20000140 	.word	0x20000140
 8002a8c:	080029fd 	.word	0x080029fd

08002a90 <__sfp_lock_acquire>:
 8002a90:	4801      	ldr	r0, [pc, #4]	@ (8002a98 <__sfp_lock_acquire+0x8>)
 8002a92:	f000 ba22 	b.w	8002eda <__retarget_lock_acquire_recursive>
 8002a96:	bf00      	nop
 8002a98:	20000281 	.word	0x20000281

08002a9c <__sfp_lock_release>:
 8002a9c:	4801      	ldr	r0, [pc, #4]	@ (8002aa4 <__sfp_lock_release+0x8>)
 8002a9e:	f000 ba1d 	b.w	8002edc <__retarget_lock_release_recursive>
 8002aa2:	bf00      	nop
 8002aa4:	20000281 	.word	0x20000281

08002aa8 <__sinit>:
 8002aa8:	b510      	push	{r4, lr}
 8002aaa:	4604      	mov	r4, r0
 8002aac:	f7ff fff0 	bl	8002a90 <__sfp_lock_acquire>
 8002ab0:	6a23      	ldr	r3, [r4, #32]
 8002ab2:	b11b      	cbz	r3, 8002abc <__sinit+0x14>
 8002ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ab8:	f7ff bff0 	b.w	8002a9c <__sfp_lock_release>
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <__sinit+0x28>)
 8002abe:	6223      	str	r3, [r4, #32]
 8002ac0:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <__sinit+0x2c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f5      	bne.n	8002ab4 <__sinit+0xc>
 8002ac8:	f7ff ffc4 	bl	8002a54 <global_stdio_init.part.0>
 8002acc:	e7f2      	b.n	8002ab4 <__sinit+0xc>
 8002ace:	bf00      	nop
 8002ad0:	08002a15 	.word	0x08002a15
 8002ad4:	20000278 	.word	0x20000278

08002ad8 <_fwalk_sglue>:
 8002ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002adc:	4607      	mov	r7, r0
 8002ade:	4688      	mov	r8, r1
 8002ae0:	4614      	mov	r4, r2
 8002ae2:	2600      	movs	r6, #0
 8002ae4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ae8:	f1b9 0901 	subs.w	r9, r9, #1
 8002aec:	d505      	bpl.n	8002afa <_fwalk_sglue+0x22>
 8002aee:	6824      	ldr	r4, [r4, #0]
 8002af0:	2c00      	cmp	r4, #0
 8002af2:	d1f7      	bne.n	8002ae4 <_fwalk_sglue+0xc>
 8002af4:	4630      	mov	r0, r6
 8002af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002afa:	89ab      	ldrh	r3, [r5, #12]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d907      	bls.n	8002b10 <_fwalk_sglue+0x38>
 8002b00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b04:	3301      	adds	r3, #1
 8002b06:	d003      	beq.n	8002b10 <_fwalk_sglue+0x38>
 8002b08:	4629      	mov	r1, r5
 8002b0a:	4638      	mov	r0, r7
 8002b0c:	47c0      	blx	r8
 8002b0e:	4306      	orrs	r6, r0
 8002b10:	3568      	adds	r5, #104	@ 0x68
 8002b12:	e7e9      	b.n	8002ae8 <_fwalk_sglue+0x10>

08002b14 <_puts_r>:
 8002b14:	6a03      	ldr	r3, [r0, #32]
 8002b16:	b570      	push	{r4, r5, r6, lr}
 8002b18:	4605      	mov	r5, r0
 8002b1a:	460e      	mov	r6, r1
 8002b1c:	6884      	ldr	r4, [r0, #8]
 8002b1e:	b90b      	cbnz	r3, 8002b24 <_puts_r+0x10>
 8002b20:	f7ff ffc2 	bl	8002aa8 <__sinit>
 8002b24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b26:	07db      	lsls	r3, r3, #31
 8002b28:	d405      	bmi.n	8002b36 <_puts_r+0x22>
 8002b2a:	89a3      	ldrh	r3, [r4, #12]
 8002b2c:	0598      	lsls	r0, r3, #22
 8002b2e:	d402      	bmi.n	8002b36 <_puts_r+0x22>
 8002b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b32:	f000 f9d2 	bl	8002eda <__retarget_lock_acquire_recursive>
 8002b36:	89a3      	ldrh	r3, [r4, #12]
 8002b38:	0719      	lsls	r1, r3, #28
 8002b3a:	d502      	bpl.n	8002b42 <_puts_r+0x2e>
 8002b3c:	6923      	ldr	r3, [r4, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d135      	bne.n	8002bae <_puts_r+0x9a>
 8002b42:	4621      	mov	r1, r4
 8002b44:	4628      	mov	r0, r5
 8002b46:	f000 f8f9 	bl	8002d3c <__swsetup_r>
 8002b4a:	b380      	cbz	r0, 8002bae <_puts_r+0x9a>
 8002b4c:	f04f 35ff 	mov.w	r5, #4294967295
 8002b50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b52:	07da      	lsls	r2, r3, #31
 8002b54:	d405      	bmi.n	8002b62 <_puts_r+0x4e>
 8002b56:	89a3      	ldrh	r3, [r4, #12]
 8002b58:	059b      	lsls	r3, r3, #22
 8002b5a:	d402      	bmi.n	8002b62 <_puts_r+0x4e>
 8002b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b5e:	f000 f9bd 	bl	8002edc <__retarget_lock_release_recursive>
 8002b62:	4628      	mov	r0, r5
 8002b64:	bd70      	pop	{r4, r5, r6, pc}
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	da04      	bge.n	8002b74 <_puts_r+0x60>
 8002b6a:	69a2      	ldr	r2, [r4, #24]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	dc17      	bgt.n	8002ba0 <_puts_r+0x8c>
 8002b70:	290a      	cmp	r1, #10
 8002b72:	d015      	beq.n	8002ba0 <_puts_r+0x8c>
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	6022      	str	r2, [r4, #0]
 8002b7a:	7019      	strb	r1, [r3, #0]
 8002b7c:	68a3      	ldr	r3, [r4, #8]
 8002b7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002b82:	3b01      	subs	r3, #1
 8002b84:	60a3      	str	r3, [r4, #8]
 8002b86:	2900      	cmp	r1, #0
 8002b88:	d1ed      	bne.n	8002b66 <_puts_r+0x52>
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	da11      	bge.n	8002bb2 <_puts_r+0x9e>
 8002b8e:	4622      	mov	r2, r4
 8002b90:	210a      	movs	r1, #10
 8002b92:	4628      	mov	r0, r5
 8002b94:	f000 f893 	bl	8002cbe <__swbuf_r>
 8002b98:	3001      	adds	r0, #1
 8002b9a:	d0d7      	beq.n	8002b4c <_puts_r+0x38>
 8002b9c:	250a      	movs	r5, #10
 8002b9e:	e7d7      	b.n	8002b50 <_puts_r+0x3c>
 8002ba0:	4622      	mov	r2, r4
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f000 f88b 	bl	8002cbe <__swbuf_r>
 8002ba8:	3001      	adds	r0, #1
 8002baa:	d1e7      	bne.n	8002b7c <_puts_r+0x68>
 8002bac:	e7ce      	b.n	8002b4c <_puts_r+0x38>
 8002bae:	3e01      	subs	r6, #1
 8002bb0:	e7e4      	b.n	8002b7c <_puts_r+0x68>
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	6022      	str	r2, [r4, #0]
 8002bb8:	220a      	movs	r2, #10
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e7ee      	b.n	8002b9c <_puts_r+0x88>
	...

08002bc0 <puts>:
 8002bc0:	4b02      	ldr	r3, [pc, #8]	@ (8002bcc <puts+0xc>)
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	f7ff bfa5 	b.w	8002b14 <_puts_r>
 8002bca:	bf00      	nop
 8002bcc:	20000018 	.word	0x20000018

08002bd0 <sniprintf>:
 8002bd0:	b40c      	push	{r2, r3}
 8002bd2:	b530      	push	{r4, r5, lr}
 8002bd4:	4b17      	ldr	r3, [pc, #92]	@ (8002c34 <sniprintf+0x64>)
 8002bd6:	1e0c      	subs	r4, r1, #0
 8002bd8:	681d      	ldr	r5, [r3, #0]
 8002bda:	b09d      	sub	sp, #116	@ 0x74
 8002bdc:	da08      	bge.n	8002bf0 <sniprintf+0x20>
 8002bde:	238b      	movs	r3, #139	@ 0x8b
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	602b      	str	r3, [r5, #0]
 8002be6:	b01d      	add	sp, #116	@ 0x74
 8002be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002bec:	b002      	add	sp, #8
 8002bee:	4770      	bx	lr
 8002bf0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002bf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002bf8:	bf0c      	ite	eq
 8002bfa:	4623      	moveq	r3, r4
 8002bfc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002c00:	9304      	str	r3, [sp, #16]
 8002c02:	9307      	str	r3, [sp, #28]
 8002c04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c08:	9002      	str	r0, [sp, #8]
 8002c0a:	9006      	str	r0, [sp, #24]
 8002c0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002c10:	4628      	mov	r0, r5
 8002c12:	ab21      	add	r3, sp, #132	@ 0x84
 8002c14:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002c16:	a902      	add	r1, sp, #8
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	f000 fab3 	bl	8003184 <_svfiprintf_r>
 8002c1e:	1c43      	adds	r3, r0, #1
 8002c20:	bfbc      	itt	lt
 8002c22:	238b      	movlt	r3, #139	@ 0x8b
 8002c24:	602b      	strlt	r3, [r5, #0]
 8002c26:	2c00      	cmp	r4, #0
 8002c28:	d0dd      	beq.n	8002be6 <sniprintf+0x16>
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	9b02      	ldr	r3, [sp, #8]
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e7d9      	b.n	8002be6 <sniprintf+0x16>
 8002c32:	bf00      	nop
 8002c34:	20000018 	.word	0x20000018

08002c38 <__sread>:
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c40:	f000 f8fc 	bl	8002e3c <_read_r>
 8002c44:	2800      	cmp	r0, #0
 8002c46:	bfab      	itete	ge
 8002c48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8002c4c:	181b      	addge	r3, r3, r0
 8002c4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002c52:	bfac      	ite	ge
 8002c54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002c56:	81a3      	strhlt	r3, [r4, #12]
 8002c58:	bd10      	pop	{r4, pc}

08002c5a <__swrite>:
 8002c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c5e:	461f      	mov	r7, r3
 8002c60:	898b      	ldrh	r3, [r1, #12]
 8002c62:	4605      	mov	r5, r0
 8002c64:	05db      	lsls	r3, r3, #23
 8002c66:	460c      	mov	r4, r1
 8002c68:	4616      	mov	r6, r2
 8002c6a:	d505      	bpl.n	8002c78 <__swrite+0x1e>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c74:	f000 f8d0 	bl	8002e18 <_lseek_r>
 8002c78:	89a3      	ldrh	r3, [r4, #12]
 8002c7a:	4632      	mov	r2, r6
 8002c7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c80:	81a3      	strh	r3, [r4, #12]
 8002c82:	4628      	mov	r0, r5
 8002c84:	463b      	mov	r3, r7
 8002c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c8e:	f000 b8e7 	b.w	8002e60 <_write_r>

08002c92 <__sseek>:
 8002c92:	b510      	push	{r4, lr}
 8002c94:	460c      	mov	r4, r1
 8002c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c9a:	f000 f8bd 	bl	8002e18 <_lseek_r>
 8002c9e:	1c43      	adds	r3, r0, #1
 8002ca0:	89a3      	ldrh	r3, [r4, #12]
 8002ca2:	bf15      	itete	ne
 8002ca4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ca6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002caa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002cae:	81a3      	strheq	r3, [r4, #12]
 8002cb0:	bf18      	it	ne
 8002cb2:	81a3      	strhne	r3, [r4, #12]
 8002cb4:	bd10      	pop	{r4, pc}

08002cb6 <__sclose>:
 8002cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cba:	f000 b89d 	b.w	8002df8 <_close_r>

08002cbe <__swbuf_r>:
 8002cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc0:	460e      	mov	r6, r1
 8002cc2:	4614      	mov	r4, r2
 8002cc4:	4605      	mov	r5, r0
 8002cc6:	b118      	cbz	r0, 8002cd0 <__swbuf_r+0x12>
 8002cc8:	6a03      	ldr	r3, [r0, #32]
 8002cca:	b90b      	cbnz	r3, 8002cd0 <__swbuf_r+0x12>
 8002ccc:	f7ff feec 	bl	8002aa8 <__sinit>
 8002cd0:	69a3      	ldr	r3, [r4, #24]
 8002cd2:	60a3      	str	r3, [r4, #8]
 8002cd4:	89a3      	ldrh	r3, [r4, #12]
 8002cd6:	071a      	lsls	r2, r3, #28
 8002cd8:	d501      	bpl.n	8002cde <__swbuf_r+0x20>
 8002cda:	6923      	ldr	r3, [r4, #16]
 8002cdc:	b943      	cbnz	r3, 8002cf0 <__swbuf_r+0x32>
 8002cde:	4621      	mov	r1, r4
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	f000 f82b 	bl	8002d3c <__swsetup_r>
 8002ce6:	b118      	cbz	r0, 8002cf0 <__swbuf_r+0x32>
 8002ce8:	f04f 37ff 	mov.w	r7, #4294967295
 8002cec:	4638      	mov	r0, r7
 8002cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	6922      	ldr	r2, [r4, #16]
 8002cf4:	b2f6      	uxtb	r6, r6
 8002cf6:	1a98      	subs	r0, r3, r2
 8002cf8:	6963      	ldr	r3, [r4, #20]
 8002cfa:	4637      	mov	r7, r6
 8002cfc:	4283      	cmp	r3, r0
 8002cfe:	dc05      	bgt.n	8002d0c <__swbuf_r+0x4e>
 8002d00:	4621      	mov	r1, r4
 8002d02:	4628      	mov	r0, r5
 8002d04:	f000 fd4c 	bl	80037a0 <_fflush_r>
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	d1ed      	bne.n	8002ce8 <__swbuf_r+0x2a>
 8002d0c:	68a3      	ldr	r3, [r4, #8]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	60a3      	str	r3, [r4, #8]
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	6022      	str	r2, [r4, #0]
 8002d18:	701e      	strb	r6, [r3, #0]
 8002d1a:	6962      	ldr	r2, [r4, #20]
 8002d1c:	1c43      	adds	r3, r0, #1
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d004      	beq.n	8002d2c <__swbuf_r+0x6e>
 8002d22:	89a3      	ldrh	r3, [r4, #12]
 8002d24:	07db      	lsls	r3, r3, #31
 8002d26:	d5e1      	bpl.n	8002cec <__swbuf_r+0x2e>
 8002d28:	2e0a      	cmp	r6, #10
 8002d2a:	d1df      	bne.n	8002cec <__swbuf_r+0x2e>
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f000 fd36 	bl	80037a0 <_fflush_r>
 8002d34:	2800      	cmp	r0, #0
 8002d36:	d0d9      	beq.n	8002cec <__swbuf_r+0x2e>
 8002d38:	e7d6      	b.n	8002ce8 <__swbuf_r+0x2a>
	...

08002d3c <__swsetup_r>:
 8002d3c:	b538      	push	{r3, r4, r5, lr}
 8002d3e:	4b29      	ldr	r3, [pc, #164]	@ (8002de4 <__swsetup_r+0xa8>)
 8002d40:	4605      	mov	r5, r0
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	460c      	mov	r4, r1
 8002d46:	b118      	cbz	r0, 8002d50 <__swsetup_r+0x14>
 8002d48:	6a03      	ldr	r3, [r0, #32]
 8002d4a:	b90b      	cbnz	r3, 8002d50 <__swsetup_r+0x14>
 8002d4c:	f7ff feac 	bl	8002aa8 <__sinit>
 8002d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d54:	0719      	lsls	r1, r3, #28
 8002d56:	d422      	bmi.n	8002d9e <__swsetup_r+0x62>
 8002d58:	06da      	lsls	r2, r3, #27
 8002d5a:	d407      	bmi.n	8002d6c <__swsetup_r+0x30>
 8002d5c:	2209      	movs	r2, #9
 8002d5e:	602a      	str	r2, [r5, #0]
 8002d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	81a3      	strh	r3, [r4, #12]
 8002d6a:	e033      	b.n	8002dd4 <__swsetup_r+0x98>
 8002d6c:	0758      	lsls	r0, r3, #29
 8002d6e:	d512      	bpl.n	8002d96 <__swsetup_r+0x5a>
 8002d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d72:	b141      	cbz	r1, 8002d86 <__swsetup_r+0x4a>
 8002d74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d78:	4299      	cmp	r1, r3
 8002d7a:	d002      	beq.n	8002d82 <__swsetup_r+0x46>
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	f000 f8af 	bl	8002ee0 <_free_r>
 8002d82:	2300      	movs	r3, #0
 8002d84:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d86:	89a3      	ldrh	r3, [r4, #12]
 8002d88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002d8c:	81a3      	strh	r3, [r4, #12]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	6063      	str	r3, [r4, #4]
 8002d92:	6923      	ldr	r3, [r4, #16]
 8002d94:	6023      	str	r3, [r4, #0]
 8002d96:	89a3      	ldrh	r3, [r4, #12]
 8002d98:	f043 0308 	orr.w	r3, r3, #8
 8002d9c:	81a3      	strh	r3, [r4, #12]
 8002d9e:	6923      	ldr	r3, [r4, #16]
 8002da0:	b94b      	cbnz	r3, 8002db6 <__swsetup_r+0x7a>
 8002da2:	89a3      	ldrh	r3, [r4, #12]
 8002da4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dac:	d003      	beq.n	8002db6 <__swsetup_r+0x7a>
 8002dae:	4621      	mov	r1, r4
 8002db0:	4628      	mov	r0, r5
 8002db2:	f000 fd42 	bl	800383a <__smakebuf_r>
 8002db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dba:	f013 0201 	ands.w	r2, r3, #1
 8002dbe:	d00a      	beq.n	8002dd6 <__swsetup_r+0x9a>
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	60a2      	str	r2, [r4, #8]
 8002dc4:	6962      	ldr	r2, [r4, #20]
 8002dc6:	4252      	negs	r2, r2
 8002dc8:	61a2      	str	r2, [r4, #24]
 8002dca:	6922      	ldr	r2, [r4, #16]
 8002dcc:	b942      	cbnz	r2, 8002de0 <__swsetup_r+0xa4>
 8002dce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002dd2:	d1c5      	bne.n	8002d60 <__swsetup_r+0x24>
 8002dd4:	bd38      	pop	{r3, r4, r5, pc}
 8002dd6:	0799      	lsls	r1, r3, #30
 8002dd8:	bf58      	it	pl
 8002dda:	6962      	ldrpl	r2, [r4, #20]
 8002ddc:	60a2      	str	r2, [r4, #8]
 8002dde:	e7f4      	b.n	8002dca <__swsetup_r+0x8e>
 8002de0:	2000      	movs	r0, #0
 8002de2:	e7f7      	b.n	8002dd4 <__swsetup_r+0x98>
 8002de4:	20000018 	.word	0x20000018

08002de8 <memset>:
 8002de8:	4603      	mov	r3, r0
 8002dea:	4402      	add	r2, r0
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d100      	bne.n	8002df2 <memset+0xa>
 8002df0:	4770      	bx	lr
 8002df2:	f803 1b01 	strb.w	r1, [r3], #1
 8002df6:	e7f9      	b.n	8002dec <memset+0x4>

08002df8 <_close_r>:
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	4d05      	ldr	r5, [pc, #20]	@ (8002e14 <_close_r+0x1c>)
 8002dfe:	4604      	mov	r4, r0
 8002e00:	4608      	mov	r0, r1
 8002e02:	602b      	str	r3, [r5, #0]
 8002e04:	f7fe f98d 	bl	8001122 <_close>
 8002e08:	1c43      	adds	r3, r0, #1
 8002e0a:	d102      	bne.n	8002e12 <_close_r+0x1a>
 8002e0c:	682b      	ldr	r3, [r5, #0]
 8002e0e:	b103      	cbz	r3, 8002e12 <_close_r+0x1a>
 8002e10:	6023      	str	r3, [r4, #0]
 8002e12:	bd38      	pop	{r3, r4, r5, pc}
 8002e14:	2000027c 	.word	0x2000027c

08002e18 <_lseek_r>:
 8002e18:	b538      	push	{r3, r4, r5, lr}
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	2200      	movs	r2, #0
 8002e22:	4d05      	ldr	r5, [pc, #20]	@ (8002e38 <_lseek_r+0x20>)
 8002e24:	602a      	str	r2, [r5, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f7fe f99f 	bl	800116a <_lseek>
 8002e2c:	1c43      	adds	r3, r0, #1
 8002e2e:	d102      	bne.n	8002e36 <_lseek_r+0x1e>
 8002e30:	682b      	ldr	r3, [r5, #0]
 8002e32:	b103      	cbz	r3, 8002e36 <_lseek_r+0x1e>
 8002e34:	6023      	str	r3, [r4, #0]
 8002e36:	bd38      	pop	{r3, r4, r5, pc}
 8002e38:	2000027c 	.word	0x2000027c

08002e3c <_read_r>:
 8002e3c:	b538      	push	{r3, r4, r5, lr}
 8002e3e:	4604      	mov	r4, r0
 8002e40:	4608      	mov	r0, r1
 8002e42:	4611      	mov	r1, r2
 8002e44:	2200      	movs	r2, #0
 8002e46:	4d05      	ldr	r5, [pc, #20]	@ (8002e5c <_read_r+0x20>)
 8002e48:	602a      	str	r2, [r5, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f7fe f930 	bl	80010b0 <_read>
 8002e50:	1c43      	adds	r3, r0, #1
 8002e52:	d102      	bne.n	8002e5a <_read_r+0x1e>
 8002e54:	682b      	ldr	r3, [r5, #0]
 8002e56:	b103      	cbz	r3, 8002e5a <_read_r+0x1e>
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	bd38      	pop	{r3, r4, r5, pc}
 8002e5c:	2000027c 	.word	0x2000027c

08002e60 <_write_r>:
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	4604      	mov	r4, r0
 8002e64:	4608      	mov	r0, r1
 8002e66:	4611      	mov	r1, r2
 8002e68:	2200      	movs	r2, #0
 8002e6a:	4d05      	ldr	r5, [pc, #20]	@ (8002e80 <_write_r+0x20>)
 8002e6c:	602a      	str	r2, [r5, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f7fe f93b 	bl	80010ea <_write>
 8002e74:	1c43      	adds	r3, r0, #1
 8002e76:	d102      	bne.n	8002e7e <_write_r+0x1e>
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	b103      	cbz	r3, 8002e7e <_write_r+0x1e>
 8002e7c:	6023      	str	r3, [r4, #0]
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}
 8002e80:	2000027c 	.word	0x2000027c

08002e84 <__errno>:
 8002e84:	4b01      	ldr	r3, [pc, #4]	@ (8002e8c <__errno+0x8>)
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000018 	.word	0x20000018

08002e90 <__libc_init_array>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	2600      	movs	r6, #0
 8002e94:	4d0c      	ldr	r5, [pc, #48]	@ (8002ec8 <__libc_init_array+0x38>)
 8002e96:	4c0d      	ldr	r4, [pc, #52]	@ (8002ecc <__libc_init_array+0x3c>)
 8002e98:	1b64      	subs	r4, r4, r5
 8002e9a:	10a4      	asrs	r4, r4, #2
 8002e9c:	42a6      	cmp	r6, r4
 8002e9e:	d109      	bne.n	8002eb4 <__libc_init_array+0x24>
 8002ea0:	f000 fda6 	bl	80039f0 <_init>
 8002ea4:	2600      	movs	r6, #0
 8002ea6:	4d0a      	ldr	r5, [pc, #40]	@ (8002ed0 <__libc_init_array+0x40>)
 8002ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ed4 <__libc_init_array+0x44>)
 8002eaa:	1b64      	subs	r4, r4, r5
 8002eac:	10a4      	asrs	r4, r4, #2
 8002eae:	42a6      	cmp	r6, r4
 8002eb0:	d105      	bne.n	8002ebe <__libc_init_array+0x2e>
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb8:	4798      	blx	r3
 8002eba:	3601      	adds	r6, #1
 8002ebc:	e7ee      	b.n	8002e9c <__libc_init_array+0xc>
 8002ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec2:	4798      	blx	r3
 8002ec4:	3601      	adds	r6, #1
 8002ec6:	e7f2      	b.n	8002eae <__libc_init_array+0x1e>
 8002ec8:	08003a84 	.word	0x08003a84
 8002ecc:	08003a84 	.word	0x08003a84
 8002ed0:	08003a84 	.word	0x08003a84
 8002ed4:	08003a88 	.word	0x08003a88

08002ed8 <__retarget_lock_init_recursive>:
 8002ed8:	4770      	bx	lr

08002eda <__retarget_lock_acquire_recursive>:
 8002eda:	4770      	bx	lr

08002edc <__retarget_lock_release_recursive>:
 8002edc:	4770      	bx	lr
	...

08002ee0 <_free_r>:
 8002ee0:	b538      	push	{r3, r4, r5, lr}
 8002ee2:	4605      	mov	r5, r0
 8002ee4:	2900      	cmp	r1, #0
 8002ee6:	d040      	beq.n	8002f6a <_free_r+0x8a>
 8002ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eec:	1f0c      	subs	r4, r1, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bfb8      	it	lt
 8002ef2:	18e4      	addlt	r4, r4, r3
 8002ef4:	f000 f8de 	bl	80030b4 <__malloc_lock>
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f6c <_free_r+0x8c>)
 8002efa:	6813      	ldr	r3, [r2, #0]
 8002efc:	b933      	cbnz	r3, 8002f0c <_free_r+0x2c>
 8002efe:	6063      	str	r3, [r4, #4]
 8002f00:	6014      	str	r4, [r2, #0]
 8002f02:	4628      	mov	r0, r5
 8002f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f08:	f000 b8da 	b.w	80030c0 <__malloc_unlock>
 8002f0c:	42a3      	cmp	r3, r4
 8002f0e:	d908      	bls.n	8002f22 <_free_r+0x42>
 8002f10:	6820      	ldr	r0, [r4, #0]
 8002f12:	1821      	adds	r1, r4, r0
 8002f14:	428b      	cmp	r3, r1
 8002f16:	bf01      	itttt	eq
 8002f18:	6819      	ldreq	r1, [r3, #0]
 8002f1a:	685b      	ldreq	r3, [r3, #4]
 8002f1c:	1809      	addeq	r1, r1, r0
 8002f1e:	6021      	streq	r1, [r4, #0]
 8002f20:	e7ed      	b.n	8002efe <_free_r+0x1e>
 8002f22:	461a      	mov	r2, r3
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	b10b      	cbz	r3, 8002f2c <_free_r+0x4c>
 8002f28:	42a3      	cmp	r3, r4
 8002f2a:	d9fa      	bls.n	8002f22 <_free_r+0x42>
 8002f2c:	6811      	ldr	r1, [r2, #0]
 8002f2e:	1850      	adds	r0, r2, r1
 8002f30:	42a0      	cmp	r0, r4
 8002f32:	d10b      	bne.n	8002f4c <_free_r+0x6c>
 8002f34:	6820      	ldr	r0, [r4, #0]
 8002f36:	4401      	add	r1, r0
 8002f38:	1850      	adds	r0, r2, r1
 8002f3a:	4283      	cmp	r3, r0
 8002f3c:	6011      	str	r1, [r2, #0]
 8002f3e:	d1e0      	bne.n	8002f02 <_free_r+0x22>
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4408      	add	r0, r1
 8002f46:	6010      	str	r0, [r2, #0]
 8002f48:	6053      	str	r3, [r2, #4]
 8002f4a:	e7da      	b.n	8002f02 <_free_r+0x22>
 8002f4c:	d902      	bls.n	8002f54 <_free_r+0x74>
 8002f4e:	230c      	movs	r3, #12
 8002f50:	602b      	str	r3, [r5, #0]
 8002f52:	e7d6      	b.n	8002f02 <_free_r+0x22>
 8002f54:	6820      	ldr	r0, [r4, #0]
 8002f56:	1821      	adds	r1, r4, r0
 8002f58:	428b      	cmp	r3, r1
 8002f5a:	bf01      	itttt	eq
 8002f5c:	6819      	ldreq	r1, [r3, #0]
 8002f5e:	685b      	ldreq	r3, [r3, #4]
 8002f60:	1809      	addeq	r1, r1, r0
 8002f62:	6021      	streq	r1, [r4, #0]
 8002f64:	6063      	str	r3, [r4, #4]
 8002f66:	6054      	str	r4, [r2, #4]
 8002f68:	e7cb      	b.n	8002f02 <_free_r+0x22>
 8002f6a:	bd38      	pop	{r3, r4, r5, pc}
 8002f6c:	20000288 	.word	0x20000288

08002f70 <sbrk_aligned>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	4e0f      	ldr	r6, [pc, #60]	@ (8002fb0 <sbrk_aligned+0x40>)
 8002f74:	460c      	mov	r4, r1
 8002f76:	6831      	ldr	r1, [r6, #0]
 8002f78:	4605      	mov	r5, r0
 8002f7a:	b911      	cbnz	r1, 8002f82 <sbrk_aligned+0x12>
 8002f7c:	f000 fcd6 	bl	800392c <_sbrk_r>
 8002f80:	6030      	str	r0, [r6, #0]
 8002f82:	4621      	mov	r1, r4
 8002f84:	4628      	mov	r0, r5
 8002f86:	f000 fcd1 	bl	800392c <_sbrk_r>
 8002f8a:	1c43      	adds	r3, r0, #1
 8002f8c:	d103      	bne.n	8002f96 <sbrk_aligned+0x26>
 8002f8e:	f04f 34ff 	mov.w	r4, #4294967295
 8002f92:	4620      	mov	r0, r4
 8002f94:	bd70      	pop	{r4, r5, r6, pc}
 8002f96:	1cc4      	adds	r4, r0, #3
 8002f98:	f024 0403 	bic.w	r4, r4, #3
 8002f9c:	42a0      	cmp	r0, r4
 8002f9e:	d0f8      	beq.n	8002f92 <sbrk_aligned+0x22>
 8002fa0:	1a21      	subs	r1, r4, r0
 8002fa2:	4628      	mov	r0, r5
 8002fa4:	f000 fcc2 	bl	800392c <_sbrk_r>
 8002fa8:	3001      	adds	r0, #1
 8002faa:	d1f2      	bne.n	8002f92 <sbrk_aligned+0x22>
 8002fac:	e7ef      	b.n	8002f8e <sbrk_aligned+0x1e>
 8002fae:	bf00      	nop
 8002fb0:	20000284 	.word	0x20000284

08002fb4 <_malloc_r>:
 8002fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fb8:	1ccd      	adds	r5, r1, #3
 8002fba:	f025 0503 	bic.w	r5, r5, #3
 8002fbe:	3508      	adds	r5, #8
 8002fc0:	2d0c      	cmp	r5, #12
 8002fc2:	bf38      	it	cc
 8002fc4:	250c      	movcc	r5, #12
 8002fc6:	2d00      	cmp	r5, #0
 8002fc8:	4606      	mov	r6, r0
 8002fca:	db01      	blt.n	8002fd0 <_malloc_r+0x1c>
 8002fcc:	42a9      	cmp	r1, r5
 8002fce:	d904      	bls.n	8002fda <_malloc_r+0x26>
 8002fd0:	230c      	movs	r3, #12
 8002fd2:	6033      	str	r3, [r6, #0]
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030b0 <_malloc_r+0xfc>
 8002fde:	f000 f869 	bl	80030b4 <__malloc_lock>
 8002fe2:	f8d8 3000 	ldr.w	r3, [r8]
 8002fe6:	461c      	mov	r4, r3
 8002fe8:	bb44      	cbnz	r4, 800303c <_malloc_r+0x88>
 8002fea:	4629      	mov	r1, r5
 8002fec:	4630      	mov	r0, r6
 8002fee:	f7ff ffbf 	bl	8002f70 <sbrk_aligned>
 8002ff2:	1c43      	adds	r3, r0, #1
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	d158      	bne.n	80030aa <_malloc_r+0xf6>
 8002ff8:	f8d8 4000 	ldr.w	r4, [r8]
 8002ffc:	4627      	mov	r7, r4
 8002ffe:	2f00      	cmp	r7, #0
 8003000:	d143      	bne.n	800308a <_malloc_r+0xd6>
 8003002:	2c00      	cmp	r4, #0
 8003004:	d04b      	beq.n	800309e <_malloc_r+0xea>
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	4639      	mov	r1, r7
 800300a:	4630      	mov	r0, r6
 800300c:	eb04 0903 	add.w	r9, r4, r3
 8003010:	f000 fc8c 	bl	800392c <_sbrk_r>
 8003014:	4581      	cmp	r9, r0
 8003016:	d142      	bne.n	800309e <_malloc_r+0xea>
 8003018:	6821      	ldr	r1, [r4, #0]
 800301a:	4630      	mov	r0, r6
 800301c:	1a6d      	subs	r5, r5, r1
 800301e:	4629      	mov	r1, r5
 8003020:	f7ff ffa6 	bl	8002f70 <sbrk_aligned>
 8003024:	3001      	adds	r0, #1
 8003026:	d03a      	beq.n	800309e <_malloc_r+0xea>
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	442b      	add	r3, r5
 800302c:	6023      	str	r3, [r4, #0]
 800302e:	f8d8 3000 	ldr.w	r3, [r8]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	bb62      	cbnz	r2, 8003090 <_malloc_r+0xdc>
 8003036:	f8c8 7000 	str.w	r7, [r8]
 800303a:	e00f      	b.n	800305c <_malloc_r+0xa8>
 800303c:	6822      	ldr	r2, [r4, #0]
 800303e:	1b52      	subs	r2, r2, r5
 8003040:	d420      	bmi.n	8003084 <_malloc_r+0xd0>
 8003042:	2a0b      	cmp	r2, #11
 8003044:	d917      	bls.n	8003076 <_malloc_r+0xc2>
 8003046:	1961      	adds	r1, r4, r5
 8003048:	42a3      	cmp	r3, r4
 800304a:	6025      	str	r5, [r4, #0]
 800304c:	bf18      	it	ne
 800304e:	6059      	strne	r1, [r3, #4]
 8003050:	6863      	ldr	r3, [r4, #4]
 8003052:	bf08      	it	eq
 8003054:	f8c8 1000 	streq.w	r1, [r8]
 8003058:	5162      	str	r2, [r4, r5]
 800305a:	604b      	str	r3, [r1, #4]
 800305c:	4630      	mov	r0, r6
 800305e:	f000 f82f 	bl	80030c0 <__malloc_unlock>
 8003062:	f104 000b 	add.w	r0, r4, #11
 8003066:	1d23      	adds	r3, r4, #4
 8003068:	f020 0007 	bic.w	r0, r0, #7
 800306c:	1ac2      	subs	r2, r0, r3
 800306e:	bf1c      	itt	ne
 8003070:	1a1b      	subne	r3, r3, r0
 8003072:	50a3      	strne	r3, [r4, r2]
 8003074:	e7af      	b.n	8002fd6 <_malloc_r+0x22>
 8003076:	6862      	ldr	r2, [r4, #4]
 8003078:	42a3      	cmp	r3, r4
 800307a:	bf0c      	ite	eq
 800307c:	f8c8 2000 	streq.w	r2, [r8]
 8003080:	605a      	strne	r2, [r3, #4]
 8003082:	e7eb      	b.n	800305c <_malloc_r+0xa8>
 8003084:	4623      	mov	r3, r4
 8003086:	6864      	ldr	r4, [r4, #4]
 8003088:	e7ae      	b.n	8002fe8 <_malloc_r+0x34>
 800308a:	463c      	mov	r4, r7
 800308c:	687f      	ldr	r7, [r7, #4]
 800308e:	e7b6      	b.n	8002ffe <_malloc_r+0x4a>
 8003090:	461a      	mov	r2, r3
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	42a3      	cmp	r3, r4
 8003096:	d1fb      	bne.n	8003090 <_malloc_r+0xdc>
 8003098:	2300      	movs	r3, #0
 800309a:	6053      	str	r3, [r2, #4]
 800309c:	e7de      	b.n	800305c <_malloc_r+0xa8>
 800309e:	230c      	movs	r3, #12
 80030a0:	4630      	mov	r0, r6
 80030a2:	6033      	str	r3, [r6, #0]
 80030a4:	f000 f80c 	bl	80030c0 <__malloc_unlock>
 80030a8:	e794      	b.n	8002fd4 <_malloc_r+0x20>
 80030aa:	6005      	str	r5, [r0, #0]
 80030ac:	e7d6      	b.n	800305c <_malloc_r+0xa8>
 80030ae:	bf00      	nop
 80030b0:	20000288 	.word	0x20000288

080030b4 <__malloc_lock>:
 80030b4:	4801      	ldr	r0, [pc, #4]	@ (80030bc <__malloc_lock+0x8>)
 80030b6:	f7ff bf10 	b.w	8002eda <__retarget_lock_acquire_recursive>
 80030ba:	bf00      	nop
 80030bc:	20000280 	.word	0x20000280

080030c0 <__malloc_unlock>:
 80030c0:	4801      	ldr	r0, [pc, #4]	@ (80030c8 <__malloc_unlock+0x8>)
 80030c2:	f7ff bf0b 	b.w	8002edc <__retarget_lock_release_recursive>
 80030c6:	bf00      	nop
 80030c8:	20000280 	.word	0x20000280

080030cc <__ssputs_r>:
 80030cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d0:	461f      	mov	r7, r3
 80030d2:	688e      	ldr	r6, [r1, #8]
 80030d4:	4682      	mov	sl, r0
 80030d6:	42be      	cmp	r6, r7
 80030d8:	460c      	mov	r4, r1
 80030da:	4690      	mov	r8, r2
 80030dc:	680b      	ldr	r3, [r1, #0]
 80030de:	d82d      	bhi.n	800313c <__ssputs_r+0x70>
 80030e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80030e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80030e8:	d026      	beq.n	8003138 <__ssputs_r+0x6c>
 80030ea:	6965      	ldr	r5, [r4, #20]
 80030ec:	6909      	ldr	r1, [r1, #16]
 80030ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030f2:	eba3 0901 	sub.w	r9, r3, r1
 80030f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030fa:	1c7b      	adds	r3, r7, #1
 80030fc:	444b      	add	r3, r9
 80030fe:	106d      	asrs	r5, r5, #1
 8003100:	429d      	cmp	r5, r3
 8003102:	bf38      	it	cc
 8003104:	461d      	movcc	r5, r3
 8003106:	0553      	lsls	r3, r2, #21
 8003108:	d527      	bpl.n	800315a <__ssputs_r+0x8e>
 800310a:	4629      	mov	r1, r5
 800310c:	f7ff ff52 	bl	8002fb4 <_malloc_r>
 8003110:	4606      	mov	r6, r0
 8003112:	b360      	cbz	r0, 800316e <__ssputs_r+0xa2>
 8003114:	464a      	mov	r2, r9
 8003116:	6921      	ldr	r1, [r4, #16]
 8003118:	f000 fc26 	bl	8003968 <memcpy>
 800311c:	89a3      	ldrh	r3, [r4, #12]
 800311e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003126:	81a3      	strh	r3, [r4, #12]
 8003128:	6126      	str	r6, [r4, #16]
 800312a:	444e      	add	r6, r9
 800312c:	6026      	str	r6, [r4, #0]
 800312e:	463e      	mov	r6, r7
 8003130:	6165      	str	r5, [r4, #20]
 8003132:	eba5 0509 	sub.w	r5, r5, r9
 8003136:	60a5      	str	r5, [r4, #8]
 8003138:	42be      	cmp	r6, r7
 800313a:	d900      	bls.n	800313e <__ssputs_r+0x72>
 800313c:	463e      	mov	r6, r7
 800313e:	4632      	mov	r2, r6
 8003140:	4641      	mov	r1, r8
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	f000 fbb5 	bl	80038b2 <memmove>
 8003148:	2000      	movs	r0, #0
 800314a:	68a3      	ldr	r3, [r4, #8]
 800314c:	1b9b      	subs	r3, r3, r6
 800314e:	60a3      	str	r3, [r4, #8]
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	4433      	add	r3, r6
 8003154:	6023      	str	r3, [r4, #0]
 8003156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800315a:	462a      	mov	r2, r5
 800315c:	f000 fc12 	bl	8003984 <_realloc_r>
 8003160:	4606      	mov	r6, r0
 8003162:	2800      	cmp	r0, #0
 8003164:	d1e0      	bne.n	8003128 <__ssputs_r+0x5c>
 8003166:	4650      	mov	r0, sl
 8003168:	6921      	ldr	r1, [r4, #16]
 800316a:	f7ff feb9 	bl	8002ee0 <_free_r>
 800316e:	230c      	movs	r3, #12
 8003170:	f8ca 3000 	str.w	r3, [sl]
 8003174:	89a3      	ldrh	r3, [r4, #12]
 8003176:	f04f 30ff 	mov.w	r0, #4294967295
 800317a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800317e:	81a3      	strh	r3, [r4, #12]
 8003180:	e7e9      	b.n	8003156 <__ssputs_r+0x8a>
	...

08003184 <_svfiprintf_r>:
 8003184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003188:	4698      	mov	r8, r3
 800318a:	898b      	ldrh	r3, [r1, #12]
 800318c:	4607      	mov	r7, r0
 800318e:	061b      	lsls	r3, r3, #24
 8003190:	460d      	mov	r5, r1
 8003192:	4614      	mov	r4, r2
 8003194:	b09d      	sub	sp, #116	@ 0x74
 8003196:	d510      	bpl.n	80031ba <_svfiprintf_r+0x36>
 8003198:	690b      	ldr	r3, [r1, #16]
 800319a:	b973      	cbnz	r3, 80031ba <_svfiprintf_r+0x36>
 800319c:	2140      	movs	r1, #64	@ 0x40
 800319e:	f7ff ff09 	bl	8002fb4 <_malloc_r>
 80031a2:	6028      	str	r0, [r5, #0]
 80031a4:	6128      	str	r0, [r5, #16]
 80031a6:	b930      	cbnz	r0, 80031b6 <_svfiprintf_r+0x32>
 80031a8:	230c      	movs	r3, #12
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	f04f 30ff 	mov.w	r0, #4294967295
 80031b0:	b01d      	add	sp, #116	@ 0x74
 80031b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b6:	2340      	movs	r3, #64	@ 0x40
 80031b8:	616b      	str	r3, [r5, #20]
 80031ba:	2300      	movs	r3, #0
 80031bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80031be:	2320      	movs	r3, #32
 80031c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80031c4:	2330      	movs	r3, #48	@ 0x30
 80031c6:	f04f 0901 	mov.w	r9, #1
 80031ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80031ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003368 <_svfiprintf_r+0x1e4>
 80031d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031d6:	4623      	mov	r3, r4
 80031d8:	469a      	mov	sl, r3
 80031da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031de:	b10a      	cbz	r2, 80031e4 <_svfiprintf_r+0x60>
 80031e0:	2a25      	cmp	r2, #37	@ 0x25
 80031e2:	d1f9      	bne.n	80031d8 <_svfiprintf_r+0x54>
 80031e4:	ebba 0b04 	subs.w	fp, sl, r4
 80031e8:	d00b      	beq.n	8003202 <_svfiprintf_r+0x7e>
 80031ea:	465b      	mov	r3, fp
 80031ec:	4622      	mov	r2, r4
 80031ee:	4629      	mov	r1, r5
 80031f0:	4638      	mov	r0, r7
 80031f2:	f7ff ff6b 	bl	80030cc <__ssputs_r>
 80031f6:	3001      	adds	r0, #1
 80031f8:	f000 80a7 	beq.w	800334a <_svfiprintf_r+0x1c6>
 80031fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031fe:	445a      	add	r2, fp
 8003200:	9209      	str	r2, [sp, #36]	@ 0x24
 8003202:	f89a 3000 	ldrb.w	r3, [sl]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 809f 	beq.w	800334a <_svfiprintf_r+0x1c6>
 800320c:	2300      	movs	r3, #0
 800320e:	f04f 32ff 	mov.w	r2, #4294967295
 8003212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003216:	f10a 0a01 	add.w	sl, sl, #1
 800321a:	9304      	str	r3, [sp, #16]
 800321c:	9307      	str	r3, [sp, #28]
 800321e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003222:	931a      	str	r3, [sp, #104]	@ 0x68
 8003224:	4654      	mov	r4, sl
 8003226:	2205      	movs	r2, #5
 8003228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800322c:	484e      	ldr	r0, [pc, #312]	@ (8003368 <_svfiprintf_r+0x1e4>)
 800322e:	f000 fb8d 	bl	800394c <memchr>
 8003232:	9a04      	ldr	r2, [sp, #16]
 8003234:	b9d8      	cbnz	r0, 800326e <_svfiprintf_r+0xea>
 8003236:	06d0      	lsls	r0, r2, #27
 8003238:	bf44      	itt	mi
 800323a:	2320      	movmi	r3, #32
 800323c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003240:	0711      	lsls	r1, r2, #28
 8003242:	bf44      	itt	mi
 8003244:	232b      	movmi	r3, #43	@ 0x2b
 8003246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800324a:	f89a 3000 	ldrb.w	r3, [sl]
 800324e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003250:	d015      	beq.n	800327e <_svfiprintf_r+0xfa>
 8003252:	4654      	mov	r4, sl
 8003254:	2000      	movs	r0, #0
 8003256:	f04f 0c0a 	mov.w	ip, #10
 800325a:	9a07      	ldr	r2, [sp, #28]
 800325c:	4621      	mov	r1, r4
 800325e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003262:	3b30      	subs	r3, #48	@ 0x30
 8003264:	2b09      	cmp	r3, #9
 8003266:	d94b      	bls.n	8003300 <_svfiprintf_r+0x17c>
 8003268:	b1b0      	cbz	r0, 8003298 <_svfiprintf_r+0x114>
 800326a:	9207      	str	r2, [sp, #28]
 800326c:	e014      	b.n	8003298 <_svfiprintf_r+0x114>
 800326e:	eba0 0308 	sub.w	r3, r0, r8
 8003272:	fa09 f303 	lsl.w	r3, r9, r3
 8003276:	4313      	orrs	r3, r2
 8003278:	46a2      	mov	sl, r4
 800327a:	9304      	str	r3, [sp, #16]
 800327c:	e7d2      	b.n	8003224 <_svfiprintf_r+0xa0>
 800327e:	9b03      	ldr	r3, [sp, #12]
 8003280:	1d19      	adds	r1, r3, #4
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	9103      	str	r1, [sp, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	bfbb      	ittet	lt
 800328a:	425b      	neglt	r3, r3
 800328c:	f042 0202 	orrlt.w	r2, r2, #2
 8003290:	9307      	strge	r3, [sp, #28]
 8003292:	9307      	strlt	r3, [sp, #28]
 8003294:	bfb8      	it	lt
 8003296:	9204      	strlt	r2, [sp, #16]
 8003298:	7823      	ldrb	r3, [r4, #0]
 800329a:	2b2e      	cmp	r3, #46	@ 0x2e
 800329c:	d10a      	bne.n	80032b4 <_svfiprintf_r+0x130>
 800329e:	7863      	ldrb	r3, [r4, #1]
 80032a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80032a2:	d132      	bne.n	800330a <_svfiprintf_r+0x186>
 80032a4:	9b03      	ldr	r3, [sp, #12]
 80032a6:	3402      	adds	r4, #2
 80032a8:	1d1a      	adds	r2, r3, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	9203      	str	r2, [sp, #12]
 80032ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032b2:	9305      	str	r3, [sp, #20]
 80032b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800336c <_svfiprintf_r+0x1e8>
 80032b8:	2203      	movs	r2, #3
 80032ba:	4650      	mov	r0, sl
 80032bc:	7821      	ldrb	r1, [r4, #0]
 80032be:	f000 fb45 	bl	800394c <memchr>
 80032c2:	b138      	cbz	r0, 80032d4 <_svfiprintf_r+0x150>
 80032c4:	2240      	movs	r2, #64	@ 0x40
 80032c6:	9b04      	ldr	r3, [sp, #16]
 80032c8:	eba0 000a 	sub.w	r0, r0, sl
 80032cc:	4082      	lsls	r2, r0
 80032ce:	4313      	orrs	r3, r2
 80032d0:	3401      	adds	r4, #1
 80032d2:	9304      	str	r3, [sp, #16]
 80032d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d8:	2206      	movs	r2, #6
 80032da:	4825      	ldr	r0, [pc, #148]	@ (8003370 <_svfiprintf_r+0x1ec>)
 80032dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032e0:	f000 fb34 	bl	800394c <memchr>
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d036      	beq.n	8003356 <_svfiprintf_r+0x1d2>
 80032e8:	4b22      	ldr	r3, [pc, #136]	@ (8003374 <_svfiprintf_r+0x1f0>)
 80032ea:	bb1b      	cbnz	r3, 8003334 <_svfiprintf_r+0x1b0>
 80032ec:	9b03      	ldr	r3, [sp, #12]
 80032ee:	3307      	adds	r3, #7
 80032f0:	f023 0307 	bic.w	r3, r3, #7
 80032f4:	3308      	adds	r3, #8
 80032f6:	9303      	str	r3, [sp, #12]
 80032f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032fa:	4433      	add	r3, r6
 80032fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80032fe:	e76a      	b.n	80031d6 <_svfiprintf_r+0x52>
 8003300:	460c      	mov	r4, r1
 8003302:	2001      	movs	r0, #1
 8003304:	fb0c 3202 	mla	r2, ip, r2, r3
 8003308:	e7a8      	b.n	800325c <_svfiprintf_r+0xd8>
 800330a:	2300      	movs	r3, #0
 800330c:	f04f 0c0a 	mov.w	ip, #10
 8003310:	4619      	mov	r1, r3
 8003312:	3401      	adds	r4, #1
 8003314:	9305      	str	r3, [sp, #20]
 8003316:	4620      	mov	r0, r4
 8003318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800331c:	3a30      	subs	r2, #48	@ 0x30
 800331e:	2a09      	cmp	r2, #9
 8003320:	d903      	bls.n	800332a <_svfiprintf_r+0x1a6>
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0c6      	beq.n	80032b4 <_svfiprintf_r+0x130>
 8003326:	9105      	str	r1, [sp, #20]
 8003328:	e7c4      	b.n	80032b4 <_svfiprintf_r+0x130>
 800332a:	4604      	mov	r4, r0
 800332c:	2301      	movs	r3, #1
 800332e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003332:	e7f0      	b.n	8003316 <_svfiprintf_r+0x192>
 8003334:	ab03      	add	r3, sp, #12
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	462a      	mov	r2, r5
 800333a:	4638      	mov	r0, r7
 800333c:	4b0e      	ldr	r3, [pc, #56]	@ (8003378 <_svfiprintf_r+0x1f4>)
 800333e:	a904      	add	r1, sp, #16
 8003340:	f3af 8000 	nop.w
 8003344:	1c42      	adds	r2, r0, #1
 8003346:	4606      	mov	r6, r0
 8003348:	d1d6      	bne.n	80032f8 <_svfiprintf_r+0x174>
 800334a:	89ab      	ldrh	r3, [r5, #12]
 800334c:	065b      	lsls	r3, r3, #25
 800334e:	f53f af2d 	bmi.w	80031ac <_svfiprintf_r+0x28>
 8003352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003354:	e72c      	b.n	80031b0 <_svfiprintf_r+0x2c>
 8003356:	ab03      	add	r3, sp, #12
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	462a      	mov	r2, r5
 800335c:	4638      	mov	r0, r7
 800335e:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <_svfiprintf_r+0x1f4>)
 8003360:	a904      	add	r1, sp, #16
 8003362:	f000 f87d 	bl	8003460 <_printf_i>
 8003366:	e7ed      	b.n	8003344 <_svfiprintf_r+0x1c0>
 8003368:	08003a4e 	.word	0x08003a4e
 800336c:	08003a54 	.word	0x08003a54
 8003370:	08003a58 	.word	0x08003a58
 8003374:	00000000 	.word	0x00000000
 8003378:	080030cd 	.word	0x080030cd

0800337c <_printf_common>:
 800337c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003380:	4616      	mov	r6, r2
 8003382:	4698      	mov	r8, r3
 8003384:	688a      	ldr	r2, [r1, #8]
 8003386:	690b      	ldr	r3, [r1, #16]
 8003388:	4607      	mov	r7, r0
 800338a:	4293      	cmp	r3, r2
 800338c:	bfb8      	it	lt
 800338e:	4613      	movlt	r3, r2
 8003390:	6033      	str	r3, [r6, #0]
 8003392:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003396:	460c      	mov	r4, r1
 8003398:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800339c:	b10a      	cbz	r2, 80033a2 <_printf_common+0x26>
 800339e:	3301      	adds	r3, #1
 80033a0:	6033      	str	r3, [r6, #0]
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	0699      	lsls	r1, r3, #26
 80033a6:	bf42      	ittt	mi
 80033a8:	6833      	ldrmi	r3, [r6, #0]
 80033aa:	3302      	addmi	r3, #2
 80033ac:	6033      	strmi	r3, [r6, #0]
 80033ae:	6825      	ldr	r5, [r4, #0]
 80033b0:	f015 0506 	ands.w	r5, r5, #6
 80033b4:	d106      	bne.n	80033c4 <_printf_common+0x48>
 80033b6:	f104 0a19 	add.w	sl, r4, #25
 80033ba:	68e3      	ldr	r3, [r4, #12]
 80033bc:	6832      	ldr	r2, [r6, #0]
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	42ab      	cmp	r3, r5
 80033c2:	dc2b      	bgt.n	800341c <_printf_common+0xa0>
 80033c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033c8:	6822      	ldr	r2, [r4, #0]
 80033ca:	3b00      	subs	r3, #0
 80033cc:	bf18      	it	ne
 80033ce:	2301      	movne	r3, #1
 80033d0:	0692      	lsls	r2, r2, #26
 80033d2:	d430      	bmi.n	8003436 <_printf_common+0xba>
 80033d4:	4641      	mov	r1, r8
 80033d6:	4638      	mov	r0, r7
 80033d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033dc:	47c8      	blx	r9
 80033de:	3001      	adds	r0, #1
 80033e0:	d023      	beq.n	800342a <_printf_common+0xae>
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	6922      	ldr	r2, [r4, #16]
 80033e6:	f003 0306 	and.w	r3, r3, #6
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	bf14      	ite	ne
 80033ee:	2500      	movne	r5, #0
 80033f0:	6833      	ldreq	r3, [r6, #0]
 80033f2:	f04f 0600 	mov.w	r6, #0
 80033f6:	bf08      	it	eq
 80033f8:	68e5      	ldreq	r5, [r4, #12]
 80033fa:	f104 041a 	add.w	r4, r4, #26
 80033fe:	bf08      	it	eq
 8003400:	1aed      	subeq	r5, r5, r3
 8003402:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003406:	bf08      	it	eq
 8003408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800340c:	4293      	cmp	r3, r2
 800340e:	bfc4      	itt	gt
 8003410:	1a9b      	subgt	r3, r3, r2
 8003412:	18ed      	addgt	r5, r5, r3
 8003414:	42b5      	cmp	r5, r6
 8003416:	d11a      	bne.n	800344e <_printf_common+0xd2>
 8003418:	2000      	movs	r0, #0
 800341a:	e008      	b.n	800342e <_printf_common+0xb2>
 800341c:	2301      	movs	r3, #1
 800341e:	4652      	mov	r2, sl
 8003420:	4641      	mov	r1, r8
 8003422:	4638      	mov	r0, r7
 8003424:	47c8      	blx	r9
 8003426:	3001      	adds	r0, #1
 8003428:	d103      	bne.n	8003432 <_printf_common+0xb6>
 800342a:	f04f 30ff 	mov.w	r0, #4294967295
 800342e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003432:	3501      	adds	r5, #1
 8003434:	e7c1      	b.n	80033ba <_printf_common+0x3e>
 8003436:	2030      	movs	r0, #48	@ 0x30
 8003438:	18e1      	adds	r1, r4, r3
 800343a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003444:	4422      	add	r2, r4
 8003446:	3302      	adds	r3, #2
 8003448:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800344c:	e7c2      	b.n	80033d4 <_printf_common+0x58>
 800344e:	2301      	movs	r3, #1
 8003450:	4622      	mov	r2, r4
 8003452:	4641      	mov	r1, r8
 8003454:	4638      	mov	r0, r7
 8003456:	47c8      	blx	r9
 8003458:	3001      	adds	r0, #1
 800345a:	d0e6      	beq.n	800342a <_printf_common+0xae>
 800345c:	3601      	adds	r6, #1
 800345e:	e7d9      	b.n	8003414 <_printf_common+0x98>

08003460 <_printf_i>:
 8003460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003464:	7e0f      	ldrb	r7, [r1, #24]
 8003466:	4691      	mov	r9, r2
 8003468:	2f78      	cmp	r7, #120	@ 0x78
 800346a:	4680      	mov	r8, r0
 800346c:	460c      	mov	r4, r1
 800346e:	469a      	mov	sl, r3
 8003470:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003472:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003476:	d807      	bhi.n	8003488 <_printf_i+0x28>
 8003478:	2f62      	cmp	r7, #98	@ 0x62
 800347a:	d80a      	bhi.n	8003492 <_printf_i+0x32>
 800347c:	2f00      	cmp	r7, #0
 800347e:	f000 80d3 	beq.w	8003628 <_printf_i+0x1c8>
 8003482:	2f58      	cmp	r7, #88	@ 0x58
 8003484:	f000 80ba 	beq.w	80035fc <_printf_i+0x19c>
 8003488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800348c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003490:	e03a      	b.n	8003508 <_printf_i+0xa8>
 8003492:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003496:	2b15      	cmp	r3, #21
 8003498:	d8f6      	bhi.n	8003488 <_printf_i+0x28>
 800349a:	a101      	add	r1, pc, #4	@ (adr r1, 80034a0 <_printf_i+0x40>)
 800349c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034a0:	080034f9 	.word	0x080034f9
 80034a4:	0800350d 	.word	0x0800350d
 80034a8:	08003489 	.word	0x08003489
 80034ac:	08003489 	.word	0x08003489
 80034b0:	08003489 	.word	0x08003489
 80034b4:	08003489 	.word	0x08003489
 80034b8:	0800350d 	.word	0x0800350d
 80034bc:	08003489 	.word	0x08003489
 80034c0:	08003489 	.word	0x08003489
 80034c4:	08003489 	.word	0x08003489
 80034c8:	08003489 	.word	0x08003489
 80034cc:	0800360f 	.word	0x0800360f
 80034d0:	08003537 	.word	0x08003537
 80034d4:	080035c9 	.word	0x080035c9
 80034d8:	08003489 	.word	0x08003489
 80034dc:	08003489 	.word	0x08003489
 80034e0:	08003631 	.word	0x08003631
 80034e4:	08003489 	.word	0x08003489
 80034e8:	08003537 	.word	0x08003537
 80034ec:	08003489 	.word	0x08003489
 80034f0:	08003489 	.word	0x08003489
 80034f4:	080035d1 	.word	0x080035d1
 80034f8:	6833      	ldr	r3, [r6, #0]
 80034fa:	1d1a      	adds	r2, r3, #4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6032      	str	r2, [r6, #0]
 8003500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003504:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003508:	2301      	movs	r3, #1
 800350a:	e09e      	b.n	800364a <_printf_i+0x1ea>
 800350c:	6833      	ldr	r3, [r6, #0]
 800350e:	6820      	ldr	r0, [r4, #0]
 8003510:	1d19      	adds	r1, r3, #4
 8003512:	6031      	str	r1, [r6, #0]
 8003514:	0606      	lsls	r6, r0, #24
 8003516:	d501      	bpl.n	800351c <_printf_i+0xbc>
 8003518:	681d      	ldr	r5, [r3, #0]
 800351a:	e003      	b.n	8003524 <_printf_i+0xc4>
 800351c:	0645      	lsls	r5, r0, #25
 800351e:	d5fb      	bpl.n	8003518 <_printf_i+0xb8>
 8003520:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003524:	2d00      	cmp	r5, #0
 8003526:	da03      	bge.n	8003530 <_printf_i+0xd0>
 8003528:	232d      	movs	r3, #45	@ 0x2d
 800352a:	426d      	negs	r5, r5
 800352c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003530:	230a      	movs	r3, #10
 8003532:	4859      	ldr	r0, [pc, #356]	@ (8003698 <_printf_i+0x238>)
 8003534:	e011      	b.n	800355a <_printf_i+0xfa>
 8003536:	6821      	ldr	r1, [r4, #0]
 8003538:	6833      	ldr	r3, [r6, #0]
 800353a:	0608      	lsls	r0, r1, #24
 800353c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003540:	d402      	bmi.n	8003548 <_printf_i+0xe8>
 8003542:	0649      	lsls	r1, r1, #25
 8003544:	bf48      	it	mi
 8003546:	b2ad      	uxthmi	r5, r5
 8003548:	2f6f      	cmp	r7, #111	@ 0x6f
 800354a:	6033      	str	r3, [r6, #0]
 800354c:	bf14      	ite	ne
 800354e:	230a      	movne	r3, #10
 8003550:	2308      	moveq	r3, #8
 8003552:	4851      	ldr	r0, [pc, #324]	@ (8003698 <_printf_i+0x238>)
 8003554:	2100      	movs	r1, #0
 8003556:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800355a:	6866      	ldr	r6, [r4, #4]
 800355c:	2e00      	cmp	r6, #0
 800355e:	bfa8      	it	ge
 8003560:	6821      	ldrge	r1, [r4, #0]
 8003562:	60a6      	str	r6, [r4, #8]
 8003564:	bfa4      	itt	ge
 8003566:	f021 0104 	bicge.w	r1, r1, #4
 800356a:	6021      	strge	r1, [r4, #0]
 800356c:	b90d      	cbnz	r5, 8003572 <_printf_i+0x112>
 800356e:	2e00      	cmp	r6, #0
 8003570:	d04b      	beq.n	800360a <_printf_i+0x1aa>
 8003572:	4616      	mov	r6, r2
 8003574:	fbb5 f1f3 	udiv	r1, r5, r3
 8003578:	fb03 5711 	mls	r7, r3, r1, r5
 800357c:	5dc7      	ldrb	r7, [r0, r7]
 800357e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003582:	462f      	mov	r7, r5
 8003584:	42bb      	cmp	r3, r7
 8003586:	460d      	mov	r5, r1
 8003588:	d9f4      	bls.n	8003574 <_printf_i+0x114>
 800358a:	2b08      	cmp	r3, #8
 800358c:	d10b      	bne.n	80035a6 <_printf_i+0x146>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	07df      	lsls	r7, r3, #31
 8003592:	d508      	bpl.n	80035a6 <_printf_i+0x146>
 8003594:	6923      	ldr	r3, [r4, #16]
 8003596:	6861      	ldr	r1, [r4, #4]
 8003598:	4299      	cmp	r1, r3
 800359a:	bfde      	ittt	le
 800359c:	2330      	movle	r3, #48	@ 0x30
 800359e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035a6:	1b92      	subs	r2, r2, r6
 80035a8:	6122      	str	r2, [r4, #16]
 80035aa:	464b      	mov	r3, r9
 80035ac:	4621      	mov	r1, r4
 80035ae:	4640      	mov	r0, r8
 80035b0:	f8cd a000 	str.w	sl, [sp]
 80035b4:	aa03      	add	r2, sp, #12
 80035b6:	f7ff fee1 	bl	800337c <_printf_common>
 80035ba:	3001      	adds	r0, #1
 80035bc:	d14a      	bne.n	8003654 <_printf_i+0x1f4>
 80035be:	f04f 30ff 	mov.w	r0, #4294967295
 80035c2:	b004      	add	sp, #16
 80035c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	f043 0320 	orr.w	r3, r3, #32
 80035ce:	6023      	str	r3, [r4, #0]
 80035d0:	2778      	movs	r7, #120	@ 0x78
 80035d2:	4832      	ldr	r0, [pc, #200]	@ (800369c <_printf_i+0x23c>)
 80035d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	6831      	ldr	r1, [r6, #0]
 80035dc:	061f      	lsls	r7, r3, #24
 80035de:	f851 5b04 	ldr.w	r5, [r1], #4
 80035e2:	d402      	bmi.n	80035ea <_printf_i+0x18a>
 80035e4:	065f      	lsls	r7, r3, #25
 80035e6:	bf48      	it	mi
 80035e8:	b2ad      	uxthmi	r5, r5
 80035ea:	6031      	str	r1, [r6, #0]
 80035ec:	07d9      	lsls	r1, r3, #31
 80035ee:	bf44      	itt	mi
 80035f0:	f043 0320 	orrmi.w	r3, r3, #32
 80035f4:	6023      	strmi	r3, [r4, #0]
 80035f6:	b11d      	cbz	r5, 8003600 <_printf_i+0x1a0>
 80035f8:	2310      	movs	r3, #16
 80035fa:	e7ab      	b.n	8003554 <_printf_i+0xf4>
 80035fc:	4826      	ldr	r0, [pc, #152]	@ (8003698 <_printf_i+0x238>)
 80035fe:	e7e9      	b.n	80035d4 <_printf_i+0x174>
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	f023 0320 	bic.w	r3, r3, #32
 8003606:	6023      	str	r3, [r4, #0]
 8003608:	e7f6      	b.n	80035f8 <_printf_i+0x198>
 800360a:	4616      	mov	r6, r2
 800360c:	e7bd      	b.n	800358a <_printf_i+0x12a>
 800360e:	6833      	ldr	r3, [r6, #0]
 8003610:	6825      	ldr	r5, [r4, #0]
 8003612:	1d18      	adds	r0, r3, #4
 8003614:	6961      	ldr	r1, [r4, #20]
 8003616:	6030      	str	r0, [r6, #0]
 8003618:	062e      	lsls	r6, r5, #24
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	d501      	bpl.n	8003622 <_printf_i+0x1c2>
 800361e:	6019      	str	r1, [r3, #0]
 8003620:	e002      	b.n	8003628 <_printf_i+0x1c8>
 8003622:	0668      	lsls	r0, r5, #25
 8003624:	d5fb      	bpl.n	800361e <_printf_i+0x1be>
 8003626:	8019      	strh	r1, [r3, #0]
 8003628:	2300      	movs	r3, #0
 800362a:	4616      	mov	r6, r2
 800362c:	6123      	str	r3, [r4, #16]
 800362e:	e7bc      	b.n	80035aa <_printf_i+0x14a>
 8003630:	6833      	ldr	r3, [r6, #0]
 8003632:	2100      	movs	r1, #0
 8003634:	1d1a      	adds	r2, r3, #4
 8003636:	6032      	str	r2, [r6, #0]
 8003638:	681e      	ldr	r6, [r3, #0]
 800363a:	6862      	ldr	r2, [r4, #4]
 800363c:	4630      	mov	r0, r6
 800363e:	f000 f985 	bl	800394c <memchr>
 8003642:	b108      	cbz	r0, 8003648 <_printf_i+0x1e8>
 8003644:	1b80      	subs	r0, r0, r6
 8003646:	6060      	str	r0, [r4, #4]
 8003648:	6863      	ldr	r3, [r4, #4]
 800364a:	6123      	str	r3, [r4, #16]
 800364c:	2300      	movs	r3, #0
 800364e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003652:	e7aa      	b.n	80035aa <_printf_i+0x14a>
 8003654:	4632      	mov	r2, r6
 8003656:	4649      	mov	r1, r9
 8003658:	4640      	mov	r0, r8
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	47d0      	blx	sl
 800365e:	3001      	adds	r0, #1
 8003660:	d0ad      	beq.n	80035be <_printf_i+0x15e>
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	079b      	lsls	r3, r3, #30
 8003666:	d413      	bmi.n	8003690 <_printf_i+0x230>
 8003668:	68e0      	ldr	r0, [r4, #12]
 800366a:	9b03      	ldr	r3, [sp, #12]
 800366c:	4298      	cmp	r0, r3
 800366e:	bfb8      	it	lt
 8003670:	4618      	movlt	r0, r3
 8003672:	e7a6      	b.n	80035c2 <_printf_i+0x162>
 8003674:	2301      	movs	r3, #1
 8003676:	4632      	mov	r2, r6
 8003678:	4649      	mov	r1, r9
 800367a:	4640      	mov	r0, r8
 800367c:	47d0      	blx	sl
 800367e:	3001      	adds	r0, #1
 8003680:	d09d      	beq.n	80035be <_printf_i+0x15e>
 8003682:	3501      	adds	r5, #1
 8003684:	68e3      	ldr	r3, [r4, #12]
 8003686:	9903      	ldr	r1, [sp, #12]
 8003688:	1a5b      	subs	r3, r3, r1
 800368a:	42ab      	cmp	r3, r5
 800368c:	dcf2      	bgt.n	8003674 <_printf_i+0x214>
 800368e:	e7eb      	b.n	8003668 <_printf_i+0x208>
 8003690:	2500      	movs	r5, #0
 8003692:	f104 0619 	add.w	r6, r4, #25
 8003696:	e7f5      	b.n	8003684 <_printf_i+0x224>
 8003698:	08003a5f 	.word	0x08003a5f
 800369c:	08003a70 	.word	0x08003a70

080036a0 <__sflush_r>:
 80036a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	0716      	lsls	r6, r2, #28
 80036a8:	4605      	mov	r5, r0
 80036aa:	460c      	mov	r4, r1
 80036ac:	d454      	bmi.n	8003758 <__sflush_r+0xb8>
 80036ae:	684b      	ldr	r3, [r1, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	dc02      	bgt.n	80036ba <__sflush_r+0x1a>
 80036b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	dd48      	ble.n	800374c <__sflush_r+0xac>
 80036ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036bc:	2e00      	cmp	r6, #0
 80036be:	d045      	beq.n	800374c <__sflush_r+0xac>
 80036c0:	2300      	movs	r3, #0
 80036c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80036c6:	682f      	ldr	r7, [r5, #0]
 80036c8:	6a21      	ldr	r1, [r4, #32]
 80036ca:	602b      	str	r3, [r5, #0]
 80036cc:	d030      	beq.n	8003730 <__sflush_r+0x90>
 80036ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80036d0:	89a3      	ldrh	r3, [r4, #12]
 80036d2:	0759      	lsls	r1, r3, #29
 80036d4:	d505      	bpl.n	80036e2 <__sflush_r+0x42>
 80036d6:	6863      	ldr	r3, [r4, #4]
 80036d8:	1ad2      	subs	r2, r2, r3
 80036da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80036dc:	b10b      	cbz	r3, 80036e2 <__sflush_r+0x42>
 80036de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036e0:	1ad2      	subs	r2, r2, r3
 80036e2:	2300      	movs	r3, #0
 80036e4:	4628      	mov	r0, r5
 80036e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036e8:	6a21      	ldr	r1, [r4, #32]
 80036ea:	47b0      	blx	r6
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	d106      	bne.n	8003700 <__sflush_r+0x60>
 80036f2:	6829      	ldr	r1, [r5, #0]
 80036f4:	291d      	cmp	r1, #29
 80036f6:	d82b      	bhi.n	8003750 <__sflush_r+0xb0>
 80036f8:	4a28      	ldr	r2, [pc, #160]	@ (800379c <__sflush_r+0xfc>)
 80036fa:	410a      	asrs	r2, r1
 80036fc:	07d6      	lsls	r6, r2, #31
 80036fe:	d427      	bmi.n	8003750 <__sflush_r+0xb0>
 8003700:	2200      	movs	r2, #0
 8003702:	6062      	str	r2, [r4, #4]
 8003704:	6922      	ldr	r2, [r4, #16]
 8003706:	04d9      	lsls	r1, r3, #19
 8003708:	6022      	str	r2, [r4, #0]
 800370a:	d504      	bpl.n	8003716 <__sflush_r+0x76>
 800370c:	1c42      	adds	r2, r0, #1
 800370e:	d101      	bne.n	8003714 <__sflush_r+0x74>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	b903      	cbnz	r3, 8003716 <__sflush_r+0x76>
 8003714:	6560      	str	r0, [r4, #84]	@ 0x54
 8003716:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003718:	602f      	str	r7, [r5, #0]
 800371a:	b1b9      	cbz	r1, 800374c <__sflush_r+0xac>
 800371c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003720:	4299      	cmp	r1, r3
 8003722:	d002      	beq.n	800372a <__sflush_r+0x8a>
 8003724:	4628      	mov	r0, r5
 8003726:	f7ff fbdb 	bl	8002ee0 <_free_r>
 800372a:	2300      	movs	r3, #0
 800372c:	6363      	str	r3, [r4, #52]	@ 0x34
 800372e:	e00d      	b.n	800374c <__sflush_r+0xac>
 8003730:	2301      	movs	r3, #1
 8003732:	4628      	mov	r0, r5
 8003734:	47b0      	blx	r6
 8003736:	4602      	mov	r2, r0
 8003738:	1c50      	adds	r0, r2, #1
 800373a:	d1c9      	bne.n	80036d0 <__sflush_r+0x30>
 800373c:	682b      	ldr	r3, [r5, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0c6      	beq.n	80036d0 <__sflush_r+0x30>
 8003742:	2b1d      	cmp	r3, #29
 8003744:	d001      	beq.n	800374a <__sflush_r+0xaa>
 8003746:	2b16      	cmp	r3, #22
 8003748:	d11d      	bne.n	8003786 <__sflush_r+0xe6>
 800374a:	602f      	str	r7, [r5, #0]
 800374c:	2000      	movs	r0, #0
 800374e:	e021      	b.n	8003794 <__sflush_r+0xf4>
 8003750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003754:	b21b      	sxth	r3, r3
 8003756:	e01a      	b.n	800378e <__sflush_r+0xee>
 8003758:	690f      	ldr	r7, [r1, #16]
 800375a:	2f00      	cmp	r7, #0
 800375c:	d0f6      	beq.n	800374c <__sflush_r+0xac>
 800375e:	0793      	lsls	r3, r2, #30
 8003760:	bf18      	it	ne
 8003762:	2300      	movne	r3, #0
 8003764:	680e      	ldr	r6, [r1, #0]
 8003766:	bf08      	it	eq
 8003768:	694b      	ldreq	r3, [r1, #20]
 800376a:	1bf6      	subs	r6, r6, r7
 800376c:	600f      	str	r7, [r1, #0]
 800376e:	608b      	str	r3, [r1, #8]
 8003770:	2e00      	cmp	r6, #0
 8003772:	ddeb      	ble.n	800374c <__sflush_r+0xac>
 8003774:	4633      	mov	r3, r6
 8003776:	463a      	mov	r2, r7
 8003778:	4628      	mov	r0, r5
 800377a:	6a21      	ldr	r1, [r4, #32]
 800377c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003780:	47e0      	blx	ip
 8003782:	2800      	cmp	r0, #0
 8003784:	dc07      	bgt.n	8003796 <__sflush_r+0xf6>
 8003786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800378a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800378e:	f04f 30ff 	mov.w	r0, #4294967295
 8003792:	81a3      	strh	r3, [r4, #12]
 8003794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003796:	4407      	add	r7, r0
 8003798:	1a36      	subs	r6, r6, r0
 800379a:	e7e9      	b.n	8003770 <__sflush_r+0xd0>
 800379c:	dfbffffe 	.word	0xdfbffffe

080037a0 <_fflush_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	690b      	ldr	r3, [r1, #16]
 80037a4:	4605      	mov	r5, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	b913      	cbnz	r3, 80037b0 <_fflush_r+0x10>
 80037aa:	2500      	movs	r5, #0
 80037ac:	4628      	mov	r0, r5
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
 80037b0:	b118      	cbz	r0, 80037ba <_fflush_r+0x1a>
 80037b2:	6a03      	ldr	r3, [r0, #32]
 80037b4:	b90b      	cbnz	r3, 80037ba <_fflush_r+0x1a>
 80037b6:	f7ff f977 	bl	8002aa8 <__sinit>
 80037ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f3      	beq.n	80037aa <_fflush_r+0xa>
 80037c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80037c4:	07d0      	lsls	r0, r2, #31
 80037c6:	d404      	bmi.n	80037d2 <_fflush_r+0x32>
 80037c8:	0599      	lsls	r1, r3, #22
 80037ca:	d402      	bmi.n	80037d2 <_fflush_r+0x32>
 80037cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037ce:	f7ff fb84 	bl	8002eda <__retarget_lock_acquire_recursive>
 80037d2:	4628      	mov	r0, r5
 80037d4:	4621      	mov	r1, r4
 80037d6:	f7ff ff63 	bl	80036a0 <__sflush_r>
 80037da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037dc:	4605      	mov	r5, r0
 80037de:	07da      	lsls	r2, r3, #31
 80037e0:	d4e4      	bmi.n	80037ac <_fflush_r+0xc>
 80037e2:	89a3      	ldrh	r3, [r4, #12]
 80037e4:	059b      	lsls	r3, r3, #22
 80037e6:	d4e1      	bmi.n	80037ac <_fflush_r+0xc>
 80037e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037ea:	f7ff fb77 	bl	8002edc <__retarget_lock_release_recursive>
 80037ee:	e7dd      	b.n	80037ac <_fflush_r+0xc>

080037f0 <__swhatbuf_r>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	460c      	mov	r4, r1
 80037f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f8:	4615      	mov	r5, r2
 80037fa:	2900      	cmp	r1, #0
 80037fc:	461e      	mov	r6, r3
 80037fe:	b096      	sub	sp, #88	@ 0x58
 8003800:	da0c      	bge.n	800381c <__swhatbuf_r+0x2c>
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	2100      	movs	r1, #0
 8003806:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800380a:	bf14      	ite	ne
 800380c:	2340      	movne	r3, #64	@ 0x40
 800380e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003812:	2000      	movs	r0, #0
 8003814:	6031      	str	r1, [r6, #0]
 8003816:	602b      	str	r3, [r5, #0]
 8003818:	b016      	add	sp, #88	@ 0x58
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	466a      	mov	r2, sp
 800381e:	f000 f863 	bl	80038e8 <_fstat_r>
 8003822:	2800      	cmp	r0, #0
 8003824:	dbed      	blt.n	8003802 <__swhatbuf_r+0x12>
 8003826:	9901      	ldr	r1, [sp, #4]
 8003828:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800382c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003830:	4259      	negs	r1, r3
 8003832:	4159      	adcs	r1, r3
 8003834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003838:	e7eb      	b.n	8003812 <__swhatbuf_r+0x22>

0800383a <__smakebuf_r>:
 800383a:	898b      	ldrh	r3, [r1, #12]
 800383c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800383e:	079d      	lsls	r5, r3, #30
 8003840:	4606      	mov	r6, r0
 8003842:	460c      	mov	r4, r1
 8003844:	d507      	bpl.n	8003856 <__smakebuf_r+0x1c>
 8003846:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800384a:	6023      	str	r3, [r4, #0]
 800384c:	6123      	str	r3, [r4, #16]
 800384e:	2301      	movs	r3, #1
 8003850:	6163      	str	r3, [r4, #20]
 8003852:	b003      	add	sp, #12
 8003854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003856:	466a      	mov	r2, sp
 8003858:	ab01      	add	r3, sp, #4
 800385a:	f7ff ffc9 	bl	80037f0 <__swhatbuf_r>
 800385e:	9f00      	ldr	r7, [sp, #0]
 8003860:	4605      	mov	r5, r0
 8003862:	4639      	mov	r1, r7
 8003864:	4630      	mov	r0, r6
 8003866:	f7ff fba5 	bl	8002fb4 <_malloc_r>
 800386a:	b948      	cbnz	r0, 8003880 <__smakebuf_r+0x46>
 800386c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003870:	059a      	lsls	r2, r3, #22
 8003872:	d4ee      	bmi.n	8003852 <__smakebuf_r+0x18>
 8003874:	f023 0303 	bic.w	r3, r3, #3
 8003878:	f043 0302 	orr.w	r3, r3, #2
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	e7e2      	b.n	8003846 <__smakebuf_r+0xc>
 8003880:	89a3      	ldrh	r3, [r4, #12]
 8003882:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800388a:	81a3      	strh	r3, [r4, #12]
 800388c:	9b01      	ldr	r3, [sp, #4]
 800388e:	6020      	str	r0, [r4, #0]
 8003890:	b15b      	cbz	r3, 80038aa <__smakebuf_r+0x70>
 8003892:	4630      	mov	r0, r6
 8003894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003898:	f000 f838 	bl	800390c <_isatty_r>
 800389c:	b128      	cbz	r0, 80038aa <__smakebuf_r+0x70>
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	f023 0303 	bic.w	r3, r3, #3
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	81a3      	strh	r3, [r4, #12]
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	431d      	orrs	r5, r3
 80038ae:	81a5      	strh	r5, [r4, #12]
 80038b0:	e7cf      	b.n	8003852 <__smakebuf_r+0x18>

080038b2 <memmove>:
 80038b2:	4288      	cmp	r0, r1
 80038b4:	b510      	push	{r4, lr}
 80038b6:	eb01 0402 	add.w	r4, r1, r2
 80038ba:	d902      	bls.n	80038c2 <memmove+0x10>
 80038bc:	4284      	cmp	r4, r0
 80038be:	4623      	mov	r3, r4
 80038c0:	d807      	bhi.n	80038d2 <memmove+0x20>
 80038c2:	1e43      	subs	r3, r0, #1
 80038c4:	42a1      	cmp	r1, r4
 80038c6:	d008      	beq.n	80038da <memmove+0x28>
 80038c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038d0:	e7f8      	b.n	80038c4 <memmove+0x12>
 80038d2:	4601      	mov	r1, r0
 80038d4:	4402      	add	r2, r0
 80038d6:	428a      	cmp	r2, r1
 80038d8:	d100      	bne.n	80038dc <memmove+0x2a>
 80038da:	bd10      	pop	{r4, pc}
 80038dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038e4:	e7f7      	b.n	80038d6 <memmove+0x24>
	...

080038e8 <_fstat_r>:
 80038e8:	b538      	push	{r3, r4, r5, lr}
 80038ea:	2300      	movs	r3, #0
 80038ec:	4d06      	ldr	r5, [pc, #24]	@ (8003908 <_fstat_r+0x20>)
 80038ee:	4604      	mov	r4, r0
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	602b      	str	r3, [r5, #0]
 80038f6:	f7fd fc1f 	bl	8001138 <_fstat>
 80038fa:	1c43      	adds	r3, r0, #1
 80038fc:	d102      	bne.n	8003904 <_fstat_r+0x1c>
 80038fe:	682b      	ldr	r3, [r5, #0]
 8003900:	b103      	cbz	r3, 8003904 <_fstat_r+0x1c>
 8003902:	6023      	str	r3, [r4, #0]
 8003904:	bd38      	pop	{r3, r4, r5, pc}
 8003906:	bf00      	nop
 8003908:	2000027c 	.word	0x2000027c

0800390c <_isatty_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	2300      	movs	r3, #0
 8003910:	4d05      	ldr	r5, [pc, #20]	@ (8003928 <_isatty_r+0x1c>)
 8003912:	4604      	mov	r4, r0
 8003914:	4608      	mov	r0, r1
 8003916:	602b      	str	r3, [r5, #0]
 8003918:	f7fd fc1d 	bl	8001156 <_isatty>
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	d102      	bne.n	8003926 <_isatty_r+0x1a>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	b103      	cbz	r3, 8003926 <_isatty_r+0x1a>
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	bd38      	pop	{r3, r4, r5, pc}
 8003928:	2000027c 	.word	0x2000027c

0800392c <_sbrk_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	2300      	movs	r3, #0
 8003930:	4d05      	ldr	r5, [pc, #20]	@ (8003948 <_sbrk_r+0x1c>)
 8003932:	4604      	mov	r4, r0
 8003934:	4608      	mov	r0, r1
 8003936:	602b      	str	r3, [r5, #0]
 8003938:	f7fd fc24 	bl	8001184 <_sbrk>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d102      	bne.n	8003946 <_sbrk_r+0x1a>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	b103      	cbz	r3, 8003946 <_sbrk_r+0x1a>
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	2000027c 	.word	0x2000027c

0800394c <memchr>:
 800394c:	4603      	mov	r3, r0
 800394e:	b510      	push	{r4, lr}
 8003950:	b2c9      	uxtb	r1, r1
 8003952:	4402      	add	r2, r0
 8003954:	4293      	cmp	r3, r2
 8003956:	4618      	mov	r0, r3
 8003958:	d101      	bne.n	800395e <memchr+0x12>
 800395a:	2000      	movs	r0, #0
 800395c:	e003      	b.n	8003966 <memchr+0x1a>
 800395e:	7804      	ldrb	r4, [r0, #0]
 8003960:	3301      	adds	r3, #1
 8003962:	428c      	cmp	r4, r1
 8003964:	d1f6      	bne.n	8003954 <memchr+0x8>
 8003966:	bd10      	pop	{r4, pc}

08003968 <memcpy>:
 8003968:	440a      	add	r2, r1
 800396a:	4291      	cmp	r1, r2
 800396c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003970:	d100      	bne.n	8003974 <memcpy+0xc>
 8003972:	4770      	bx	lr
 8003974:	b510      	push	{r4, lr}
 8003976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800397a:	4291      	cmp	r1, r2
 800397c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003980:	d1f9      	bne.n	8003976 <memcpy+0xe>
 8003982:	bd10      	pop	{r4, pc}

08003984 <_realloc_r>:
 8003984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003988:	4680      	mov	r8, r0
 800398a:	4615      	mov	r5, r2
 800398c:	460c      	mov	r4, r1
 800398e:	b921      	cbnz	r1, 800399a <_realloc_r+0x16>
 8003990:	4611      	mov	r1, r2
 8003992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003996:	f7ff bb0d 	b.w	8002fb4 <_malloc_r>
 800399a:	b92a      	cbnz	r2, 80039a8 <_realloc_r+0x24>
 800399c:	f7ff faa0 	bl	8002ee0 <_free_r>
 80039a0:	2400      	movs	r4, #0
 80039a2:	4620      	mov	r0, r4
 80039a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039a8:	f000 f81a 	bl	80039e0 <_malloc_usable_size_r>
 80039ac:	4285      	cmp	r5, r0
 80039ae:	4606      	mov	r6, r0
 80039b0:	d802      	bhi.n	80039b8 <_realloc_r+0x34>
 80039b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80039b6:	d8f4      	bhi.n	80039a2 <_realloc_r+0x1e>
 80039b8:	4629      	mov	r1, r5
 80039ba:	4640      	mov	r0, r8
 80039bc:	f7ff fafa 	bl	8002fb4 <_malloc_r>
 80039c0:	4607      	mov	r7, r0
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d0ec      	beq.n	80039a0 <_realloc_r+0x1c>
 80039c6:	42b5      	cmp	r5, r6
 80039c8:	462a      	mov	r2, r5
 80039ca:	4621      	mov	r1, r4
 80039cc:	bf28      	it	cs
 80039ce:	4632      	movcs	r2, r6
 80039d0:	f7ff ffca 	bl	8003968 <memcpy>
 80039d4:	4621      	mov	r1, r4
 80039d6:	4640      	mov	r0, r8
 80039d8:	f7ff fa82 	bl	8002ee0 <_free_r>
 80039dc:	463c      	mov	r4, r7
 80039de:	e7e0      	b.n	80039a2 <_realloc_r+0x1e>

080039e0 <_malloc_usable_size_r>:
 80039e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e4:	1f18      	subs	r0, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bfbc      	itt	lt
 80039ea:	580b      	ldrlt	r3, [r1, r0]
 80039ec:	18c0      	addlt	r0, r0, r3
 80039ee:	4770      	bx	lr

080039f0 <_init>:
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	bf00      	nop
 80039f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039f6:	bc08      	pop	{r3}
 80039f8:	469e      	mov	lr, r3
 80039fa:	4770      	bx	lr

080039fc <_fini>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	bf00      	nop
 8003a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a02:	bc08      	pop	{r3}
 8003a04:	469e      	mov	lr, r3
 8003a06:	4770      	bx	lr
