
019_adc_mcp_gpio_MAIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006928  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08006a38  08006a38  00007a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f30  08006f30  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006f30  08006f30  00007f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f38  08006f38  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f38  08006f38  00007f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f3c  08006f3c  00007f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006f40  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200001d4  08007114  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08007114  000083d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086f0  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad4  00000000  00000000  000108ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  000123c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e7  00000000  00000000  00012ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018950  00000000  00000000  000133c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0f1  00000000  00000000  0002bd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089aef  00000000  00000000  00037e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c18f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003628  00000000  00000000  000c193c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c4f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a20 	.word	0x08006a20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006a20 	.word	0x08006a20

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f000 fd13 	bl	8001aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f8e7 	bl	800124c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f000 f9a3 	bl	80013c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001082:	f000 f935 	bl	80012f0 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001086:	f000 f971 	bl	800136c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start (&hadc1);
 800108a:	4862      	ldr	r0, [pc, #392]	@ (8001214 <main+0x1a4>)
 800108c:	f000 fe66 	bl	8001d5c <HAL_ADC_Start>



  // Second, initilaize the MCP4725 object:
  	myMCP4725 = MCP4725_init(&hi2c2, MCP4725A0_ADDR_A01, 5.0);
 8001090:	4c61      	ldr	r4, [pc, #388]	@ (8001218 <main+0x1a8>)
 8001092:	4638      	mov	r0, r7
 8001094:	4b61      	ldr	r3, [pc, #388]	@ (800121c <main+0x1ac>)
 8001096:	2261      	movs	r2, #97	@ 0x61
 8001098:	4961      	ldr	r1, [pc, #388]	@ (8001220 <main+0x1b0>)
 800109a:	f000 fbfe 	bl	800189a <MCP4725_init>
 800109e:	463b      	mov	r3, r7
 80010a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}




  	// Check the connection:
  	if(MCP4725_isConnected(&myMCP4725)){
 80010a6:	485c      	ldr	r0, [pc, #368]	@ (8001218 <main+0x1a8>)
 80010a8:	f000 fc16 	bl	80018d8 <MCP4725_isConnected>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <main+0x4a>

  		// Print that the DAC is coonected
  		printf("dac is connected -- \n");
 80010b2:	485c      	ldr	r0, [pc, #368]	@ (8001224 <main+0x1b4>)
 80010b4:	f003 fd3e 	bl	8004b34 <puts>
 80010b8:	e002      	b.n	80010c0 <main+0x50>

  	}
  	else{

  		// Print that the DAC is NOT coonected
  		printf("not connected\n");
 80010ba:	485b      	ldr	r0, [pc, #364]	@ (8001228 <main+0x1b8>)
 80010bc:	f003 fd3a 	bl	8004b34 <puts>

  	}

  	HAL_Delay(5000);
 80010c0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80010c4:	f000 fd4e 	bl	8001b64 <HAL_Delay>
  	printf("delay 5sec after dac is connected \n");
 80010c8:	4858      	ldr	r0, [pc, #352]	@ (800122c <main+0x1bc>)
 80010ca:	f003 fd33 	bl	8004b34 <puts>
  /* USER CODE BEGIN WHILE */
    while (1)
    {
      /* USER CODE END WHILE */

  	  HAL_ADC_PollForConversion (&hadc1, 100);
 80010ce:	2164      	movs	r1, #100	@ 0x64
 80010d0:	4850      	ldr	r0, [pc, #320]	@ (8001214 <main+0x1a4>)
 80010d2:	f000 fef1 	bl	8001eb8 <HAL_ADC_PollForConversion>
  	  value = HAL_ADC_GetValue (&hadc1);
 80010d6:	484f      	ldr	r0, [pc, #316]	@ (8001214 <main+0x1a4>)
 80010d8:	f000 fff4 	bl	80020c4 <HAL_ADC_GetValue>
 80010dc:	4603      	mov	r3, r0
 80010de:	613b      	str	r3, [r7, #16]
  	  // printf("value = %ld\n",value);
  	  float voltage = (value * 5.0f) / 4096.0f;
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fd86 	bl	8000bf4 <__aeabi_ui2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	494c      	ldr	r1, [pc, #304]	@ (800121c <main+0x1ac>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fdd9 	bl	8000ca4 <__aeabi_fmul>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fe87 	bl	8000e0c <__aeabi_fdiv>
 80010fe:	4603      	mov	r3, r0
 8001100:	617b      	str	r3, [r7, #20]

  	  // Print voltage
  		         // printf("ADC Value: %lu, Voltage: %.2f V\n", value, voltage);
  	  //printf(" adc value == %ld  ---  Voltage: %.2f V\n",value, voltage);
  	  printf(" %ld     %.2f V\n",value, voltage);
 8001102:	693c      	ldr	r4, [r7, #16]
 8001104:	6978      	ldr	r0, [r7, #20]
 8001106:	f7ff f98f 	bl	8000428 <__aeabi_f2d>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4621      	mov	r1, r4
 8001110:	4847      	ldr	r0, [pc, #284]	@ (8001230 <main+0x1c0>)
 8001112:	f003 fca7 	bl	8004a64 <iprintf>
  	  //MCP4725_setVoltage(&myMCP4725,voltage, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  	  HAL_Delay(4000);
 8001116:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800111a:	f000 fd23 	bl	8001b64 <HAL_Delay>
  	  ////////////////////////////////////


  	  if(voltage <= 1.0){
 800111e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff66 	bl	8000ff4 <__aeabi_fcmple>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00a      	beq.n	8001144 <main+0xd4>
  		  MCP4725_setVoltage(&myMCP4725,1.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 800112e:	2300      	movs	r3, #0
 8001130:	2200      	movs	r2, #0
 8001132:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001136:	4838      	ldr	r0, [pc, #224]	@ (8001218 <main+0x1a8>)
 8001138:	f000 fc22 	bl	8001980 <MCP4725_setVoltage>
  		  printf("if voltage <=1 --> mcp_setvoltgae(1)\n");
 800113c:	483d      	ldr	r0, [pc, #244]	@ (8001234 <main+0x1c4>)
 800113e:	f003 fcf9 	bl	8004b34 <puts>
 8001142:	e7c4      	b.n	80010ce <main+0x5e>
  	  }else if(voltage >1.0 && voltage <=2.0){
 8001144:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001148:	6978      	ldr	r0, [r7, #20]
 800114a:	f7ff ff67 	bl	800101c <__aeabi_fcmpgt>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d012      	beq.n	800117a <main+0x10a>
 8001154:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f7ff ff4b 	bl	8000ff4 <__aeabi_fcmple>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00a      	beq.n	800117a <main+0x10a>
  		  MCP4725_setVoltage(&myMCP4725,2.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001164:	2300      	movs	r3, #0
 8001166:	2200      	movs	r2, #0
 8001168:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800116c:	482a      	ldr	r0, [pc, #168]	@ (8001218 <main+0x1a8>)
 800116e:	f000 fc07 	bl	8001980 <MCP4725_setVoltage>
  		 		  printf("if voltage <=2 --> mcp_setvoltgae(2)\n");
 8001172:	4831      	ldr	r0, [pc, #196]	@ (8001238 <main+0x1c8>)
 8001174:	f003 fcde 	bl	8004b34 <puts>
 8001178:	e04a      	b.n	8001210 <main+0x1a0>

  	  }else if(voltage >2.0 && voltage <=3.0){
 800117a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff4c 	bl	800101c <__aeabi_fcmpgt>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d010      	beq.n	80011ac <main+0x13c>
 800118a:	492c      	ldr	r1, [pc, #176]	@ (800123c <main+0x1cc>)
 800118c:	6978      	ldr	r0, [r7, #20]
 800118e:	f7ff ff31 	bl	8000ff4 <__aeabi_fcmple>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d009      	beq.n	80011ac <main+0x13c>
  		  MCP4725_setVoltage(&myMCP4725,3.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001198:	2300      	movs	r3, #0
 800119a:	2200      	movs	r2, #0
 800119c:	4927      	ldr	r1, [pc, #156]	@ (800123c <main+0x1cc>)
 800119e:	481e      	ldr	r0, [pc, #120]	@ (8001218 <main+0x1a8>)
 80011a0:	f000 fbee 	bl	8001980 <MCP4725_setVoltage>
  		 		  printf("if voltage <=3 --> mcp_setvoltgae(3)\n");
 80011a4:	4826      	ldr	r0, [pc, #152]	@ (8001240 <main+0x1d0>)
 80011a6:	f003 fcc5 	bl	8004b34 <puts>
 80011aa:	e031      	b.n	8001210 <main+0x1a0>

  	  }else if(voltage >3.0 && voltage <=4.0){
 80011ac:	4923      	ldr	r1, [pc, #140]	@ (800123c <main+0x1cc>)
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff34 	bl	800101c <__aeabi_fcmpgt>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d012      	beq.n	80011e0 <main+0x170>
 80011ba:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff18 	bl	8000ff4 <__aeabi_fcmple>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00a      	beq.n	80011e0 <main+0x170>
  		  MCP4725_setVoltage(&myMCP4725,4.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80011ca:	2300      	movs	r3, #0
 80011cc:	2200      	movs	r2, #0
 80011ce:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80011d2:	4811      	ldr	r0, [pc, #68]	@ (8001218 <main+0x1a8>)
 80011d4:	f000 fbd4 	bl	8001980 <MCP4725_setVoltage>
  		 		  printf("if voltage <=4 --> mcp_setvoltgae(4)\n");
 80011d8:	481a      	ldr	r0, [pc, #104]	@ (8001244 <main+0x1d4>)
 80011da:	f003 fcab 	bl	8004b34 <puts>
 80011de:	e017      	b.n	8001210 <main+0x1a0>

  	  }else if(voltage >4.0 && voltage <=5.0){
 80011e0:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80011e4:	6978      	ldr	r0, [r7, #20]
 80011e6:	f7ff ff19 	bl	800101c <__aeabi_fcmpgt>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00f      	beq.n	8001210 <main+0x1a0>
 80011f0:	490a      	ldr	r1, [pc, #40]	@ (800121c <main+0x1ac>)
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff fefe 	bl	8000ff4 <__aeabi_fcmple>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d008      	beq.n	8001210 <main+0x1a0>
  		  MCP4725_setVoltage(&myMCP4725,5.0f, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80011fe:	2300      	movs	r3, #0
 8001200:	2200      	movs	r2, #0
 8001202:	4906      	ldr	r1, [pc, #24]	@ (800121c <main+0x1ac>)
 8001204:	4804      	ldr	r0, [pc, #16]	@ (8001218 <main+0x1a8>)
 8001206:	f000 fbbb 	bl	8001980 <MCP4725_setVoltage>
  		 		  printf("if voltage <=5 --> mcp_setvoltgae(5)\n");
 800120a:	480f      	ldr	r0, [pc, #60]	@ (8001248 <main+0x1d8>)
 800120c:	f003 fc92 	bl	8004b34 <puts>
    {
 8001210:	e75d      	b.n	80010ce <main+0x5e>
 8001212:	bf00      	nop
 8001214:	200001f0 	.word	0x200001f0
 8001218:	20000274 	.word	0x20000274
 800121c:	40a00000 	.word	0x40a00000
 8001220:	20000220 	.word	0x20000220
 8001224:	08006a38 	.word	0x08006a38
 8001228:	08006a50 	.word	0x08006a50
 800122c:	08006a60 	.word	0x08006a60
 8001230:	08006a84 	.word	0x08006a84
 8001234:	08006a98 	.word	0x08006a98
 8001238:	08006ac0 	.word	0x08006ac0
 800123c:	40400000 	.word	0x40400000
 8001240:	08006ae8 	.word	0x08006ae8
 8001244:	08006b10 	.word	0x08006b10
 8001248:	08006b38 	.word	0x08006b38

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b094      	sub	sp, #80	@ 0x50
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001256:	2228      	movs	r2, #40	@ 0x28
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fd4a 	bl	8004cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127c:	2302      	movs	r3, #2
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001284:	2310      	movs	r3, #16
 8001286:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001288:	2300      	movs	r3, #0
 800128a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001290:	4618      	mov	r0, r3
 8001292:	f002 f94d 	bl	8003530 <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800129c:	f000 f902 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a0:	230f      	movs	r3, #15
 80012a2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012b0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 fbb9 	bl	8003a34 <HAL_RCC_ClockConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012c8:	f000 f8ec 	bl	80014a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012cc:	2302      	movs	r3, #2
 80012ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 fd3a 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012e2:	f000 f8df 	bl	80014a4 <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3750      	adds	r7, #80	@ 0x50
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001300:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <MX_ADC1_Init+0x74>)
 8001302:	4a19      	ldr	r2, [pc, #100]	@ (8001368 <MX_ADC1_Init+0x78>)
 8001304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001306:	4b17      	ldr	r3, [pc, #92]	@ (8001364 <MX_ADC1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800130c:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <MX_ADC1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001312:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <MX_ADC1_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <MX_ADC1_Init+0x74>)
 800131a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800131e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001320:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <MX_ADC1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <MX_ADC1_Init+0x74>)
 8001328:	2201      	movs	r2, #1
 800132a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800132c:	480d      	ldr	r0, [pc, #52]	@ (8001364 <MX_ADC1_Init+0x74>)
 800132e:	f000 fc3d 	bl	8001bac <HAL_ADC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001338:	f000 f8b4 	bl	80014a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800133c:	2301      	movs	r3, #1
 800133e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001340:	2301      	movs	r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	@ (8001364 <MX_ADC1_Init+0x74>)
 800134e:	f000 fec5 	bl	80020dc <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001358:	f000 f8a4 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200001f0 	.word	0x200001f0
 8001368:	40012400 	.word	0x40012400

0800136c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <MX_I2C2_Init+0x50>)
 8001372:	4a13      	ldr	r2, [pc, #76]	@ (80013c0 <MX_I2C2_Init+0x54>)
 8001374:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_I2C2_Init+0x50>)
 8001378:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <MX_I2C2_Init+0x58>)
 800137a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800137c:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <MX_I2C2_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_I2C2_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <MX_I2C2_Init+0x50>)
 800138a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800138e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <MX_I2C2_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <MX_I2C2_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <MX_I2C2_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <MX_I2C2_Init+0x50>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	@ (80013bc <MX_I2C2_Init+0x50>)
 80013aa:	f001 faf7 	bl	800299c <HAL_I2C_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013b4:	f000 f876 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000220 	.word	0x20000220
 80013c0:	40005800 	.word	0x40005800
 80013c4:	000186a0 	.word	0x000186a0

080013c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001498 <MX_GPIO_Init+0xd0>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001498 <MX_GPIO_Init+0xd0>)
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001498 <MX_GPIO_Init+0xd0>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f4:	4b28      	ldr	r3, [pc, #160]	@ (8001498 <MX_GPIO_Init+0xd0>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a27      	ldr	r2, [pc, #156]	@ (8001498 <MX_GPIO_Init+0xd0>)
 80013fa:	f043 0320 	orr.w	r3, r3, #32
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b25      	ldr	r3, [pc, #148]	@ (8001498 <MX_GPIO_Init+0xd0>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0320 	and.w	r3, r3, #32
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <MX_GPIO_Init+0xd0>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a21      	ldr	r2, [pc, #132]	@ (8001498 <MX_GPIO_Init+0xd0>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <MX_GPIO_Init+0xd0>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <MX_GPIO_Init+0xd0>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a1b      	ldr	r2, [pc, #108]	@ (8001498 <MX_GPIO_Init+0xd0>)
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <MX_GPIO_Init+0xd0>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001442:	4816      	ldr	r0, [pc, #88]	@ (800149c <MX_GPIO_Init+0xd4>)
 8001444:	f001 fa70 	bl	8002928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001448:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800144c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_GPIO_Init+0xd8>)
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	4619      	mov	r1, r3
 800145c:	480f      	ldr	r0, [pc, #60]	@ (800149c <MX_GPIO_Init+0xd4>)
 800145e:	f001 f8df 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 8001462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001468:	2311      	movs	r3, #17
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2302      	movs	r3, #2
 8001472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4619      	mov	r1, r3
 800147a:	4808      	ldr	r0, [pc, #32]	@ (800149c <MX_GPIO_Init+0xd4>)
 800147c:	f001 f8d0 	bl	8002620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2028      	movs	r0, #40	@ 0x28
 8001486:	f001 f894 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800148a:	2028      	movs	r0, #40	@ 0x28
 800148c:	f001 f8ad 	bl	80025ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	40011000 	.word	0x40011000
 80014a0:	10110000 	.word	0x10110000

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <Error_Handler+0x8>

080014b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <HAL_MspInit+0x5c>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	4a14      	ldr	r2, [pc, #80]	@ (800150c <HAL_MspInit+0x5c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6193      	str	r3, [r2, #24]
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_MspInit+0x5c>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <HAL_MspInit+0x5c>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4a0e      	ldr	r2, [pc, #56]	@ (800150c <HAL_MspInit+0x5c>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	61d3      	str	r3, [r2, #28]
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <HAL_MspInit+0x5c>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <HAL_MspInit+0x60>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	4a04      	ldr	r2, [pc, #16]	@ (8001510 <HAL_MspInit+0x60>)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	40021000 	.word	0x40021000
 8001510:	40010000 	.word	0x40010000

08001514 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <HAL_ADC_MspInit+0x6c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d121      	bne.n	8001578 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001534:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <HAL_ADC_MspInit+0x70>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <HAL_ADC_MspInit+0x70>)
 800153a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <HAL_ADC_MspInit+0x70>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <HAL_ADC_MspInit+0x70>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a0c      	ldr	r2, [pc, #48]	@ (8001584 <HAL_ADC_MspInit+0x70>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_ADC_MspInit+0x70>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001564:	2302      	movs	r3, #2
 8001566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001568:	2303      	movs	r3, #3
 800156a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	4619      	mov	r1, r3
 8001572:	4805      	ldr	r0, [pc, #20]	@ (8001588 <HAL_ADC_MspInit+0x74>)
 8001574:	f001 f854 	bl	8002620 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	3720      	adds	r7, #32
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40012400 	.word	0x40012400
 8001584:	40021000 	.word	0x40021000
 8001588:	40010800 	.word	0x40010800

0800158c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a16      	ldr	r2, [pc, #88]	@ (8001600 <HAL_I2C_MspInit+0x74>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d124      	bne.n	80015f6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ac:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <HAL_I2C_MspInit+0x78>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a14      	ldr	r2, [pc, #80]	@ (8001604 <HAL_I2C_MspInit+0x78>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_I2C_MspInit+0x78>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015c4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ca:	2312      	movs	r3, #18
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4619      	mov	r1, r3
 80015d8:	480b      	ldr	r0, [pc, #44]	@ (8001608 <HAL_I2C_MspInit+0x7c>)
 80015da:	f001 f821 	bl	8002620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <HAL_I2C_MspInit+0x78>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <HAL_I2C_MspInit+0x78>)
 80015e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_I2C_MspInit+0x78>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40005800 	.word	0x40005800
 8001604:	40021000 	.word	0x40021000
 8001608:	40010c00 	.word	0x40010c00

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <NMI_Handler+0x4>

08001614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <MemManage_Handler+0x4>

08001624 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <UsageFault_Handler+0x4>

08001634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165c:	f000 fa66 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001668:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800166c:	f001 f974 	bl	8002958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <ITM_SendChar+0x44>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a0d      	ldr	r2, [pc, #52]	@ (80016b8 <ITM_SendChar+0x44>)
 8001684:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001688:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800168a:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <ITM_SendChar+0x48>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a0b      	ldr	r2, [pc, #44]	@ (80016bc <ITM_SendChar+0x48>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001696:	bf00      	nop
 8001698:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f8      	beq.n	8001698 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80016a6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	6013      	str	r3, [r2, #0]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	e000edfc 	.word	0xe000edfc
 80016bc:	e0000e00 	.word	0xe0000e00

080016c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return 1;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <_kill>:

int _kill(int pid, int sig)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016d8:	f003 fb5e 	bl	8004d98 <__errno>
 80016dc:	4603      	mov	r3, r0
 80016de:	2216      	movs	r2, #22
 80016e0:	601a      	str	r2, [r3, #0]
  return -1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_exit>:

void _exit (int status)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016f6:	f04f 31ff 	mov.w	r1, #4294967295
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffe7 	bl	80016ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <_exit+0x12>

08001704 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e00a      	b.n	800172c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001716:	f3af 8000 	nop.w
 800171a:	4601      	mov	r1, r0
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	60ba      	str	r2, [r7, #8]
 8001722:	b2ca      	uxtb	r2, r1
 8001724:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbf0      	blt.n	8001716 <_read+0x12>
  }

  return len;
 8001734:	687b      	ldr	r3, [r7, #4]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e009      	b.n	8001764 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	60ba      	str	r2, [r7, #8]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff8b 	bl	8001674 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	dbf1      	blt.n	8001750 <_write+0x12>
  }
  return len;
 800176c:	687b      	ldr	r3, [r7, #4]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <_close>:

int _close(int file)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800179c:	605a      	str	r2, [r3, #4]
  return 0;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <_isatty>:

int _isatty(int file)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
	...

080017d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e0:	4a14      	ldr	r2, [pc, #80]	@ (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ec:	4b13      	ldr	r3, [pc, #76]	@ (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	@ (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001808:	f003 fac6 	bl	8004d98 <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	220c      	movs	r2, #12
 8001810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	e009      	b.n	800182c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001818:	4b08      	ldr	r3, [pc, #32]	@ (800183c <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181e:	4b07      	ldr	r3, [pc, #28]	@ (800183c <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <_sbrk+0x64>)
 8001828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20005000 	.word	0x20005000
 8001838:	00000400 	.word	0x00000400
 800183c:	20000284 	.word	0x20000284
 8001840:	200003d8 	.word	0x200003d8

08001844 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001850:	f7ff fff8 	bl	8001844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001854:	480b      	ldr	r0, [pc, #44]	@ (8001884 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001856:	490c      	ldr	r1, [pc, #48]	@ (8001888 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001858:	4a0c      	ldr	r2, [pc, #48]	@ (800188c <LoopFillZerobss+0x16>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a09      	ldr	r2, [pc, #36]	@ (8001890 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800186c:	4c09      	ldr	r4, [pc, #36]	@ (8001894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187a:	f003 fa93 	bl	8004da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187e:	f7ff fbf7 	bl	8001070 <main>
  bx lr
 8001882:	4770      	bx	lr
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800188c:	08006f40 	.word	0x08006f40
  ldr r2, =_sbss
 8001890:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001894:	200003d8 	.word	0x200003d8

08001898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC1_2_IRQHandler>

0800189a <MCP4725_init>:

    Constructor
*/
/**************************************************************************/
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 800189a:	b590      	push	{r4, r7, lr}
 800189c:	b089      	sub	sp, #36	@ 0x24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	4613      	mov	r3, r2
 80018a8:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	6839      	ldr	r1, [r7, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f835 	bl	800192c <MCP4725_setReferenceVoltage>
	//printf("set ref voltage to 3.3\n");

	return _MCP4725;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	461c      	mov	r4, r3
 80018c6:	f107 0310 	add.w	r3, r7, #16
 80018ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	3724      	adds	r7, #36	@ 0x24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}

080018d8 <MCP4725_isConnected>:

    Check the connection
*/
/**************************************************************************/
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	//printf("mcp4725_is connectde ??\n");
	int x = HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, HAL_MAX_DELAY);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	791b      	ldrb	r3, [r3, #4]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	2202      	movs	r2, #2
 80018f0:	f001 fa96 	bl	8002e20 <HAL_I2C_IsDeviceReady>
 80018f4:	4603      	mov	r3, r0
 80018f6:	60fb      	str	r3, [r7, #12]
	printf("hal i2c is  device ready == %d\n",x);
 80018f8:	68f9      	ldr	r1, [r7, #12]
 80018fa:	480b      	ldr	r0, [pc, #44]	@ (8001928 <MCP4725_isConnected+0x50>)
 80018fc:	f003 f8b2 	bl	8004a64 <iprintf>

	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	791b      	ldrb	r3, [r3, #4]
 8001908:	4619      	mov	r1, r3
 800190a:	2364      	movs	r3, #100	@ 0x64
 800190c:	2202      	movs	r2, #2
 800190e:	f001 fa87 	bl	8002e20 <HAL_I2C_IsDeviceReady>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	bf0c      	ite	eq
 8001918:	2301      	moveq	r3, #1
 800191a:	2300      	movne	r3, #0
 800191c:	b2db      	uxtb	r3, r3
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	08006b60 	.word	0x08006b60

0800192c <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	6838      	ldr	r0, [r7, #0]
 800193c:	f7ff fb46 	bl	8000fcc <__aeabi_fcmpeq>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <MCP4725_setReferenceVoltage+0x22>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a0c      	ldr	r2, [pc, #48]	@ (800197c <MCP4725_setReferenceVoltage+0x50>)
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	e002      	b.n	8001954 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4619      	mov	r1, r3
 800195a:	f04f 408b 	mov.w	r0, #1166016512	@ 0x45800000
 800195e:	f7ff fa55 	bl	8000e0c <__aeabi_fdiv>
 8001962:	4603      	mov	r3, r0
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fb63 	bl	8001030 <__aeabi_f2uiz>
 800196a:	4603      	mov	r3, r0
 800196c:	b29a      	uxth	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	819a      	strh	r2, [r3, #12]
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40533333 	.word	0x40533333

08001980 <MCP4725_setVoltage>:

    Set output voltage to a fraction of Vref
*/
/**************************************************************************/
uint8_t MCP4725_setVoltage(MCP4725* _MCP4725, float voltage, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	4611      	mov	r1, r2
 800198c:	461a      	mov	r2, r3
 800198e:	460b      	mov	r3, r1
 8001990:	71fb      	strb	r3, [r7, #7]
 8001992:	4613      	mov	r3, r2
 8001994:	71bb      	strb	r3, [r7, #6]
  uint16_t value = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	82fb      	strh	r3, [r7, #22]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if      (voltage >= _MCP4725->_refVoltage) value = MCP4725_MAX_VALUE;      					 //make sure value never exceeds threshold
  else if (voltage <= 0)					           value = 0;
  else                            					 value = voltage * _MCP4725->_bitsPerVolt; //xx,xx,xx,xx,D11,D10,D9,D8 ,D7,D6,D4,D3,D2,D9,D1,D0
  #else
  value = voltage * _MCP4725->_bitsPerVolt;                                											 //xx,xx,xx,xx,D11,D10,D9,D8 ,D7,D6,D4,D3,D2,D9,D1,D0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	899b      	ldrh	r3, [r3, #12]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f92c 	bl	8000bfc <__aeabi_i2f>
 80019a4:	4603      	mov	r3, r0
 80019a6:	68b9      	ldr	r1, [r7, #8]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff f97b 	bl	8000ca4 <__aeabi_fmul>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fb3d 	bl	8001030 <__aeabi_f2uiz>
 80019b6:	4603      	mov	r3, r0
 80019b8:	82fb      	strh	r3, [r7, #22]
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 80019ba:	79bb      	ldrb	r3, [r7, #6]
 80019bc:	79fa      	ldrb	r2, [r7, #7]
 80019be:	8af9      	ldrh	r1, [r7, #22]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 f805 	bl	80019d0 <MCP4725_writeComand>
 80019c6:	4603      	mov	r3, r0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	4603      	mov	r3, r0
 80019e0:	807b      	strh	r3, [r7, #2]
 80019e2:	460b      	mov	r3, r1
 80019e4:	707b      	strb	r3, [r7, #1]
 80019e6:	4613      	mov	r3, r2
 80019e8:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 80019ea:	787b      	ldrb	r3, [r7, #1]
 80019ec:	2b60      	cmp	r3, #96	@ 0x60
 80019ee:	d028      	beq.n	8001a42 <MCP4725_writeComand+0x72>
 80019f0:	2b60      	cmp	r3, #96	@ 0x60
 80019f2:	dc4a      	bgt.n	8001a8a <MCP4725_writeComand+0xba>
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <MCP4725_writeComand+0x2e>
 80019f8:	2b40      	cmp	r3, #64	@ 0x40
 80019fa:	d022      	beq.n	8001a42 <MCP4725_writeComand+0x72>
 80019fc:	e045      	b.n	8001a8a <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18

      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode | (powerType << 4)  | highByte(value);
 80019fe:	783b      	ldrb	r3, [r7, #0]
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	b25a      	sxtb	r2, r3
 8001a04:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b25a      	sxtb	r2, r3
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	737b      	strb	r3, [r7, #13]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	791b      	ldrb	r3, [r3, #4]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f107 020c 	add.w	r2, r7, #12
 8001a30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2302      	movs	r3, #2
 8001a38:	f001 f8f4 	bl	8002c24 <HAL_I2C_Master_Transmit>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	73fb      	strb	r3, [r7, #15]

      break;
 8001a40:	e023      	b.n	8001a8a <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode  | (powerType << 1);
 8001a48:	783b      	ldrb	r3, [r7, #0]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	b25a      	sxtb	r2, r3
 8001a4e:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	73bb      	strb	r3, [r7, #14]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	791b      	ldrb	r3, [r3, #4]
 8001a72:	4619      	mov	r1, r3
 8001a74:	f107 020c 	add.w	r2, r7, #12
 8001a78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2303      	movs	r3, #3
 8001a80:	f001 f8d0 	bl	8002c24 <HAL_I2C_Master_Transmit>
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]

			break;
 8001a88:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MCP4725_writeComand+0xc4>
 8001a90:	2300      	movs	r3, #0
 8001a92:	e000      	b.n	8001a96 <MCP4725_writeComand+0xc6>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
  }
*/  //LATER ON EEEPRROM
  return 1;                                                         //success!!!
 8001a94:	2301      	movs	r3, #1
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa4:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <HAL_Init+0x28>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a07      	ldr	r2, [pc, #28]	@ (8001ac8 <HAL_Init+0x28>)
 8001aaa:	f043 0310 	orr.w	r3, r3, #16
 8001aae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f000 fd73 	bl	800259c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f000 f808 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001abc:	f7ff fcf8 	bl	80014b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40022000 	.word	0x40022000

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_InitTick+0x54>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_InitTick+0x58>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fd8b 	bl	8002606 <HAL_SYSTICK_Config>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00e      	b.n	8001b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d80a      	bhi.n	8001b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f000 fd53 	bl	80025b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b0c:	4a06      	ldr	r2, [pc, #24]	@ (8001b28 <HAL_InitTick+0x5c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e000      	b.n	8001b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000008 	.word	0x20000008
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_IncTick+0x1c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_IncTick+0x20>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a03      	ldr	r2, [pc, #12]	@ (8001b4c <HAL_IncTick+0x20>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000288 	.word	0x20000288

08001b50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b02      	ldr	r3, [pc, #8]	@ (8001b60 <HAL_GetTick+0x10>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	20000288 	.word	0x20000288

08001b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff fff0 	bl	8001b50 <HAL_GetTick>
 8001b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d005      	beq.n	8001b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <HAL_Delay+0x44>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b8a:	bf00      	nop
 8001b8c:	f7ff ffe0 	bl	8001b50 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d8f7      	bhi.n	8001b8c <HAL_Delay+0x28>
  {
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008

08001bac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0be      	b.n	8001d4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fc92 	bl	8001514 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fbc5 	bl	8002380 <ADC_ConversionStop_Disable>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f040 8099 	bne.w	8001d3a <HAL_ADC_Init+0x18e>
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f040 8095 	bne.w	8001d3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c18:	f023 0302 	bic.w	r3, r3, #2
 8001c1c:	f043 0202 	orr.w	r2, r3, #2
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7b1b      	ldrb	r3, [r3, #12]
 8001c32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c44:	d003      	beq.n	8001c4e <HAL_ADC_Init+0xa2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d102      	bne.n	8001c54 <HAL_ADC_Init+0xa8>
 8001c4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c52:	e000      	b.n	8001c56 <HAL_ADC_Init+0xaa>
 8001c54:	2300      	movs	r3, #0
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7d1b      	ldrb	r3, [r3, #20]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d119      	bne.n	8001c98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7b1b      	ldrb	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	035a      	lsls	r2, r3, #13
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	e00b      	b.n	8001c98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	4b28      	ldr	r3, [pc, #160]	@ (8001d54 <HAL_ADC_Init+0x1a8>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cc8:	d003      	beq.n	8001cd2 <HAL_ADC_Init+0x126>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d104      	bne.n	8001cdc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	051b      	lsls	r3, r3, #20
 8001cda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	4b18      	ldr	r3, [pc, #96]	@ (8001d58 <HAL_ADC_Init+0x1ac>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d10b      	bne.n	8001d18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d16:	e018      	b.n	8001d4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1c:	f023 0312 	bic.w	r3, r3, #18
 8001d20:	f043 0210 	orr.w	r2, r3, #16
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d38:	e007      	b.n	8001d4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3e:	f043 0210 	orr.w	r2, r3, #16
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	ffe1f7fd 	.word	0xffe1f7fd
 8001d58:	ff1f0efe 	.word	0xff1f0efe

08001d5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_Start+0x1a>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e098      	b.n	8001ea8 <HAL_ADC_Start+0x14c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 faa4 	bl	80022cc <ADC_Enable>
 8001d84:	4603      	mov	r3, r0
 8001d86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f040 8087 	bne.w	8001e9e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a41      	ldr	r2, [pc, #260]	@ (8001eb0 <HAL_ADC_Start+0x154>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d105      	bne.n	8001dba <HAL_ADC_Start+0x5e>
 8001dae:	4b41      	ldr	r3, [pc, #260]	@ (8001eb4 <HAL_ADC_Start+0x158>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d115      	bne.n	8001de6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d026      	beq.n	8001e22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ddc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001de4:	e01d      	b.n	8001e22 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a2f      	ldr	r2, [pc, #188]	@ (8001eb4 <HAL_ADC_Start+0x158>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d004      	beq.n	8001e06 <HAL_ADC_Start+0xaa>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb0 <HAL_ADC_Start+0x154>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10d      	bne.n	8001e22 <HAL_ADC_Start+0xc6>
 8001e06:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb4 <HAL_ADC_Start+0x158>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e16:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e1a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e32:	f023 0206 	bic.w	r2, r3, #6
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e3a:	e002      	b.n	8001e42 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f06f 0202 	mvn.w	r2, #2
 8001e52:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e5e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e62:	d113      	bne.n	8001e8c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e68:	4a11      	ldr	r2, [pc, #68]	@ (8001eb0 <HAL_ADC_Start+0x154>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d105      	bne.n	8001e7a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e6e:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <HAL_ADC_Start+0x158>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d108      	bne.n	8001e8c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	e00c      	b.n	8001ea6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	e003      	b.n	8001ea6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40012800 	.word	0x40012800
 8001eb4:	40012400 	.word	0x40012400

08001eb8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ece:	f7ff fe3f 	bl	8001b50 <HAL_GetTick>
 8001ed2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee6:	f043 0220 	orr.w	r2, r3, #32
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0d3      	b.n	80020a2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d131      	bne.n	8001f6c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d12a      	bne.n	8001f6c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f16:	e021      	b.n	8001f5c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1e:	d01d      	beq.n	8001f5c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_ADC_PollForConversion+0x7e>
 8001f26:	f7ff fe13 	bl	8001b50 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d212      	bcs.n	8001f5c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10b      	bne.n	8001f5c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f48:	f043 0204 	orr.w	r2, r3, #4
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0a2      	b.n	80020a2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0d6      	beq.n	8001f18 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f6a:	e070      	b.n	800204e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f6c:	4b4f      	ldr	r3, [pc, #316]	@ (80020ac <HAL_ADC_PollForConversion+0x1f4>)
 8001f6e:	681c      	ldr	r4, [r3, #0]
 8001f70:	2002      	movs	r0, #2
 8001f72:	f001 ffa3 	bl	8003ebc <HAL_RCCEx_GetPeriphCLKFreq>
 8001f76:	4603      	mov	r3, r0
 8001f78:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6919      	ldr	r1, [r3, #16]
 8001f82:	4b4b      	ldr	r3, [pc, #300]	@ (80020b0 <HAL_ADC_PollForConversion+0x1f8>)
 8001f84:	400b      	ands	r3, r1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d118      	bne.n	8001fbc <HAL_ADC_PollForConversion+0x104>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68d9      	ldr	r1, [r3, #12]
 8001f90:	4b48      	ldr	r3, [pc, #288]	@ (80020b4 <HAL_ADC_PollForConversion+0x1fc>)
 8001f92:	400b      	ands	r3, r1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d111      	bne.n	8001fbc <HAL_ADC_PollForConversion+0x104>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6919      	ldr	r1, [r3, #16]
 8001f9e:	4b46      	ldr	r3, [pc, #280]	@ (80020b8 <HAL_ADC_PollForConversion+0x200>)
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d108      	bne.n	8001fb8 <HAL_ADC_PollForConversion+0x100>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68d9      	ldr	r1, [r3, #12]
 8001fac:	4b43      	ldr	r3, [pc, #268]	@ (80020bc <HAL_ADC_PollForConversion+0x204>)
 8001fae:	400b      	ands	r3, r1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_PollForConversion+0x100>
 8001fb4:	2314      	movs	r3, #20
 8001fb6:	e020      	b.n	8001ffa <HAL_ADC_PollForConversion+0x142>
 8001fb8:	2329      	movs	r3, #41	@ 0x29
 8001fba:	e01e      	b.n	8001ffa <HAL_ADC_PollForConversion+0x142>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6919      	ldr	r1, [r3, #16]
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80020b8 <HAL_ADC_PollForConversion+0x200>)
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_ADC_PollForConversion+0x120>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68d9      	ldr	r1, [r3, #12]
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	@ (80020bc <HAL_ADC_PollForConversion+0x204>)
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_ADC_PollForConversion+0x13c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6919      	ldr	r1, [r3, #16]
 8001fde:	4b38      	ldr	r3, [pc, #224]	@ (80020c0 <HAL_ADC_PollForConversion+0x208>)
 8001fe0:	400b      	ands	r3, r1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d108      	bne.n	8001ff8 <HAL_ADC_PollForConversion+0x140>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68d9      	ldr	r1, [r3, #12]
 8001fec:	4b34      	ldr	r3, [pc, #208]	@ (80020c0 <HAL_ADC_PollForConversion+0x208>)
 8001fee:	400b      	ands	r3, r1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_PollForConversion+0x140>
 8001ff4:	2354      	movs	r3, #84	@ 0x54
 8001ff6:	e000      	b.n	8001ffa <HAL_ADC_PollForConversion+0x142>
 8001ff8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002000:	e021      	b.n	8002046 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d01a      	beq.n	8002040 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_ADC_PollForConversion+0x168>
 8002010:	f7ff fd9e 	bl	8001b50 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d20f      	bcs.n	8002040 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d90b      	bls.n	8002040 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202c:	f043 0204 	orr.w	r2, r3, #4
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e030      	b.n	80020a2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3301      	adds	r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	429a      	cmp	r2, r3
 800204c:	d8d9      	bhi.n	8002002 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f06f 0212 	mvn.w	r2, #18
 8002056:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800206e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002072:	d115      	bne.n	80020a0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002078:	2b00      	cmp	r3, #0
 800207a:	d111      	bne.n	80020a0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002080:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	371c      	adds	r7, #28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd90      	pop	{r4, r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000000 	.word	0x20000000
 80020b0:	24924924 	.word	0x24924924
 80020b4:	00924924 	.word	0x00924924
 80020b8:	12492492 	.word	0x12492492
 80020bc:	00492492 	.word	0x00492492
 80020c0:	00249249 	.word	0x00249249

080020c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x20>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0dc      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x1da>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b06      	cmp	r3, #6
 800210a:	d81c      	bhi.n	8002146 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	3b05      	subs	r3, #5
 800211e:	221f      	movs	r2, #31
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	4019      	ands	r1, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	3b05      	subs	r3, #5
 8002138:	fa00 f203 	lsl.w	r2, r0, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	635a      	str	r2, [r3, #52]	@ 0x34
 8002144:	e03c      	b.n	80021c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d81c      	bhi.n	8002188 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	3b23      	subs	r3, #35	@ 0x23
 8002160:	221f      	movs	r2, #31
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	4019      	ands	r1, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	3b23      	subs	r3, #35	@ 0x23
 800217a:	fa00 f203 	lsl.w	r2, r0, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	631a      	str	r2, [r3, #48]	@ 0x30
 8002186:	e01b      	b.n	80021c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	3b41      	subs	r3, #65	@ 0x41
 800219a:	221f      	movs	r2, #31
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	4019      	ands	r1, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	3b41      	subs	r3, #65	@ 0x41
 80021b4:	fa00 f203 	lsl.w	r2, r0, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b09      	cmp	r3, #9
 80021c6:	d91c      	bls.n	8002202 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68d9      	ldr	r1, [r3, #12]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	3b1e      	subs	r3, #30
 80021da:	2207      	movs	r2, #7
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	4019      	ands	r1, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6898      	ldr	r0, [r3, #8]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	3b1e      	subs	r3, #30
 80021f4:	fa00 f203 	lsl.w	r2, r0, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	e019      	b.n	8002236 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6919      	ldr	r1, [r3, #16]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	2207      	movs	r2, #7
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	4019      	ands	r1, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6898      	ldr	r0, [r3, #8]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	fa00 f203 	lsl.w	r2, r0, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b10      	cmp	r3, #16
 800223c:	d003      	beq.n	8002246 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002242:	2b11      	cmp	r3, #17
 8002244:	d132      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1d      	ldr	r2, [pc, #116]	@ (80022c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d125      	bne.n	800229c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d126      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800226c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b10      	cmp	r3, #16
 8002274:	d11a      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002276:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a13      	ldr	r2, [pc, #76]	@ (80022c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	0c9a      	lsrs	r2, r3, #18
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800228c:	e002      	b.n	8002294 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	3b01      	subs	r3, #1
 8002292:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f9      	bne.n	800228e <HAL_ADC_ConfigChannel+0x1b2>
 800229a:	e007      	b.n	80022ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a0:	f043 0220 	orr.w	r2, r3, #32
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	40012400 	.word	0x40012400
 80022c4:	20000000 	.word	0x20000000
 80022c8:	431bde83 	.word	0x431bde83

080022cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d040      	beq.n	800236c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002378 <ADC_Enable+0xac>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1f      	ldr	r2, [pc, #124]	@ (800237c <ADC_Enable+0xb0>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	0c9b      	lsrs	r3, r3, #18
 8002306:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002308:	e002      	b.n	8002310 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3b01      	subs	r3, #1
 800230e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f9      	bne.n	800230a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002316:	f7ff fc1b 	bl	8001b50 <HAL_GetTick>
 800231a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800231c:	e01f      	b.n	800235e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800231e:	f7ff fc17 	bl	8001b50 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d918      	bls.n	800235e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d011      	beq.n	800235e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233e:	f043 0210 	orr.w	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e007      	b.n	800236e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b01      	cmp	r3, #1
 800236a:	d1d8      	bne.n	800231e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000000 	.word	0x20000000
 800237c:	431bde83 	.word	0x431bde83

08002380 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d12e      	bne.n	80023f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0201 	bic.w	r2, r2, #1
 80023a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023aa:	f7ff fbd1 	bl	8001b50 <HAL_GetTick>
 80023ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023b0:	e01b      	b.n	80023ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023b2:	f7ff fbcd 	bl	8001b50 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d914      	bls.n	80023ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10d      	bne.n	80023ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	f043 0210 	orr.w	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e007      	b.n	80023fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d0dc      	beq.n	80023b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800242c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002436:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60d3      	str	r3, [r2, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	@ (8002464 <__NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	db0b      	blt.n	8002492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4906      	ldr	r1, [pc, #24]	@ (800249c <__NVIC_EnableIRQ+0x34>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2001      	movs	r0, #1
 800248a:	fa00 f202 	lsl.w	r2, r0, r2
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	e000e100 	.word	0xe000e100

080024a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	db0a      	blt.n	80024ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	490c      	ldr	r1, [pc, #48]	@ (80024ec <__NVIC_SetPriority+0x4c>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	0112      	lsls	r2, r2, #4
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	440b      	add	r3, r1
 80024c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c8:	e00a      	b.n	80024e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <__NVIC_SetPriority+0x50>)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	3b04      	subs	r3, #4
 80024d8:	0112      	lsls	r2, r2, #4
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	440b      	add	r3, r1
 80024de:	761a      	strb	r2, [r3, #24]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000e100 	.word	0xe000e100
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	@ 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f1c3 0307 	rsb	r3, r3, #7
 800250e:	2b04      	cmp	r3, #4
 8002510:	bf28      	it	cs
 8002512:	2304      	movcs	r3, #4
 8002514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3304      	adds	r3, #4
 800251a:	2b06      	cmp	r3, #6
 800251c:	d902      	bls.n	8002524 <NVIC_EncodePriority+0x30>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3b03      	subs	r3, #3
 8002522:	e000      	b.n	8002526 <NVIC_EncodePriority+0x32>
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	401a      	ands	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800253c:	f04f 31ff 	mov.w	r1, #4294967295
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	43d9      	mvns	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	4313      	orrs	r3, r2
         );
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	@ 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002568:	d301      	bcc.n	800256e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <SysTick_Config+0x40>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002576:	210f      	movs	r1, #15
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f7ff ff90 	bl	80024a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <SysTick_Config+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002586:	4b04      	ldr	r3, [pc, #16]	@ (8002598 <SysTick_Config+0x40>)
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000e010 	.word	0xe000e010

0800259c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff2d 	bl	8002404 <__NVIC_SetPriorityGrouping>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c4:	f7ff ff42 	bl	800244c <__NVIC_GetPriorityGrouping>
 80025c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f7ff ff90 	bl	80024f4 <NVIC_EncodePriority>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff5f 	bl	80024a0 <__NVIC_SetPriority>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff35 	bl	8002468 <__NVIC_EnableIRQ>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ffa2 	bl	8002558 <SysTick_Config>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b08b      	sub	sp, #44	@ 0x2c
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002632:	e169      	b.n	8002908 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002634:	2201      	movs	r2, #1
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	429a      	cmp	r2, r3
 800264e:	f040 8158 	bne.w	8002902 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4a9a      	ldr	r2, [pc, #616]	@ (80028c0 <HAL_GPIO_Init+0x2a0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d05e      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 800265c:	4a98      	ldr	r2, [pc, #608]	@ (80028c0 <HAL_GPIO_Init+0x2a0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d875      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 8002662:	4a98      	ldr	r2, [pc, #608]	@ (80028c4 <HAL_GPIO_Init+0x2a4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d058      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 8002668:	4a96      	ldr	r2, [pc, #600]	@ (80028c4 <HAL_GPIO_Init+0x2a4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d86f      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 800266e:	4a96      	ldr	r2, [pc, #600]	@ (80028c8 <HAL_GPIO_Init+0x2a8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d052      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 8002674:	4a94      	ldr	r2, [pc, #592]	@ (80028c8 <HAL_GPIO_Init+0x2a8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d869      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 800267a:	4a94      	ldr	r2, [pc, #592]	@ (80028cc <HAL_GPIO_Init+0x2ac>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d04c      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 8002680:	4a92      	ldr	r2, [pc, #584]	@ (80028cc <HAL_GPIO_Init+0x2ac>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d863      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 8002686:	4a92      	ldr	r2, [pc, #584]	@ (80028d0 <HAL_GPIO_Init+0x2b0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d046      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 800268c:	4a90      	ldr	r2, [pc, #576]	@ (80028d0 <HAL_GPIO_Init+0x2b0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d85d      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 8002692:	2b12      	cmp	r3, #18
 8002694:	d82a      	bhi.n	80026ec <HAL_GPIO_Init+0xcc>
 8002696:	2b12      	cmp	r3, #18
 8002698:	d859      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 800269a:	a201      	add	r2, pc, #4	@ (adr r2, 80026a0 <HAL_GPIO_Init+0x80>)
 800269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a0:	0800271b 	.word	0x0800271b
 80026a4:	080026f5 	.word	0x080026f5
 80026a8:	08002707 	.word	0x08002707
 80026ac:	08002749 	.word	0x08002749
 80026b0:	0800274f 	.word	0x0800274f
 80026b4:	0800274f 	.word	0x0800274f
 80026b8:	0800274f 	.word	0x0800274f
 80026bc:	0800274f 	.word	0x0800274f
 80026c0:	0800274f 	.word	0x0800274f
 80026c4:	0800274f 	.word	0x0800274f
 80026c8:	0800274f 	.word	0x0800274f
 80026cc:	0800274f 	.word	0x0800274f
 80026d0:	0800274f 	.word	0x0800274f
 80026d4:	0800274f 	.word	0x0800274f
 80026d8:	0800274f 	.word	0x0800274f
 80026dc:	0800274f 	.word	0x0800274f
 80026e0:	0800274f 	.word	0x0800274f
 80026e4:	080026fd 	.word	0x080026fd
 80026e8:	08002711 	.word	0x08002711
 80026ec:	4a79      	ldr	r2, [pc, #484]	@ (80028d4 <HAL_GPIO_Init+0x2b4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026f2:	e02c      	b.n	800274e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	623b      	str	r3, [r7, #32]
          break;
 80026fa:	e029      	b.n	8002750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	3304      	adds	r3, #4
 8002702:	623b      	str	r3, [r7, #32]
          break;
 8002704:	e024      	b.n	8002750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	3308      	adds	r3, #8
 800270c:	623b      	str	r3, [r7, #32]
          break;
 800270e:	e01f      	b.n	8002750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	330c      	adds	r3, #12
 8002716:	623b      	str	r3, [r7, #32]
          break;
 8002718:	e01a      	b.n	8002750 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002722:	2304      	movs	r3, #4
 8002724:	623b      	str	r3, [r7, #32]
          break;
 8002726:	e013      	b.n	8002750 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d105      	bne.n	800273c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002730:	2308      	movs	r3, #8
 8002732:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	611a      	str	r2, [r3, #16]
          break;
 800273a:	e009      	b.n	8002750 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800273c:	2308      	movs	r3, #8
 800273e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	615a      	str	r2, [r3, #20]
          break;
 8002746:	e003      	b.n	8002750 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002748:	2300      	movs	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
          break;
 800274c:	e000      	b.n	8002750 <HAL_GPIO_Init+0x130>
          break;
 800274e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2bff      	cmp	r3, #255	@ 0xff
 8002754:	d801      	bhi.n	800275a <HAL_GPIO_Init+0x13a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	e001      	b.n	800275e <HAL_GPIO_Init+0x13e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2bff      	cmp	r3, #255	@ 0xff
 8002764:	d802      	bhi.n	800276c <HAL_GPIO_Init+0x14c>
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	e002      	b.n	8002772 <HAL_GPIO_Init+0x152>
 800276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276e:	3b08      	subs	r3, #8
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	210f      	movs	r1, #15
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	401a      	ands	r2, r3
 8002784:	6a39      	ldr	r1, [r7, #32]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	431a      	orrs	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80b1 	beq.w	8002902 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027a0:	4b4d      	ldr	r3, [pc, #308]	@ (80028d8 <HAL_GPIO_Init+0x2b8>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4a4c      	ldr	r2, [pc, #304]	@ (80028d8 <HAL_GPIO_Init+0x2b8>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b4a      	ldr	r3, [pc, #296]	@ (80028d8 <HAL_GPIO_Init+0x2b8>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027b8:	4a48      	ldr	r2, [pc, #288]	@ (80028dc <HAL_GPIO_Init+0x2bc>)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	3302      	adds	r3, #2
 80027c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	220f      	movs	r2, #15
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4013      	ands	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a40      	ldr	r2, [pc, #256]	@ (80028e0 <HAL_GPIO_Init+0x2c0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d013      	beq.n	800280c <HAL_GPIO_Init+0x1ec>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a3f      	ldr	r2, [pc, #252]	@ (80028e4 <HAL_GPIO_Init+0x2c4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00d      	beq.n	8002808 <HAL_GPIO_Init+0x1e8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a3e      	ldr	r2, [pc, #248]	@ (80028e8 <HAL_GPIO_Init+0x2c8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d007      	beq.n	8002804 <HAL_GPIO_Init+0x1e4>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a3d      	ldr	r2, [pc, #244]	@ (80028ec <HAL_GPIO_Init+0x2cc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d101      	bne.n	8002800 <HAL_GPIO_Init+0x1e0>
 80027fc:	2303      	movs	r3, #3
 80027fe:	e006      	b.n	800280e <HAL_GPIO_Init+0x1ee>
 8002800:	2304      	movs	r3, #4
 8002802:	e004      	b.n	800280e <HAL_GPIO_Init+0x1ee>
 8002804:	2302      	movs	r3, #2
 8002806:	e002      	b.n	800280e <HAL_GPIO_Init+0x1ee>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <HAL_GPIO_Init+0x1ee>
 800280c:	2300      	movs	r3, #0
 800280e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002810:	f002 0203 	and.w	r2, r2, #3
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	4093      	lsls	r3, r2
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800281e:	492f      	ldr	r1, [pc, #188]	@ (80028dc <HAL_GPIO_Init+0x2bc>)
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	3302      	adds	r3, #2
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002838:	4b2d      	ldr	r3, [pc, #180]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	492c      	ldr	r1, [pc, #176]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	608b      	str	r3, [r1, #8]
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002846:	4b2a      	ldr	r3, [pc, #168]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	43db      	mvns	r3, r3
 800284e:	4928      	ldr	r1, [pc, #160]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002850:	4013      	ands	r3, r2
 8002852:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d006      	beq.n	800286e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002860:	4b23      	ldr	r3, [pc, #140]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	4922      	ldr	r1, [pc, #136]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	60cb      	str	r3, [r1, #12]
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800286e:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	43db      	mvns	r3, r3
 8002876:	491e      	ldr	r1, [pc, #120]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002878:	4013      	ands	r3, r2
 800287a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d006      	beq.n	8002896 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002888:	4b19      	ldr	r3, [pc, #100]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	4918      	ldr	r1, [pc, #96]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
 8002894:	e006      	b.n	80028a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002896:	4b16      	ldr	r3, [pc, #88]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	43db      	mvns	r3, r3
 800289e:	4914      	ldr	r1, [pc, #80]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d021      	beq.n	80028f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028b0:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	490e      	ldr	r1, [pc, #56]	@ (80028f0 <HAL_GPIO_Init+0x2d0>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]
 80028bc:	e021      	b.n	8002902 <HAL_GPIO_Init+0x2e2>
 80028be:	bf00      	nop
 80028c0:	10320000 	.word	0x10320000
 80028c4:	10310000 	.word	0x10310000
 80028c8:	10220000 	.word	0x10220000
 80028cc:	10210000 	.word	0x10210000
 80028d0:	10120000 	.word	0x10120000
 80028d4:	10110000 	.word	0x10110000
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010000 	.word	0x40010000
 80028e0:	40010800 	.word	0x40010800
 80028e4:	40010c00 	.word	0x40010c00
 80028e8:	40011000 	.word	0x40011000
 80028ec:	40011400 	.word	0x40011400
 80028f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <HAL_GPIO_Init+0x304>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	4909      	ldr	r1, [pc, #36]	@ (8002924 <HAL_GPIO_Init+0x304>)
 80028fe:	4013      	ands	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	3301      	adds	r3, #1
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	fa22 f303 	lsr.w	r3, r2, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	f47f ae8e 	bne.w	8002634 <HAL_GPIO_Init+0x14>
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	372c      	adds	r7, #44	@ 0x2c
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	40010400 	.word	0x40010400

08002928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
 8002934:	4613      	mov	r3, r2
 8002936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002938:	787b      	ldrb	r3, [r7, #1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002944:	e003      	b.n	800294e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	041a      	lsls	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	611a      	str	r2, [r3, #16]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002962:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d006      	beq.n	800297c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800296e:	4a05      	ldr	r2, [pc, #20]	@ (8002984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f806 	bl	8002988 <HAL_GPIO_EXTI_Callback>
  }
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40010400 	.word	0x40010400

08002988 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e12b      	b.n	8002c06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe fde2 	bl	800158c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2224      	movs	r2, #36	@ 0x24
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a00:	f001 f960 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8002a04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4a81      	ldr	r2, [pc, #516]	@ (8002c10 <HAL_I2C_Init+0x274>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d807      	bhi.n	8002a20 <HAL_I2C_Init+0x84>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a80      	ldr	r2, [pc, #512]	@ (8002c14 <HAL_I2C_Init+0x278>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	bf94      	ite	ls
 8002a18:	2301      	movls	r3, #1
 8002a1a:	2300      	movhi	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	e006      	b.n	8002a2e <HAL_I2C_Init+0x92>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a7d      	ldr	r2, [pc, #500]	@ (8002c18 <HAL_I2C_Init+0x27c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	bf94      	ite	ls
 8002a28:	2301      	movls	r3, #1
 8002a2a:	2300      	movhi	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0e7      	b.n	8002c06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a78      	ldr	r2, [pc, #480]	@ (8002c1c <HAL_I2C_Init+0x280>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0c9b      	lsrs	r3, r3, #18
 8002a40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a6a      	ldr	r2, [pc, #424]	@ (8002c10 <HAL_I2C_Init+0x274>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d802      	bhi.n	8002a70 <HAL_I2C_Init+0xd4>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	e009      	b.n	8002a84 <HAL_I2C_Init+0xe8>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	4a69      	ldr	r2, [pc, #420]	@ (8002c20 <HAL_I2C_Init+0x284>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	3301      	adds	r3, #1
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	495c      	ldr	r1, [pc, #368]	@ (8002c10 <HAL_I2C_Init+0x274>)
 8002aa0:	428b      	cmp	r3, r1
 8002aa2:	d819      	bhi.n	8002ad8 <HAL_I2C_Init+0x13c>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e59      	subs	r1, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab2:	1c59      	adds	r1, r3, #1
 8002ab4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ab8:	400b      	ands	r3, r1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_I2C_Init+0x138>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1e59      	subs	r1, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad2:	e051      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	e04f      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d111      	bne.n	8002b04 <HAL_I2C_Init+0x168>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1e58      	subs	r0, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	440b      	add	r3, r1
 8002aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e012      	b.n	8002b2a <HAL_I2C_Init+0x18e>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1e58      	subs	r0, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	0099      	lsls	r1, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Init+0x196>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e022      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10e      	bne.n	8002b58 <HAL_I2C_Init+0x1bc>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1e58      	subs	r0, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6859      	ldr	r1, [r3, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	440b      	add	r3, r1
 8002b48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b56:	e00f      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1e58      	subs	r0, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	0099      	lsls	r1, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	6809      	ldr	r1, [r1, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ba6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6911      	ldr	r1, [r2, #16]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68d2      	ldr	r2, [r2, #12]
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	000186a0 	.word	0x000186a0
 8002c14:	001e847f 	.word	0x001e847f
 8002c18:	003d08ff 	.word	0x003d08ff
 8002c1c:	431bde83 	.word	0x431bde83
 8002c20:	10624dd3 	.word	0x10624dd3

08002c24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	460b      	mov	r3, r1
 8002c32:	817b      	strh	r3, [r7, #10]
 8002c34:	4613      	mov	r3, r2
 8002c36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c38:	f7fe ff8a 	bl	8001b50 <HAL_GetTick>
 8002c3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	f040 80e0 	bne.w	8002e0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2319      	movs	r3, #25
 8002c52:	2201      	movs	r2, #1
 8002c54:	4970      	ldr	r1, [pc, #448]	@ (8002e18 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fa92 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0d3      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_I2C_Master_Transmit+0x50>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e0cc      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d007      	beq.n	8002c9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2221      	movs	r2, #33	@ 0x21
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	893a      	ldrh	r2, [r7, #8]
 8002cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4a50      	ldr	r2, [pc, #320]	@ (8002e1c <HAL_I2C_Master_Transmit+0x1f8>)
 8002cda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cdc:	8979      	ldrh	r1, [r7, #10]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	6a3a      	ldr	r2, [r7, #32]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f9ca 	bl	800307c <I2C_MasterRequestWrite>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e08d      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d08:	e066      	b.n	8002dd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	6a39      	ldr	r1, [r7, #32]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fb50 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d107      	bne.n	8002d32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e06b      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d11b      	bne.n	8002dac <HAL_I2C_Master_Transmit+0x188>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d017      	beq.n	8002dac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	6a39      	ldr	r1, [r7, #32]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fb47 	bl	8003444 <I2C_WaitOnBTFFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00d      	beq.n	8002dd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d107      	bne.n	8002dd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e01a      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d194      	bne.n	8002d0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	00100002 	.word	0x00100002
 8002e1c:	ffff0000 	.word	0xffff0000

08002e20 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	@ 0x28
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7fe fe8e 	bl	8001b50 <HAL_GetTick>
 8002e34:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	f040 8111 	bne.w	800306a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	2319      	movs	r3, #25
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4988      	ldr	r1, [pc, #544]	@ (8003074 <HAL_I2C_IsDeviceReady+0x254>)
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f994 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e104      	b.n	800306c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_I2C_IsDeviceReady+0x50>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e0fd      	b.n	800306c <HAL_I2C_IsDeviceReady+0x24c>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d007      	beq.n	8002e96 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0201 	orr.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ea4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2224      	movs	r2, #36	@ 0x24
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a70      	ldr	r2, [pc, #448]	@ (8003078 <HAL_I2C_IsDeviceReady+0x258>)
 8002eb8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f952 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ef0:	d103      	bne.n	8002efa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ef8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0b6      	b.n	800306c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002efe:	897b      	ldrh	r3, [r7, #10]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f0c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fe1f 	bl	8001b50 <HAL_GetTick>
 8002f12:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f38:	bf0c      	ite	eq
 8002f3a:	2301      	moveq	r3, #1
 8002f3c:	2300      	movne	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f42:	e025      	b.n	8002f90 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f44:	f7fe fe04 	bl	8001b50 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d302      	bcc.n	8002f5a <HAL_I2C_IsDeviceReady+0x13a>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	22a0      	movs	r2, #160	@ 0xa0
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_I2C_IsDeviceReady+0x188>
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <HAL_I2C_IsDeviceReady+0x188>
 8002fa2:	7dbb      	ldrb	r3, [r7, #22]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0cd      	beq.n	8002f44 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d129      	bne.n	8003012 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2319      	movs	r3, #25
 8002fea:	2201      	movs	r2, #1
 8002fec:	4921      	ldr	r1, [pc, #132]	@ (8003074 <HAL_I2C_IsDeviceReady+0x254>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f8c6 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e036      	b.n	800306c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e02c      	b.n	800306c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003020:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800302a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	2319      	movs	r3, #25
 8003032:	2201      	movs	r2, #1
 8003034:	490f      	ldr	r1, [pc, #60]	@ (8003074 <HAL_I2C_IsDeviceReady+0x254>)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f8a2 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e012      	b.n	800306c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	3301      	adds	r3, #1
 800304a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	429a      	cmp	r2, r3
 8003052:	f4ff af32 	bcc.w	8002eba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800306a:	2302      	movs	r3, #2
  }
}
 800306c:	4618      	mov	r0, r3
 800306e:	3720      	adds	r7, #32
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	00100002 	.word	0x00100002
 8003078:	ffff0000 	.word	0xffff0000

0800307c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	460b      	mov	r3, r1
 800308a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003090:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d006      	beq.n	80030a6 <I2C_MasterRequestWrite+0x2a>
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d003      	beq.n	80030a6 <I2C_MasterRequestWrite+0x2a>
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030a4:	d108      	bne.n	80030b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e00b      	b.n	80030d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030bc:	2b12      	cmp	r3, #18
 80030be:	d107      	bne.n	80030d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f84f 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00d      	beq.n	8003104 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030f6:	d103      	bne.n	8003100 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e035      	b.n	8003170 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800310c:	d108      	bne.n	8003120 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	e01b      	b.n	8003158 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003120:	897b      	ldrh	r3, [r7, #10]
 8003122:	11db      	asrs	r3, r3, #7
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f003 0306 	and.w	r3, r3, #6
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f063 030f 	orn	r3, r3, #15
 8003130:	b2da      	uxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	490e      	ldr	r1, [pc, #56]	@ (8003178 <I2C_MasterRequestWrite+0xfc>)
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f898 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e010      	b.n	8003170 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800314e:	897b      	ldrh	r3, [r7, #10]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4907      	ldr	r1, [pc, #28]	@ (800317c <I2C_MasterRequestWrite+0x100>)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f888 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	00010008 	.word	0x00010008
 800317c:	00010002 	.word	0x00010002

08003180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003190:	e048      	b.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d044      	beq.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe fcd9 	bl	8001b50 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d139      	bne.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	0c1b      	lsrs	r3, r3, #16
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10d      	bne.n	80031d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	43da      	mvns	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	e00c      	b.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	43da      	mvns	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4013      	ands	r3, r2
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d116      	bne.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e023      	b.n	800326c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	0c1b      	lsrs	r3, r3, #16
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d10d      	bne.n	800324a <I2C_WaitOnFlagUntilTimeout+0xca>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	43da      	mvns	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	e00c      	b.n	8003264 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	43da      	mvns	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	4013      	ands	r3, r2
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	429a      	cmp	r2, r3
 8003268:	d093      	beq.n	8003192 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003282:	e071      	b.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003292:	d123      	bne.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f043 0204 	orr.w	r2, r3, #4
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e067      	b.n	80033ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d041      	beq.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7fe fc34 	bl	8001b50 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d136      	bne.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10c      	bne.n	800331e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	43da      	mvns	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4013      	ands	r3, r2
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	e00b      	b.n	8003336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	43da      	mvns	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4013      	ands	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e021      	b.n	80033ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	0c1b      	lsrs	r3, r3, #16
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d10c      	bne.n	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	43da      	mvns	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4013      	ands	r3, r2
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e00b      	b.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf14      	ite	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	2300      	moveq	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f47f af6d 	bne.w	8003284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c0:	e034      	b.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f886 	bl	80034d4 <I2C_IsAcknowledgeFailed>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e034      	b.n	800343c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d028      	beq.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033da:	f7fe fbb9 	bl	8001b50 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d11d      	bne.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fa:	2b80      	cmp	r3, #128	@ 0x80
 80033fc:	d016      	beq.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e007      	b.n	800343c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003436:	2b80      	cmp	r3, #128	@ 0x80
 8003438:	d1c3      	bne.n	80033c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003450:	e034      	b.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f83e 	bl	80034d4 <I2C_IsAcknowledgeFailed>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e034      	b.n	80034cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d028      	beq.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346a:	f7fe fb71 	bl	8001b50 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	d302      	bcc.n	8003480 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d11d      	bne.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d016      	beq.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e007      	b.n	80034cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d1c3      	bne.n	8003452 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ea:	d11b      	bne.n	8003524 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	f043 0204 	orr.w	r2, r3, #4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e272      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8087 	beq.w	800365e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003550:	4b92      	ldr	r3, [pc, #584]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b04      	cmp	r3, #4
 800355a:	d00c      	beq.n	8003576 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800355c:	4b8f      	ldr	r3, [pc, #572]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b08      	cmp	r3, #8
 8003566:	d112      	bne.n	800358e <HAL_RCC_OscConfig+0x5e>
 8003568:	4b8c      	ldr	r3, [pc, #560]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003574:	d10b      	bne.n	800358e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003576:	4b89      	ldr	r3, [pc, #548]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d06c      	beq.n	800365c <HAL_RCC_OscConfig+0x12c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d168      	bne.n	800365c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e24c      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x76>
 8003598:	4b80      	ldr	r3, [pc, #512]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a7f      	ldr	r2, [pc, #508]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e02e      	b.n	8003604 <HAL_RCC_OscConfig+0xd4>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x98>
 80035ae:	4b7b      	ldr	r3, [pc, #492]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7a      	ldr	r2, [pc, #488]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80035b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b78      	ldr	r3, [pc, #480]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a77      	ldr	r2, [pc, #476]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80035c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e01d      	b.n	8003604 <HAL_RCC_OscConfig+0xd4>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0xbc>
 80035d2:	4b72      	ldr	r3, [pc, #456]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a71      	ldr	r2, [pc, #452]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b6f      	ldr	r3, [pc, #444]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6e      	ldr	r2, [pc, #440]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xd4>
 80035ec:	4b6b      	ldr	r3, [pc, #428]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6a      	ldr	r2, [pc, #424]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b68      	ldr	r3, [pc, #416]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a67      	ldr	r2, [pc, #412]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003602:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe faa0 	bl	8001b50 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe fa9c 	bl	8001b50 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e200      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b5d      	ldr	r3, [pc, #372]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xe4>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fe fa8c 	bl	8001b50 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe fa88 	bl	8001b50 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e1ec      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	4b53      	ldr	r3, [pc, #332]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x10c>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d063      	beq.n	8003732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800366a:	4b4c      	ldr	r3, [pc, #304]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003676:	4b49      	ldr	r3, [pc, #292]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b08      	cmp	r3, #8
 8003680:	d11c      	bne.n	80036bc <HAL_RCC_OscConfig+0x18c>
 8003682:	4b46      	ldr	r3, [pc, #280]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	4b43      	ldr	r3, [pc, #268]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_RCC_OscConfig+0x176>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e1c0      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b3d      	ldr	r3, [pc, #244]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4939      	ldr	r1, [pc, #228]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	e03a      	b.n	8003732 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c4:	4b36      	ldr	r3, [pc, #216]	@ (80037a0 <HAL_RCC_OscConfig+0x270>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fe fa41 	bl	8001b50 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d2:	f7fe fa3d 	bl	8001b50 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e1a1      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	4b2d      	ldr	r3, [pc, #180]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f0:	4b2a      	ldr	r3, [pc, #168]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4927      	ldr	r1, [pc, #156]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003706:	4b26      	ldr	r3, [pc, #152]	@ (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe fa20 	bl	8001b50 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003714:	f7fe fa1c 	bl	8001b50 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e180      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	4b1d      	ldr	r3, [pc, #116]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d03a      	beq.n	80037b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d019      	beq.n	800377a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003746:	4b17      	ldr	r3, [pc, #92]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374c:	f7fe fa00 	bl	8001b50 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003754:	f7fe f9fc 	bl	8001b50 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e160      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <HAL_RCC_OscConfig+0x26c>)
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003772:	2001      	movs	r0, #1
 8003774:	f000 face 	bl	8003d14 <RCC_Delay>
 8003778:	e01c      	b.n	80037b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377a:	4b0a      	ldr	r3, [pc, #40]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003780:	f7fe f9e6 	bl	8001b50 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003786:	e00f      	b.n	80037a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003788:	f7fe f9e2 	bl	8001b50 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d908      	bls.n	80037a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e146      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
 80037a0:	42420000 	.word	0x42420000
 80037a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	4b92      	ldr	r3, [pc, #584]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e9      	bne.n	8003788 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80a6 	beq.w	800390e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b8b      	ldr	r3, [pc, #556]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	4b88      	ldr	r3, [pc, #544]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	4a87      	ldr	r2, [pc, #540]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037dc:	61d3      	str	r3, [r2, #28]
 80037de:	4b85      	ldr	r3, [pc, #532]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	4b82      	ldr	r3, [pc, #520]	@ (80039f8 <HAL_RCC_OscConfig+0x4c8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d118      	bne.n	800382c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fa:	4b7f      	ldr	r3, [pc, #508]	@ (80039f8 <HAL_RCC_OscConfig+0x4c8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7e      	ldr	r2, [pc, #504]	@ (80039f8 <HAL_RCC_OscConfig+0x4c8>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003806:	f7fe f9a3 	bl	8001b50 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fe f99f 	bl	8001b50 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b64      	cmp	r3, #100	@ 0x64
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e103      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	4b75      	ldr	r3, [pc, #468]	@ (80039f8 <HAL_RCC_OscConfig+0x4c8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x312>
 8003834:	4b6f      	ldr	r3, [pc, #444]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4a6e      	ldr	r2, [pc, #440]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6213      	str	r3, [r2, #32]
 8003840:	e02d      	b.n	800389e <HAL_RCC_OscConfig+0x36e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x334>
 800384a:	4b6a      	ldr	r3, [pc, #424]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4a69      	ldr	r2, [pc, #420]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	6213      	str	r3, [r2, #32]
 8003856:	4b67      	ldr	r3, [pc, #412]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	4a66      	ldr	r2, [pc, #408]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	6213      	str	r3, [r2, #32]
 8003862:	e01c      	b.n	800389e <HAL_RCC_OscConfig+0x36e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	2b05      	cmp	r3, #5
 800386a:	d10c      	bne.n	8003886 <HAL_RCC_OscConfig+0x356>
 800386c:	4b61      	ldr	r3, [pc, #388]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4a60      	ldr	r2, [pc, #384]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	6213      	str	r3, [r2, #32]
 8003878:	4b5e      	ldr	r3, [pc, #376]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	4a5d      	ldr	r2, [pc, #372]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6213      	str	r3, [r2, #32]
 8003884:	e00b      	b.n	800389e <HAL_RCC_OscConfig+0x36e>
 8003886:	4b5b      	ldr	r3, [pc, #364]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4a5a      	ldr	r2, [pc, #360]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	6213      	str	r3, [r2, #32]
 8003892:	4b58      	ldr	r3, [pc, #352]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	4a57      	ldr	r2, [pc, #348]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d015      	beq.n	80038d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a6:	f7fe f953 	bl	8001b50 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fe f94f 	bl	8001b50 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0b1      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c4:	4b4b      	ldr	r3, [pc, #300]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ee      	beq.n	80038ae <HAL_RCC_OscConfig+0x37e>
 80038d0:	e014      	b.n	80038fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d2:	f7fe f93d 	bl	8001b50 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d8:	e00a      	b.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fe f939 	bl	8001b50 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e09b      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f0:	4b40      	ldr	r3, [pc, #256]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ee      	bne.n	80038da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d105      	bne.n	800390e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003902:	4b3c      	ldr	r3, [pc, #240]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	4a3b      	ldr	r2, [pc, #236]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003908:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800390c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8087 	beq.w	8003a26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003918:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b08      	cmp	r3, #8
 8003922:	d061      	beq.n	80039e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d146      	bne.n	80039ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392c:	4b33      	ldr	r3, [pc, #204]	@ (80039fc <HAL_RCC_OscConfig+0x4cc>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fe f90d 	bl	8001b50 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393a:	f7fe f909 	bl	8001b50 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e06d      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394c:	4b29      	ldr	r3, [pc, #164]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003960:	d108      	bne.n	8003974 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003962:	4b24      	ldr	r3, [pc, #144]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	4921      	ldr	r1, [pc, #132]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003974:	4b1f      	ldr	r3, [pc, #124]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a19      	ldr	r1, [r3, #32]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	430b      	orrs	r3, r1
 8003986:	491b      	ldr	r1, [pc, #108]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398c:	4b1b      	ldr	r3, [pc, #108]	@ (80039fc <HAL_RCC_OscConfig+0x4cc>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003992:	f7fe f8dd 	bl	8001b50 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399a:	f7fe f8d9 	bl	8001b50 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e03d      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ac:	4b11      	ldr	r3, [pc, #68]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x46a>
 80039b8:	e035      	b.n	8003a26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ba:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <HAL_RCC_OscConfig+0x4cc>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fe f8c6 	bl	8001b50 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fe f8c2 	bl	8001b50 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e026      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039da:	4b06      	ldr	r3, [pc, #24]	@ (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x498>
 80039e6:	e01e      	b.n	8003a26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e019      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40007000 	.word	0x40007000
 80039fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a00:	4b0b      	ldr	r3, [pc, #44]	@ (8003a30 <HAL_RCC_OscConfig+0x500>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d001      	beq.n	8003a26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000

08003a34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0d0      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b6a      	ldr	r3, [pc, #424]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d910      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b67      	ldr	r3, [pc, #412]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 0207 	bic.w	r2, r3, #7
 8003a5e:	4965      	ldr	r1, [pc, #404]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b63      	ldr	r3, [pc, #396]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0b8      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a90:	4b59      	ldr	r3, [pc, #356]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4a58      	ldr	r2, [pc, #352]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa8:	4b53      	ldr	r3, [pc, #332]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4a52      	ldr	r2, [pc, #328]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ab2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b50      	ldr	r3, [pc, #320]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	494d      	ldr	r1, [pc, #308]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d040      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	4b47      	ldr	r3, [pc, #284]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d115      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e07f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af2:	4b41      	ldr	r3, [pc, #260]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e073      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b02:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e06b      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b12:	4b39      	ldr	r3, [pc, #228]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4936      	ldr	r1, [pc, #216]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b24:	f7fe f814 	bl	8001b50 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2c:	f7fe f810 	bl	8001b50 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e053      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 020c 	and.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1eb      	bne.n	8003b2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b27      	ldr	r3, [pc, #156]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d210      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 0207 	bic.w	r2, r3, #7
 8003b6a:	4922      	ldr	r1, [pc, #136]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b20      	ldr	r3, [pc, #128]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e032      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b90:	4b19      	ldr	r3, [pc, #100]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4916      	ldr	r1, [pc, #88]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bae:	4b12      	ldr	r3, [pc, #72]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	490e      	ldr	r1, [pc, #56]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bc2:	f000 f821 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	490a      	ldr	r1, [pc, #40]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003bd4:	5ccb      	ldrb	r3, [r1, r3]
 8003bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bda:	4a09      	ldr	r2, [pc, #36]	@ (8003c00 <HAL_RCC_ClockConfig+0x1cc>)
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bde:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <HAL_RCC_ClockConfig+0x1d0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd ff72 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	08006b80 	.word	0x08006b80
 8003c00:	20000000 	.word	0x20000000
 8003c04:	20000004 	.word	0x20000004

08003c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c22:	4b1e      	ldr	r3, [pc, #120]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d002      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0x30>
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d003      	beq.n	8003c3e <HAL_RCC_GetSysClockFreq+0x36>
 8003c36:	e027      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c38:	4b19      	ldr	r3, [pc, #100]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c3a:	613b      	str	r3, [r7, #16]
      break;
 8003c3c:	e027      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	0c9b      	lsrs	r3, r3, #18
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	4a17      	ldr	r2, [pc, #92]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
 8003c4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d010      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c56:	4b11      	ldr	r3, [pc, #68]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	0c5b      	lsrs	r3, r3, #17
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	4a11      	ldr	r2, [pc, #68]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c62:	5cd3      	ldrb	r3, [r2, r3]
 8003c64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c6a:	fb03 f202 	mul.w	r2, r3, r2
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	e004      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	613b      	str	r3, [r7, #16]
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c88:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c8a:	613b      	str	r3, [r7, #16]
      break;
 8003c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c8e:	693b      	ldr	r3, [r7, #16]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	007a1200 	.word	0x007a1200
 8003ca4:	08006b98 	.word	0x08006b98
 8003ca8:	08006ba8 	.word	0x08006ba8
 8003cac:	003d0900 	.word	0x003d0900

08003cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb4:	4b02      	ldr	r3, [pc, #8]	@ (8003cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	20000000 	.word	0x20000000

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cc8:	f7ff fff2 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	@ (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	08006b90 	.word	0x08006b90

08003cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cf0:	f7ff ffde 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	0adb      	lsrs	r3, r3, #11
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4903      	ldr	r1, [pc, #12]	@ (8003d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	08006b90 	.word	0x08006b90

08003d14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d48 <RCC_Delay+0x34>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a0a      	ldr	r2, [pc, #40]	@ (8003d4c <RCC_Delay+0x38>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	0a5b      	lsrs	r3, r3, #9
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d30:	bf00      	nop
  }
  while (Delay --);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1e5a      	subs	r2, r3, #1
 8003d36:	60fa      	str	r2, [r7, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f9      	bne.n	8003d30 <RCC_Delay+0x1c>
}
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	20000000 	.word	0x20000000
 8003d4c:	10624dd3 	.word	0x10624dd3

08003d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d07d      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d70:	4b4f      	ldr	r3, [pc, #316]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10d      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7c:	4b4c      	ldr	r3, [pc, #304]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	4a4b      	ldr	r2, [pc, #300]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d86:	61d3      	str	r3, [r2, #28]
 8003d88:	4b49      	ldr	r3, [pc, #292]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	4b46      	ldr	r3, [pc, #280]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d118      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da4:	4b43      	ldr	r3, [pc, #268]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a42      	ldr	r2, [pc, #264]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db0:	f7fd fece 	bl	8001b50 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db6:	e008      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db8:	f7fd feca 	bl	8001b50 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	@ 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e06d      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dca:	4b3a      	ldr	r3, [pc, #232]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dd6:	4b36      	ldr	r3, [pc, #216]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02e      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d027      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003df4:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e04:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e0a:	4a29      	ldr	r2, [pc, #164]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d014      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1a:	f7fd fe99 	bl	8001b50 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e22:	f7fd fe95 	bl	8001b50 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e036      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e38:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ee      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e44:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4917      	ldr	r1, [pc, #92]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5c:	4b14      	ldr	r3, [pc, #80]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	4a13      	ldr	r2, [pc, #76]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e74:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	490b      	ldr	r1, [pc, #44]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e92:	4b07      	ldr	r3, [pc, #28]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	4904      	ldr	r1, [pc, #16]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	42420440 	.word	0x42420440

08003ebc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	f200 808a 	bhi.w	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d045      	beq.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d075      	beq.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003ef2:	e082      	b.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003ef4:	4b46      	ldr	r3, [pc, #280]	@ (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003efa:	4b45      	ldr	r3, [pc, #276]	@ (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d07b      	beq.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	0c9b      	lsrs	r3, r3, #18
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	4a41      	ldr	r2, [pc, #260]	@ (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003f10:	5cd3      	ldrb	r3, [r2, r3]
 8003f12:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d015      	beq.n	8003f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f1e:	4b3c      	ldr	r3, [pc, #240]	@ (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	0c5b      	lsrs	r3, r3, #17
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	4a3b      	ldr	r2, [pc, #236]	@ (8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003f2a:	5cd3      	ldrb	r3, [r2, r3]
 8003f2c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f38:	4a38      	ldr	r2, [pc, #224]	@ (800401c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	61fb      	str	r3, [r7, #28]
 8003f48:	e004      	b.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4a34      	ldr	r2, [pc, #208]	@ (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f54:	4b2e      	ldr	r3, [pc, #184]	@ (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f60:	d102      	bne.n	8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	61bb      	str	r3, [r7, #24]
      break;
 8003f66:	e04a      	b.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4a2d      	ldr	r2, [pc, #180]	@ (8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	61bb      	str	r3, [r7, #24]
      break;
 8003f76:	e042      	b.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003f78:	4b25      	ldr	r3, [pc, #148]	@ (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f88:	d108      	bne.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003f94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	e01f      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fa6:	d109      	bne.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003fa8:	4b19      	ldr	r3, [pc, #100]	@ (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003fb4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	e00f      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc6:	d11c      	bne.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003fc8:	4b11      	ldr	r3, [pc, #68]	@ (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d016      	beq.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003fd4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003fd8:	61bb      	str	r3, [r7, #24]
      break;
 8003fda:	e012      	b.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003fdc:	e011      	b.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003fde:	f7ff fe85 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	0b9b      	lsrs	r3, r3, #14
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff6:	61bb      	str	r3, [r7, #24]
      break;
 8003ff8:	e004      	b.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e002      	b.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ffe:	bf00      	nop
 8004000:	e000      	b.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004002:	bf00      	nop
    }
  }
  return (frequency);
 8004004:	69bb      	ldr	r3, [r7, #24]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3720      	adds	r7, #32
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000
 8004014:	08006bac 	.word	0x08006bac
 8004018:	08006bbc 	.word	0x08006bbc
 800401c:	007a1200 	.word	0x007a1200
 8004020:	003d0900 	.word	0x003d0900
 8004024:	aaaaaaab 	.word	0xaaaaaaab

08004028 <__cvt>:
 8004028:	2b00      	cmp	r3, #0
 800402a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800402e:	461d      	mov	r5, r3
 8004030:	bfbb      	ittet	lt
 8004032:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004036:	461d      	movlt	r5, r3
 8004038:	2300      	movge	r3, #0
 800403a:	232d      	movlt	r3, #45	@ 0x2d
 800403c:	b088      	sub	sp, #32
 800403e:	4614      	mov	r4, r2
 8004040:	bfb8      	it	lt
 8004042:	4614      	movlt	r4, r2
 8004044:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004046:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004048:	7013      	strb	r3, [r2, #0]
 800404a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800404c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004050:	f023 0820 	bic.w	r8, r3, #32
 8004054:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004058:	d005      	beq.n	8004066 <__cvt+0x3e>
 800405a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800405e:	d100      	bne.n	8004062 <__cvt+0x3a>
 8004060:	3601      	adds	r6, #1
 8004062:	2302      	movs	r3, #2
 8004064:	e000      	b.n	8004068 <__cvt+0x40>
 8004066:	2303      	movs	r3, #3
 8004068:	aa07      	add	r2, sp, #28
 800406a:	9204      	str	r2, [sp, #16]
 800406c:	aa06      	add	r2, sp, #24
 800406e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004072:	e9cd 3600 	strd	r3, r6, [sp]
 8004076:	4622      	mov	r2, r4
 8004078:	462b      	mov	r3, r5
 800407a:	f000 ff51 	bl	8004f20 <_dtoa_r>
 800407e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004082:	4607      	mov	r7, r0
 8004084:	d119      	bne.n	80040ba <__cvt+0x92>
 8004086:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004088:	07db      	lsls	r3, r3, #31
 800408a:	d50e      	bpl.n	80040aa <__cvt+0x82>
 800408c:	eb00 0906 	add.w	r9, r0, r6
 8004090:	2200      	movs	r2, #0
 8004092:	2300      	movs	r3, #0
 8004094:	4620      	mov	r0, r4
 8004096:	4629      	mov	r1, r5
 8004098:	f7fc fc86 	bl	80009a8 <__aeabi_dcmpeq>
 800409c:	b108      	cbz	r0, 80040a2 <__cvt+0x7a>
 800409e:	f8cd 901c 	str.w	r9, [sp, #28]
 80040a2:	2230      	movs	r2, #48	@ 0x30
 80040a4:	9b07      	ldr	r3, [sp, #28]
 80040a6:	454b      	cmp	r3, r9
 80040a8:	d31e      	bcc.n	80040e8 <__cvt+0xc0>
 80040aa:	4638      	mov	r0, r7
 80040ac:	9b07      	ldr	r3, [sp, #28]
 80040ae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80040b0:	1bdb      	subs	r3, r3, r7
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	b008      	add	sp, #32
 80040b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80040be:	eb00 0906 	add.w	r9, r0, r6
 80040c2:	d1e5      	bne.n	8004090 <__cvt+0x68>
 80040c4:	7803      	ldrb	r3, [r0, #0]
 80040c6:	2b30      	cmp	r3, #48	@ 0x30
 80040c8:	d10a      	bne.n	80040e0 <__cvt+0xb8>
 80040ca:	2200      	movs	r2, #0
 80040cc:	2300      	movs	r3, #0
 80040ce:	4620      	mov	r0, r4
 80040d0:	4629      	mov	r1, r5
 80040d2:	f7fc fc69 	bl	80009a8 <__aeabi_dcmpeq>
 80040d6:	b918      	cbnz	r0, 80040e0 <__cvt+0xb8>
 80040d8:	f1c6 0601 	rsb	r6, r6, #1
 80040dc:	f8ca 6000 	str.w	r6, [sl]
 80040e0:	f8da 3000 	ldr.w	r3, [sl]
 80040e4:	4499      	add	r9, r3
 80040e6:	e7d3      	b.n	8004090 <__cvt+0x68>
 80040e8:	1c59      	adds	r1, r3, #1
 80040ea:	9107      	str	r1, [sp, #28]
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e7d9      	b.n	80040a4 <__cvt+0x7c>

080040f0 <__exponent>:
 80040f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040f2:	2900      	cmp	r1, #0
 80040f4:	bfb6      	itet	lt
 80040f6:	232d      	movlt	r3, #45	@ 0x2d
 80040f8:	232b      	movge	r3, #43	@ 0x2b
 80040fa:	4249      	neglt	r1, r1
 80040fc:	2909      	cmp	r1, #9
 80040fe:	7002      	strb	r2, [r0, #0]
 8004100:	7043      	strb	r3, [r0, #1]
 8004102:	dd29      	ble.n	8004158 <__exponent+0x68>
 8004104:	f10d 0307 	add.w	r3, sp, #7
 8004108:	461d      	mov	r5, r3
 800410a:	270a      	movs	r7, #10
 800410c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004110:	461a      	mov	r2, r3
 8004112:	fb07 1416 	mls	r4, r7, r6, r1
 8004116:	3430      	adds	r4, #48	@ 0x30
 8004118:	f802 4c01 	strb.w	r4, [r2, #-1]
 800411c:	460c      	mov	r4, r1
 800411e:	2c63      	cmp	r4, #99	@ 0x63
 8004120:	4631      	mov	r1, r6
 8004122:	f103 33ff 	add.w	r3, r3, #4294967295
 8004126:	dcf1      	bgt.n	800410c <__exponent+0x1c>
 8004128:	3130      	adds	r1, #48	@ 0x30
 800412a:	1e94      	subs	r4, r2, #2
 800412c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004130:	4623      	mov	r3, r4
 8004132:	1c41      	adds	r1, r0, #1
 8004134:	42ab      	cmp	r3, r5
 8004136:	d30a      	bcc.n	800414e <__exponent+0x5e>
 8004138:	f10d 0309 	add.w	r3, sp, #9
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	42ac      	cmp	r4, r5
 8004140:	bf88      	it	hi
 8004142:	2300      	movhi	r3, #0
 8004144:	3302      	adds	r3, #2
 8004146:	4403      	add	r3, r0
 8004148:	1a18      	subs	r0, r3, r0
 800414a:	b003      	add	sp, #12
 800414c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800414e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004152:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004156:	e7ed      	b.n	8004134 <__exponent+0x44>
 8004158:	2330      	movs	r3, #48	@ 0x30
 800415a:	3130      	adds	r1, #48	@ 0x30
 800415c:	7083      	strb	r3, [r0, #2]
 800415e:	70c1      	strb	r1, [r0, #3]
 8004160:	1d03      	adds	r3, r0, #4
 8004162:	e7f1      	b.n	8004148 <__exponent+0x58>

08004164 <_printf_float>:
 8004164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004168:	b091      	sub	sp, #68	@ 0x44
 800416a:	460c      	mov	r4, r1
 800416c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004170:	4616      	mov	r6, r2
 8004172:	461f      	mov	r7, r3
 8004174:	4605      	mov	r5, r0
 8004176:	f000 fdc5 	bl	8004d04 <_localeconv_r>
 800417a:	6803      	ldr	r3, [r0, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	9308      	str	r3, [sp, #32]
 8004180:	f7fb ffe6 	bl	8000150 <strlen>
 8004184:	2300      	movs	r3, #0
 8004186:	930e      	str	r3, [sp, #56]	@ 0x38
 8004188:	f8d8 3000 	ldr.w	r3, [r8]
 800418c:	9009      	str	r0, [sp, #36]	@ 0x24
 800418e:	3307      	adds	r3, #7
 8004190:	f023 0307 	bic.w	r3, r3, #7
 8004194:	f103 0208 	add.w	r2, r3, #8
 8004198:	f894 a018 	ldrb.w	sl, [r4, #24]
 800419c:	f8d4 b000 	ldr.w	fp, [r4]
 80041a0:	f8c8 2000 	str.w	r2, [r8]
 80041a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80041a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80041ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041ae:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80041b2:	f04f 32ff 	mov.w	r2, #4294967295
 80041b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80041ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80041be:	4b9c      	ldr	r3, [pc, #624]	@ (8004430 <_printf_float+0x2cc>)
 80041c0:	f7fc fc24 	bl	8000a0c <__aeabi_dcmpun>
 80041c4:	bb70      	cbnz	r0, 8004224 <_printf_float+0xc0>
 80041c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80041ca:	f04f 32ff 	mov.w	r2, #4294967295
 80041ce:	4b98      	ldr	r3, [pc, #608]	@ (8004430 <_printf_float+0x2cc>)
 80041d0:	f7fc fbfe 	bl	80009d0 <__aeabi_dcmple>
 80041d4:	bb30      	cbnz	r0, 8004224 <_printf_float+0xc0>
 80041d6:	2200      	movs	r2, #0
 80041d8:	2300      	movs	r3, #0
 80041da:	4640      	mov	r0, r8
 80041dc:	4649      	mov	r1, r9
 80041de:	f7fc fbed 	bl	80009bc <__aeabi_dcmplt>
 80041e2:	b110      	cbz	r0, 80041ea <_printf_float+0x86>
 80041e4:	232d      	movs	r3, #45	@ 0x2d
 80041e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041ea:	4a92      	ldr	r2, [pc, #584]	@ (8004434 <_printf_float+0x2d0>)
 80041ec:	4b92      	ldr	r3, [pc, #584]	@ (8004438 <_printf_float+0x2d4>)
 80041ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041f2:	bf94      	ite	ls
 80041f4:	4690      	movls	r8, r2
 80041f6:	4698      	movhi	r8, r3
 80041f8:	2303      	movs	r3, #3
 80041fa:	f04f 0900 	mov.w	r9, #0
 80041fe:	6123      	str	r3, [r4, #16]
 8004200:	f02b 0304 	bic.w	r3, fp, #4
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	4633      	mov	r3, r6
 8004208:	4621      	mov	r1, r4
 800420a:	4628      	mov	r0, r5
 800420c:	9700      	str	r7, [sp, #0]
 800420e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004210:	f000 f9d4 	bl	80045bc <_printf_common>
 8004214:	3001      	adds	r0, #1
 8004216:	f040 8090 	bne.w	800433a <_printf_float+0x1d6>
 800421a:	f04f 30ff 	mov.w	r0, #4294967295
 800421e:	b011      	add	sp, #68	@ 0x44
 8004220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004224:	4642      	mov	r2, r8
 8004226:	464b      	mov	r3, r9
 8004228:	4640      	mov	r0, r8
 800422a:	4649      	mov	r1, r9
 800422c:	f7fc fbee 	bl	8000a0c <__aeabi_dcmpun>
 8004230:	b148      	cbz	r0, 8004246 <_printf_float+0xe2>
 8004232:	464b      	mov	r3, r9
 8004234:	2b00      	cmp	r3, #0
 8004236:	bfb8      	it	lt
 8004238:	232d      	movlt	r3, #45	@ 0x2d
 800423a:	4a80      	ldr	r2, [pc, #512]	@ (800443c <_printf_float+0x2d8>)
 800423c:	bfb8      	it	lt
 800423e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004242:	4b7f      	ldr	r3, [pc, #508]	@ (8004440 <_printf_float+0x2dc>)
 8004244:	e7d3      	b.n	80041ee <_printf_float+0x8a>
 8004246:	6863      	ldr	r3, [r4, #4]
 8004248:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	d13f      	bne.n	80042d0 <_printf_float+0x16c>
 8004250:	2306      	movs	r3, #6
 8004252:	6063      	str	r3, [r4, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800425a:	6023      	str	r3, [r4, #0]
 800425c:	9206      	str	r2, [sp, #24]
 800425e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004260:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004264:	aa0d      	add	r2, sp, #52	@ 0x34
 8004266:	9203      	str	r2, [sp, #12]
 8004268:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800426c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004270:	6863      	ldr	r3, [r4, #4]
 8004272:	4642      	mov	r2, r8
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	4628      	mov	r0, r5
 8004278:	464b      	mov	r3, r9
 800427a:	910a      	str	r1, [sp, #40]	@ 0x28
 800427c:	f7ff fed4 	bl	8004028 <__cvt>
 8004280:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004282:	4680      	mov	r8, r0
 8004284:	2947      	cmp	r1, #71	@ 0x47
 8004286:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004288:	d128      	bne.n	80042dc <_printf_float+0x178>
 800428a:	1cc8      	adds	r0, r1, #3
 800428c:	db02      	blt.n	8004294 <_printf_float+0x130>
 800428e:	6863      	ldr	r3, [r4, #4]
 8004290:	4299      	cmp	r1, r3
 8004292:	dd40      	ble.n	8004316 <_printf_float+0x1b2>
 8004294:	f1aa 0a02 	sub.w	sl, sl, #2
 8004298:	fa5f fa8a 	uxtb.w	sl, sl
 800429c:	4652      	mov	r2, sl
 800429e:	3901      	subs	r1, #1
 80042a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80042a4:	910d      	str	r1, [sp, #52]	@ 0x34
 80042a6:	f7ff ff23 	bl	80040f0 <__exponent>
 80042aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80042ac:	4681      	mov	r9, r0
 80042ae:	1813      	adds	r3, r2, r0
 80042b0:	2a01      	cmp	r2, #1
 80042b2:	6123      	str	r3, [r4, #16]
 80042b4:	dc02      	bgt.n	80042bc <_printf_float+0x158>
 80042b6:	6822      	ldr	r2, [r4, #0]
 80042b8:	07d2      	lsls	r2, r2, #31
 80042ba:	d501      	bpl.n	80042c0 <_printf_float+0x15c>
 80042bc:	3301      	adds	r3, #1
 80042be:	6123      	str	r3, [r4, #16]
 80042c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d09e      	beq.n	8004206 <_printf_float+0xa2>
 80042c8:	232d      	movs	r3, #45	@ 0x2d
 80042ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042ce:	e79a      	b.n	8004206 <_printf_float+0xa2>
 80042d0:	2947      	cmp	r1, #71	@ 0x47
 80042d2:	d1bf      	bne.n	8004254 <_printf_float+0xf0>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1bd      	bne.n	8004254 <_printf_float+0xf0>
 80042d8:	2301      	movs	r3, #1
 80042da:	e7ba      	b.n	8004252 <_printf_float+0xee>
 80042dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80042e0:	d9dc      	bls.n	800429c <_printf_float+0x138>
 80042e2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80042e6:	d118      	bne.n	800431a <_printf_float+0x1b6>
 80042e8:	2900      	cmp	r1, #0
 80042ea:	6863      	ldr	r3, [r4, #4]
 80042ec:	dd0b      	ble.n	8004306 <_printf_float+0x1a2>
 80042ee:	6121      	str	r1, [r4, #16]
 80042f0:	b913      	cbnz	r3, 80042f8 <_printf_float+0x194>
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	07d0      	lsls	r0, r2, #31
 80042f6:	d502      	bpl.n	80042fe <_printf_float+0x19a>
 80042f8:	3301      	adds	r3, #1
 80042fa:	440b      	add	r3, r1
 80042fc:	6123      	str	r3, [r4, #16]
 80042fe:	f04f 0900 	mov.w	r9, #0
 8004302:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004304:	e7dc      	b.n	80042c0 <_printf_float+0x15c>
 8004306:	b913      	cbnz	r3, 800430e <_printf_float+0x1aa>
 8004308:	6822      	ldr	r2, [r4, #0]
 800430a:	07d2      	lsls	r2, r2, #31
 800430c:	d501      	bpl.n	8004312 <_printf_float+0x1ae>
 800430e:	3302      	adds	r3, #2
 8004310:	e7f4      	b.n	80042fc <_printf_float+0x198>
 8004312:	2301      	movs	r3, #1
 8004314:	e7f2      	b.n	80042fc <_printf_float+0x198>
 8004316:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800431a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800431c:	4299      	cmp	r1, r3
 800431e:	db05      	blt.n	800432c <_printf_float+0x1c8>
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	6121      	str	r1, [r4, #16]
 8004324:	07d8      	lsls	r0, r3, #31
 8004326:	d5ea      	bpl.n	80042fe <_printf_float+0x19a>
 8004328:	1c4b      	adds	r3, r1, #1
 800432a:	e7e7      	b.n	80042fc <_printf_float+0x198>
 800432c:	2900      	cmp	r1, #0
 800432e:	bfcc      	ite	gt
 8004330:	2201      	movgt	r2, #1
 8004332:	f1c1 0202 	rsble	r2, r1, #2
 8004336:	4413      	add	r3, r2
 8004338:	e7e0      	b.n	80042fc <_printf_float+0x198>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	055a      	lsls	r2, r3, #21
 800433e:	d407      	bmi.n	8004350 <_printf_float+0x1ec>
 8004340:	6923      	ldr	r3, [r4, #16]
 8004342:	4642      	mov	r2, r8
 8004344:	4631      	mov	r1, r6
 8004346:	4628      	mov	r0, r5
 8004348:	47b8      	blx	r7
 800434a:	3001      	adds	r0, #1
 800434c:	d12b      	bne.n	80043a6 <_printf_float+0x242>
 800434e:	e764      	b.n	800421a <_printf_float+0xb6>
 8004350:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004354:	f240 80dc 	bls.w	8004510 <_printf_float+0x3ac>
 8004358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800435c:	2200      	movs	r2, #0
 800435e:	2300      	movs	r3, #0
 8004360:	f7fc fb22 	bl	80009a8 <__aeabi_dcmpeq>
 8004364:	2800      	cmp	r0, #0
 8004366:	d033      	beq.n	80043d0 <_printf_float+0x26c>
 8004368:	2301      	movs	r3, #1
 800436a:	4631      	mov	r1, r6
 800436c:	4628      	mov	r0, r5
 800436e:	4a35      	ldr	r2, [pc, #212]	@ (8004444 <_printf_float+0x2e0>)
 8004370:	47b8      	blx	r7
 8004372:	3001      	adds	r0, #1
 8004374:	f43f af51 	beq.w	800421a <_printf_float+0xb6>
 8004378:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800437c:	4543      	cmp	r3, r8
 800437e:	db02      	blt.n	8004386 <_printf_float+0x222>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	07d8      	lsls	r0, r3, #31
 8004384:	d50f      	bpl.n	80043a6 <_printf_float+0x242>
 8004386:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800438a:	4631      	mov	r1, r6
 800438c:	4628      	mov	r0, r5
 800438e:	47b8      	blx	r7
 8004390:	3001      	adds	r0, #1
 8004392:	f43f af42 	beq.w	800421a <_printf_float+0xb6>
 8004396:	f04f 0900 	mov.w	r9, #0
 800439a:	f108 38ff 	add.w	r8, r8, #4294967295
 800439e:	f104 0a1a 	add.w	sl, r4, #26
 80043a2:	45c8      	cmp	r8, r9
 80043a4:	dc09      	bgt.n	80043ba <_printf_float+0x256>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	079b      	lsls	r3, r3, #30
 80043aa:	f100 8102 	bmi.w	80045b2 <_printf_float+0x44e>
 80043ae:	68e0      	ldr	r0, [r4, #12]
 80043b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80043b2:	4298      	cmp	r0, r3
 80043b4:	bfb8      	it	lt
 80043b6:	4618      	movlt	r0, r3
 80043b8:	e731      	b.n	800421e <_printf_float+0xba>
 80043ba:	2301      	movs	r3, #1
 80043bc:	4652      	mov	r2, sl
 80043be:	4631      	mov	r1, r6
 80043c0:	4628      	mov	r0, r5
 80043c2:	47b8      	blx	r7
 80043c4:	3001      	adds	r0, #1
 80043c6:	f43f af28 	beq.w	800421a <_printf_float+0xb6>
 80043ca:	f109 0901 	add.w	r9, r9, #1
 80043ce:	e7e8      	b.n	80043a2 <_printf_float+0x23e>
 80043d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	dc38      	bgt.n	8004448 <_printf_float+0x2e4>
 80043d6:	2301      	movs	r3, #1
 80043d8:	4631      	mov	r1, r6
 80043da:	4628      	mov	r0, r5
 80043dc:	4a19      	ldr	r2, [pc, #100]	@ (8004444 <_printf_float+0x2e0>)
 80043de:	47b8      	blx	r7
 80043e0:	3001      	adds	r0, #1
 80043e2:	f43f af1a 	beq.w	800421a <_printf_float+0xb6>
 80043e6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80043ea:	ea59 0303 	orrs.w	r3, r9, r3
 80043ee:	d102      	bne.n	80043f6 <_printf_float+0x292>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	07d9      	lsls	r1, r3, #31
 80043f4:	d5d7      	bpl.n	80043a6 <_printf_float+0x242>
 80043f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043fa:	4631      	mov	r1, r6
 80043fc:	4628      	mov	r0, r5
 80043fe:	47b8      	blx	r7
 8004400:	3001      	adds	r0, #1
 8004402:	f43f af0a 	beq.w	800421a <_printf_float+0xb6>
 8004406:	f04f 0a00 	mov.w	sl, #0
 800440a:	f104 0b1a 	add.w	fp, r4, #26
 800440e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004410:	425b      	negs	r3, r3
 8004412:	4553      	cmp	r3, sl
 8004414:	dc01      	bgt.n	800441a <_printf_float+0x2b6>
 8004416:	464b      	mov	r3, r9
 8004418:	e793      	b.n	8004342 <_printf_float+0x1de>
 800441a:	2301      	movs	r3, #1
 800441c:	465a      	mov	r2, fp
 800441e:	4631      	mov	r1, r6
 8004420:	4628      	mov	r0, r5
 8004422:	47b8      	blx	r7
 8004424:	3001      	adds	r0, #1
 8004426:	f43f aef8 	beq.w	800421a <_printf_float+0xb6>
 800442a:	f10a 0a01 	add.w	sl, sl, #1
 800442e:	e7ee      	b.n	800440e <_printf_float+0x2aa>
 8004430:	7fefffff 	.word	0x7fefffff
 8004434:	08006bbe 	.word	0x08006bbe
 8004438:	08006bc2 	.word	0x08006bc2
 800443c:	08006bc6 	.word	0x08006bc6
 8004440:	08006bca 	.word	0x08006bca
 8004444:	08006bce 	.word	0x08006bce
 8004448:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800444a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800444e:	4553      	cmp	r3, sl
 8004450:	bfa8      	it	ge
 8004452:	4653      	movge	r3, sl
 8004454:	2b00      	cmp	r3, #0
 8004456:	4699      	mov	r9, r3
 8004458:	dc36      	bgt.n	80044c8 <_printf_float+0x364>
 800445a:	f04f 0b00 	mov.w	fp, #0
 800445e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004462:	f104 021a 	add.w	r2, r4, #26
 8004466:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004468:	930a      	str	r3, [sp, #40]	@ 0x28
 800446a:	eba3 0309 	sub.w	r3, r3, r9
 800446e:	455b      	cmp	r3, fp
 8004470:	dc31      	bgt.n	80044d6 <_printf_float+0x372>
 8004472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004474:	459a      	cmp	sl, r3
 8004476:	dc3a      	bgt.n	80044ee <_printf_float+0x38a>
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	07da      	lsls	r2, r3, #31
 800447c:	d437      	bmi.n	80044ee <_printf_float+0x38a>
 800447e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004480:	ebaa 0903 	sub.w	r9, sl, r3
 8004484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004486:	ebaa 0303 	sub.w	r3, sl, r3
 800448a:	4599      	cmp	r9, r3
 800448c:	bfa8      	it	ge
 800448e:	4699      	movge	r9, r3
 8004490:	f1b9 0f00 	cmp.w	r9, #0
 8004494:	dc33      	bgt.n	80044fe <_printf_float+0x39a>
 8004496:	f04f 0800 	mov.w	r8, #0
 800449a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800449e:	f104 0b1a 	add.w	fp, r4, #26
 80044a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044a4:	ebaa 0303 	sub.w	r3, sl, r3
 80044a8:	eba3 0309 	sub.w	r3, r3, r9
 80044ac:	4543      	cmp	r3, r8
 80044ae:	f77f af7a 	ble.w	80043a6 <_printf_float+0x242>
 80044b2:	2301      	movs	r3, #1
 80044b4:	465a      	mov	r2, fp
 80044b6:	4631      	mov	r1, r6
 80044b8:	4628      	mov	r0, r5
 80044ba:	47b8      	blx	r7
 80044bc:	3001      	adds	r0, #1
 80044be:	f43f aeac 	beq.w	800421a <_printf_float+0xb6>
 80044c2:	f108 0801 	add.w	r8, r8, #1
 80044c6:	e7ec      	b.n	80044a2 <_printf_float+0x33e>
 80044c8:	4642      	mov	r2, r8
 80044ca:	4631      	mov	r1, r6
 80044cc:	4628      	mov	r0, r5
 80044ce:	47b8      	blx	r7
 80044d0:	3001      	adds	r0, #1
 80044d2:	d1c2      	bne.n	800445a <_printf_float+0x2f6>
 80044d4:	e6a1      	b.n	800421a <_printf_float+0xb6>
 80044d6:	2301      	movs	r3, #1
 80044d8:	4631      	mov	r1, r6
 80044da:	4628      	mov	r0, r5
 80044dc:	920a      	str	r2, [sp, #40]	@ 0x28
 80044de:	47b8      	blx	r7
 80044e0:	3001      	adds	r0, #1
 80044e2:	f43f ae9a 	beq.w	800421a <_printf_float+0xb6>
 80044e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044e8:	f10b 0b01 	add.w	fp, fp, #1
 80044ec:	e7bb      	b.n	8004466 <_printf_float+0x302>
 80044ee:	4631      	mov	r1, r6
 80044f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044f4:	4628      	mov	r0, r5
 80044f6:	47b8      	blx	r7
 80044f8:	3001      	adds	r0, #1
 80044fa:	d1c0      	bne.n	800447e <_printf_float+0x31a>
 80044fc:	e68d      	b.n	800421a <_printf_float+0xb6>
 80044fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004500:	464b      	mov	r3, r9
 8004502:	4631      	mov	r1, r6
 8004504:	4628      	mov	r0, r5
 8004506:	4442      	add	r2, r8
 8004508:	47b8      	blx	r7
 800450a:	3001      	adds	r0, #1
 800450c:	d1c3      	bne.n	8004496 <_printf_float+0x332>
 800450e:	e684      	b.n	800421a <_printf_float+0xb6>
 8004510:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004514:	f1ba 0f01 	cmp.w	sl, #1
 8004518:	dc01      	bgt.n	800451e <_printf_float+0x3ba>
 800451a:	07db      	lsls	r3, r3, #31
 800451c:	d536      	bpl.n	800458c <_printf_float+0x428>
 800451e:	2301      	movs	r3, #1
 8004520:	4642      	mov	r2, r8
 8004522:	4631      	mov	r1, r6
 8004524:	4628      	mov	r0, r5
 8004526:	47b8      	blx	r7
 8004528:	3001      	adds	r0, #1
 800452a:	f43f ae76 	beq.w	800421a <_printf_float+0xb6>
 800452e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004532:	4631      	mov	r1, r6
 8004534:	4628      	mov	r0, r5
 8004536:	47b8      	blx	r7
 8004538:	3001      	adds	r0, #1
 800453a:	f43f ae6e 	beq.w	800421a <_printf_float+0xb6>
 800453e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004542:	2200      	movs	r2, #0
 8004544:	2300      	movs	r3, #0
 8004546:	f10a 3aff 	add.w	sl, sl, #4294967295
 800454a:	f7fc fa2d 	bl	80009a8 <__aeabi_dcmpeq>
 800454e:	b9c0      	cbnz	r0, 8004582 <_printf_float+0x41e>
 8004550:	4653      	mov	r3, sl
 8004552:	f108 0201 	add.w	r2, r8, #1
 8004556:	4631      	mov	r1, r6
 8004558:	4628      	mov	r0, r5
 800455a:	47b8      	blx	r7
 800455c:	3001      	adds	r0, #1
 800455e:	d10c      	bne.n	800457a <_printf_float+0x416>
 8004560:	e65b      	b.n	800421a <_printf_float+0xb6>
 8004562:	2301      	movs	r3, #1
 8004564:	465a      	mov	r2, fp
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	47b8      	blx	r7
 800456c:	3001      	adds	r0, #1
 800456e:	f43f ae54 	beq.w	800421a <_printf_float+0xb6>
 8004572:	f108 0801 	add.w	r8, r8, #1
 8004576:	45d0      	cmp	r8, sl
 8004578:	dbf3      	blt.n	8004562 <_printf_float+0x3fe>
 800457a:	464b      	mov	r3, r9
 800457c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004580:	e6e0      	b.n	8004344 <_printf_float+0x1e0>
 8004582:	f04f 0800 	mov.w	r8, #0
 8004586:	f104 0b1a 	add.w	fp, r4, #26
 800458a:	e7f4      	b.n	8004576 <_printf_float+0x412>
 800458c:	2301      	movs	r3, #1
 800458e:	4642      	mov	r2, r8
 8004590:	e7e1      	b.n	8004556 <_printf_float+0x3f2>
 8004592:	2301      	movs	r3, #1
 8004594:	464a      	mov	r2, r9
 8004596:	4631      	mov	r1, r6
 8004598:	4628      	mov	r0, r5
 800459a:	47b8      	blx	r7
 800459c:	3001      	adds	r0, #1
 800459e:	f43f ae3c 	beq.w	800421a <_printf_float+0xb6>
 80045a2:	f108 0801 	add.w	r8, r8, #1
 80045a6:	68e3      	ldr	r3, [r4, #12]
 80045a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80045aa:	1a5b      	subs	r3, r3, r1
 80045ac:	4543      	cmp	r3, r8
 80045ae:	dcf0      	bgt.n	8004592 <_printf_float+0x42e>
 80045b0:	e6fd      	b.n	80043ae <_printf_float+0x24a>
 80045b2:	f04f 0800 	mov.w	r8, #0
 80045b6:	f104 0919 	add.w	r9, r4, #25
 80045ba:	e7f4      	b.n	80045a6 <_printf_float+0x442>

080045bc <_printf_common>:
 80045bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c0:	4616      	mov	r6, r2
 80045c2:	4698      	mov	r8, r3
 80045c4:	688a      	ldr	r2, [r1, #8]
 80045c6:	690b      	ldr	r3, [r1, #16]
 80045c8:	4607      	mov	r7, r0
 80045ca:	4293      	cmp	r3, r2
 80045cc:	bfb8      	it	lt
 80045ce:	4613      	movlt	r3, r2
 80045d0:	6033      	str	r3, [r6, #0]
 80045d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045d6:	460c      	mov	r4, r1
 80045d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045dc:	b10a      	cbz	r2, 80045e2 <_printf_common+0x26>
 80045de:	3301      	adds	r3, #1
 80045e0:	6033      	str	r3, [r6, #0]
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	0699      	lsls	r1, r3, #26
 80045e6:	bf42      	ittt	mi
 80045e8:	6833      	ldrmi	r3, [r6, #0]
 80045ea:	3302      	addmi	r3, #2
 80045ec:	6033      	strmi	r3, [r6, #0]
 80045ee:	6825      	ldr	r5, [r4, #0]
 80045f0:	f015 0506 	ands.w	r5, r5, #6
 80045f4:	d106      	bne.n	8004604 <_printf_common+0x48>
 80045f6:	f104 0a19 	add.w	sl, r4, #25
 80045fa:	68e3      	ldr	r3, [r4, #12]
 80045fc:	6832      	ldr	r2, [r6, #0]
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	42ab      	cmp	r3, r5
 8004602:	dc2b      	bgt.n	800465c <_printf_common+0xa0>
 8004604:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004608:	6822      	ldr	r2, [r4, #0]
 800460a:	3b00      	subs	r3, #0
 800460c:	bf18      	it	ne
 800460e:	2301      	movne	r3, #1
 8004610:	0692      	lsls	r2, r2, #26
 8004612:	d430      	bmi.n	8004676 <_printf_common+0xba>
 8004614:	4641      	mov	r1, r8
 8004616:	4638      	mov	r0, r7
 8004618:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800461c:	47c8      	blx	r9
 800461e:	3001      	adds	r0, #1
 8004620:	d023      	beq.n	800466a <_printf_common+0xae>
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	6922      	ldr	r2, [r4, #16]
 8004626:	f003 0306 	and.w	r3, r3, #6
 800462a:	2b04      	cmp	r3, #4
 800462c:	bf14      	ite	ne
 800462e:	2500      	movne	r5, #0
 8004630:	6833      	ldreq	r3, [r6, #0]
 8004632:	f04f 0600 	mov.w	r6, #0
 8004636:	bf08      	it	eq
 8004638:	68e5      	ldreq	r5, [r4, #12]
 800463a:	f104 041a 	add.w	r4, r4, #26
 800463e:	bf08      	it	eq
 8004640:	1aed      	subeq	r5, r5, r3
 8004642:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004646:	bf08      	it	eq
 8004648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800464c:	4293      	cmp	r3, r2
 800464e:	bfc4      	itt	gt
 8004650:	1a9b      	subgt	r3, r3, r2
 8004652:	18ed      	addgt	r5, r5, r3
 8004654:	42b5      	cmp	r5, r6
 8004656:	d11a      	bne.n	800468e <_printf_common+0xd2>
 8004658:	2000      	movs	r0, #0
 800465a:	e008      	b.n	800466e <_printf_common+0xb2>
 800465c:	2301      	movs	r3, #1
 800465e:	4652      	mov	r2, sl
 8004660:	4641      	mov	r1, r8
 8004662:	4638      	mov	r0, r7
 8004664:	47c8      	blx	r9
 8004666:	3001      	adds	r0, #1
 8004668:	d103      	bne.n	8004672 <_printf_common+0xb6>
 800466a:	f04f 30ff 	mov.w	r0, #4294967295
 800466e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004672:	3501      	adds	r5, #1
 8004674:	e7c1      	b.n	80045fa <_printf_common+0x3e>
 8004676:	2030      	movs	r0, #48	@ 0x30
 8004678:	18e1      	adds	r1, r4, r3
 800467a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004684:	4422      	add	r2, r4
 8004686:	3302      	adds	r3, #2
 8004688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800468c:	e7c2      	b.n	8004614 <_printf_common+0x58>
 800468e:	2301      	movs	r3, #1
 8004690:	4622      	mov	r2, r4
 8004692:	4641      	mov	r1, r8
 8004694:	4638      	mov	r0, r7
 8004696:	47c8      	blx	r9
 8004698:	3001      	adds	r0, #1
 800469a:	d0e6      	beq.n	800466a <_printf_common+0xae>
 800469c:	3601      	adds	r6, #1
 800469e:	e7d9      	b.n	8004654 <_printf_common+0x98>

080046a0 <_printf_i>:
 80046a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	7e0f      	ldrb	r7, [r1, #24]
 80046a6:	4691      	mov	r9, r2
 80046a8:	2f78      	cmp	r7, #120	@ 0x78
 80046aa:	4680      	mov	r8, r0
 80046ac:	460c      	mov	r4, r1
 80046ae:	469a      	mov	sl, r3
 80046b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046b6:	d807      	bhi.n	80046c8 <_printf_i+0x28>
 80046b8:	2f62      	cmp	r7, #98	@ 0x62
 80046ba:	d80a      	bhi.n	80046d2 <_printf_i+0x32>
 80046bc:	2f00      	cmp	r7, #0
 80046be:	f000 80d3 	beq.w	8004868 <_printf_i+0x1c8>
 80046c2:	2f58      	cmp	r7, #88	@ 0x58
 80046c4:	f000 80ba 	beq.w	800483c <_printf_i+0x19c>
 80046c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046d0:	e03a      	b.n	8004748 <_printf_i+0xa8>
 80046d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046d6:	2b15      	cmp	r3, #21
 80046d8:	d8f6      	bhi.n	80046c8 <_printf_i+0x28>
 80046da:	a101      	add	r1, pc, #4	@ (adr r1, 80046e0 <_printf_i+0x40>)
 80046dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046e0:	08004739 	.word	0x08004739
 80046e4:	0800474d 	.word	0x0800474d
 80046e8:	080046c9 	.word	0x080046c9
 80046ec:	080046c9 	.word	0x080046c9
 80046f0:	080046c9 	.word	0x080046c9
 80046f4:	080046c9 	.word	0x080046c9
 80046f8:	0800474d 	.word	0x0800474d
 80046fc:	080046c9 	.word	0x080046c9
 8004700:	080046c9 	.word	0x080046c9
 8004704:	080046c9 	.word	0x080046c9
 8004708:	080046c9 	.word	0x080046c9
 800470c:	0800484f 	.word	0x0800484f
 8004710:	08004777 	.word	0x08004777
 8004714:	08004809 	.word	0x08004809
 8004718:	080046c9 	.word	0x080046c9
 800471c:	080046c9 	.word	0x080046c9
 8004720:	08004871 	.word	0x08004871
 8004724:	080046c9 	.word	0x080046c9
 8004728:	08004777 	.word	0x08004777
 800472c:	080046c9 	.word	0x080046c9
 8004730:	080046c9 	.word	0x080046c9
 8004734:	08004811 	.word	0x08004811
 8004738:	6833      	ldr	r3, [r6, #0]
 800473a:	1d1a      	adds	r2, r3, #4
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6032      	str	r2, [r6, #0]
 8004740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004744:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004748:	2301      	movs	r3, #1
 800474a:	e09e      	b.n	800488a <_printf_i+0x1ea>
 800474c:	6833      	ldr	r3, [r6, #0]
 800474e:	6820      	ldr	r0, [r4, #0]
 8004750:	1d19      	adds	r1, r3, #4
 8004752:	6031      	str	r1, [r6, #0]
 8004754:	0606      	lsls	r6, r0, #24
 8004756:	d501      	bpl.n	800475c <_printf_i+0xbc>
 8004758:	681d      	ldr	r5, [r3, #0]
 800475a:	e003      	b.n	8004764 <_printf_i+0xc4>
 800475c:	0645      	lsls	r5, r0, #25
 800475e:	d5fb      	bpl.n	8004758 <_printf_i+0xb8>
 8004760:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004764:	2d00      	cmp	r5, #0
 8004766:	da03      	bge.n	8004770 <_printf_i+0xd0>
 8004768:	232d      	movs	r3, #45	@ 0x2d
 800476a:	426d      	negs	r5, r5
 800476c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004770:	230a      	movs	r3, #10
 8004772:	4859      	ldr	r0, [pc, #356]	@ (80048d8 <_printf_i+0x238>)
 8004774:	e011      	b.n	800479a <_printf_i+0xfa>
 8004776:	6821      	ldr	r1, [r4, #0]
 8004778:	6833      	ldr	r3, [r6, #0]
 800477a:	0608      	lsls	r0, r1, #24
 800477c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004780:	d402      	bmi.n	8004788 <_printf_i+0xe8>
 8004782:	0649      	lsls	r1, r1, #25
 8004784:	bf48      	it	mi
 8004786:	b2ad      	uxthmi	r5, r5
 8004788:	2f6f      	cmp	r7, #111	@ 0x6f
 800478a:	6033      	str	r3, [r6, #0]
 800478c:	bf14      	ite	ne
 800478e:	230a      	movne	r3, #10
 8004790:	2308      	moveq	r3, #8
 8004792:	4851      	ldr	r0, [pc, #324]	@ (80048d8 <_printf_i+0x238>)
 8004794:	2100      	movs	r1, #0
 8004796:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800479a:	6866      	ldr	r6, [r4, #4]
 800479c:	2e00      	cmp	r6, #0
 800479e:	bfa8      	it	ge
 80047a0:	6821      	ldrge	r1, [r4, #0]
 80047a2:	60a6      	str	r6, [r4, #8]
 80047a4:	bfa4      	itt	ge
 80047a6:	f021 0104 	bicge.w	r1, r1, #4
 80047aa:	6021      	strge	r1, [r4, #0]
 80047ac:	b90d      	cbnz	r5, 80047b2 <_printf_i+0x112>
 80047ae:	2e00      	cmp	r6, #0
 80047b0:	d04b      	beq.n	800484a <_printf_i+0x1aa>
 80047b2:	4616      	mov	r6, r2
 80047b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80047b8:	fb03 5711 	mls	r7, r3, r1, r5
 80047bc:	5dc7      	ldrb	r7, [r0, r7]
 80047be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047c2:	462f      	mov	r7, r5
 80047c4:	42bb      	cmp	r3, r7
 80047c6:	460d      	mov	r5, r1
 80047c8:	d9f4      	bls.n	80047b4 <_printf_i+0x114>
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d10b      	bne.n	80047e6 <_printf_i+0x146>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	07df      	lsls	r7, r3, #31
 80047d2:	d508      	bpl.n	80047e6 <_printf_i+0x146>
 80047d4:	6923      	ldr	r3, [r4, #16]
 80047d6:	6861      	ldr	r1, [r4, #4]
 80047d8:	4299      	cmp	r1, r3
 80047da:	bfde      	ittt	le
 80047dc:	2330      	movle	r3, #48	@ 0x30
 80047de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047e6:	1b92      	subs	r2, r2, r6
 80047e8:	6122      	str	r2, [r4, #16]
 80047ea:	464b      	mov	r3, r9
 80047ec:	4621      	mov	r1, r4
 80047ee:	4640      	mov	r0, r8
 80047f0:	f8cd a000 	str.w	sl, [sp]
 80047f4:	aa03      	add	r2, sp, #12
 80047f6:	f7ff fee1 	bl	80045bc <_printf_common>
 80047fa:	3001      	adds	r0, #1
 80047fc:	d14a      	bne.n	8004894 <_printf_i+0x1f4>
 80047fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004802:	b004      	add	sp, #16
 8004804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	f043 0320 	orr.w	r3, r3, #32
 800480e:	6023      	str	r3, [r4, #0]
 8004810:	2778      	movs	r7, #120	@ 0x78
 8004812:	4832      	ldr	r0, [pc, #200]	@ (80048dc <_printf_i+0x23c>)
 8004814:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	6831      	ldr	r1, [r6, #0]
 800481c:	061f      	lsls	r7, r3, #24
 800481e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004822:	d402      	bmi.n	800482a <_printf_i+0x18a>
 8004824:	065f      	lsls	r7, r3, #25
 8004826:	bf48      	it	mi
 8004828:	b2ad      	uxthmi	r5, r5
 800482a:	6031      	str	r1, [r6, #0]
 800482c:	07d9      	lsls	r1, r3, #31
 800482e:	bf44      	itt	mi
 8004830:	f043 0320 	orrmi.w	r3, r3, #32
 8004834:	6023      	strmi	r3, [r4, #0]
 8004836:	b11d      	cbz	r5, 8004840 <_printf_i+0x1a0>
 8004838:	2310      	movs	r3, #16
 800483a:	e7ab      	b.n	8004794 <_printf_i+0xf4>
 800483c:	4826      	ldr	r0, [pc, #152]	@ (80048d8 <_printf_i+0x238>)
 800483e:	e7e9      	b.n	8004814 <_printf_i+0x174>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	f023 0320 	bic.w	r3, r3, #32
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	e7f6      	b.n	8004838 <_printf_i+0x198>
 800484a:	4616      	mov	r6, r2
 800484c:	e7bd      	b.n	80047ca <_printf_i+0x12a>
 800484e:	6833      	ldr	r3, [r6, #0]
 8004850:	6825      	ldr	r5, [r4, #0]
 8004852:	1d18      	adds	r0, r3, #4
 8004854:	6961      	ldr	r1, [r4, #20]
 8004856:	6030      	str	r0, [r6, #0]
 8004858:	062e      	lsls	r6, r5, #24
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	d501      	bpl.n	8004862 <_printf_i+0x1c2>
 800485e:	6019      	str	r1, [r3, #0]
 8004860:	e002      	b.n	8004868 <_printf_i+0x1c8>
 8004862:	0668      	lsls	r0, r5, #25
 8004864:	d5fb      	bpl.n	800485e <_printf_i+0x1be>
 8004866:	8019      	strh	r1, [r3, #0]
 8004868:	2300      	movs	r3, #0
 800486a:	4616      	mov	r6, r2
 800486c:	6123      	str	r3, [r4, #16]
 800486e:	e7bc      	b.n	80047ea <_printf_i+0x14a>
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	2100      	movs	r1, #0
 8004874:	1d1a      	adds	r2, r3, #4
 8004876:	6032      	str	r2, [r6, #0]
 8004878:	681e      	ldr	r6, [r3, #0]
 800487a:	6862      	ldr	r2, [r4, #4]
 800487c:	4630      	mov	r0, r6
 800487e:	f000 fab8 	bl	8004df2 <memchr>
 8004882:	b108      	cbz	r0, 8004888 <_printf_i+0x1e8>
 8004884:	1b80      	subs	r0, r0, r6
 8004886:	6060      	str	r0, [r4, #4]
 8004888:	6863      	ldr	r3, [r4, #4]
 800488a:	6123      	str	r3, [r4, #16]
 800488c:	2300      	movs	r3, #0
 800488e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004892:	e7aa      	b.n	80047ea <_printf_i+0x14a>
 8004894:	4632      	mov	r2, r6
 8004896:	4649      	mov	r1, r9
 8004898:	4640      	mov	r0, r8
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	47d0      	blx	sl
 800489e:	3001      	adds	r0, #1
 80048a0:	d0ad      	beq.n	80047fe <_printf_i+0x15e>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	079b      	lsls	r3, r3, #30
 80048a6:	d413      	bmi.n	80048d0 <_printf_i+0x230>
 80048a8:	68e0      	ldr	r0, [r4, #12]
 80048aa:	9b03      	ldr	r3, [sp, #12]
 80048ac:	4298      	cmp	r0, r3
 80048ae:	bfb8      	it	lt
 80048b0:	4618      	movlt	r0, r3
 80048b2:	e7a6      	b.n	8004802 <_printf_i+0x162>
 80048b4:	2301      	movs	r3, #1
 80048b6:	4632      	mov	r2, r6
 80048b8:	4649      	mov	r1, r9
 80048ba:	4640      	mov	r0, r8
 80048bc:	47d0      	blx	sl
 80048be:	3001      	adds	r0, #1
 80048c0:	d09d      	beq.n	80047fe <_printf_i+0x15e>
 80048c2:	3501      	adds	r5, #1
 80048c4:	68e3      	ldr	r3, [r4, #12]
 80048c6:	9903      	ldr	r1, [sp, #12]
 80048c8:	1a5b      	subs	r3, r3, r1
 80048ca:	42ab      	cmp	r3, r5
 80048cc:	dcf2      	bgt.n	80048b4 <_printf_i+0x214>
 80048ce:	e7eb      	b.n	80048a8 <_printf_i+0x208>
 80048d0:	2500      	movs	r5, #0
 80048d2:	f104 0619 	add.w	r6, r4, #25
 80048d6:	e7f5      	b.n	80048c4 <_printf_i+0x224>
 80048d8:	08006bd0 	.word	0x08006bd0
 80048dc:	08006be1 	.word	0x08006be1

080048e0 <std>:
 80048e0:	2300      	movs	r3, #0
 80048e2:	b510      	push	{r4, lr}
 80048e4:	4604      	mov	r4, r0
 80048e6:	e9c0 3300 	strd	r3, r3, [r0]
 80048ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048ee:	6083      	str	r3, [r0, #8]
 80048f0:	8181      	strh	r1, [r0, #12]
 80048f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80048f4:	81c2      	strh	r2, [r0, #14]
 80048f6:	6183      	str	r3, [r0, #24]
 80048f8:	4619      	mov	r1, r3
 80048fa:	2208      	movs	r2, #8
 80048fc:	305c      	adds	r0, #92	@ 0x5c
 80048fe:	f000 f9f9 	bl	8004cf4 <memset>
 8004902:	4b0d      	ldr	r3, [pc, #52]	@ (8004938 <std+0x58>)
 8004904:	6224      	str	r4, [r4, #32]
 8004906:	6263      	str	r3, [r4, #36]	@ 0x24
 8004908:	4b0c      	ldr	r3, [pc, #48]	@ (800493c <std+0x5c>)
 800490a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800490c:	4b0c      	ldr	r3, [pc, #48]	@ (8004940 <std+0x60>)
 800490e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004910:	4b0c      	ldr	r3, [pc, #48]	@ (8004944 <std+0x64>)
 8004912:	6323      	str	r3, [r4, #48]	@ 0x30
 8004914:	4b0c      	ldr	r3, [pc, #48]	@ (8004948 <std+0x68>)
 8004916:	429c      	cmp	r4, r3
 8004918:	d006      	beq.n	8004928 <std+0x48>
 800491a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800491e:	4294      	cmp	r4, r2
 8004920:	d002      	beq.n	8004928 <std+0x48>
 8004922:	33d0      	adds	r3, #208	@ 0xd0
 8004924:	429c      	cmp	r4, r3
 8004926:	d105      	bne.n	8004934 <std+0x54>
 8004928:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800492c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004930:	f000 ba5c 	b.w	8004dec <__retarget_lock_init_recursive>
 8004934:	bd10      	pop	{r4, pc}
 8004936:	bf00      	nop
 8004938:	08004b45 	.word	0x08004b45
 800493c:	08004b67 	.word	0x08004b67
 8004940:	08004b9f 	.word	0x08004b9f
 8004944:	08004bc3 	.word	0x08004bc3
 8004948:	2000028c 	.word	0x2000028c

0800494c <stdio_exit_handler>:
 800494c:	4a02      	ldr	r2, [pc, #8]	@ (8004958 <stdio_exit_handler+0xc>)
 800494e:	4903      	ldr	r1, [pc, #12]	@ (800495c <stdio_exit_handler+0x10>)
 8004950:	4803      	ldr	r0, [pc, #12]	@ (8004960 <stdio_exit_handler+0x14>)
 8004952:	f000 b869 	b.w	8004a28 <_fwalk_sglue>
 8004956:	bf00      	nop
 8004958:	2000000c 	.word	0x2000000c
 800495c:	0800672d 	.word	0x0800672d
 8004960:	2000001c 	.word	0x2000001c

08004964 <cleanup_stdio>:
 8004964:	6841      	ldr	r1, [r0, #4]
 8004966:	4b0c      	ldr	r3, [pc, #48]	@ (8004998 <cleanup_stdio+0x34>)
 8004968:	b510      	push	{r4, lr}
 800496a:	4299      	cmp	r1, r3
 800496c:	4604      	mov	r4, r0
 800496e:	d001      	beq.n	8004974 <cleanup_stdio+0x10>
 8004970:	f001 fedc 	bl	800672c <_fflush_r>
 8004974:	68a1      	ldr	r1, [r4, #8]
 8004976:	4b09      	ldr	r3, [pc, #36]	@ (800499c <cleanup_stdio+0x38>)
 8004978:	4299      	cmp	r1, r3
 800497a:	d002      	beq.n	8004982 <cleanup_stdio+0x1e>
 800497c:	4620      	mov	r0, r4
 800497e:	f001 fed5 	bl	800672c <_fflush_r>
 8004982:	68e1      	ldr	r1, [r4, #12]
 8004984:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <cleanup_stdio+0x3c>)
 8004986:	4299      	cmp	r1, r3
 8004988:	d004      	beq.n	8004994 <cleanup_stdio+0x30>
 800498a:	4620      	mov	r0, r4
 800498c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004990:	f001 becc 	b.w	800672c <_fflush_r>
 8004994:	bd10      	pop	{r4, pc}
 8004996:	bf00      	nop
 8004998:	2000028c 	.word	0x2000028c
 800499c:	200002f4 	.word	0x200002f4
 80049a0:	2000035c 	.word	0x2000035c

080049a4 <global_stdio_init.part.0>:
 80049a4:	b510      	push	{r4, lr}
 80049a6:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <global_stdio_init.part.0+0x30>)
 80049a8:	4c0b      	ldr	r4, [pc, #44]	@ (80049d8 <global_stdio_init.part.0+0x34>)
 80049aa:	4a0c      	ldr	r2, [pc, #48]	@ (80049dc <global_stdio_init.part.0+0x38>)
 80049ac:	4620      	mov	r0, r4
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	2104      	movs	r1, #4
 80049b2:	2200      	movs	r2, #0
 80049b4:	f7ff ff94 	bl	80048e0 <std>
 80049b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80049bc:	2201      	movs	r2, #1
 80049be:	2109      	movs	r1, #9
 80049c0:	f7ff ff8e 	bl	80048e0 <std>
 80049c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049c8:	2202      	movs	r2, #2
 80049ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ce:	2112      	movs	r1, #18
 80049d0:	f7ff bf86 	b.w	80048e0 <std>
 80049d4:	200003c4 	.word	0x200003c4
 80049d8:	2000028c 	.word	0x2000028c
 80049dc:	0800494d 	.word	0x0800494d

080049e0 <__sfp_lock_acquire>:
 80049e0:	4801      	ldr	r0, [pc, #4]	@ (80049e8 <__sfp_lock_acquire+0x8>)
 80049e2:	f000 ba04 	b.w	8004dee <__retarget_lock_acquire_recursive>
 80049e6:	bf00      	nop
 80049e8:	200003cd 	.word	0x200003cd

080049ec <__sfp_lock_release>:
 80049ec:	4801      	ldr	r0, [pc, #4]	@ (80049f4 <__sfp_lock_release+0x8>)
 80049ee:	f000 b9ff 	b.w	8004df0 <__retarget_lock_release_recursive>
 80049f2:	bf00      	nop
 80049f4:	200003cd 	.word	0x200003cd

080049f8 <__sinit>:
 80049f8:	b510      	push	{r4, lr}
 80049fa:	4604      	mov	r4, r0
 80049fc:	f7ff fff0 	bl	80049e0 <__sfp_lock_acquire>
 8004a00:	6a23      	ldr	r3, [r4, #32]
 8004a02:	b11b      	cbz	r3, 8004a0c <__sinit+0x14>
 8004a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a08:	f7ff bff0 	b.w	80049ec <__sfp_lock_release>
 8004a0c:	4b04      	ldr	r3, [pc, #16]	@ (8004a20 <__sinit+0x28>)
 8004a0e:	6223      	str	r3, [r4, #32]
 8004a10:	4b04      	ldr	r3, [pc, #16]	@ (8004a24 <__sinit+0x2c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f5      	bne.n	8004a04 <__sinit+0xc>
 8004a18:	f7ff ffc4 	bl	80049a4 <global_stdio_init.part.0>
 8004a1c:	e7f2      	b.n	8004a04 <__sinit+0xc>
 8004a1e:	bf00      	nop
 8004a20:	08004965 	.word	0x08004965
 8004a24:	200003c4 	.word	0x200003c4

08004a28 <_fwalk_sglue>:
 8004a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a2c:	4607      	mov	r7, r0
 8004a2e:	4688      	mov	r8, r1
 8004a30:	4614      	mov	r4, r2
 8004a32:	2600      	movs	r6, #0
 8004a34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a38:	f1b9 0901 	subs.w	r9, r9, #1
 8004a3c:	d505      	bpl.n	8004a4a <_fwalk_sglue+0x22>
 8004a3e:	6824      	ldr	r4, [r4, #0]
 8004a40:	2c00      	cmp	r4, #0
 8004a42:	d1f7      	bne.n	8004a34 <_fwalk_sglue+0xc>
 8004a44:	4630      	mov	r0, r6
 8004a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a4a:	89ab      	ldrh	r3, [r5, #12]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d907      	bls.n	8004a60 <_fwalk_sglue+0x38>
 8004a50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a54:	3301      	adds	r3, #1
 8004a56:	d003      	beq.n	8004a60 <_fwalk_sglue+0x38>
 8004a58:	4629      	mov	r1, r5
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	47c0      	blx	r8
 8004a5e:	4306      	orrs	r6, r0
 8004a60:	3568      	adds	r5, #104	@ 0x68
 8004a62:	e7e9      	b.n	8004a38 <_fwalk_sglue+0x10>

08004a64 <iprintf>:
 8004a64:	b40f      	push	{r0, r1, r2, r3}
 8004a66:	b507      	push	{r0, r1, r2, lr}
 8004a68:	4906      	ldr	r1, [pc, #24]	@ (8004a84 <iprintf+0x20>)
 8004a6a:	ab04      	add	r3, sp, #16
 8004a6c:	6808      	ldr	r0, [r1, #0]
 8004a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a72:	6881      	ldr	r1, [r0, #8]
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	f001 fcc1 	bl	80063fc <_vfiprintf_r>
 8004a7a:	b003      	add	sp, #12
 8004a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a80:	b004      	add	sp, #16
 8004a82:	4770      	bx	lr
 8004a84:	20000018 	.word	0x20000018

08004a88 <_puts_r>:
 8004a88:	6a03      	ldr	r3, [r0, #32]
 8004a8a:	b570      	push	{r4, r5, r6, lr}
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	460e      	mov	r6, r1
 8004a90:	6884      	ldr	r4, [r0, #8]
 8004a92:	b90b      	cbnz	r3, 8004a98 <_puts_r+0x10>
 8004a94:	f7ff ffb0 	bl	80049f8 <__sinit>
 8004a98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a9a:	07db      	lsls	r3, r3, #31
 8004a9c:	d405      	bmi.n	8004aaa <_puts_r+0x22>
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	0598      	lsls	r0, r3, #22
 8004aa2:	d402      	bmi.n	8004aaa <_puts_r+0x22>
 8004aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aa6:	f000 f9a2 	bl	8004dee <__retarget_lock_acquire_recursive>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	0719      	lsls	r1, r3, #28
 8004aae:	d502      	bpl.n	8004ab6 <_puts_r+0x2e>
 8004ab0:	6923      	ldr	r3, [r4, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d135      	bne.n	8004b22 <_puts_r+0x9a>
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f000 f8c5 	bl	8004c48 <__swsetup_r>
 8004abe:	b380      	cbz	r0, 8004b22 <_puts_r+0x9a>
 8004ac0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ac4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ac6:	07da      	lsls	r2, r3, #31
 8004ac8:	d405      	bmi.n	8004ad6 <_puts_r+0x4e>
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	059b      	lsls	r3, r3, #22
 8004ace:	d402      	bmi.n	8004ad6 <_puts_r+0x4e>
 8004ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ad2:	f000 f98d 	bl	8004df0 <__retarget_lock_release_recursive>
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da04      	bge.n	8004ae8 <_puts_r+0x60>
 8004ade:	69a2      	ldr	r2, [r4, #24]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	dc17      	bgt.n	8004b14 <_puts_r+0x8c>
 8004ae4:	290a      	cmp	r1, #10
 8004ae6:	d015      	beq.n	8004b14 <_puts_r+0x8c>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	6022      	str	r2, [r4, #0]
 8004aee:	7019      	strb	r1, [r3, #0]
 8004af0:	68a3      	ldr	r3, [r4, #8]
 8004af2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004af6:	3b01      	subs	r3, #1
 8004af8:	60a3      	str	r3, [r4, #8]
 8004afa:	2900      	cmp	r1, #0
 8004afc:	d1ed      	bne.n	8004ada <_puts_r+0x52>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da11      	bge.n	8004b26 <_puts_r+0x9e>
 8004b02:	4622      	mov	r2, r4
 8004b04:	210a      	movs	r1, #10
 8004b06:	4628      	mov	r0, r5
 8004b08:	f000 f85f 	bl	8004bca <__swbuf_r>
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	d0d7      	beq.n	8004ac0 <_puts_r+0x38>
 8004b10:	250a      	movs	r5, #10
 8004b12:	e7d7      	b.n	8004ac4 <_puts_r+0x3c>
 8004b14:	4622      	mov	r2, r4
 8004b16:	4628      	mov	r0, r5
 8004b18:	f000 f857 	bl	8004bca <__swbuf_r>
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d1e7      	bne.n	8004af0 <_puts_r+0x68>
 8004b20:	e7ce      	b.n	8004ac0 <_puts_r+0x38>
 8004b22:	3e01      	subs	r6, #1
 8004b24:	e7e4      	b.n	8004af0 <_puts_r+0x68>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	6022      	str	r2, [r4, #0]
 8004b2c:	220a      	movs	r2, #10
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	e7ee      	b.n	8004b10 <_puts_r+0x88>
	...

08004b34 <puts>:
 8004b34:	4b02      	ldr	r3, [pc, #8]	@ (8004b40 <puts+0xc>)
 8004b36:	4601      	mov	r1, r0
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	f7ff bfa5 	b.w	8004a88 <_puts_r>
 8004b3e:	bf00      	nop
 8004b40:	20000018 	.word	0x20000018

08004b44 <__sread>:
 8004b44:	b510      	push	{r4, lr}
 8004b46:	460c      	mov	r4, r1
 8004b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b4c:	f000 f900 	bl	8004d50 <_read_r>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	bfab      	itete	ge
 8004b54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b56:	89a3      	ldrhlt	r3, [r4, #12]
 8004b58:	181b      	addge	r3, r3, r0
 8004b5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b5e:	bfac      	ite	ge
 8004b60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b62:	81a3      	strhlt	r3, [r4, #12]
 8004b64:	bd10      	pop	{r4, pc}

08004b66 <__swrite>:
 8004b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6a:	461f      	mov	r7, r3
 8004b6c:	898b      	ldrh	r3, [r1, #12]
 8004b6e:	4605      	mov	r5, r0
 8004b70:	05db      	lsls	r3, r3, #23
 8004b72:	460c      	mov	r4, r1
 8004b74:	4616      	mov	r6, r2
 8004b76:	d505      	bpl.n	8004b84 <__swrite+0x1e>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b80:	f000 f8d4 	bl	8004d2c <_lseek_r>
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	4632      	mov	r2, r6
 8004b88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b8c:	81a3      	strh	r3, [r4, #12]
 8004b8e:	4628      	mov	r0, r5
 8004b90:	463b      	mov	r3, r7
 8004b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b9a:	f000 b8eb 	b.w	8004d74 <_write_r>

08004b9e <__sseek>:
 8004b9e:	b510      	push	{r4, lr}
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba6:	f000 f8c1 	bl	8004d2c <_lseek_r>
 8004baa:	1c43      	adds	r3, r0, #1
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	bf15      	itete	ne
 8004bb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004bb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004bb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004bba:	81a3      	strheq	r3, [r4, #12]
 8004bbc:	bf18      	it	ne
 8004bbe:	81a3      	strhne	r3, [r4, #12]
 8004bc0:	bd10      	pop	{r4, pc}

08004bc2 <__sclose>:
 8004bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc6:	f000 b8a1 	b.w	8004d0c <_close_r>

08004bca <__swbuf_r>:
 8004bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bcc:	460e      	mov	r6, r1
 8004bce:	4614      	mov	r4, r2
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	b118      	cbz	r0, 8004bdc <__swbuf_r+0x12>
 8004bd4:	6a03      	ldr	r3, [r0, #32]
 8004bd6:	b90b      	cbnz	r3, 8004bdc <__swbuf_r+0x12>
 8004bd8:	f7ff ff0e 	bl	80049f8 <__sinit>
 8004bdc:	69a3      	ldr	r3, [r4, #24]
 8004bde:	60a3      	str	r3, [r4, #8]
 8004be0:	89a3      	ldrh	r3, [r4, #12]
 8004be2:	071a      	lsls	r2, r3, #28
 8004be4:	d501      	bpl.n	8004bea <__swbuf_r+0x20>
 8004be6:	6923      	ldr	r3, [r4, #16]
 8004be8:	b943      	cbnz	r3, 8004bfc <__swbuf_r+0x32>
 8004bea:	4621      	mov	r1, r4
 8004bec:	4628      	mov	r0, r5
 8004bee:	f000 f82b 	bl	8004c48 <__swsetup_r>
 8004bf2:	b118      	cbz	r0, 8004bfc <__swbuf_r+0x32>
 8004bf4:	f04f 37ff 	mov.w	r7, #4294967295
 8004bf8:	4638      	mov	r0, r7
 8004bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	6922      	ldr	r2, [r4, #16]
 8004c00:	b2f6      	uxtb	r6, r6
 8004c02:	1a98      	subs	r0, r3, r2
 8004c04:	6963      	ldr	r3, [r4, #20]
 8004c06:	4637      	mov	r7, r6
 8004c08:	4283      	cmp	r3, r0
 8004c0a:	dc05      	bgt.n	8004c18 <__swbuf_r+0x4e>
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f001 fd8c 	bl	800672c <_fflush_r>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d1ed      	bne.n	8004bf4 <__swbuf_r+0x2a>
 8004c18:	68a3      	ldr	r3, [r4, #8]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	60a3      	str	r3, [r4, #8]
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	6022      	str	r2, [r4, #0]
 8004c24:	701e      	strb	r6, [r3, #0]
 8004c26:	6962      	ldr	r2, [r4, #20]
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d004      	beq.n	8004c38 <__swbuf_r+0x6e>
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	07db      	lsls	r3, r3, #31
 8004c32:	d5e1      	bpl.n	8004bf8 <__swbuf_r+0x2e>
 8004c34:	2e0a      	cmp	r6, #10
 8004c36:	d1df      	bne.n	8004bf8 <__swbuf_r+0x2e>
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f001 fd76 	bl	800672c <_fflush_r>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	d0d9      	beq.n	8004bf8 <__swbuf_r+0x2e>
 8004c44:	e7d6      	b.n	8004bf4 <__swbuf_r+0x2a>
	...

08004c48 <__swsetup_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4b29      	ldr	r3, [pc, #164]	@ (8004cf0 <__swsetup_r+0xa8>)
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	460c      	mov	r4, r1
 8004c52:	b118      	cbz	r0, 8004c5c <__swsetup_r+0x14>
 8004c54:	6a03      	ldr	r3, [r0, #32]
 8004c56:	b90b      	cbnz	r3, 8004c5c <__swsetup_r+0x14>
 8004c58:	f7ff fece 	bl	80049f8 <__sinit>
 8004c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c60:	0719      	lsls	r1, r3, #28
 8004c62:	d422      	bmi.n	8004caa <__swsetup_r+0x62>
 8004c64:	06da      	lsls	r2, r3, #27
 8004c66:	d407      	bmi.n	8004c78 <__swsetup_r+0x30>
 8004c68:	2209      	movs	r2, #9
 8004c6a:	602a      	str	r2, [r5, #0]
 8004c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	e033      	b.n	8004ce0 <__swsetup_r+0x98>
 8004c78:	0758      	lsls	r0, r3, #29
 8004c7a:	d512      	bpl.n	8004ca2 <__swsetup_r+0x5a>
 8004c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c7e:	b141      	cbz	r1, 8004c92 <__swsetup_r+0x4a>
 8004c80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c84:	4299      	cmp	r1, r3
 8004c86:	d002      	beq.n	8004c8e <__swsetup_r+0x46>
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f000 ff11 	bl	8005ab0 <_free_r>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c92:	89a3      	ldrh	r3, [r4, #12]
 8004c94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c98:	81a3      	strh	r3, [r4, #12]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	6063      	str	r3, [r4, #4]
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	f043 0308 	orr.w	r3, r3, #8
 8004ca8:	81a3      	strh	r3, [r4, #12]
 8004caa:	6923      	ldr	r3, [r4, #16]
 8004cac:	b94b      	cbnz	r3, 8004cc2 <__swsetup_r+0x7a>
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb8:	d003      	beq.n	8004cc2 <__swsetup_r+0x7a>
 8004cba:	4621      	mov	r1, r4
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f001 fd82 	bl	80067c6 <__smakebuf_r>
 8004cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc6:	f013 0201 	ands.w	r2, r3, #1
 8004cca:	d00a      	beq.n	8004ce2 <__swsetup_r+0x9a>
 8004ccc:	2200      	movs	r2, #0
 8004cce:	60a2      	str	r2, [r4, #8]
 8004cd0:	6962      	ldr	r2, [r4, #20]
 8004cd2:	4252      	negs	r2, r2
 8004cd4:	61a2      	str	r2, [r4, #24]
 8004cd6:	6922      	ldr	r2, [r4, #16]
 8004cd8:	b942      	cbnz	r2, 8004cec <__swsetup_r+0xa4>
 8004cda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004cde:	d1c5      	bne.n	8004c6c <__swsetup_r+0x24>
 8004ce0:	bd38      	pop	{r3, r4, r5, pc}
 8004ce2:	0799      	lsls	r1, r3, #30
 8004ce4:	bf58      	it	pl
 8004ce6:	6962      	ldrpl	r2, [r4, #20]
 8004ce8:	60a2      	str	r2, [r4, #8]
 8004cea:	e7f4      	b.n	8004cd6 <__swsetup_r+0x8e>
 8004cec:	2000      	movs	r0, #0
 8004cee:	e7f7      	b.n	8004ce0 <__swsetup_r+0x98>
 8004cf0:	20000018 	.word	0x20000018

08004cf4 <memset>:
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	4402      	add	r2, r0
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d100      	bne.n	8004cfe <memset+0xa>
 8004cfc:	4770      	bx	lr
 8004cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004d02:	e7f9      	b.n	8004cf8 <memset+0x4>

08004d04 <_localeconv_r>:
 8004d04:	4800      	ldr	r0, [pc, #0]	@ (8004d08 <_localeconv_r+0x4>)
 8004d06:	4770      	bx	lr
 8004d08:	20000158 	.word	0x20000158

08004d0c <_close_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	2300      	movs	r3, #0
 8004d10:	4d05      	ldr	r5, [pc, #20]	@ (8004d28 <_close_r+0x1c>)
 8004d12:	4604      	mov	r4, r0
 8004d14:	4608      	mov	r0, r1
 8004d16:	602b      	str	r3, [r5, #0]
 8004d18:	f7fc fd2d 	bl	8001776 <_close>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d102      	bne.n	8004d26 <_close_r+0x1a>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	b103      	cbz	r3, 8004d26 <_close_r+0x1a>
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	bd38      	pop	{r3, r4, r5, pc}
 8004d28:	200003c8 	.word	0x200003c8

08004d2c <_lseek_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4604      	mov	r4, r0
 8004d30:	4608      	mov	r0, r1
 8004d32:	4611      	mov	r1, r2
 8004d34:	2200      	movs	r2, #0
 8004d36:	4d05      	ldr	r5, [pc, #20]	@ (8004d4c <_lseek_r+0x20>)
 8004d38:	602a      	str	r2, [r5, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f7fc fd3f 	bl	80017be <_lseek>
 8004d40:	1c43      	adds	r3, r0, #1
 8004d42:	d102      	bne.n	8004d4a <_lseek_r+0x1e>
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	b103      	cbz	r3, 8004d4a <_lseek_r+0x1e>
 8004d48:	6023      	str	r3, [r4, #0]
 8004d4a:	bd38      	pop	{r3, r4, r5, pc}
 8004d4c:	200003c8 	.word	0x200003c8

08004d50 <_read_r>:
 8004d50:	b538      	push	{r3, r4, r5, lr}
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	4611      	mov	r1, r2
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4d05      	ldr	r5, [pc, #20]	@ (8004d70 <_read_r+0x20>)
 8004d5c:	602a      	str	r2, [r5, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f7fc fcd0 	bl	8001704 <_read>
 8004d64:	1c43      	adds	r3, r0, #1
 8004d66:	d102      	bne.n	8004d6e <_read_r+0x1e>
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	b103      	cbz	r3, 8004d6e <_read_r+0x1e>
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
 8004d70:	200003c8 	.word	0x200003c8

08004d74 <_write_r>:
 8004d74:	b538      	push	{r3, r4, r5, lr}
 8004d76:	4604      	mov	r4, r0
 8004d78:	4608      	mov	r0, r1
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	4d05      	ldr	r5, [pc, #20]	@ (8004d94 <_write_r+0x20>)
 8004d80:	602a      	str	r2, [r5, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	f7fc fcdb 	bl	800173e <_write>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d102      	bne.n	8004d92 <_write_r+0x1e>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	b103      	cbz	r3, 8004d92 <_write_r+0x1e>
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	200003c8 	.word	0x200003c8

08004d98 <__errno>:
 8004d98:	4b01      	ldr	r3, [pc, #4]	@ (8004da0 <__errno+0x8>)
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000018 	.word	0x20000018

08004da4 <__libc_init_array>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	2600      	movs	r6, #0
 8004da8:	4d0c      	ldr	r5, [pc, #48]	@ (8004ddc <__libc_init_array+0x38>)
 8004daa:	4c0d      	ldr	r4, [pc, #52]	@ (8004de0 <__libc_init_array+0x3c>)
 8004dac:	1b64      	subs	r4, r4, r5
 8004dae:	10a4      	asrs	r4, r4, #2
 8004db0:	42a6      	cmp	r6, r4
 8004db2:	d109      	bne.n	8004dc8 <__libc_init_array+0x24>
 8004db4:	f001 fe34 	bl	8006a20 <_init>
 8004db8:	2600      	movs	r6, #0
 8004dba:	4d0a      	ldr	r5, [pc, #40]	@ (8004de4 <__libc_init_array+0x40>)
 8004dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8004de8 <__libc_init_array+0x44>)
 8004dbe:	1b64      	subs	r4, r4, r5
 8004dc0:	10a4      	asrs	r4, r4, #2
 8004dc2:	42a6      	cmp	r6, r4
 8004dc4:	d105      	bne.n	8004dd2 <__libc_init_array+0x2e>
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}
 8004dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dcc:	4798      	blx	r3
 8004dce:	3601      	adds	r6, #1
 8004dd0:	e7ee      	b.n	8004db0 <__libc_init_array+0xc>
 8004dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd6:	4798      	blx	r3
 8004dd8:	3601      	adds	r6, #1
 8004dda:	e7f2      	b.n	8004dc2 <__libc_init_array+0x1e>
 8004ddc:	08006f38 	.word	0x08006f38
 8004de0:	08006f38 	.word	0x08006f38
 8004de4:	08006f38 	.word	0x08006f38
 8004de8:	08006f3c 	.word	0x08006f3c

08004dec <__retarget_lock_init_recursive>:
 8004dec:	4770      	bx	lr

08004dee <__retarget_lock_acquire_recursive>:
 8004dee:	4770      	bx	lr

08004df0 <__retarget_lock_release_recursive>:
 8004df0:	4770      	bx	lr

08004df2 <memchr>:
 8004df2:	4603      	mov	r3, r0
 8004df4:	b510      	push	{r4, lr}
 8004df6:	b2c9      	uxtb	r1, r1
 8004df8:	4402      	add	r2, r0
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	d101      	bne.n	8004e04 <memchr+0x12>
 8004e00:	2000      	movs	r0, #0
 8004e02:	e003      	b.n	8004e0c <memchr+0x1a>
 8004e04:	7804      	ldrb	r4, [r0, #0]
 8004e06:	3301      	adds	r3, #1
 8004e08:	428c      	cmp	r4, r1
 8004e0a:	d1f6      	bne.n	8004dfa <memchr+0x8>
 8004e0c:	bd10      	pop	{r4, pc}

08004e0e <quorem>:
 8004e0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e12:	6903      	ldr	r3, [r0, #16]
 8004e14:	690c      	ldr	r4, [r1, #16]
 8004e16:	4607      	mov	r7, r0
 8004e18:	42a3      	cmp	r3, r4
 8004e1a:	db7e      	blt.n	8004f1a <quorem+0x10c>
 8004e1c:	3c01      	subs	r4, #1
 8004e1e:	00a3      	lsls	r3, r4, #2
 8004e20:	f100 0514 	add.w	r5, r0, #20
 8004e24:	f101 0814 	add.w	r8, r1, #20
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e44:	d32e      	bcc.n	8004ea4 <quorem+0x96>
 8004e46:	f04f 0a00 	mov.w	sl, #0
 8004e4a:	46c4      	mov	ip, r8
 8004e4c:	46ae      	mov	lr, r5
 8004e4e:	46d3      	mov	fp, sl
 8004e50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004e54:	b298      	uxth	r0, r3
 8004e56:	fb06 a000 	mla	r0, r6, r0, sl
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	0c02      	lsrs	r2, r0, #16
 8004e5e:	fb06 2303 	mla	r3, r6, r3, r2
 8004e62:	f8de 2000 	ldr.w	r2, [lr]
 8004e66:	b280      	uxth	r0, r0
 8004e68:	b292      	uxth	r2, r2
 8004e6a:	1a12      	subs	r2, r2, r0
 8004e6c:	445a      	add	r2, fp
 8004e6e:	f8de 0000 	ldr.w	r0, [lr]
 8004e72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004e7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004e80:	b292      	uxth	r2, r2
 8004e82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004e86:	45e1      	cmp	r9, ip
 8004e88:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004e8c:	f84e 2b04 	str.w	r2, [lr], #4
 8004e90:	d2de      	bcs.n	8004e50 <quorem+0x42>
 8004e92:	9b00      	ldr	r3, [sp, #0]
 8004e94:	58eb      	ldr	r3, [r5, r3]
 8004e96:	b92b      	cbnz	r3, 8004ea4 <quorem+0x96>
 8004e98:	9b01      	ldr	r3, [sp, #4]
 8004e9a:	3b04      	subs	r3, #4
 8004e9c:	429d      	cmp	r5, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	d32f      	bcc.n	8004f02 <quorem+0xf4>
 8004ea2:	613c      	str	r4, [r7, #16]
 8004ea4:	4638      	mov	r0, r7
 8004ea6:	f001 f979 	bl	800619c <__mcmp>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	db25      	blt.n	8004efa <quorem+0xec>
 8004eae:	4629      	mov	r1, r5
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	f858 2b04 	ldr.w	r2, [r8], #4
 8004eb6:	f8d1 c000 	ldr.w	ip, [r1]
 8004eba:	fa1f fe82 	uxth.w	lr, r2
 8004ebe:	fa1f f38c 	uxth.w	r3, ip
 8004ec2:	eba3 030e 	sub.w	r3, r3, lr
 8004ec6:	4403      	add	r3, r0
 8004ec8:	0c12      	lsrs	r2, r2, #16
 8004eca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004ece:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ed8:	45c1      	cmp	r9, r8
 8004eda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ede:	f841 3b04 	str.w	r3, [r1], #4
 8004ee2:	d2e6      	bcs.n	8004eb2 <quorem+0xa4>
 8004ee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ee8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eec:	b922      	cbnz	r2, 8004ef8 <quorem+0xea>
 8004eee:	3b04      	subs	r3, #4
 8004ef0:	429d      	cmp	r5, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	d30b      	bcc.n	8004f0e <quorem+0x100>
 8004ef6:	613c      	str	r4, [r7, #16]
 8004ef8:	3601      	adds	r6, #1
 8004efa:	4630      	mov	r0, r6
 8004efc:	b003      	add	sp, #12
 8004efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	3b04      	subs	r3, #4
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	d1cb      	bne.n	8004ea2 <quorem+0x94>
 8004f0a:	3c01      	subs	r4, #1
 8004f0c:	e7c6      	b.n	8004e9c <quorem+0x8e>
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	3b04      	subs	r3, #4
 8004f12:	2a00      	cmp	r2, #0
 8004f14:	d1ef      	bne.n	8004ef6 <quorem+0xe8>
 8004f16:	3c01      	subs	r4, #1
 8004f18:	e7ea      	b.n	8004ef0 <quorem+0xe2>
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	e7ee      	b.n	8004efc <quorem+0xee>
	...

08004f20 <_dtoa_r>:
 8004f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f24:	4614      	mov	r4, r2
 8004f26:	461d      	mov	r5, r3
 8004f28:	69c7      	ldr	r7, [r0, #28]
 8004f2a:	b097      	sub	sp, #92	@ 0x5c
 8004f2c:	4683      	mov	fp, r0
 8004f2e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004f32:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004f34:	b97f      	cbnz	r7, 8004f56 <_dtoa_r+0x36>
 8004f36:	2010      	movs	r0, #16
 8004f38:	f000 fe02 	bl	8005b40 <malloc>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004f42:	b920      	cbnz	r0, 8004f4e <_dtoa_r+0x2e>
 8004f44:	21ef      	movs	r1, #239	@ 0xef
 8004f46:	4ba8      	ldr	r3, [pc, #672]	@ (80051e8 <_dtoa_r+0x2c8>)
 8004f48:	48a8      	ldr	r0, [pc, #672]	@ (80051ec <_dtoa_r+0x2cc>)
 8004f4a:	f001 fcb9 	bl	80068c0 <__assert_func>
 8004f4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004f52:	6007      	str	r7, [r0, #0]
 8004f54:	60c7      	str	r7, [r0, #12]
 8004f56:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004f5a:	6819      	ldr	r1, [r3, #0]
 8004f5c:	b159      	cbz	r1, 8004f76 <_dtoa_r+0x56>
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	2301      	movs	r3, #1
 8004f62:	4093      	lsls	r3, r2
 8004f64:	604a      	str	r2, [r1, #4]
 8004f66:	608b      	str	r3, [r1, #8]
 8004f68:	4658      	mov	r0, fp
 8004f6a:	f000 fedf 	bl	8005d2c <_Bfree>
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	1e2b      	subs	r3, r5, #0
 8004f78:	bfaf      	iteee	ge
 8004f7a:	2300      	movge	r3, #0
 8004f7c:	2201      	movlt	r2, #1
 8004f7e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004f82:	9303      	strlt	r3, [sp, #12]
 8004f84:	bfa8      	it	ge
 8004f86:	6033      	strge	r3, [r6, #0]
 8004f88:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004f8c:	4b98      	ldr	r3, [pc, #608]	@ (80051f0 <_dtoa_r+0x2d0>)
 8004f8e:	bfb8      	it	lt
 8004f90:	6032      	strlt	r2, [r6, #0]
 8004f92:	ea33 0308 	bics.w	r3, r3, r8
 8004f96:	d112      	bne.n	8004fbe <_dtoa_r+0x9e>
 8004f98:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004f9c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004fa4:	4323      	orrs	r3, r4
 8004fa6:	f000 8550 	beq.w	8005a4a <_dtoa_r+0xb2a>
 8004faa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004fac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80051f4 <_dtoa_r+0x2d4>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 8552 	beq.w	8005a5a <_dtoa_r+0xb3a>
 8004fb6:	f10a 0303 	add.w	r3, sl, #3
 8004fba:	f000 bd4c 	b.w	8005a56 <_dtoa_r+0xb36>
 8004fbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fc2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004fc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f7fb fceb 	bl	80009a8 <__aeabi_dcmpeq>
 8004fd2:	4607      	mov	r7, r0
 8004fd4:	b158      	cbz	r0, 8004fee <_dtoa_r+0xce>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004fde:	b113      	cbz	r3, 8004fe6 <_dtoa_r+0xc6>
 8004fe0:	4b85      	ldr	r3, [pc, #532]	@ (80051f8 <_dtoa_r+0x2d8>)
 8004fe2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80051fc <_dtoa_r+0x2dc>
 8004fea:	f000 bd36 	b.w	8005a5a <_dtoa_r+0xb3a>
 8004fee:	ab14      	add	r3, sp, #80	@ 0x50
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	ab15      	add	r3, sp, #84	@ 0x54
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	4658      	mov	r0, fp
 8004ff8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004ffc:	f001 f97e 	bl	80062fc <__d2b>
 8005000:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005004:	4681      	mov	r9, r0
 8005006:	2e00      	cmp	r6, #0
 8005008:	d077      	beq.n	80050fa <_dtoa_r+0x1da>
 800500a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800500e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005010:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005018:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800501c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005020:	9712      	str	r7, [sp, #72]	@ 0x48
 8005022:	4619      	mov	r1, r3
 8005024:	2200      	movs	r2, #0
 8005026:	4b76      	ldr	r3, [pc, #472]	@ (8005200 <_dtoa_r+0x2e0>)
 8005028:	f7fb f89e 	bl	8000168 <__aeabi_dsub>
 800502c:	a368      	add	r3, pc, #416	@ (adr r3, 80051d0 <_dtoa_r+0x2b0>)
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f7fb fa51 	bl	80004d8 <__aeabi_dmul>
 8005036:	a368      	add	r3, pc, #416	@ (adr r3, 80051d8 <_dtoa_r+0x2b8>)
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f7fb f896 	bl	800016c <__adddf3>
 8005040:	4604      	mov	r4, r0
 8005042:	4630      	mov	r0, r6
 8005044:	460d      	mov	r5, r1
 8005046:	f7fb f9dd 	bl	8000404 <__aeabi_i2d>
 800504a:	a365      	add	r3, pc, #404	@ (adr r3, 80051e0 <_dtoa_r+0x2c0>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f7fb fa42 	bl	80004d8 <__aeabi_dmul>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4620      	mov	r0, r4
 800505a:	4629      	mov	r1, r5
 800505c:	f7fb f886 	bl	800016c <__adddf3>
 8005060:	4604      	mov	r4, r0
 8005062:	460d      	mov	r5, r1
 8005064:	f7fb fce8 	bl	8000a38 <__aeabi_d2iz>
 8005068:	2200      	movs	r2, #0
 800506a:	4607      	mov	r7, r0
 800506c:	2300      	movs	r3, #0
 800506e:	4620      	mov	r0, r4
 8005070:	4629      	mov	r1, r5
 8005072:	f7fb fca3 	bl	80009bc <__aeabi_dcmplt>
 8005076:	b140      	cbz	r0, 800508a <_dtoa_r+0x16a>
 8005078:	4638      	mov	r0, r7
 800507a:	f7fb f9c3 	bl	8000404 <__aeabi_i2d>
 800507e:	4622      	mov	r2, r4
 8005080:	462b      	mov	r3, r5
 8005082:	f7fb fc91 	bl	80009a8 <__aeabi_dcmpeq>
 8005086:	b900      	cbnz	r0, 800508a <_dtoa_r+0x16a>
 8005088:	3f01      	subs	r7, #1
 800508a:	2f16      	cmp	r7, #22
 800508c:	d853      	bhi.n	8005136 <_dtoa_r+0x216>
 800508e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005092:	4b5c      	ldr	r3, [pc, #368]	@ (8005204 <_dtoa_r+0x2e4>)
 8005094:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f7fb fc8e 	bl	80009bc <__aeabi_dcmplt>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d04a      	beq.n	800513a <_dtoa_r+0x21a>
 80050a4:	2300      	movs	r3, #0
 80050a6:	3f01      	subs	r7, #1
 80050a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80050aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80050ac:	1b9b      	subs	r3, r3, r6
 80050ae:	1e5a      	subs	r2, r3, #1
 80050b0:	bf46      	itte	mi
 80050b2:	f1c3 0801 	rsbmi	r8, r3, #1
 80050b6:	2300      	movmi	r3, #0
 80050b8:	f04f 0800 	movpl.w	r8, #0
 80050bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80050be:	bf48      	it	mi
 80050c0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80050c2:	2f00      	cmp	r7, #0
 80050c4:	db3b      	blt.n	800513e <_dtoa_r+0x21e>
 80050c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050c8:	970e      	str	r7, [sp, #56]	@ 0x38
 80050ca:	443b      	add	r3, r7
 80050cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80050ce:	2300      	movs	r3, #0
 80050d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80050d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050d4:	2b09      	cmp	r3, #9
 80050d6:	d866      	bhi.n	80051a6 <_dtoa_r+0x286>
 80050d8:	2b05      	cmp	r3, #5
 80050da:	bfc4      	itt	gt
 80050dc:	3b04      	subgt	r3, #4
 80050de:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80050e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050e2:	bfc8      	it	gt
 80050e4:	2400      	movgt	r4, #0
 80050e6:	f1a3 0302 	sub.w	r3, r3, #2
 80050ea:	bfd8      	it	le
 80050ec:	2401      	movle	r4, #1
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d864      	bhi.n	80051bc <_dtoa_r+0x29c>
 80050f2:	e8df f003 	tbb	[pc, r3]
 80050f6:	382b      	.short	0x382b
 80050f8:	5636      	.short	0x5636
 80050fa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80050fe:	441e      	add	r6, r3
 8005100:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005104:	2b20      	cmp	r3, #32
 8005106:	bfc1      	itttt	gt
 8005108:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800510c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005110:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005114:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005118:	bfd6      	itet	le
 800511a:	f1c3 0320 	rsble	r3, r3, #32
 800511e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005122:	fa04 f003 	lslle.w	r0, r4, r3
 8005126:	f7fb f95d 	bl	80003e4 <__aeabi_ui2d>
 800512a:	2201      	movs	r2, #1
 800512c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005130:	3e01      	subs	r6, #1
 8005132:	9212      	str	r2, [sp, #72]	@ 0x48
 8005134:	e775      	b.n	8005022 <_dtoa_r+0x102>
 8005136:	2301      	movs	r3, #1
 8005138:	e7b6      	b.n	80050a8 <_dtoa_r+0x188>
 800513a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800513c:	e7b5      	b.n	80050aa <_dtoa_r+0x18a>
 800513e:	427b      	negs	r3, r7
 8005140:	930a      	str	r3, [sp, #40]	@ 0x28
 8005142:	2300      	movs	r3, #0
 8005144:	eba8 0807 	sub.w	r8, r8, r7
 8005148:	930e      	str	r3, [sp, #56]	@ 0x38
 800514a:	e7c2      	b.n	80050d2 <_dtoa_r+0x1b2>
 800514c:	2300      	movs	r3, #0
 800514e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005150:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005152:	2b00      	cmp	r3, #0
 8005154:	dc35      	bgt.n	80051c2 <_dtoa_r+0x2a2>
 8005156:	2301      	movs	r3, #1
 8005158:	461a      	mov	r2, r3
 800515a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800515e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005160:	e00b      	b.n	800517a <_dtoa_r+0x25a>
 8005162:	2301      	movs	r3, #1
 8005164:	e7f3      	b.n	800514e <_dtoa_r+0x22e>
 8005166:	2300      	movs	r3, #0
 8005168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800516a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	9308      	str	r3, [sp, #32]
 8005170:	3301      	adds	r3, #1
 8005172:	2b01      	cmp	r3, #1
 8005174:	9307      	str	r3, [sp, #28]
 8005176:	bfb8      	it	lt
 8005178:	2301      	movlt	r3, #1
 800517a:	2100      	movs	r1, #0
 800517c:	2204      	movs	r2, #4
 800517e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005182:	f102 0514 	add.w	r5, r2, #20
 8005186:	429d      	cmp	r5, r3
 8005188:	d91f      	bls.n	80051ca <_dtoa_r+0x2aa>
 800518a:	6041      	str	r1, [r0, #4]
 800518c:	4658      	mov	r0, fp
 800518e:	f000 fd8d 	bl	8005cac <_Balloc>
 8005192:	4682      	mov	sl, r0
 8005194:	2800      	cmp	r0, #0
 8005196:	d139      	bne.n	800520c <_dtoa_r+0x2ec>
 8005198:	4602      	mov	r2, r0
 800519a:	f240 11af 	movw	r1, #431	@ 0x1af
 800519e:	4b1a      	ldr	r3, [pc, #104]	@ (8005208 <_dtoa_r+0x2e8>)
 80051a0:	e6d2      	b.n	8004f48 <_dtoa_r+0x28>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e7e0      	b.n	8005168 <_dtoa_r+0x248>
 80051a6:	2401      	movs	r4, #1
 80051a8:	2300      	movs	r3, #0
 80051aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80051ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	2200      	movs	r2, #0
 80051b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80051b8:	2312      	movs	r3, #18
 80051ba:	e7d0      	b.n	800515e <_dtoa_r+0x23e>
 80051bc:	2301      	movs	r3, #1
 80051be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051c0:	e7f5      	b.n	80051ae <_dtoa_r+0x28e>
 80051c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80051c8:	e7d7      	b.n	800517a <_dtoa_r+0x25a>
 80051ca:	3101      	adds	r1, #1
 80051cc:	0052      	lsls	r2, r2, #1
 80051ce:	e7d8      	b.n	8005182 <_dtoa_r+0x262>
 80051d0:	636f4361 	.word	0x636f4361
 80051d4:	3fd287a7 	.word	0x3fd287a7
 80051d8:	8b60c8b3 	.word	0x8b60c8b3
 80051dc:	3fc68a28 	.word	0x3fc68a28
 80051e0:	509f79fb 	.word	0x509f79fb
 80051e4:	3fd34413 	.word	0x3fd34413
 80051e8:	08006bff 	.word	0x08006bff
 80051ec:	08006c16 	.word	0x08006c16
 80051f0:	7ff00000 	.word	0x7ff00000
 80051f4:	08006bfb 	.word	0x08006bfb
 80051f8:	08006bcf 	.word	0x08006bcf
 80051fc:	08006bce 	.word	0x08006bce
 8005200:	3ff80000 	.word	0x3ff80000
 8005204:	08006d10 	.word	0x08006d10
 8005208:	08006c6e 	.word	0x08006c6e
 800520c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005210:	6018      	str	r0, [r3, #0]
 8005212:	9b07      	ldr	r3, [sp, #28]
 8005214:	2b0e      	cmp	r3, #14
 8005216:	f200 80a4 	bhi.w	8005362 <_dtoa_r+0x442>
 800521a:	2c00      	cmp	r4, #0
 800521c:	f000 80a1 	beq.w	8005362 <_dtoa_r+0x442>
 8005220:	2f00      	cmp	r7, #0
 8005222:	dd33      	ble.n	800528c <_dtoa_r+0x36c>
 8005224:	4b86      	ldr	r3, [pc, #536]	@ (8005440 <_dtoa_r+0x520>)
 8005226:	f007 020f 	and.w	r2, r7, #15
 800522a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800522e:	05f8      	lsls	r0, r7, #23
 8005230:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005234:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005238:	ea4f 1427 	mov.w	r4, r7, asr #4
 800523c:	d516      	bpl.n	800526c <_dtoa_r+0x34c>
 800523e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005242:	4b80      	ldr	r3, [pc, #512]	@ (8005444 <_dtoa_r+0x524>)
 8005244:	2603      	movs	r6, #3
 8005246:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800524a:	f7fb fa6f 	bl	800072c <__aeabi_ddiv>
 800524e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005252:	f004 040f 	and.w	r4, r4, #15
 8005256:	4d7b      	ldr	r5, [pc, #492]	@ (8005444 <_dtoa_r+0x524>)
 8005258:	b954      	cbnz	r4, 8005270 <_dtoa_r+0x350>
 800525a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800525e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005262:	f7fb fa63 	bl	800072c <__aeabi_ddiv>
 8005266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800526a:	e028      	b.n	80052be <_dtoa_r+0x39e>
 800526c:	2602      	movs	r6, #2
 800526e:	e7f2      	b.n	8005256 <_dtoa_r+0x336>
 8005270:	07e1      	lsls	r1, r4, #31
 8005272:	d508      	bpl.n	8005286 <_dtoa_r+0x366>
 8005274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005278:	e9d5 2300 	ldrd	r2, r3, [r5]
 800527c:	f7fb f92c 	bl	80004d8 <__aeabi_dmul>
 8005280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005284:	3601      	adds	r6, #1
 8005286:	1064      	asrs	r4, r4, #1
 8005288:	3508      	adds	r5, #8
 800528a:	e7e5      	b.n	8005258 <_dtoa_r+0x338>
 800528c:	f000 80d2 	beq.w	8005434 <_dtoa_r+0x514>
 8005290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005294:	427c      	negs	r4, r7
 8005296:	4b6a      	ldr	r3, [pc, #424]	@ (8005440 <_dtoa_r+0x520>)
 8005298:	f004 020f 	and.w	r2, r4, #15
 800529c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	f7fb f918 	bl	80004d8 <__aeabi_dmul>
 80052a8:	2602      	movs	r6, #2
 80052aa:	2300      	movs	r3, #0
 80052ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052b0:	4d64      	ldr	r5, [pc, #400]	@ (8005444 <_dtoa_r+0x524>)
 80052b2:	1124      	asrs	r4, r4, #4
 80052b4:	2c00      	cmp	r4, #0
 80052b6:	f040 80b2 	bne.w	800541e <_dtoa_r+0x4fe>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1d3      	bne.n	8005266 <_dtoa_r+0x346>
 80052be:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80052c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80b7 	beq.w	8005438 <_dtoa_r+0x518>
 80052ca:	2200      	movs	r2, #0
 80052cc:	4620      	mov	r0, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	4b5d      	ldr	r3, [pc, #372]	@ (8005448 <_dtoa_r+0x528>)
 80052d2:	f7fb fb73 	bl	80009bc <__aeabi_dcmplt>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	f000 80ae 	beq.w	8005438 <_dtoa_r+0x518>
 80052dc:	9b07      	ldr	r3, [sp, #28]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 80aa 	beq.w	8005438 <_dtoa_r+0x518>
 80052e4:	9b08      	ldr	r3, [sp, #32]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	dd37      	ble.n	800535a <_dtoa_r+0x43a>
 80052ea:	1e7b      	subs	r3, r7, #1
 80052ec:	4620      	mov	r0, r4
 80052ee:	9304      	str	r3, [sp, #16]
 80052f0:	2200      	movs	r2, #0
 80052f2:	4629      	mov	r1, r5
 80052f4:	4b55      	ldr	r3, [pc, #340]	@ (800544c <_dtoa_r+0x52c>)
 80052f6:	f7fb f8ef 	bl	80004d8 <__aeabi_dmul>
 80052fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052fe:	9c08      	ldr	r4, [sp, #32]
 8005300:	3601      	adds	r6, #1
 8005302:	4630      	mov	r0, r6
 8005304:	f7fb f87e 	bl	8000404 <__aeabi_i2d>
 8005308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800530c:	f7fb f8e4 	bl	80004d8 <__aeabi_dmul>
 8005310:	2200      	movs	r2, #0
 8005312:	4b4f      	ldr	r3, [pc, #316]	@ (8005450 <_dtoa_r+0x530>)
 8005314:	f7fa ff2a 	bl	800016c <__adddf3>
 8005318:	4605      	mov	r5, r0
 800531a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800531e:	2c00      	cmp	r4, #0
 8005320:	f040 809a 	bne.w	8005458 <_dtoa_r+0x538>
 8005324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005328:	2200      	movs	r2, #0
 800532a:	4b4a      	ldr	r3, [pc, #296]	@ (8005454 <_dtoa_r+0x534>)
 800532c:	f7fa ff1c 	bl	8000168 <__aeabi_dsub>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005338:	462a      	mov	r2, r5
 800533a:	4633      	mov	r3, r6
 800533c:	f7fb fb5c 	bl	80009f8 <__aeabi_dcmpgt>
 8005340:	2800      	cmp	r0, #0
 8005342:	f040 828e 	bne.w	8005862 <_dtoa_r+0x942>
 8005346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800534a:	462a      	mov	r2, r5
 800534c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005350:	f7fb fb34 	bl	80009bc <__aeabi_dcmplt>
 8005354:	2800      	cmp	r0, #0
 8005356:	f040 8127 	bne.w	80055a8 <_dtoa_r+0x688>
 800535a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800535e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005362:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005364:	2b00      	cmp	r3, #0
 8005366:	f2c0 8163 	blt.w	8005630 <_dtoa_r+0x710>
 800536a:	2f0e      	cmp	r7, #14
 800536c:	f300 8160 	bgt.w	8005630 <_dtoa_r+0x710>
 8005370:	4b33      	ldr	r3, [pc, #204]	@ (8005440 <_dtoa_r+0x520>)
 8005372:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005376:	e9d3 3400 	ldrd	r3, r4, [r3]
 800537a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800537e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005380:	2b00      	cmp	r3, #0
 8005382:	da03      	bge.n	800538c <_dtoa_r+0x46c>
 8005384:	9b07      	ldr	r3, [sp, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f340 8100 	ble.w	800558c <_dtoa_r+0x66c>
 800538c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005390:	4656      	mov	r6, sl
 8005392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005396:	4620      	mov	r0, r4
 8005398:	4629      	mov	r1, r5
 800539a:	f7fb f9c7 	bl	800072c <__aeabi_ddiv>
 800539e:	f7fb fb4b 	bl	8000a38 <__aeabi_d2iz>
 80053a2:	4680      	mov	r8, r0
 80053a4:	f7fb f82e 	bl	8000404 <__aeabi_i2d>
 80053a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ac:	f7fb f894 	bl	80004d8 <__aeabi_dmul>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4620      	mov	r0, r4
 80053b6:	4629      	mov	r1, r5
 80053b8:	f7fa fed6 	bl	8000168 <__aeabi_dsub>
 80053bc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80053c0:	9d07      	ldr	r5, [sp, #28]
 80053c2:	f806 4b01 	strb.w	r4, [r6], #1
 80053c6:	eba6 040a 	sub.w	r4, r6, sl
 80053ca:	42a5      	cmp	r5, r4
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	f040 8116 	bne.w	8005600 <_dtoa_r+0x6e0>
 80053d4:	f7fa feca 	bl	800016c <__adddf3>
 80053d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053dc:	4604      	mov	r4, r0
 80053de:	460d      	mov	r5, r1
 80053e0:	f7fb fb0a 	bl	80009f8 <__aeabi_dcmpgt>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	f040 80f8 	bne.w	80055da <_dtoa_r+0x6ba>
 80053ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ee:	4620      	mov	r0, r4
 80053f0:	4629      	mov	r1, r5
 80053f2:	f7fb fad9 	bl	80009a8 <__aeabi_dcmpeq>
 80053f6:	b118      	cbz	r0, 8005400 <_dtoa_r+0x4e0>
 80053f8:	f018 0f01 	tst.w	r8, #1
 80053fc:	f040 80ed 	bne.w	80055da <_dtoa_r+0x6ba>
 8005400:	4649      	mov	r1, r9
 8005402:	4658      	mov	r0, fp
 8005404:	f000 fc92 	bl	8005d2c <_Bfree>
 8005408:	2300      	movs	r3, #0
 800540a:	7033      	strb	r3, [r6, #0]
 800540c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800540e:	3701      	adds	r7, #1
 8005410:	601f      	str	r7, [r3, #0]
 8005412:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 8320 	beq.w	8005a5a <_dtoa_r+0xb3a>
 800541a:	601e      	str	r6, [r3, #0]
 800541c:	e31d      	b.n	8005a5a <_dtoa_r+0xb3a>
 800541e:	07e2      	lsls	r2, r4, #31
 8005420:	d505      	bpl.n	800542e <_dtoa_r+0x50e>
 8005422:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005426:	f7fb f857 	bl	80004d8 <__aeabi_dmul>
 800542a:	2301      	movs	r3, #1
 800542c:	3601      	adds	r6, #1
 800542e:	1064      	asrs	r4, r4, #1
 8005430:	3508      	adds	r5, #8
 8005432:	e73f      	b.n	80052b4 <_dtoa_r+0x394>
 8005434:	2602      	movs	r6, #2
 8005436:	e742      	b.n	80052be <_dtoa_r+0x39e>
 8005438:	9c07      	ldr	r4, [sp, #28]
 800543a:	9704      	str	r7, [sp, #16]
 800543c:	e761      	b.n	8005302 <_dtoa_r+0x3e2>
 800543e:	bf00      	nop
 8005440:	08006d10 	.word	0x08006d10
 8005444:	08006ce8 	.word	0x08006ce8
 8005448:	3ff00000 	.word	0x3ff00000
 800544c:	40240000 	.word	0x40240000
 8005450:	401c0000 	.word	0x401c0000
 8005454:	40140000 	.word	0x40140000
 8005458:	4b70      	ldr	r3, [pc, #448]	@ (800561c <_dtoa_r+0x6fc>)
 800545a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800545c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005460:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005464:	4454      	add	r4, sl
 8005466:	2900      	cmp	r1, #0
 8005468:	d045      	beq.n	80054f6 <_dtoa_r+0x5d6>
 800546a:	2000      	movs	r0, #0
 800546c:	496c      	ldr	r1, [pc, #432]	@ (8005620 <_dtoa_r+0x700>)
 800546e:	f7fb f95d 	bl	800072c <__aeabi_ddiv>
 8005472:	4633      	mov	r3, r6
 8005474:	462a      	mov	r2, r5
 8005476:	f7fa fe77 	bl	8000168 <__aeabi_dsub>
 800547a:	4656      	mov	r6, sl
 800547c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005484:	f7fb fad8 	bl	8000a38 <__aeabi_d2iz>
 8005488:	4605      	mov	r5, r0
 800548a:	f7fa ffbb 	bl	8000404 <__aeabi_i2d>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005496:	f7fa fe67 	bl	8000168 <__aeabi_dsub>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	3530      	adds	r5, #48	@ 0x30
 80054a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054a8:	f806 5b01 	strb.w	r5, [r6], #1
 80054ac:	f7fb fa86 	bl	80009bc <__aeabi_dcmplt>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d163      	bne.n	800557c <_dtoa_r+0x65c>
 80054b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054b8:	2000      	movs	r0, #0
 80054ba:	495a      	ldr	r1, [pc, #360]	@ (8005624 <_dtoa_r+0x704>)
 80054bc:	f7fa fe54 	bl	8000168 <__aeabi_dsub>
 80054c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054c4:	f7fb fa7a 	bl	80009bc <__aeabi_dcmplt>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	f040 8087 	bne.w	80055dc <_dtoa_r+0x6bc>
 80054ce:	42a6      	cmp	r6, r4
 80054d0:	f43f af43 	beq.w	800535a <_dtoa_r+0x43a>
 80054d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80054d8:	2200      	movs	r2, #0
 80054da:	4b53      	ldr	r3, [pc, #332]	@ (8005628 <_dtoa_r+0x708>)
 80054dc:	f7fa fffc 	bl	80004d8 <__aeabi_dmul>
 80054e0:	2200      	movs	r2, #0
 80054e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80054e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ea:	4b4f      	ldr	r3, [pc, #316]	@ (8005628 <_dtoa_r+0x708>)
 80054ec:	f7fa fff4 	bl	80004d8 <__aeabi_dmul>
 80054f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054f4:	e7c4      	b.n	8005480 <_dtoa_r+0x560>
 80054f6:	4631      	mov	r1, r6
 80054f8:	4628      	mov	r0, r5
 80054fa:	f7fa ffed 	bl	80004d8 <__aeabi_dmul>
 80054fe:	4656      	mov	r6, sl
 8005500:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005504:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800550a:	f7fb fa95 	bl	8000a38 <__aeabi_d2iz>
 800550e:	4605      	mov	r5, r0
 8005510:	f7fa ff78 	bl	8000404 <__aeabi_i2d>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800551c:	f7fa fe24 	bl	8000168 <__aeabi_dsub>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	3530      	adds	r5, #48	@ 0x30
 8005526:	f806 5b01 	strb.w	r5, [r6], #1
 800552a:	42a6      	cmp	r6, r4
 800552c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	d124      	bne.n	8005580 <_dtoa_r+0x660>
 8005536:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800553a:	4b39      	ldr	r3, [pc, #228]	@ (8005620 <_dtoa_r+0x700>)
 800553c:	f7fa fe16 	bl	800016c <__adddf3>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005548:	f7fb fa56 	bl	80009f8 <__aeabi_dcmpgt>
 800554c:	2800      	cmp	r0, #0
 800554e:	d145      	bne.n	80055dc <_dtoa_r+0x6bc>
 8005550:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005554:	2000      	movs	r0, #0
 8005556:	4932      	ldr	r1, [pc, #200]	@ (8005620 <_dtoa_r+0x700>)
 8005558:	f7fa fe06 	bl	8000168 <__aeabi_dsub>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005564:	f7fb fa2a 	bl	80009bc <__aeabi_dcmplt>
 8005568:	2800      	cmp	r0, #0
 800556a:	f43f aef6 	beq.w	800535a <_dtoa_r+0x43a>
 800556e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005570:	1e73      	subs	r3, r6, #1
 8005572:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005574:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005578:	2b30      	cmp	r3, #48	@ 0x30
 800557a:	d0f8      	beq.n	800556e <_dtoa_r+0x64e>
 800557c:	9f04      	ldr	r7, [sp, #16]
 800557e:	e73f      	b.n	8005400 <_dtoa_r+0x4e0>
 8005580:	4b29      	ldr	r3, [pc, #164]	@ (8005628 <_dtoa_r+0x708>)
 8005582:	f7fa ffa9 	bl	80004d8 <__aeabi_dmul>
 8005586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800558a:	e7bc      	b.n	8005506 <_dtoa_r+0x5e6>
 800558c:	d10c      	bne.n	80055a8 <_dtoa_r+0x688>
 800558e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005592:	2200      	movs	r2, #0
 8005594:	4b25      	ldr	r3, [pc, #148]	@ (800562c <_dtoa_r+0x70c>)
 8005596:	f7fa ff9f 	bl	80004d8 <__aeabi_dmul>
 800559a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800559e:	f7fb fa21 	bl	80009e4 <__aeabi_dcmpge>
 80055a2:	2800      	cmp	r0, #0
 80055a4:	f000 815b 	beq.w	800585e <_dtoa_r+0x93e>
 80055a8:	2400      	movs	r4, #0
 80055aa:	4625      	mov	r5, r4
 80055ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80055ae:	4656      	mov	r6, sl
 80055b0:	43db      	mvns	r3, r3
 80055b2:	9304      	str	r3, [sp, #16]
 80055b4:	2700      	movs	r7, #0
 80055b6:	4621      	mov	r1, r4
 80055b8:	4658      	mov	r0, fp
 80055ba:	f000 fbb7 	bl	8005d2c <_Bfree>
 80055be:	2d00      	cmp	r5, #0
 80055c0:	d0dc      	beq.n	800557c <_dtoa_r+0x65c>
 80055c2:	b12f      	cbz	r7, 80055d0 <_dtoa_r+0x6b0>
 80055c4:	42af      	cmp	r7, r5
 80055c6:	d003      	beq.n	80055d0 <_dtoa_r+0x6b0>
 80055c8:	4639      	mov	r1, r7
 80055ca:	4658      	mov	r0, fp
 80055cc:	f000 fbae 	bl	8005d2c <_Bfree>
 80055d0:	4629      	mov	r1, r5
 80055d2:	4658      	mov	r0, fp
 80055d4:	f000 fbaa 	bl	8005d2c <_Bfree>
 80055d8:	e7d0      	b.n	800557c <_dtoa_r+0x65c>
 80055da:	9704      	str	r7, [sp, #16]
 80055dc:	4633      	mov	r3, r6
 80055de:	461e      	mov	r6, r3
 80055e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055e4:	2a39      	cmp	r2, #57	@ 0x39
 80055e6:	d107      	bne.n	80055f8 <_dtoa_r+0x6d8>
 80055e8:	459a      	cmp	sl, r3
 80055ea:	d1f8      	bne.n	80055de <_dtoa_r+0x6be>
 80055ec:	9a04      	ldr	r2, [sp, #16]
 80055ee:	3201      	adds	r2, #1
 80055f0:	9204      	str	r2, [sp, #16]
 80055f2:	2230      	movs	r2, #48	@ 0x30
 80055f4:	f88a 2000 	strb.w	r2, [sl]
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	3201      	adds	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e7bd      	b.n	800557c <_dtoa_r+0x65c>
 8005600:	2200      	movs	r2, #0
 8005602:	4b09      	ldr	r3, [pc, #36]	@ (8005628 <_dtoa_r+0x708>)
 8005604:	f7fa ff68 	bl	80004d8 <__aeabi_dmul>
 8005608:	2200      	movs	r2, #0
 800560a:	2300      	movs	r3, #0
 800560c:	4604      	mov	r4, r0
 800560e:	460d      	mov	r5, r1
 8005610:	f7fb f9ca 	bl	80009a8 <__aeabi_dcmpeq>
 8005614:	2800      	cmp	r0, #0
 8005616:	f43f aebc 	beq.w	8005392 <_dtoa_r+0x472>
 800561a:	e6f1      	b.n	8005400 <_dtoa_r+0x4e0>
 800561c:	08006d10 	.word	0x08006d10
 8005620:	3fe00000 	.word	0x3fe00000
 8005624:	3ff00000 	.word	0x3ff00000
 8005628:	40240000 	.word	0x40240000
 800562c:	40140000 	.word	0x40140000
 8005630:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005632:	2a00      	cmp	r2, #0
 8005634:	f000 80db 	beq.w	80057ee <_dtoa_r+0x8ce>
 8005638:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800563a:	2a01      	cmp	r2, #1
 800563c:	f300 80bf 	bgt.w	80057be <_dtoa_r+0x89e>
 8005640:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005642:	2a00      	cmp	r2, #0
 8005644:	f000 80b7 	beq.w	80057b6 <_dtoa_r+0x896>
 8005648:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800564c:	4646      	mov	r6, r8
 800564e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005650:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005652:	2101      	movs	r1, #1
 8005654:	441a      	add	r2, r3
 8005656:	4658      	mov	r0, fp
 8005658:	4498      	add	r8, r3
 800565a:	9209      	str	r2, [sp, #36]	@ 0x24
 800565c:	f000 fc1a 	bl	8005e94 <__i2b>
 8005660:	4605      	mov	r5, r0
 8005662:	b15e      	cbz	r6, 800567c <_dtoa_r+0x75c>
 8005664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005666:	2b00      	cmp	r3, #0
 8005668:	dd08      	ble.n	800567c <_dtoa_r+0x75c>
 800566a:	42b3      	cmp	r3, r6
 800566c:	bfa8      	it	ge
 800566e:	4633      	movge	r3, r6
 8005670:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005672:	eba8 0803 	sub.w	r8, r8, r3
 8005676:	1af6      	subs	r6, r6, r3
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	9309      	str	r3, [sp, #36]	@ 0x24
 800567c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800567e:	b1f3      	cbz	r3, 80056be <_dtoa_r+0x79e>
 8005680:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 80b7 	beq.w	80057f6 <_dtoa_r+0x8d6>
 8005688:	b18c      	cbz	r4, 80056ae <_dtoa_r+0x78e>
 800568a:	4629      	mov	r1, r5
 800568c:	4622      	mov	r2, r4
 800568e:	4658      	mov	r0, fp
 8005690:	f000 fcbe 	bl	8006010 <__pow5mult>
 8005694:	464a      	mov	r2, r9
 8005696:	4601      	mov	r1, r0
 8005698:	4605      	mov	r5, r0
 800569a:	4658      	mov	r0, fp
 800569c:	f000 fc10 	bl	8005ec0 <__multiply>
 80056a0:	4649      	mov	r1, r9
 80056a2:	9004      	str	r0, [sp, #16]
 80056a4:	4658      	mov	r0, fp
 80056a6:	f000 fb41 	bl	8005d2c <_Bfree>
 80056aa:	9b04      	ldr	r3, [sp, #16]
 80056ac:	4699      	mov	r9, r3
 80056ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056b0:	1b1a      	subs	r2, r3, r4
 80056b2:	d004      	beq.n	80056be <_dtoa_r+0x79e>
 80056b4:	4649      	mov	r1, r9
 80056b6:	4658      	mov	r0, fp
 80056b8:	f000 fcaa 	bl	8006010 <__pow5mult>
 80056bc:	4681      	mov	r9, r0
 80056be:	2101      	movs	r1, #1
 80056c0:	4658      	mov	r0, fp
 80056c2:	f000 fbe7 	bl	8005e94 <__i2b>
 80056c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056c8:	4604      	mov	r4, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 81c9 	beq.w	8005a62 <_dtoa_r+0xb42>
 80056d0:	461a      	mov	r2, r3
 80056d2:	4601      	mov	r1, r0
 80056d4:	4658      	mov	r0, fp
 80056d6:	f000 fc9b 	bl	8006010 <__pow5mult>
 80056da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056dc:	4604      	mov	r4, r0
 80056de:	2b01      	cmp	r3, #1
 80056e0:	f300 808f 	bgt.w	8005802 <_dtoa_r+0x8e2>
 80056e4:	9b02      	ldr	r3, [sp, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f040 8087 	bne.w	80057fa <_dtoa_r+0x8da>
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 8083 	bne.w	80057fe <_dtoa_r+0x8de>
 80056f8:	9b03      	ldr	r3, [sp, #12]
 80056fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056fe:	0d1b      	lsrs	r3, r3, #20
 8005700:	051b      	lsls	r3, r3, #20
 8005702:	b12b      	cbz	r3, 8005710 <_dtoa_r+0x7f0>
 8005704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005706:	f108 0801 	add.w	r8, r8, #1
 800570a:	3301      	adds	r3, #1
 800570c:	9309      	str	r3, [sp, #36]	@ 0x24
 800570e:	2301      	movs	r3, #1
 8005710:	930a      	str	r3, [sp, #40]	@ 0x28
 8005712:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 81aa 	beq.w	8005a6e <_dtoa_r+0xb4e>
 800571a:	6923      	ldr	r3, [r4, #16]
 800571c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005720:	6918      	ldr	r0, [r3, #16]
 8005722:	f000 fb6b 	bl	8005dfc <__hi0bits>
 8005726:	f1c0 0020 	rsb	r0, r0, #32
 800572a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800572c:	4418      	add	r0, r3
 800572e:	f010 001f 	ands.w	r0, r0, #31
 8005732:	d071      	beq.n	8005818 <_dtoa_r+0x8f8>
 8005734:	f1c0 0320 	rsb	r3, r0, #32
 8005738:	2b04      	cmp	r3, #4
 800573a:	dd65      	ble.n	8005808 <_dtoa_r+0x8e8>
 800573c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800573e:	f1c0 001c 	rsb	r0, r0, #28
 8005742:	4403      	add	r3, r0
 8005744:	4480      	add	r8, r0
 8005746:	4406      	add	r6, r0
 8005748:	9309      	str	r3, [sp, #36]	@ 0x24
 800574a:	f1b8 0f00 	cmp.w	r8, #0
 800574e:	dd05      	ble.n	800575c <_dtoa_r+0x83c>
 8005750:	4649      	mov	r1, r9
 8005752:	4642      	mov	r2, r8
 8005754:	4658      	mov	r0, fp
 8005756:	f000 fcb5 	bl	80060c4 <__lshift>
 800575a:	4681      	mov	r9, r0
 800575c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	dd05      	ble.n	800576e <_dtoa_r+0x84e>
 8005762:	4621      	mov	r1, r4
 8005764:	461a      	mov	r2, r3
 8005766:	4658      	mov	r0, fp
 8005768:	f000 fcac 	bl	80060c4 <__lshift>
 800576c:	4604      	mov	r4, r0
 800576e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d053      	beq.n	800581c <_dtoa_r+0x8fc>
 8005774:	4621      	mov	r1, r4
 8005776:	4648      	mov	r0, r9
 8005778:	f000 fd10 	bl	800619c <__mcmp>
 800577c:	2800      	cmp	r0, #0
 800577e:	da4d      	bge.n	800581c <_dtoa_r+0x8fc>
 8005780:	1e7b      	subs	r3, r7, #1
 8005782:	4649      	mov	r1, r9
 8005784:	9304      	str	r3, [sp, #16]
 8005786:	220a      	movs	r2, #10
 8005788:	2300      	movs	r3, #0
 800578a:	4658      	mov	r0, fp
 800578c:	f000 faf0 	bl	8005d70 <__multadd>
 8005790:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005792:	4681      	mov	r9, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 816c 	beq.w	8005a72 <_dtoa_r+0xb52>
 800579a:	2300      	movs	r3, #0
 800579c:	4629      	mov	r1, r5
 800579e:	220a      	movs	r2, #10
 80057a0:	4658      	mov	r0, fp
 80057a2:	f000 fae5 	bl	8005d70 <__multadd>
 80057a6:	9b08      	ldr	r3, [sp, #32]
 80057a8:	4605      	mov	r5, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	dc61      	bgt.n	8005872 <_dtoa_r+0x952>
 80057ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	dc3b      	bgt.n	800582c <_dtoa_r+0x90c>
 80057b4:	e05d      	b.n	8005872 <_dtoa_r+0x952>
 80057b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80057bc:	e746      	b.n	800564c <_dtoa_r+0x72c>
 80057be:	9b07      	ldr	r3, [sp, #28]
 80057c0:	1e5c      	subs	r4, r3, #1
 80057c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057c4:	42a3      	cmp	r3, r4
 80057c6:	bfbf      	itttt	lt
 80057c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80057ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80057cc:	1ae3      	sublt	r3, r4, r3
 80057ce:	18d2      	addlt	r2, r2, r3
 80057d0:	bfa8      	it	ge
 80057d2:	1b1c      	subge	r4, r3, r4
 80057d4:	9b07      	ldr	r3, [sp, #28]
 80057d6:	bfbe      	ittt	lt
 80057d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80057da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80057dc:	2400      	movlt	r4, #0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bfb5      	itete	lt
 80057e2:	eba8 0603 	sublt.w	r6, r8, r3
 80057e6:	4646      	movge	r6, r8
 80057e8:	2300      	movlt	r3, #0
 80057ea:	9b07      	ldrge	r3, [sp, #28]
 80057ec:	e730      	b.n	8005650 <_dtoa_r+0x730>
 80057ee:	4646      	mov	r6, r8
 80057f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80057f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80057f4:	e735      	b.n	8005662 <_dtoa_r+0x742>
 80057f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057f8:	e75c      	b.n	80056b4 <_dtoa_r+0x794>
 80057fa:	2300      	movs	r3, #0
 80057fc:	e788      	b.n	8005710 <_dtoa_r+0x7f0>
 80057fe:	9b02      	ldr	r3, [sp, #8]
 8005800:	e786      	b.n	8005710 <_dtoa_r+0x7f0>
 8005802:	2300      	movs	r3, #0
 8005804:	930a      	str	r3, [sp, #40]	@ 0x28
 8005806:	e788      	b.n	800571a <_dtoa_r+0x7fa>
 8005808:	d09f      	beq.n	800574a <_dtoa_r+0x82a>
 800580a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800580c:	331c      	adds	r3, #28
 800580e:	441a      	add	r2, r3
 8005810:	4498      	add	r8, r3
 8005812:	441e      	add	r6, r3
 8005814:	9209      	str	r2, [sp, #36]	@ 0x24
 8005816:	e798      	b.n	800574a <_dtoa_r+0x82a>
 8005818:	4603      	mov	r3, r0
 800581a:	e7f6      	b.n	800580a <_dtoa_r+0x8ea>
 800581c:	9b07      	ldr	r3, [sp, #28]
 800581e:	9704      	str	r7, [sp, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	dc20      	bgt.n	8005866 <_dtoa_r+0x946>
 8005824:	9308      	str	r3, [sp, #32]
 8005826:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005828:	2b02      	cmp	r3, #2
 800582a:	dd1e      	ble.n	800586a <_dtoa_r+0x94a>
 800582c:	9b08      	ldr	r3, [sp, #32]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f47f aebc 	bne.w	80055ac <_dtoa_r+0x68c>
 8005834:	4621      	mov	r1, r4
 8005836:	2205      	movs	r2, #5
 8005838:	4658      	mov	r0, fp
 800583a:	f000 fa99 	bl	8005d70 <__multadd>
 800583e:	4601      	mov	r1, r0
 8005840:	4604      	mov	r4, r0
 8005842:	4648      	mov	r0, r9
 8005844:	f000 fcaa 	bl	800619c <__mcmp>
 8005848:	2800      	cmp	r0, #0
 800584a:	f77f aeaf 	ble.w	80055ac <_dtoa_r+0x68c>
 800584e:	2331      	movs	r3, #49	@ 0x31
 8005850:	4656      	mov	r6, sl
 8005852:	f806 3b01 	strb.w	r3, [r6], #1
 8005856:	9b04      	ldr	r3, [sp, #16]
 8005858:	3301      	adds	r3, #1
 800585a:	9304      	str	r3, [sp, #16]
 800585c:	e6aa      	b.n	80055b4 <_dtoa_r+0x694>
 800585e:	9c07      	ldr	r4, [sp, #28]
 8005860:	9704      	str	r7, [sp, #16]
 8005862:	4625      	mov	r5, r4
 8005864:	e7f3      	b.n	800584e <_dtoa_r+0x92e>
 8005866:	9b07      	ldr	r3, [sp, #28]
 8005868:	9308      	str	r3, [sp, #32]
 800586a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8104 	beq.w	8005a7a <_dtoa_r+0xb5a>
 8005872:	2e00      	cmp	r6, #0
 8005874:	dd05      	ble.n	8005882 <_dtoa_r+0x962>
 8005876:	4629      	mov	r1, r5
 8005878:	4632      	mov	r2, r6
 800587a:	4658      	mov	r0, fp
 800587c:	f000 fc22 	bl	80060c4 <__lshift>
 8005880:	4605      	mov	r5, r0
 8005882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005884:	2b00      	cmp	r3, #0
 8005886:	d05a      	beq.n	800593e <_dtoa_r+0xa1e>
 8005888:	4658      	mov	r0, fp
 800588a:	6869      	ldr	r1, [r5, #4]
 800588c:	f000 fa0e 	bl	8005cac <_Balloc>
 8005890:	4606      	mov	r6, r0
 8005892:	b928      	cbnz	r0, 80058a0 <_dtoa_r+0x980>
 8005894:	4602      	mov	r2, r0
 8005896:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800589a:	4b83      	ldr	r3, [pc, #524]	@ (8005aa8 <_dtoa_r+0xb88>)
 800589c:	f7ff bb54 	b.w	8004f48 <_dtoa_r+0x28>
 80058a0:	692a      	ldr	r2, [r5, #16]
 80058a2:	f105 010c 	add.w	r1, r5, #12
 80058a6:	3202      	adds	r2, #2
 80058a8:	0092      	lsls	r2, r2, #2
 80058aa:	300c      	adds	r0, #12
 80058ac:	f000 fffa 	bl	80068a4 <memcpy>
 80058b0:	2201      	movs	r2, #1
 80058b2:	4631      	mov	r1, r6
 80058b4:	4658      	mov	r0, fp
 80058b6:	f000 fc05 	bl	80060c4 <__lshift>
 80058ba:	462f      	mov	r7, r5
 80058bc:	4605      	mov	r5, r0
 80058be:	f10a 0301 	add.w	r3, sl, #1
 80058c2:	9307      	str	r3, [sp, #28]
 80058c4:	9b08      	ldr	r3, [sp, #32]
 80058c6:	4453      	add	r3, sl
 80058c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058ca:	9b02      	ldr	r3, [sp, #8]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80058d2:	9b07      	ldr	r3, [sp, #28]
 80058d4:	4621      	mov	r1, r4
 80058d6:	3b01      	subs	r3, #1
 80058d8:	4648      	mov	r0, r9
 80058da:	9302      	str	r3, [sp, #8]
 80058dc:	f7ff fa97 	bl	8004e0e <quorem>
 80058e0:	4639      	mov	r1, r7
 80058e2:	9008      	str	r0, [sp, #32]
 80058e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80058e8:	4648      	mov	r0, r9
 80058ea:	f000 fc57 	bl	800619c <__mcmp>
 80058ee:	462a      	mov	r2, r5
 80058f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80058f2:	4621      	mov	r1, r4
 80058f4:	4658      	mov	r0, fp
 80058f6:	f000 fc6d 	bl	80061d4 <__mdiff>
 80058fa:	68c2      	ldr	r2, [r0, #12]
 80058fc:	4606      	mov	r6, r0
 80058fe:	bb02      	cbnz	r2, 8005942 <_dtoa_r+0xa22>
 8005900:	4601      	mov	r1, r0
 8005902:	4648      	mov	r0, r9
 8005904:	f000 fc4a 	bl	800619c <__mcmp>
 8005908:	4602      	mov	r2, r0
 800590a:	4631      	mov	r1, r6
 800590c:	4658      	mov	r0, fp
 800590e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005910:	f000 fa0c 	bl	8005d2c <_Bfree>
 8005914:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005916:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005918:	9e07      	ldr	r6, [sp, #28]
 800591a:	ea43 0102 	orr.w	r1, r3, r2
 800591e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005920:	4319      	orrs	r1, r3
 8005922:	d110      	bne.n	8005946 <_dtoa_r+0xa26>
 8005924:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005928:	d029      	beq.n	800597e <_dtoa_r+0xa5e>
 800592a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	dd02      	ble.n	8005936 <_dtoa_r+0xa16>
 8005930:	9b08      	ldr	r3, [sp, #32]
 8005932:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005936:	9b02      	ldr	r3, [sp, #8]
 8005938:	f883 8000 	strb.w	r8, [r3]
 800593c:	e63b      	b.n	80055b6 <_dtoa_r+0x696>
 800593e:	4628      	mov	r0, r5
 8005940:	e7bb      	b.n	80058ba <_dtoa_r+0x99a>
 8005942:	2201      	movs	r2, #1
 8005944:	e7e1      	b.n	800590a <_dtoa_r+0x9ea>
 8005946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	db04      	blt.n	8005956 <_dtoa_r+0xa36>
 800594c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800594e:	430b      	orrs	r3, r1
 8005950:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005952:	430b      	orrs	r3, r1
 8005954:	d120      	bne.n	8005998 <_dtoa_r+0xa78>
 8005956:	2a00      	cmp	r2, #0
 8005958:	dded      	ble.n	8005936 <_dtoa_r+0xa16>
 800595a:	4649      	mov	r1, r9
 800595c:	2201      	movs	r2, #1
 800595e:	4658      	mov	r0, fp
 8005960:	f000 fbb0 	bl	80060c4 <__lshift>
 8005964:	4621      	mov	r1, r4
 8005966:	4681      	mov	r9, r0
 8005968:	f000 fc18 	bl	800619c <__mcmp>
 800596c:	2800      	cmp	r0, #0
 800596e:	dc03      	bgt.n	8005978 <_dtoa_r+0xa58>
 8005970:	d1e1      	bne.n	8005936 <_dtoa_r+0xa16>
 8005972:	f018 0f01 	tst.w	r8, #1
 8005976:	d0de      	beq.n	8005936 <_dtoa_r+0xa16>
 8005978:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800597c:	d1d8      	bne.n	8005930 <_dtoa_r+0xa10>
 800597e:	2339      	movs	r3, #57	@ 0x39
 8005980:	9a02      	ldr	r2, [sp, #8]
 8005982:	7013      	strb	r3, [r2, #0]
 8005984:	4633      	mov	r3, r6
 8005986:	461e      	mov	r6, r3
 8005988:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800598c:	3b01      	subs	r3, #1
 800598e:	2a39      	cmp	r2, #57	@ 0x39
 8005990:	d052      	beq.n	8005a38 <_dtoa_r+0xb18>
 8005992:	3201      	adds	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	e60e      	b.n	80055b6 <_dtoa_r+0x696>
 8005998:	2a00      	cmp	r2, #0
 800599a:	dd07      	ble.n	80059ac <_dtoa_r+0xa8c>
 800599c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059a0:	d0ed      	beq.n	800597e <_dtoa_r+0xa5e>
 80059a2:	9a02      	ldr	r2, [sp, #8]
 80059a4:	f108 0301 	add.w	r3, r8, #1
 80059a8:	7013      	strb	r3, [r2, #0]
 80059aa:	e604      	b.n	80055b6 <_dtoa_r+0x696>
 80059ac:	9b07      	ldr	r3, [sp, #28]
 80059ae:	9a07      	ldr	r2, [sp, #28]
 80059b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80059b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d028      	beq.n	8005a0c <_dtoa_r+0xaec>
 80059ba:	4649      	mov	r1, r9
 80059bc:	2300      	movs	r3, #0
 80059be:	220a      	movs	r2, #10
 80059c0:	4658      	mov	r0, fp
 80059c2:	f000 f9d5 	bl	8005d70 <__multadd>
 80059c6:	42af      	cmp	r7, r5
 80059c8:	4681      	mov	r9, r0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	f04f 020a 	mov.w	r2, #10
 80059d2:	4639      	mov	r1, r7
 80059d4:	4658      	mov	r0, fp
 80059d6:	d107      	bne.n	80059e8 <_dtoa_r+0xac8>
 80059d8:	f000 f9ca 	bl	8005d70 <__multadd>
 80059dc:	4607      	mov	r7, r0
 80059de:	4605      	mov	r5, r0
 80059e0:	9b07      	ldr	r3, [sp, #28]
 80059e2:	3301      	adds	r3, #1
 80059e4:	9307      	str	r3, [sp, #28]
 80059e6:	e774      	b.n	80058d2 <_dtoa_r+0x9b2>
 80059e8:	f000 f9c2 	bl	8005d70 <__multadd>
 80059ec:	4629      	mov	r1, r5
 80059ee:	4607      	mov	r7, r0
 80059f0:	2300      	movs	r3, #0
 80059f2:	220a      	movs	r2, #10
 80059f4:	4658      	mov	r0, fp
 80059f6:	f000 f9bb 	bl	8005d70 <__multadd>
 80059fa:	4605      	mov	r5, r0
 80059fc:	e7f0      	b.n	80059e0 <_dtoa_r+0xac0>
 80059fe:	9b08      	ldr	r3, [sp, #32]
 8005a00:	2700      	movs	r7, #0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	bfcc      	ite	gt
 8005a06:	461e      	movgt	r6, r3
 8005a08:	2601      	movle	r6, #1
 8005a0a:	4456      	add	r6, sl
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	2201      	movs	r2, #1
 8005a10:	4658      	mov	r0, fp
 8005a12:	f000 fb57 	bl	80060c4 <__lshift>
 8005a16:	4621      	mov	r1, r4
 8005a18:	4681      	mov	r9, r0
 8005a1a:	f000 fbbf 	bl	800619c <__mcmp>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	dcb0      	bgt.n	8005984 <_dtoa_r+0xa64>
 8005a22:	d102      	bne.n	8005a2a <_dtoa_r+0xb0a>
 8005a24:	f018 0f01 	tst.w	r8, #1
 8005a28:	d1ac      	bne.n	8005984 <_dtoa_r+0xa64>
 8005a2a:	4633      	mov	r3, r6
 8005a2c:	461e      	mov	r6, r3
 8005a2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a32:	2a30      	cmp	r2, #48	@ 0x30
 8005a34:	d0fa      	beq.n	8005a2c <_dtoa_r+0xb0c>
 8005a36:	e5be      	b.n	80055b6 <_dtoa_r+0x696>
 8005a38:	459a      	cmp	sl, r3
 8005a3a:	d1a4      	bne.n	8005986 <_dtoa_r+0xa66>
 8005a3c:	9b04      	ldr	r3, [sp, #16]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	9304      	str	r3, [sp, #16]
 8005a42:	2331      	movs	r3, #49	@ 0x31
 8005a44:	f88a 3000 	strb.w	r3, [sl]
 8005a48:	e5b5      	b.n	80055b6 <_dtoa_r+0x696>
 8005a4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005a4c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005aac <_dtoa_r+0xb8c>
 8005a50:	b11b      	cbz	r3, 8005a5a <_dtoa_r+0xb3a>
 8005a52:	f10a 0308 	add.w	r3, sl, #8
 8005a56:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	4650      	mov	r0, sl
 8005a5c:	b017      	add	sp, #92	@ 0x5c
 8005a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	f77f ae3d 	ble.w	80056e4 <_dtoa_r+0x7c4>
 8005a6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a6e:	2001      	movs	r0, #1
 8005a70:	e65b      	b.n	800572a <_dtoa_r+0x80a>
 8005a72:	9b08      	ldr	r3, [sp, #32]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f77f aed6 	ble.w	8005826 <_dtoa_r+0x906>
 8005a7a:	4656      	mov	r6, sl
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	4648      	mov	r0, r9
 8005a80:	f7ff f9c5 	bl	8004e0e <quorem>
 8005a84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005a88:	9b08      	ldr	r3, [sp, #32]
 8005a8a:	f806 8b01 	strb.w	r8, [r6], #1
 8005a8e:	eba6 020a 	sub.w	r2, r6, sl
 8005a92:	4293      	cmp	r3, r2
 8005a94:	ddb3      	ble.n	80059fe <_dtoa_r+0xade>
 8005a96:	4649      	mov	r1, r9
 8005a98:	2300      	movs	r3, #0
 8005a9a:	220a      	movs	r2, #10
 8005a9c:	4658      	mov	r0, fp
 8005a9e:	f000 f967 	bl	8005d70 <__multadd>
 8005aa2:	4681      	mov	r9, r0
 8005aa4:	e7ea      	b.n	8005a7c <_dtoa_r+0xb5c>
 8005aa6:	bf00      	nop
 8005aa8:	08006c6e 	.word	0x08006c6e
 8005aac:	08006bf2 	.word	0x08006bf2

08005ab0 <_free_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	d040      	beq.n	8005b3a <_free_r+0x8a>
 8005ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005abc:	1f0c      	subs	r4, r1, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bfb8      	it	lt
 8005ac2:	18e4      	addlt	r4, r4, r3
 8005ac4:	f000 f8e6 	bl	8005c94 <__malloc_lock>
 8005ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b3c <_free_r+0x8c>)
 8005aca:	6813      	ldr	r3, [r2, #0]
 8005acc:	b933      	cbnz	r3, 8005adc <_free_r+0x2c>
 8005ace:	6063      	str	r3, [r4, #4]
 8005ad0:	6014      	str	r4, [r2, #0]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ad8:	f000 b8e2 	b.w	8005ca0 <__malloc_unlock>
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	d908      	bls.n	8005af2 <_free_r+0x42>
 8005ae0:	6820      	ldr	r0, [r4, #0]
 8005ae2:	1821      	adds	r1, r4, r0
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	bf01      	itttt	eq
 8005ae8:	6819      	ldreq	r1, [r3, #0]
 8005aea:	685b      	ldreq	r3, [r3, #4]
 8005aec:	1809      	addeq	r1, r1, r0
 8005aee:	6021      	streq	r1, [r4, #0]
 8005af0:	e7ed      	b.n	8005ace <_free_r+0x1e>
 8005af2:	461a      	mov	r2, r3
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	b10b      	cbz	r3, 8005afc <_free_r+0x4c>
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	d9fa      	bls.n	8005af2 <_free_r+0x42>
 8005afc:	6811      	ldr	r1, [r2, #0]
 8005afe:	1850      	adds	r0, r2, r1
 8005b00:	42a0      	cmp	r0, r4
 8005b02:	d10b      	bne.n	8005b1c <_free_r+0x6c>
 8005b04:	6820      	ldr	r0, [r4, #0]
 8005b06:	4401      	add	r1, r0
 8005b08:	1850      	adds	r0, r2, r1
 8005b0a:	4283      	cmp	r3, r0
 8005b0c:	6011      	str	r1, [r2, #0]
 8005b0e:	d1e0      	bne.n	8005ad2 <_free_r+0x22>
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4408      	add	r0, r1
 8005b16:	6010      	str	r0, [r2, #0]
 8005b18:	6053      	str	r3, [r2, #4]
 8005b1a:	e7da      	b.n	8005ad2 <_free_r+0x22>
 8005b1c:	d902      	bls.n	8005b24 <_free_r+0x74>
 8005b1e:	230c      	movs	r3, #12
 8005b20:	602b      	str	r3, [r5, #0]
 8005b22:	e7d6      	b.n	8005ad2 <_free_r+0x22>
 8005b24:	6820      	ldr	r0, [r4, #0]
 8005b26:	1821      	adds	r1, r4, r0
 8005b28:	428b      	cmp	r3, r1
 8005b2a:	bf01      	itttt	eq
 8005b2c:	6819      	ldreq	r1, [r3, #0]
 8005b2e:	685b      	ldreq	r3, [r3, #4]
 8005b30:	1809      	addeq	r1, r1, r0
 8005b32:	6021      	streq	r1, [r4, #0]
 8005b34:	6063      	str	r3, [r4, #4]
 8005b36:	6054      	str	r4, [r2, #4]
 8005b38:	e7cb      	b.n	8005ad2 <_free_r+0x22>
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	200003d4 	.word	0x200003d4

08005b40 <malloc>:
 8005b40:	4b02      	ldr	r3, [pc, #8]	@ (8005b4c <malloc+0xc>)
 8005b42:	4601      	mov	r1, r0
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	f000 b825 	b.w	8005b94 <_malloc_r>
 8005b4a:	bf00      	nop
 8005b4c:	20000018 	.word	0x20000018

08005b50 <sbrk_aligned>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	4e0f      	ldr	r6, [pc, #60]	@ (8005b90 <sbrk_aligned+0x40>)
 8005b54:	460c      	mov	r4, r1
 8005b56:	6831      	ldr	r1, [r6, #0]
 8005b58:	4605      	mov	r5, r0
 8005b5a:	b911      	cbnz	r1, 8005b62 <sbrk_aligned+0x12>
 8005b5c:	f000 fe92 	bl	8006884 <_sbrk_r>
 8005b60:	6030      	str	r0, [r6, #0]
 8005b62:	4621      	mov	r1, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	f000 fe8d 	bl	8006884 <_sbrk_r>
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	d103      	bne.n	8005b76 <sbrk_aligned+0x26>
 8005b6e:	f04f 34ff 	mov.w	r4, #4294967295
 8005b72:	4620      	mov	r0, r4
 8005b74:	bd70      	pop	{r4, r5, r6, pc}
 8005b76:	1cc4      	adds	r4, r0, #3
 8005b78:	f024 0403 	bic.w	r4, r4, #3
 8005b7c:	42a0      	cmp	r0, r4
 8005b7e:	d0f8      	beq.n	8005b72 <sbrk_aligned+0x22>
 8005b80:	1a21      	subs	r1, r4, r0
 8005b82:	4628      	mov	r0, r5
 8005b84:	f000 fe7e 	bl	8006884 <_sbrk_r>
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d1f2      	bne.n	8005b72 <sbrk_aligned+0x22>
 8005b8c:	e7ef      	b.n	8005b6e <sbrk_aligned+0x1e>
 8005b8e:	bf00      	nop
 8005b90:	200003d0 	.word	0x200003d0

08005b94 <_malloc_r>:
 8005b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b98:	1ccd      	adds	r5, r1, #3
 8005b9a:	f025 0503 	bic.w	r5, r5, #3
 8005b9e:	3508      	adds	r5, #8
 8005ba0:	2d0c      	cmp	r5, #12
 8005ba2:	bf38      	it	cc
 8005ba4:	250c      	movcc	r5, #12
 8005ba6:	2d00      	cmp	r5, #0
 8005ba8:	4606      	mov	r6, r0
 8005baa:	db01      	blt.n	8005bb0 <_malloc_r+0x1c>
 8005bac:	42a9      	cmp	r1, r5
 8005bae:	d904      	bls.n	8005bba <_malloc_r+0x26>
 8005bb0:	230c      	movs	r3, #12
 8005bb2:	6033      	str	r3, [r6, #0]
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c90 <_malloc_r+0xfc>
 8005bbe:	f000 f869 	bl	8005c94 <__malloc_lock>
 8005bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc6:	461c      	mov	r4, r3
 8005bc8:	bb44      	cbnz	r4, 8005c1c <_malloc_r+0x88>
 8005bca:	4629      	mov	r1, r5
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f7ff ffbf 	bl	8005b50 <sbrk_aligned>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	d158      	bne.n	8005c8a <_malloc_r+0xf6>
 8005bd8:	f8d8 4000 	ldr.w	r4, [r8]
 8005bdc:	4627      	mov	r7, r4
 8005bde:	2f00      	cmp	r7, #0
 8005be0:	d143      	bne.n	8005c6a <_malloc_r+0xd6>
 8005be2:	2c00      	cmp	r4, #0
 8005be4:	d04b      	beq.n	8005c7e <_malloc_r+0xea>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	4639      	mov	r1, r7
 8005bea:	4630      	mov	r0, r6
 8005bec:	eb04 0903 	add.w	r9, r4, r3
 8005bf0:	f000 fe48 	bl	8006884 <_sbrk_r>
 8005bf4:	4581      	cmp	r9, r0
 8005bf6:	d142      	bne.n	8005c7e <_malloc_r+0xea>
 8005bf8:	6821      	ldr	r1, [r4, #0]
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	1a6d      	subs	r5, r5, r1
 8005bfe:	4629      	mov	r1, r5
 8005c00:	f7ff ffa6 	bl	8005b50 <sbrk_aligned>
 8005c04:	3001      	adds	r0, #1
 8005c06:	d03a      	beq.n	8005c7e <_malloc_r+0xea>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	442b      	add	r3, r5
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	bb62      	cbnz	r2, 8005c70 <_malloc_r+0xdc>
 8005c16:	f8c8 7000 	str.w	r7, [r8]
 8005c1a:	e00f      	b.n	8005c3c <_malloc_r+0xa8>
 8005c1c:	6822      	ldr	r2, [r4, #0]
 8005c1e:	1b52      	subs	r2, r2, r5
 8005c20:	d420      	bmi.n	8005c64 <_malloc_r+0xd0>
 8005c22:	2a0b      	cmp	r2, #11
 8005c24:	d917      	bls.n	8005c56 <_malloc_r+0xc2>
 8005c26:	1961      	adds	r1, r4, r5
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	6025      	str	r5, [r4, #0]
 8005c2c:	bf18      	it	ne
 8005c2e:	6059      	strne	r1, [r3, #4]
 8005c30:	6863      	ldr	r3, [r4, #4]
 8005c32:	bf08      	it	eq
 8005c34:	f8c8 1000 	streq.w	r1, [r8]
 8005c38:	5162      	str	r2, [r4, r5]
 8005c3a:	604b      	str	r3, [r1, #4]
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f82f 	bl	8005ca0 <__malloc_unlock>
 8005c42:	f104 000b 	add.w	r0, r4, #11
 8005c46:	1d23      	adds	r3, r4, #4
 8005c48:	f020 0007 	bic.w	r0, r0, #7
 8005c4c:	1ac2      	subs	r2, r0, r3
 8005c4e:	bf1c      	itt	ne
 8005c50:	1a1b      	subne	r3, r3, r0
 8005c52:	50a3      	strne	r3, [r4, r2]
 8005c54:	e7af      	b.n	8005bb6 <_malloc_r+0x22>
 8005c56:	6862      	ldr	r2, [r4, #4]
 8005c58:	42a3      	cmp	r3, r4
 8005c5a:	bf0c      	ite	eq
 8005c5c:	f8c8 2000 	streq.w	r2, [r8]
 8005c60:	605a      	strne	r2, [r3, #4]
 8005c62:	e7eb      	b.n	8005c3c <_malloc_r+0xa8>
 8005c64:	4623      	mov	r3, r4
 8005c66:	6864      	ldr	r4, [r4, #4]
 8005c68:	e7ae      	b.n	8005bc8 <_malloc_r+0x34>
 8005c6a:	463c      	mov	r4, r7
 8005c6c:	687f      	ldr	r7, [r7, #4]
 8005c6e:	e7b6      	b.n	8005bde <_malloc_r+0x4a>
 8005c70:	461a      	mov	r2, r3
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	42a3      	cmp	r3, r4
 8005c76:	d1fb      	bne.n	8005c70 <_malloc_r+0xdc>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	6053      	str	r3, [r2, #4]
 8005c7c:	e7de      	b.n	8005c3c <_malloc_r+0xa8>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	4630      	mov	r0, r6
 8005c82:	6033      	str	r3, [r6, #0]
 8005c84:	f000 f80c 	bl	8005ca0 <__malloc_unlock>
 8005c88:	e794      	b.n	8005bb4 <_malloc_r+0x20>
 8005c8a:	6005      	str	r5, [r0, #0]
 8005c8c:	e7d6      	b.n	8005c3c <_malloc_r+0xa8>
 8005c8e:	bf00      	nop
 8005c90:	200003d4 	.word	0x200003d4

08005c94 <__malloc_lock>:
 8005c94:	4801      	ldr	r0, [pc, #4]	@ (8005c9c <__malloc_lock+0x8>)
 8005c96:	f7ff b8aa 	b.w	8004dee <__retarget_lock_acquire_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	200003cc 	.word	0x200003cc

08005ca0 <__malloc_unlock>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	@ (8005ca8 <__malloc_unlock+0x8>)
 8005ca2:	f7ff b8a5 	b.w	8004df0 <__retarget_lock_release_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	200003cc 	.word	0x200003cc

08005cac <_Balloc>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	69c6      	ldr	r6, [r0, #28]
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	460d      	mov	r5, r1
 8005cb4:	b976      	cbnz	r6, 8005cd4 <_Balloc+0x28>
 8005cb6:	2010      	movs	r0, #16
 8005cb8:	f7ff ff42 	bl	8005b40 <malloc>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	61e0      	str	r0, [r4, #28]
 8005cc0:	b920      	cbnz	r0, 8005ccc <_Balloc+0x20>
 8005cc2:	216b      	movs	r1, #107	@ 0x6b
 8005cc4:	4b17      	ldr	r3, [pc, #92]	@ (8005d24 <_Balloc+0x78>)
 8005cc6:	4818      	ldr	r0, [pc, #96]	@ (8005d28 <_Balloc+0x7c>)
 8005cc8:	f000 fdfa 	bl	80068c0 <__assert_func>
 8005ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cd0:	6006      	str	r6, [r0, #0]
 8005cd2:	60c6      	str	r6, [r0, #12]
 8005cd4:	69e6      	ldr	r6, [r4, #28]
 8005cd6:	68f3      	ldr	r3, [r6, #12]
 8005cd8:	b183      	cbz	r3, 8005cfc <_Balloc+0x50>
 8005cda:	69e3      	ldr	r3, [r4, #28]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ce2:	b9b8      	cbnz	r0, 8005d14 <_Balloc+0x68>
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	fa01 f605 	lsl.w	r6, r1, r5
 8005cea:	1d72      	adds	r2, r6, #5
 8005cec:	4620      	mov	r0, r4
 8005cee:	0092      	lsls	r2, r2, #2
 8005cf0:	f000 fe04 	bl	80068fc <_calloc_r>
 8005cf4:	b160      	cbz	r0, 8005d10 <_Balloc+0x64>
 8005cf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cfa:	e00e      	b.n	8005d1a <_Balloc+0x6e>
 8005cfc:	2221      	movs	r2, #33	@ 0x21
 8005cfe:	2104      	movs	r1, #4
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 fdfb 	bl	80068fc <_calloc_r>
 8005d06:	69e3      	ldr	r3, [r4, #28]
 8005d08:	60f0      	str	r0, [r6, #12]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e4      	bne.n	8005cda <_Balloc+0x2e>
 8005d10:	2000      	movs	r0, #0
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	6802      	ldr	r2, [r0, #0]
 8005d16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d20:	e7f7      	b.n	8005d12 <_Balloc+0x66>
 8005d22:	bf00      	nop
 8005d24:	08006bff 	.word	0x08006bff
 8005d28:	08006c7f 	.word	0x08006c7f

08005d2c <_Bfree>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	69c6      	ldr	r6, [r0, #28]
 8005d30:	4605      	mov	r5, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	b976      	cbnz	r6, 8005d54 <_Bfree+0x28>
 8005d36:	2010      	movs	r0, #16
 8005d38:	f7ff ff02 	bl	8005b40 <malloc>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	61e8      	str	r0, [r5, #28]
 8005d40:	b920      	cbnz	r0, 8005d4c <_Bfree+0x20>
 8005d42:	218f      	movs	r1, #143	@ 0x8f
 8005d44:	4b08      	ldr	r3, [pc, #32]	@ (8005d68 <_Bfree+0x3c>)
 8005d46:	4809      	ldr	r0, [pc, #36]	@ (8005d6c <_Bfree+0x40>)
 8005d48:	f000 fdba 	bl	80068c0 <__assert_func>
 8005d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d50:	6006      	str	r6, [r0, #0]
 8005d52:	60c6      	str	r6, [r0, #12]
 8005d54:	b13c      	cbz	r4, 8005d66 <_Bfree+0x3a>
 8005d56:	69eb      	ldr	r3, [r5, #28]
 8005d58:	6862      	ldr	r2, [r4, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d60:	6021      	str	r1, [r4, #0]
 8005d62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
 8005d68:	08006bff 	.word	0x08006bff
 8005d6c:	08006c7f 	.word	0x08006c7f

08005d70 <__multadd>:
 8005d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d74:	4607      	mov	r7, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	461e      	mov	r6, r3
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	690d      	ldr	r5, [r1, #16]
 8005d7e:	f101 0c14 	add.w	ip, r1, #20
 8005d82:	f8dc 3000 	ldr.w	r3, [ip]
 8005d86:	3001      	adds	r0, #1
 8005d88:	b299      	uxth	r1, r3
 8005d8a:	fb02 6101 	mla	r1, r2, r1, r6
 8005d8e:	0c1e      	lsrs	r6, r3, #16
 8005d90:	0c0b      	lsrs	r3, r1, #16
 8005d92:	fb02 3306 	mla	r3, r2, r6, r3
 8005d96:	b289      	uxth	r1, r1
 8005d98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d9c:	4285      	cmp	r5, r0
 8005d9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005da2:	f84c 1b04 	str.w	r1, [ip], #4
 8005da6:	dcec      	bgt.n	8005d82 <__multadd+0x12>
 8005da8:	b30e      	cbz	r6, 8005dee <__multadd+0x7e>
 8005daa:	68a3      	ldr	r3, [r4, #8]
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dc19      	bgt.n	8005de4 <__multadd+0x74>
 8005db0:	6861      	ldr	r1, [r4, #4]
 8005db2:	4638      	mov	r0, r7
 8005db4:	3101      	adds	r1, #1
 8005db6:	f7ff ff79 	bl	8005cac <_Balloc>
 8005dba:	4680      	mov	r8, r0
 8005dbc:	b928      	cbnz	r0, 8005dca <__multadd+0x5a>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	21ba      	movs	r1, #186	@ 0xba
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005df4 <__multadd+0x84>)
 8005dc4:	480c      	ldr	r0, [pc, #48]	@ (8005df8 <__multadd+0x88>)
 8005dc6:	f000 fd7b 	bl	80068c0 <__assert_func>
 8005dca:	6922      	ldr	r2, [r4, #16]
 8005dcc:	f104 010c 	add.w	r1, r4, #12
 8005dd0:	3202      	adds	r2, #2
 8005dd2:	0092      	lsls	r2, r2, #2
 8005dd4:	300c      	adds	r0, #12
 8005dd6:	f000 fd65 	bl	80068a4 <memcpy>
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7ff ffa5 	bl	8005d2c <_Bfree>
 8005de2:	4644      	mov	r4, r8
 8005de4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005de8:	3501      	adds	r5, #1
 8005dea:	615e      	str	r6, [r3, #20]
 8005dec:	6125      	str	r5, [r4, #16]
 8005dee:	4620      	mov	r0, r4
 8005df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df4:	08006c6e 	.word	0x08006c6e
 8005df8:	08006c7f 	.word	0x08006c7f

08005dfc <__hi0bits>:
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005e02:	bf3a      	itte	cc
 8005e04:	0403      	lslcc	r3, r0, #16
 8005e06:	2010      	movcc	r0, #16
 8005e08:	2000      	movcs	r0, #0
 8005e0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e0e:	bf3c      	itt	cc
 8005e10:	021b      	lslcc	r3, r3, #8
 8005e12:	3008      	addcc	r0, #8
 8005e14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e18:	bf3c      	itt	cc
 8005e1a:	011b      	lslcc	r3, r3, #4
 8005e1c:	3004      	addcc	r0, #4
 8005e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e22:	bf3c      	itt	cc
 8005e24:	009b      	lslcc	r3, r3, #2
 8005e26:	3002      	addcc	r0, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	db05      	blt.n	8005e38 <__hi0bits+0x3c>
 8005e2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005e30:	f100 0001 	add.w	r0, r0, #1
 8005e34:	bf08      	it	eq
 8005e36:	2020      	moveq	r0, #32
 8005e38:	4770      	bx	lr

08005e3a <__lo0bits>:
 8005e3a:	6803      	ldr	r3, [r0, #0]
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	f013 0007 	ands.w	r0, r3, #7
 8005e42:	d00b      	beq.n	8005e5c <__lo0bits+0x22>
 8005e44:	07d9      	lsls	r1, r3, #31
 8005e46:	d421      	bmi.n	8005e8c <__lo0bits+0x52>
 8005e48:	0798      	lsls	r0, r3, #30
 8005e4a:	bf49      	itett	mi
 8005e4c:	085b      	lsrmi	r3, r3, #1
 8005e4e:	089b      	lsrpl	r3, r3, #2
 8005e50:	2001      	movmi	r0, #1
 8005e52:	6013      	strmi	r3, [r2, #0]
 8005e54:	bf5c      	itt	pl
 8005e56:	2002      	movpl	r0, #2
 8005e58:	6013      	strpl	r3, [r2, #0]
 8005e5a:	4770      	bx	lr
 8005e5c:	b299      	uxth	r1, r3
 8005e5e:	b909      	cbnz	r1, 8005e64 <__lo0bits+0x2a>
 8005e60:	2010      	movs	r0, #16
 8005e62:	0c1b      	lsrs	r3, r3, #16
 8005e64:	b2d9      	uxtb	r1, r3
 8005e66:	b909      	cbnz	r1, 8005e6c <__lo0bits+0x32>
 8005e68:	3008      	adds	r0, #8
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	0719      	lsls	r1, r3, #28
 8005e6e:	bf04      	itt	eq
 8005e70:	091b      	lsreq	r3, r3, #4
 8005e72:	3004      	addeq	r0, #4
 8005e74:	0799      	lsls	r1, r3, #30
 8005e76:	bf04      	itt	eq
 8005e78:	089b      	lsreq	r3, r3, #2
 8005e7a:	3002      	addeq	r0, #2
 8005e7c:	07d9      	lsls	r1, r3, #31
 8005e7e:	d403      	bmi.n	8005e88 <__lo0bits+0x4e>
 8005e80:	085b      	lsrs	r3, r3, #1
 8005e82:	f100 0001 	add.w	r0, r0, #1
 8005e86:	d003      	beq.n	8005e90 <__lo0bits+0x56>
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	4770      	bx	lr
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	4770      	bx	lr
 8005e90:	2020      	movs	r0, #32
 8005e92:	4770      	bx	lr

08005e94 <__i2b>:
 8005e94:	b510      	push	{r4, lr}
 8005e96:	460c      	mov	r4, r1
 8005e98:	2101      	movs	r1, #1
 8005e9a:	f7ff ff07 	bl	8005cac <_Balloc>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	b928      	cbnz	r0, 8005eae <__i2b+0x1a>
 8005ea2:	f240 1145 	movw	r1, #325	@ 0x145
 8005ea6:	4b04      	ldr	r3, [pc, #16]	@ (8005eb8 <__i2b+0x24>)
 8005ea8:	4804      	ldr	r0, [pc, #16]	@ (8005ebc <__i2b+0x28>)
 8005eaa:	f000 fd09 	bl	80068c0 <__assert_func>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	6144      	str	r4, [r0, #20]
 8005eb2:	6103      	str	r3, [r0, #16]
 8005eb4:	bd10      	pop	{r4, pc}
 8005eb6:	bf00      	nop
 8005eb8:	08006c6e 	.word	0x08006c6e
 8005ebc:	08006c7f 	.word	0x08006c7f

08005ec0 <__multiply>:
 8005ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	4614      	mov	r4, r2
 8005ec6:	690a      	ldr	r2, [r1, #16]
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	460f      	mov	r7, r1
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	bfa2      	ittt	ge
 8005ed0:	4623      	movge	r3, r4
 8005ed2:	460c      	movge	r4, r1
 8005ed4:	461f      	movge	r7, r3
 8005ed6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005eda:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005ede:	68a3      	ldr	r3, [r4, #8]
 8005ee0:	6861      	ldr	r1, [r4, #4]
 8005ee2:	eb0a 0609 	add.w	r6, sl, r9
 8005ee6:	42b3      	cmp	r3, r6
 8005ee8:	b085      	sub	sp, #20
 8005eea:	bfb8      	it	lt
 8005eec:	3101      	addlt	r1, #1
 8005eee:	f7ff fedd 	bl	8005cac <_Balloc>
 8005ef2:	b930      	cbnz	r0, 8005f02 <__multiply+0x42>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005efa:	4b43      	ldr	r3, [pc, #268]	@ (8006008 <__multiply+0x148>)
 8005efc:	4843      	ldr	r0, [pc, #268]	@ (800600c <__multiply+0x14c>)
 8005efe:	f000 fcdf 	bl	80068c0 <__assert_func>
 8005f02:	f100 0514 	add.w	r5, r0, #20
 8005f06:	462b      	mov	r3, r5
 8005f08:	2200      	movs	r2, #0
 8005f0a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f0e:	4543      	cmp	r3, r8
 8005f10:	d321      	bcc.n	8005f56 <__multiply+0x96>
 8005f12:	f107 0114 	add.w	r1, r7, #20
 8005f16:	f104 0214 	add.w	r2, r4, #20
 8005f1a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005f1e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005f22:	9302      	str	r3, [sp, #8]
 8005f24:	1b13      	subs	r3, r2, r4
 8005f26:	3b15      	subs	r3, #21
 8005f28:	f023 0303 	bic.w	r3, r3, #3
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	f104 0715 	add.w	r7, r4, #21
 8005f32:	42ba      	cmp	r2, r7
 8005f34:	bf38      	it	cc
 8005f36:	2304      	movcc	r3, #4
 8005f38:	9301      	str	r3, [sp, #4]
 8005f3a:	9b02      	ldr	r3, [sp, #8]
 8005f3c:	9103      	str	r1, [sp, #12]
 8005f3e:	428b      	cmp	r3, r1
 8005f40:	d80c      	bhi.n	8005f5c <__multiply+0x9c>
 8005f42:	2e00      	cmp	r6, #0
 8005f44:	dd03      	ble.n	8005f4e <__multiply+0x8e>
 8005f46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d05a      	beq.n	8006004 <__multiply+0x144>
 8005f4e:	6106      	str	r6, [r0, #16]
 8005f50:	b005      	add	sp, #20
 8005f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f56:	f843 2b04 	str.w	r2, [r3], #4
 8005f5a:	e7d8      	b.n	8005f0e <__multiply+0x4e>
 8005f5c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005f60:	f1ba 0f00 	cmp.w	sl, #0
 8005f64:	d023      	beq.n	8005fae <__multiply+0xee>
 8005f66:	46a9      	mov	r9, r5
 8005f68:	f04f 0c00 	mov.w	ip, #0
 8005f6c:	f104 0e14 	add.w	lr, r4, #20
 8005f70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005f74:	f8d9 3000 	ldr.w	r3, [r9]
 8005f78:	fa1f fb87 	uxth.w	fp, r7
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005f82:	4463      	add	r3, ip
 8005f84:	f8d9 c000 	ldr.w	ip, [r9]
 8005f88:	0c3f      	lsrs	r7, r7, #16
 8005f8a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005f8e:	fb0a c707 	mla	r7, sl, r7, ip
 8005f92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005f9c:	4572      	cmp	r2, lr
 8005f9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005fa2:	f849 3b04 	str.w	r3, [r9], #4
 8005fa6:	d8e3      	bhi.n	8005f70 <__multiply+0xb0>
 8005fa8:	9b01      	ldr	r3, [sp, #4]
 8005faa:	f845 c003 	str.w	ip, [r5, r3]
 8005fae:	9b03      	ldr	r3, [sp, #12]
 8005fb0:	3104      	adds	r1, #4
 8005fb2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005fb6:	f1b9 0f00 	cmp.w	r9, #0
 8005fba:	d021      	beq.n	8006000 <__multiply+0x140>
 8005fbc:	46ae      	mov	lr, r5
 8005fbe:	f04f 0a00 	mov.w	sl, #0
 8005fc2:	682b      	ldr	r3, [r5, #0]
 8005fc4:	f104 0c14 	add.w	ip, r4, #20
 8005fc8:	f8bc b000 	ldrh.w	fp, [ip]
 8005fcc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	fb09 770b 	mla	r7, r9, fp, r7
 8005fd6:	4457      	add	r7, sl
 8005fd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005fdc:	f84e 3b04 	str.w	r3, [lr], #4
 8005fe0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005fe4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fe8:	f8be 3000 	ldrh.w	r3, [lr]
 8005fec:	4562      	cmp	r2, ip
 8005fee:	fb09 330a 	mla	r3, r9, sl, r3
 8005ff2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005ff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ffa:	d8e5      	bhi.n	8005fc8 <__multiply+0x108>
 8005ffc:	9f01      	ldr	r7, [sp, #4]
 8005ffe:	51eb      	str	r3, [r5, r7]
 8006000:	3504      	adds	r5, #4
 8006002:	e79a      	b.n	8005f3a <__multiply+0x7a>
 8006004:	3e01      	subs	r6, #1
 8006006:	e79c      	b.n	8005f42 <__multiply+0x82>
 8006008:	08006c6e 	.word	0x08006c6e
 800600c:	08006c7f 	.word	0x08006c7f

08006010 <__pow5mult>:
 8006010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006014:	4615      	mov	r5, r2
 8006016:	f012 0203 	ands.w	r2, r2, #3
 800601a:	4607      	mov	r7, r0
 800601c:	460e      	mov	r6, r1
 800601e:	d007      	beq.n	8006030 <__pow5mult+0x20>
 8006020:	4c25      	ldr	r4, [pc, #148]	@ (80060b8 <__pow5mult+0xa8>)
 8006022:	3a01      	subs	r2, #1
 8006024:	2300      	movs	r3, #0
 8006026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800602a:	f7ff fea1 	bl	8005d70 <__multadd>
 800602e:	4606      	mov	r6, r0
 8006030:	10ad      	asrs	r5, r5, #2
 8006032:	d03d      	beq.n	80060b0 <__pow5mult+0xa0>
 8006034:	69fc      	ldr	r4, [r7, #28]
 8006036:	b97c      	cbnz	r4, 8006058 <__pow5mult+0x48>
 8006038:	2010      	movs	r0, #16
 800603a:	f7ff fd81 	bl	8005b40 <malloc>
 800603e:	4602      	mov	r2, r0
 8006040:	61f8      	str	r0, [r7, #28]
 8006042:	b928      	cbnz	r0, 8006050 <__pow5mult+0x40>
 8006044:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006048:	4b1c      	ldr	r3, [pc, #112]	@ (80060bc <__pow5mult+0xac>)
 800604a:	481d      	ldr	r0, [pc, #116]	@ (80060c0 <__pow5mult+0xb0>)
 800604c:	f000 fc38 	bl	80068c0 <__assert_func>
 8006050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006054:	6004      	str	r4, [r0, #0]
 8006056:	60c4      	str	r4, [r0, #12]
 8006058:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800605c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006060:	b94c      	cbnz	r4, 8006076 <__pow5mult+0x66>
 8006062:	f240 2171 	movw	r1, #625	@ 0x271
 8006066:	4638      	mov	r0, r7
 8006068:	f7ff ff14 	bl	8005e94 <__i2b>
 800606c:	2300      	movs	r3, #0
 800606e:	4604      	mov	r4, r0
 8006070:	f8c8 0008 	str.w	r0, [r8, #8]
 8006074:	6003      	str	r3, [r0, #0]
 8006076:	f04f 0900 	mov.w	r9, #0
 800607a:	07eb      	lsls	r3, r5, #31
 800607c:	d50a      	bpl.n	8006094 <__pow5mult+0x84>
 800607e:	4631      	mov	r1, r6
 8006080:	4622      	mov	r2, r4
 8006082:	4638      	mov	r0, r7
 8006084:	f7ff ff1c 	bl	8005ec0 <__multiply>
 8006088:	4680      	mov	r8, r0
 800608a:	4631      	mov	r1, r6
 800608c:	4638      	mov	r0, r7
 800608e:	f7ff fe4d 	bl	8005d2c <_Bfree>
 8006092:	4646      	mov	r6, r8
 8006094:	106d      	asrs	r5, r5, #1
 8006096:	d00b      	beq.n	80060b0 <__pow5mult+0xa0>
 8006098:	6820      	ldr	r0, [r4, #0]
 800609a:	b938      	cbnz	r0, 80060ac <__pow5mult+0x9c>
 800609c:	4622      	mov	r2, r4
 800609e:	4621      	mov	r1, r4
 80060a0:	4638      	mov	r0, r7
 80060a2:	f7ff ff0d 	bl	8005ec0 <__multiply>
 80060a6:	6020      	str	r0, [r4, #0]
 80060a8:	f8c0 9000 	str.w	r9, [r0]
 80060ac:	4604      	mov	r4, r0
 80060ae:	e7e4      	b.n	800607a <__pow5mult+0x6a>
 80060b0:	4630      	mov	r0, r6
 80060b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b6:	bf00      	nop
 80060b8:	08006cd8 	.word	0x08006cd8
 80060bc:	08006bff 	.word	0x08006bff
 80060c0:	08006c7f 	.word	0x08006c7f

080060c4 <__lshift>:
 80060c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	460c      	mov	r4, r1
 80060ca:	4607      	mov	r7, r0
 80060cc:	4691      	mov	r9, r2
 80060ce:	6923      	ldr	r3, [r4, #16]
 80060d0:	6849      	ldr	r1, [r1, #4]
 80060d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060d6:	68a3      	ldr	r3, [r4, #8]
 80060d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060dc:	f108 0601 	add.w	r6, r8, #1
 80060e0:	42b3      	cmp	r3, r6
 80060e2:	db0b      	blt.n	80060fc <__lshift+0x38>
 80060e4:	4638      	mov	r0, r7
 80060e6:	f7ff fde1 	bl	8005cac <_Balloc>
 80060ea:	4605      	mov	r5, r0
 80060ec:	b948      	cbnz	r0, 8006102 <__lshift+0x3e>
 80060ee:	4602      	mov	r2, r0
 80060f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80060f4:	4b27      	ldr	r3, [pc, #156]	@ (8006194 <__lshift+0xd0>)
 80060f6:	4828      	ldr	r0, [pc, #160]	@ (8006198 <__lshift+0xd4>)
 80060f8:	f000 fbe2 	bl	80068c0 <__assert_func>
 80060fc:	3101      	adds	r1, #1
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	e7ee      	b.n	80060e0 <__lshift+0x1c>
 8006102:	2300      	movs	r3, #0
 8006104:	f100 0114 	add.w	r1, r0, #20
 8006108:	f100 0210 	add.w	r2, r0, #16
 800610c:	4618      	mov	r0, r3
 800610e:	4553      	cmp	r3, sl
 8006110:	db33      	blt.n	800617a <__lshift+0xb6>
 8006112:	6920      	ldr	r0, [r4, #16]
 8006114:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006118:	f104 0314 	add.w	r3, r4, #20
 800611c:	f019 091f 	ands.w	r9, r9, #31
 8006120:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006124:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006128:	d02b      	beq.n	8006182 <__lshift+0xbe>
 800612a:	468a      	mov	sl, r1
 800612c:	2200      	movs	r2, #0
 800612e:	f1c9 0e20 	rsb	lr, r9, #32
 8006132:	6818      	ldr	r0, [r3, #0]
 8006134:	fa00 f009 	lsl.w	r0, r0, r9
 8006138:	4310      	orrs	r0, r2
 800613a:	f84a 0b04 	str.w	r0, [sl], #4
 800613e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006142:	459c      	cmp	ip, r3
 8006144:	fa22 f20e 	lsr.w	r2, r2, lr
 8006148:	d8f3      	bhi.n	8006132 <__lshift+0x6e>
 800614a:	ebac 0304 	sub.w	r3, ip, r4
 800614e:	3b15      	subs	r3, #21
 8006150:	f023 0303 	bic.w	r3, r3, #3
 8006154:	3304      	adds	r3, #4
 8006156:	f104 0015 	add.w	r0, r4, #21
 800615a:	4584      	cmp	ip, r0
 800615c:	bf38      	it	cc
 800615e:	2304      	movcc	r3, #4
 8006160:	50ca      	str	r2, [r1, r3]
 8006162:	b10a      	cbz	r2, 8006168 <__lshift+0xa4>
 8006164:	f108 0602 	add.w	r6, r8, #2
 8006168:	3e01      	subs	r6, #1
 800616a:	4638      	mov	r0, r7
 800616c:	4621      	mov	r1, r4
 800616e:	612e      	str	r6, [r5, #16]
 8006170:	f7ff fddc 	bl	8005d2c <_Bfree>
 8006174:	4628      	mov	r0, r5
 8006176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617a:	f842 0f04 	str.w	r0, [r2, #4]!
 800617e:	3301      	adds	r3, #1
 8006180:	e7c5      	b.n	800610e <__lshift+0x4a>
 8006182:	3904      	subs	r1, #4
 8006184:	f853 2b04 	ldr.w	r2, [r3], #4
 8006188:	459c      	cmp	ip, r3
 800618a:	f841 2f04 	str.w	r2, [r1, #4]!
 800618e:	d8f9      	bhi.n	8006184 <__lshift+0xc0>
 8006190:	e7ea      	b.n	8006168 <__lshift+0xa4>
 8006192:	bf00      	nop
 8006194:	08006c6e 	.word	0x08006c6e
 8006198:	08006c7f 	.word	0x08006c7f

0800619c <__mcmp>:
 800619c:	4603      	mov	r3, r0
 800619e:	690a      	ldr	r2, [r1, #16]
 80061a0:	6900      	ldr	r0, [r0, #16]
 80061a2:	b530      	push	{r4, r5, lr}
 80061a4:	1a80      	subs	r0, r0, r2
 80061a6:	d10e      	bne.n	80061c6 <__mcmp+0x2a>
 80061a8:	3314      	adds	r3, #20
 80061aa:	3114      	adds	r1, #20
 80061ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80061b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80061b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061bc:	4295      	cmp	r5, r2
 80061be:	d003      	beq.n	80061c8 <__mcmp+0x2c>
 80061c0:	d205      	bcs.n	80061ce <__mcmp+0x32>
 80061c2:	f04f 30ff 	mov.w	r0, #4294967295
 80061c6:	bd30      	pop	{r4, r5, pc}
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	d3f3      	bcc.n	80061b4 <__mcmp+0x18>
 80061cc:	e7fb      	b.n	80061c6 <__mcmp+0x2a>
 80061ce:	2001      	movs	r0, #1
 80061d0:	e7f9      	b.n	80061c6 <__mcmp+0x2a>
	...

080061d4 <__mdiff>:
 80061d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d8:	4689      	mov	r9, r1
 80061da:	4606      	mov	r6, r0
 80061dc:	4611      	mov	r1, r2
 80061de:	4648      	mov	r0, r9
 80061e0:	4614      	mov	r4, r2
 80061e2:	f7ff ffdb 	bl	800619c <__mcmp>
 80061e6:	1e05      	subs	r5, r0, #0
 80061e8:	d112      	bne.n	8006210 <__mdiff+0x3c>
 80061ea:	4629      	mov	r1, r5
 80061ec:	4630      	mov	r0, r6
 80061ee:	f7ff fd5d 	bl	8005cac <_Balloc>
 80061f2:	4602      	mov	r2, r0
 80061f4:	b928      	cbnz	r0, 8006202 <__mdiff+0x2e>
 80061f6:	f240 2137 	movw	r1, #567	@ 0x237
 80061fa:	4b3e      	ldr	r3, [pc, #248]	@ (80062f4 <__mdiff+0x120>)
 80061fc:	483e      	ldr	r0, [pc, #248]	@ (80062f8 <__mdiff+0x124>)
 80061fe:	f000 fb5f 	bl	80068c0 <__assert_func>
 8006202:	2301      	movs	r3, #1
 8006204:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006208:	4610      	mov	r0, r2
 800620a:	b003      	add	sp, #12
 800620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006210:	bfbc      	itt	lt
 8006212:	464b      	movlt	r3, r9
 8006214:	46a1      	movlt	r9, r4
 8006216:	4630      	mov	r0, r6
 8006218:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800621c:	bfba      	itte	lt
 800621e:	461c      	movlt	r4, r3
 8006220:	2501      	movlt	r5, #1
 8006222:	2500      	movge	r5, #0
 8006224:	f7ff fd42 	bl	8005cac <_Balloc>
 8006228:	4602      	mov	r2, r0
 800622a:	b918      	cbnz	r0, 8006234 <__mdiff+0x60>
 800622c:	f240 2145 	movw	r1, #581	@ 0x245
 8006230:	4b30      	ldr	r3, [pc, #192]	@ (80062f4 <__mdiff+0x120>)
 8006232:	e7e3      	b.n	80061fc <__mdiff+0x28>
 8006234:	f100 0b14 	add.w	fp, r0, #20
 8006238:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800623c:	f109 0310 	add.w	r3, r9, #16
 8006240:	60c5      	str	r5, [r0, #12]
 8006242:	f04f 0c00 	mov.w	ip, #0
 8006246:	f109 0514 	add.w	r5, r9, #20
 800624a:	46d9      	mov	r9, fp
 800624c:	6926      	ldr	r6, [r4, #16]
 800624e:	f104 0e14 	add.w	lr, r4, #20
 8006252:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006256:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	9b01      	ldr	r3, [sp, #4]
 800625e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006262:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006266:	b281      	uxth	r1, r0
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	fa1f f38a 	uxth.w	r3, sl
 800626e:	1a5b      	subs	r3, r3, r1
 8006270:	0c00      	lsrs	r0, r0, #16
 8006272:	4463      	add	r3, ip
 8006274:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006278:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800627c:	b29b      	uxth	r3, r3
 800627e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006282:	4576      	cmp	r6, lr
 8006284:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006288:	f849 3b04 	str.w	r3, [r9], #4
 800628c:	d8e6      	bhi.n	800625c <__mdiff+0x88>
 800628e:	1b33      	subs	r3, r6, r4
 8006290:	3b15      	subs	r3, #21
 8006292:	f023 0303 	bic.w	r3, r3, #3
 8006296:	3415      	adds	r4, #21
 8006298:	3304      	adds	r3, #4
 800629a:	42a6      	cmp	r6, r4
 800629c:	bf38      	it	cc
 800629e:	2304      	movcc	r3, #4
 80062a0:	441d      	add	r5, r3
 80062a2:	445b      	add	r3, fp
 80062a4:	461e      	mov	r6, r3
 80062a6:	462c      	mov	r4, r5
 80062a8:	4544      	cmp	r4, r8
 80062aa:	d30e      	bcc.n	80062ca <__mdiff+0xf6>
 80062ac:	f108 0103 	add.w	r1, r8, #3
 80062b0:	1b49      	subs	r1, r1, r5
 80062b2:	f021 0103 	bic.w	r1, r1, #3
 80062b6:	3d03      	subs	r5, #3
 80062b8:	45a8      	cmp	r8, r5
 80062ba:	bf38      	it	cc
 80062bc:	2100      	movcc	r1, #0
 80062be:	440b      	add	r3, r1
 80062c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062c4:	b199      	cbz	r1, 80062ee <__mdiff+0x11a>
 80062c6:	6117      	str	r7, [r2, #16]
 80062c8:	e79e      	b.n	8006208 <__mdiff+0x34>
 80062ca:	46e6      	mov	lr, ip
 80062cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80062d0:	fa1f fc81 	uxth.w	ip, r1
 80062d4:	44f4      	add	ip, lr
 80062d6:	0c08      	lsrs	r0, r1, #16
 80062d8:	4471      	add	r1, lr
 80062da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80062de:	b289      	uxth	r1, r1
 80062e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80062e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80062e8:	f846 1b04 	str.w	r1, [r6], #4
 80062ec:	e7dc      	b.n	80062a8 <__mdiff+0xd4>
 80062ee:	3f01      	subs	r7, #1
 80062f0:	e7e6      	b.n	80062c0 <__mdiff+0xec>
 80062f2:	bf00      	nop
 80062f4:	08006c6e 	.word	0x08006c6e
 80062f8:	08006c7f 	.word	0x08006c7f

080062fc <__d2b>:
 80062fc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006300:	2101      	movs	r1, #1
 8006302:	4690      	mov	r8, r2
 8006304:	4699      	mov	r9, r3
 8006306:	9e08      	ldr	r6, [sp, #32]
 8006308:	f7ff fcd0 	bl	8005cac <_Balloc>
 800630c:	4604      	mov	r4, r0
 800630e:	b930      	cbnz	r0, 800631e <__d2b+0x22>
 8006310:	4602      	mov	r2, r0
 8006312:	f240 310f 	movw	r1, #783	@ 0x30f
 8006316:	4b23      	ldr	r3, [pc, #140]	@ (80063a4 <__d2b+0xa8>)
 8006318:	4823      	ldr	r0, [pc, #140]	@ (80063a8 <__d2b+0xac>)
 800631a:	f000 fad1 	bl	80068c0 <__assert_func>
 800631e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006322:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006326:	b10d      	cbz	r5, 800632c <__d2b+0x30>
 8006328:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	f1b8 0300 	subs.w	r3, r8, #0
 8006332:	d024      	beq.n	800637e <__d2b+0x82>
 8006334:	4668      	mov	r0, sp
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	f7ff fd7f 	bl	8005e3a <__lo0bits>
 800633c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006340:	b1d8      	cbz	r0, 800637a <__d2b+0x7e>
 8006342:	f1c0 0320 	rsb	r3, r0, #32
 8006346:	fa02 f303 	lsl.w	r3, r2, r3
 800634a:	430b      	orrs	r3, r1
 800634c:	40c2      	lsrs	r2, r0
 800634e:	6163      	str	r3, [r4, #20]
 8006350:	9201      	str	r2, [sp, #4]
 8006352:	9b01      	ldr	r3, [sp, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	bf0c      	ite	eq
 8006358:	2201      	moveq	r2, #1
 800635a:	2202      	movne	r2, #2
 800635c:	61a3      	str	r3, [r4, #24]
 800635e:	6122      	str	r2, [r4, #16]
 8006360:	b1ad      	cbz	r5, 800638e <__d2b+0x92>
 8006362:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006366:	4405      	add	r5, r0
 8006368:	6035      	str	r5, [r6, #0]
 800636a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800636e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006370:	6018      	str	r0, [r3, #0]
 8006372:	4620      	mov	r0, r4
 8006374:	b002      	add	sp, #8
 8006376:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800637a:	6161      	str	r1, [r4, #20]
 800637c:	e7e9      	b.n	8006352 <__d2b+0x56>
 800637e:	a801      	add	r0, sp, #4
 8006380:	f7ff fd5b 	bl	8005e3a <__lo0bits>
 8006384:	9b01      	ldr	r3, [sp, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	6163      	str	r3, [r4, #20]
 800638a:	3020      	adds	r0, #32
 800638c:	e7e7      	b.n	800635e <__d2b+0x62>
 800638e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006392:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006396:	6030      	str	r0, [r6, #0]
 8006398:	6918      	ldr	r0, [r3, #16]
 800639a:	f7ff fd2f 	bl	8005dfc <__hi0bits>
 800639e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80063a2:	e7e4      	b.n	800636e <__d2b+0x72>
 80063a4:	08006c6e 	.word	0x08006c6e
 80063a8:	08006c7f 	.word	0x08006c7f

080063ac <__sfputc_r>:
 80063ac:	6893      	ldr	r3, [r2, #8]
 80063ae:	b410      	push	{r4}
 80063b0:	3b01      	subs	r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	6093      	str	r3, [r2, #8]
 80063b6:	da07      	bge.n	80063c8 <__sfputc_r+0x1c>
 80063b8:	6994      	ldr	r4, [r2, #24]
 80063ba:	42a3      	cmp	r3, r4
 80063bc:	db01      	blt.n	80063c2 <__sfputc_r+0x16>
 80063be:	290a      	cmp	r1, #10
 80063c0:	d102      	bne.n	80063c8 <__sfputc_r+0x1c>
 80063c2:	bc10      	pop	{r4}
 80063c4:	f7fe bc01 	b.w	8004bca <__swbuf_r>
 80063c8:	6813      	ldr	r3, [r2, #0]
 80063ca:	1c58      	adds	r0, r3, #1
 80063cc:	6010      	str	r0, [r2, #0]
 80063ce:	7019      	strb	r1, [r3, #0]
 80063d0:	4608      	mov	r0, r1
 80063d2:	bc10      	pop	{r4}
 80063d4:	4770      	bx	lr

080063d6 <__sfputs_r>:
 80063d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d8:	4606      	mov	r6, r0
 80063da:	460f      	mov	r7, r1
 80063dc:	4614      	mov	r4, r2
 80063de:	18d5      	adds	r5, r2, r3
 80063e0:	42ac      	cmp	r4, r5
 80063e2:	d101      	bne.n	80063e8 <__sfputs_r+0x12>
 80063e4:	2000      	movs	r0, #0
 80063e6:	e007      	b.n	80063f8 <__sfputs_r+0x22>
 80063e8:	463a      	mov	r2, r7
 80063ea:	4630      	mov	r0, r6
 80063ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063f0:	f7ff ffdc 	bl	80063ac <__sfputc_r>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d1f3      	bne.n	80063e0 <__sfputs_r+0xa>
 80063f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063fc <_vfiprintf_r>:
 80063fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006400:	460d      	mov	r5, r1
 8006402:	4614      	mov	r4, r2
 8006404:	4698      	mov	r8, r3
 8006406:	4606      	mov	r6, r0
 8006408:	b09d      	sub	sp, #116	@ 0x74
 800640a:	b118      	cbz	r0, 8006414 <_vfiprintf_r+0x18>
 800640c:	6a03      	ldr	r3, [r0, #32]
 800640e:	b90b      	cbnz	r3, 8006414 <_vfiprintf_r+0x18>
 8006410:	f7fe faf2 	bl	80049f8 <__sinit>
 8006414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006416:	07d9      	lsls	r1, r3, #31
 8006418:	d405      	bmi.n	8006426 <_vfiprintf_r+0x2a>
 800641a:	89ab      	ldrh	r3, [r5, #12]
 800641c:	059a      	lsls	r2, r3, #22
 800641e:	d402      	bmi.n	8006426 <_vfiprintf_r+0x2a>
 8006420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006422:	f7fe fce4 	bl	8004dee <__retarget_lock_acquire_recursive>
 8006426:	89ab      	ldrh	r3, [r5, #12]
 8006428:	071b      	lsls	r3, r3, #28
 800642a:	d501      	bpl.n	8006430 <_vfiprintf_r+0x34>
 800642c:	692b      	ldr	r3, [r5, #16]
 800642e:	b99b      	cbnz	r3, 8006458 <_vfiprintf_r+0x5c>
 8006430:	4629      	mov	r1, r5
 8006432:	4630      	mov	r0, r6
 8006434:	f7fe fc08 	bl	8004c48 <__swsetup_r>
 8006438:	b170      	cbz	r0, 8006458 <_vfiprintf_r+0x5c>
 800643a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800643c:	07dc      	lsls	r4, r3, #31
 800643e:	d504      	bpl.n	800644a <_vfiprintf_r+0x4e>
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	b01d      	add	sp, #116	@ 0x74
 8006446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644a:	89ab      	ldrh	r3, [r5, #12]
 800644c:	0598      	lsls	r0, r3, #22
 800644e:	d4f7      	bmi.n	8006440 <_vfiprintf_r+0x44>
 8006450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006452:	f7fe fccd 	bl	8004df0 <__retarget_lock_release_recursive>
 8006456:	e7f3      	b.n	8006440 <_vfiprintf_r+0x44>
 8006458:	2300      	movs	r3, #0
 800645a:	9309      	str	r3, [sp, #36]	@ 0x24
 800645c:	2320      	movs	r3, #32
 800645e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006462:	2330      	movs	r3, #48	@ 0x30
 8006464:	f04f 0901 	mov.w	r9, #1
 8006468:	f8cd 800c 	str.w	r8, [sp, #12]
 800646c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006618 <_vfiprintf_r+0x21c>
 8006470:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006474:	4623      	mov	r3, r4
 8006476:	469a      	mov	sl, r3
 8006478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800647c:	b10a      	cbz	r2, 8006482 <_vfiprintf_r+0x86>
 800647e:	2a25      	cmp	r2, #37	@ 0x25
 8006480:	d1f9      	bne.n	8006476 <_vfiprintf_r+0x7a>
 8006482:	ebba 0b04 	subs.w	fp, sl, r4
 8006486:	d00b      	beq.n	80064a0 <_vfiprintf_r+0xa4>
 8006488:	465b      	mov	r3, fp
 800648a:	4622      	mov	r2, r4
 800648c:	4629      	mov	r1, r5
 800648e:	4630      	mov	r0, r6
 8006490:	f7ff ffa1 	bl	80063d6 <__sfputs_r>
 8006494:	3001      	adds	r0, #1
 8006496:	f000 80a7 	beq.w	80065e8 <_vfiprintf_r+0x1ec>
 800649a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800649c:	445a      	add	r2, fp
 800649e:	9209      	str	r2, [sp, #36]	@ 0x24
 80064a0:	f89a 3000 	ldrb.w	r3, [sl]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 809f 	beq.w	80065e8 <_vfiprintf_r+0x1ec>
 80064aa:	2300      	movs	r3, #0
 80064ac:	f04f 32ff 	mov.w	r2, #4294967295
 80064b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b4:	f10a 0a01 	add.w	sl, sl, #1
 80064b8:	9304      	str	r3, [sp, #16]
 80064ba:	9307      	str	r3, [sp, #28]
 80064bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80064c2:	4654      	mov	r4, sl
 80064c4:	2205      	movs	r2, #5
 80064c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ca:	4853      	ldr	r0, [pc, #332]	@ (8006618 <_vfiprintf_r+0x21c>)
 80064cc:	f7fe fc91 	bl	8004df2 <memchr>
 80064d0:	9a04      	ldr	r2, [sp, #16]
 80064d2:	b9d8      	cbnz	r0, 800650c <_vfiprintf_r+0x110>
 80064d4:	06d1      	lsls	r1, r2, #27
 80064d6:	bf44      	itt	mi
 80064d8:	2320      	movmi	r3, #32
 80064da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064de:	0713      	lsls	r3, r2, #28
 80064e0:	bf44      	itt	mi
 80064e2:	232b      	movmi	r3, #43	@ 0x2b
 80064e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064e8:	f89a 3000 	ldrb.w	r3, [sl]
 80064ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80064ee:	d015      	beq.n	800651c <_vfiprintf_r+0x120>
 80064f0:	4654      	mov	r4, sl
 80064f2:	2000      	movs	r0, #0
 80064f4:	f04f 0c0a 	mov.w	ip, #10
 80064f8:	9a07      	ldr	r2, [sp, #28]
 80064fa:	4621      	mov	r1, r4
 80064fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006500:	3b30      	subs	r3, #48	@ 0x30
 8006502:	2b09      	cmp	r3, #9
 8006504:	d94b      	bls.n	800659e <_vfiprintf_r+0x1a2>
 8006506:	b1b0      	cbz	r0, 8006536 <_vfiprintf_r+0x13a>
 8006508:	9207      	str	r2, [sp, #28]
 800650a:	e014      	b.n	8006536 <_vfiprintf_r+0x13a>
 800650c:	eba0 0308 	sub.w	r3, r0, r8
 8006510:	fa09 f303 	lsl.w	r3, r9, r3
 8006514:	4313      	orrs	r3, r2
 8006516:	46a2      	mov	sl, r4
 8006518:	9304      	str	r3, [sp, #16]
 800651a:	e7d2      	b.n	80064c2 <_vfiprintf_r+0xc6>
 800651c:	9b03      	ldr	r3, [sp, #12]
 800651e:	1d19      	adds	r1, r3, #4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	9103      	str	r1, [sp, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	bfbb      	ittet	lt
 8006528:	425b      	neglt	r3, r3
 800652a:	f042 0202 	orrlt.w	r2, r2, #2
 800652e:	9307      	strge	r3, [sp, #28]
 8006530:	9307      	strlt	r3, [sp, #28]
 8006532:	bfb8      	it	lt
 8006534:	9204      	strlt	r2, [sp, #16]
 8006536:	7823      	ldrb	r3, [r4, #0]
 8006538:	2b2e      	cmp	r3, #46	@ 0x2e
 800653a:	d10a      	bne.n	8006552 <_vfiprintf_r+0x156>
 800653c:	7863      	ldrb	r3, [r4, #1]
 800653e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006540:	d132      	bne.n	80065a8 <_vfiprintf_r+0x1ac>
 8006542:	9b03      	ldr	r3, [sp, #12]
 8006544:	3402      	adds	r4, #2
 8006546:	1d1a      	adds	r2, r3, #4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	9203      	str	r2, [sp, #12]
 800654c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006550:	9305      	str	r3, [sp, #20]
 8006552:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800661c <_vfiprintf_r+0x220>
 8006556:	2203      	movs	r2, #3
 8006558:	4650      	mov	r0, sl
 800655a:	7821      	ldrb	r1, [r4, #0]
 800655c:	f7fe fc49 	bl	8004df2 <memchr>
 8006560:	b138      	cbz	r0, 8006572 <_vfiprintf_r+0x176>
 8006562:	2240      	movs	r2, #64	@ 0x40
 8006564:	9b04      	ldr	r3, [sp, #16]
 8006566:	eba0 000a 	sub.w	r0, r0, sl
 800656a:	4082      	lsls	r2, r0
 800656c:	4313      	orrs	r3, r2
 800656e:	3401      	adds	r4, #1
 8006570:	9304      	str	r3, [sp, #16]
 8006572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006576:	2206      	movs	r2, #6
 8006578:	4829      	ldr	r0, [pc, #164]	@ (8006620 <_vfiprintf_r+0x224>)
 800657a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800657e:	f7fe fc38 	bl	8004df2 <memchr>
 8006582:	2800      	cmp	r0, #0
 8006584:	d03f      	beq.n	8006606 <_vfiprintf_r+0x20a>
 8006586:	4b27      	ldr	r3, [pc, #156]	@ (8006624 <_vfiprintf_r+0x228>)
 8006588:	bb1b      	cbnz	r3, 80065d2 <_vfiprintf_r+0x1d6>
 800658a:	9b03      	ldr	r3, [sp, #12]
 800658c:	3307      	adds	r3, #7
 800658e:	f023 0307 	bic.w	r3, r3, #7
 8006592:	3308      	adds	r3, #8
 8006594:	9303      	str	r3, [sp, #12]
 8006596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006598:	443b      	add	r3, r7
 800659a:	9309      	str	r3, [sp, #36]	@ 0x24
 800659c:	e76a      	b.n	8006474 <_vfiprintf_r+0x78>
 800659e:	460c      	mov	r4, r1
 80065a0:	2001      	movs	r0, #1
 80065a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065a6:	e7a8      	b.n	80064fa <_vfiprintf_r+0xfe>
 80065a8:	2300      	movs	r3, #0
 80065aa:	f04f 0c0a 	mov.w	ip, #10
 80065ae:	4619      	mov	r1, r3
 80065b0:	3401      	adds	r4, #1
 80065b2:	9305      	str	r3, [sp, #20]
 80065b4:	4620      	mov	r0, r4
 80065b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ba:	3a30      	subs	r2, #48	@ 0x30
 80065bc:	2a09      	cmp	r2, #9
 80065be:	d903      	bls.n	80065c8 <_vfiprintf_r+0x1cc>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0c6      	beq.n	8006552 <_vfiprintf_r+0x156>
 80065c4:	9105      	str	r1, [sp, #20]
 80065c6:	e7c4      	b.n	8006552 <_vfiprintf_r+0x156>
 80065c8:	4604      	mov	r4, r0
 80065ca:	2301      	movs	r3, #1
 80065cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80065d0:	e7f0      	b.n	80065b4 <_vfiprintf_r+0x1b8>
 80065d2:	ab03      	add	r3, sp, #12
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	462a      	mov	r2, r5
 80065d8:	4630      	mov	r0, r6
 80065da:	4b13      	ldr	r3, [pc, #76]	@ (8006628 <_vfiprintf_r+0x22c>)
 80065dc:	a904      	add	r1, sp, #16
 80065de:	f7fd fdc1 	bl	8004164 <_printf_float>
 80065e2:	4607      	mov	r7, r0
 80065e4:	1c78      	adds	r0, r7, #1
 80065e6:	d1d6      	bne.n	8006596 <_vfiprintf_r+0x19a>
 80065e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065ea:	07d9      	lsls	r1, r3, #31
 80065ec:	d405      	bmi.n	80065fa <_vfiprintf_r+0x1fe>
 80065ee:	89ab      	ldrh	r3, [r5, #12]
 80065f0:	059a      	lsls	r2, r3, #22
 80065f2:	d402      	bmi.n	80065fa <_vfiprintf_r+0x1fe>
 80065f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065f6:	f7fe fbfb 	bl	8004df0 <__retarget_lock_release_recursive>
 80065fa:	89ab      	ldrh	r3, [r5, #12]
 80065fc:	065b      	lsls	r3, r3, #25
 80065fe:	f53f af1f 	bmi.w	8006440 <_vfiprintf_r+0x44>
 8006602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006604:	e71e      	b.n	8006444 <_vfiprintf_r+0x48>
 8006606:	ab03      	add	r3, sp, #12
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	462a      	mov	r2, r5
 800660c:	4630      	mov	r0, r6
 800660e:	4b06      	ldr	r3, [pc, #24]	@ (8006628 <_vfiprintf_r+0x22c>)
 8006610:	a904      	add	r1, sp, #16
 8006612:	f7fe f845 	bl	80046a0 <_printf_i>
 8006616:	e7e4      	b.n	80065e2 <_vfiprintf_r+0x1e6>
 8006618:	08006dd8 	.word	0x08006dd8
 800661c:	08006dde 	.word	0x08006dde
 8006620:	08006de2 	.word	0x08006de2
 8006624:	08004165 	.word	0x08004165
 8006628:	080063d7 	.word	0x080063d7

0800662c <__sflush_r>:
 800662c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	0716      	lsls	r6, r2, #28
 8006634:	4605      	mov	r5, r0
 8006636:	460c      	mov	r4, r1
 8006638:	d454      	bmi.n	80066e4 <__sflush_r+0xb8>
 800663a:	684b      	ldr	r3, [r1, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	dc02      	bgt.n	8006646 <__sflush_r+0x1a>
 8006640:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	dd48      	ble.n	80066d8 <__sflush_r+0xac>
 8006646:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006648:	2e00      	cmp	r6, #0
 800664a:	d045      	beq.n	80066d8 <__sflush_r+0xac>
 800664c:	2300      	movs	r3, #0
 800664e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006652:	682f      	ldr	r7, [r5, #0]
 8006654:	6a21      	ldr	r1, [r4, #32]
 8006656:	602b      	str	r3, [r5, #0]
 8006658:	d030      	beq.n	80066bc <__sflush_r+0x90>
 800665a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	0759      	lsls	r1, r3, #29
 8006660:	d505      	bpl.n	800666e <__sflush_r+0x42>
 8006662:	6863      	ldr	r3, [r4, #4]
 8006664:	1ad2      	subs	r2, r2, r3
 8006666:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006668:	b10b      	cbz	r3, 800666e <__sflush_r+0x42>
 800666a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800666c:	1ad2      	subs	r2, r2, r3
 800666e:	2300      	movs	r3, #0
 8006670:	4628      	mov	r0, r5
 8006672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006674:	6a21      	ldr	r1, [r4, #32]
 8006676:	47b0      	blx	r6
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	d106      	bne.n	800668c <__sflush_r+0x60>
 800667e:	6829      	ldr	r1, [r5, #0]
 8006680:	291d      	cmp	r1, #29
 8006682:	d82b      	bhi.n	80066dc <__sflush_r+0xb0>
 8006684:	4a28      	ldr	r2, [pc, #160]	@ (8006728 <__sflush_r+0xfc>)
 8006686:	410a      	asrs	r2, r1
 8006688:	07d6      	lsls	r6, r2, #31
 800668a:	d427      	bmi.n	80066dc <__sflush_r+0xb0>
 800668c:	2200      	movs	r2, #0
 800668e:	6062      	str	r2, [r4, #4]
 8006690:	6922      	ldr	r2, [r4, #16]
 8006692:	04d9      	lsls	r1, r3, #19
 8006694:	6022      	str	r2, [r4, #0]
 8006696:	d504      	bpl.n	80066a2 <__sflush_r+0x76>
 8006698:	1c42      	adds	r2, r0, #1
 800669a:	d101      	bne.n	80066a0 <__sflush_r+0x74>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b903      	cbnz	r3, 80066a2 <__sflush_r+0x76>
 80066a0:	6560      	str	r0, [r4, #84]	@ 0x54
 80066a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066a4:	602f      	str	r7, [r5, #0]
 80066a6:	b1b9      	cbz	r1, 80066d8 <__sflush_r+0xac>
 80066a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066ac:	4299      	cmp	r1, r3
 80066ae:	d002      	beq.n	80066b6 <__sflush_r+0x8a>
 80066b0:	4628      	mov	r0, r5
 80066b2:	f7ff f9fd 	bl	8005ab0 <_free_r>
 80066b6:	2300      	movs	r3, #0
 80066b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80066ba:	e00d      	b.n	80066d8 <__sflush_r+0xac>
 80066bc:	2301      	movs	r3, #1
 80066be:	4628      	mov	r0, r5
 80066c0:	47b0      	blx	r6
 80066c2:	4602      	mov	r2, r0
 80066c4:	1c50      	adds	r0, r2, #1
 80066c6:	d1c9      	bne.n	800665c <__sflush_r+0x30>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0c6      	beq.n	800665c <__sflush_r+0x30>
 80066ce:	2b1d      	cmp	r3, #29
 80066d0:	d001      	beq.n	80066d6 <__sflush_r+0xaa>
 80066d2:	2b16      	cmp	r3, #22
 80066d4:	d11d      	bne.n	8006712 <__sflush_r+0xe6>
 80066d6:	602f      	str	r7, [r5, #0]
 80066d8:	2000      	movs	r0, #0
 80066da:	e021      	b.n	8006720 <__sflush_r+0xf4>
 80066dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066e0:	b21b      	sxth	r3, r3
 80066e2:	e01a      	b.n	800671a <__sflush_r+0xee>
 80066e4:	690f      	ldr	r7, [r1, #16]
 80066e6:	2f00      	cmp	r7, #0
 80066e8:	d0f6      	beq.n	80066d8 <__sflush_r+0xac>
 80066ea:	0793      	lsls	r3, r2, #30
 80066ec:	bf18      	it	ne
 80066ee:	2300      	movne	r3, #0
 80066f0:	680e      	ldr	r6, [r1, #0]
 80066f2:	bf08      	it	eq
 80066f4:	694b      	ldreq	r3, [r1, #20]
 80066f6:	1bf6      	subs	r6, r6, r7
 80066f8:	600f      	str	r7, [r1, #0]
 80066fa:	608b      	str	r3, [r1, #8]
 80066fc:	2e00      	cmp	r6, #0
 80066fe:	ddeb      	ble.n	80066d8 <__sflush_r+0xac>
 8006700:	4633      	mov	r3, r6
 8006702:	463a      	mov	r2, r7
 8006704:	4628      	mov	r0, r5
 8006706:	6a21      	ldr	r1, [r4, #32]
 8006708:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800670c:	47e0      	blx	ip
 800670e:	2800      	cmp	r0, #0
 8006710:	dc07      	bgt.n	8006722 <__sflush_r+0xf6>
 8006712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800671a:	f04f 30ff 	mov.w	r0, #4294967295
 800671e:	81a3      	strh	r3, [r4, #12]
 8006720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006722:	4407      	add	r7, r0
 8006724:	1a36      	subs	r6, r6, r0
 8006726:	e7e9      	b.n	80066fc <__sflush_r+0xd0>
 8006728:	dfbffffe 	.word	0xdfbffffe

0800672c <_fflush_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	690b      	ldr	r3, [r1, #16]
 8006730:	4605      	mov	r5, r0
 8006732:	460c      	mov	r4, r1
 8006734:	b913      	cbnz	r3, 800673c <_fflush_r+0x10>
 8006736:	2500      	movs	r5, #0
 8006738:	4628      	mov	r0, r5
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	b118      	cbz	r0, 8006746 <_fflush_r+0x1a>
 800673e:	6a03      	ldr	r3, [r0, #32]
 8006740:	b90b      	cbnz	r3, 8006746 <_fflush_r+0x1a>
 8006742:	f7fe f959 	bl	80049f8 <__sinit>
 8006746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f3      	beq.n	8006736 <_fflush_r+0xa>
 800674e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006750:	07d0      	lsls	r0, r2, #31
 8006752:	d404      	bmi.n	800675e <_fflush_r+0x32>
 8006754:	0599      	lsls	r1, r3, #22
 8006756:	d402      	bmi.n	800675e <_fflush_r+0x32>
 8006758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800675a:	f7fe fb48 	bl	8004dee <__retarget_lock_acquire_recursive>
 800675e:	4628      	mov	r0, r5
 8006760:	4621      	mov	r1, r4
 8006762:	f7ff ff63 	bl	800662c <__sflush_r>
 8006766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006768:	4605      	mov	r5, r0
 800676a:	07da      	lsls	r2, r3, #31
 800676c:	d4e4      	bmi.n	8006738 <_fflush_r+0xc>
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	059b      	lsls	r3, r3, #22
 8006772:	d4e1      	bmi.n	8006738 <_fflush_r+0xc>
 8006774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006776:	f7fe fb3b 	bl	8004df0 <__retarget_lock_release_recursive>
 800677a:	e7dd      	b.n	8006738 <_fflush_r+0xc>

0800677c <__swhatbuf_r>:
 800677c:	b570      	push	{r4, r5, r6, lr}
 800677e:	460c      	mov	r4, r1
 8006780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006784:	4615      	mov	r5, r2
 8006786:	2900      	cmp	r1, #0
 8006788:	461e      	mov	r6, r3
 800678a:	b096      	sub	sp, #88	@ 0x58
 800678c:	da0c      	bge.n	80067a8 <__swhatbuf_r+0x2c>
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	2100      	movs	r1, #0
 8006792:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006796:	bf14      	ite	ne
 8006798:	2340      	movne	r3, #64	@ 0x40
 800679a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800679e:	2000      	movs	r0, #0
 80067a0:	6031      	str	r1, [r6, #0]
 80067a2:	602b      	str	r3, [r5, #0]
 80067a4:	b016      	add	sp, #88	@ 0x58
 80067a6:	bd70      	pop	{r4, r5, r6, pc}
 80067a8:	466a      	mov	r2, sp
 80067aa:	f000 f849 	bl	8006840 <_fstat_r>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	dbed      	blt.n	800678e <__swhatbuf_r+0x12>
 80067b2:	9901      	ldr	r1, [sp, #4]
 80067b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80067b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80067bc:	4259      	negs	r1, r3
 80067be:	4159      	adcs	r1, r3
 80067c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067c4:	e7eb      	b.n	800679e <__swhatbuf_r+0x22>

080067c6 <__smakebuf_r>:
 80067c6:	898b      	ldrh	r3, [r1, #12]
 80067c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ca:	079d      	lsls	r5, r3, #30
 80067cc:	4606      	mov	r6, r0
 80067ce:	460c      	mov	r4, r1
 80067d0:	d507      	bpl.n	80067e2 <__smakebuf_r+0x1c>
 80067d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80067d6:	6023      	str	r3, [r4, #0]
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	2301      	movs	r3, #1
 80067dc:	6163      	str	r3, [r4, #20]
 80067de:	b003      	add	sp, #12
 80067e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067e2:	466a      	mov	r2, sp
 80067e4:	ab01      	add	r3, sp, #4
 80067e6:	f7ff ffc9 	bl	800677c <__swhatbuf_r>
 80067ea:	9f00      	ldr	r7, [sp, #0]
 80067ec:	4605      	mov	r5, r0
 80067ee:	4639      	mov	r1, r7
 80067f0:	4630      	mov	r0, r6
 80067f2:	f7ff f9cf 	bl	8005b94 <_malloc_r>
 80067f6:	b948      	cbnz	r0, 800680c <__smakebuf_r+0x46>
 80067f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067fc:	059a      	lsls	r2, r3, #22
 80067fe:	d4ee      	bmi.n	80067de <__smakebuf_r+0x18>
 8006800:	f023 0303 	bic.w	r3, r3, #3
 8006804:	f043 0302 	orr.w	r3, r3, #2
 8006808:	81a3      	strh	r3, [r4, #12]
 800680a:	e7e2      	b.n	80067d2 <__smakebuf_r+0xc>
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006816:	81a3      	strh	r3, [r4, #12]
 8006818:	9b01      	ldr	r3, [sp, #4]
 800681a:	6020      	str	r0, [r4, #0]
 800681c:	b15b      	cbz	r3, 8006836 <__smakebuf_r+0x70>
 800681e:	4630      	mov	r0, r6
 8006820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006824:	f000 f81e 	bl	8006864 <_isatty_r>
 8006828:	b128      	cbz	r0, 8006836 <__smakebuf_r+0x70>
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	f023 0303 	bic.w	r3, r3, #3
 8006830:	f043 0301 	orr.w	r3, r3, #1
 8006834:	81a3      	strh	r3, [r4, #12]
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	431d      	orrs	r5, r3
 800683a:	81a5      	strh	r5, [r4, #12]
 800683c:	e7cf      	b.n	80067de <__smakebuf_r+0x18>
	...

08006840 <_fstat_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	2300      	movs	r3, #0
 8006844:	4d06      	ldr	r5, [pc, #24]	@ (8006860 <_fstat_r+0x20>)
 8006846:	4604      	mov	r4, r0
 8006848:	4608      	mov	r0, r1
 800684a:	4611      	mov	r1, r2
 800684c:	602b      	str	r3, [r5, #0]
 800684e:	f7fa ff9d 	bl	800178c <_fstat>
 8006852:	1c43      	adds	r3, r0, #1
 8006854:	d102      	bne.n	800685c <_fstat_r+0x1c>
 8006856:	682b      	ldr	r3, [r5, #0]
 8006858:	b103      	cbz	r3, 800685c <_fstat_r+0x1c>
 800685a:	6023      	str	r3, [r4, #0]
 800685c:	bd38      	pop	{r3, r4, r5, pc}
 800685e:	bf00      	nop
 8006860:	200003c8 	.word	0x200003c8

08006864 <_isatty_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	2300      	movs	r3, #0
 8006868:	4d05      	ldr	r5, [pc, #20]	@ (8006880 <_isatty_r+0x1c>)
 800686a:	4604      	mov	r4, r0
 800686c:	4608      	mov	r0, r1
 800686e:	602b      	str	r3, [r5, #0]
 8006870:	f7fa ff9b 	bl	80017aa <_isatty>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d102      	bne.n	800687e <_isatty_r+0x1a>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	b103      	cbz	r3, 800687e <_isatty_r+0x1a>
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	200003c8 	.word	0x200003c8

08006884 <_sbrk_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	2300      	movs	r3, #0
 8006888:	4d05      	ldr	r5, [pc, #20]	@ (80068a0 <_sbrk_r+0x1c>)
 800688a:	4604      	mov	r4, r0
 800688c:	4608      	mov	r0, r1
 800688e:	602b      	str	r3, [r5, #0]
 8006890:	f7fa ffa2 	bl	80017d8 <_sbrk>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d102      	bne.n	800689e <_sbrk_r+0x1a>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	b103      	cbz	r3, 800689e <_sbrk_r+0x1a>
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	200003c8 	.word	0x200003c8

080068a4 <memcpy>:
 80068a4:	440a      	add	r2, r1
 80068a6:	4291      	cmp	r1, r2
 80068a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80068ac:	d100      	bne.n	80068b0 <memcpy+0xc>
 80068ae:	4770      	bx	lr
 80068b0:	b510      	push	{r4, lr}
 80068b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068b6:	4291      	cmp	r1, r2
 80068b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068bc:	d1f9      	bne.n	80068b2 <memcpy+0xe>
 80068be:	bd10      	pop	{r4, pc}

080068c0 <__assert_func>:
 80068c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068c2:	4614      	mov	r4, r2
 80068c4:	461a      	mov	r2, r3
 80068c6:	4b09      	ldr	r3, [pc, #36]	@ (80068ec <__assert_func+0x2c>)
 80068c8:	4605      	mov	r5, r0
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68d8      	ldr	r0, [r3, #12]
 80068ce:	b954      	cbnz	r4, 80068e6 <__assert_func+0x26>
 80068d0:	4b07      	ldr	r3, [pc, #28]	@ (80068f0 <__assert_func+0x30>)
 80068d2:	461c      	mov	r4, r3
 80068d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068d8:	9100      	str	r1, [sp, #0]
 80068da:	462b      	mov	r3, r5
 80068dc:	4905      	ldr	r1, [pc, #20]	@ (80068f4 <__assert_func+0x34>)
 80068de:	f000 f841 	bl	8006964 <fiprintf>
 80068e2:	f000 f851 	bl	8006988 <abort>
 80068e6:	4b04      	ldr	r3, [pc, #16]	@ (80068f8 <__assert_func+0x38>)
 80068e8:	e7f4      	b.n	80068d4 <__assert_func+0x14>
 80068ea:	bf00      	nop
 80068ec:	20000018 	.word	0x20000018
 80068f0:	08006e2e 	.word	0x08006e2e
 80068f4:	08006e00 	.word	0x08006e00
 80068f8:	08006df3 	.word	0x08006df3

080068fc <_calloc_r>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	fba1 5402 	umull	r5, r4, r1, r2
 8006902:	b93c      	cbnz	r4, 8006914 <_calloc_r+0x18>
 8006904:	4629      	mov	r1, r5
 8006906:	f7ff f945 	bl	8005b94 <_malloc_r>
 800690a:	4606      	mov	r6, r0
 800690c:	b928      	cbnz	r0, 800691a <_calloc_r+0x1e>
 800690e:	2600      	movs	r6, #0
 8006910:	4630      	mov	r0, r6
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	220c      	movs	r2, #12
 8006916:	6002      	str	r2, [r0, #0]
 8006918:	e7f9      	b.n	800690e <_calloc_r+0x12>
 800691a:	462a      	mov	r2, r5
 800691c:	4621      	mov	r1, r4
 800691e:	f7fe f9e9 	bl	8004cf4 <memset>
 8006922:	e7f5      	b.n	8006910 <_calloc_r+0x14>

08006924 <__ascii_mbtowc>:
 8006924:	b082      	sub	sp, #8
 8006926:	b901      	cbnz	r1, 800692a <__ascii_mbtowc+0x6>
 8006928:	a901      	add	r1, sp, #4
 800692a:	b142      	cbz	r2, 800693e <__ascii_mbtowc+0x1a>
 800692c:	b14b      	cbz	r3, 8006942 <__ascii_mbtowc+0x1e>
 800692e:	7813      	ldrb	r3, [r2, #0]
 8006930:	600b      	str	r3, [r1, #0]
 8006932:	7812      	ldrb	r2, [r2, #0]
 8006934:	1e10      	subs	r0, r2, #0
 8006936:	bf18      	it	ne
 8006938:	2001      	movne	r0, #1
 800693a:	b002      	add	sp, #8
 800693c:	4770      	bx	lr
 800693e:	4610      	mov	r0, r2
 8006940:	e7fb      	b.n	800693a <__ascii_mbtowc+0x16>
 8006942:	f06f 0001 	mvn.w	r0, #1
 8006946:	e7f8      	b.n	800693a <__ascii_mbtowc+0x16>

08006948 <__ascii_wctomb>:
 8006948:	4603      	mov	r3, r0
 800694a:	4608      	mov	r0, r1
 800694c:	b141      	cbz	r1, 8006960 <__ascii_wctomb+0x18>
 800694e:	2aff      	cmp	r2, #255	@ 0xff
 8006950:	d904      	bls.n	800695c <__ascii_wctomb+0x14>
 8006952:	228a      	movs	r2, #138	@ 0x8a
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	4770      	bx	lr
 800695c:	2001      	movs	r0, #1
 800695e:	700a      	strb	r2, [r1, #0]
 8006960:	4770      	bx	lr
	...

08006964 <fiprintf>:
 8006964:	b40e      	push	{r1, r2, r3}
 8006966:	b503      	push	{r0, r1, lr}
 8006968:	4601      	mov	r1, r0
 800696a:	ab03      	add	r3, sp, #12
 800696c:	4805      	ldr	r0, [pc, #20]	@ (8006984 <fiprintf+0x20>)
 800696e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006972:	6800      	ldr	r0, [r0, #0]
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	f7ff fd41 	bl	80063fc <_vfiprintf_r>
 800697a:	b002      	add	sp, #8
 800697c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006980:	b003      	add	sp, #12
 8006982:	4770      	bx	lr
 8006984:	20000018 	.word	0x20000018

08006988 <abort>:
 8006988:	2006      	movs	r0, #6
 800698a:	b508      	push	{r3, lr}
 800698c:	f000 f82c 	bl	80069e8 <raise>
 8006990:	2001      	movs	r0, #1
 8006992:	f7fa feac 	bl	80016ee <_exit>

08006996 <_raise_r>:
 8006996:	291f      	cmp	r1, #31
 8006998:	b538      	push	{r3, r4, r5, lr}
 800699a:	4605      	mov	r5, r0
 800699c:	460c      	mov	r4, r1
 800699e:	d904      	bls.n	80069aa <_raise_r+0x14>
 80069a0:	2316      	movs	r3, #22
 80069a2:	6003      	str	r3, [r0, #0]
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295
 80069a8:	bd38      	pop	{r3, r4, r5, pc}
 80069aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80069ac:	b112      	cbz	r2, 80069b4 <_raise_r+0x1e>
 80069ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069b2:	b94b      	cbnz	r3, 80069c8 <_raise_r+0x32>
 80069b4:	4628      	mov	r0, r5
 80069b6:	f000 f831 	bl	8006a1c <_getpid_r>
 80069ba:	4622      	mov	r2, r4
 80069bc:	4601      	mov	r1, r0
 80069be:	4628      	mov	r0, r5
 80069c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069c4:	f000 b818 	b.w	80069f8 <_kill_r>
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d00a      	beq.n	80069e2 <_raise_r+0x4c>
 80069cc:	1c59      	adds	r1, r3, #1
 80069ce:	d103      	bne.n	80069d8 <_raise_r+0x42>
 80069d0:	2316      	movs	r3, #22
 80069d2:	6003      	str	r3, [r0, #0]
 80069d4:	2001      	movs	r0, #1
 80069d6:	e7e7      	b.n	80069a8 <_raise_r+0x12>
 80069d8:	2100      	movs	r1, #0
 80069da:	4620      	mov	r0, r4
 80069dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80069e0:	4798      	blx	r3
 80069e2:	2000      	movs	r0, #0
 80069e4:	e7e0      	b.n	80069a8 <_raise_r+0x12>
	...

080069e8 <raise>:
 80069e8:	4b02      	ldr	r3, [pc, #8]	@ (80069f4 <raise+0xc>)
 80069ea:	4601      	mov	r1, r0
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	f7ff bfd2 	b.w	8006996 <_raise_r>
 80069f2:	bf00      	nop
 80069f4:	20000018 	.word	0x20000018

080069f8 <_kill_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	2300      	movs	r3, #0
 80069fc:	4d06      	ldr	r5, [pc, #24]	@ (8006a18 <_kill_r+0x20>)
 80069fe:	4604      	mov	r4, r0
 8006a00:	4608      	mov	r0, r1
 8006a02:	4611      	mov	r1, r2
 8006a04:	602b      	str	r3, [r5, #0]
 8006a06:	f7fa fe62 	bl	80016ce <_kill>
 8006a0a:	1c43      	adds	r3, r0, #1
 8006a0c:	d102      	bne.n	8006a14 <_kill_r+0x1c>
 8006a0e:	682b      	ldr	r3, [r5, #0]
 8006a10:	b103      	cbz	r3, 8006a14 <_kill_r+0x1c>
 8006a12:	6023      	str	r3, [r4, #0]
 8006a14:	bd38      	pop	{r3, r4, r5, pc}
 8006a16:	bf00      	nop
 8006a18:	200003c8 	.word	0x200003c8

08006a1c <_getpid_r>:
 8006a1c:	f7fa be50 	b.w	80016c0 <_getpid>

08006a20 <_init>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	bf00      	nop
 8006a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a26:	bc08      	pop	{r3}
 8006a28:	469e      	mov	lr, r3
 8006a2a:	4770      	bx	lr

08006a2c <_fini>:
 8006a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2e:	bf00      	nop
 8006a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a32:	bc08      	pop	{r3}
 8006a34:	469e      	mov	lr, r3
 8006a36:	4770      	bx	lr
