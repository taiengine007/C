
007_I2C_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e38  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007cc  08002f44  08002f44  00003f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003710  08003710  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003710  08003710  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003710  08003710  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003710  08003710  00004710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003714  08003714  00004714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003718  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000068  08003780  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08003780  0000567c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adec  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c20  00000000  00000000  0000fe7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00011aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000822  00000000  00000000  00012528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018517  00000000  00000000  00012d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc9d  00000000  00000000  0002b261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872b6  00000000  00000000  00038efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c01b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003114  00000000  00000000  000c01f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000c330c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f2c 	.word	0x08002f2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002f2c 	.word	0x08002f2c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	char mytext[] = "hello oled";
 8000152:	4a15      	ldr	r2, [pc, #84]	@ (80001a8 <main+0x5c>)
 8000154:	1d3b      	adds	r3, r7, #4
 8000156:	ca07      	ldmia	r2, {r0, r1, r2}
 8000158:	c303      	stmia	r3!, {r0, r1}
 800015a:	801a      	strh	r2, [r3, #0]
 800015c:	3302      	adds	r3, #2
 800015e:	0c12      	lsrs	r2, r2, #16
 8000160:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fd51 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f827 	bl	80001b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8bf 	bl	80002ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800016e:	f000 f893 	bl	8000298 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000172:	f000 f863 	bl	800023c <MX_I2C1_Init>
  printf("i2c init\n");
 8000176:	480d      	ldr	r0, [pc, #52]	@ (80001ac <main+0x60>)
 8000178:	f002 fb4a 	bl	8002810 <puts>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800017c:	f000 fb48 	bl	8000810 <ssd1306_Init>
  printf("ssd1306 init\n");
 8000180:	480b      	ldr	r0, [pc, #44]	@ (80001b0 <main+0x64>)
 8000182:	f002 fb45 	bl	8002810 <puts>
 // ssd1306_Fill(White);
  //printf("ssd1306 fill white \n");

  //ssd1306_UpdateScreen();

  ssd1306_SetCursor(5,5);
 8000186:	2105      	movs	r1, #5
 8000188:	2005      	movs	r0, #5
 800018a:	f000 fcf3 	bl	8000b74 <ssd1306_SetCursor>
  retval = ssd1306_WriteString(mytext,Font_7x10,White);
 800018e:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <main+0x68>)
 8000190:	1d38      	adds	r0, r7, #4
 8000192:	2201      	movs	r2, #1
 8000194:	9200      	str	r2, [sp, #0]
 8000196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000198:	f000 fcc6 	bl	8000b28 <ssd1306_WriteString>
 800019c:	4603      	mov	r3, r0
 800019e:	73fb      	strb	r3, [r7, #15]
  ssd1306_UpdateScreen();
 80001a0:	f000 fbb8 	bl	8000914 <ssd1306_UpdateScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a4:	bf00      	nop
 80001a6:	e7fd      	b.n	80001a4 <main+0x58>
 80001a8:	08002f60 	.word	0x08002f60
 80001ac:	08002f44 	.word	0x08002f44
 80001b0:	08002f50 	.word	0x08002f50
 80001b4:	080036f0 	.word	0x080036f0

080001b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b090      	sub	sp, #64	@ 0x40
 80001bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	2228      	movs	r2, #40	@ 0x28
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f002 fc02 	bl	80029d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	605a      	str	r2, [r3, #4]
 80001d4:	609a      	str	r2, [r3, #8]
 80001d6:	60da      	str	r2, [r3, #12]
 80001d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001da:	2302      	movs	r3, #2
 80001dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001de:	2301      	movs	r3, #1
 80001e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e2:	2310      	movs	r3, #16
 80001e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e6:	2302      	movs	r3, #2
 80001e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ea:	2300      	movs	r3, #0
 80001ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ee:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f4:	f107 0318 	add.w	r3, r7, #24
 80001f8:	4618      	mov	r0, r3
 80001fa:	f001 fd03 	bl	8001c04 <HAL_RCC_OscConfig>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000204:	f000 f8e0 	bl	80003c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000208:	230f      	movs	r3, #15
 800020a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020c:	2302      	movs	r3, #2
 800020e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000214:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2102      	movs	r1, #2
 8000222:	4618      	mov	r0, r3
 8000224:	f001 ff70 	bl	8002108 <HAL_RCC_ClockConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800022e:	f000 f8cb 	bl	80003c8 <Error_Handler>
  }
}
 8000232:	bf00      	nop
 8000234:	3740      	adds	r7, #64	@ 0x40
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000240:	4b12      	ldr	r3, [pc, #72]	@ (800028c <MX_I2C1_Init+0x50>)
 8000242:	4a13      	ldr	r2, [pc, #76]	@ (8000290 <MX_I2C1_Init+0x54>)
 8000244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000246:	4b11      	ldr	r3, [pc, #68]	@ (800028c <MX_I2C1_Init+0x50>)
 8000248:	4a12      	ldr	r2, [pc, #72]	@ (8000294 <MX_I2C1_Init+0x58>)
 800024a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800024c:	4b0f      	ldr	r3, [pc, #60]	@ (800028c <MX_I2C1_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000252:	4b0e      	ldr	r3, [pc, #56]	@ (800028c <MX_I2C1_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000258:	4b0c      	ldr	r3, [pc, #48]	@ (800028c <MX_I2C1_Init+0x50>)
 800025a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800025e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000260:	4b0a      	ldr	r3, [pc, #40]	@ (800028c <MX_I2C1_Init+0x50>)
 8000262:	2200      	movs	r2, #0
 8000264:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000266:	4b09      	ldr	r3, [pc, #36]	@ (800028c <MX_I2C1_Init+0x50>)
 8000268:	2200      	movs	r2, #0
 800026a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800026c:	4b07      	ldr	r3, [pc, #28]	@ (800028c <MX_I2C1_Init+0x50>)
 800026e:	2200      	movs	r2, #0
 8000270:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000272:	4b06      	ldr	r3, [pc, #24]	@ (800028c <MX_I2C1_Init+0x50>)
 8000274:	2200      	movs	r2, #0
 8000276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000278:	4804      	ldr	r0, [pc, #16]	@ (800028c <MX_I2C1_Init+0x50>)
 800027a:	f001 f817 	bl	80012ac <HAL_I2C_Init>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000284:	f000 f8a0 	bl	80003c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000084 	.word	0x20000084
 8000290:	40005400 	.word	0x40005400
 8000294:	000186a0 	.word	0x000186a0

08000298 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800029c:	4b11      	ldr	r3, [pc, #68]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 800029e:	4a12      	ldr	r2, [pc, #72]	@ (80002e8 <MX_USART2_UART_Init+0x50>)
 80002a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002a2:	4b10      	ldr	r3, [pc, #64]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002bc:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002be:	220c      	movs	r2, #12
 80002c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ce:	4805      	ldr	r0, [pc, #20]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002d0:	f002 f8a8 	bl	8002424 <HAL_UART_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002da:	f000 f875 	bl	80003c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	200000d8 	.word	0x200000d8
 80002e8:	40004400 	.word	0x40004400

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0310 	add.w	r3, r7, #16
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000300:	4b2d      	ldr	r3, [pc, #180]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a2c      	ldr	r2, [pc, #176]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0310 	and.w	r3, r3, #16
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000318:	4b27      	ldr	r3, [pc, #156]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a26      	ldr	r2, [pc, #152]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b24      	ldr	r3, [pc, #144]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0320 	and.w	r3, r3, #32
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b21      	ldr	r3, [pc, #132]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a20      	ldr	r2, [pc, #128]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0304 	and.w	r3, r3, #4
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a1a      	ldr	r2, [pc, #104]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0308 	and.w	r3, r3, #8
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2120      	movs	r1, #32
 8000364:	4815      	ldr	r0, [pc, #84]	@ (80003bc <MX_GPIO_Init+0xd0>)
 8000366:	f000 ff67 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800036a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800036e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000370:	4b13      	ldr	r3, [pc, #76]	@ (80003c0 <MX_GPIO_Init+0xd4>)
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000378:	f107 0310 	add.w	r3, r7, #16
 800037c:	4619      	mov	r1, r3
 800037e:	4811      	ldr	r0, [pc, #68]	@ (80003c4 <MX_GPIO_Init+0xd8>)
 8000380:	f000 fdd6 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000384:	2320      	movs	r3, #32
 8000386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000388:	2301      	movs	r3, #1
 800038a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038c:	2300      	movs	r3, #0
 800038e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000390:	2302      	movs	r3, #2
 8000392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	4619      	mov	r1, r3
 800039a:	4808      	ldr	r0, [pc, #32]	@ (80003bc <MX_GPIO_Init+0xd0>)
 800039c:	f000 fdc8 	bl	8000f30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2100      	movs	r1, #0
 80003a4:	2028      	movs	r0, #40	@ 0x28
 80003a6:	f000 fd8c 	bl	8000ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003aa:	2028      	movs	r0, #40	@ 0x28
 80003ac:	f000 fda5 	bl	8000efa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b0:	bf00      	nop
 80003b2:	3720      	adds	r7, #32
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010800 	.word	0x40010800
 80003c0:	10110000 	.word	0x10110000
 80003c4:	40011000 	.word	0x40011000

080003c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003cc:	b672      	cpsid	i
}
 80003ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <Error_Handler+0x8>

080003d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003da:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a14      	ldr	r2, [pc, #80]	@ (8000430 <HAL_MspInit+0x5c>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6193      	str	r3, [r2, #24]
 80003e6:	4b12      	ldr	r3, [pc, #72]	@ (8000430 <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000430 <HAL_MspInit+0x5c>)
 80003f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800040a:	4b0a      	ldr	r3, [pc, #40]	@ (8000434 <HAL_MspInit+0x60>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	4a04      	ldr	r2, [pc, #16]	@ (8000434 <HAL_MspInit+0x60>)
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000
 8000434:	40010000 	.word	0x40010000

08000438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b08a      	sub	sp, #40	@ 0x28
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000440:	f107 0314 	add.w	r3, r7, #20
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a1d      	ldr	r2, [pc, #116]	@ (80004c8 <HAL_I2C_MspInit+0x90>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d132      	bne.n	80004be <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000458:	4b1c      	ldr	r3, [pc, #112]	@ (80004cc <HAL_I2C_MspInit+0x94>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a1b      	ldr	r2, [pc, #108]	@ (80004cc <HAL_I2C_MspInit+0x94>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b19      	ldr	r3, [pc, #100]	@ (80004cc <HAL_I2C_MspInit+0x94>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0308 	and.w	r3, r3, #8
 800046c:	613b      	str	r3, [r7, #16]
 800046e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000470:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000476:	2312      	movs	r3, #18
 8000478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800047a:	2303      	movs	r3, #3
 800047c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047e:	f107 0314 	add.w	r3, r7, #20
 8000482:	4619      	mov	r1, r3
 8000484:	4812      	ldr	r0, [pc, #72]	@ (80004d0 <HAL_I2C_MspInit+0x98>)
 8000486:	f000 fd53 	bl	8000f30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800048a:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <HAL_I2C_MspInit+0x9c>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000492:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000496:	627b      	str	r3, [r7, #36]	@ 0x24
 8000498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800049a:	f043 0302 	orr.w	r3, r3, #2
 800049e:	627b      	str	r3, [r7, #36]	@ 0x24
 80004a0:	4a0c      	ldr	r2, [pc, #48]	@ (80004d4 <HAL_I2C_MspInit+0x9c>)
 80004a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004a4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004a6:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <HAL_I2C_MspInit+0x94>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a08      	ldr	r2, [pc, #32]	@ (80004cc <HAL_I2C_MspInit+0x94>)
 80004ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <HAL_I2C_MspInit+0x94>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004be:	bf00      	nop
 80004c0:	3728      	adds	r7, #40	@ 0x28
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40005400 	.word	0x40005400
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010c00 	.word	0x40010c00
 80004d4:	40010000 	.word	0x40010000

080004d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a15      	ldr	r2, [pc, #84]	@ (8000548 <HAL_UART_MspInit+0x70>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d123      	bne.n	8000540 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004f8:	4b14      	ldr	r3, [pc, #80]	@ (800054c <HAL_UART_MspInit+0x74>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	4a13      	ldr	r2, [pc, #76]	@ (800054c <HAL_UART_MspInit+0x74>)
 80004fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000502:	61d3      	str	r3, [r2, #28]
 8000504:	4b11      	ldr	r3, [pc, #68]	@ (800054c <HAL_UART_MspInit+0x74>)
 8000506:	69db      	ldr	r3, [r3, #28]
 8000508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <HAL_UART_MspInit+0x74>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a0d      	ldr	r2, [pc, #52]	@ (800054c <HAL_UART_MspInit+0x74>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b0b      	ldr	r3, [pc, #44]	@ (800054c <HAL_UART_MspInit+0x74>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000528:	230c      	movs	r3, #12
 800052a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052c:	2302      	movs	r3, #2
 800052e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2302      	movs	r3, #2
 8000532:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	4619      	mov	r1, r3
 800053a:	4805      	ldr	r0, [pc, #20]	@ (8000550 <HAL_UART_MspInit+0x78>)
 800053c:	f000 fcf8 	bl	8000f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40004400 	.word	0x40004400
 800054c:	40021000 	.word	0x40021000
 8000550:	40010800 	.word	0x40010800

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <NMI_Handler+0x4>

0800055c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <MemManage_Handler+0x4>

0800056c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <UsageFault_Handler+0x4>

0800057c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a4:	f000 fb76 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80005b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80005b4:	f000 fe58 	bl	8001268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <ITM_SendChar+0x44>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <ITM_SendChar+0x44>)
 80005cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005d0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <ITM_SendChar+0x48>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <ITM_SendChar+0x48>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005de:	bf00      	nop
 80005e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f8      	beq.n	80005e0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005ee:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	6013      	str	r3, [r2, #0]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	e000edfc 	.word	0xe000edfc
 8000604:	e0000e00 	.word	0xe0000e00

08000608 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	e00a      	b.n	8000630 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800061a:	f3af 8000 	nop.w
 800061e:	4601      	mov	r1, r0
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	60ba      	str	r2, [r7, #8]
 8000626:	b2ca      	uxtb	r2, r1
 8000628:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	dbf0      	blt.n	800061a <_read+0x12>
  }

  return len;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b086      	sub	sp, #24
 8000646:	af00      	add	r7, sp, #0
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	e009      	b.n	8000668 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	60ba      	str	r2, [r7, #8]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ffad 	bl	80005bc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	dbf1      	blt.n	8000654 <_write+0x12>
  }
  return len;
 8000670:	687b      	ldr	r3, [r7, #4]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <_close>:

int _close(int file)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006a0:	605a      	str	r2, [r3, #4]
  return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr

080006ae <_isatty>:

int _isatty(int file)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b085      	sub	sp, #20
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
	...

080006dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e4:	4a14      	ldr	r2, [pc, #80]	@ (8000738 <_sbrk+0x5c>)
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <_sbrk+0x60>)
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f0:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d102      	bne.n	80006fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <_sbrk+0x64>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	@ (8000744 <_sbrk+0x68>)
 80006fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	429a      	cmp	r2, r3
 800070a:	d207      	bcs.n	800071c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800070c:	f002 f9ae 	bl	8002a6c <__errno>
 8000710:	4603      	mov	r3, r0
 8000712:	220c      	movs	r2, #12
 8000714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	e009      	b.n	8000730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <_sbrk+0x64>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000722:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	4a05      	ldr	r2, [pc, #20]	@ (8000740 <_sbrk+0x64>)
 800072c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072e:	68fb      	ldr	r3, [r7, #12]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20005000 	.word	0x20005000
 800073c:	00000400 	.word	0x00000400
 8000740:	20000120 	.word	0x20000120
 8000744:	20000680 	.word	0x20000680

08000748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000754:	f7ff fff8 	bl	8000748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800075a:	490c      	ldr	r1, [pc, #48]	@ (800078c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800075c:	4a0c      	ldr	r2, [pc, #48]	@ (8000790 <LoopFillZerobss+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000760:	e002      	b.n	8000768 <LoopCopyDataInit>

08000762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000766:	3304      	adds	r3, #4

08000768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800076c:	d3f9      	bcc.n	8000762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076e:	4a09      	ldr	r2, [pc, #36]	@ (8000794 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000770:	4c09      	ldr	r4, [pc, #36]	@ (8000798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000774:	e001      	b.n	800077a <LoopFillZerobss>

08000776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000778:	3204      	adds	r2, #4

0800077a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800077c:	d3fb      	bcc.n	8000776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077e:	f002 f97b 	bl	8002a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000782:	f7ff fce3 	bl	800014c <main>
  bx lr
 8000786:	4770      	bx	lr
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000790:	08003718 	.word	0x08003718
  ldr r2, =_sbss
 8000794:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000798:	2000067c 	.word	0x2000067c

0800079c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC1_2_IRQHandler>

0800079e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
	...

080007ac <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af04      	add	r7, sp, #16
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	9302      	str	r3, [sp, #8]
 80007bc:	2301      	movs	r3, #1
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2301      	movs	r3, #1
 80007c6:	2200      	movs	r2, #0
 80007c8:	2178      	movs	r1, #120	@ 0x78
 80007ca:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <ssd1306_WriteCommand+0x2c>)
 80007cc:	f000 feb2 	bl	8001534 <HAL_I2C_Mem_Write>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000084 	.word	0x20000084

080007dc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af04      	add	r7, sp, #16
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	f04f 32ff 	mov.w	r2, #4294967295
 80007ee:	9202      	str	r2, [sp, #8]
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2301      	movs	r3, #1
 80007f8:	2240      	movs	r2, #64	@ 0x40
 80007fa:	2178      	movs	r1, #120	@ 0x78
 80007fc:	4803      	ldr	r0, [pc, #12]	@ (800080c <ssd1306_WriteData+0x30>)
 80007fe:	f000 fe99 	bl	8001534 <HAL_I2C_Mem_Write>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000084 	.word	0x20000084

08000810 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000814:	f7ff ffc3 	bl	800079e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000818:	2064      	movs	r0, #100	@ 0x64
 800081a:	f000 fa57 	bl	8000ccc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800081e:	2000      	movs	r0, #0
 8000820:	f000 f9d4 	bl	8000bcc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000824:	2020      	movs	r0, #32
 8000826:	f7ff ffc1 	bl	80007ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff ffbe 	bl	80007ac <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000830:	20b0      	movs	r0, #176	@ 0xb0
 8000832:	f7ff ffbb 	bl	80007ac <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000836:	20c8      	movs	r0, #200	@ 0xc8
 8000838:	f7ff ffb8 	bl	80007ac <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff ffb5 	bl	80007ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000842:	2010      	movs	r0, #16
 8000844:	f7ff ffb2 	bl	80007ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000848:	2040      	movs	r0, #64	@ 0x40
 800084a:	f7ff ffaf 	bl	80007ac <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800084e:	20ff      	movs	r0, #255	@ 0xff
 8000850:	f000 f9a8 	bl	8000ba4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000854:	20a1      	movs	r0, #161	@ 0xa1
 8000856:	f7ff ffa9 	bl	80007ac <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800085a:	20a6      	movs	r0, #166	@ 0xa6
 800085c:	f7ff ffa6 	bl	80007ac <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000860:	20a8      	movs	r0, #168	@ 0xa8
 8000862:	f7ff ffa3 	bl	80007ac <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000866:	203f      	movs	r0, #63	@ 0x3f
 8000868:	f7ff ffa0 	bl	80007ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800086c:	20a4      	movs	r0, #164	@ 0xa4
 800086e:	f7ff ff9d 	bl	80007ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000872:	20d3      	movs	r0, #211	@ 0xd3
 8000874:	f7ff ff9a 	bl	80007ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff ff97 	bl	80007ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800087e:	20d5      	movs	r0, #213	@ 0xd5
 8000880:	f7ff ff94 	bl	80007ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000884:	20f0      	movs	r0, #240	@ 0xf0
 8000886:	f7ff ff91 	bl	80007ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800088a:	20d9      	movs	r0, #217	@ 0xd9
 800088c:	f7ff ff8e 	bl	80007ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000890:	2022      	movs	r0, #34	@ 0x22
 8000892:	f7ff ff8b 	bl	80007ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000896:	20da      	movs	r0, #218	@ 0xda
 8000898:	f7ff ff88 	bl	80007ac <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800089c:	2012      	movs	r0, #18
 800089e:	f7ff ff85 	bl	80007ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80008a2:	20db      	movs	r0, #219	@ 0xdb
 80008a4:	f7ff ff82 	bl	80007ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80008a8:	2020      	movs	r0, #32
 80008aa:	f7ff ff7f 	bl	80007ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80008ae:	208d      	movs	r0, #141	@ 0x8d
 80008b0:	f7ff ff7c 	bl	80007ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80008b4:	2014      	movs	r0, #20
 80008b6:	f7ff ff79 	bl	80007ac <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 f986 	bl	8000bcc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 f80f 	bl	80008e4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80008c6:	f000 f825 	bl	8000914 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <ssd1306_Init+0xd0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80008d0:	4b03      	ldr	r3, [pc, #12]	@ (80008e0 <ssd1306_Init+0xd0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80008d6:	4b02      	ldr	r3, [pc, #8]	@ (80008e0 <ssd1306_Init+0xd0>)
 80008d8:	2201      	movs	r2, #1
 80008da:	711a      	strb	r2, [r3, #4]
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000524 	.word	0x20000524

080008e4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d101      	bne.n	80008f8 <ssd1306_Fill+0x14>
 80008f4:	2300      	movs	r3, #0
 80008f6:	e000      	b.n	80008fa <ssd1306_Fill+0x16>
 80008f8:	23ff      	movs	r3, #255	@ 0xff
 80008fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008fe:	4619      	mov	r1, r3
 8000900:	4803      	ldr	r0, [pc, #12]	@ (8000910 <ssd1306_Fill+0x2c>)
 8000902:	f002 f865 	bl	80029d0 <memset>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000124 	.word	0x20000124

08000914 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800091a:	2300      	movs	r3, #0
 800091c:	71fb      	strb	r3, [r7, #7]
 800091e:	e016      	b.n	800094e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	3b50      	subs	r3, #80	@ 0x50
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ff40 	bl	80007ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ff3d 	bl	80007ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000932:	2010      	movs	r0, #16
 8000934:	f7ff ff3a 	bl	80007ac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	01db      	lsls	r3, r3, #7
 800093c:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <ssd1306_UpdateScreen+0x4c>)
 800093e:	4413      	add	r3, r2
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ff4a 	bl	80007dc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	3301      	adds	r3, #1
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b07      	cmp	r3, #7
 8000952:	d9e5      	bls.n	8000920 <ssd1306_UpdateScreen+0xc>
    }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000124 	.word	0x20000124

08000964 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	460b      	mov	r3, r1
 8000970:	71bb      	strb	r3, [r7, #6]
 8000972:	4613      	mov	r3, r2
 8000974:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	db3d      	blt.n	80009fa <ssd1306_DrawPixel+0x96>
 800097e:	79bb      	ldrb	r3, [r7, #6]
 8000980:	2b3f      	cmp	r3, #63	@ 0x3f
 8000982:	d83a      	bhi.n	80009fa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000984:	797b      	ldrb	r3, [r7, #5]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d11a      	bne.n	80009c0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800098a:	79fa      	ldrb	r2, [r7, #7]
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	b2d8      	uxtb	r0, r3
 8000992:	4603      	mov	r3, r0
 8000994:	01db      	lsls	r3, r3, #7
 8000996:	4413      	add	r3, r2
 8000998:	4a1a      	ldr	r2, [pc, #104]	@ (8000a04 <ssd1306_DrawPixel+0xa0>)
 800099a:	5cd3      	ldrb	r3, [r2, r3]
 800099c:	b25a      	sxtb	r2, r3
 800099e:	79bb      	ldrb	r3, [r7, #6]
 80009a0:	f003 0307 	and.w	r3, r3, #7
 80009a4:	2101      	movs	r1, #1
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b259      	sxtb	r1, r3
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	4603      	mov	r3, r0
 80009b4:	01db      	lsls	r3, r3, #7
 80009b6:	4413      	add	r3, r2
 80009b8:	b2c9      	uxtb	r1, r1
 80009ba:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <ssd1306_DrawPixel+0xa0>)
 80009bc:	54d1      	strb	r1, [r2, r3]
 80009be:	e01d      	b.n	80009fc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80009c0:	79fa      	ldrb	r2, [r7, #7]
 80009c2:	79bb      	ldrb	r3, [r7, #6]
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	b2d8      	uxtb	r0, r3
 80009c8:	4603      	mov	r3, r0
 80009ca:	01db      	lsls	r3, r3, #7
 80009cc:	4413      	add	r3, r2
 80009ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000a04 <ssd1306_DrawPixel+0xa0>)
 80009d0:	5cd3      	ldrb	r3, [r2, r3]
 80009d2:	b25a      	sxtb	r2, r3
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	2101      	movs	r1, #1
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	4013      	ands	r3, r2
 80009e8:	b259      	sxtb	r1, r3
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	4603      	mov	r3, r0
 80009ee:	01db      	lsls	r3, r3, #7
 80009f0:	4413      	add	r3, r2
 80009f2:	b2c9      	uxtb	r1, r1
 80009f4:	4a03      	ldr	r2, [pc, #12]	@ (8000a04 <ssd1306_DrawPixel+0xa0>)
 80009f6:	54d1      	strb	r1, [r2, r3]
 80009f8:	e000      	b.n	80009fc <ssd1306_DrawPixel+0x98>
        return;
 80009fa:	bf00      	nop
    }
}
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	20000124 	.word	0x20000124

08000a08 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b089      	sub	sp, #36	@ 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4604      	mov	r4, r0
 8000a10:	4638      	mov	r0, r7
 8000a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000a16:	4623      	mov	r3, r4
 8000a18:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	2b1f      	cmp	r3, #31
 8000a1e:	d902      	bls.n	8000a26 <ssd1306_WriteChar+0x1e>
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	2b7e      	cmp	r3, #126	@ 0x7e
 8000a24:	d901      	bls.n	8000a2a <ssd1306_WriteChar+0x22>
        return 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e077      	b.n	8000b1a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b24 <ssd1306_WriteChar+0x11c>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	783b      	ldrb	r3, [r7, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	2b80      	cmp	r3, #128	@ 0x80
 8000a36:	dc06      	bgt.n	8000a46 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000a38:	4b3a      	ldr	r3, [pc, #232]	@ (8000b24 <ssd1306_WriteChar+0x11c>)
 8000a3a:	885b      	ldrh	r3, [r3, #2]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	787b      	ldrb	r3, [r7, #1]
 8000a40:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000a42:	2b40      	cmp	r3, #64	@ 0x40
 8000a44:	dd01      	ble.n	8000a4a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e067      	b.n	8000b1a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
 8000a4e:	e04e      	b.n	8000aee <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	3b20      	subs	r3, #32
 8000a56:	7879      	ldrb	r1, [r7, #1]
 8000a58:	fb01 f303 	mul.w	r3, r1, r3
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	440b      	add	r3, r1
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	4413      	add	r3, r2
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
 8000a6e:	e036      	b.n	8000ade <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d013      	beq.n	8000aa8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000a80:	4b28      	ldr	r3, [pc, #160]	@ (8000b24 <ssd1306_WriteChar+0x11c>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b2d8      	uxtb	r0, r3
 8000a8e:	4b25      	ldr	r3, [pc, #148]	@ (8000b24 <ssd1306_WriteChar+0x11c>)
 8000a90:	885b      	ldrh	r3, [r3, #2]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f7ff ff5f 	bl	8000964 <ssd1306_DrawPixel>
 8000aa6:	e017      	b.n	8000ad8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <ssd1306_WriteChar+0x11c>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	b2d8      	uxtb	r0, r3
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <ssd1306_WriteChar+0x11c>)
 8000ab8:	885b      	ldrh	r3, [r3, #2]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	4413      	add	r3, r2
 8000ac2:	b2d9      	uxtb	r1, r3
 8000ac4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf0c      	ite	eq
 8000acc:	2301      	moveq	r3, #1
 8000ace:	2300      	movne	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	f7ff ff46 	bl	8000964 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	3301      	adds	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	783b      	ldrb	r3, [r7, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d3c3      	bcc.n	8000a70 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	3301      	adds	r3, #1
 8000aec:	61fb      	str	r3, [r7, #28]
 8000aee:	787b      	ldrb	r3, [r7, #1]
 8000af0:	461a      	mov	r2, r3
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d3ab      	bcc.n	8000a50 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <ssd1306_WriteChar+0x11c>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	d005      	beq.n	8000b0e <ssd1306_WriteChar+0x106>
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	3a20      	subs	r2, #32
 8000b08:	440a      	add	r2, r1
 8000b0a:	7812      	ldrb	r2, [r2, #0]
 8000b0c:	e000      	b.n	8000b10 <ssd1306_WriteChar+0x108>
 8000b0e:	783a      	ldrb	r2, [r7, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <ssd1306_WriteChar+0x11c>)
 8000b16:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3724      	adds	r7, #36	@ 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000524 	.word	0x20000524

08000b28 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	4638      	mov	r0, r7
 8000b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000b36:	e013      	b.n	8000b60 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	7818      	ldrb	r0, [r3, #0]
 8000b3c:	7e3b      	ldrb	r3, [r7, #24]
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	463b      	mov	r3, r7
 8000b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b44:	f7ff ff60 	bl	8000a08 <ssd1306_WriteChar>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d002      	beq.n	8000b5a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	e008      	b.n	8000b6c <ssd1306_WriteString+0x44>
        }
        str++;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1e7      	bne.n	8000b38 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	4613      	mov	r3, r2
 8000b82:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <ssd1306_SetCursor+0x2c>)
 8000b8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <ssd1306_SetCursor+0x2c>)
 8000b92:	805a      	strh	r2, [r3, #2]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000524 	.word	0x20000524

08000ba4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000bae:	2381      	movs	r3, #129	@ 0x81
 8000bb0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fdf9 	bl	80007ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fdf5 	bl	80007ac <ssd1306_WriteCommand>
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d005      	beq.n	8000be8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000bdc:	23af      	movs	r3, #175	@ 0xaf
 8000bde:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <ssd1306_SetDisplayOn+0x38>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	715a      	strb	r2, [r3, #5]
 8000be6:	e004      	b.n	8000bf2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000be8:	23ae      	movs	r3, #174	@ 0xae
 8000bea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000bec:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <ssd1306_SetDisplayOn+0x38>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fdd9 	bl	80007ac <ssd1306_WriteCommand>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000524 	.word	0x20000524

08000c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <HAL_Init+0x28>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	@ (8000c30 <HAL_Init+0x28>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f947 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f808 	bl	8000c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fbd6 	bl	80003d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40022000 	.word	0x40022000

08000c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <HAL_InitTick+0x54>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <HAL_InitTick+0x58>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f95f 	bl	8000f16 <HAL_SYSTICK_Config>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00e      	b.n	8000c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d80a      	bhi.n	8000c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f000 f927 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c74:	4a06      	ldr	r2, [pc, #24]	@ (8000c90 <HAL_InitTick+0x5c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e000      	b.n	8000c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000004 	.word	0x20000004

08000c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <HAL_IncTick+0x1c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <HAL_IncTick+0x20>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a03      	ldr	r2, [pc, #12]	@ (8000cb4 <HAL_IncTick+0x20>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	2000052c 	.word	0x2000052c

08000cb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b02      	ldr	r3, [pc, #8]	@ (8000cc8 <HAL_GetTick+0x10>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	2000052c 	.word	0x2000052c

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff fff0 	bl	8000cb8 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <HAL_Delay+0x44>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffe0 	bl	8000cb8 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4906      	ldr	r1, [pc, #24]	@ (8000dac <__NVIC_EnableIRQ+0x34>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	@ (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	@ (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	@ 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f7ff ff90 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff2d 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff42 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff90 	bl	8000e04 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5f 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff35 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffa2 	bl	8000e68 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b08b      	sub	sp, #44	@ 0x2c
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f42:	e169      	b.n	8001218 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f44:	2201      	movs	r2, #1
 8000f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	69fa      	ldr	r2, [r7, #28]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	f040 8158 	bne.w	8001212 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4a9a      	ldr	r2, [pc, #616]	@ (80011d0 <HAL_GPIO_Init+0x2a0>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d05e      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f6c:	4a98      	ldr	r2, [pc, #608]	@ (80011d0 <HAL_GPIO_Init+0x2a0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d875      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000f72:	4a98      	ldr	r2, [pc, #608]	@ (80011d4 <HAL_GPIO_Init+0x2a4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d058      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f78:	4a96      	ldr	r2, [pc, #600]	@ (80011d4 <HAL_GPIO_Init+0x2a4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d86f      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000f7e:	4a96      	ldr	r2, [pc, #600]	@ (80011d8 <HAL_GPIO_Init+0x2a8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d052      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f84:	4a94      	ldr	r2, [pc, #592]	@ (80011d8 <HAL_GPIO_Init+0x2a8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d869      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000f8a:	4a94      	ldr	r2, [pc, #592]	@ (80011dc <HAL_GPIO_Init+0x2ac>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d04c      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f90:	4a92      	ldr	r2, [pc, #584]	@ (80011dc <HAL_GPIO_Init+0x2ac>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d863      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000f96:	4a92      	ldr	r2, [pc, #584]	@ (80011e0 <HAL_GPIO_Init+0x2b0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d046      	beq.n	800102a <HAL_GPIO_Init+0xfa>
 8000f9c:	4a90      	ldr	r2, [pc, #576]	@ (80011e0 <HAL_GPIO_Init+0x2b0>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d85d      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000fa2:	2b12      	cmp	r3, #18
 8000fa4:	d82a      	bhi.n	8000ffc <HAL_GPIO_Init+0xcc>
 8000fa6:	2b12      	cmp	r3, #18
 8000fa8:	d859      	bhi.n	800105e <HAL_GPIO_Init+0x12e>
 8000faa:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb0 <HAL_GPIO_Init+0x80>)
 8000fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb0:	0800102b 	.word	0x0800102b
 8000fb4:	08001005 	.word	0x08001005
 8000fb8:	08001017 	.word	0x08001017
 8000fbc:	08001059 	.word	0x08001059
 8000fc0:	0800105f 	.word	0x0800105f
 8000fc4:	0800105f 	.word	0x0800105f
 8000fc8:	0800105f 	.word	0x0800105f
 8000fcc:	0800105f 	.word	0x0800105f
 8000fd0:	0800105f 	.word	0x0800105f
 8000fd4:	0800105f 	.word	0x0800105f
 8000fd8:	0800105f 	.word	0x0800105f
 8000fdc:	0800105f 	.word	0x0800105f
 8000fe0:	0800105f 	.word	0x0800105f
 8000fe4:	0800105f 	.word	0x0800105f
 8000fe8:	0800105f 	.word	0x0800105f
 8000fec:	0800105f 	.word	0x0800105f
 8000ff0:	0800105f 	.word	0x0800105f
 8000ff4:	0800100d 	.word	0x0800100d
 8000ff8:	08001021 	.word	0x08001021
 8000ffc:	4a79      	ldr	r2, [pc, #484]	@ (80011e4 <HAL_GPIO_Init+0x2b4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001002:	e02c      	b.n	800105e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	623b      	str	r3, [r7, #32]
          break;
 800100a:	e029      	b.n	8001060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	3304      	adds	r3, #4
 8001012:	623b      	str	r3, [r7, #32]
          break;
 8001014:	e024      	b.n	8001060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	3308      	adds	r3, #8
 800101c:	623b      	str	r3, [r7, #32]
          break;
 800101e:	e01f      	b.n	8001060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	330c      	adds	r3, #12
 8001026:	623b      	str	r3, [r7, #32]
          break;
 8001028:	e01a      	b.n	8001060 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001032:	2304      	movs	r3, #4
 8001034:	623b      	str	r3, [r7, #32]
          break;
 8001036:	e013      	b.n	8001060 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d105      	bne.n	800104c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001040:	2308      	movs	r3, #8
 8001042:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	611a      	str	r2, [r3, #16]
          break;
 800104a:	e009      	b.n	8001060 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800104c:	2308      	movs	r3, #8
 800104e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	615a      	str	r2, [r3, #20]
          break;
 8001056:	e003      	b.n	8001060 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
          break;
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x130>
          break;
 800105e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2bff      	cmp	r3, #255	@ 0xff
 8001064:	d801      	bhi.n	800106a <HAL_GPIO_Init+0x13a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	e001      	b.n	800106e <HAL_GPIO_Init+0x13e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3304      	adds	r3, #4
 800106e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2bff      	cmp	r3, #255	@ 0xff
 8001074:	d802      	bhi.n	800107c <HAL_GPIO_Init+0x14c>
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	e002      	b.n	8001082 <HAL_GPIO_Init+0x152>
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	3b08      	subs	r3, #8
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	210f      	movs	r1, #15
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	401a      	ands	r2, r3
 8001094:	6a39      	ldr	r1, [r7, #32]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	431a      	orrs	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 80b1 	beq.w	8001212 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010b0:	4b4d      	ldr	r3, [pc, #308]	@ (80011e8 <HAL_GPIO_Init+0x2b8>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a4c      	ldr	r2, [pc, #304]	@ (80011e8 <HAL_GPIO_Init+0x2b8>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b4a      	ldr	r3, [pc, #296]	@ (80011e8 <HAL_GPIO_Init+0x2b8>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010c8:	4a48      	ldr	r2, [pc, #288]	@ (80011ec <HAL_GPIO_Init+0x2bc>)
 80010ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a40      	ldr	r2, [pc, #256]	@ (80011f0 <HAL_GPIO_Init+0x2c0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d013      	beq.n	800111c <HAL_GPIO_Init+0x1ec>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a3f      	ldr	r2, [pc, #252]	@ (80011f4 <HAL_GPIO_Init+0x2c4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d00d      	beq.n	8001118 <HAL_GPIO_Init+0x1e8>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a3e      	ldr	r2, [pc, #248]	@ (80011f8 <HAL_GPIO_Init+0x2c8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d007      	beq.n	8001114 <HAL_GPIO_Init+0x1e4>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a3d      	ldr	r2, [pc, #244]	@ (80011fc <HAL_GPIO_Init+0x2cc>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d101      	bne.n	8001110 <HAL_GPIO_Init+0x1e0>
 800110c:	2303      	movs	r3, #3
 800110e:	e006      	b.n	800111e <HAL_GPIO_Init+0x1ee>
 8001110:	2304      	movs	r3, #4
 8001112:	e004      	b.n	800111e <HAL_GPIO_Init+0x1ee>
 8001114:	2302      	movs	r3, #2
 8001116:	e002      	b.n	800111e <HAL_GPIO_Init+0x1ee>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <HAL_GPIO_Init+0x1ee>
 800111c:	2300      	movs	r3, #0
 800111e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001120:	f002 0203 	and.w	r2, r2, #3
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	4093      	lsls	r3, r2
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800112e:	492f      	ldr	r1, [pc, #188]	@ (80011ec <HAL_GPIO_Init+0x2bc>)
 8001130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	492c      	ldr	r1, [pc, #176]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	608b      	str	r3, [r1, #8]
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001156:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	43db      	mvns	r3, r3
 800115e:	4928      	ldr	r1, [pc, #160]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 8001160:	4013      	ands	r3, r2
 8001162:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001170:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	4922      	ldr	r1, [pc, #136]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	60cb      	str	r3, [r1, #12]
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	43db      	mvns	r3, r3
 8001186:	491e      	ldr	r1, [pc, #120]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 8001188:	4013      	ands	r3, r2
 800118a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4918      	ldr	r1, [pc, #96]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011a6:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4914      	ldr	r1, [pc, #80]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d021      	beq.n	8001204 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	490e      	ldr	r1, [pc, #56]	@ (8001200 <HAL_GPIO_Init+0x2d0>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	600b      	str	r3, [r1, #0]
 80011cc:	e021      	b.n	8001212 <HAL_GPIO_Init+0x2e2>
 80011ce:	bf00      	nop
 80011d0:	10320000 	.word	0x10320000
 80011d4:	10310000 	.word	0x10310000
 80011d8:	10220000 	.word	0x10220000
 80011dc:	10210000 	.word	0x10210000
 80011e0:	10120000 	.word	0x10120000
 80011e4:	10110000 	.word	0x10110000
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010000 	.word	0x40010000
 80011f0:	40010800 	.word	0x40010800
 80011f4:	40010c00 	.word	0x40010c00
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40011400 	.word	0x40011400
 8001200:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <HAL_GPIO_Init+0x304>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	43db      	mvns	r3, r3
 800120c:	4909      	ldr	r1, [pc, #36]	@ (8001234 <HAL_GPIO_Init+0x304>)
 800120e:	4013      	ands	r3, r2
 8001210:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	3301      	adds	r3, #1
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121e:	fa22 f303 	lsr.w	r3, r2, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	f47f ae8e 	bne.w	8000f44 <HAL_GPIO_Init+0x14>
  }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	372c      	adds	r7, #44	@ 0x2c
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	611a      	str	r2, [r3, #16]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001274:	695a      	ldr	r2, [r3, #20]
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800127e:	4a05      	ldr	r2, [pc, #20]	@ (8001294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f806 	bl	8001298 <HAL_GPIO_EXTI_Callback>
  }
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e12b      	b.n	8001516 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d106      	bne.n	80012d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff f8b0 	bl	8000438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2224      	movs	r2, #36	@ 0x24
 80012dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0201 	bic.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800130e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001310:	f001 f842 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8001314:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4a81      	ldr	r2, [pc, #516]	@ (8001520 <HAL_I2C_Init+0x274>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d807      	bhi.n	8001330 <HAL_I2C_Init+0x84>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a80      	ldr	r2, [pc, #512]	@ (8001524 <HAL_I2C_Init+0x278>)
 8001324:	4293      	cmp	r3, r2
 8001326:	bf94      	ite	ls
 8001328:	2301      	movls	r3, #1
 800132a:	2300      	movhi	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	e006      	b.n	800133e <HAL_I2C_Init+0x92>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a7d      	ldr	r2, [pc, #500]	@ (8001528 <HAL_I2C_Init+0x27c>)
 8001334:	4293      	cmp	r3, r2
 8001336:	bf94      	ite	ls
 8001338:	2301      	movls	r3, #1
 800133a:	2300      	movhi	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e0e7      	b.n	8001516 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4a78      	ldr	r2, [pc, #480]	@ (800152c <HAL_I2C_Init+0x280>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	0c9b      	lsrs	r3, r3, #18
 8001350:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	430a      	orrs	r2, r1
 8001364:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a6a      	ldr	r2, [pc, #424]	@ (8001520 <HAL_I2C_Init+0x274>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d802      	bhi.n	8001380 <HAL_I2C_Init+0xd4>
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3301      	adds	r3, #1
 800137e:	e009      	b.n	8001394 <HAL_I2C_Init+0xe8>
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	4a69      	ldr	r2, [pc, #420]	@ (8001530 <HAL_I2C_Init+0x284>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	099b      	lsrs	r3, r3, #6
 8001392:	3301      	adds	r3, #1
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	430b      	orrs	r3, r1
 800139a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	495c      	ldr	r1, [pc, #368]	@ (8001520 <HAL_I2C_Init+0x274>)
 80013b0:	428b      	cmp	r3, r1
 80013b2:	d819      	bhi.n	80013e8 <HAL_I2C_Init+0x13c>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	1e59      	subs	r1, r3, #1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fbb1 f3f3 	udiv	r3, r1, r3
 80013c2:	1c59      	adds	r1, r3, #1
 80013c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80013c8:	400b      	ands	r3, r1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <HAL_I2C_Init+0x138>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	1e59      	subs	r1, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013dc:	3301      	adds	r3, #1
 80013de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e2:	e051      	b.n	8001488 <HAL_I2C_Init+0x1dc>
 80013e4:	2304      	movs	r3, #4
 80013e6:	e04f      	b.n	8001488 <HAL_I2C_Init+0x1dc>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d111      	bne.n	8001414 <HAL_I2C_Init+0x168>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1e58      	subs	r0, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	440b      	add	r3, r1
 80013fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001402:	3301      	adds	r3, #1
 8001404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	e012      	b.n	800143a <HAL_I2C_Init+0x18e>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1e58      	subs	r0, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	0099      	lsls	r1, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	fbb0 f3f3 	udiv	r3, r0, r3
 800142a:	3301      	adds	r3, #1
 800142c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf0c      	ite	eq
 8001434:	2301      	moveq	r3, #1
 8001436:	2300      	movne	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_Init+0x196>
 800143e:	2301      	movs	r3, #1
 8001440:	e022      	b.n	8001488 <HAL_I2C_Init+0x1dc>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10e      	bne.n	8001468 <HAL_I2C_Init+0x1bc>
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1e58      	subs	r0, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6859      	ldr	r1, [r3, #4]
 8001452:	460b      	mov	r3, r1
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	440b      	add	r3, r1
 8001458:	fbb0 f3f3 	udiv	r3, r0, r3
 800145c:	3301      	adds	r3, #1
 800145e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001466:	e00f      	b.n	8001488 <HAL_I2C_Init+0x1dc>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1e58      	subs	r0, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	0099      	lsls	r1, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	fbb0 f3f3 	udiv	r3, r0, r3
 800147e:	3301      	adds	r3, #1
 8001480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001484:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	6809      	ldr	r1, [r1, #0]
 800148c:	4313      	orrs	r3, r2
 800148e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69da      	ldr	r2, [r3, #28]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6911      	ldr	r1, [r2, #16]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68d2      	ldr	r2, [r2, #12]
 80014c2:	4311      	orrs	r1, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	430b      	orrs	r3, r1
 80014ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0201 	orr.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	000186a0 	.word	0x000186a0
 8001524:	001e847f 	.word	0x001e847f
 8001528:	003d08ff 	.word	0x003d08ff
 800152c:	431bde83 	.word	0x431bde83
 8001530:	10624dd3 	.word	0x10624dd3

08001534 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af02      	add	r7, sp, #8
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	4608      	mov	r0, r1
 800153e:	4611      	mov	r1, r2
 8001540:	461a      	mov	r2, r3
 8001542:	4603      	mov	r3, r0
 8001544:	817b      	strh	r3, [r7, #10]
 8001546:	460b      	mov	r3, r1
 8001548:	813b      	strh	r3, [r7, #8]
 800154a:	4613      	mov	r3, r2
 800154c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800154e:	f7ff fbb3 	bl	8000cb8 <HAL_GetTick>
 8001552:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b20      	cmp	r3, #32
 800155e:	f040 80d9 	bne.w	8001714 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2319      	movs	r3, #25
 8001568:	2201      	movs	r2, #1
 800156a:	496d      	ldr	r1, [pc, #436]	@ (8001720 <HAL_I2C_Mem_Write+0x1ec>)
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 f971 	bl	8001854 <I2C_WaitOnFlagUntilTimeout>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001578:	2302      	movs	r3, #2
 800157a:	e0cc      	b.n	8001716 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_I2C_Mem_Write+0x56>
 8001586:	2302      	movs	r3, #2
 8001588:	e0c5      	b.n	8001716 <HAL_I2C_Mem_Write+0x1e2>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b01      	cmp	r3, #1
 800159e:	d007      	beq.n	80015b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2221      	movs	r2, #33	@ 0x21
 80015c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2240      	movs	r2, #64	@ 0x40
 80015cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6a3a      	ldr	r2, [r7, #32]
 80015da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80015e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a4d      	ldr	r2, [pc, #308]	@ (8001724 <HAL_I2C_Mem_Write+0x1f0>)
 80015f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015f2:	88f8      	ldrh	r0, [r7, #6]
 80015f4:	893a      	ldrh	r2, [r7, #8]
 80015f6:	8979      	ldrh	r1, [r7, #10]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	4603      	mov	r3, r0
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f890 	bl	8001728 <I2C_RequestMemoryWrite>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d052      	beq.n	80016b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e081      	b.n	8001716 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 fa36 	bl	8001a88 <I2C_WaitOnTXEFlagUntilTimeout>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00d      	beq.n	800163e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	2b04      	cmp	r3, #4
 8001628:	d107      	bne.n	800163a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001638:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e06b      	b.n	8001716 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001658:	3b01      	subs	r3, #1
 800165a:	b29a      	uxth	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001664:	b29b      	uxth	r3, r3
 8001666:	3b01      	subs	r3, #1
 8001668:	b29a      	uxth	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b04      	cmp	r3, #4
 800167a:	d11b      	bne.n	80016b4 <HAL_I2C_Mem_Write+0x180>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001680:	2b00      	cmp	r3, #0
 8001682:	d017      	beq.n	80016b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001688:	781a      	ldrb	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1aa      	bne.n	8001612 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 fa29 	bl	8001b18 <I2C_WaitOnBTFFlagUntilTimeout>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00d      	beq.n	80016e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d107      	bne.n	80016e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e016      	b.n	8001716 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2220      	movs	r2, #32
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	e000      	b.n	8001716 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001714:	2302      	movs	r3, #2
  }
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	00100002 	.word	0x00100002
 8001724:	ffff0000 	.word	0xffff0000

08001728 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af02      	add	r7, sp, #8
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	4608      	mov	r0, r1
 8001732:	4611      	mov	r1, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4603      	mov	r3, r0
 8001738:	817b      	strh	r3, [r7, #10]
 800173a:	460b      	mov	r3, r1
 800173c:	813b      	strh	r3, [r7, #8]
 800173e:	4613      	mov	r3, r2
 8001740:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001750:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	2200      	movs	r2, #0
 800175a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 f878 	bl	8001854 <I2C_WaitOnFlagUntilTimeout>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00d      	beq.n	8001786 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001778:	d103      	bne.n	8001782 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001780:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e05f      	b.n	8001846 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001786:	897b      	ldrh	r3, [r7, #10]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001794:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	6a3a      	ldr	r2, [r7, #32]
 800179a:	492d      	ldr	r1, [pc, #180]	@ (8001850 <I2C_RequestMemoryWrite+0x128>)
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 f8d3 	bl	8001948 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e04c      	b.n	8001846 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017c4:	6a39      	ldr	r1, [r7, #32]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f95e 	bl	8001a88 <I2C_WaitOnTXEFlagUntilTimeout>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00d      	beq.n	80017ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d107      	bne.n	80017ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e02b      	b.n	8001846 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80017f4:	893b      	ldrh	r3, [r7, #8]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	e021      	b.n	8001844 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001800:	893b      	ldrh	r3, [r7, #8]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	b29b      	uxth	r3, r3
 8001806:	b2da      	uxtb	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800180e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001810:	6a39      	ldr	r1, [r7, #32]
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 f938 	bl	8001a88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00d      	beq.n	800183a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	2b04      	cmp	r3, #4
 8001824:	d107      	bne.n	8001836 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001834:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e005      	b.n	8001846 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800183a:	893b      	ldrh	r3, [r7, #8]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	00010002 	.word	0x00010002

08001854 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	4613      	mov	r3, r2
 8001862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001864:	e048      	b.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d044      	beq.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800186e:	f7ff fa23 	bl	8000cb8 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d302      	bcc.n	8001884 <I2C_WaitOnFlagUntilTimeout+0x30>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d139      	bne.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d10d      	bne.n	80018aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	43da      	mvns	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	4013      	ands	r3, r2
 800189a:	b29b      	uxth	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	e00c      	b.n	80018c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	43da      	mvns	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	4013      	ands	r3, r2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d116      	bne.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2220      	movs	r2, #32
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	f043 0220 	orr.w	r2, r3, #32
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e023      	b.n	8001940 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	0c1b      	lsrs	r3, r3, #16
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d10d      	bne.n	800191e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	43da      	mvns	r2, r3
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	4013      	ands	r3, r2
 800190e:	b29b      	uxth	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	e00c      	b.n	8001938 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	43da      	mvns	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	4013      	ands	r3, r2
 800192a:	b29b      	uxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf0c      	ite	eq
 8001930:	2301      	moveq	r3, #1
 8001932:	2300      	movne	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	429a      	cmp	r2, r3
 800193c:	d093      	beq.n	8001866 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001956:	e071      	b.n	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001966:	d123      	bne.n	80019b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001976:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001980:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2220      	movs	r2, #32
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	f043 0204 	orr.w	r2, r3, #4
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e067      	b.n	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b6:	d041      	beq.n	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b8:	f7ff f97e 	bl	8000cb8 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d302      	bcc.n	80019ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d136      	bne.n	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	0c1b      	lsrs	r3, r3, #16
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10c      	bne.n	80019f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4013      	ands	r3, r2
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bf14      	ite	ne
 80019ea:	2301      	movne	r3, #1
 80019ec:	2300      	moveq	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	e00b      	b.n	8001a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	43da      	mvns	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	4013      	ands	r3, r2
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf14      	ite	ne
 8001a04:	2301      	movne	r3, #1
 8001a06:	2300      	moveq	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d016      	beq.n	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	f043 0220 	orr.w	r2, r3, #32
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e021      	b.n	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	0c1b      	lsrs	r3, r3, #16
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d10c      	bne.n	8001a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	43da      	mvns	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	4013      	ands	r3, r2
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	e00b      	b.n	8001a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f47f af6d 	bne.w	8001958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a94:	e034      	b.n	8001b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f886 	bl	8001ba8 <I2C_IsAcknowledgeFailed>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e034      	b.n	8001b10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d028      	beq.n	8001b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aae:	f7ff f903 	bl	8000cb8 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d302      	bcc.n	8001ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d11d      	bne.n	8001b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ace:	2b80      	cmp	r3, #128	@ 0x80
 8001ad0:	d016      	beq.n	8001b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	f043 0220 	orr.w	r2, r3, #32
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e007      	b.n	8001b10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0a:	2b80      	cmp	r3, #128	@ 0x80
 8001b0c:	d1c3      	bne.n	8001a96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b24:	e034      	b.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 f83e 	bl	8001ba8 <I2C_IsAcknowledgeFailed>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e034      	b.n	8001ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d028      	beq.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3e:	f7ff f8bb 	bl	8000cb8 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d302      	bcc.n	8001b54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d11d      	bne.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d016      	beq.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e007      	b.n	8001ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d1c3      	bne.n	8001b26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bbe:	d11b      	bne.n	8001bf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001bc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	f043 0204 	orr.w	r2, r3, #4
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e272      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8087 	beq.w	8001d32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c24:	4b92      	ldr	r3, [pc, #584]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d00c      	beq.n	8001c4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c30:	4b8f      	ldr	r3, [pc, #572]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d112      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
 8001c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c48:	d10b      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4a:	4b89      	ldr	r3, [pc, #548]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d06c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x12c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d168      	bne.n	8001d30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e24c      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x76>
 8001c6c:	4b80      	ldr	r3, [pc, #512]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a7f      	ldr	r2, [pc, #508]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e02e      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x98>
 8001c82:	4b7b      	ldr	r3, [pc, #492]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a7a      	ldr	r2, [pc, #488]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b78      	ldr	r3, [pc, #480]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a77      	ldr	r2, [pc, #476]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xbc>
 8001ca6:	4b72      	ldr	r3, [pc, #456]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a71      	ldr	r2, [pc, #452]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b6f      	ldr	r3, [pc, #444]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6e      	ldr	r2, [pc, #440]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001cc0:	4b6b      	ldr	r3, [pc, #428]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b68      	ldr	r3, [pc, #416]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a67      	ldr	r2, [pc, #412]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7fe ffea 	bl	8000cb8 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7fe ffe6 	bl	8000cb8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	@ 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e200      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe4>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7fe ffd6 	bl	8000cb8 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7fe ffd2 	bl	8000cb8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1ec      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b53      	ldr	r3, [pc, #332]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x10c>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d063      	beq.n	8001e06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d3e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4a:	4b49      	ldr	r3, [pc, #292]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d11c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x18c>
 8001d56:	4b46      	ldr	r3, [pc, #280]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d116      	bne.n	8001d90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_RCC_OscConfig+0x176>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e1c0      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4939      	ldr	r1, [pc, #228]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	e03a      	b.n	8001e06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d98:	4b36      	ldr	r3, [pc, #216]	@ (8001e74 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ff8b 	bl	8000cb8 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da6:	f7fe ff87 	bl	8000cb8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e1a1      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4927      	ldr	r1, [pc, #156]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e015      	b.n	8001e06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dda:	4b26      	ldr	r3, [pc, #152]	@ (8001e74 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7fe ff6a 	bl	8000cb8 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de8:	f7fe ff66 	bl	8000cb8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e180      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d03a      	beq.n	8001e88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d019      	beq.n	8001e4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1a:	4b17      	ldr	r3, [pc, #92]	@ (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7fe ff4a 	bl	8000cb8 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7fe ff46 	bl	8000cb8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e160      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e46:	2001      	movs	r0, #1
 8001e48:	f000 face 	bl	80023e8 <RCC_Delay>
 8001e4c:	e01c      	b.n	8001e88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e54:	f7fe ff30 	bl	8000cb8 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5a:	e00f      	b.n	8001e7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7fe ff2c 	bl	8000cb8 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d908      	bls.n	8001e7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e146      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	42420000 	.word	0x42420000
 8001e78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	4b92      	ldr	r3, [pc, #584]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e9      	bne.n	8001e5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80a6 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b8b      	ldr	r3, [pc, #556]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10d      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b88      	ldr	r3, [pc, #544]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a87      	ldr	r2, [pc, #540]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b85      	ldr	r3, [pc, #532]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	4b82      	ldr	r3, [pc, #520]	@ (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d118      	bne.n	8001f00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ece:	4b7f      	ldr	r3, [pc, #508]	@ (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7e      	ldr	r2, [pc, #504]	@ (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eda:	f7fe feed 	bl	8000cb8 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee2:	f7fe fee9 	bl	8000cb8 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b64      	cmp	r3, #100	@ 0x64
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e103      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	4b75      	ldr	r3, [pc, #468]	@ (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x312>
 8001f08:	4b6f      	ldr	r3, [pc, #444]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a6e      	ldr	r2, [pc, #440]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	e02d      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x334>
 8001f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a69      	ldr	r2, [pc, #420]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	4b67      	ldr	r3, [pc, #412]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a66      	ldr	r2, [pc, #408]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	e01c      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x356>
 8001f40:	4b61      	ldr	r3, [pc, #388]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4a60      	ldr	r2, [pc, #384]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6213      	str	r3, [r2, #32]
 8001f4c:	4b5e      	ldr	r3, [pc, #376]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a5d      	ldr	r2, [pc, #372]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a5a      	ldr	r2, [pc, #360]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6213      	str	r3, [r2, #32]
 8001f66:	4b58      	ldr	r3, [pc, #352]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a57      	ldr	r2, [pc, #348]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d015      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7a:	f7fe fe9d 	bl	8000cb8 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe fe99 	bl	8000cb8 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0b1      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b4b      	ldr	r3, [pc, #300]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ee      	beq.n	8001f82 <HAL_RCC_OscConfig+0x37e>
 8001fa4:	e014      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7fe fe87 	bl	8000cb8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7fe fe83 	bl	8000cb8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e09b      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	4b40      	ldr	r3, [pc, #256]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b3c      	ldr	r3, [pc, #240]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a3b      	ldr	r2, [pc, #236]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8087 	beq.w	80020fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fec:	4b36      	ldr	r3, [pc, #216]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d061      	beq.n	80020bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d146      	bne.n	800208e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002000:	4b33      	ldr	r3, [pc, #204]	@ (80020d0 <HAL_RCC_OscConfig+0x4cc>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7fe fe57 	bl	8000cb8 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7fe fe53 	bl	8000cb8 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e06d      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002020:	4b29      	ldr	r3, [pc, #164]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002034:	d108      	bne.n	8002048 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002036:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4921      	ldr	r1, [pc, #132]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002048:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a19      	ldr	r1, [r3, #32]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	430b      	orrs	r3, r1
 800205a:	491b      	ldr	r1, [pc, #108]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002060:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <HAL_RCC_OscConfig+0x4cc>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7fe fe27 	bl	8000cb8 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206e:	f7fe fe23 	bl	8000cb8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e03d      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002080:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x46a>
 800208c:	e035      	b.n	80020fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <HAL_RCC_OscConfig+0x4cc>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7fe fe10 	bl	8000cb8 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7fe fe0c 	bl	8000cb8 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e026      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x498>
 80020ba:	e01e      	b.n	80020fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e019      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
 80020d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002104 <HAL_RCC_OscConfig+0x500>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000

08002108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0d0      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b6a      	ldr	r3, [pc, #424]	@ (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b67      	ldr	r3, [pc, #412]	@ (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	4965      	ldr	r1, [pc, #404]	@ (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b63      	ldr	r3, [pc, #396]	@ (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b8      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4b59      	ldr	r3, [pc, #356]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a58      	ldr	r2, [pc, #352]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800216e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4b53      	ldr	r3, [pc, #332]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a52      	ldr	r2, [pc, #328]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002186:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b50      	ldr	r3, [pc, #320]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	494d      	ldr	r1, [pc, #308]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d040      	beq.n	8002228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b47      	ldr	r3, [pc, #284]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d115      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07f      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b41      	ldr	r3, [pc, #260]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e073      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	4b3d      	ldr	r3, [pc, #244]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06b      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b39      	ldr	r3, [pc, #228]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4936      	ldr	r1, [pc, #216]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7fe fd5e 	bl	8000cb8 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7fe fd5a 	bl	8000cb8 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e053      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b2d      	ldr	r3, [pc, #180]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b27      	ldr	r3, [pc, #156]	@ (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d210      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b24      	ldr	r3, [pc, #144]	@ (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0207 	bic.w	r2, r3, #7
 800223e:	4922      	ldr	r1, [pc, #136]	@ (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e032      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b19      	ldr	r3, [pc, #100]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4916      	ldr	r1, [pc, #88]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002282:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	490e      	ldr	r1, [pc, #56]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f821 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800229a:	4602      	mov	r2, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	490a      	ldr	r1, [pc, #40]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	4a09      	ldr	r2, [pc, #36]	@ (80022d4 <HAL_RCC_ClockConfig+0x1cc>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b2:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <HAL_RCC_ClockConfig+0x1d0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fcbc 	bl	8000c34 <HAL_InitTick>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08002f6c 	.word	0x08002f6c
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x94>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b04      	cmp	r3, #4
 8002304:	d002      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x30>
 8002306:	2b08      	cmp	r3, #8
 8002308:	d003      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x36>
 800230a:	e027      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x98>)
 800230e:	613b      	str	r3, [r7, #16]
      break;
 8002310:	e027      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	0c9b      	lsrs	r3, r3, #18
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	4a17      	ldr	r2, [pc, #92]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x9c>)
 800231c:	5cd3      	ldrb	r3, [r2, r3]
 800231e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d010      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800232a:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x94>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	0c5b      	lsrs	r3, r3, #17
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	4a11      	ldr	r2, [pc, #68]	@ (800237c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a0d      	ldr	r2, [pc, #52]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x98>)
 800233e:	fb03 f202 	mul.w	r2, r3, r2
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e004      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a0c      	ldr	r2, [pc, #48]	@ (8002380 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	613b      	str	r3, [r7, #16]
      break;
 800235a:	e002      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800235c:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x98>)
 800235e:	613b      	str	r3, [r7, #16]
      break;
 8002360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002362:	693b      	ldr	r3, [r7, #16]
}
 8002364:	4618      	mov	r0, r3
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	007a1200 	.word	0x007a1200
 8002378:	080036fc 	.word	0x080036fc
 800237c:	0800370c 	.word	0x0800370c
 8002380:	003d0900 	.word	0x003d0900

08002384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002388:	4b02      	ldr	r3, [pc, #8]	@ (8002394 <HAL_RCC_GetHCLKFreq+0x10>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800239c:	f7ff fff2 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4903      	ldr	r1, [pc, #12]	@ (80023bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08002f7c 	.word	0x08002f7c

080023c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c4:	f7ff ffde 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	0adb      	lsrs	r3, r3, #11
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4903      	ldr	r1, [pc, #12]	@ (80023e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08002f7c 	.word	0x08002f7c

080023e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023f0:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <RCC_Delay+0x34>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <RCC_Delay+0x38>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	0a5b      	lsrs	r3, r3, #9
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002404:	bf00      	nop
  }
  while (Delay --);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1e5a      	subs	r2, r3, #1
 800240a:	60fa      	str	r2, [r7, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f9      	bne.n	8002404 <RCC_Delay+0x1c>
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	20000000 	.word	0x20000000
 8002420:	10624dd3 	.word	0x10624dd3

08002424 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e042      	b.n	80024bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe f844 	bl	80004d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2224      	movs	r2, #36	@ 0x24
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002466:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f82b 	bl	80024c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800247c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800248c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800249c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80024fe:	f023 030c 	bic.w	r3, r3, #12
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	430b      	orrs	r3, r1
 800250a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2c      	ldr	r2, [pc, #176]	@ (80025d8 <UART_SetConfig+0x114>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d103      	bne.n	8002534 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800252c:	f7ff ff48 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	e002      	b.n	800253a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002534:	f7ff ff30 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8002538:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	009a      	lsls	r2, r3, #2
 8002544:	441a      	add	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	4a22      	ldr	r2, [pc, #136]	@ (80025dc <UART_SetConfig+0x118>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	0119      	lsls	r1, r3, #4
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	009a      	lsls	r2, r3, #2
 8002564:	441a      	add	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002570:	4b1a      	ldr	r3, [pc, #104]	@ (80025dc <UART_SetConfig+0x118>)
 8002572:	fba3 0302 	umull	r0, r3, r3, r2
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	2064      	movs	r0, #100	@ 0x64
 800257a:	fb00 f303 	mul.w	r3, r0, r3
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	3332      	adds	r3, #50	@ 0x32
 8002584:	4a15      	ldr	r2, [pc, #84]	@ (80025dc <UART_SetConfig+0x118>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002590:	4419      	add	r1, r3
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	009a      	lsls	r2, r3, #2
 800259c:	441a      	add	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a8:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <UART_SetConfig+0x118>)
 80025aa:	fba3 0302 	umull	r0, r3, r3, r2
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	2064      	movs	r0, #100	@ 0x64
 80025b2:	fb00 f303 	mul.w	r3, r0, r3
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	3332      	adds	r3, #50	@ 0x32
 80025bc:	4a07      	ldr	r2, [pc, #28]	@ (80025dc <UART_SetConfig+0x118>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	f003 020f 	and.w	r2, r3, #15
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	440a      	add	r2, r1
 80025ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40013800 	.word	0x40013800
 80025dc:	51eb851f 	.word	0x51eb851f

080025e0 <std>:
 80025e0:	2300      	movs	r3, #0
 80025e2:	b510      	push	{r4, lr}
 80025e4:	4604      	mov	r4, r0
 80025e6:	e9c0 3300 	strd	r3, r3, [r0]
 80025ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025ee:	6083      	str	r3, [r0, #8]
 80025f0:	8181      	strh	r1, [r0, #12]
 80025f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80025f4:	81c2      	strh	r2, [r0, #14]
 80025f6:	6183      	str	r3, [r0, #24]
 80025f8:	4619      	mov	r1, r3
 80025fa:	2208      	movs	r2, #8
 80025fc:	305c      	adds	r0, #92	@ 0x5c
 80025fe:	f000 f9e7 	bl	80029d0 <memset>
 8002602:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <std+0x58>)
 8002604:	6224      	str	r4, [r4, #32]
 8002606:	6263      	str	r3, [r4, #36]	@ 0x24
 8002608:	4b0c      	ldr	r3, [pc, #48]	@ (800263c <std+0x5c>)
 800260a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800260c:	4b0c      	ldr	r3, [pc, #48]	@ (8002640 <std+0x60>)
 800260e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002610:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <std+0x64>)
 8002612:	6323      	str	r3, [r4, #48]	@ 0x30
 8002614:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <std+0x68>)
 8002616:	429c      	cmp	r4, r3
 8002618:	d006      	beq.n	8002628 <std+0x48>
 800261a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800261e:	4294      	cmp	r4, r2
 8002620:	d002      	beq.n	8002628 <std+0x48>
 8002622:	33d0      	adds	r3, #208	@ 0xd0
 8002624:	429c      	cmp	r4, r3
 8002626:	d105      	bne.n	8002634 <std+0x54>
 8002628:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800262c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002630:	f000 ba46 	b.w	8002ac0 <__retarget_lock_init_recursive>
 8002634:	bd10      	pop	{r4, pc}
 8002636:	bf00      	nop
 8002638:	08002821 	.word	0x08002821
 800263c:	08002843 	.word	0x08002843
 8002640:	0800287b 	.word	0x0800287b
 8002644:	0800289f 	.word	0x0800289f
 8002648:	20000530 	.word	0x20000530

0800264c <stdio_exit_handler>:
 800264c:	4a02      	ldr	r2, [pc, #8]	@ (8002658 <stdio_exit_handler+0xc>)
 800264e:	4903      	ldr	r1, [pc, #12]	@ (800265c <stdio_exit_handler+0x10>)
 8002650:	4803      	ldr	r0, [pc, #12]	@ (8002660 <stdio_exit_handler+0x14>)
 8002652:	f000 b869 	b.w	8002728 <_fwalk_sglue>
 8002656:	bf00      	nop
 8002658:	2000000c 	.word	0x2000000c
 800265c:	08002db5 	.word	0x08002db5
 8002660:	2000001c 	.word	0x2000001c

08002664 <cleanup_stdio>:
 8002664:	6841      	ldr	r1, [r0, #4]
 8002666:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <cleanup_stdio+0x34>)
 8002668:	b510      	push	{r4, lr}
 800266a:	4299      	cmp	r1, r3
 800266c:	4604      	mov	r4, r0
 800266e:	d001      	beq.n	8002674 <cleanup_stdio+0x10>
 8002670:	f000 fba0 	bl	8002db4 <_fflush_r>
 8002674:	68a1      	ldr	r1, [r4, #8]
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <cleanup_stdio+0x38>)
 8002678:	4299      	cmp	r1, r3
 800267a:	d002      	beq.n	8002682 <cleanup_stdio+0x1e>
 800267c:	4620      	mov	r0, r4
 800267e:	f000 fb99 	bl	8002db4 <_fflush_r>
 8002682:	68e1      	ldr	r1, [r4, #12]
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <cleanup_stdio+0x3c>)
 8002686:	4299      	cmp	r1, r3
 8002688:	d004      	beq.n	8002694 <cleanup_stdio+0x30>
 800268a:	4620      	mov	r0, r4
 800268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002690:	f000 bb90 	b.w	8002db4 <_fflush_r>
 8002694:	bd10      	pop	{r4, pc}
 8002696:	bf00      	nop
 8002698:	20000530 	.word	0x20000530
 800269c:	20000598 	.word	0x20000598
 80026a0:	20000600 	.word	0x20000600

080026a4 <global_stdio_init.part.0>:
 80026a4:	b510      	push	{r4, lr}
 80026a6:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <global_stdio_init.part.0+0x30>)
 80026a8:	4c0b      	ldr	r4, [pc, #44]	@ (80026d8 <global_stdio_init.part.0+0x34>)
 80026aa:	4a0c      	ldr	r2, [pc, #48]	@ (80026dc <global_stdio_init.part.0+0x38>)
 80026ac:	4620      	mov	r0, r4
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	2104      	movs	r1, #4
 80026b2:	2200      	movs	r2, #0
 80026b4:	f7ff ff94 	bl	80025e0 <std>
 80026b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80026bc:	2201      	movs	r2, #1
 80026be:	2109      	movs	r1, #9
 80026c0:	f7ff ff8e 	bl	80025e0 <std>
 80026c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80026c8:	2202      	movs	r2, #2
 80026ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026ce:	2112      	movs	r1, #18
 80026d0:	f7ff bf86 	b.w	80025e0 <std>
 80026d4:	20000668 	.word	0x20000668
 80026d8:	20000530 	.word	0x20000530
 80026dc:	0800264d 	.word	0x0800264d

080026e0 <__sfp_lock_acquire>:
 80026e0:	4801      	ldr	r0, [pc, #4]	@ (80026e8 <__sfp_lock_acquire+0x8>)
 80026e2:	f000 b9ee 	b.w	8002ac2 <__retarget_lock_acquire_recursive>
 80026e6:	bf00      	nop
 80026e8:	20000671 	.word	0x20000671

080026ec <__sfp_lock_release>:
 80026ec:	4801      	ldr	r0, [pc, #4]	@ (80026f4 <__sfp_lock_release+0x8>)
 80026ee:	f000 b9e9 	b.w	8002ac4 <__retarget_lock_release_recursive>
 80026f2:	bf00      	nop
 80026f4:	20000671 	.word	0x20000671

080026f8 <__sinit>:
 80026f8:	b510      	push	{r4, lr}
 80026fa:	4604      	mov	r4, r0
 80026fc:	f7ff fff0 	bl	80026e0 <__sfp_lock_acquire>
 8002700:	6a23      	ldr	r3, [r4, #32]
 8002702:	b11b      	cbz	r3, 800270c <__sinit+0x14>
 8002704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002708:	f7ff bff0 	b.w	80026ec <__sfp_lock_release>
 800270c:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <__sinit+0x28>)
 800270e:	6223      	str	r3, [r4, #32]
 8002710:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <__sinit+0x2c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f5      	bne.n	8002704 <__sinit+0xc>
 8002718:	f7ff ffc4 	bl	80026a4 <global_stdio_init.part.0>
 800271c:	e7f2      	b.n	8002704 <__sinit+0xc>
 800271e:	bf00      	nop
 8002720:	08002665 	.word	0x08002665
 8002724:	20000668 	.word	0x20000668

08002728 <_fwalk_sglue>:
 8002728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800272c:	4607      	mov	r7, r0
 800272e:	4688      	mov	r8, r1
 8002730:	4614      	mov	r4, r2
 8002732:	2600      	movs	r6, #0
 8002734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002738:	f1b9 0901 	subs.w	r9, r9, #1
 800273c:	d505      	bpl.n	800274a <_fwalk_sglue+0x22>
 800273e:	6824      	ldr	r4, [r4, #0]
 8002740:	2c00      	cmp	r4, #0
 8002742:	d1f7      	bne.n	8002734 <_fwalk_sglue+0xc>
 8002744:	4630      	mov	r0, r6
 8002746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800274a:	89ab      	ldrh	r3, [r5, #12]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d907      	bls.n	8002760 <_fwalk_sglue+0x38>
 8002750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002754:	3301      	adds	r3, #1
 8002756:	d003      	beq.n	8002760 <_fwalk_sglue+0x38>
 8002758:	4629      	mov	r1, r5
 800275a:	4638      	mov	r0, r7
 800275c:	47c0      	blx	r8
 800275e:	4306      	orrs	r6, r0
 8002760:	3568      	adds	r5, #104	@ 0x68
 8002762:	e7e9      	b.n	8002738 <_fwalk_sglue+0x10>

08002764 <_puts_r>:
 8002764:	6a03      	ldr	r3, [r0, #32]
 8002766:	b570      	push	{r4, r5, r6, lr}
 8002768:	4605      	mov	r5, r0
 800276a:	460e      	mov	r6, r1
 800276c:	6884      	ldr	r4, [r0, #8]
 800276e:	b90b      	cbnz	r3, 8002774 <_puts_r+0x10>
 8002770:	f7ff ffc2 	bl	80026f8 <__sinit>
 8002774:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002776:	07db      	lsls	r3, r3, #31
 8002778:	d405      	bmi.n	8002786 <_puts_r+0x22>
 800277a:	89a3      	ldrh	r3, [r4, #12]
 800277c:	0598      	lsls	r0, r3, #22
 800277e:	d402      	bmi.n	8002786 <_puts_r+0x22>
 8002780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002782:	f000 f99e 	bl	8002ac2 <__retarget_lock_acquire_recursive>
 8002786:	89a3      	ldrh	r3, [r4, #12]
 8002788:	0719      	lsls	r1, r3, #28
 800278a:	d502      	bpl.n	8002792 <_puts_r+0x2e>
 800278c:	6923      	ldr	r3, [r4, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d135      	bne.n	80027fe <_puts_r+0x9a>
 8002792:	4621      	mov	r1, r4
 8002794:	4628      	mov	r0, r5
 8002796:	f000 f8c5 	bl	8002924 <__swsetup_r>
 800279a:	b380      	cbz	r0, 80027fe <_puts_r+0x9a>
 800279c:	f04f 35ff 	mov.w	r5, #4294967295
 80027a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80027a2:	07da      	lsls	r2, r3, #31
 80027a4:	d405      	bmi.n	80027b2 <_puts_r+0x4e>
 80027a6:	89a3      	ldrh	r3, [r4, #12]
 80027a8:	059b      	lsls	r3, r3, #22
 80027aa:	d402      	bmi.n	80027b2 <_puts_r+0x4e>
 80027ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027ae:	f000 f989 	bl	8002ac4 <__retarget_lock_release_recursive>
 80027b2:	4628      	mov	r0, r5
 80027b4:	bd70      	pop	{r4, r5, r6, pc}
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	da04      	bge.n	80027c4 <_puts_r+0x60>
 80027ba:	69a2      	ldr	r2, [r4, #24]
 80027bc:	429a      	cmp	r2, r3
 80027be:	dc17      	bgt.n	80027f0 <_puts_r+0x8c>
 80027c0:	290a      	cmp	r1, #10
 80027c2:	d015      	beq.n	80027f0 <_puts_r+0x8c>
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	6022      	str	r2, [r4, #0]
 80027ca:	7019      	strb	r1, [r3, #0]
 80027cc:	68a3      	ldr	r3, [r4, #8]
 80027ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80027d2:	3b01      	subs	r3, #1
 80027d4:	60a3      	str	r3, [r4, #8]
 80027d6:	2900      	cmp	r1, #0
 80027d8:	d1ed      	bne.n	80027b6 <_puts_r+0x52>
 80027da:	2b00      	cmp	r3, #0
 80027dc:	da11      	bge.n	8002802 <_puts_r+0x9e>
 80027de:	4622      	mov	r2, r4
 80027e0:	210a      	movs	r1, #10
 80027e2:	4628      	mov	r0, r5
 80027e4:	f000 f85f 	bl	80028a6 <__swbuf_r>
 80027e8:	3001      	adds	r0, #1
 80027ea:	d0d7      	beq.n	800279c <_puts_r+0x38>
 80027ec:	250a      	movs	r5, #10
 80027ee:	e7d7      	b.n	80027a0 <_puts_r+0x3c>
 80027f0:	4622      	mov	r2, r4
 80027f2:	4628      	mov	r0, r5
 80027f4:	f000 f857 	bl	80028a6 <__swbuf_r>
 80027f8:	3001      	adds	r0, #1
 80027fa:	d1e7      	bne.n	80027cc <_puts_r+0x68>
 80027fc:	e7ce      	b.n	800279c <_puts_r+0x38>
 80027fe:	3e01      	subs	r6, #1
 8002800:	e7e4      	b.n	80027cc <_puts_r+0x68>
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	6022      	str	r2, [r4, #0]
 8002808:	220a      	movs	r2, #10
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e7ee      	b.n	80027ec <_puts_r+0x88>
	...

08002810 <puts>:
 8002810:	4b02      	ldr	r3, [pc, #8]	@ (800281c <puts+0xc>)
 8002812:	4601      	mov	r1, r0
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	f7ff bfa5 	b.w	8002764 <_puts_r>
 800281a:	bf00      	nop
 800281c:	20000018 	.word	0x20000018

08002820 <__sread>:
 8002820:	b510      	push	{r4, lr}
 8002822:	460c      	mov	r4, r1
 8002824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002828:	f000 f8fc 	bl	8002a24 <_read_r>
 800282c:	2800      	cmp	r0, #0
 800282e:	bfab      	itete	ge
 8002830:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002832:	89a3      	ldrhlt	r3, [r4, #12]
 8002834:	181b      	addge	r3, r3, r0
 8002836:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800283a:	bfac      	ite	ge
 800283c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800283e:	81a3      	strhlt	r3, [r4, #12]
 8002840:	bd10      	pop	{r4, pc}

08002842 <__swrite>:
 8002842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002846:	461f      	mov	r7, r3
 8002848:	898b      	ldrh	r3, [r1, #12]
 800284a:	4605      	mov	r5, r0
 800284c:	05db      	lsls	r3, r3, #23
 800284e:	460c      	mov	r4, r1
 8002850:	4616      	mov	r6, r2
 8002852:	d505      	bpl.n	8002860 <__swrite+0x1e>
 8002854:	2302      	movs	r3, #2
 8002856:	2200      	movs	r2, #0
 8002858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800285c:	f000 f8d0 	bl	8002a00 <_lseek_r>
 8002860:	89a3      	ldrh	r3, [r4, #12]
 8002862:	4632      	mov	r2, r6
 8002864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002868:	81a3      	strh	r3, [r4, #12]
 800286a:	4628      	mov	r0, r5
 800286c:	463b      	mov	r3, r7
 800286e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002876:	f000 b8e7 	b.w	8002a48 <_write_r>

0800287a <__sseek>:
 800287a:	b510      	push	{r4, lr}
 800287c:	460c      	mov	r4, r1
 800287e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002882:	f000 f8bd 	bl	8002a00 <_lseek_r>
 8002886:	1c43      	adds	r3, r0, #1
 8002888:	89a3      	ldrh	r3, [r4, #12]
 800288a:	bf15      	itete	ne
 800288c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800288e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002892:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002896:	81a3      	strheq	r3, [r4, #12]
 8002898:	bf18      	it	ne
 800289a:	81a3      	strhne	r3, [r4, #12]
 800289c:	bd10      	pop	{r4, pc}

0800289e <__sclose>:
 800289e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028a2:	f000 b89d 	b.w	80029e0 <_close_r>

080028a6 <__swbuf_r>:
 80028a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a8:	460e      	mov	r6, r1
 80028aa:	4614      	mov	r4, r2
 80028ac:	4605      	mov	r5, r0
 80028ae:	b118      	cbz	r0, 80028b8 <__swbuf_r+0x12>
 80028b0:	6a03      	ldr	r3, [r0, #32]
 80028b2:	b90b      	cbnz	r3, 80028b8 <__swbuf_r+0x12>
 80028b4:	f7ff ff20 	bl	80026f8 <__sinit>
 80028b8:	69a3      	ldr	r3, [r4, #24]
 80028ba:	60a3      	str	r3, [r4, #8]
 80028bc:	89a3      	ldrh	r3, [r4, #12]
 80028be:	071a      	lsls	r2, r3, #28
 80028c0:	d501      	bpl.n	80028c6 <__swbuf_r+0x20>
 80028c2:	6923      	ldr	r3, [r4, #16]
 80028c4:	b943      	cbnz	r3, 80028d8 <__swbuf_r+0x32>
 80028c6:	4621      	mov	r1, r4
 80028c8:	4628      	mov	r0, r5
 80028ca:	f000 f82b 	bl	8002924 <__swsetup_r>
 80028ce:	b118      	cbz	r0, 80028d8 <__swbuf_r+0x32>
 80028d0:	f04f 37ff 	mov.w	r7, #4294967295
 80028d4:	4638      	mov	r0, r7
 80028d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	6922      	ldr	r2, [r4, #16]
 80028dc:	b2f6      	uxtb	r6, r6
 80028de:	1a98      	subs	r0, r3, r2
 80028e0:	6963      	ldr	r3, [r4, #20]
 80028e2:	4637      	mov	r7, r6
 80028e4:	4283      	cmp	r3, r0
 80028e6:	dc05      	bgt.n	80028f4 <__swbuf_r+0x4e>
 80028e8:	4621      	mov	r1, r4
 80028ea:	4628      	mov	r0, r5
 80028ec:	f000 fa62 	bl	8002db4 <_fflush_r>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d1ed      	bne.n	80028d0 <__swbuf_r+0x2a>
 80028f4:	68a3      	ldr	r3, [r4, #8]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	60a3      	str	r3, [r4, #8]
 80028fa:	6823      	ldr	r3, [r4, #0]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	6022      	str	r2, [r4, #0]
 8002900:	701e      	strb	r6, [r3, #0]
 8002902:	6962      	ldr	r2, [r4, #20]
 8002904:	1c43      	adds	r3, r0, #1
 8002906:	429a      	cmp	r2, r3
 8002908:	d004      	beq.n	8002914 <__swbuf_r+0x6e>
 800290a:	89a3      	ldrh	r3, [r4, #12]
 800290c:	07db      	lsls	r3, r3, #31
 800290e:	d5e1      	bpl.n	80028d4 <__swbuf_r+0x2e>
 8002910:	2e0a      	cmp	r6, #10
 8002912:	d1df      	bne.n	80028d4 <__swbuf_r+0x2e>
 8002914:	4621      	mov	r1, r4
 8002916:	4628      	mov	r0, r5
 8002918:	f000 fa4c 	bl	8002db4 <_fflush_r>
 800291c:	2800      	cmp	r0, #0
 800291e:	d0d9      	beq.n	80028d4 <__swbuf_r+0x2e>
 8002920:	e7d6      	b.n	80028d0 <__swbuf_r+0x2a>
	...

08002924 <__swsetup_r>:
 8002924:	b538      	push	{r3, r4, r5, lr}
 8002926:	4b29      	ldr	r3, [pc, #164]	@ (80029cc <__swsetup_r+0xa8>)
 8002928:	4605      	mov	r5, r0
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	460c      	mov	r4, r1
 800292e:	b118      	cbz	r0, 8002938 <__swsetup_r+0x14>
 8002930:	6a03      	ldr	r3, [r0, #32]
 8002932:	b90b      	cbnz	r3, 8002938 <__swsetup_r+0x14>
 8002934:	f7ff fee0 	bl	80026f8 <__sinit>
 8002938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800293c:	0719      	lsls	r1, r3, #28
 800293e:	d422      	bmi.n	8002986 <__swsetup_r+0x62>
 8002940:	06da      	lsls	r2, r3, #27
 8002942:	d407      	bmi.n	8002954 <__swsetup_r+0x30>
 8002944:	2209      	movs	r2, #9
 8002946:	602a      	str	r2, [r5, #0]
 8002948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	81a3      	strh	r3, [r4, #12]
 8002952:	e033      	b.n	80029bc <__swsetup_r+0x98>
 8002954:	0758      	lsls	r0, r3, #29
 8002956:	d512      	bpl.n	800297e <__swsetup_r+0x5a>
 8002958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800295a:	b141      	cbz	r1, 800296e <__swsetup_r+0x4a>
 800295c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002960:	4299      	cmp	r1, r3
 8002962:	d002      	beq.n	800296a <__swsetup_r+0x46>
 8002964:	4628      	mov	r0, r5
 8002966:	f000 f8af 	bl	8002ac8 <_free_r>
 800296a:	2300      	movs	r3, #0
 800296c:	6363      	str	r3, [r4, #52]	@ 0x34
 800296e:	89a3      	ldrh	r3, [r4, #12]
 8002970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002974:	81a3      	strh	r3, [r4, #12]
 8002976:	2300      	movs	r3, #0
 8002978:	6063      	str	r3, [r4, #4]
 800297a:	6923      	ldr	r3, [r4, #16]
 800297c:	6023      	str	r3, [r4, #0]
 800297e:	89a3      	ldrh	r3, [r4, #12]
 8002980:	f043 0308 	orr.w	r3, r3, #8
 8002984:	81a3      	strh	r3, [r4, #12]
 8002986:	6923      	ldr	r3, [r4, #16]
 8002988:	b94b      	cbnz	r3, 800299e <__swsetup_r+0x7a>
 800298a:	89a3      	ldrh	r3, [r4, #12]
 800298c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002994:	d003      	beq.n	800299e <__swsetup_r+0x7a>
 8002996:	4621      	mov	r1, r4
 8002998:	4628      	mov	r0, r5
 800299a:	f000 fa58 	bl	8002e4e <__smakebuf_r>
 800299e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029a2:	f013 0201 	ands.w	r2, r3, #1
 80029a6:	d00a      	beq.n	80029be <__swsetup_r+0x9a>
 80029a8:	2200      	movs	r2, #0
 80029aa:	60a2      	str	r2, [r4, #8]
 80029ac:	6962      	ldr	r2, [r4, #20]
 80029ae:	4252      	negs	r2, r2
 80029b0:	61a2      	str	r2, [r4, #24]
 80029b2:	6922      	ldr	r2, [r4, #16]
 80029b4:	b942      	cbnz	r2, 80029c8 <__swsetup_r+0xa4>
 80029b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80029ba:	d1c5      	bne.n	8002948 <__swsetup_r+0x24>
 80029bc:	bd38      	pop	{r3, r4, r5, pc}
 80029be:	0799      	lsls	r1, r3, #30
 80029c0:	bf58      	it	pl
 80029c2:	6962      	ldrpl	r2, [r4, #20]
 80029c4:	60a2      	str	r2, [r4, #8]
 80029c6:	e7f4      	b.n	80029b2 <__swsetup_r+0x8e>
 80029c8:	2000      	movs	r0, #0
 80029ca:	e7f7      	b.n	80029bc <__swsetup_r+0x98>
 80029cc:	20000018 	.word	0x20000018

080029d0 <memset>:
 80029d0:	4603      	mov	r3, r0
 80029d2:	4402      	add	r2, r0
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d100      	bne.n	80029da <memset+0xa>
 80029d8:	4770      	bx	lr
 80029da:	f803 1b01 	strb.w	r1, [r3], #1
 80029de:	e7f9      	b.n	80029d4 <memset+0x4>

080029e0 <_close_r>:
 80029e0:	b538      	push	{r3, r4, r5, lr}
 80029e2:	2300      	movs	r3, #0
 80029e4:	4d05      	ldr	r5, [pc, #20]	@ (80029fc <_close_r+0x1c>)
 80029e6:	4604      	mov	r4, r0
 80029e8:	4608      	mov	r0, r1
 80029ea:	602b      	str	r3, [r5, #0]
 80029ec:	f7fd fe45 	bl	800067a <_close>
 80029f0:	1c43      	adds	r3, r0, #1
 80029f2:	d102      	bne.n	80029fa <_close_r+0x1a>
 80029f4:	682b      	ldr	r3, [r5, #0]
 80029f6:	b103      	cbz	r3, 80029fa <_close_r+0x1a>
 80029f8:	6023      	str	r3, [r4, #0]
 80029fa:	bd38      	pop	{r3, r4, r5, pc}
 80029fc:	2000066c 	.word	0x2000066c

08002a00 <_lseek_r>:
 8002a00:	b538      	push	{r3, r4, r5, lr}
 8002a02:	4604      	mov	r4, r0
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4d05      	ldr	r5, [pc, #20]	@ (8002a20 <_lseek_r+0x20>)
 8002a0c:	602a      	str	r2, [r5, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f7fd fe57 	bl	80006c2 <_lseek>
 8002a14:	1c43      	adds	r3, r0, #1
 8002a16:	d102      	bne.n	8002a1e <_lseek_r+0x1e>
 8002a18:	682b      	ldr	r3, [r5, #0]
 8002a1a:	b103      	cbz	r3, 8002a1e <_lseek_r+0x1e>
 8002a1c:	6023      	str	r3, [r4, #0]
 8002a1e:	bd38      	pop	{r3, r4, r5, pc}
 8002a20:	2000066c 	.word	0x2000066c

08002a24 <_read_r>:
 8002a24:	b538      	push	{r3, r4, r5, lr}
 8002a26:	4604      	mov	r4, r0
 8002a28:	4608      	mov	r0, r1
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	4d05      	ldr	r5, [pc, #20]	@ (8002a44 <_read_r+0x20>)
 8002a30:	602a      	str	r2, [r5, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f7fd fde8 	bl	8000608 <_read>
 8002a38:	1c43      	adds	r3, r0, #1
 8002a3a:	d102      	bne.n	8002a42 <_read_r+0x1e>
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	b103      	cbz	r3, 8002a42 <_read_r+0x1e>
 8002a40:	6023      	str	r3, [r4, #0]
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
 8002a44:	2000066c 	.word	0x2000066c

08002a48 <_write_r>:
 8002a48:	b538      	push	{r3, r4, r5, lr}
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	2200      	movs	r2, #0
 8002a52:	4d05      	ldr	r5, [pc, #20]	@ (8002a68 <_write_r+0x20>)
 8002a54:	602a      	str	r2, [r5, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f7fd fdf3 	bl	8000642 <_write>
 8002a5c:	1c43      	adds	r3, r0, #1
 8002a5e:	d102      	bne.n	8002a66 <_write_r+0x1e>
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	b103      	cbz	r3, 8002a66 <_write_r+0x1e>
 8002a64:	6023      	str	r3, [r4, #0]
 8002a66:	bd38      	pop	{r3, r4, r5, pc}
 8002a68:	2000066c 	.word	0x2000066c

08002a6c <__errno>:
 8002a6c:	4b01      	ldr	r3, [pc, #4]	@ (8002a74 <__errno+0x8>)
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000018 	.word	0x20000018

08002a78 <__libc_init_array>:
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	2600      	movs	r6, #0
 8002a7c:	4d0c      	ldr	r5, [pc, #48]	@ (8002ab0 <__libc_init_array+0x38>)
 8002a7e:	4c0d      	ldr	r4, [pc, #52]	@ (8002ab4 <__libc_init_array+0x3c>)
 8002a80:	1b64      	subs	r4, r4, r5
 8002a82:	10a4      	asrs	r4, r4, #2
 8002a84:	42a6      	cmp	r6, r4
 8002a86:	d109      	bne.n	8002a9c <__libc_init_array+0x24>
 8002a88:	f000 fa50 	bl	8002f2c <_init>
 8002a8c:	2600      	movs	r6, #0
 8002a8e:	4d0a      	ldr	r5, [pc, #40]	@ (8002ab8 <__libc_init_array+0x40>)
 8002a90:	4c0a      	ldr	r4, [pc, #40]	@ (8002abc <__libc_init_array+0x44>)
 8002a92:	1b64      	subs	r4, r4, r5
 8002a94:	10a4      	asrs	r4, r4, #2
 8002a96:	42a6      	cmp	r6, r4
 8002a98:	d105      	bne.n	8002aa6 <__libc_init_array+0x2e>
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa0:	4798      	blx	r3
 8002aa2:	3601      	adds	r6, #1
 8002aa4:	e7ee      	b.n	8002a84 <__libc_init_array+0xc>
 8002aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aaa:	4798      	blx	r3
 8002aac:	3601      	adds	r6, #1
 8002aae:	e7f2      	b.n	8002a96 <__libc_init_array+0x1e>
 8002ab0:	08003710 	.word	0x08003710
 8002ab4:	08003710 	.word	0x08003710
 8002ab8:	08003710 	.word	0x08003710
 8002abc:	08003714 	.word	0x08003714

08002ac0 <__retarget_lock_init_recursive>:
 8002ac0:	4770      	bx	lr

08002ac2 <__retarget_lock_acquire_recursive>:
 8002ac2:	4770      	bx	lr

08002ac4 <__retarget_lock_release_recursive>:
 8002ac4:	4770      	bx	lr
	...

08002ac8 <_free_r>:
 8002ac8:	b538      	push	{r3, r4, r5, lr}
 8002aca:	4605      	mov	r5, r0
 8002acc:	2900      	cmp	r1, #0
 8002ace:	d040      	beq.n	8002b52 <_free_r+0x8a>
 8002ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ad4:	1f0c      	subs	r4, r1, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bfb8      	it	lt
 8002ada:	18e4      	addlt	r4, r4, r3
 8002adc:	f000 f8de 	bl	8002c9c <__malloc_lock>
 8002ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b54 <_free_r+0x8c>)
 8002ae2:	6813      	ldr	r3, [r2, #0]
 8002ae4:	b933      	cbnz	r3, 8002af4 <_free_r+0x2c>
 8002ae6:	6063      	str	r3, [r4, #4]
 8002ae8:	6014      	str	r4, [r2, #0]
 8002aea:	4628      	mov	r0, r5
 8002aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002af0:	f000 b8da 	b.w	8002ca8 <__malloc_unlock>
 8002af4:	42a3      	cmp	r3, r4
 8002af6:	d908      	bls.n	8002b0a <_free_r+0x42>
 8002af8:	6820      	ldr	r0, [r4, #0]
 8002afa:	1821      	adds	r1, r4, r0
 8002afc:	428b      	cmp	r3, r1
 8002afe:	bf01      	itttt	eq
 8002b00:	6819      	ldreq	r1, [r3, #0]
 8002b02:	685b      	ldreq	r3, [r3, #4]
 8002b04:	1809      	addeq	r1, r1, r0
 8002b06:	6021      	streq	r1, [r4, #0]
 8002b08:	e7ed      	b.n	8002ae6 <_free_r+0x1e>
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	b10b      	cbz	r3, 8002b14 <_free_r+0x4c>
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	d9fa      	bls.n	8002b0a <_free_r+0x42>
 8002b14:	6811      	ldr	r1, [r2, #0]
 8002b16:	1850      	adds	r0, r2, r1
 8002b18:	42a0      	cmp	r0, r4
 8002b1a:	d10b      	bne.n	8002b34 <_free_r+0x6c>
 8002b1c:	6820      	ldr	r0, [r4, #0]
 8002b1e:	4401      	add	r1, r0
 8002b20:	1850      	adds	r0, r2, r1
 8002b22:	4283      	cmp	r3, r0
 8002b24:	6011      	str	r1, [r2, #0]
 8002b26:	d1e0      	bne.n	8002aea <_free_r+0x22>
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4408      	add	r0, r1
 8002b2e:	6010      	str	r0, [r2, #0]
 8002b30:	6053      	str	r3, [r2, #4]
 8002b32:	e7da      	b.n	8002aea <_free_r+0x22>
 8002b34:	d902      	bls.n	8002b3c <_free_r+0x74>
 8002b36:	230c      	movs	r3, #12
 8002b38:	602b      	str	r3, [r5, #0]
 8002b3a:	e7d6      	b.n	8002aea <_free_r+0x22>
 8002b3c:	6820      	ldr	r0, [r4, #0]
 8002b3e:	1821      	adds	r1, r4, r0
 8002b40:	428b      	cmp	r3, r1
 8002b42:	bf01      	itttt	eq
 8002b44:	6819      	ldreq	r1, [r3, #0]
 8002b46:	685b      	ldreq	r3, [r3, #4]
 8002b48:	1809      	addeq	r1, r1, r0
 8002b4a:	6021      	streq	r1, [r4, #0]
 8002b4c:	6063      	str	r3, [r4, #4]
 8002b4e:	6054      	str	r4, [r2, #4]
 8002b50:	e7cb      	b.n	8002aea <_free_r+0x22>
 8002b52:	bd38      	pop	{r3, r4, r5, pc}
 8002b54:	20000678 	.word	0x20000678

08002b58 <sbrk_aligned>:
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	4e0f      	ldr	r6, [pc, #60]	@ (8002b98 <sbrk_aligned+0x40>)
 8002b5c:	460c      	mov	r4, r1
 8002b5e:	6831      	ldr	r1, [r6, #0]
 8002b60:	4605      	mov	r5, r0
 8002b62:	b911      	cbnz	r1, 8002b6a <sbrk_aligned+0x12>
 8002b64:	f000 f9d2 	bl	8002f0c <_sbrk_r>
 8002b68:	6030      	str	r0, [r6, #0]
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	f000 f9cd 	bl	8002f0c <_sbrk_r>
 8002b72:	1c43      	adds	r3, r0, #1
 8002b74:	d103      	bne.n	8002b7e <sbrk_aligned+0x26>
 8002b76:	f04f 34ff 	mov.w	r4, #4294967295
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	bd70      	pop	{r4, r5, r6, pc}
 8002b7e:	1cc4      	adds	r4, r0, #3
 8002b80:	f024 0403 	bic.w	r4, r4, #3
 8002b84:	42a0      	cmp	r0, r4
 8002b86:	d0f8      	beq.n	8002b7a <sbrk_aligned+0x22>
 8002b88:	1a21      	subs	r1, r4, r0
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	f000 f9be 	bl	8002f0c <_sbrk_r>
 8002b90:	3001      	adds	r0, #1
 8002b92:	d1f2      	bne.n	8002b7a <sbrk_aligned+0x22>
 8002b94:	e7ef      	b.n	8002b76 <sbrk_aligned+0x1e>
 8002b96:	bf00      	nop
 8002b98:	20000674 	.word	0x20000674

08002b9c <_malloc_r>:
 8002b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ba0:	1ccd      	adds	r5, r1, #3
 8002ba2:	f025 0503 	bic.w	r5, r5, #3
 8002ba6:	3508      	adds	r5, #8
 8002ba8:	2d0c      	cmp	r5, #12
 8002baa:	bf38      	it	cc
 8002bac:	250c      	movcc	r5, #12
 8002bae:	2d00      	cmp	r5, #0
 8002bb0:	4606      	mov	r6, r0
 8002bb2:	db01      	blt.n	8002bb8 <_malloc_r+0x1c>
 8002bb4:	42a9      	cmp	r1, r5
 8002bb6:	d904      	bls.n	8002bc2 <_malloc_r+0x26>
 8002bb8:	230c      	movs	r3, #12
 8002bba:	6033      	str	r3, [r6, #0]
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002c98 <_malloc_r+0xfc>
 8002bc6:	f000 f869 	bl	8002c9c <__malloc_lock>
 8002bca:	f8d8 3000 	ldr.w	r3, [r8]
 8002bce:	461c      	mov	r4, r3
 8002bd0:	bb44      	cbnz	r4, 8002c24 <_malloc_r+0x88>
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	4630      	mov	r0, r6
 8002bd6:	f7ff ffbf 	bl	8002b58 <sbrk_aligned>
 8002bda:	1c43      	adds	r3, r0, #1
 8002bdc:	4604      	mov	r4, r0
 8002bde:	d158      	bne.n	8002c92 <_malloc_r+0xf6>
 8002be0:	f8d8 4000 	ldr.w	r4, [r8]
 8002be4:	4627      	mov	r7, r4
 8002be6:	2f00      	cmp	r7, #0
 8002be8:	d143      	bne.n	8002c72 <_malloc_r+0xd6>
 8002bea:	2c00      	cmp	r4, #0
 8002bec:	d04b      	beq.n	8002c86 <_malloc_r+0xea>
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	4639      	mov	r1, r7
 8002bf2:	4630      	mov	r0, r6
 8002bf4:	eb04 0903 	add.w	r9, r4, r3
 8002bf8:	f000 f988 	bl	8002f0c <_sbrk_r>
 8002bfc:	4581      	cmp	r9, r0
 8002bfe:	d142      	bne.n	8002c86 <_malloc_r+0xea>
 8002c00:	6821      	ldr	r1, [r4, #0]
 8002c02:	4630      	mov	r0, r6
 8002c04:	1a6d      	subs	r5, r5, r1
 8002c06:	4629      	mov	r1, r5
 8002c08:	f7ff ffa6 	bl	8002b58 <sbrk_aligned>
 8002c0c:	3001      	adds	r0, #1
 8002c0e:	d03a      	beq.n	8002c86 <_malloc_r+0xea>
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	442b      	add	r3, r5
 8002c14:	6023      	str	r3, [r4, #0]
 8002c16:	f8d8 3000 	ldr.w	r3, [r8]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	bb62      	cbnz	r2, 8002c78 <_malloc_r+0xdc>
 8002c1e:	f8c8 7000 	str.w	r7, [r8]
 8002c22:	e00f      	b.n	8002c44 <_malloc_r+0xa8>
 8002c24:	6822      	ldr	r2, [r4, #0]
 8002c26:	1b52      	subs	r2, r2, r5
 8002c28:	d420      	bmi.n	8002c6c <_malloc_r+0xd0>
 8002c2a:	2a0b      	cmp	r2, #11
 8002c2c:	d917      	bls.n	8002c5e <_malloc_r+0xc2>
 8002c2e:	1961      	adds	r1, r4, r5
 8002c30:	42a3      	cmp	r3, r4
 8002c32:	6025      	str	r5, [r4, #0]
 8002c34:	bf18      	it	ne
 8002c36:	6059      	strne	r1, [r3, #4]
 8002c38:	6863      	ldr	r3, [r4, #4]
 8002c3a:	bf08      	it	eq
 8002c3c:	f8c8 1000 	streq.w	r1, [r8]
 8002c40:	5162      	str	r2, [r4, r5]
 8002c42:	604b      	str	r3, [r1, #4]
 8002c44:	4630      	mov	r0, r6
 8002c46:	f000 f82f 	bl	8002ca8 <__malloc_unlock>
 8002c4a:	f104 000b 	add.w	r0, r4, #11
 8002c4e:	1d23      	adds	r3, r4, #4
 8002c50:	f020 0007 	bic.w	r0, r0, #7
 8002c54:	1ac2      	subs	r2, r0, r3
 8002c56:	bf1c      	itt	ne
 8002c58:	1a1b      	subne	r3, r3, r0
 8002c5a:	50a3      	strne	r3, [r4, r2]
 8002c5c:	e7af      	b.n	8002bbe <_malloc_r+0x22>
 8002c5e:	6862      	ldr	r2, [r4, #4]
 8002c60:	42a3      	cmp	r3, r4
 8002c62:	bf0c      	ite	eq
 8002c64:	f8c8 2000 	streq.w	r2, [r8]
 8002c68:	605a      	strne	r2, [r3, #4]
 8002c6a:	e7eb      	b.n	8002c44 <_malloc_r+0xa8>
 8002c6c:	4623      	mov	r3, r4
 8002c6e:	6864      	ldr	r4, [r4, #4]
 8002c70:	e7ae      	b.n	8002bd0 <_malloc_r+0x34>
 8002c72:	463c      	mov	r4, r7
 8002c74:	687f      	ldr	r7, [r7, #4]
 8002c76:	e7b6      	b.n	8002be6 <_malloc_r+0x4a>
 8002c78:	461a      	mov	r2, r3
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	42a3      	cmp	r3, r4
 8002c7e:	d1fb      	bne.n	8002c78 <_malloc_r+0xdc>
 8002c80:	2300      	movs	r3, #0
 8002c82:	6053      	str	r3, [r2, #4]
 8002c84:	e7de      	b.n	8002c44 <_malloc_r+0xa8>
 8002c86:	230c      	movs	r3, #12
 8002c88:	4630      	mov	r0, r6
 8002c8a:	6033      	str	r3, [r6, #0]
 8002c8c:	f000 f80c 	bl	8002ca8 <__malloc_unlock>
 8002c90:	e794      	b.n	8002bbc <_malloc_r+0x20>
 8002c92:	6005      	str	r5, [r0, #0]
 8002c94:	e7d6      	b.n	8002c44 <_malloc_r+0xa8>
 8002c96:	bf00      	nop
 8002c98:	20000678 	.word	0x20000678

08002c9c <__malloc_lock>:
 8002c9c:	4801      	ldr	r0, [pc, #4]	@ (8002ca4 <__malloc_lock+0x8>)
 8002c9e:	f7ff bf10 	b.w	8002ac2 <__retarget_lock_acquire_recursive>
 8002ca2:	bf00      	nop
 8002ca4:	20000670 	.word	0x20000670

08002ca8 <__malloc_unlock>:
 8002ca8:	4801      	ldr	r0, [pc, #4]	@ (8002cb0 <__malloc_unlock+0x8>)
 8002caa:	f7ff bf0b 	b.w	8002ac4 <__retarget_lock_release_recursive>
 8002cae:	bf00      	nop
 8002cb0:	20000670 	.word	0x20000670

08002cb4 <__sflush_r>:
 8002cb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	0716      	lsls	r6, r2, #28
 8002cbc:	4605      	mov	r5, r0
 8002cbe:	460c      	mov	r4, r1
 8002cc0:	d454      	bmi.n	8002d6c <__sflush_r+0xb8>
 8002cc2:	684b      	ldr	r3, [r1, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	dc02      	bgt.n	8002cce <__sflush_r+0x1a>
 8002cc8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	dd48      	ble.n	8002d60 <__sflush_r+0xac>
 8002cce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002cd0:	2e00      	cmp	r6, #0
 8002cd2:	d045      	beq.n	8002d60 <__sflush_r+0xac>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002cda:	682f      	ldr	r7, [r5, #0]
 8002cdc:	6a21      	ldr	r1, [r4, #32]
 8002cde:	602b      	str	r3, [r5, #0]
 8002ce0:	d030      	beq.n	8002d44 <__sflush_r+0x90>
 8002ce2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002ce4:	89a3      	ldrh	r3, [r4, #12]
 8002ce6:	0759      	lsls	r1, r3, #29
 8002ce8:	d505      	bpl.n	8002cf6 <__sflush_r+0x42>
 8002cea:	6863      	ldr	r3, [r4, #4]
 8002cec:	1ad2      	subs	r2, r2, r3
 8002cee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002cf0:	b10b      	cbz	r3, 8002cf6 <__sflush_r+0x42>
 8002cf2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002cf4:	1ad2      	subs	r2, r2, r3
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002cfc:	6a21      	ldr	r1, [r4, #32]
 8002cfe:	47b0      	blx	r6
 8002d00:	1c43      	adds	r3, r0, #1
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	d106      	bne.n	8002d14 <__sflush_r+0x60>
 8002d06:	6829      	ldr	r1, [r5, #0]
 8002d08:	291d      	cmp	r1, #29
 8002d0a:	d82b      	bhi.n	8002d64 <__sflush_r+0xb0>
 8002d0c:	4a28      	ldr	r2, [pc, #160]	@ (8002db0 <__sflush_r+0xfc>)
 8002d0e:	410a      	asrs	r2, r1
 8002d10:	07d6      	lsls	r6, r2, #31
 8002d12:	d427      	bmi.n	8002d64 <__sflush_r+0xb0>
 8002d14:	2200      	movs	r2, #0
 8002d16:	6062      	str	r2, [r4, #4]
 8002d18:	6922      	ldr	r2, [r4, #16]
 8002d1a:	04d9      	lsls	r1, r3, #19
 8002d1c:	6022      	str	r2, [r4, #0]
 8002d1e:	d504      	bpl.n	8002d2a <__sflush_r+0x76>
 8002d20:	1c42      	adds	r2, r0, #1
 8002d22:	d101      	bne.n	8002d28 <__sflush_r+0x74>
 8002d24:	682b      	ldr	r3, [r5, #0]
 8002d26:	b903      	cbnz	r3, 8002d2a <__sflush_r+0x76>
 8002d28:	6560      	str	r0, [r4, #84]	@ 0x54
 8002d2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d2c:	602f      	str	r7, [r5, #0]
 8002d2e:	b1b9      	cbz	r1, 8002d60 <__sflush_r+0xac>
 8002d30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d34:	4299      	cmp	r1, r3
 8002d36:	d002      	beq.n	8002d3e <__sflush_r+0x8a>
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f7ff fec5 	bl	8002ac8 <_free_r>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d42:	e00d      	b.n	8002d60 <__sflush_r+0xac>
 8002d44:	2301      	movs	r3, #1
 8002d46:	4628      	mov	r0, r5
 8002d48:	47b0      	blx	r6
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	1c50      	adds	r0, r2, #1
 8002d4e:	d1c9      	bne.n	8002ce4 <__sflush_r+0x30>
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0c6      	beq.n	8002ce4 <__sflush_r+0x30>
 8002d56:	2b1d      	cmp	r3, #29
 8002d58:	d001      	beq.n	8002d5e <__sflush_r+0xaa>
 8002d5a:	2b16      	cmp	r3, #22
 8002d5c:	d11d      	bne.n	8002d9a <__sflush_r+0xe6>
 8002d5e:	602f      	str	r7, [r5, #0]
 8002d60:	2000      	movs	r0, #0
 8002d62:	e021      	b.n	8002da8 <__sflush_r+0xf4>
 8002d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	e01a      	b.n	8002da2 <__sflush_r+0xee>
 8002d6c:	690f      	ldr	r7, [r1, #16]
 8002d6e:	2f00      	cmp	r7, #0
 8002d70:	d0f6      	beq.n	8002d60 <__sflush_r+0xac>
 8002d72:	0793      	lsls	r3, r2, #30
 8002d74:	bf18      	it	ne
 8002d76:	2300      	movne	r3, #0
 8002d78:	680e      	ldr	r6, [r1, #0]
 8002d7a:	bf08      	it	eq
 8002d7c:	694b      	ldreq	r3, [r1, #20]
 8002d7e:	1bf6      	subs	r6, r6, r7
 8002d80:	600f      	str	r7, [r1, #0]
 8002d82:	608b      	str	r3, [r1, #8]
 8002d84:	2e00      	cmp	r6, #0
 8002d86:	ddeb      	ble.n	8002d60 <__sflush_r+0xac>
 8002d88:	4633      	mov	r3, r6
 8002d8a:	463a      	mov	r2, r7
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	6a21      	ldr	r1, [r4, #32]
 8002d90:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002d94:	47e0      	blx	ip
 8002d96:	2800      	cmp	r0, #0
 8002d98:	dc07      	bgt.n	8002daa <__sflush_r+0xf6>
 8002d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002da2:	f04f 30ff 	mov.w	r0, #4294967295
 8002da6:	81a3      	strh	r3, [r4, #12]
 8002da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002daa:	4407      	add	r7, r0
 8002dac:	1a36      	subs	r6, r6, r0
 8002dae:	e7e9      	b.n	8002d84 <__sflush_r+0xd0>
 8002db0:	dfbffffe 	.word	0xdfbffffe

08002db4 <_fflush_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	690b      	ldr	r3, [r1, #16]
 8002db8:	4605      	mov	r5, r0
 8002dba:	460c      	mov	r4, r1
 8002dbc:	b913      	cbnz	r3, 8002dc4 <_fflush_r+0x10>
 8002dbe:	2500      	movs	r5, #0
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	bd38      	pop	{r3, r4, r5, pc}
 8002dc4:	b118      	cbz	r0, 8002dce <_fflush_r+0x1a>
 8002dc6:	6a03      	ldr	r3, [r0, #32]
 8002dc8:	b90b      	cbnz	r3, 8002dce <_fflush_r+0x1a>
 8002dca:	f7ff fc95 	bl	80026f8 <__sinit>
 8002dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f3      	beq.n	8002dbe <_fflush_r+0xa>
 8002dd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002dd8:	07d0      	lsls	r0, r2, #31
 8002dda:	d404      	bmi.n	8002de6 <_fflush_r+0x32>
 8002ddc:	0599      	lsls	r1, r3, #22
 8002dde:	d402      	bmi.n	8002de6 <_fflush_r+0x32>
 8002de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002de2:	f7ff fe6e 	bl	8002ac2 <__retarget_lock_acquire_recursive>
 8002de6:	4628      	mov	r0, r5
 8002de8:	4621      	mov	r1, r4
 8002dea:	f7ff ff63 	bl	8002cb4 <__sflush_r>
 8002dee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002df0:	4605      	mov	r5, r0
 8002df2:	07da      	lsls	r2, r3, #31
 8002df4:	d4e4      	bmi.n	8002dc0 <_fflush_r+0xc>
 8002df6:	89a3      	ldrh	r3, [r4, #12]
 8002df8:	059b      	lsls	r3, r3, #22
 8002dfa:	d4e1      	bmi.n	8002dc0 <_fflush_r+0xc>
 8002dfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dfe:	f7ff fe61 	bl	8002ac4 <__retarget_lock_release_recursive>
 8002e02:	e7dd      	b.n	8002dc0 <_fflush_r+0xc>

08002e04 <__swhatbuf_r>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	460c      	mov	r4, r1
 8002e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e0c:	4615      	mov	r5, r2
 8002e0e:	2900      	cmp	r1, #0
 8002e10:	461e      	mov	r6, r3
 8002e12:	b096      	sub	sp, #88	@ 0x58
 8002e14:	da0c      	bge.n	8002e30 <__swhatbuf_r+0x2c>
 8002e16:	89a3      	ldrh	r3, [r4, #12]
 8002e18:	2100      	movs	r1, #0
 8002e1a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002e1e:	bf14      	ite	ne
 8002e20:	2340      	movne	r3, #64	@ 0x40
 8002e22:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002e26:	2000      	movs	r0, #0
 8002e28:	6031      	str	r1, [r6, #0]
 8002e2a:	602b      	str	r3, [r5, #0]
 8002e2c:	b016      	add	sp, #88	@ 0x58
 8002e2e:	bd70      	pop	{r4, r5, r6, pc}
 8002e30:	466a      	mov	r2, sp
 8002e32:	f000 f849 	bl	8002ec8 <_fstat_r>
 8002e36:	2800      	cmp	r0, #0
 8002e38:	dbed      	blt.n	8002e16 <__swhatbuf_r+0x12>
 8002e3a:	9901      	ldr	r1, [sp, #4]
 8002e3c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002e40:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002e44:	4259      	negs	r1, r3
 8002e46:	4159      	adcs	r1, r3
 8002e48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e4c:	e7eb      	b.n	8002e26 <__swhatbuf_r+0x22>

08002e4e <__smakebuf_r>:
 8002e4e:	898b      	ldrh	r3, [r1, #12]
 8002e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e52:	079d      	lsls	r5, r3, #30
 8002e54:	4606      	mov	r6, r0
 8002e56:	460c      	mov	r4, r1
 8002e58:	d507      	bpl.n	8002e6a <__smakebuf_r+0x1c>
 8002e5a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002e5e:	6023      	str	r3, [r4, #0]
 8002e60:	6123      	str	r3, [r4, #16]
 8002e62:	2301      	movs	r3, #1
 8002e64:	6163      	str	r3, [r4, #20]
 8002e66:	b003      	add	sp, #12
 8002e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e6a:	466a      	mov	r2, sp
 8002e6c:	ab01      	add	r3, sp, #4
 8002e6e:	f7ff ffc9 	bl	8002e04 <__swhatbuf_r>
 8002e72:	9f00      	ldr	r7, [sp, #0]
 8002e74:	4605      	mov	r5, r0
 8002e76:	4639      	mov	r1, r7
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f7ff fe8f 	bl	8002b9c <_malloc_r>
 8002e7e:	b948      	cbnz	r0, 8002e94 <__smakebuf_r+0x46>
 8002e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e84:	059a      	lsls	r2, r3, #22
 8002e86:	d4ee      	bmi.n	8002e66 <__smakebuf_r+0x18>
 8002e88:	f023 0303 	bic.w	r3, r3, #3
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	e7e2      	b.n	8002e5a <__smakebuf_r+0xc>
 8002e94:	89a3      	ldrh	r3, [r4, #12]
 8002e96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e9e:	81a3      	strh	r3, [r4, #12]
 8002ea0:	9b01      	ldr	r3, [sp, #4]
 8002ea2:	6020      	str	r0, [r4, #0]
 8002ea4:	b15b      	cbz	r3, 8002ebe <__smakebuf_r+0x70>
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eac:	f000 f81e 	bl	8002eec <_isatty_r>
 8002eb0:	b128      	cbz	r0, 8002ebe <__smakebuf_r+0x70>
 8002eb2:	89a3      	ldrh	r3, [r4, #12]
 8002eb4:	f023 0303 	bic.w	r3, r3, #3
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	81a3      	strh	r3, [r4, #12]
 8002ebe:	89a3      	ldrh	r3, [r4, #12]
 8002ec0:	431d      	orrs	r5, r3
 8002ec2:	81a5      	strh	r5, [r4, #12]
 8002ec4:	e7cf      	b.n	8002e66 <__smakebuf_r+0x18>
	...

08002ec8 <_fstat_r>:
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	2300      	movs	r3, #0
 8002ecc:	4d06      	ldr	r5, [pc, #24]	@ (8002ee8 <_fstat_r+0x20>)
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	602b      	str	r3, [r5, #0]
 8002ed6:	f7fd fbdb 	bl	8000690 <_fstat>
 8002eda:	1c43      	adds	r3, r0, #1
 8002edc:	d102      	bne.n	8002ee4 <_fstat_r+0x1c>
 8002ede:	682b      	ldr	r3, [r5, #0]
 8002ee0:	b103      	cbz	r3, 8002ee4 <_fstat_r+0x1c>
 8002ee2:	6023      	str	r3, [r4, #0]
 8002ee4:	bd38      	pop	{r3, r4, r5, pc}
 8002ee6:	bf00      	nop
 8002ee8:	2000066c 	.word	0x2000066c

08002eec <_isatty_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	2300      	movs	r3, #0
 8002ef0:	4d05      	ldr	r5, [pc, #20]	@ (8002f08 <_isatty_r+0x1c>)
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	602b      	str	r3, [r5, #0]
 8002ef8:	f7fd fbd9 	bl	80006ae <_isatty>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d102      	bne.n	8002f06 <_isatty_r+0x1a>
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	b103      	cbz	r3, 8002f06 <_isatty_r+0x1a>
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
 8002f08:	2000066c 	.word	0x2000066c

08002f0c <_sbrk_r>:
 8002f0c:	b538      	push	{r3, r4, r5, lr}
 8002f0e:	2300      	movs	r3, #0
 8002f10:	4d05      	ldr	r5, [pc, #20]	@ (8002f28 <_sbrk_r+0x1c>)
 8002f12:	4604      	mov	r4, r0
 8002f14:	4608      	mov	r0, r1
 8002f16:	602b      	str	r3, [r5, #0]
 8002f18:	f7fd fbe0 	bl	80006dc <_sbrk>
 8002f1c:	1c43      	adds	r3, r0, #1
 8002f1e:	d102      	bne.n	8002f26 <_sbrk_r+0x1a>
 8002f20:	682b      	ldr	r3, [r5, #0]
 8002f22:	b103      	cbz	r3, 8002f26 <_sbrk_r+0x1a>
 8002f24:	6023      	str	r3, [r4, #0]
 8002f26:	bd38      	pop	{r3, r4, r5, pc}
 8002f28:	2000066c 	.word	0x2000066c

08002f2c <_init>:
 8002f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2e:	bf00      	nop
 8002f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f32:	bc08      	pop	{r3}
 8002f34:	469e      	mov	lr, r3
 8002f36:	4770      	bx	lr

08002f38 <_fini>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	bf00      	nop
 8002f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f3e:	bc08      	pop	{r3}
 8002f40:	469e      	mov	lr, r3
 8002f42:	4770      	bx	lr
