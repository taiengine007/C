
012_adc_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005730  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08005840  08005840  00006840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c00  08005c00  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005c00  08005c00  00006c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c08  08005c08  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c08  08005c08  00006c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c0c  08005c0c  00006c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005c10  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001d4  08005de4  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08005de4  00007374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055c6  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f5  00000000  00000000  0000c7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e0  00000000  00000000  0000ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000442  00000000  00000000  0000e398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f5b  00000000  00000000  0000e7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000774c  00000000  00000000  00026735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000869fd  00000000  00000000  0002de81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b487e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002640  00000000  00000000  000b48c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000b6f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005828 	.word	0x08005828

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005828 	.word	0x08005828

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 faeb 	bl	8001524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f83d 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f000 f8d1 	bl	80010f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f56:	f000 f88f 	bl	8001078 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start (&hadc1);
 8000f5a:	4818      	ldr	r0, [pc, #96]	@ (8000fbc <main+0x78>)
 8000f5c:	f000 fc40 	bl	80017e0 <HAL_ADC_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_ADC_PollForConversion (&hadc1, 100);
 8000f60:	2164      	movs	r1, #100	@ 0x64
 8000f62:	4816      	ldr	r0, [pc, #88]	@ (8000fbc <main+0x78>)
 8000f64:	f000 fcea 	bl	800193c <HAL_ADC_PollForConversion>
	  value = HAL_ADC_GetValue (&hadc1);
 8000f68:	4814      	ldr	r0, [pc, #80]	@ (8000fbc <main+0x78>)
 8000f6a:	f000 fded 	bl	8001b48 <HAL_ADC_GetValue>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	603b      	str	r3, [r7, #0]
	  // printf("value = %ld\n",value);
	  float voltage = (value * 5.0f) / 4096.0f;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fe3d 	bl	8000bf4 <__aeabi_ui2f>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4910      	ldr	r1, [pc, #64]	@ (8000fc0 <main+0x7c>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fe90 	bl	8000ca4 <__aeabi_fmul>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff3e 	bl	8000e0c <__aeabi_fdiv>
 8000f90:	4603      	mov	r3, r0
 8000f92:	607b      	str	r3, [r7, #4]

	  // Print voltage
		         // printf("ADC Value: %lu, Voltage: %.2f V\n", value, voltage);
	  printf(" Voltage: %.2f V\n", voltage);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fa47 	bl	8000428 <__aeabi_f2d>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <main+0x80>)
 8000fa0:	f002 fd68 	bl	8003a74 <iprintf>
	  fflush(stdout);
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <main+0x84>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 fc8c 	bl	80038c8 <fflush>
	  HAL_Delay(4000);
 8000fb0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000fb4:	f000 fb18 	bl	80015e8 <HAL_Delay>
  {
 8000fb8:	bf00      	nop
 8000fba:	e7d1      	b.n	8000f60 <main+0x1c>
 8000fbc:	200001f0 	.word	0x200001f0
 8000fc0:	40a00000 	.word	0x40a00000
 8000fc4:	08005840 	.word	0x08005840
 8000fc8:	20000018 	.word	0x20000018

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b094      	sub	sp, #80	@ 0x50
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fd6:	2228      	movs	r2, #40	@ 0x28
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 fd9f 	bl	8003b1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001000:	2301      	movs	r3, #1
 8001002:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001004:	2310      	movs	r3, #16
 8001006:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001008:	2302      	movs	r3, #2
 800100a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800100c:	2300      	movs	r3, #0
 800100e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001010:	2300      	movs	r3, #0
 8001012:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001018:	4618      	mov	r0, r3
 800101a:	f001 f9e9 	bl	80023f0 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001024:	f000 f8c2 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001034:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001038:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f001 fc55 	bl	80028f4 <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001050:	f000 f8ac 	bl	80011ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001054:	2302      	movs	r3, #2
 8001056:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fdc2 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800106a:	f000 f89f 	bl	80011ac <Error_Handler>
  }
}
 800106e:	bf00      	nop
 8001070:	3750      	adds	r7, #80	@ 0x50
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001088:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <MX_ADC1_Init+0x78>)
 800108a:	4a1a      	ldr	r2, [pc, #104]	@ (80010f4 <MX_ADC1_Init+0x7c>)
 800108c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800108e:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <MX_ADC1_Init+0x78>)
 8001090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001094:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001096:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <MX_ADC1_Init+0x78>)
 8001098:	2201      	movs	r2, #1
 800109a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <MX_ADC1_Init+0x78>)
 800109e:	2200      	movs	r2, #0
 80010a0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <MX_ADC1_Init+0x78>)
 80010a4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80010a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_ADC1_Init+0x78>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <MX_ADC1_Init+0x78>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b6:	480e      	ldr	r0, [pc, #56]	@ (80010f0 <MX_ADC1_Init+0x78>)
 80010b8:	f000 faba 	bl	8001630 <HAL_ADC_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80010c2:	f000 f873 	bl	80011ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <MX_ADC1_Init+0x78>)
 80010d8:	f000 fd42 	bl	8001b60 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010e2:	f000 f863 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200001f0 	.word	0x200001f0
 80010f4:	40012400 	.word	0x40012400

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110c:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <MX_GPIO_Init+0xa8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <MX_GPIO_Init+0xa8>)
 8001112:	f043 0310 	orr.w	r3, r3, #16
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <MX_GPIO_Init+0xa8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0310 	and.w	r3, r3, #16
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001124:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <MX_GPIO_Init+0xa8>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a1d      	ldr	r2, [pc, #116]	@ (80011a0 <MX_GPIO_Init+0xa8>)
 800112a:	f043 0320 	orr.w	r3, r3, #32
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <MX_GPIO_Init+0xa8>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0320 	and.w	r3, r3, #32
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <MX_GPIO_Init+0xa8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <MX_GPIO_Init+0xa8>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <MX_GPIO_Init+0xa8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <MX_GPIO_Init+0xa8>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a11      	ldr	r2, [pc, #68]	@ (80011a0 <MX_GPIO_Init+0xa8>)
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <MX_GPIO_Init+0xa8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800116c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_GPIO_Init+0xac>)
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	4619      	mov	r1, r3
 8001180:	4809      	ldr	r0, [pc, #36]	@ (80011a8 <MX_GPIO_Init+0xb0>)
 8001182:	f000 ff8f 	bl	80020a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	2028      	movs	r0, #40	@ 0x28
 800118c:	f000 ff53 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001190:	2028      	movs	r0, #40	@ 0x28
 8001192:	f000 ff6c 	bl	800206e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001196:	bf00      	nop
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	10110000 	.word	0x10110000
 80011a8:	40011000 	.word	0x40011000

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <Error_Handler+0x8>

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_MspInit+0x5c>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	4a14      	ldr	r2, [pc, #80]	@ (8001214 <HAL_MspInit+0x5c>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6193      	str	r3, [r2, #24]
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_MspInit+0x5c>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <HAL_MspInit+0x5c>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a0e      	ldr	r2, [pc, #56]	@ (8001214 <HAL_MspInit+0x5c>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_MspInit+0x5c>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_MspInit+0x60>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <HAL_MspInit+0x60>)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000

0800121c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <HAL_ADC_MspInit+0x6c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d121      	bne.n	8001280 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <HAL_ADC_MspInit+0x70>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a12      	ldr	r2, [pc, #72]	@ (800128c <HAL_ADC_MspInit+0x70>)
 8001242:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b10      	ldr	r3, [pc, #64]	@ (800128c <HAL_ADC_MspInit+0x70>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <HAL_ADC_MspInit+0x70>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a0c      	ldr	r2, [pc, #48]	@ (800128c <HAL_ADC_MspInit+0x70>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <HAL_ADC_MspInit+0x70>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800126c:	2302      	movs	r3, #2
 800126e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001270:	2303      	movs	r3, #3
 8001272:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <HAL_ADC_MspInit+0x74>)
 800127c:	f000 ff12 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40012400 	.word	0x40012400
 800128c:	40021000 	.word	0x40021000
 8001290:	40010800 	.word	0x40010800

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <NMI_Handler+0x4>

0800129c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <MemManage_Handler+0x4>

080012ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <UsageFault_Handler+0x4>

080012bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e4:	f000 f964 	bl	80015b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012f4:	f001 f85a 	bl	80023ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <ITM_SendChar+0x44>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a0d      	ldr	r2, [pc, #52]	@ (8001340 <ITM_SendChar+0x44>)
 800130c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001310:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <ITM_SendChar+0x48>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a0b      	ldr	r2, [pc, #44]	@ (8001344 <ITM_SendChar+0x48>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800131e:	bf00      	nop
 8001320:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f8      	beq.n	8001320 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800132e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	6013      	str	r3, [r2, #0]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	e000edfc 	.word	0xe000edfc
 8001344:	e0000e00 	.word	0xe0000e00

08001348 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return 1;
 800134c:	2301      	movs	r3, #1
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <_kill>:

int _kill(int pid, int sig)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001360:	f002 fc30 	bl	8003bc4 <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	2216      	movs	r2, #22
 8001368:	601a      	str	r2, [r3, #0]
  return -1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <_exit>:

void _exit (int status)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800137e:	f04f 31ff 	mov.w	r1, #4294967295
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffe7 	bl	8001356 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <_exit+0x12>

0800138c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e00a      	b.n	80013b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800139e:	f3af 8000 	nop.w
 80013a2:	4601      	mov	r1, r0
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60ba      	str	r2, [r7, #8]
 80013aa:	b2ca      	uxtb	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf0      	blt.n	800139e <_read+0x12>
  }

  return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e009      	b.n	80013ec <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff8b 	bl	80012fc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dbf1      	blt.n	80013d8 <_write+0x12>
  }
  return len;
 80013f4:	687b      	ldr	r3, [r7, #4]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_close>:

int _close(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001424:	605a      	str	r2, [r3, #4]
  return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <_isatty>:

int _isatty(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
	...

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	@ (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f002 fb98 	bl	8003bc4 <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	220c      	movs	r2, #12
 8001498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20005000 	.word	0x20005000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	20000220 	.word	0x20000220
 80014c8:	20000378 	.word	0x20000378

080014cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d8:	f7ff fff8 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480b      	ldr	r0, [pc, #44]	@ (800150c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014de:	490c      	ldr	r1, [pc, #48]	@ (8001510 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001514 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a09      	ldr	r2, [pc, #36]	@ (8001518 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014f4:	4c09      	ldr	r4, [pc, #36]	@ (800151c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f002 fb65 	bl	8003bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001506:	f7ff fd1d 	bl	8000f44 <main>
  bx lr
 800150a:	4770      	bx	lr
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001514:	08005c10 	.word	0x08005c10
  ldr r2, =_sbss
 8001518:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800151c:	20000374 	.word	0x20000374

08001520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC1_2_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <HAL_Init+0x28>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a07      	ldr	r2, [pc, #28]	@ (800154c <HAL_Init+0x28>)
 800152e:	f043 0310 	orr.w	r3, r3, #16
 8001532:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001534:	2003      	movs	r0, #3
 8001536:	f000 fd73 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153a:	2000      	movs	r0, #0
 800153c:	f000 f808 	bl	8001550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001540:	f7ff fe3a 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40022000 	.word	0x40022000

08001550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_InitTick+0x54>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <HAL_InitTick+0x58>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001566:	fbb3 f3f1 	udiv	r3, r3, r1
 800156a:	fbb2 f3f3 	udiv	r3, r2, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f000 fd8b 	bl	800208a <HAL_SYSTICK_Config>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e00e      	b.n	800159c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b0f      	cmp	r3, #15
 8001582:	d80a      	bhi.n	800159a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001584:	2200      	movs	r2, #0
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f000 fd53 	bl	8002036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001590:	4a06      	ldr	r2, [pc, #24]	@ (80015ac <HAL_InitTick+0x5c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_IncTick+0x1c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <HAL_IncTick+0x20>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a03      	ldr	r2, [pc, #12]	@ (80015d0 <HAL_IncTick+0x20>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000224 	.word	0x20000224

080015d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b02      	ldr	r3, [pc, #8]	@ (80015e4 <HAL_GetTick+0x10>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	20000224 	.word	0x20000224

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff fff0 	bl	80015d4 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffe0 	bl	80015d4 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008

08001630 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0be      	b.n	80017d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	d109      	bne.n	8001674 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fdd4 	bl	800121c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 fbc5 	bl	8001e04 <ADC_ConversionStop_Disable>
 800167a:	4603      	mov	r3, r0
 800167c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 8099 	bne.w	80017be <HAL_ADC_Init+0x18e>
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 8095 	bne.w	80017be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001698:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800169c:	f023 0302 	bic.w	r3, r3, #2
 80016a0:	f043 0202 	orr.w	r2, r3, #2
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7b1b      	ldrb	r3, [r3, #12]
 80016b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	4313      	orrs	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016c8:	d003      	beq.n	80016d2 <HAL_ADC_Init+0xa2>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d102      	bne.n	80016d8 <HAL_ADC_Init+0xa8>
 80016d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016d6:	e000      	b.n	80016da <HAL_ADC_Init+0xaa>
 80016d8:	2300      	movs	r3, #0
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7d1b      	ldrb	r3, [r3, #20]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d119      	bne.n	800171c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7b1b      	ldrb	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	035a      	lsls	r2, r3, #13
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	e00b      	b.n	800171c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001708:	f043 0220 	orr.w	r2, r3, #32
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	430a      	orrs	r2, r1
 800172e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <HAL_ADC_Init+0x1a8>)
 8001738:	4013      	ands	r3, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	430b      	orrs	r3, r1
 8001742:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800174c:	d003      	beq.n	8001756 <HAL_ADC_Init+0x126>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d104      	bne.n	8001760 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	3b01      	subs	r3, #1
 800175c:	051b      	lsls	r3, r3, #20
 800175e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001766:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	430a      	orrs	r2, r1
 8001772:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	4b18      	ldr	r3, [pc, #96]	@ (80017dc <HAL_ADC_Init+0x1ac>)
 800177c:	4013      	ands	r3, r2
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	429a      	cmp	r2, r3
 8001782:	d10b      	bne.n	800179c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178e:	f023 0303 	bic.w	r3, r3, #3
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800179a:	e018      	b.n	80017ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a0:	f023 0312 	bic.w	r3, r3, #18
 80017a4:	f043 0210 	orr.w	r2, r3, #16
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017bc:	e007      	b.n	80017ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c2:	f043 0210 	orr.w	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	ffe1f7fd 	.word	0xffe1f7fd
 80017dc:	ff1f0efe 	.word	0xff1f0efe

080017e0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_Start+0x1a>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e098      	b.n	800192c <HAL_ADC_Start+0x14c>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 faa4 	bl	8001d50 <ADC_Enable>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 8087 	bne.w	8001922 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001818:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a41      	ldr	r2, [pc, #260]	@ (8001934 <HAL_ADC_Start+0x154>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d105      	bne.n	800183e <HAL_ADC_Start+0x5e>
 8001832:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <HAL_ADC_Start+0x158>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d115      	bne.n	800186a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001842:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001854:	2b00      	cmp	r3, #0
 8001856:	d026      	beq.n	80018a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001860:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001868:	e01d      	b.n	80018a6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a2f      	ldr	r2, [pc, #188]	@ (8001938 <HAL_ADC_Start+0x158>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d004      	beq.n	800188a <HAL_ADC_Start+0xaa>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a2b      	ldr	r2, [pc, #172]	@ (8001934 <HAL_ADC_Start+0x154>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10d      	bne.n	80018a6 <HAL_ADC_Start+0xc6>
 800188a:	4b2b      	ldr	r3, [pc, #172]	@ (8001938 <HAL_ADC_Start+0x158>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001892:	2b00      	cmp	r3, #0
 8001894:	d007      	beq.n	80018a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800189e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b6:	f023 0206 	bic.w	r2, r3, #6
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018be:	e002      	b.n	80018c6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f06f 0202 	mvn.w	r2, #2
 80018d6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80018e2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80018e6:	d113      	bne.n	8001910 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018ec:	4a11      	ldr	r2, [pc, #68]	@ (8001934 <HAL_ADC_Start+0x154>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d105      	bne.n	80018fe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <HAL_ADC_Start+0x158>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d108      	bne.n	8001910 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	e00c      	b.n	800192a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	e003      	b.n	800192a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40012800 	.word	0x40012800
 8001938:	40012400 	.word	0x40012400

0800193c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001952:	f7ff fe3f 	bl	80015d4 <HAL_GetTick>
 8001956:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196a:	f043 0220 	orr.w	r2, r3, #32
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e0d3      	b.n	8001b26 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d131      	bne.n	80019f0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001992:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001996:	2b00      	cmp	r3, #0
 8001998:	d12a      	bne.n	80019f0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800199a:	e021      	b.n	80019e0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a2:	d01d      	beq.n	80019e0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <HAL_ADC_PollForConversion+0x7e>
 80019aa:	f7ff fe13 	bl	80015d4 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d212      	bcs.n	80019e0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10b      	bne.n	80019e0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	f043 0204 	orr.w	r2, r3, #4
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e0a2      	b.n	8001b26 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0d6      	beq.n	800199c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019ee:	e070      	b.n	8001ad2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80019f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001b30 <HAL_ADC_PollForConversion+0x1f4>)
 80019f2:	681c      	ldr	r4, [r3, #0]
 80019f4:	2002      	movs	r0, #2
 80019f6:	f001 f9ad 	bl	8002d54 <HAL_RCCEx_GetPeriphCLKFreq>
 80019fa:	4603      	mov	r3, r0
 80019fc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6919      	ldr	r1, [r3, #16]
 8001a06:	4b4b      	ldr	r3, [pc, #300]	@ (8001b34 <HAL_ADC_PollForConversion+0x1f8>)
 8001a08:	400b      	ands	r3, r1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d118      	bne.n	8001a40 <HAL_ADC_PollForConversion+0x104>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68d9      	ldr	r1, [r3, #12]
 8001a14:	4b48      	ldr	r3, [pc, #288]	@ (8001b38 <HAL_ADC_PollForConversion+0x1fc>)
 8001a16:	400b      	ands	r3, r1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d111      	bne.n	8001a40 <HAL_ADC_PollForConversion+0x104>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6919      	ldr	r1, [r3, #16]
 8001a22:	4b46      	ldr	r3, [pc, #280]	@ (8001b3c <HAL_ADC_PollForConversion+0x200>)
 8001a24:	400b      	ands	r3, r1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d108      	bne.n	8001a3c <HAL_ADC_PollForConversion+0x100>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68d9      	ldr	r1, [r3, #12]
 8001a30:	4b43      	ldr	r3, [pc, #268]	@ (8001b40 <HAL_ADC_PollForConversion+0x204>)
 8001a32:	400b      	ands	r3, r1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_ADC_PollForConversion+0x100>
 8001a38:	2314      	movs	r3, #20
 8001a3a:	e020      	b.n	8001a7e <HAL_ADC_PollForConversion+0x142>
 8001a3c:	2329      	movs	r3, #41	@ 0x29
 8001a3e:	e01e      	b.n	8001a7e <HAL_ADC_PollForConversion+0x142>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6919      	ldr	r1, [r3, #16]
 8001a46:	4b3d      	ldr	r3, [pc, #244]	@ (8001b3c <HAL_ADC_PollForConversion+0x200>)
 8001a48:	400b      	ands	r3, r1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <HAL_ADC_PollForConversion+0x120>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68d9      	ldr	r1, [r3, #12]
 8001a54:	4b3a      	ldr	r3, [pc, #232]	@ (8001b40 <HAL_ADC_PollForConversion+0x204>)
 8001a56:	400b      	ands	r3, r1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00d      	beq.n	8001a78 <HAL_ADC_PollForConversion+0x13c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6919      	ldr	r1, [r3, #16]
 8001a62:	4b38      	ldr	r3, [pc, #224]	@ (8001b44 <HAL_ADC_PollForConversion+0x208>)
 8001a64:	400b      	ands	r3, r1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d108      	bne.n	8001a7c <HAL_ADC_PollForConversion+0x140>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68d9      	ldr	r1, [r3, #12]
 8001a70:	4b34      	ldr	r3, [pc, #208]	@ (8001b44 <HAL_ADC_PollForConversion+0x208>)
 8001a72:	400b      	ands	r3, r1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_PollForConversion+0x140>
 8001a78:	2354      	movs	r3, #84	@ 0x54
 8001a7a:	e000      	b.n	8001a7e <HAL_ADC_PollForConversion+0x142>
 8001a7c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a84:	e021      	b.n	8001aca <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d01a      	beq.n	8001ac4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d007      	beq.n	8001aa4 <HAL_ADC_PollForConversion+0x168>
 8001a94:	f7ff fd9e 	bl	80015d4 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d20f      	bcs.n	8001ac4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d90b      	bls.n	8001ac4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab0:	f043 0204 	orr.w	r2, r3, #4
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e030      	b.n	8001b26 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d8d9      	bhi.n	8001a86 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f06f 0212 	mvn.w	r2, #18
 8001ada:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001af2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001af6:	d115      	bne.n	8001b24 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d111      	bne.n	8001b24 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000
 8001b34:	24924924 	.word	0x24924924
 8001b38:	00924924 	.word	0x00924924
 8001b3c:	12492492 	.word	0x12492492
 8001b40:	00492492 	.word	0x00492492
 8001b44:	00249249 	.word	0x00249249

08001b48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x20>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e0dc      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1da>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b06      	cmp	r3, #6
 8001b8e:	d81c      	bhi.n	8001bca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3b05      	subs	r3, #5
 8001ba2:	221f      	movs	r2, #31
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4019      	ands	r1, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	3b05      	subs	r3, #5
 8001bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bc8:	e03c      	b.n	8001c44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d81c      	bhi.n	8001c0c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	3b23      	subs	r3, #35	@ 0x23
 8001be4:	221f      	movs	r2, #31
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	4019      	ands	r1, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3b23      	subs	r3, #35	@ 0x23
 8001bfe:	fa00 f203 	lsl.w	r2, r0, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c0a:	e01b      	b.n	8001c44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b41      	subs	r3, #65	@ 0x41
 8001c1e:	221f      	movs	r2, #31
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4019      	ands	r1, r3
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3b41      	subs	r3, #65	@ 0x41
 8001c38:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d91c      	bls.n	8001c86 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68d9      	ldr	r1, [r3, #12]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b1e      	subs	r3, #30
 8001c5e:	2207      	movs	r2, #7
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4019      	ands	r1, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6898      	ldr	r0, [r3, #8]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4613      	mov	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	3b1e      	subs	r3, #30
 8001c78:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	e019      	b.n	8001cba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6919      	ldr	r1, [r3, #16]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	2207      	movs	r2, #7
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	4019      	ands	r1, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6898      	ldr	r0, [r3, #8]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b10      	cmp	r3, #16
 8001cc0:	d003      	beq.n	8001cca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cc6:	2b11      	cmp	r3, #17
 8001cc8:	d132      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1d      	ldr	r2, [pc, #116]	@ (8001d44 <HAL_ADC_ConfigChannel+0x1e4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d125      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d126      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001cf0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	d11a      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cfa:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a13      	ldr	r2, [pc, #76]	@ (8001d4c <HAL_ADC_ConfigChannel+0x1ec>)
 8001d00:	fba2 2303 	umull	r2, r3, r2, r3
 8001d04:	0c9a      	lsrs	r2, r3, #18
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d10:	e002      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f9      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x1b2>
 8001d1e:	e007      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d24:	f043 0220 	orr.w	r2, r3, #32
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	40012400 	.word	0x40012400
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	431bde83 	.word	0x431bde83

08001d50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d040      	beq.n	8001df0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <ADC_Enable+0xac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1f      	ldr	r2, [pc, #124]	@ (8001e00 <ADC_Enable+0xb0>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	0c9b      	lsrs	r3, r3, #18
 8001d8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d8c:	e002      	b.n	8001d94 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f9      	bne.n	8001d8e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d9a:	f7ff fc1b 	bl	80015d4 <HAL_GetTick>
 8001d9e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001da0:	e01f      	b.n	8001de2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001da2:	f7ff fc17 	bl	80015d4 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d918      	bls.n	8001de2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d011      	beq.n	8001de2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc2:	f043 0210 	orr.w	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dce:	f043 0201 	orr.w	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e007      	b.n	8001df2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d1d8      	bne.n	8001da2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	431bde83 	.word	0x431bde83

08001e04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d12e      	bne.n	8001e7c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0201 	bic.w	r2, r2, #1
 8001e2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e2e:	f7ff fbd1 	bl	80015d4 <HAL_GetTick>
 8001e32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e34:	e01b      	b.n	8001e6e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e36:	f7ff fbcd 	bl	80015d4 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d914      	bls.n	8001e6e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d10d      	bne.n	8001e6e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e56:	f043 0210 	orr.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e007      	b.n	8001e7e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d0dc      	beq.n	8001e36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eba:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	60d3      	str	r3, [r2, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed4:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0307 	and.w	r3, r3, #7
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db0b      	blt.n	8001f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	f003 021f 	and.w	r2, r3, #31
 8001f04:	4906      	ldr	r1, [pc, #24]	@ (8001f20 <__NVIC_EnableIRQ+0x34>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	@ (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	@ (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	@ 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	@ 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7ff ff90 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	@ (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff2d 	bl	8001e88 <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002048:	f7ff ff42 	bl	8001ed0 <__NVIC_GetPriorityGrouping>
 800204c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f7ff ff90 	bl	8001f78 <NVIC_EncodePriority>
 8002058:	4602      	mov	r2, r0
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff5f 	bl	8001f24 <__NVIC_SetPriority>
}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff35 	bl	8001eec <__NVIC_EnableIRQ>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ffa2 	bl	8001fdc <SysTick_Config>
 8002098:	4603      	mov	r3, r0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b08b      	sub	sp, #44	@ 0x2c
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b6:	e169      	b.n	800238c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020b8:	2201      	movs	r2, #1
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	f040 8158 	bne.w	8002386 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4a9a      	ldr	r2, [pc, #616]	@ (8002344 <HAL_GPIO_Init+0x2a0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d05e      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 80020e0:	4a98      	ldr	r2, [pc, #608]	@ (8002344 <HAL_GPIO_Init+0x2a0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d875      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 80020e6:	4a98      	ldr	r2, [pc, #608]	@ (8002348 <HAL_GPIO_Init+0x2a4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d058      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 80020ec:	4a96      	ldr	r2, [pc, #600]	@ (8002348 <HAL_GPIO_Init+0x2a4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d86f      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 80020f2:	4a96      	ldr	r2, [pc, #600]	@ (800234c <HAL_GPIO_Init+0x2a8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d052      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 80020f8:	4a94      	ldr	r2, [pc, #592]	@ (800234c <HAL_GPIO_Init+0x2a8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d869      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 80020fe:	4a94      	ldr	r2, [pc, #592]	@ (8002350 <HAL_GPIO_Init+0x2ac>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d04c      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 8002104:	4a92      	ldr	r2, [pc, #584]	@ (8002350 <HAL_GPIO_Init+0x2ac>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d863      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 800210a:	4a92      	ldr	r2, [pc, #584]	@ (8002354 <HAL_GPIO_Init+0x2b0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d046      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 8002110:	4a90      	ldr	r2, [pc, #576]	@ (8002354 <HAL_GPIO_Init+0x2b0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d85d      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 8002116:	2b12      	cmp	r3, #18
 8002118:	d82a      	bhi.n	8002170 <HAL_GPIO_Init+0xcc>
 800211a:	2b12      	cmp	r3, #18
 800211c:	d859      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 800211e:	a201      	add	r2, pc, #4	@ (adr r2, 8002124 <HAL_GPIO_Init+0x80>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	0800219f 	.word	0x0800219f
 8002128:	08002179 	.word	0x08002179
 800212c:	0800218b 	.word	0x0800218b
 8002130:	080021cd 	.word	0x080021cd
 8002134:	080021d3 	.word	0x080021d3
 8002138:	080021d3 	.word	0x080021d3
 800213c:	080021d3 	.word	0x080021d3
 8002140:	080021d3 	.word	0x080021d3
 8002144:	080021d3 	.word	0x080021d3
 8002148:	080021d3 	.word	0x080021d3
 800214c:	080021d3 	.word	0x080021d3
 8002150:	080021d3 	.word	0x080021d3
 8002154:	080021d3 	.word	0x080021d3
 8002158:	080021d3 	.word	0x080021d3
 800215c:	080021d3 	.word	0x080021d3
 8002160:	080021d3 	.word	0x080021d3
 8002164:	080021d3 	.word	0x080021d3
 8002168:	08002181 	.word	0x08002181
 800216c:	08002195 	.word	0x08002195
 8002170:	4a79      	ldr	r2, [pc, #484]	@ (8002358 <HAL_GPIO_Init+0x2b4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002176:	e02c      	b.n	80021d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	623b      	str	r3, [r7, #32]
          break;
 800217e:	e029      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	3304      	adds	r3, #4
 8002186:	623b      	str	r3, [r7, #32]
          break;
 8002188:	e024      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	3308      	adds	r3, #8
 8002190:	623b      	str	r3, [r7, #32]
          break;
 8002192:	e01f      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	330c      	adds	r3, #12
 800219a:	623b      	str	r3, [r7, #32]
          break;
 800219c:	e01a      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021a6:	2304      	movs	r3, #4
 80021a8:	623b      	str	r3, [r7, #32]
          break;
 80021aa:	e013      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b4:	2308      	movs	r3, #8
 80021b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	611a      	str	r2, [r3, #16]
          break;
 80021be:	e009      	b.n	80021d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c0:	2308      	movs	r3, #8
 80021c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	615a      	str	r2, [r3, #20]
          break;
 80021ca:	e003      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
          break;
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          break;
 80021d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2bff      	cmp	r3, #255	@ 0xff
 80021d8:	d801      	bhi.n	80021de <HAL_GPIO_Init+0x13a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	e001      	b.n	80021e2 <HAL_GPIO_Init+0x13e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3304      	adds	r3, #4
 80021e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2bff      	cmp	r3, #255	@ 0xff
 80021e8:	d802      	bhi.n	80021f0 <HAL_GPIO_Init+0x14c>
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	e002      	b.n	80021f6 <HAL_GPIO_Init+0x152>
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f2:	3b08      	subs	r3, #8
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	210f      	movs	r1, #15
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	6a39      	ldr	r1, [r7, #32]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	431a      	orrs	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80b1 	beq.w	8002386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002224:	4b4d      	ldr	r3, [pc, #308]	@ (800235c <HAL_GPIO_Init+0x2b8>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a4c      	ldr	r2, [pc, #304]	@ (800235c <HAL_GPIO_Init+0x2b8>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b4a      	ldr	r3, [pc, #296]	@ (800235c <HAL_GPIO_Init+0x2b8>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800223c:	4a48      	ldr	r2, [pc, #288]	@ (8002360 <HAL_GPIO_Init+0x2bc>)
 800223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002248:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	220f      	movs	r2, #15
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a40      	ldr	r2, [pc, #256]	@ (8002364 <HAL_GPIO_Init+0x2c0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d013      	beq.n	8002290 <HAL_GPIO_Init+0x1ec>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3f      	ldr	r2, [pc, #252]	@ (8002368 <HAL_GPIO_Init+0x2c4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00d      	beq.n	800228c <HAL_GPIO_Init+0x1e8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a3e      	ldr	r2, [pc, #248]	@ (800236c <HAL_GPIO_Init+0x2c8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d007      	beq.n	8002288 <HAL_GPIO_Init+0x1e4>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a3d      	ldr	r2, [pc, #244]	@ (8002370 <HAL_GPIO_Init+0x2cc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_GPIO_Init+0x1e0>
 8002280:	2303      	movs	r3, #3
 8002282:	e006      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 8002284:	2304      	movs	r3, #4
 8002286:	e004      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 8002288:	2302      	movs	r3, #2
 800228a:	e002      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 8002290:	2300      	movs	r3, #0
 8002292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002294:	f002 0203 	and.w	r2, r2, #3
 8002298:	0092      	lsls	r2, r2, #2
 800229a:	4093      	lsls	r3, r2
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022a2:	492f      	ldr	r1, [pc, #188]	@ (8002360 <HAL_GPIO_Init+0x2bc>)
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	492c      	ldr	r1, [pc, #176]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4928      	ldr	r1, [pc, #160]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e4:	4b23      	ldr	r3, [pc, #140]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	4922      	ldr	r1, [pc, #136]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60cb      	str	r3, [r1, #12]
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022f2:	4b20      	ldr	r3, [pc, #128]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	491e      	ldr	r1, [pc, #120]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4918      	ldr	r1, [pc, #96]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800231a:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	43db      	mvns	r3, r3
 8002322:	4914      	ldr	r1, [pc, #80]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 8002324:	4013      	ands	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d021      	beq.n	8002378 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002334:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	490e      	ldr	r1, [pc, #56]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]
 8002340:	e021      	b.n	8002386 <HAL_GPIO_Init+0x2e2>
 8002342:	bf00      	nop
 8002344:	10320000 	.word	0x10320000
 8002348:	10310000 	.word	0x10310000
 800234c:	10220000 	.word	0x10220000
 8002350:	10210000 	.word	0x10210000
 8002354:	10120000 	.word	0x10120000
 8002358:	10110000 	.word	0x10110000
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	40010800 	.word	0x40010800
 8002368:	40010c00 	.word	0x40010c00
 800236c:	40011000 	.word	0x40011000
 8002370:	40011400 	.word	0x40011400
 8002374:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_GPIO_Init+0x304>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	43db      	mvns	r3, r3
 8002380:	4909      	ldr	r1, [pc, #36]	@ (80023a8 <HAL_GPIO_Init+0x304>)
 8002382:	4013      	ands	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	3301      	adds	r3, #1
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	f47f ae8e 	bne.w	80020b8 <HAL_GPIO_Init+0x14>
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	372c      	adds	r7, #44	@ 0x2c
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023b6:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d006      	beq.n	80023d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023c2:	4a05      	ldr	r2, [pc, #20]	@ (80023d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f806 	bl	80023dc <HAL_GPIO_EXTI_Callback>
  }
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40010400 	.word	0x40010400

080023dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e272      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8087 	beq.w	800251e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002410:	4b92      	ldr	r3, [pc, #584]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b04      	cmp	r3, #4
 800241a:	d00c      	beq.n	8002436 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800241c:	4b8f      	ldr	r3, [pc, #572]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b08      	cmp	r3, #8
 8002426:	d112      	bne.n	800244e <HAL_RCC_OscConfig+0x5e>
 8002428:	4b8c      	ldr	r3, [pc, #560]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002434:	d10b      	bne.n	800244e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002436:	4b89      	ldr	r3, [pc, #548]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d06c      	beq.n	800251c <HAL_RCC_OscConfig+0x12c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d168      	bne.n	800251c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e24c      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x76>
 8002458:	4b80      	ldr	r3, [pc, #512]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a7f      	ldr	r2, [pc, #508]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e02e      	b.n	80024c4 <HAL_RCC_OscConfig+0xd4>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x98>
 800246e:	4b7b      	ldr	r3, [pc, #492]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7a      	ldr	r2, [pc, #488]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b78      	ldr	r3, [pc, #480]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a77      	ldr	r2, [pc, #476]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002480:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e01d      	b.n	80024c4 <HAL_RCC_OscConfig+0xd4>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0xbc>
 8002492:	4b72      	ldr	r3, [pc, #456]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a71      	ldr	r2, [pc, #452]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b6f      	ldr	r3, [pc, #444]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6e      	ldr	r2, [pc, #440]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0xd4>
 80024ac:	4b6b      	ldr	r3, [pc, #428]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a6a      	ldr	r2, [pc, #424]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b68      	ldr	r3, [pc, #416]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a67      	ldr	r2, [pc, #412]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff f882 	bl	80015d4 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff f87e 	bl	80015d4 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e200      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b5d      	ldr	r3, [pc, #372]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0xe4>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff f86e 	bl	80015d4 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7ff f86a 	bl	80015d4 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	@ 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1ec      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	4b53      	ldr	r3, [pc, #332]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x10c>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d063      	beq.n	80025f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800252a:	4b4c      	ldr	r3, [pc, #304]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002536:	4b49      	ldr	r3, [pc, #292]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b08      	cmp	r3, #8
 8002540:	d11c      	bne.n	800257c <HAL_RCC_OscConfig+0x18c>
 8002542:	4b46      	ldr	r3, [pc, #280]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d116      	bne.n	800257c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	4b43      	ldr	r3, [pc, #268]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x176>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e1c0      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b3d      	ldr	r3, [pc, #244]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4939      	ldr	r1, [pc, #228]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	e03a      	b.n	80025f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002584:	4b36      	ldr	r3, [pc, #216]	@ (8002660 <HAL_RCC_OscConfig+0x270>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7ff f823 	bl	80015d4 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7ff f81f 	bl	80015d4 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1a1      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	4b2d      	ldr	r3, [pc, #180]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	4b2a      	ldr	r3, [pc, #168]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4927      	ldr	r1, [pc, #156]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	4b26      	ldr	r3, [pc, #152]	@ (8002660 <HAL_RCC_OscConfig+0x270>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7ff f802 	bl	80015d4 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d4:	f7fe fffe 	bl	80015d4 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e180      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d03a      	beq.n	8002674 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d019      	beq.n	800263a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <HAL_RCC_OscConfig+0x274>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260c:	f7fe ffe2 	bl	80015d4 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe ffde 	bl	80015d4 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e160      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	4b0d      	ldr	r3, [pc, #52]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f000 faba 	bl	8002bac <RCC_Delay>
 8002638:	e01c      	b.n	8002674 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263a:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <HAL_RCC_OscConfig+0x274>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002640:	f7fe ffc8 	bl	80015d4 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002646:	e00f      	b.n	8002668 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002648:	f7fe ffc4 	bl	80015d4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d908      	bls.n	8002668 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e146      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	42420000 	.word	0x42420000
 8002664:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	4b92      	ldr	r3, [pc, #584]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e9      	bne.n	8002648 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a6 	beq.w	80027ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b8b      	ldr	r3, [pc, #556]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	4b88      	ldr	r3, [pc, #544]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a87      	ldr	r2, [pc, #540]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800269c:	61d3      	str	r3, [r2, #28]
 800269e:	4b85      	ldr	r3, [pc, #532]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026aa:	2301      	movs	r3, #1
 80026ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b82      	ldr	r3, [pc, #520]	@ (80028b8 <HAL_RCC_OscConfig+0x4c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d118      	bne.n	80026ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ba:	4b7f      	ldr	r3, [pc, #508]	@ (80028b8 <HAL_RCC_OscConfig+0x4c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a7e      	ldr	r2, [pc, #504]	@ (80028b8 <HAL_RCC_OscConfig+0x4c8>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c6:	f7fe ff85 	bl	80015d4 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7fe ff81 	bl	80015d4 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b64      	cmp	r3, #100	@ 0x64
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e103      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	4b75      	ldr	r3, [pc, #468]	@ (80028b8 <HAL_RCC_OscConfig+0x4c8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x312>
 80026f4:	4b6f      	ldr	r3, [pc, #444]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a6e      	ldr	r2, [pc, #440]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	e02d      	b.n	800275e <HAL_RCC_OscConfig+0x36e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x334>
 800270a:	4b6a      	ldr	r3, [pc, #424]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a69      	ldr	r2, [pc, #420]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	6213      	str	r3, [r2, #32]
 8002716:	4b67      	ldr	r3, [pc, #412]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4a66      	ldr	r2, [pc, #408]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	6213      	str	r3, [r2, #32]
 8002722:	e01c      	b.n	800275e <HAL_RCC_OscConfig+0x36e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b05      	cmp	r3, #5
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x356>
 800272c:	4b61      	ldr	r3, [pc, #388]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a60      	ldr	r2, [pc, #384]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6213      	str	r3, [r2, #32]
 8002738:	4b5e      	ldr	r3, [pc, #376]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4a5d      	ldr	r2, [pc, #372]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6213      	str	r3, [r2, #32]
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x36e>
 8002746:	4b5b      	ldr	r3, [pc, #364]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a5a      	ldr	r2, [pc, #360]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6213      	str	r3, [r2, #32]
 8002752:	4b58      	ldr	r3, [pc, #352]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	4a57      	ldr	r2, [pc, #348]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7fe ff35 	bl	80015d4 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe ff31 	bl	80015d4 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0b1      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	4b4b      	ldr	r3, [pc, #300]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ee      	beq.n	800276e <HAL_RCC_OscConfig+0x37e>
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002792:	f7fe ff1f 	bl	80015d4 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe ff1b 	bl	80015d4 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e09b      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	4b40      	ldr	r3, [pc, #256]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d105      	bne.n	80027ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c2:	4b3c      	ldr	r3, [pc, #240]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4a3b      	ldr	r2, [pc, #236]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8087 	beq.w	80028e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d8:	4b36      	ldr	r3, [pc, #216]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d061      	beq.n	80028a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d146      	bne.n	800287a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ec:	4b33      	ldr	r3, [pc, #204]	@ (80028bc <HAL_RCC_OscConfig+0x4cc>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe feef 	bl	80015d4 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe feeb 	bl	80015d4 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e06d      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280c:	4b29      	ldr	r3, [pc, #164]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002820:	d108      	bne.n	8002834 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002822:	4b24      	ldr	r3, [pc, #144]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	4921      	ldr	r1, [pc, #132]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002834:	4b1f      	ldr	r3, [pc, #124]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a19      	ldr	r1, [r3, #32]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	430b      	orrs	r3, r1
 8002846:	491b      	ldr	r1, [pc, #108]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284c:	4b1b      	ldr	r3, [pc, #108]	@ (80028bc <HAL_RCC_OscConfig+0x4cc>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7fe febf 	bl	80015d4 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285a:	f7fe febb 	bl	80015d4 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e03d      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800286c:	4b11      	ldr	r3, [pc, #68]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x46a>
 8002878:	e035      	b.n	80028e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <HAL_RCC_OscConfig+0x4cc>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe fea8 	bl	80015d4 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe fea4 	bl	80015d4 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e026      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289a:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x498>
 80028a6:	e01e      	b.n	80028e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e019      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40007000 	.word	0x40007000
 80028bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <HAL_RCC_OscConfig+0x500>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000

080028f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0d0      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002908:	4b6a      	ldr	r3, [pc, #424]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d910      	bls.n	8002938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b67      	ldr	r3, [pc, #412]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0207 	bic.w	r2, r3, #7
 800291e:	4965      	ldr	r1, [pc, #404]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b63      	ldr	r3, [pc, #396]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0b8      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002950:	4b59      	ldr	r3, [pc, #356]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a58      	ldr	r2, [pc, #352]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800295a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002968:	4b53      	ldr	r3, [pc, #332]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a52      	ldr	r2, [pc, #328]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002972:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002974:	4b50      	ldr	r3, [pc, #320]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	494d      	ldr	r1, [pc, #308]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d040      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b47      	ldr	r3, [pc, #284]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d115      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e07f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b2:	4b41      	ldr	r3, [pc, #260]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e073      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06b      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d2:	4b39      	ldr	r3, [pc, #228]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f023 0203 	bic.w	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4936      	ldr	r1, [pc, #216]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e4:	f7fe fdf6 	bl	80015d4 <HAL_GetTick>
 80029e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ec:	f7fe fdf2 	bl	80015d4 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e053      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 020c 	and.w	r2, r3, #12
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d1eb      	bne.n	80029ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a14:	4b27      	ldr	r3, [pc, #156]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d210      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b24      	ldr	r3, [pc, #144]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	4922      	ldr	r1, [pc, #136]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b20      	ldr	r3, [pc, #128]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e032      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a50:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4916      	ldr	r1, [pc, #88]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a6e:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	490e      	ldr	r1, [pc, #56]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a82:	f000 f821 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a86:	4602      	mov	r2, r0
 8002a88:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	490a      	ldr	r1, [pc, #40]	@ (8002abc <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	5ccb      	ldrb	r3, [r1, r3]
 8002a96:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9a:	4a09      	ldr	r2, [pc, #36]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1cc>)
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a9e:	4b09      	ldr	r3, [pc, #36]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1d0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe fd54 	bl	8001550 <HAL_InitTick>

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08005854 	.word	0x08005854
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	20000004 	.word	0x20000004

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d002      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x30>
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x36>
 8002af6:	e027      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af8:	4b19      	ldr	r3, [pc, #100]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002afa:	613b      	str	r3, [r7, #16]
      break;
 8002afc:	e027      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	0c9b      	lsrs	r3, r3, #18
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	4a17      	ldr	r2, [pc, #92]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d010      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b16:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	0c5b      	lsrs	r3, r3, #17
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	4a11      	ldr	r2, [pc, #68]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a0d      	ldr	r2, [pc, #52]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b2a:	fb03 f202 	mul.w	r2, r3, r2
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	e004      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	613b      	str	r3, [r7, #16]
      break;
 8002b46:	e002      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4a:	613b      	str	r3, [r7, #16]
      break;
 8002b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4e:	693b      	ldr	r3, [r7, #16]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	007a1200 	.word	0x007a1200
 8002b64:	0800586c 	.word	0x0800586c
 8002b68:	0800587c 	.word	0x0800587c
 8002b6c:	003d0900 	.word	0x003d0900

08002b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b74:	4b02      	ldr	r3, [pc, #8]	@ (8002b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	20000000 	.word	0x20000000

08002b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b88:	f7ff fff2 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	0adb      	lsrs	r3, r3, #11
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4903      	ldr	r1, [pc, #12]	@ (8002ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	08005864 	.word	0x08005864

08002bac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002be0 <RCC_Delay+0x34>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002be4 <RCC_Delay+0x38>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0a5b      	lsrs	r3, r3, #9
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bc8:	bf00      	nop
  }
  while (Delay --);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1e5a      	subs	r2, r3, #1
 8002bce:	60fa      	str	r2, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f9      	bne.n	8002bc8 <RCC_Delay+0x1c>
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	20000000 	.word	0x20000000
 8002be4:	10624dd3 	.word	0x10624dd3

08002be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d07d      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c04:	2300      	movs	r3, #0
 8002c06:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c08:	4b4f      	ldr	r3, [pc, #316]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10d      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c14:	4b4c      	ldr	r3, [pc, #304]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	4a4b      	ldr	r2, [pc, #300]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	61d3      	str	r3, [r2, #28]
 8002c20:	4b49      	ldr	r3, [pc, #292]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	4b46      	ldr	r3, [pc, #280]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d118      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3c:	4b43      	ldr	r3, [pc, #268]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a42      	ldr	r2, [pc, #264]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c48:	f7fe fcc4 	bl	80015d4 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	e008      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c50:	f7fe fcc0 	bl	80015d4 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	@ 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e06d      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	4b3a      	ldr	r3, [pc, #232]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c6e:	4b36      	ldr	r3, [pc, #216]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02e      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d027      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c96:	4b2e      	ldr	r3, [pc, #184]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ca2:	4a29      	ldr	r2, [pc, #164]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d014      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fe fc8f 	bl	80015d4 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fe fc8b 	bl	80015d4 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e036      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ee      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4917      	ldr	r1, [pc, #92]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d105      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf4:	4b14      	ldr	r3, [pc, #80]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	4a13      	ldr	r2, [pc, #76]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	490b      	ldr	r1, [pc, #44]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d2a:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	4904      	ldr	r1, [pc, #16]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	42420440 	.word	0x42420440

08002d54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	f200 808a 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d045      	beq.n	8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d075      	beq.n	8002e76 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002d8a:	e082      	b.n	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002d8c:	4b46      	ldr	r3, [pc, #280]	@ (8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d92:	4b45      	ldr	r3, [pc, #276]	@ (8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d07b      	beq.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	0c9b      	lsrs	r3, r3, #18
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	4a41      	ldr	r2, [pc, #260]	@ (8002eac <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d015      	beq.n	8002de2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002db6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	0c5b      	lsrs	r3, r3, #17
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	4a3b      	ldr	r2, [pc, #236]	@ (8002eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002dc2:	5cd3      	ldrb	r3, [r2, r3]
 8002dc4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00d      	beq.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002dd0:	4a38      	ldr	r2, [pc, #224]	@ (8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	e004      	b.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4a34      	ldr	r2, [pc, #208]	@ (8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002dec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002df8:	d102      	bne.n	8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	61bb      	str	r3, [r7, #24]
      break;
 8002dfe:	e04a      	b.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4a2d      	ldr	r2, [pc, #180]	@ (8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	61bb      	str	r3, [r7, #24]
      break;
 8002e0e:	e042      	b.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002e10:	4b25      	ldr	r3, [pc, #148]	@ (8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e20:	d108      	bne.n	8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002e2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	e01f      	b.n	8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e3e:	d109      	bne.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002e40:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002e4c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	e00f      	b.n	8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e5e:	d11c      	bne.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e60:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d016      	beq.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002e6c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002e70:	61bb      	str	r3, [r7, #24]
      break;
 8002e72:	e012      	b.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e74:	e011      	b.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002e76:	f7ff fe85 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	0b9b      	lsrs	r3, r3, #14
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	3301      	adds	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	61bb      	str	r3, [r7, #24]
      break;
 8002e90:	e004      	b.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e92:	bf00      	nop
 8002e94:	e002      	b.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e96:	bf00      	nop
 8002e98:	e000      	b.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e9a:	bf00      	nop
    }
  }
  return (frequency);
 8002e9c:	69bb      	ldr	r3, [r7, #24]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	08005880 	.word	0x08005880
 8002eb0:	08005890 	.word	0x08005890
 8002eb4:	007a1200 	.word	0x007a1200
 8002eb8:	003d0900 	.word	0x003d0900
 8002ebc:	aaaaaaab 	.word	0xaaaaaaab

08002ec0 <__cvt>:
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ec6:	461d      	mov	r5, r3
 8002ec8:	bfbb      	ittet	lt
 8002eca:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002ece:	461d      	movlt	r5, r3
 8002ed0:	2300      	movge	r3, #0
 8002ed2:	232d      	movlt	r3, #45	@ 0x2d
 8002ed4:	b088      	sub	sp, #32
 8002ed6:	4614      	mov	r4, r2
 8002ed8:	bfb8      	it	lt
 8002eda:	4614      	movlt	r4, r2
 8002edc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002ede:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002ee0:	7013      	strb	r3, [r2, #0]
 8002ee2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002ee4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002ee8:	f023 0820 	bic.w	r8, r3, #32
 8002eec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002ef0:	d005      	beq.n	8002efe <__cvt+0x3e>
 8002ef2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002ef6:	d100      	bne.n	8002efa <__cvt+0x3a>
 8002ef8:	3601      	adds	r6, #1
 8002efa:	2302      	movs	r3, #2
 8002efc:	e000      	b.n	8002f00 <__cvt+0x40>
 8002efe:	2303      	movs	r3, #3
 8002f00:	aa07      	add	r2, sp, #28
 8002f02:	9204      	str	r2, [sp, #16]
 8002f04:	aa06      	add	r2, sp, #24
 8002f06:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002f0a:	e9cd 3600 	strd	r3, r6, [sp]
 8002f0e:	4622      	mov	r2, r4
 8002f10:	462b      	mov	r3, r5
 8002f12:	f000 ff1d 	bl	8003d50 <_dtoa_r>
 8002f16:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002f1a:	4607      	mov	r7, r0
 8002f1c:	d119      	bne.n	8002f52 <__cvt+0x92>
 8002f1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002f20:	07db      	lsls	r3, r3, #31
 8002f22:	d50e      	bpl.n	8002f42 <__cvt+0x82>
 8002f24:	eb00 0906 	add.w	r9, r0, r6
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	4629      	mov	r1, r5
 8002f30:	f7fd fd3a 	bl	80009a8 <__aeabi_dcmpeq>
 8002f34:	b108      	cbz	r0, 8002f3a <__cvt+0x7a>
 8002f36:	f8cd 901c 	str.w	r9, [sp, #28]
 8002f3a:	2230      	movs	r2, #48	@ 0x30
 8002f3c:	9b07      	ldr	r3, [sp, #28]
 8002f3e:	454b      	cmp	r3, r9
 8002f40:	d31e      	bcc.n	8002f80 <__cvt+0xc0>
 8002f42:	4638      	mov	r0, r7
 8002f44:	9b07      	ldr	r3, [sp, #28]
 8002f46:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002f48:	1bdb      	subs	r3, r3, r7
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	b008      	add	sp, #32
 8002f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f52:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002f56:	eb00 0906 	add.w	r9, r0, r6
 8002f5a:	d1e5      	bne.n	8002f28 <__cvt+0x68>
 8002f5c:	7803      	ldrb	r3, [r0, #0]
 8002f5e:	2b30      	cmp	r3, #48	@ 0x30
 8002f60:	d10a      	bne.n	8002f78 <__cvt+0xb8>
 8002f62:	2200      	movs	r2, #0
 8002f64:	2300      	movs	r3, #0
 8002f66:	4620      	mov	r0, r4
 8002f68:	4629      	mov	r1, r5
 8002f6a:	f7fd fd1d 	bl	80009a8 <__aeabi_dcmpeq>
 8002f6e:	b918      	cbnz	r0, 8002f78 <__cvt+0xb8>
 8002f70:	f1c6 0601 	rsb	r6, r6, #1
 8002f74:	f8ca 6000 	str.w	r6, [sl]
 8002f78:	f8da 3000 	ldr.w	r3, [sl]
 8002f7c:	4499      	add	r9, r3
 8002f7e:	e7d3      	b.n	8002f28 <__cvt+0x68>
 8002f80:	1c59      	adds	r1, r3, #1
 8002f82:	9107      	str	r1, [sp, #28]
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e7d9      	b.n	8002f3c <__cvt+0x7c>

08002f88 <__exponent>:
 8002f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	bfb6      	itet	lt
 8002f8e:	232d      	movlt	r3, #45	@ 0x2d
 8002f90:	232b      	movge	r3, #43	@ 0x2b
 8002f92:	4249      	neglt	r1, r1
 8002f94:	2909      	cmp	r1, #9
 8002f96:	7002      	strb	r2, [r0, #0]
 8002f98:	7043      	strb	r3, [r0, #1]
 8002f9a:	dd29      	ble.n	8002ff0 <__exponent+0x68>
 8002f9c:	f10d 0307 	add.w	r3, sp, #7
 8002fa0:	461d      	mov	r5, r3
 8002fa2:	270a      	movs	r7, #10
 8002fa4:	fbb1 f6f7 	udiv	r6, r1, r7
 8002fa8:	461a      	mov	r2, r3
 8002faa:	fb07 1416 	mls	r4, r7, r6, r1
 8002fae:	3430      	adds	r4, #48	@ 0x30
 8002fb0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	2c63      	cmp	r4, #99	@ 0x63
 8002fb8:	4631      	mov	r1, r6
 8002fba:	f103 33ff 	add.w	r3, r3, #4294967295
 8002fbe:	dcf1      	bgt.n	8002fa4 <__exponent+0x1c>
 8002fc0:	3130      	adds	r1, #48	@ 0x30
 8002fc2:	1e94      	subs	r4, r2, #2
 8002fc4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002fc8:	4623      	mov	r3, r4
 8002fca:	1c41      	adds	r1, r0, #1
 8002fcc:	42ab      	cmp	r3, r5
 8002fce:	d30a      	bcc.n	8002fe6 <__exponent+0x5e>
 8002fd0:	f10d 0309 	add.w	r3, sp, #9
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	42ac      	cmp	r4, r5
 8002fd8:	bf88      	it	hi
 8002fda:	2300      	movhi	r3, #0
 8002fdc:	3302      	adds	r3, #2
 8002fde:	4403      	add	r3, r0
 8002fe0:	1a18      	subs	r0, r3, r0
 8002fe2:	b003      	add	sp, #12
 8002fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002fea:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002fee:	e7ed      	b.n	8002fcc <__exponent+0x44>
 8002ff0:	2330      	movs	r3, #48	@ 0x30
 8002ff2:	3130      	adds	r1, #48	@ 0x30
 8002ff4:	7083      	strb	r3, [r0, #2]
 8002ff6:	70c1      	strb	r1, [r0, #3]
 8002ff8:	1d03      	adds	r3, r0, #4
 8002ffa:	e7f1      	b.n	8002fe0 <__exponent+0x58>

08002ffc <_printf_float>:
 8002ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003000:	b091      	sub	sp, #68	@ 0x44
 8003002:	460c      	mov	r4, r1
 8003004:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003008:	4616      	mov	r6, r2
 800300a:	461f      	mov	r7, r3
 800300c:	4605      	mov	r5, r0
 800300e:	f000 fd8f 	bl	8003b30 <_localeconv_r>
 8003012:	6803      	ldr	r3, [r0, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	9308      	str	r3, [sp, #32]
 8003018:	f7fd f89a 	bl	8000150 <strlen>
 800301c:	2300      	movs	r3, #0
 800301e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003020:	f8d8 3000 	ldr.w	r3, [r8]
 8003024:	9009      	str	r0, [sp, #36]	@ 0x24
 8003026:	3307      	adds	r3, #7
 8003028:	f023 0307 	bic.w	r3, r3, #7
 800302c:	f103 0208 	add.w	r2, r3, #8
 8003030:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003034:	f8d4 b000 	ldr.w	fp, [r4]
 8003038:	f8c8 2000 	str.w	r2, [r8]
 800303c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003040:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003044:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003046:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800304a:	f04f 32ff 	mov.w	r2, #4294967295
 800304e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003052:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003056:	4b9c      	ldr	r3, [pc, #624]	@ (80032c8 <_printf_float+0x2cc>)
 8003058:	f7fd fcd8 	bl	8000a0c <__aeabi_dcmpun>
 800305c:	bb70      	cbnz	r0, 80030bc <_printf_float+0xc0>
 800305e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003062:	f04f 32ff 	mov.w	r2, #4294967295
 8003066:	4b98      	ldr	r3, [pc, #608]	@ (80032c8 <_printf_float+0x2cc>)
 8003068:	f7fd fcb2 	bl	80009d0 <__aeabi_dcmple>
 800306c:	bb30      	cbnz	r0, 80030bc <_printf_float+0xc0>
 800306e:	2200      	movs	r2, #0
 8003070:	2300      	movs	r3, #0
 8003072:	4640      	mov	r0, r8
 8003074:	4649      	mov	r1, r9
 8003076:	f7fd fca1 	bl	80009bc <__aeabi_dcmplt>
 800307a:	b110      	cbz	r0, 8003082 <_printf_float+0x86>
 800307c:	232d      	movs	r3, #45	@ 0x2d
 800307e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003082:	4a92      	ldr	r2, [pc, #584]	@ (80032cc <_printf_float+0x2d0>)
 8003084:	4b92      	ldr	r3, [pc, #584]	@ (80032d0 <_printf_float+0x2d4>)
 8003086:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800308a:	bf94      	ite	ls
 800308c:	4690      	movls	r8, r2
 800308e:	4698      	movhi	r8, r3
 8003090:	2303      	movs	r3, #3
 8003092:	f04f 0900 	mov.w	r9, #0
 8003096:	6123      	str	r3, [r4, #16]
 8003098:	f02b 0304 	bic.w	r3, fp, #4
 800309c:	6023      	str	r3, [r4, #0]
 800309e:	4633      	mov	r3, r6
 80030a0:	4621      	mov	r1, r4
 80030a2:	4628      	mov	r0, r5
 80030a4:	9700      	str	r7, [sp, #0]
 80030a6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80030a8:	f000 f9d4 	bl	8003454 <_printf_common>
 80030ac:	3001      	adds	r0, #1
 80030ae:	f040 8090 	bne.w	80031d2 <_printf_float+0x1d6>
 80030b2:	f04f 30ff 	mov.w	r0, #4294967295
 80030b6:	b011      	add	sp, #68	@ 0x44
 80030b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030bc:	4642      	mov	r2, r8
 80030be:	464b      	mov	r3, r9
 80030c0:	4640      	mov	r0, r8
 80030c2:	4649      	mov	r1, r9
 80030c4:	f7fd fca2 	bl	8000a0c <__aeabi_dcmpun>
 80030c8:	b148      	cbz	r0, 80030de <_printf_float+0xe2>
 80030ca:	464b      	mov	r3, r9
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bfb8      	it	lt
 80030d0:	232d      	movlt	r3, #45	@ 0x2d
 80030d2:	4a80      	ldr	r2, [pc, #512]	@ (80032d4 <_printf_float+0x2d8>)
 80030d4:	bfb8      	it	lt
 80030d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80030da:	4b7f      	ldr	r3, [pc, #508]	@ (80032d8 <_printf_float+0x2dc>)
 80030dc:	e7d3      	b.n	8003086 <_printf_float+0x8a>
 80030de:	6863      	ldr	r3, [r4, #4]
 80030e0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	d13f      	bne.n	8003168 <_printf_float+0x16c>
 80030e8:	2306      	movs	r3, #6
 80030ea:	6063      	str	r3, [r4, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80030f2:	6023      	str	r3, [r4, #0]
 80030f4:	9206      	str	r2, [sp, #24]
 80030f6:	aa0e      	add	r2, sp, #56	@ 0x38
 80030f8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80030fc:	aa0d      	add	r2, sp, #52	@ 0x34
 80030fe:	9203      	str	r2, [sp, #12]
 8003100:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003104:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003108:	6863      	ldr	r3, [r4, #4]
 800310a:	4642      	mov	r2, r8
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	4628      	mov	r0, r5
 8003110:	464b      	mov	r3, r9
 8003112:	910a      	str	r1, [sp, #40]	@ 0x28
 8003114:	f7ff fed4 	bl	8002ec0 <__cvt>
 8003118:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800311a:	4680      	mov	r8, r0
 800311c:	2947      	cmp	r1, #71	@ 0x47
 800311e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003120:	d128      	bne.n	8003174 <_printf_float+0x178>
 8003122:	1cc8      	adds	r0, r1, #3
 8003124:	db02      	blt.n	800312c <_printf_float+0x130>
 8003126:	6863      	ldr	r3, [r4, #4]
 8003128:	4299      	cmp	r1, r3
 800312a:	dd40      	ble.n	80031ae <_printf_float+0x1b2>
 800312c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003130:	fa5f fa8a 	uxtb.w	sl, sl
 8003134:	4652      	mov	r2, sl
 8003136:	3901      	subs	r1, #1
 8003138:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800313c:	910d      	str	r1, [sp, #52]	@ 0x34
 800313e:	f7ff ff23 	bl	8002f88 <__exponent>
 8003142:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003144:	4681      	mov	r9, r0
 8003146:	1813      	adds	r3, r2, r0
 8003148:	2a01      	cmp	r2, #1
 800314a:	6123      	str	r3, [r4, #16]
 800314c:	dc02      	bgt.n	8003154 <_printf_float+0x158>
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	07d2      	lsls	r2, r2, #31
 8003152:	d501      	bpl.n	8003158 <_printf_float+0x15c>
 8003154:	3301      	adds	r3, #1
 8003156:	6123      	str	r3, [r4, #16]
 8003158:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800315c:	2b00      	cmp	r3, #0
 800315e:	d09e      	beq.n	800309e <_printf_float+0xa2>
 8003160:	232d      	movs	r3, #45	@ 0x2d
 8003162:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003166:	e79a      	b.n	800309e <_printf_float+0xa2>
 8003168:	2947      	cmp	r1, #71	@ 0x47
 800316a:	d1bf      	bne.n	80030ec <_printf_float+0xf0>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1bd      	bne.n	80030ec <_printf_float+0xf0>
 8003170:	2301      	movs	r3, #1
 8003172:	e7ba      	b.n	80030ea <_printf_float+0xee>
 8003174:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003178:	d9dc      	bls.n	8003134 <_printf_float+0x138>
 800317a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800317e:	d118      	bne.n	80031b2 <_printf_float+0x1b6>
 8003180:	2900      	cmp	r1, #0
 8003182:	6863      	ldr	r3, [r4, #4]
 8003184:	dd0b      	ble.n	800319e <_printf_float+0x1a2>
 8003186:	6121      	str	r1, [r4, #16]
 8003188:	b913      	cbnz	r3, 8003190 <_printf_float+0x194>
 800318a:	6822      	ldr	r2, [r4, #0]
 800318c:	07d0      	lsls	r0, r2, #31
 800318e:	d502      	bpl.n	8003196 <_printf_float+0x19a>
 8003190:	3301      	adds	r3, #1
 8003192:	440b      	add	r3, r1
 8003194:	6123      	str	r3, [r4, #16]
 8003196:	f04f 0900 	mov.w	r9, #0
 800319a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800319c:	e7dc      	b.n	8003158 <_printf_float+0x15c>
 800319e:	b913      	cbnz	r3, 80031a6 <_printf_float+0x1aa>
 80031a0:	6822      	ldr	r2, [r4, #0]
 80031a2:	07d2      	lsls	r2, r2, #31
 80031a4:	d501      	bpl.n	80031aa <_printf_float+0x1ae>
 80031a6:	3302      	adds	r3, #2
 80031a8:	e7f4      	b.n	8003194 <_printf_float+0x198>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e7f2      	b.n	8003194 <_printf_float+0x198>
 80031ae:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80031b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80031b4:	4299      	cmp	r1, r3
 80031b6:	db05      	blt.n	80031c4 <_printf_float+0x1c8>
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	6121      	str	r1, [r4, #16]
 80031bc:	07d8      	lsls	r0, r3, #31
 80031be:	d5ea      	bpl.n	8003196 <_printf_float+0x19a>
 80031c0:	1c4b      	adds	r3, r1, #1
 80031c2:	e7e7      	b.n	8003194 <_printf_float+0x198>
 80031c4:	2900      	cmp	r1, #0
 80031c6:	bfcc      	ite	gt
 80031c8:	2201      	movgt	r2, #1
 80031ca:	f1c1 0202 	rsble	r2, r1, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	e7e0      	b.n	8003194 <_printf_float+0x198>
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	055a      	lsls	r2, r3, #21
 80031d6:	d407      	bmi.n	80031e8 <_printf_float+0x1ec>
 80031d8:	6923      	ldr	r3, [r4, #16]
 80031da:	4642      	mov	r2, r8
 80031dc:	4631      	mov	r1, r6
 80031de:	4628      	mov	r0, r5
 80031e0:	47b8      	blx	r7
 80031e2:	3001      	adds	r0, #1
 80031e4:	d12b      	bne.n	800323e <_printf_float+0x242>
 80031e6:	e764      	b.n	80030b2 <_printf_float+0xb6>
 80031e8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80031ec:	f240 80dc 	bls.w	80033a8 <_printf_float+0x3ac>
 80031f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80031f4:	2200      	movs	r2, #0
 80031f6:	2300      	movs	r3, #0
 80031f8:	f7fd fbd6 	bl	80009a8 <__aeabi_dcmpeq>
 80031fc:	2800      	cmp	r0, #0
 80031fe:	d033      	beq.n	8003268 <_printf_float+0x26c>
 8003200:	2301      	movs	r3, #1
 8003202:	4631      	mov	r1, r6
 8003204:	4628      	mov	r0, r5
 8003206:	4a35      	ldr	r2, [pc, #212]	@ (80032dc <_printf_float+0x2e0>)
 8003208:	47b8      	blx	r7
 800320a:	3001      	adds	r0, #1
 800320c:	f43f af51 	beq.w	80030b2 <_printf_float+0xb6>
 8003210:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003214:	4543      	cmp	r3, r8
 8003216:	db02      	blt.n	800321e <_printf_float+0x222>
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	07d8      	lsls	r0, r3, #31
 800321c:	d50f      	bpl.n	800323e <_printf_float+0x242>
 800321e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003222:	4631      	mov	r1, r6
 8003224:	4628      	mov	r0, r5
 8003226:	47b8      	blx	r7
 8003228:	3001      	adds	r0, #1
 800322a:	f43f af42 	beq.w	80030b2 <_printf_float+0xb6>
 800322e:	f04f 0900 	mov.w	r9, #0
 8003232:	f108 38ff 	add.w	r8, r8, #4294967295
 8003236:	f104 0a1a 	add.w	sl, r4, #26
 800323a:	45c8      	cmp	r8, r9
 800323c:	dc09      	bgt.n	8003252 <_printf_float+0x256>
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	079b      	lsls	r3, r3, #30
 8003242:	f100 8102 	bmi.w	800344a <_printf_float+0x44e>
 8003246:	68e0      	ldr	r0, [r4, #12]
 8003248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800324a:	4298      	cmp	r0, r3
 800324c:	bfb8      	it	lt
 800324e:	4618      	movlt	r0, r3
 8003250:	e731      	b.n	80030b6 <_printf_float+0xba>
 8003252:	2301      	movs	r3, #1
 8003254:	4652      	mov	r2, sl
 8003256:	4631      	mov	r1, r6
 8003258:	4628      	mov	r0, r5
 800325a:	47b8      	blx	r7
 800325c:	3001      	adds	r0, #1
 800325e:	f43f af28 	beq.w	80030b2 <_printf_float+0xb6>
 8003262:	f109 0901 	add.w	r9, r9, #1
 8003266:	e7e8      	b.n	800323a <_printf_float+0x23e>
 8003268:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800326a:	2b00      	cmp	r3, #0
 800326c:	dc38      	bgt.n	80032e0 <_printf_float+0x2e4>
 800326e:	2301      	movs	r3, #1
 8003270:	4631      	mov	r1, r6
 8003272:	4628      	mov	r0, r5
 8003274:	4a19      	ldr	r2, [pc, #100]	@ (80032dc <_printf_float+0x2e0>)
 8003276:	47b8      	blx	r7
 8003278:	3001      	adds	r0, #1
 800327a:	f43f af1a 	beq.w	80030b2 <_printf_float+0xb6>
 800327e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003282:	ea59 0303 	orrs.w	r3, r9, r3
 8003286:	d102      	bne.n	800328e <_printf_float+0x292>
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	07d9      	lsls	r1, r3, #31
 800328c:	d5d7      	bpl.n	800323e <_printf_float+0x242>
 800328e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003292:	4631      	mov	r1, r6
 8003294:	4628      	mov	r0, r5
 8003296:	47b8      	blx	r7
 8003298:	3001      	adds	r0, #1
 800329a:	f43f af0a 	beq.w	80030b2 <_printf_float+0xb6>
 800329e:	f04f 0a00 	mov.w	sl, #0
 80032a2:	f104 0b1a 	add.w	fp, r4, #26
 80032a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032a8:	425b      	negs	r3, r3
 80032aa:	4553      	cmp	r3, sl
 80032ac:	dc01      	bgt.n	80032b2 <_printf_float+0x2b6>
 80032ae:	464b      	mov	r3, r9
 80032b0:	e793      	b.n	80031da <_printf_float+0x1de>
 80032b2:	2301      	movs	r3, #1
 80032b4:	465a      	mov	r2, fp
 80032b6:	4631      	mov	r1, r6
 80032b8:	4628      	mov	r0, r5
 80032ba:	47b8      	blx	r7
 80032bc:	3001      	adds	r0, #1
 80032be:	f43f aef8 	beq.w	80030b2 <_printf_float+0xb6>
 80032c2:	f10a 0a01 	add.w	sl, sl, #1
 80032c6:	e7ee      	b.n	80032a6 <_printf_float+0x2aa>
 80032c8:	7fefffff 	.word	0x7fefffff
 80032cc:	08005892 	.word	0x08005892
 80032d0:	08005896 	.word	0x08005896
 80032d4:	0800589a 	.word	0x0800589a
 80032d8:	0800589e 	.word	0x0800589e
 80032dc:	080058a2 	.word	0x080058a2
 80032e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032e2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80032e6:	4553      	cmp	r3, sl
 80032e8:	bfa8      	it	ge
 80032ea:	4653      	movge	r3, sl
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	4699      	mov	r9, r3
 80032f0:	dc36      	bgt.n	8003360 <_printf_float+0x364>
 80032f2:	f04f 0b00 	mov.w	fp, #0
 80032f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032fa:	f104 021a 	add.w	r2, r4, #26
 80032fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003300:	930a      	str	r3, [sp, #40]	@ 0x28
 8003302:	eba3 0309 	sub.w	r3, r3, r9
 8003306:	455b      	cmp	r3, fp
 8003308:	dc31      	bgt.n	800336e <_printf_float+0x372>
 800330a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800330c:	459a      	cmp	sl, r3
 800330e:	dc3a      	bgt.n	8003386 <_printf_float+0x38a>
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	07da      	lsls	r2, r3, #31
 8003314:	d437      	bmi.n	8003386 <_printf_float+0x38a>
 8003316:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003318:	ebaa 0903 	sub.w	r9, sl, r3
 800331c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800331e:	ebaa 0303 	sub.w	r3, sl, r3
 8003322:	4599      	cmp	r9, r3
 8003324:	bfa8      	it	ge
 8003326:	4699      	movge	r9, r3
 8003328:	f1b9 0f00 	cmp.w	r9, #0
 800332c:	dc33      	bgt.n	8003396 <_printf_float+0x39a>
 800332e:	f04f 0800 	mov.w	r8, #0
 8003332:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003336:	f104 0b1a 	add.w	fp, r4, #26
 800333a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800333c:	ebaa 0303 	sub.w	r3, sl, r3
 8003340:	eba3 0309 	sub.w	r3, r3, r9
 8003344:	4543      	cmp	r3, r8
 8003346:	f77f af7a 	ble.w	800323e <_printf_float+0x242>
 800334a:	2301      	movs	r3, #1
 800334c:	465a      	mov	r2, fp
 800334e:	4631      	mov	r1, r6
 8003350:	4628      	mov	r0, r5
 8003352:	47b8      	blx	r7
 8003354:	3001      	adds	r0, #1
 8003356:	f43f aeac 	beq.w	80030b2 <_printf_float+0xb6>
 800335a:	f108 0801 	add.w	r8, r8, #1
 800335e:	e7ec      	b.n	800333a <_printf_float+0x33e>
 8003360:	4642      	mov	r2, r8
 8003362:	4631      	mov	r1, r6
 8003364:	4628      	mov	r0, r5
 8003366:	47b8      	blx	r7
 8003368:	3001      	adds	r0, #1
 800336a:	d1c2      	bne.n	80032f2 <_printf_float+0x2f6>
 800336c:	e6a1      	b.n	80030b2 <_printf_float+0xb6>
 800336e:	2301      	movs	r3, #1
 8003370:	4631      	mov	r1, r6
 8003372:	4628      	mov	r0, r5
 8003374:	920a      	str	r2, [sp, #40]	@ 0x28
 8003376:	47b8      	blx	r7
 8003378:	3001      	adds	r0, #1
 800337a:	f43f ae9a 	beq.w	80030b2 <_printf_float+0xb6>
 800337e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003380:	f10b 0b01 	add.w	fp, fp, #1
 8003384:	e7bb      	b.n	80032fe <_printf_float+0x302>
 8003386:	4631      	mov	r1, r6
 8003388:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800338c:	4628      	mov	r0, r5
 800338e:	47b8      	blx	r7
 8003390:	3001      	adds	r0, #1
 8003392:	d1c0      	bne.n	8003316 <_printf_float+0x31a>
 8003394:	e68d      	b.n	80030b2 <_printf_float+0xb6>
 8003396:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003398:	464b      	mov	r3, r9
 800339a:	4631      	mov	r1, r6
 800339c:	4628      	mov	r0, r5
 800339e:	4442      	add	r2, r8
 80033a0:	47b8      	blx	r7
 80033a2:	3001      	adds	r0, #1
 80033a4:	d1c3      	bne.n	800332e <_printf_float+0x332>
 80033a6:	e684      	b.n	80030b2 <_printf_float+0xb6>
 80033a8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80033ac:	f1ba 0f01 	cmp.w	sl, #1
 80033b0:	dc01      	bgt.n	80033b6 <_printf_float+0x3ba>
 80033b2:	07db      	lsls	r3, r3, #31
 80033b4:	d536      	bpl.n	8003424 <_printf_float+0x428>
 80033b6:	2301      	movs	r3, #1
 80033b8:	4642      	mov	r2, r8
 80033ba:	4631      	mov	r1, r6
 80033bc:	4628      	mov	r0, r5
 80033be:	47b8      	blx	r7
 80033c0:	3001      	adds	r0, #1
 80033c2:	f43f ae76 	beq.w	80030b2 <_printf_float+0xb6>
 80033c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80033ca:	4631      	mov	r1, r6
 80033cc:	4628      	mov	r0, r5
 80033ce:	47b8      	blx	r7
 80033d0:	3001      	adds	r0, #1
 80033d2:	f43f ae6e 	beq.w	80030b2 <_printf_float+0xb6>
 80033d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80033da:	2200      	movs	r2, #0
 80033dc:	2300      	movs	r3, #0
 80033de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033e2:	f7fd fae1 	bl	80009a8 <__aeabi_dcmpeq>
 80033e6:	b9c0      	cbnz	r0, 800341a <_printf_float+0x41e>
 80033e8:	4653      	mov	r3, sl
 80033ea:	f108 0201 	add.w	r2, r8, #1
 80033ee:	4631      	mov	r1, r6
 80033f0:	4628      	mov	r0, r5
 80033f2:	47b8      	blx	r7
 80033f4:	3001      	adds	r0, #1
 80033f6:	d10c      	bne.n	8003412 <_printf_float+0x416>
 80033f8:	e65b      	b.n	80030b2 <_printf_float+0xb6>
 80033fa:	2301      	movs	r3, #1
 80033fc:	465a      	mov	r2, fp
 80033fe:	4631      	mov	r1, r6
 8003400:	4628      	mov	r0, r5
 8003402:	47b8      	blx	r7
 8003404:	3001      	adds	r0, #1
 8003406:	f43f ae54 	beq.w	80030b2 <_printf_float+0xb6>
 800340a:	f108 0801 	add.w	r8, r8, #1
 800340e:	45d0      	cmp	r8, sl
 8003410:	dbf3      	blt.n	80033fa <_printf_float+0x3fe>
 8003412:	464b      	mov	r3, r9
 8003414:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003418:	e6e0      	b.n	80031dc <_printf_float+0x1e0>
 800341a:	f04f 0800 	mov.w	r8, #0
 800341e:	f104 0b1a 	add.w	fp, r4, #26
 8003422:	e7f4      	b.n	800340e <_printf_float+0x412>
 8003424:	2301      	movs	r3, #1
 8003426:	4642      	mov	r2, r8
 8003428:	e7e1      	b.n	80033ee <_printf_float+0x3f2>
 800342a:	2301      	movs	r3, #1
 800342c:	464a      	mov	r2, r9
 800342e:	4631      	mov	r1, r6
 8003430:	4628      	mov	r0, r5
 8003432:	47b8      	blx	r7
 8003434:	3001      	adds	r0, #1
 8003436:	f43f ae3c 	beq.w	80030b2 <_printf_float+0xb6>
 800343a:	f108 0801 	add.w	r8, r8, #1
 800343e:	68e3      	ldr	r3, [r4, #12]
 8003440:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003442:	1a5b      	subs	r3, r3, r1
 8003444:	4543      	cmp	r3, r8
 8003446:	dcf0      	bgt.n	800342a <_printf_float+0x42e>
 8003448:	e6fd      	b.n	8003246 <_printf_float+0x24a>
 800344a:	f04f 0800 	mov.w	r8, #0
 800344e:	f104 0919 	add.w	r9, r4, #25
 8003452:	e7f4      	b.n	800343e <_printf_float+0x442>

08003454 <_printf_common>:
 8003454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003458:	4616      	mov	r6, r2
 800345a:	4698      	mov	r8, r3
 800345c:	688a      	ldr	r2, [r1, #8]
 800345e:	690b      	ldr	r3, [r1, #16]
 8003460:	4607      	mov	r7, r0
 8003462:	4293      	cmp	r3, r2
 8003464:	bfb8      	it	lt
 8003466:	4613      	movlt	r3, r2
 8003468:	6033      	str	r3, [r6, #0]
 800346a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800346e:	460c      	mov	r4, r1
 8003470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003474:	b10a      	cbz	r2, 800347a <_printf_common+0x26>
 8003476:	3301      	adds	r3, #1
 8003478:	6033      	str	r3, [r6, #0]
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	0699      	lsls	r1, r3, #26
 800347e:	bf42      	ittt	mi
 8003480:	6833      	ldrmi	r3, [r6, #0]
 8003482:	3302      	addmi	r3, #2
 8003484:	6033      	strmi	r3, [r6, #0]
 8003486:	6825      	ldr	r5, [r4, #0]
 8003488:	f015 0506 	ands.w	r5, r5, #6
 800348c:	d106      	bne.n	800349c <_printf_common+0x48>
 800348e:	f104 0a19 	add.w	sl, r4, #25
 8003492:	68e3      	ldr	r3, [r4, #12]
 8003494:	6832      	ldr	r2, [r6, #0]
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	42ab      	cmp	r3, r5
 800349a:	dc2b      	bgt.n	80034f4 <_printf_common+0xa0>
 800349c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034a0:	6822      	ldr	r2, [r4, #0]
 80034a2:	3b00      	subs	r3, #0
 80034a4:	bf18      	it	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	0692      	lsls	r2, r2, #26
 80034aa:	d430      	bmi.n	800350e <_printf_common+0xba>
 80034ac:	4641      	mov	r1, r8
 80034ae:	4638      	mov	r0, r7
 80034b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034b4:	47c8      	blx	r9
 80034b6:	3001      	adds	r0, #1
 80034b8:	d023      	beq.n	8003502 <_printf_common+0xae>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	6922      	ldr	r2, [r4, #16]
 80034be:	f003 0306 	and.w	r3, r3, #6
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	bf14      	ite	ne
 80034c6:	2500      	movne	r5, #0
 80034c8:	6833      	ldreq	r3, [r6, #0]
 80034ca:	f04f 0600 	mov.w	r6, #0
 80034ce:	bf08      	it	eq
 80034d0:	68e5      	ldreq	r5, [r4, #12]
 80034d2:	f104 041a 	add.w	r4, r4, #26
 80034d6:	bf08      	it	eq
 80034d8:	1aed      	subeq	r5, r5, r3
 80034da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034de:	bf08      	it	eq
 80034e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034e4:	4293      	cmp	r3, r2
 80034e6:	bfc4      	itt	gt
 80034e8:	1a9b      	subgt	r3, r3, r2
 80034ea:	18ed      	addgt	r5, r5, r3
 80034ec:	42b5      	cmp	r5, r6
 80034ee:	d11a      	bne.n	8003526 <_printf_common+0xd2>
 80034f0:	2000      	movs	r0, #0
 80034f2:	e008      	b.n	8003506 <_printf_common+0xb2>
 80034f4:	2301      	movs	r3, #1
 80034f6:	4652      	mov	r2, sl
 80034f8:	4641      	mov	r1, r8
 80034fa:	4638      	mov	r0, r7
 80034fc:	47c8      	blx	r9
 80034fe:	3001      	adds	r0, #1
 8003500:	d103      	bne.n	800350a <_printf_common+0xb6>
 8003502:	f04f 30ff 	mov.w	r0, #4294967295
 8003506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800350a:	3501      	adds	r5, #1
 800350c:	e7c1      	b.n	8003492 <_printf_common+0x3e>
 800350e:	2030      	movs	r0, #48	@ 0x30
 8003510:	18e1      	adds	r1, r4, r3
 8003512:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800351c:	4422      	add	r2, r4
 800351e:	3302      	adds	r3, #2
 8003520:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003524:	e7c2      	b.n	80034ac <_printf_common+0x58>
 8003526:	2301      	movs	r3, #1
 8003528:	4622      	mov	r2, r4
 800352a:	4641      	mov	r1, r8
 800352c:	4638      	mov	r0, r7
 800352e:	47c8      	blx	r9
 8003530:	3001      	adds	r0, #1
 8003532:	d0e6      	beq.n	8003502 <_printf_common+0xae>
 8003534:	3601      	adds	r6, #1
 8003536:	e7d9      	b.n	80034ec <_printf_common+0x98>

08003538 <_printf_i>:
 8003538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800353c:	7e0f      	ldrb	r7, [r1, #24]
 800353e:	4691      	mov	r9, r2
 8003540:	2f78      	cmp	r7, #120	@ 0x78
 8003542:	4680      	mov	r8, r0
 8003544:	460c      	mov	r4, r1
 8003546:	469a      	mov	sl, r3
 8003548:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800354a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800354e:	d807      	bhi.n	8003560 <_printf_i+0x28>
 8003550:	2f62      	cmp	r7, #98	@ 0x62
 8003552:	d80a      	bhi.n	800356a <_printf_i+0x32>
 8003554:	2f00      	cmp	r7, #0
 8003556:	f000 80d3 	beq.w	8003700 <_printf_i+0x1c8>
 800355a:	2f58      	cmp	r7, #88	@ 0x58
 800355c:	f000 80ba 	beq.w	80036d4 <_printf_i+0x19c>
 8003560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003564:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003568:	e03a      	b.n	80035e0 <_printf_i+0xa8>
 800356a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800356e:	2b15      	cmp	r3, #21
 8003570:	d8f6      	bhi.n	8003560 <_printf_i+0x28>
 8003572:	a101      	add	r1, pc, #4	@ (adr r1, 8003578 <_printf_i+0x40>)
 8003574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003578:	080035d1 	.word	0x080035d1
 800357c:	080035e5 	.word	0x080035e5
 8003580:	08003561 	.word	0x08003561
 8003584:	08003561 	.word	0x08003561
 8003588:	08003561 	.word	0x08003561
 800358c:	08003561 	.word	0x08003561
 8003590:	080035e5 	.word	0x080035e5
 8003594:	08003561 	.word	0x08003561
 8003598:	08003561 	.word	0x08003561
 800359c:	08003561 	.word	0x08003561
 80035a0:	08003561 	.word	0x08003561
 80035a4:	080036e7 	.word	0x080036e7
 80035a8:	0800360f 	.word	0x0800360f
 80035ac:	080036a1 	.word	0x080036a1
 80035b0:	08003561 	.word	0x08003561
 80035b4:	08003561 	.word	0x08003561
 80035b8:	08003709 	.word	0x08003709
 80035bc:	08003561 	.word	0x08003561
 80035c0:	0800360f 	.word	0x0800360f
 80035c4:	08003561 	.word	0x08003561
 80035c8:	08003561 	.word	0x08003561
 80035cc:	080036a9 	.word	0x080036a9
 80035d0:	6833      	ldr	r3, [r6, #0]
 80035d2:	1d1a      	adds	r2, r3, #4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6032      	str	r2, [r6, #0]
 80035d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035e0:	2301      	movs	r3, #1
 80035e2:	e09e      	b.n	8003722 <_printf_i+0x1ea>
 80035e4:	6833      	ldr	r3, [r6, #0]
 80035e6:	6820      	ldr	r0, [r4, #0]
 80035e8:	1d19      	adds	r1, r3, #4
 80035ea:	6031      	str	r1, [r6, #0]
 80035ec:	0606      	lsls	r6, r0, #24
 80035ee:	d501      	bpl.n	80035f4 <_printf_i+0xbc>
 80035f0:	681d      	ldr	r5, [r3, #0]
 80035f2:	e003      	b.n	80035fc <_printf_i+0xc4>
 80035f4:	0645      	lsls	r5, r0, #25
 80035f6:	d5fb      	bpl.n	80035f0 <_printf_i+0xb8>
 80035f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035fc:	2d00      	cmp	r5, #0
 80035fe:	da03      	bge.n	8003608 <_printf_i+0xd0>
 8003600:	232d      	movs	r3, #45	@ 0x2d
 8003602:	426d      	negs	r5, r5
 8003604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003608:	230a      	movs	r3, #10
 800360a:	4859      	ldr	r0, [pc, #356]	@ (8003770 <_printf_i+0x238>)
 800360c:	e011      	b.n	8003632 <_printf_i+0xfa>
 800360e:	6821      	ldr	r1, [r4, #0]
 8003610:	6833      	ldr	r3, [r6, #0]
 8003612:	0608      	lsls	r0, r1, #24
 8003614:	f853 5b04 	ldr.w	r5, [r3], #4
 8003618:	d402      	bmi.n	8003620 <_printf_i+0xe8>
 800361a:	0649      	lsls	r1, r1, #25
 800361c:	bf48      	it	mi
 800361e:	b2ad      	uxthmi	r5, r5
 8003620:	2f6f      	cmp	r7, #111	@ 0x6f
 8003622:	6033      	str	r3, [r6, #0]
 8003624:	bf14      	ite	ne
 8003626:	230a      	movne	r3, #10
 8003628:	2308      	moveq	r3, #8
 800362a:	4851      	ldr	r0, [pc, #324]	@ (8003770 <_printf_i+0x238>)
 800362c:	2100      	movs	r1, #0
 800362e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003632:	6866      	ldr	r6, [r4, #4]
 8003634:	2e00      	cmp	r6, #0
 8003636:	bfa8      	it	ge
 8003638:	6821      	ldrge	r1, [r4, #0]
 800363a:	60a6      	str	r6, [r4, #8]
 800363c:	bfa4      	itt	ge
 800363e:	f021 0104 	bicge.w	r1, r1, #4
 8003642:	6021      	strge	r1, [r4, #0]
 8003644:	b90d      	cbnz	r5, 800364a <_printf_i+0x112>
 8003646:	2e00      	cmp	r6, #0
 8003648:	d04b      	beq.n	80036e2 <_printf_i+0x1aa>
 800364a:	4616      	mov	r6, r2
 800364c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003650:	fb03 5711 	mls	r7, r3, r1, r5
 8003654:	5dc7      	ldrb	r7, [r0, r7]
 8003656:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800365a:	462f      	mov	r7, r5
 800365c:	42bb      	cmp	r3, r7
 800365e:	460d      	mov	r5, r1
 8003660:	d9f4      	bls.n	800364c <_printf_i+0x114>
 8003662:	2b08      	cmp	r3, #8
 8003664:	d10b      	bne.n	800367e <_printf_i+0x146>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	07df      	lsls	r7, r3, #31
 800366a:	d508      	bpl.n	800367e <_printf_i+0x146>
 800366c:	6923      	ldr	r3, [r4, #16]
 800366e:	6861      	ldr	r1, [r4, #4]
 8003670:	4299      	cmp	r1, r3
 8003672:	bfde      	ittt	le
 8003674:	2330      	movle	r3, #48	@ 0x30
 8003676:	f806 3c01 	strble.w	r3, [r6, #-1]
 800367a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800367e:	1b92      	subs	r2, r2, r6
 8003680:	6122      	str	r2, [r4, #16]
 8003682:	464b      	mov	r3, r9
 8003684:	4621      	mov	r1, r4
 8003686:	4640      	mov	r0, r8
 8003688:	f8cd a000 	str.w	sl, [sp]
 800368c:	aa03      	add	r2, sp, #12
 800368e:	f7ff fee1 	bl	8003454 <_printf_common>
 8003692:	3001      	adds	r0, #1
 8003694:	d14a      	bne.n	800372c <_printf_i+0x1f4>
 8003696:	f04f 30ff 	mov.w	r0, #4294967295
 800369a:	b004      	add	sp, #16
 800369c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	f043 0320 	orr.w	r3, r3, #32
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	2778      	movs	r7, #120	@ 0x78
 80036aa:	4832      	ldr	r0, [pc, #200]	@ (8003774 <_printf_i+0x23c>)
 80036ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	6831      	ldr	r1, [r6, #0]
 80036b4:	061f      	lsls	r7, r3, #24
 80036b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80036ba:	d402      	bmi.n	80036c2 <_printf_i+0x18a>
 80036bc:	065f      	lsls	r7, r3, #25
 80036be:	bf48      	it	mi
 80036c0:	b2ad      	uxthmi	r5, r5
 80036c2:	6031      	str	r1, [r6, #0]
 80036c4:	07d9      	lsls	r1, r3, #31
 80036c6:	bf44      	itt	mi
 80036c8:	f043 0320 	orrmi.w	r3, r3, #32
 80036cc:	6023      	strmi	r3, [r4, #0]
 80036ce:	b11d      	cbz	r5, 80036d8 <_printf_i+0x1a0>
 80036d0:	2310      	movs	r3, #16
 80036d2:	e7ab      	b.n	800362c <_printf_i+0xf4>
 80036d4:	4826      	ldr	r0, [pc, #152]	@ (8003770 <_printf_i+0x238>)
 80036d6:	e7e9      	b.n	80036ac <_printf_i+0x174>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	f023 0320 	bic.w	r3, r3, #32
 80036de:	6023      	str	r3, [r4, #0]
 80036e0:	e7f6      	b.n	80036d0 <_printf_i+0x198>
 80036e2:	4616      	mov	r6, r2
 80036e4:	e7bd      	b.n	8003662 <_printf_i+0x12a>
 80036e6:	6833      	ldr	r3, [r6, #0]
 80036e8:	6825      	ldr	r5, [r4, #0]
 80036ea:	1d18      	adds	r0, r3, #4
 80036ec:	6961      	ldr	r1, [r4, #20]
 80036ee:	6030      	str	r0, [r6, #0]
 80036f0:	062e      	lsls	r6, r5, #24
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	d501      	bpl.n	80036fa <_printf_i+0x1c2>
 80036f6:	6019      	str	r1, [r3, #0]
 80036f8:	e002      	b.n	8003700 <_printf_i+0x1c8>
 80036fa:	0668      	lsls	r0, r5, #25
 80036fc:	d5fb      	bpl.n	80036f6 <_printf_i+0x1be>
 80036fe:	8019      	strh	r1, [r3, #0]
 8003700:	2300      	movs	r3, #0
 8003702:	4616      	mov	r6, r2
 8003704:	6123      	str	r3, [r4, #16]
 8003706:	e7bc      	b.n	8003682 <_printf_i+0x14a>
 8003708:	6833      	ldr	r3, [r6, #0]
 800370a:	2100      	movs	r1, #0
 800370c:	1d1a      	adds	r2, r3, #4
 800370e:	6032      	str	r2, [r6, #0]
 8003710:	681e      	ldr	r6, [r3, #0]
 8003712:	6862      	ldr	r2, [r4, #4]
 8003714:	4630      	mov	r0, r6
 8003716:	f000 fa82 	bl	8003c1e <memchr>
 800371a:	b108      	cbz	r0, 8003720 <_printf_i+0x1e8>
 800371c:	1b80      	subs	r0, r0, r6
 800371e:	6060      	str	r0, [r4, #4]
 8003720:	6863      	ldr	r3, [r4, #4]
 8003722:	6123      	str	r3, [r4, #16]
 8003724:	2300      	movs	r3, #0
 8003726:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800372a:	e7aa      	b.n	8003682 <_printf_i+0x14a>
 800372c:	4632      	mov	r2, r6
 800372e:	4649      	mov	r1, r9
 8003730:	4640      	mov	r0, r8
 8003732:	6923      	ldr	r3, [r4, #16]
 8003734:	47d0      	blx	sl
 8003736:	3001      	adds	r0, #1
 8003738:	d0ad      	beq.n	8003696 <_printf_i+0x15e>
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	079b      	lsls	r3, r3, #30
 800373e:	d413      	bmi.n	8003768 <_printf_i+0x230>
 8003740:	68e0      	ldr	r0, [r4, #12]
 8003742:	9b03      	ldr	r3, [sp, #12]
 8003744:	4298      	cmp	r0, r3
 8003746:	bfb8      	it	lt
 8003748:	4618      	movlt	r0, r3
 800374a:	e7a6      	b.n	800369a <_printf_i+0x162>
 800374c:	2301      	movs	r3, #1
 800374e:	4632      	mov	r2, r6
 8003750:	4649      	mov	r1, r9
 8003752:	4640      	mov	r0, r8
 8003754:	47d0      	blx	sl
 8003756:	3001      	adds	r0, #1
 8003758:	d09d      	beq.n	8003696 <_printf_i+0x15e>
 800375a:	3501      	adds	r5, #1
 800375c:	68e3      	ldr	r3, [r4, #12]
 800375e:	9903      	ldr	r1, [sp, #12]
 8003760:	1a5b      	subs	r3, r3, r1
 8003762:	42ab      	cmp	r3, r5
 8003764:	dcf2      	bgt.n	800374c <_printf_i+0x214>
 8003766:	e7eb      	b.n	8003740 <_printf_i+0x208>
 8003768:	2500      	movs	r5, #0
 800376a:	f104 0619 	add.w	r6, r4, #25
 800376e:	e7f5      	b.n	800375c <_printf_i+0x224>
 8003770:	080058a4 	.word	0x080058a4
 8003774:	080058b5 	.word	0x080058b5

08003778 <__sflush_r>:
 8003778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	0716      	lsls	r6, r2, #28
 8003780:	4605      	mov	r5, r0
 8003782:	460c      	mov	r4, r1
 8003784:	d454      	bmi.n	8003830 <__sflush_r+0xb8>
 8003786:	684b      	ldr	r3, [r1, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	dc02      	bgt.n	8003792 <__sflush_r+0x1a>
 800378c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800378e:	2b00      	cmp	r3, #0
 8003790:	dd48      	ble.n	8003824 <__sflush_r+0xac>
 8003792:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003794:	2e00      	cmp	r6, #0
 8003796:	d045      	beq.n	8003824 <__sflush_r+0xac>
 8003798:	2300      	movs	r3, #0
 800379a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800379e:	682f      	ldr	r7, [r5, #0]
 80037a0:	6a21      	ldr	r1, [r4, #32]
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	d030      	beq.n	8003808 <__sflush_r+0x90>
 80037a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	0759      	lsls	r1, r3, #29
 80037ac:	d505      	bpl.n	80037ba <__sflush_r+0x42>
 80037ae:	6863      	ldr	r3, [r4, #4]
 80037b0:	1ad2      	subs	r2, r2, r3
 80037b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80037b4:	b10b      	cbz	r3, 80037ba <__sflush_r+0x42>
 80037b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037b8:	1ad2      	subs	r2, r2, r3
 80037ba:	2300      	movs	r3, #0
 80037bc:	4628      	mov	r0, r5
 80037be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037c0:	6a21      	ldr	r1, [r4, #32]
 80037c2:	47b0      	blx	r6
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	89a3      	ldrh	r3, [r4, #12]
 80037c8:	d106      	bne.n	80037d8 <__sflush_r+0x60>
 80037ca:	6829      	ldr	r1, [r5, #0]
 80037cc:	291d      	cmp	r1, #29
 80037ce:	d82b      	bhi.n	8003828 <__sflush_r+0xb0>
 80037d0:	4a28      	ldr	r2, [pc, #160]	@ (8003874 <__sflush_r+0xfc>)
 80037d2:	410a      	asrs	r2, r1
 80037d4:	07d6      	lsls	r6, r2, #31
 80037d6:	d427      	bmi.n	8003828 <__sflush_r+0xb0>
 80037d8:	2200      	movs	r2, #0
 80037da:	6062      	str	r2, [r4, #4]
 80037dc:	6922      	ldr	r2, [r4, #16]
 80037de:	04d9      	lsls	r1, r3, #19
 80037e0:	6022      	str	r2, [r4, #0]
 80037e2:	d504      	bpl.n	80037ee <__sflush_r+0x76>
 80037e4:	1c42      	adds	r2, r0, #1
 80037e6:	d101      	bne.n	80037ec <__sflush_r+0x74>
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	b903      	cbnz	r3, 80037ee <__sflush_r+0x76>
 80037ec:	6560      	str	r0, [r4, #84]	@ 0x54
 80037ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037f0:	602f      	str	r7, [r5, #0]
 80037f2:	b1b9      	cbz	r1, 8003824 <__sflush_r+0xac>
 80037f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037f8:	4299      	cmp	r1, r3
 80037fa:	d002      	beq.n	8003802 <__sflush_r+0x8a>
 80037fc:	4628      	mov	r0, r5
 80037fe:	f001 f86f 	bl	80048e0 <_free_r>
 8003802:	2300      	movs	r3, #0
 8003804:	6363      	str	r3, [r4, #52]	@ 0x34
 8003806:	e00d      	b.n	8003824 <__sflush_r+0xac>
 8003808:	2301      	movs	r3, #1
 800380a:	4628      	mov	r0, r5
 800380c:	47b0      	blx	r6
 800380e:	4602      	mov	r2, r0
 8003810:	1c50      	adds	r0, r2, #1
 8003812:	d1c9      	bne.n	80037a8 <__sflush_r+0x30>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0c6      	beq.n	80037a8 <__sflush_r+0x30>
 800381a:	2b1d      	cmp	r3, #29
 800381c:	d001      	beq.n	8003822 <__sflush_r+0xaa>
 800381e:	2b16      	cmp	r3, #22
 8003820:	d11d      	bne.n	800385e <__sflush_r+0xe6>
 8003822:	602f      	str	r7, [r5, #0]
 8003824:	2000      	movs	r0, #0
 8003826:	e021      	b.n	800386c <__sflush_r+0xf4>
 8003828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800382c:	b21b      	sxth	r3, r3
 800382e:	e01a      	b.n	8003866 <__sflush_r+0xee>
 8003830:	690f      	ldr	r7, [r1, #16]
 8003832:	2f00      	cmp	r7, #0
 8003834:	d0f6      	beq.n	8003824 <__sflush_r+0xac>
 8003836:	0793      	lsls	r3, r2, #30
 8003838:	bf18      	it	ne
 800383a:	2300      	movne	r3, #0
 800383c:	680e      	ldr	r6, [r1, #0]
 800383e:	bf08      	it	eq
 8003840:	694b      	ldreq	r3, [r1, #20]
 8003842:	1bf6      	subs	r6, r6, r7
 8003844:	600f      	str	r7, [r1, #0]
 8003846:	608b      	str	r3, [r1, #8]
 8003848:	2e00      	cmp	r6, #0
 800384a:	ddeb      	ble.n	8003824 <__sflush_r+0xac>
 800384c:	4633      	mov	r3, r6
 800384e:	463a      	mov	r2, r7
 8003850:	4628      	mov	r0, r5
 8003852:	6a21      	ldr	r1, [r4, #32]
 8003854:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003858:	47e0      	blx	ip
 800385a:	2800      	cmp	r0, #0
 800385c:	dc07      	bgt.n	800386e <__sflush_r+0xf6>
 800385e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003866:	f04f 30ff 	mov.w	r0, #4294967295
 800386a:	81a3      	strh	r3, [r4, #12]
 800386c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800386e:	4407      	add	r7, r0
 8003870:	1a36      	subs	r6, r6, r0
 8003872:	e7e9      	b.n	8003848 <__sflush_r+0xd0>
 8003874:	dfbffffe 	.word	0xdfbffffe

08003878 <_fflush_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	690b      	ldr	r3, [r1, #16]
 800387c:	4605      	mov	r5, r0
 800387e:	460c      	mov	r4, r1
 8003880:	b913      	cbnz	r3, 8003888 <_fflush_r+0x10>
 8003882:	2500      	movs	r5, #0
 8003884:	4628      	mov	r0, r5
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	b118      	cbz	r0, 8003892 <_fflush_r+0x1a>
 800388a:	6a03      	ldr	r3, [r0, #32]
 800388c:	b90b      	cbnz	r3, 8003892 <_fflush_r+0x1a>
 800388e:	f000 f8bb 	bl	8003a08 <__sinit>
 8003892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f3      	beq.n	8003882 <_fflush_r+0xa>
 800389a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800389c:	07d0      	lsls	r0, r2, #31
 800389e:	d404      	bmi.n	80038aa <_fflush_r+0x32>
 80038a0:	0599      	lsls	r1, r3, #22
 80038a2:	d402      	bmi.n	80038aa <_fflush_r+0x32>
 80038a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038a6:	f000 f9b8 	bl	8003c1a <__retarget_lock_acquire_recursive>
 80038aa:	4628      	mov	r0, r5
 80038ac:	4621      	mov	r1, r4
 80038ae:	f7ff ff63 	bl	8003778 <__sflush_r>
 80038b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038b4:	4605      	mov	r5, r0
 80038b6:	07da      	lsls	r2, r3, #31
 80038b8:	d4e4      	bmi.n	8003884 <_fflush_r+0xc>
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	059b      	lsls	r3, r3, #22
 80038be:	d4e1      	bmi.n	8003884 <_fflush_r+0xc>
 80038c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038c2:	f000 f9ab 	bl	8003c1c <__retarget_lock_release_recursive>
 80038c6:	e7dd      	b.n	8003884 <_fflush_r+0xc>

080038c8 <fflush>:
 80038c8:	4601      	mov	r1, r0
 80038ca:	b920      	cbnz	r0, 80038d6 <fflush+0xe>
 80038cc:	4a04      	ldr	r2, [pc, #16]	@ (80038e0 <fflush+0x18>)
 80038ce:	4905      	ldr	r1, [pc, #20]	@ (80038e4 <fflush+0x1c>)
 80038d0:	4805      	ldr	r0, [pc, #20]	@ (80038e8 <fflush+0x20>)
 80038d2:	f000 b8b1 	b.w	8003a38 <_fwalk_sglue>
 80038d6:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <fflush+0x24>)
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	f7ff bfcd 	b.w	8003878 <_fflush_r>
 80038de:	bf00      	nop
 80038e0:	2000000c 	.word	0x2000000c
 80038e4:	08003879 	.word	0x08003879
 80038e8:	2000001c 	.word	0x2000001c
 80038ec:	20000018 	.word	0x20000018

080038f0 <std>:
 80038f0:	2300      	movs	r3, #0
 80038f2:	b510      	push	{r4, lr}
 80038f4:	4604      	mov	r4, r0
 80038f6:	e9c0 3300 	strd	r3, r3, [r0]
 80038fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038fe:	6083      	str	r3, [r0, #8]
 8003900:	8181      	strh	r1, [r0, #12]
 8003902:	6643      	str	r3, [r0, #100]	@ 0x64
 8003904:	81c2      	strh	r2, [r0, #14]
 8003906:	6183      	str	r3, [r0, #24]
 8003908:	4619      	mov	r1, r3
 800390a:	2208      	movs	r2, #8
 800390c:	305c      	adds	r0, #92	@ 0x5c
 800390e:	f000 f906 	bl	8003b1e <memset>
 8003912:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <std+0x58>)
 8003914:	6224      	str	r4, [r4, #32]
 8003916:	6263      	str	r3, [r4, #36]	@ 0x24
 8003918:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <std+0x5c>)
 800391a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800391c:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <std+0x60>)
 800391e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003920:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <std+0x64>)
 8003922:	6323      	str	r3, [r4, #48]	@ 0x30
 8003924:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <std+0x68>)
 8003926:	429c      	cmp	r4, r3
 8003928:	d006      	beq.n	8003938 <std+0x48>
 800392a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800392e:	4294      	cmp	r4, r2
 8003930:	d002      	beq.n	8003938 <std+0x48>
 8003932:	33d0      	adds	r3, #208	@ 0xd0
 8003934:	429c      	cmp	r4, r3
 8003936:	d105      	bne.n	8003944 <std+0x54>
 8003938:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800393c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003940:	f000 b96a 	b.w	8003c18 <__retarget_lock_init_recursive>
 8003944:	bd10      	pop	{r4, pc}
 8003946:	bf00      	nop
 8003948:	08003a99 	.word	0x08003a99
 800394c:	08003abb 	.word	0x08003abb
 8003950:	08003af3 	.word	0x08003af3
 8003954:	08003b17 	.word	0x08003b17
 8003958:	20000228 	.word	0x20000228

0800395c <stdio_exit_handler>:
 800395c:	4a02      	ldr	r2, [pc, #8]	@ (8003968 <stdio_exit_handler+0xc>)
 800395e:	4903      	ldr	r1, [pc, #12]	@ (800396c <stdio_exit_handler+0x10>)
 8003960:	4803      	ldr	r0, [pc, #12]	@ (8003970 <stdio_exit_handler+0x14>)
 8003962:	f000 b869 	b.w	8003a38 <_fwalk_sglue>
 8003966:	bf00      	nop
 8003968:	2000000c 	.word	0x2000000c
 800396c:	08003879 	.word	0x08003879
 8003970:	2000001c 	.word	0x2000001c

08003974 <cleanup_stdio>:
 8003974:	6841      	ldr	r1, [r0, #4]
 8003976:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <cleanup_stdio+0x34>)
 8003978:	b510      	push	{r4, lr}
 800397a:	4299      	cmp	r1, r3
 800397c:	4604      	mov	r4, r0
 800397e:	d001      	beq.n	8003984 <cleanup_stdio+0x10>
 8003980:	f7ff ff7a 	bl	8003878 <_fflush_r>
 8003984:	68a1      	ldr	r1, [r4, #8]
 8003986:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <cleanup_stdio+0x38>)
 8003988:	4299      	cmp	r1, r3
 800398a:	d002      	beq.n	8003992 <cleanup_stdio+0x1e>
 800398c:	4620      	mov	r0, r4
 800398e:	f7ff ff73 	bl	8003878 <_fflush_r>
 8003992:	68e1      	ldr	r1, [r4, #12]
 8003994:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <cleanup_stdio+0x3c>)
 8003996:	4299      	cmp	r1, r3
 8003998:	d004      	beq.n	80039a4 <cleanup_stdio+0x30>
 800399a:	4620      	mov	r0, r4
 800399c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039a0:	f7ff bf6a 	b.w	8003878 <_fflush_r>
 80039a4:	bd10      	pop	{r4, pc}
 80039a6:	bf00      	nop
 80039a8:	20000228 	.word	0x20000228
 80039ac:	20000290 	.word	0x20000290
 80039b0:	200002f8 	.word	0x200002f8

080039b4 <global_stdio_init.part.0>:
 80039b4:	b510      	push	{r4, lr}
 80039b6:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <global_stdio_init.part.0+0x30>)
 80039b8:	4c0b      	ldr	r4, [pc, #44]	@ (80039e8 <global_stdio_init.part.0+0x34>)
 80039ba:	4a0c      	ldr	r2, [pc, #48]	@ (80039ec <global_stdio_init.part.0+0x38>)
 80039bc:	4620      	mov	r0, r4
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	2104      	movs	r1, #4
 80039c2:	2200      	movs	r2, #0
 80039c4:	f7ff ff94 	bl	80038f0 <std>
 80039c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80039cc:	2201      	movs	r2, #1
 80039ce:	2109      	movs	r1, #9
 80039d0:	f7ff ff8e 	bl	80038f0 <std>
 80039d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80039d8:	2202      	movs	r2, #2
 80039da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039de:	2112      	movs	r1, #18
 80039e0:	f7ff bf86 	b.w	80038f0 <std>
 80039e4:	20000360 	.word	0x20000360
 80039e8:	20000228 	.word	0x20000228
 80039ec:	0800395d 	.word	0x0800395d

080039f0 <__sfp_lock_acquire>:
 80039f0:	4801      	ldr	r0, [pc, #4]	@ (80039f8 <__sfp_lock_acquire+0x8>)
 80039f2:	f000 b912 	b.w	8003c1a <__retarget_lock_acquire_recursive>
 80039f6:	bf00      	nop
 80039f8:	20000369 	.word	0x20000369

080039fc <__sfp_lock_release>:
 80039fc:	4801      	ldr	r0, [pc, #4]	@ (8003a04 <__sfp_lock_release+0x8>)
 80039fe:	f000 b90d 	b.w	8003c1c <__retarget_lock_release_recursive>
 8003a02:	bf00      	nop
 8003a04:	20000369 	.word	0x20000369

08003a08 <__sinit>:
 8003a08:	b510      	push	{r4, lr}
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	f7ff fff0 	bl	80039f0 <__sfp_lock_acquire>
 8003a10:	6a23      	ldr	r3, [r4, #32]
 8003a12:	b11b      	cbz	r3, 8003a1c <__sinit+0x14>
 8003a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a18:	f7ff bff0 	b.w	80039fc <__sfp_lock_release>
 8003a1c:	4b04      	ldr	r3, [pc, #16]	@ (8003a30 <__sinit+0x28>)
 8003a1e:	6223      	str	r3, [r4, #32]
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <__sinit+0x2c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f5      	bne.n	8003a14 <__sinit+0xc>
 8003a28:	f7ff ffc4 	bl	80039b4 <global_stdio_init.part.0>
 8003a2c:	e7f2      	b.n	8003a14 <__sinit+0xc>
 8003a2e:	bf00      	nop
 8003a30:	08003975 	.word	0x08003975
 8003a34:	20000360 	.word	0x20000360

08003a38 <_fwalk_sglue>:
 8003a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a3c:	4607      	mov	r7, r0
 8003a3e:	4688      	mov	r8, r1
 8003a40:	4614      	mov	r4, r2
 8003a42:	2600      	movs	r6, #0
 8003a44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a48:	f1b9 0901 	subs.w	r9, r9, #1
 8003a4c:	d505      	bpl.n	8003a5a <_fwalk_sglue+0x22>
 8003a4e:	6824      	ldr	r4, [r4, #0]
 8003a50:	2c00      	cmp	r4, #0
 8003a52:	d1f7      	bne.n	8003a44 <_fwalk_sglue+0xc>
 8003a54:	4630      	mov	r0, r6
 8003a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a5a:	89ab      	ldrh	r3, [r5, #12]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d907      	bls.n	8003a70 <_fwalk_sglue+0x38>
 8003a60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a64:	3301      	adds	r3, #1
 8003a66:	d003      	beq.n	8003a70 <_fwalk_sglue+0x38>
 8003a68:	4629      	mov	r1, r5
 8003a6a:	4638      	mov	r0, r7
 8003a6c:	47c0      	blx	r8
 8003a6e:	4306      	orrs	r6, r0
 8003a70:	3568      	adds	r5, #104	@ 0x68
 8003a72:	e7e9      	b.n	8003a48 <_fwalk_sglue+0x10>

08003a74 <iprintf>:
 8003a74:	b40f      	push	{r0, r1, r2, r3}
 8003a76:	b507      	push	{r0, r1, r2, lr}
 8003a78:	4906      	ldr	r1, [pc, #24]	@ (8003a94 <iprintf+0x20>)
 8003a7a:	ab04      	add	r3, sp, #16
 8003a7c:	6808      	ldr	r0, [r1, #0]
 8003a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a82:	6881      	ldr	r1, [r0, #8]
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	f001 fbd1 	bl	800522c <_vfiprintf_r>
 8003a8a:	b003      	add	sp, #12
 8003a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a90:	b004      	add	sp, #16
 8003a92:	4770      	bx	lr
 8003a94:	20000018 	.word	0x20000018

08003a98 <__sread>:
 8003a98:	b510      	push	{r4, lr}
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa0:	f000 f86c 	bl	8003b7c <_read_r>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	bfab      	itete	ge
 8003aa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8003aac:	181b      	addge	r3, r3, r0
 8003aae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ab2:	bfac      	ite	ge
 8003ab4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ab6:	81a3      	strhlt	r3, [r4, #12]
 8003ab8:	bd10      	pop	{r4, pc}

08003aba <__swrite>:
 8003aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003abe:	461f      	mov	r7, r3
 8003ac0:	898b      	ldrh	r3, [r1, #12]
 8003ac2:	4605      	mov	r5, r0
 8003ac4:	05db      	lsls	r3, r3, #23
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	4616      	mov	r6, r2
 8003aca:	d505      	bpl.n	8003ad8 <__swrite+0x1e>
 8003acc:	2302      	movs	r3, #2
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ad4:	f000 f840 	bl	8003b58 <_lseek_r>
 8003ad8:	89a3      	ldrh	r3, [r4, #12]
 8003ada:	4632      	mov	r2, r6
 8003adc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ae0:	81a3      	strh	r3, [r4, #12]
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	463b      	mov	r3, r7
 8003ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aee:	f000 b857 	b.w	8003ba0 <_write_r>

08003af2 <__sseek>:
 8003af2:	b510      	push	{r4, lr}
 8003af4:	460c      	mov	r4, r1
 8003af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003afa:	f000 f82d 	bl	8003b58 <_lseek_r>
 8003afe:	1c43      	adds	r3, r0, #1
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	bf15      	itete	ne
 8003b04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b0e:	81a3      	strheq	r3, [r4, #12]
 8003b10:	bf18      	it	ne
 8003b12:	81a3      	strhne	r3, [r4, #12]
 8003b14:	bd10      	pop	{r4, pc}

08003b16 <__sclose>:
 8003b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b1a:	f000 b80d 	b.w	8003b38 <_close_r>

08003b1e <memset>:
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4402      	add	r2, r0
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d100      	bne.n	8003b28 <memset+0xa>
 8003b26:	4770      	bx	lr
 8003b28:	f803 1b01 	strb.w	r1, [r3], #1
 8003b2c:	e7f9      	b.n	8003b22 <memset+0x4>
	...

08003b30 <_localeconv_r>:
 8003b30:	4800      	ldr	r0, [pc, #0]	@ (8003b34 <_localeconv_r+0x4>)
 8003b32:	4770      	bx	lr
 8003b34:	20000158 	.word	0x20000158

08003b38 <_close_r>:
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	4d05      	ldr	r5, [pc, #20]	@ (8003b54 <_close_r+0x1c>)
 8003b3e:	4604      	mov	r4, r0
 8003b40:	4608      	mov	r0, r1
 8003b42:	602b      	str	r3, [r5, #0]
 8003b44:	f7fd fc5b 	bl	80013fe <_close>
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d102      	bne.n	8003b52 <_close_r+0x1a>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	b103      	cbz	r3, 8003b52 <_close_r+0x1a>
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
 8003b54:	20000364 	.word	0x20000364

08003b58 <_lseek_r>:
 8003b58:	b538      	push	{r3, r4, r5, lr}
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	2200      	movs	r2, #0
 8003b62:	4d05      	ldr	r5, [pc, #20]	@ (8003b78 <_lseek_r+0x20>)
 8003b64:	602a      	str	r2, [r5, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f7fd fc6d 	bl	8001446 <_lseek>
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	d102      	bne.n	8003b76 <_lseek_r+0x1e>
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	b103      	cbz	r3, 8003b76 <_lseek_r+0x1e>
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
 8003b78:	20000364 	.word	0x20000364

08003b7c <_read_r>:
 8003b7c:	b538      	push	{r3, r4, r5, lr}
 8003b7e:	4604      	mov	r4, r0
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	2200      	movs	r2, #0
 8003b86:	4d05      	ldr	r5, [pc, #20]	@ (8003b9c <_read_r+0x20>)
 8003b88:	602a      	str	r2, [r5, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f7fd fbfe 	bl	800138c <_read>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d102      	bne.n	8003b9a <_read_r+0x1e>
 8003b94:	682b      	ldr	r3, [r5, #0]
 8003b96:	b103      	cbz	r3, 8003b9a <_read_r+0x1e>
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	20000364 	.word	0x20000364

08003ba0 <_write_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	2200      	movs	r2, #0
 8003baa:	4d05      	ldr	r5, [pc, #20]	@ (8003bc0 <_write_r+0x20>)
 8003bac:	602a      	str	r2, [r5, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f7fd fc09 	bl	80013c6 <_write>
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	d102      	bne.n	8003bbe <_write_r+0x1e>
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	b103      	cbz	r3, 8003bbe <_write_r+0x1e>
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	bd38      	pop	{r3, r4, r5, pc}
 8003bc0:	20000364 	.word	0x20000364

08003bc4 <__errno>:
 8003bc4:	4b01      	ldr	r3, [pc, #4]	@ (8003bcc <__errno+0x8>)
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000018 	.word	0x20000018

08003bd0 <__libc_init_array>:
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	2600      	movs	r6, #0
 8003bd4:	4d0c      	ldr	r5, [pc, #48]	@ (8003c08 <__libc_init_array+0x38>)
 8003bd6:	4c0d      	ldr	r4, [pc, #52]	@ (8003c0c <__libc_init_array+0x3c>)
 8003bd8:	1b64      	subs	r4, r4, r5
 8003bda:	10a4      	asrs	r4, r4, #2
 8003bdc:	42a6      	cmp	r6, r4
 8003bde:	d109      	bne.n	8003bf4 <__libc_init_array+0x24>
 8003be0:	f001 fe22 	bl	8005828 <_init>
 8003be4:	2600      	movs	r6, #0
 8003be6:	4d0a      	ldr	r5, [pc, #40]	@ (8003c10 <__libc_init_array+0x40>)
 8003be8:	4c0a      	ldr	r4, [pc, #40]	@ (8003c14 <__libc_init_array+0x44>)
 8003bea:	1b64      	subs	r4, r4, r5
 8003bec:	10a4      	asrs	r4, r4, #2
 8003bee:	42a6      	cmp	r6, r4
 8003bf0:	d105      	bne.n	8003bfe <__libc_init_array+0x2e>
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
 8003bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf8:	4798      	blx	r3
 8003bfa:	3601      	adds	r6, #1
 8003bfc:	e7ee      	b.n	8003bdc <__libc_init_array+0xc>
 8003bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c02:	4798      	blx	r3
 8003c04:	3601      	adds	r6, #1
 8003c06:	e7f2      	b.n	8003bee <__libc_init_array+0x1e>
 8003c08:	08005c08 	.word	0x08005c08
 8003c0c:	08005c08 	.word	0x08005c08
 8003c10:	08005c08 	.word	0x08005c08
 8003c14:	08005c0c 	.word	0x08005c0c

08003c18 <__retarget_lock_init_recursive>:
 8003c18:	4770      	bx	lr

08003c1a <__retarget_lock_acquire_recursive>:
 8003c1a:	4770      	bx	lr

08003c1c <__retarget_lock_release_recursive>:
 8003c1c:	4770      	bx	lr

08003c1e <memchr>:
 8003c1e:	4603      	mov	r3, r0
 8003c20:	b510      	push	{r4, lr}
 8003c22:	b2c9      	uxtb	r1, r1
 8003c24:	4402      	add	r2, r0
 8003c26:	4293      	cmp	r3, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	d101      	bne.n	8003c30 <memchr+0x12>
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	e003      	b.n	8003c38 <memchr+0x1a>
 8003c30:	7804      	ldrb	r4, [r0, #0]
 8003c32:	3301      	adds	r3, #1
 8003c34:	428c      	cmp	r4, r1
 8003c36:	d1f6      	bne.n	8003c26 <memchr+0x8>
 8003c38:	bd10      	pop	{r4, pc}

08003c3a <quorem>:
 8003c3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3e:	6903      	ldr	r3, [r0, #16]
 8003c40:	690c      	ldr	r4, [r1, #16]
 8003c42:	4607      	mov	r7, r0
 8003c44:	42a3      	cmp	r3, r4
 8003c46:	db7e      	blt.n	8003d46 <quorem+0x10c>
 8003c48:	3c01      	subs	r4, #1
 8003c4a:	00a3      	lsls	r3, r4, #2
 8003c4c:	f100 0514 	add.w	r5, r0, #20
 8003c50:	f101 0814 	add.w	r8, r1, #20
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003c60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c64:	3301      	adds	r3, #1
 8003c66:	429a      	cmp	r2, r3
 8003c68:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c70:	d32e      	bcc.n	8003cd0 <quorem+0x96>
 8003c72:	f04f 0a00 	mov.w	sl, #0
 8003c76:	46c4      	mov	ip, r8
 8003c78:	46ae      	mov	lr, r5
 8003c7a:	46d3      	mov	fp, sl
 8003c7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003c80:	b298      	uxth	r0, r3
 8003c82:	fb06 a000 	mla	r0, r6, r0, sl
 8003c86:	0c1b      	lsrs	r3, r3, #16
 8003c88:	0c02      	lsrs	r2, r0, #16
 8003c8a:	fb06 2303 	mla	r3, r6, r3, r2
 8003c8e:	f8de 2000 	ldr.w	r2, [lr]
 8003c92:	b280      	uxth	r0, r0
 8003c94:	b292      	uxth	r2, r2
 8003c96:	1a12      	subs	r2, r2, r0
 8003c98:	445a      	add	r2, fp
 8003c9a:	f8de 0000 	ldr.w	r0, [lr]
 8003c9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003ca8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003cac:	b292      	uxth	r2, r2
 8003cae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003cb2:	45e1      	cmp	r9, ip
 8003cb4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003cb8:	f84e 2b04 	str.w	r2, [lr], #4
 8003cbc:	d2de      	bcs.n	8003c7c <quorem+0x42>
 8003cbe:	9b00      	ldr	r3, [sp, #0]
 8003cc0:	58eb      	ldr	r3, [r5, r3]
 8003cc2:	b92b      	cbnz	r3, 8003cd0 <quorem+0x96>
 8003cc4:	9b01      	ldr	r3, [sp, #4]
 8003cc6:	3b04      	subs	r3, #4
 8003cc8:	429d      	cmp	r5, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	d32f      	bcc.n	8003d2e <quorem+0xf4>
 8003cce:	613c      	str	r4, [r7, #16]
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	f001 f97b 	bl	8004fcc <__mcmp>
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	db25      	blt.n	8003d26 <quorem+0xec>
 8003cda:	4629      	mov	r1, r5
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f858 2b04 	ldr.w	r2, [r8], #4
 8003ce2:	f8d1 c000 	ldr.w	ip, [r1]
 8003ce6:	fa1f fe82 	uxth.w	lr, r2
 8003cea:	fa1f f38c 	uxth.w	r3, ip
 8003cee:	eba3 030e 	sub.w	r3, r3, lr
 8003cf2:	4403      	add	r3, r0
 8003cf4:	0c12      	lsrs	r2, r2, #16
 8003cf6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003cfa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d04:	45c1      	cmp	r9, r8
 8003d06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003d0a:	f841 3b04 	str.w	r3, [r1], #4
 8003d0e:	d2e6      	bcs.n	8003cde <quorem+0xa4>
 8003d10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d18:	b922      	cbnz	r2, 8003d24 <quorem+0xea>
 8003d1a:	3b04      	subs	r3, #4
 8003d1c:	429d      	cmp	r5, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	d30b      	bcc.n	8003d3a <quorem+0x100>
 8003d22:	613c      	str	r4, [r7, #16]
 8003d24:	3601      	adds	r6, #1
 8003d26:	4630      	mov	r0, r6
 8003d28:	b003      	add	sp, #12
 8003d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	3b04      	subs	r3, #4
 8003d32:	2a00      	cmp	r2, #0
 8003d34:	d1cb      	bne.n	8003cce <quorem+0x94>
 8003d36:	3c01      	subs	r4, #1
 8003d38:	e7c6      	b.n	8003cc8 <quorem+0x8e>
 8003d3a:	6812      	ldr	r2, [r2, #0]
 8003d3c:	3b04      	subs	r3, #4
 8003d3e:	2a00      	cmp	r2, #0
 8003d40:	d1ef      	bne.n	8003d22 <quorem+0xe8>
 8003d42:	3c01      	subs	r4, #1
 8003d44:	e7ea      	b.n	8003d1c <quorem+0xe2>
 8003d46:	2000      	movs	r0, #0
 8003d48:	e7ee      	b.n	8003d28 <quorem+0xee>
 8003d4a:	0000      	movs	r0, r0
 8003d4c:	0000      	movs	r0, r0
	...

08003d50 <_dtoa_r>:
 8003d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d54:	4614      	mov	r4, r2
 8003d56:	461d      	mov	r5, r3
 8003d58:	69c7      	ldr	r7, [r0, #28]
 8003d5a:	b097      	sub	sp, #92	@ 0x5c
 8003d5c:	4683      	mov	fp, r0
 8003d5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003d62:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003d64:	b97f      	cbnz	r7, 8003d86 <_dtoa_r+0x36>
 8003d66:	2010      	movs	r0, #16
 8003d68:	f000 fe02 	bl	8004970 <malloc>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	f8cb 001c 	str.w	r0, [fp, #28]
 8003d72:	b920      	cbnz	r0, 8003d7e <_dtoa_r+0x2e>
 8003d74:	21ef      	movs	r1, #239	@ 0xef
 8003d76:	4ba8      	ldr	r3, [pc, #672]	@ (8004018 <_dtoa_r+0x2c8>)
 8003d78:	48a8      	ldr	r0, [pc, #672]	@ (800401c <_dtoa_r+0x2cc>)
 8003d7a:	f001 fc21 	bl	80055c0 <__assert_func>
 8003d7e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003d82:	6007      	str	r7, [r0, #0]
 8003d84:	60c7      	str	r7, [r0, #12]
 8003d86:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003d8a:	6819      	ldr	r1, [r3, #0]
 8003d8c:	b159      	cbz	r1, 8003da6 <_dtoa_r+0x56>
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	2301      	movs	r3, #1
 8003d92:	4093      	lsls	r3, r2
 8003d94:	604a      	str	r2, [r1, #4]
 8003d96:	608b      	str	r3, [r1, #8]
 8003d98:	4658      	mov	r0, fp
 8003d9a:	f000 fedf 	bl	8004b5c <_Bfree>
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	1e2b      	subs	r3, r5, #0
 8003da8:	bfaf      	iteee	ge
 8003daa:	2300      	movge	r3, #0
 8003dac:	2201      	movlt	r2, #1
 8003dae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003db2:	9303      	strlt	r3, [sp, #12]
 8003db4:	bfa8      	it	ge
 8003db6:	6033      	strge	r3, [r6, #0]
 8003db8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003dbc:	4b98      	ldr	r3, [pc, #608]	@ (8004020 <_dtoa_r+0x2d0>)
 8003dbe:	bfb8      	it	lt
 8003dc0:	6032      	strlt	r2, [r6, #0]
 8003dc2:	ea33 0308 	bics.w	r3, r3, r8
 8003dc6:	d112      	bne.n	8003dee <_dtoa_r+0x9e>
 8003dc8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003dcc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003dd4:	4323      	orrs	r3, r4
 8003dd6:	f000 8550 	beq.w	800487a <_dtoa_r+0xb2a>
 8003dda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003ddc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004024 <_dtoa_r+0x2d4>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 8552 	beq.w	800488a <_dtoa_r+0xb3a>
 8003de6:	f10a 0303 	add.w	r3, sl, #3
 8003dea:	f000 bd4c 	b.w	8004886 <_dtoa_r+0xb36>
 8003dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003df2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f7fc fdd3 	bl	80009a8 <__aeabi_dcmpeq>
 8003e02:	4607      	mov	r7, r0
 8003e04:	b158      	cbz	r0, 8003e1e <_dtoa_r+0xce>
 8003e06:	2301      	movs	r3, #1
 8003e08:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003e0e:	b113      	cbz	r3, 8003e16 <_dtoa_r+0xc6>
 8003e10:	4b85      	ldr	r3, [pc, #532]	@ (8004028 <_dtoa_r+0x2d8>)
 8003e12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800402c <_dtoa_r+0x2dc>
 8003e1a:	f000 bd36 	b.w	800488a <_dtoa_r+0xb3a>
 8003e1e:	ab14      	add	r3, sp, #80	@ 0x50
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	ab15      	add	r3, sp, #84	@ 0x54
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	4658      	mov	r0, fp
 8003e28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003e2c:	f001 f97e 	bl	800512c <__d2b>
 8003e30:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003e34:	4681      	mov	r9, r0
 8003e36:	2e00      	cmp	r6, #0
 8003e38:	d077      	beq.n	8003f2a <_dtoa_r+0x1da>
 8003e3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e40:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e48:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003e4c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003e50:	9712      	str	r7, [sp, #72]	@ 0x48
 8003e52:	4619      	mov	r1, r3
 8003e54:	2200      	movs	r2, #0
 8003e56:	4b76      	ldr	r3, [pc, #472]	@ (8004030 <_dtoa_r+0x2e0>)
 8003e58:	f7fc f986 	bl	8000168 <__aeabi_dsub>
 8003e5c:	a368      	add	r3, pc, #416	@ (adr r3, 8004000 <_dtoa_r+0x2b0>)
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	f7fc fb39 	bl	80004d8 <__aeabi_dmul>
 8003e66:	a368      	add	r3, pc, #416	@ (adr r3, 8004008 <_dtoa_r+0x2b8>)
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f7fc f97e 	bl	800016c <__adddf3>
 8003e70:	4604      	mov	r4, r0
 8003e72:	4630      	mov	r0, r6
 8003e74:	460d      	mov	r5, r1
 8003e76:	f7fc fac5 	bl	8000404 <__aeabi_i2d>
 8003e7a:	a365      	add	r3, pc, #404	@ (adr r3, 8004010 <_dtoa_r+0x2c0>)
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f7fc fb2a 	bl	80004d8 <__aeabi_dmul>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4620      	mov	r0, r4
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	f7fc f96e 	bl	800016c <__adddf3>
 8003e90:	4604      	mov	r4, r0
 8003e92:	460d      	mov	r5, r1
 8003e94:	f7fc fdd0 	bl	8000a38 <__aeabi_d2iz>
 8003e98:	2200      	movs	r2, #0
 8003e9a:	4607      	mov	r7, r0
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	f7fc fd8b 	bl	80009bc <__aeabi_dcmplt>
 8003ea6:	b140      	cbz	r0, 8003eba <_dtoa_r+0x16a>
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	f7fc faab 	bl	8000404 <__aeabi_i2d>
 8003eae:	4622      	mov	r2, r4
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	f7fc fd79 	bl	80009a8 <__aeabi_dcmpeq>
 8003eb6:	b900      	cbnz	r0, 8003eba <_dtoa_r+0x16a>
 8003eb8:	3f01      	subs	r7, #1
 8003eba:	2f16      	cmp	r7, #22
 8003ebc:	d853      	bhi.n	8003f66 <_dtoa_r+0x216>
 8003ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ec2:	4b5c      	ldr	r3, [pc, #368]	@ (8004034 <_dtoa_r+0x2e4>)
 8003ec4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f7fc fd76 	bl	80009bc <__aeabi_dcmplt>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d04a      	beq.n	8003f6a <_dtoa_r+0x21a>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	3f01      	subs	r7, #1
 8003ed8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003eda:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003edc:	1b9b      	subs	r3, r3, r6
 8003ede:	1e5a      	subs	r2, r3, #1
 8003ee0:	bf46      	itte	mi
 8003ee2:	f1c3 0801 	rsbmi	r8, r3, #1
 8003ee6:	2300      	movmi	r3, #0
 8003ee8:	f04f 0800 	movpl.w	r8, #0
 8003eec:	9209      	str	r2, [sp, #36]	@ 0x24
 8003eee:	bf48      	it	mi
 8003ef0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003ef2:	2f00      	cmp	r7, #0
 8003ef4:	db3b      	blt.n	8003f6e <_dtoa_r+0x21e>
 8003ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ef8:	970e      	str	r7, [sp, #56]	@ 0x38
 8003efa:	443b      	add	r3, r7
 8003efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003efe:	2300      	movs	r3, #0
 8003f00:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003f04:	2b09      	cmp	r3, #9
 8003f06:	d866      	bhi.n	8003fd6 <_dtoa_r+0x286>
 8003f08:	2b05      	cmp	r3, #5
 8003f0a:	bfc4      	itt	gt
 8003f0c:	3b04      	subgt	r3, #4
 8003f0e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003f10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003f12:	bfc8      	it	gt
 8003f14:	2400      	movgt	r4, #0
 8003f16:	f1a3 0302 	sub.w	r3, r3, #2
 8003f1a:	bfd8      	it	le
 8003f1c:	2401      	movle	r4, #1
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d864      	bhi.n	8003fec <_dtoa_r+0x29c>
 8003f22:	e8df f003 	tbb	[pc, r3]
 8003f26:	382b      	.short	0x382b
 8003f28:	5636      	.short	0x5636
 8003f2a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003f2e:	441e      	add	r6, r3
 8003f30:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	bfc1      	itttt	gt
 8003f38:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003f3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003f40:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003f44:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003f48:	bfd6      	itet	le
 8003f4a:	f1c3 0320 	rsble	r3, r3, #32
 8003f4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8003f52:	fa04 f003 	lslle.w	r0, r4, r3
 8003f56:	f7fc fa45 	bl	80003e4 <__aeabi_ui2d>
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003f60:	3e01      	subs	r6, #1
 8003f62:	9212      	str	r2, [sp, #72]	@ 0x48
 8003f64:	e775      	b.n	8003e52 <_dtoa_r+0x102>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e7b6      	b.n	8003ed8 <_dtoa_r+0x188>
 8003f6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003f6c:	e7b5      	b.n	8003eda <_dtoa_r+0x18a>
 8003f6e:	427b      	negs	r3, r7
 8003f70:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f72:	2300      	movs	r3, #0
 8003f74:	eba8 0807 	sub.w	r8, r8, r7
 8003f78:	930e      	str	r3, [sp, #56]	@ 0x38
 8003f7a:	e7c2      	b.n	8003f02 <_dtoa_r+0x1b2>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	dc35      	bgt.n	8003ff2 <_dtoa_r+0x2a2>
 8003f86:	2301      	movs	r3, #1
 8003f88:	461a      	mov	r2, r3
 8003f8a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003f8e:	9221      	str	r2, [sp, #132]	@ 0x84
 8003f90:	e00b      	b.n	8003faa <_dtoa_r+0x25a>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e7f3      	b.n	8003f7e <_dtoa_r+0x22e>
 8003f96:	2300      	movs	r3, #0
 8003f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	9308      	str	r3, [sp, #32]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	9307      	str	r3, [sp, #28]
 8003fa6:	bfb8      	it	lt
 8003fa8:	2301      	movlt	r3, #1
 8003faa:	2100      	movs	r1, #0
 8003fac:	2204      	movs	r2, #4
 8003fae:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003fb2:	f102 0514 	add.w	r5, r2, #20
 8003fb6:	429d      	cmp	r5, r3
 8003fb8:	d91f      	bls.n	8003ffa <_dtoa_r+0x2aa>
 8003fba:	6041      	str	r1, [r0, #4]
 8003fbc:	4658      	mov	r0, fp
 8003fbe:	f000 fd8d 	bl	8004adc <_Balloc>
 8003fc2:	4682      	mov	sl, r0
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d139      	bne.n	800403c <_dtoa_r+0x2ec>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	f240 11af 	movw	r1, #431	@ 0x1af
 8003fce:	4b1a      	ldr	r3, [pc, #104]	@ (8004038 <_dtoa_r+0x2e8>)
 8003fd0:	e6d2      	b.n	8003d78 <_dtoa_r+0x28>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e7e0      	b.n	8003f98 <_dtoa_r+0x248>
 8003fd6:	2401      	movs	r4, #1
 8003fd8:	2300      	movs	r3, #0
 8003fda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003fdc:	9320      	str	r3, [sp, #128]	@ 0x80
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003fe8:	2312      	movs	r3, #18
 8003fea:	e7d0      	b.n	8003f8e <_dtoa_r+0x23e>
 8003fec:	2301      	movs	r3, #1
 8003fee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ff0:	e7f5      	b.n	8003fde <_dtoa_r+0x28e>
 8003ff2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003ff4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003ff8:	e7d7      	b.n	8003faa <_dtoa_r+0x25a>
 8003ffa:	3101      	adds	r1, #1
 8003ffc:	0052      	lsls	r2, r2, #1
 8003ffe:	e7d8      	b.n	8003fb2 <_dtoa_r+0x262>
 8004000:	636f4361 	.word	0x636f4361
 8004004:	3fd287a7 	.word	0x3fd287a7
 8004008:	8b60c8b3 	.word	0x8b60c8b3
 800400c:	3fc68a28 	.word	0x3fc68a28
 8004010:	509f79fb 	.word	0x509f79fb
 8004014:	3fd34413 	.word	0x3fd34413
 8004018:	080058d3 	.word	0x080058d3
 800401c:	080058ea 	.word	0x080058ea
 8004020:	7ff00000 	.word	0x7ff00000
 8004024:	080058cf 	.word	0x080058cf
 8004028:	080058a3 	.word	0x080058a3
 800402c:	080058a2 	.word	0x080058a2
 8004030:	3ff80000 	.word	0x3ff80000
 8004034:	080059e0 	.word	0x080059e0
 8004038:	08005942 	.word	0x08005942
 800403c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004040:	6018      	str	r0, [r3, #0]
 8004042:	9b07      	ldr	r3, [sp, #28]
 8004044:	2b0e      	cmp	r3, #14
 8004046:	f200 80a4 	bhi.w	8004192 <_dtoa_r+0x442>
 800404a:	2c00      	cmp	r4, #0
 800404c:	f000 80a1 	beq.w	8004192 <_dtoa_r+0x442>
 8004050:	2f00      	cmp	r7, #0
 8004052:	dd33      	ble.n	80040bc <_dtoa_r+0x36c>
 8004054:	4b86      	ldr	r3, [pc, #536]	@ (8004270 <_dtoa_r+0x520>)
 8004056:	f007 020f 	and.w	r2, r7, #15
 800405a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800405e:	05f8      	lsls	r0, r7, #23
 8004060:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004064:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004068:	ea4f 1427 	mov.w	r4, r7, asr #4
 800406c:	d516      	bpl.n	800409c <_dtoa_r+0x34c>
 800406e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004072:	4b80      	ldr	r3, [pc, #512]	@ (8004274 <_dtoa_r+0x524>)
 8004074:	2603      	movs	r6, #3
 8004076:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800407a:	f7fc fb57 	bl	800072c <__aeabi_ddiv>
 800407e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004082:	f004 040f 	and.w	r4, r4, #15
 8004086:	4d7b      	ldr	r5, [pc, #492]	@ (8004274 <_dtoa_r+0x524>)
 8004088:	b954      	cbnz	r4, 80040a0 <_dtoa_r+0x350>
 800408a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800408e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004092:	f7fc fb4b 	bl	800072c <__aeabi_ddiv>
 8004096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800409a:	e028      	b.n	80040ee <_dtoa_r+0x39e>
 800409c:	2602      	movs	r6, #2
 800409e:	e7f2      	b.n	8004086 <_dtoa_r+0x336>
 80040a0:	07e1      	lsls	r1, r4, #31
 80040a2:	d508      	bpl.n	80040b6 <_dtoa_r+0x366>
 80040a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80040ac:	f7fc fa14 	bl	80004d8 <__aeabi_dmul>
 80040b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040b4:	3601      	adds	r6, #1
 80040b6:	1064      	asrs	r4, r4, #1
 80040b8:	3508      	adds	r5, #8
 80040ba:	e7e5      	b.n	8004088 <_dtoa_r+0x338>
 80040bc:	f000 80d2 	beq.w	8004264 <_dtoa_r+0x514>
 80040c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040c4:	427c      	negs	r4, r7
 80040c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004270 <_dtoa_r+0x520>)
 80040c8:	f004 020f 	and.w	r2, r4, #15
 80040cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f7fc fa00 	bl	80004d8 <__aeabi_dmul>
 80040d8:	2602      	movs	r6, #2
 80040da:	2300      	movs	r3, #0
 80040dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040e0:	4d64      	ldr	r5, [pc, #400]	@ (8004274 <_dtoa_r+0x524>)
 80040e2:	1124      	asrs	r4, r4, #4
 80040e4:	2c00      	cmp	r4, #0
 80040e6:	f040 80b2 	bne.w	800424e <_dtoa_r+0x4fe>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1d3      	bne.n	8004096 <_dtoa_r+0x346>
 80040ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80040f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 80b7 	beq.w	8004268 <_dtoa_r+0x518>
 80040fa:	2200      	movs	r2, #0
 80040fc:	4620      	mov	r0, r4
 80040fe:	4629      	mov	r1, r5
 8004100:	4b5d      	ldr	r3, [pc, #372]	@ (8004278 <_dtoa_r+0x528>)
 8004102:	f7fc fc5b 	bl	80009bc <__aeabi_dcmplt>
 8004106:	2800      	cmp	r0, #0
 8004108:	f000 80ae 	beq.w	8004268 <_dtoa_r+0x518>
 800410c:	9b07      	ldr	r3, [sp, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80aa 	beq.w	8004268 <_dtoa_r+0x518>
 8004114:	9b08      	ldr	r3, [sp, #32]
 8004116:	2b00      	cmp	r3, #0
 8004118:	dd37      	ble.n	800418a <_dtoa_r+0x43a>
 800411a:	1e7b      	subs	r3, r7, #1
 800411c:	4620      	mov	r0, r4
 800411e:	9304      	str	r3, [sp, #16]
 8004120:	2200      	movs	r2, #0
 8004122:	4629      	mov	r1, r5
 8004124:	4b55      	ldr	r3, [pc, #340]	@ (800427c <_dtoa_r+0x52c>)
 8004126:	f7fc f9d7 	bl	80004d8 <__aeabi_dmul>
 800412a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800412e:	9c08      	ldr	r4, [sp, #32]
 8004130:	3601      	adds	r6, #1
 8004132:	4630      	mov	r0, r6
 8004134:	f7fc f966 	bl	8000404 <__aeabi_i2d>
 8004138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800413c:	f7fc f9cc 	bl	80004d8 <__aeabi_dmul>
 8004140:	2200      	movs	r2, #0
 8004142:	4b4f      	ldr	r3, [pc, #316]	@ (8004280 <_dtoa_r+0x530>)
 8004144:	f7fc f812 	bl	800016c <__adddf3>
 8004148:	4605      	mov	r5, r0
 800414a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800414e:	2c00      	cmp	r4, #0
 8004150:	f040 809a 	bne.w	8004288 <_dtoa_r+0x538>
 8004154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004158:	2200      	movs	r2, #0
 800415a:	4b4a      	ldr	r3, [pc, #296]	@ (8004284 <_dtoa_r+0x534>)
 800415c:	f7fc f804 	bl	8000168 <__aeabi_dsub>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004168:	462a      	mov	r2, r5
 800416a:	4633      	mov	r3, r6
 800416c:	f7fc fc44 	bl	80009f8 <__aeabi_dcmpgt>
 8004170:	2800      	cmp	r0, #0
 8004172:	f040 828e 	bne.w	8004692 <_dtoa_r+0x942>
 8004176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800417a:	462a      	mov	r2, r5
 800417c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004180:	f7fc fc1c 	bl	80009bc <__aeabi_dcmplt>
 8004184:	2800      	cmp	r0, #0
 8004186:	f040 8127 	bne.w	80043d8 <_dtoa_r+0x688>
 800418a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800418e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004192:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004194:	2b00      	cmp	r3, #0
 8004196:	f2c0 8163 	blt.w	8004460 <_dtoa_r+0x710>
 800419a:	2f0e      	cmp	r7, #14
 800419c:	f300 8160 	bgt.w	8004460 <_dtoa_r+0x710>
 80041a0:	4b33      	ldr	r3, [pc, #204]	@ (8004270 <_dtoa_r+0x520>)
 80041a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80041a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80041ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	da03      	bge.n	80041bc <_dtoa_r+0x46c>
 80041b4:	9b07      	ldr	r3, [sp, #28]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f340 8100 	ble.w	80043bc <_dtoa_r+0x66c>
 80041bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80041c0:	4656      	mov	r6, sl
 80041c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041c6:	4620      	mov	r0, r4
 80041c8:	4629      	mov	r1, r5
 80041ca:	f7fc faaf 	bl	800072c <__aeabi_ddiv>
 80041ce:	f7fc fc33 	bl	8000a38 <__aeabi_d2iz>
 80041d2:	4680      	mov	r8, r0
 80041d4:	f7fc f916 	bl	8000404 <__aeabi_i2d>
 80041d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041dc:	f7fc f97c 	bl	80004d8 <__aeabi_dmul>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4620      	mov	r0, r4
 80041e6:	4629      	mov	r1, r5
 80041e8:	f7fb ffbe 	bl	8000168 <__aeabi_dsub>
 80041ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80041f0:	9d07      	ldr	r5, [sp, #28]
 80041f2:	f806 4b01 	strb.w	r4, [r6], #1
 80041f6:	eba6 040a 	sub.w	r4, r6, sl
 80041fa:	42a5      	cmp	r5, r4
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	f040 8116 	bne.w	8004430 <_dtoa_r+0x6e0>
 8004204:	f7fb ffb2 	bl	800016c <__adddf3>
 8004208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800420c:	4604      	mov	r4, r0
 800420e:	460d      	mov	r5, r1
 8004210:	f7fc fbf2 	bl	80009f8 <__aeabi_dcmpgt>
 8004214:	2800      	cmp	r0, #0
 8004216:	f040 80f8 	bne.w	800440a <_dtoa_r+0x6ba>
 800421a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800421e:	4620      	mov	r0, r4
 8004220:	4629      	mov	r1, r5
 8004222:	f7fc fbc1 	bl	80009a8 <__aeabi_dcmpeq>
 8004226:	b118      	cbz	r0, 8004230 <_dtoa_r+0x4e0>
 8004228:	f018 0f01 	tst.w	r8, #1
 800422c:	f040 80ed 	bne.w	800440a <_dtoa_r+0x6ba>
 8004230:	4649      	mov	r1, r9
 8004232:	4658      	mov	r0, fp
 8004234:	f000 fc92 	bl	8004b5c <_Bfree>
 8004238:	2300      	movs	r3, #0
 800423a:	7033      	strb	r3, [r6, #0]
 800423c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800423e:	3701      	adds	r7, #1
 8004240:	601f      	str	r7, [r3, #0]
 8004242:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8320 	beq.w	800488a <_dtoa_r+0xb3a>
 800424a:	601e      	str	r6, [r3, #0]
 800424c:	e31d      	b.n	800488a <_dtoa_r+0xb3a>
 800424e:	07e2      	lsls	r2, r4, #31
 8004250:	d505      	bpl.n	800425e <_dtoa_r+0x50e>
 8004252:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004256:	f7fc f93f 	bl	80004d8 <__aeabi_dmul>
 800425a:	2301      	movs	r3, #1
 800425c:	3601      	adds	r6, #1
 800425e:	1064      	asrs	r4, r4, #1
 8004260:	3508      	adds	r5, #8
 8004262:	e73f      	b.n	80040e4 <_dtoa_r+0x394>
 8004264:	2602      	movs	r6, #2
 8004266:	e742      	b.n	80040ee <_dtoa_r+0x39e>
 8004268:	9c07      	ldr	r4, [sp, #28]
 800426a:	9704      	str	r7, [sp, #16]
 800426c:	e761      	b.n	8004132 <_dtoa_r+0x3e2>
 800426e:	bf00      	nop
 8004270:	080059e0 	.word	0x080059e0
 8004274:	080059b8 	.word	0x080059b8
 8004278:	3ff00000 	.word	0x3ff00000
 800427c:	40240000 	.word	0x40240000
 8004280:	401c0000 	.word	0x401c0000
 8004284:	40140000 	.word	0x40140000
 8004288:	4b70      	ldr	r3, [pc, #448]	@ (800444c <_dtoa_r+0x6fc>)
 800428a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800428c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004290:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004294:	4454      	add	r4, sl
 8004296:	2900      	cmp	r1, #0
 8004298:	d045      	beq.n	8004326 <_dtoa_r+0x5d6>
 800429a:	2000      	movs	r0, #0
 800429c:	496c      	ldr	r1, [pc, #432]	@ (8004450 <_dtoa_r+0x700>)
 800429e:	f7fc fa45 	bl	800072c <__aeabi_ddiv>
 80042a2:	4633      	mov	r3, r6
 80042a4:	462a      	mov	r2, r5
 80042a6:	f7fb ff5f 	bl	8000168 <__aeabi_dsub>
 80042aa:	4656      	mov	r6, sl
 80042ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80042b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042b4:	f7fc fbc0 	bl	8000a38 <__aeabi_d2iz>
 80042b8:	4605      	mov	r5, r0
 80042ba:	f7fc f8a3 	bl	8000404 <__aeabi_i2d>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042c6:	f7fb ff4f 	bl	8000168 <__aeabi_dsub>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	3530      	adds	r5, #48	@ 0x30
 80042d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80042d8:	f806 5b01 	strb.w	r5, [r6], #1
 80042dc:	f7fc fb6e 	bl	80009bc <__aeabi_dcmplt>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d163      	bne.n	80043ac <_dtoa_r+0x65c>
 80042e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042e8:	2000      	movs	r0, #0
 80042ea:	495a      	ldr	r1, [pc, #360]	@ (8004454 <_dtoa_r+0x704>)
 80042ec:	f7fb ff3c 	bl	8000168 <__aeabi_dsub>
 80042f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80042f4:	f7fc fb62 	bl	80009bc <__aeabi_dcmplt>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	f040 8087 	bne.w	800440c <_dtoa_r+0x6bc>
 80042fe:	42a6      	cmp	r6, r4
 8004300:	f43f af43 	beq.w	800418a <_dtoa_r+0x43a>
 8004304:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004308:	2200      	movs	r2, #0
 800430a:	4b53      	ldr	r3, [pc, #332]	@ (8004458 <_dtoa_r+0x708>)
 800430c:	f7fc f8e4 	bl	80004d8 <__aeabi_dmul>
 8004310:	2200      	movs	r2, #0
 8004312:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800431a:	4b4f      	ldr	r3, [pc, #316]	@ (8004458 <_dtoa_r+0x708>)
 800431c:	f7fc f8dc 	bl	80004d8 <__aeabi_dmul>
 8004320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004324:	e7c4      	b.n	80042b0 <_dtoa_r+0x560>
 8004326:	4631      	mov	r1, r6
 8004328:	4628      	mov	r0, r5
 800432a:	f7fc f8d5 	bl	80004d8 <__aeabi_dmul>
 800432e:	4656      	mov	r6, sl
 8004330:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004334:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800433a:	f7fc fb7d 	bl	8000a38 <__aeabi_d2iz>
 800433e:	4605      	mov	r5, r0
 8004340:	f7fc f860 	bl	8000404 <__aeabi_i2d>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800434c:	f7fb ff0c 	bl	8000168 <__aeabi_dsub>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	3530      	adds	r5, #48	@ 0x30
 8004356:	f806 5b01 	strb.w	r5, [r6], #1
 800435a:	42a6      	cmp	r6, r4
 800435c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	d124      	bne.n	80043b0 <_dtoa_r+0x660>
 8004366:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800436a:	4b39      	ldr	r3, [pc, #228]	@ (8004450 <_dtoa_r+0x700>)
 800436c:	f7fb fefe 	bl	800016c <__adddf3>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004378:	f7fc fb3e 	bl	80009f8 <__aeabi_dcmpgt>
 800437c:	2800      	cmp	r0, #0
 800437e:	d145      	bne.n	800440c <_dtoa_r+0x6bc>
 8004380:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004384:	2000      	movs	r0, #0
 8004386:	4932      	ldr	r1, [pc, #200]	@ (8004450 <_dtoa_r+0x700>)
 8004388:	f7fb feee 	bl	8000168 <__aeabi_dsub>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004394:	f7fc fb12 	bl	80009bc <__aeabi_dcmplt>
 8004398:	2800      	cmp	r0, #0
 800439a:	f43f aef6 	beq.w	800418a <_dtoa_r+0x43a>
 800439e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80043a0:	1e73      	subs	r3, r6, #1
 80043a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80043a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80043a8:	2b30      	cmp	r3, #48	@ 0x30
 80043aa:	d0f8      	beq.n	800439e <_dtoa_r+0x64e>
 80043ac:	9f04      	ldr	r7, [sp, #16]
 80043ae:	e73f      	b.n	8004230 <_dtoa_r+0x4e0>
 80043b0:	4b29      	ldr	r3, [pc, #164]	@ (8004458 <_dtoa_r+0x708>)
 80043b2:	f7fc f891 	bl	80004d8 <__aeabi_dmul>
 80043b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043ba:	e7bc      	b.n	8004336 <_dtoa_r+0x5e6>
 80043bc:	d10c      	bne.n	80043d8 <_dtoa_r+0x688>
 80043be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043c2:	2200      	movs	r2, #0
 80043c4:	4b25      	ldr	r3, [pc, #148]	@ (800445c <_dtoa_r+0x70c>)
 80043c6:	f7fc f887 	bl	80004d8 <__aeabi_dmul>
 80043ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043ce:	f7fc fb09 	bl	80009e4 <__aeabi_dcmpge>
 80043d2:	2800      	cmp	r0, #0
 80043d4:	f000 815b 	beq.w	800468e <_dtoa_r+0x93e>
 80043d8:	2400      	movs	r4, #0
 80043da:	4625      	mov	r5, r4
 80043dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80043de:	4656      	mov	r6, sl
 80043e0:	43db      	mvns	r3, r3
 80043e2:	9304      	str	r3, [sp, #16]
 80043e4:	2700      	movs	r7, #0
 80043e6:	4621      	mov	r1, r4
 80043e8:	4658      	mov	r0, fp
 80043ea:	f000 fbb7 	bl	8004b5c <_Bfree>
 80043ee:	2d00      	cmp	r5, #0
 80043f0:	d0dc      	beq.n	80043ac <_dtoa_r+0x65c>
 80043f2:	b12f      	cbz	r7, 8004400 <_dtoa_r+0x6b0>
 80043f4:	42af      	cmp	r7, r5
 80043f6:	d003      	beq.n	8004400 <_dtoa_r+0x6b0>
 80043f8:	4639      	mov	r1, r7
 80043fa:	4658      	mov	r0, fp
 80043fc:	f000 fbae 	bl	8004b5c <_Bfree>
 8004400:	4629      	mov	r1, r5
 8004402:	4658      	mov	r0, fp
 8004404:	f000 fbaa 	bl	8004b5c <_Bfree>
 8004408:	e7d0      	b.n	80043ac <_dtoa_r+0x65c>
 800440a:	9704      	str	r7, [sp, #16]
 800440c:	4633      	mov	r3, r6
 800440e:	461e      	mov	r6, r3
 8004410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004414:	2a39      	cmp	r2, #57	@ 0x39
 8004416:	d107      	bne.n	8004428 <_dtoa_r+0x6d8>
 8004418:	459a      	cmp	sl, r3
 800441a:	d1f8      	bne.n	800440e <_dtoa_r+0x6be>
 800441c:	9a04      	ldr	r2, [sp, #16]
 800441e:	3201      	adds	r2, #1
 8004420:	9204      	str	r2, [sp, #16]
 8004422:	2230      	movs	r2, #48	@ 0x30
 8004424:	f88a 2000 	strb.w	r2, [sl]
 8004428:	781a      	ldrb	r2, [r3, #0]
 800442a:	3201      	adds	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e7bd      	b.n	80043ac <_dtoa_r+0x65c>
 8004430:	2200      	movs	r2, #0
 8004432:	4b09      	ldr	r3, [pc, #36]	@ (8004458 <_dtoa_r+0x708>)
 8004434:	f7fc f850 	bl	80004d8 <__aeabi_dmul>
 8004438:	2200      	movs	r2, #0
 800443a:	2300      	movs	r3, #0
 800443c:	4604      	mov	r4, r0
 800443e:	460d      	mov	r5, r1
 8004440:	f7fc fab2 	bl	80009a8 <__aeabi_dcmpeq>
 8004444:	2800      	cmp	r0, #0
 8004446:	f43f aebc 	beq.w	80041c2 <_dtoa_r+0x472>
 800444a:	e6f1      	b.n	8004230 <_dtoa_r+0x4e0>
 800444c:	080059e0 	.word	0x080059e0
 8004450:	3fe00000 	.word	0x3fe00000
 8004454:	3ff00000 	.word	0x3ff00000
 8004458:	40240000 	.word	0x40240000
 800445c:	40140000 	.word	0x40140000
 8004460:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004462:	2a00      	cmp	r2, #0
 8004464:	f000 80db 	beq.w	800461e <_dtoa_r+0x8ce>
 8004468:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800446a:	2a01      	cmp	r2, #1
 800446c:	f300 80bf 	bgt.w	80045ee <_dtoa_r+0x89e>
 8004470:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004472:	2a00      	cmp	r2, #0
 8004474:	f000 80b7 	beq.w	80045e6 <_dtoa_r+0x896>
 8004478:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800447c:	4646      	mov	r6, r8
 800447e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004480:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004482:	2101      	movs	r1, #1
 8004484:	441a      	add	r2, r3
 8004486:	4658      	mov	r0, fp
 8004488:	4498      	add	r8, r3
 800448a:	9209      	str	r2, [sp, #36]	@ 0x24
 800448c:	f000 fc1a 	bl	8004cc4 <__i2b>
 8004490:	4605      	mov	r5, r0
 8004492:	b15e      	cbz	r6, 80044ac <_dtoa_r+0x75c>
 8004494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004496:	2b00      	cmp	r3, #0
 8004498:	dd08      	ble.n	80044ac <_dtoa_r+0x75c>
 800449a:	42b3      	cmp	r3, r6
 800449c:	bfa8      	it	ge
 800449e:	4633      	movge	r3, r6
 80044a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044a2:	eba8 0803 	sub.w	r8, r8, r3
 80044a6:	1af6      	subs	r6, r6, r3
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80044ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044ae:	b1f3      	cbz	r3, 80044ee <_dtoa_r+0x79e>
 80044b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80b7 	beq.w	8004626 <_dtoa_r+0x8d6>
 80044b8:	b18c      	cbz	r4, 80044de <_dtoa_r+0x78e>
 80044ba:	4629      	mov	r1, r5
 80044bc:	4622      	mov	r2, r4
 80044be:	4658      	mov	r0, fp
 80044c0:	f000 fcbe 	bl	8004e40 <__pow5mult>
 80044c4:	464a      	mov	r2, r9
 80044c6:	4601      	mov	r1, r0
 80044c8:	4605      	mov	r5, r0
 80044ca:	4658      	mov	r0, fp
 80044cc:	f000 fc10 	bl	8004cf0 <__multiply>
 80044d0:	4649      	mov	r1, r9
 80044d2:	9004      	str	r0, [sp, #16]
 80044d4:	4658      	mov	r0, fp
 80044d6:	f000 fb41 	bl	8004b5c <_Bfree>
 80044da:	9b04      	ldr	r3, [sp, #16]
 80044dc:	4699      	mov	r9, r3
 80044de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044e0:	1b1a      	subs	r2, r3, r4
 80044e2:	d004      	beq.n	80044ee <_dtoa_r+0x79e>
 80044e4:	4649      	mov	r1, r9
 80044e6:	4658      	mov	r0, fp
 80044e8:	f000 fcaa 	bl	8004e40 <__pow5mult>
 80044ec:	4681      	mov	r9, r0
 80044ee:	2101      	movs	r1, #1
 80044f0:	4658      	mov	r0, fp
 80044f2:	f000 fbe7 	bl	8004cc4 <__i2b>
 80044f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80044f8:	4604      	mov	r4, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 81c9 	beq.w	8004892 <_dtoa_r+0xb42>
 8004500:	461a      	mov	r2, r3
 8004502:	4601      	mov	r1, r0
 8004504:	4658      	mov	r0, fp
 8004506:	f000 fc9b 	bl	8004e40 <__pow5mult>
 800450a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800450c:	4604      	mov	r4, r0
 800450e:	2b01      	cmp	r3, #1
 8004510:	f300 808f 	bgt.w	8004632 <_dtoa_r+0x8e2>
 8004514:	9b02      	ldr	r3, [sp, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	f040 8087 	bne.w	800462a <_dtoa_r+0x8da>
 800451c:	9b03      	ldr	r3, [sp, #12]
 800451e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 8083 	bne.w	800462e <_dtoa_r+0x8de>
 8004528:	9b03      	ldr	r3, [sp, #12]
 800452a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800452e:	0d1b      	lsrs	r3, r3, #20
 8004530:	051b      	lsls	r3, r3, #20
 8004532:	b12b      	cbz	r3, 8004540 <_dtoa_r+0x7f0>
 8004534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004536:	f108 0801 	add.w	r8, r8, #1
 800453a:	3301      	adds	r3, #1
 800453c:	9309      	str	r3, [sp, #36]	@ 0x24
 800453e:	2301      	movs	r3, #1
 8004540:	930a      	str	r3, [sp, #40]	@ 0x28
 8004542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 81aa 	beq.w	800489e <_dtoa_r+0xb4e>
 800454a:	6923      	ldr	r3, [r4, #16]
 800454c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004550:	6918      	ldr	r0, [r3, #16]
 8004552:	f000 fb6b 	bl	8004c2c <__hi0bits>
 8004556:	f1c0 0020 	rsb	r0, r0, #32
 800455a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800455c:	4418      	add	r0, r3
 800455e:	f010 001f 	ands.w	r0, r0, #31
 8004562:	d071      	beq.n	8004648 <_dtoa_r+0x8f8>
 8004564:	f1c0 0320 	rsb	r3, r0, #32
 8004568:	2b04      	cmp	r3, #4
 800456a:	dd65      	ble.n	8004638 <_dtoa_r+0x8e8>
 800456c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800456e:	f1c0 001c 	rsb	r0, r0, #28
 8004572:	4403      	add	r3, r0
 8004574:	4480      	add	r8, r0
 8004576:	4406      	add	r6, r0
 8004578:	9309      	str	r3, [sp, #36]	@ 0x24
 800457a:	f1b8 0f00 	cmp.w	r8, #0
 800457e:	dd05      	ble.n	800458c <_dtoa_r+0x83c>
 8004580:	4649      	mov	r1, r9
 8004582:	4642      	mov	r2, r8
 8004584:	4658      	mov	r0, fp
 8004586:	f000 fcb5 	bl	8004ef4 <__lshift>
 800458a:	4681      	mov	r9, r0
 800458c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800458e:	2b00      	cmp	r3, #0
 8004590:	dd05      	ble.n	800459e <_dtoa_r+0x84e>
 8004592:	4621      	mov	r1, r4
 8004594:	461a      	mov	r2, r3
 8004596:	4658      	mov	r0, fp
 8004598:	f000 fcac 	bl	8004ef4 <__lshift>
 800459c:	4604      	mov	r4, r0
 800459e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d053      	beq.n	800464c <_dtoa_r+0x8fc>
 80045a4:	4621      	mov	r1, r4
 80045a6:	4648      	mov	r0, r9
 80045a8:	f000 fd10 	bl	8004fcc <__mcmp>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	da4d      	bge.n	800464c <_dtoa_r+0x8fc>
 80045b0:	1e7b      	subs	r3, r7, #1
 80045b2:	4649      	mov	r1, r9
 80045b4:	9304      	str	r3, [sp, #16]
 80045b6:	220a      	movs	r2, #10
 80045b8:	2300      	movs	r3, #0
 80045ba:	4658      	mov	r0, fp
 80045bc:	f000 faf0 	bl	8004ba0 <__multadd>
 80045c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045c2:	4681      	mov	r9, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 816c 	beq.w	80048a2 <_dtoa_r+0xb52>
 80045ca:	2300      	movs	r3, #0
 80045cc:	4629      	mov	r1, r5
 80045ce:	220a      	movs	r2, #10
 80045d0:	4658      	mov	r0, fp
 80045d2:	f000 fae5 	bl	8004ba0 <__multadd>
 80045d6:	9b08      	ldr	r3, [sp, #32]
 80045d8:	4605      	mov	r5, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	dc61      	bgt.n	80046a2 <_dtoa_r+0x952>
 80045de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	dc3b      	bgt.n	800465c <_dtoa_r+0x90c>
 80045e4:	e05d      	b.n	80046a2 <_dtoa_r+0x952>
 80045e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80045e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80045ec:	e746      	b.n	800447c <_dtoa_r+0x72c>
 80045ee:	9b07      	ldr	r3, [sp, #28]
 80045f0:	1e5c      	subs	r4, r3, #1
 80045f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	bfbf      	itttt	lt
 80045f8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80045fa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80045fc:	1ae3      	sublt	r3, r4, r3
 80045fe:	18d2      	addlt	r2, r2, r3
 8004600:	bfa8      	it	ge
 8004602:	1b1c      	subge	r4, r3, r4
 8004604:	9b07      	ldr	r3, [sp, #28]
 8004606:	bfbe      	ittt	lt
 8004608:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800460a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800460c:	2400      	movlt	r4, #0
 800460e:	2b00      	cmp	r3, #0
 8004610:	bfb5      	itete	lt
 8004612:	eba8 0603 	sublt.w	r6, r8, r3
 8004616:	4646      	movge	r6, r8
 8004618:	2300      	movlt	r3, #0
 800461a:	9b07      	ldrge	r3, [sp, #28]
 800461c:	e730      	b.n	8004480 <_dtoa_r+0x730>
 800461e:	4646      	mov	r6, r8
 8004620:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004622:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004624:	e735      	b.n	8004492 <_dtoa_r+0x742>
 8004626:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004628:	e75c      	b.n	80044e4 <_dtoa_r+0x794>
 800462a:	2300      	movs	r3, #0
 800462c:	e788      	b.n	8004540 <_dtoa_r+0x7f0>
 800462e:	9b02      	ldr	r3, [sp, #8]
 8004630:	e786      	b.n	8004540 <_dtoa_r+0x7f0>
 8004632:	2300      	movs	r3, #0
 8004634:	930a      	str	r3, [sp, #40]	@ 0x28
 8004636:	e788      	b.n	800454a <_dtoa_r+0x7fa>
 8004638:	d09f      	beq.n	800457a <_dtoa_r+0x82a>
 800463a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800463c:	331c      	adds	r3, #28
 800463e:	441a      	add	r2, r3
 8004640:	4498      	add	r8, r3
 8004642:	441e      	add	r6, r3
 8004644:	9209      	str	r2, [sp, #36]	@ 0x24
 8004646:	e798      	b.n	800457a <_dtoa_r+0x82a>
 8004648:	4603      	mov	r3, r0
 800464a:	e7f6      	b.n	800463a <_dtoa_r+0x8ea>
 800464c:	9b07      	ldr	r3, [sp, #28]
 800464e:	9704      	str	r7, [sp, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	dc20      	bgt.n	8004696 <_dtoa_r+0x946>
 8004654:	9308      	str	r3, [sp, #32]
 8004656:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004658:	2b02      	cmp	r3, #2
 800465a:	dd1e      	ble.n	800469a <_dtoa_r+0x94a>
 800465c:	9b08      	ldr	r3, [sp, #32]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f47f aebc 	bne.w	80043dc <_dtoa_r+0x68c>
 8004664:	4621      	mov	r1, r4
 8004666:	2205      	movs	r2, #5
 8004668:	4658      	mov	r0, fp
 800466a:	f000 fa99 	bl	8004ba0 <__multadd>
 800466e:	4601      	mov	r1, r0
 8004670:	4604      	mov	r4, r0
 8004672:	4648      	mov	r0, r9
 8004674:	f000 fcaa 	bl	8004fcc <__mcmp>
 8004678:	2800      	cmp	r0, #0
 800467a:	f77f aeaf 	ble.w	80043dc <_dtoa_r+0x68c>
 800467e:	2331      	movs	r3, #49	@ 0x31
 8004680:	4656      	mov	r6, sl
 8004682:	f806 3b01 	strb.w	r3, [r6], #1
 8004686:	9b04      	ldr	r3, [sp, #16]
 8004688:	3301      	adds	r3, #1
 800468a:	9304      	str	r3, [sp, #16]
 800468c:	e6aa      	b.n	80043e4 <_dtoa_r+0x694>
 800468e:	9c07      	ldr	r4, [sp, #28]
 8004690:	9704      	str	r7, [sp, #16]
 8004692:	4625      	mov	r5, r4
 8004694:	e7f3      	b.n	800467e <_dtoa_r+0x92e>
 8004696:	9b07      	ldr	r3, [sp, #28]
 8004698:	9308      	str	r3, [sp, #32]
 800469a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8104 	beq.w	80048aa <_dtoa_r+0xb5a>
 80046a2:	2e00      	cmp	r6, #0
 80046a4:	dd05      	ble.n	80046b2 <_dtoa_r+0x962>
 80046a6:	4629      	mov	r1, r5
 80046a8:	4632      	mov	r2, r6
 80046aa:	4658      	mov	r0, fp
 80046ac:	f000 fc22 	bl	8004ef4 <__lshift>
 80046b0:	4605      	mov	r5, r0
 80046b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d05a      	beq.n	800476e <_dtoa_r+0xa1e>
 80046b8:	4658      	mov	r0, fp
 80046ba:	6869      	ldr	r1, [r5, #4]
 80046bc:	f000 fa0e 	bl	8004adc <_Balloc>
 80046c0:	4606      	mov	r6, r0
 80046c2:	b928      	cbnz	r0, 80046d0 <_dtoa_r+0x980>
 80046c4:	4602      	mov	r2, r0
 80046c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80046ca:	4b83      	ldr	r3, [pc, #524]	@ (80048d8 <_dtoa_r+0xb88>)
 80046cc:	f7ff bb54 	b.w	8003d78 <_dtoa_r+0x28>
 80046d0:	692a      	ldr	r2, [r5, #16]
 80046d2:	f105 010c 	add.w	r1, r5, #12
 80046d6:	3202      	adds	r2, #2
 80046d8:	0092      	lsls	r2, r2, #2
 80046da:	300c      	adds	r0, #12
 80046dc:	f000 ff62 	bl	80055a4 <memcpy>
 80046e0:	2201      	movs	r2, #1
 80046e2:	4631      	mov	r1, r6
 80046e4:	4658      	mov	r0, fp
 80046e6:	f000 fc05 	bl	8004ef4 <__lshift>
 80046ea:	462f      	mov	r7, r5
 80046ec:	4605      	mov	r5, r0
 80046ee:	f10a 0301 	add.w	r3, sl, #1
 80046f2:	9307      	str	r3, [sp, #28]
 80046f4:	9b08      	ldr	r3, [sp, #32]
 80046f6:	4453      	add	r3, sl
 80046f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046fa:	9b02      	ldr	r3, [sp, #8]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	930a      	str	r3, [sp, #40]	@ 0x28
 8004702:	9b07      	ldr	r3, [sp, #28]
 8004704:	4621      	mov	r1, r4
 8004706:	3b01      	subs	r3, #1
 8004708:	4648      	mov	r0, r9
 800470a:	9302      	str	r3, [sp, #8]
 800470c:	f7ff fa95 	bl	8003c3a <quorem>
 8004710:	4639      	mov	r1, r7
 8004712:	9008      	str	r0, [sp, #32]
 8004714:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004718:	4648      	mov	r0, r9
 800471a:	f000 fc57 	bl	8004fcc <__mcmp>
 800471e:	462a      	mov	r2, r5
 8004720:	9009      	str	r0, [sp, #36]	@ 0x24
 8004722:	4621      	mov	r1, r4
 8004724:	4658      	mov	r0, fp
 8004726:	f000 fc6d 	bl	8005004 <__mdiff>
 800472a:	68c2      	ldr	r2, [r0, #12]
 800472c:	4606      	mov	r6, r0
 800472e:	bb02      	cbnz	r2, 8004772 <_dtoa_r+0xa22>
 8004730:	4601      	mov	r1, r0
 8004732:	4648      	mov	r0, r9
 8004734:	f000 fc4a 	bl	8004fcc <__mcmp>
 8004738:	4602      	mov	r2, r0
 800473a:	4631      	mov	r1, r6
 800473c:	4658      	mov	r0, fp
 800473e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004740:	f000 fa0c 	bl	8004b5c <_Bfree>
 8004744:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004746:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004748:	9e07      	ldr	r6, [sp, #28]
 800474a:	ea43 0102 	orr.w	r1, r3, r2
 800474e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004750:	4319      	orrs	r1, r3
 8004752:	d110      	bne.n	8004776 <_dtoa_r+0xa26>
 8004754:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004758:	d029      	beq.n	80047ae <_dtoa_r+0xa5e>
 800475a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800475c:	2b00      	cmp	r3, #0
 800475e:	dd02      	ble.n	8004766 <_dtoa_r+0xa16>
 8004760:	9b08      	ldr	r3, [sp, #32]
 8004762:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004766:	9b02      	ldr	r3, [sp, #8]
 8004768:	f883 8000 	strb.w	r8, [r3]
 800476c:	e63b      	b.n	80043e6 <_dtoa_r+0x696>
 800476e:	4628      	mov	r0, r5
 8004770:	e7bb      	b.n	80046ea <_dtoa_r+0x99a>
 8004772:	2201      	movs	r2, #1
 8004774:	e7e1      	b.n	800473a <_dtoa_r+0x9ea>
 8004776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004778:	2b00      	cmp	r3, #0
 800477a:	db04      	blt.n	8004786 <_dtoa_r+0xa36>
 800477c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800477e:	430b      	orrs	r3, r1
 8004780:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004782:	430b      	orrs	r3, r1
 8004784:	d120      	bne.n	80047c8 <_dtoa_r+0xa78>
 8004786:	2a00      	cmp	r2, #0
 8004788:	dded      	ble.n	8004766 <_dtoa_r+0xa16>
 800478a:	4649      	mov	r1, r9
 800478c:	2201      	movs	r2, #1
 800478e:	4658      	mov	r0, fp
 8004790:	f000 fbb0 	bl	8004ef4 <__lshift>
 8004794:	4621      	mov	r1, r4
 8004796:	4681      	mov	r9, r0
 8004798:	f000 fc18 	bl	8004fcc <__mcmp>
 800479c:	2800      	cmp	r0, #0
 800479e:	dc03      	bgt.n	80047a8 <_dtoa_r+0xa58>
 80047a0:	d1e1      	bne.n	8004766 <_dtoa_r+0xa16>
 80047a2:	f018 0f01 	tst.w	r8, #1
 80047a6:	d0de      	beq.n	8004766 <_dtoa_r+0xa16>
 80047a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80047ac:	d1d8      	bne.n	8004760 <_dtoa_r+0xa10>
 80047ae:	2339      	movs	r3, #57	@ 0x39
 80047b0:	9a02      	ldr	r2, [sp, #8]
 80047b2:	7013      	strb	r3, [r2, #0]
 80047b4:	4633      	mov	r3, r6
 80047b6:	461e      	mov	r6, r3
 80047b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80047bc:	3b01      	subs	r3, #1
 80047be:	2a39      	cmp	r2, #57	@ 0x39
 80047c0:	d052      	beq.n	8004868 <_dtoa_r+0xb18>
 80047c2:	3201      	adds	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e60e      	b.n	80043e6 <_dtoa_r+0x696>
 80047c8:	2a00      	cmp	r2, #0
 80047ca:	dd07      	ble.n	80047dc <_dtoa_r+0xa8c>
 80047cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80047d0:	d0ed      	beq.n	80047ae <_dtoa_r+0xa5e>
 80047d2:	9a02      	ldr	r2, [sp, #8]
 80047d4:	f108 0301 	add.w	r3, r8, #1
 80047d8:	7013      	strb	r3, [r2, #0]
 80047da:	e604      	b.n	80043e6 <_dtoa_r+0x696>
 80047dc:	9b07      	ldr	r3, [sp, #28]
 80047de:	9a07      	ldr	r2, [sp, #28]
 80047e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80047e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d028      	beq.n	800483c <_dtoa_r+0xaec>
 80047ea:	4649      	mov	r1, r9
 80047ec:	2300      	movs	r3, #0
 80047ee:	220a      	movs	r2, #10
 80047f0:	4658      	mov	r0, fp
 80047f2:	f000 f9d5 	bl	8004ba0 <__multadd>
 80047f6:	42af      	cmp	r7, r5
 80047f8:	4681      	mov	r9, r0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	f04f 020a 	mov.w	r2, #10
 8004802:	4639      	mov	r1, r7
 8004804:	4658      	mov	r0, fp
 8004806:	d107      	bne.n	8004818 <_dtoa_r+0xac8>
 8004808:	f000 f9ca 	bl	8004ba0 <__multadd>
 800480c:	4607      	mov	r7, r0
 800480e:	4605      	mov	r5, r0
 8004810:	9b07      	ldr	r3, [sp, #28]
 8004812:	3301      	adds	r3, #1
 8004814:	9307      	str	r3, [sp, #28]
 8004816:	e774      	b.n	8004702 <_dtoa_r+0x9b2>
 8004818:	f000 f9c2 	bl	8004ba0 <__multadd>
 800481c:	4629      	mov	r1, r5
 800481e:	4607      	mov	r7, r0
 8004820:	2300      	movs	r3, #0
 8004822:	220a      	movs	r2, #10
 8004824:	4658      	mov	r0, fp
 8004826:	f000 f9bb 	bl	8004ba0 <__multadd>
 800482a:	4605      	mov	r5, r0
 800482c:	e7f0      	b.n	8004810 <_dtoa_r+0xac0>
 800482e:	9b08      	ldr	r3, [sp, #32]
 8004830:	2700      	movs	r7, #0
 8004832:	2b00      	cmp	r3, #0
 8004834:	bfcc      	ite	gt
 8004836:	461e      	movgt	r6, r3
 8004838:	2601      	movle	r6, #1
 800483a:	4456      	add	r6, sl
 800483c:	4649      	mov	r1, r9
 800483e:	2201      	movs	r2, #1
 8004840:	4658      	mov	r0, fp
 8004842:	f000 fb57 	bl	8004ef4 <__lshift>
 8004846:	4621      	mov	r1, r4
 8004848:	4681      	mov	r9, r0
 800484a:	f000 fbbf 	bl	8004fcc <__mcmp>
 800484e:	2800      	cmp	r0, #0
 8004850:	dcb0      	bgt.n	80047b4 <_dtoa_r+0xa64>
 8004852:	d102      	bne.n	800485a <_dtoa_r+0xb0a>
 8004854:	f018 0f01 	tst.w	r8, #1
 8004858:	d1ac      	bne.n	80047b4 <_dtoa_r+0xa64>
 800485a:	4633      	mov	r3, r6
 800485c:	461e      	mov	r6, r3
 800485e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004862:	2a30      	cmp	r2, #48	@ 0x30
 8004864:	d0fa      	beq.n	800485c <_dtoa_r+0xb0c>
 8004866:	e5be      	b.n	80043e6 <_dtoa_r+0x696>
 8004868:	459a      	cmp	sl, r3
 800486a:	d1a4      	bne.n	80047b6 <_dtoa_r+0xa66>
 800486c:	9b04      	ldr	r3, [sp, #16]
 800486e:	3301      	adds	r3, #1
 8004870:	9304      	str	r3, [sp, #16]
 8004872:	2331      	movs	r3, #49	@ 0x31
 8004874:	f88a 3000 	strb.w	r3, [sl]
 8004878:	e5b5      	b.n	80043e6 <_dtoa_r+0x696>
 800487a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800487c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80048dc <_dtoa_r+0xb8c>
 8004880:	b11b      	cbz	r3, 800488a <_dtoa_r+0xb3a>
 8004882:	f10a 0308 	add.w	r3, sl, #8
 8004886:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	4650      	mov	r0, sl
 800488c:	b017      	add	sp, #92	@ 0x5c
 800488e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004892:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004894:	2b01      	cmp	r3, #1
 8004896:	f77f ae3d 	ble.w	8004514 <_dtoa_r+0x7c4>
 800489a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800489c:	930a      	str	r3, [sp, #40]	@ 0x28
 800489e:	2001      	movs	r0, #1
 80048a0:	e65b      	b.n	800455a <_dtoa_r+0x80a>
 80048a2:	9b08      	ldr	r3, [sp, #32]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f77f aed6 	ble.w	8004656 <_dtoa_r+0x906>
 80048aa:	4656      	mov	r6, sl
 80048ac:	4621      	mov	r1, r4
 80048ae:	4648      	mov	r0, r9
 80048b0:	f7ff f9c3 	bl	8003c3a <quorem>
 80048b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80048b8:	9b08      	ldr	r3, [sp, #32]
 80048ba:	f806 8b01 	strb.w	r8, [r6], #1
 80048be:	eba6 020a 	sub.w	r2, r6, sl
 80048c2:	4293      	cmp	r3, r2
 80048c4:	ddb3      	ble.n	800482e <_dtoa_r+0xade>
 80048c6:	4649      	mov	r1, r9
 80048c8:	2300      	movs	r3, #0
 80048ca:	220a      	movs	r2, #10
 80048cc:	4658      	mov	r0, fp
 80048ce:	f000 f967 	bl	8004ba0 <__multadd>
 80048d2:	4681      	mov	r9, r0
 80048d4:	e7ea      	b.n	80048ac <_dtoa_r+0xb5c>
 80048d6:	bf00      	nop
 80048d8:	08005942 	.word	0x08005942
 80048dc:	080058c6 	.word	0x080058c6

080048e0 <_free_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4605      	mov	r5, r0
 80048e4:	2900      	cmp	r1, #0
 80048e6:	d040      	beq.n	800496a <_free_r+0x8a>
 80048e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ec:	1f0c      	subs	r4, r1, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bfb8      	it	lt
 80048f2:	18e4      	addlt	r4, r4, r3
 80048f4:	f000 f8e6 	bl	8004ac4 <__malloc_lock>
 80048f8:	4a1c      	ldr	r2, [pc, #112]	@ (800496c <_free_r+0x8c>)
 80048fa:	6813      	ldr	r3, [r2, #0]
 80048fc:	b933      	cbnz	r3, 800490c <_free_r+0x2c>
 80048fe:	6063      	str	r3, [r4, #4]
 8004900:	6014      	str	r4, [r2, #0]
 8004902:	4628      	mov	r0, r5
 8004904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004908:	f000 b8e2 	b.w	8004ad0 <__malloc_unlock>
 800490c:	42a3      	cmp	r3, r4
 800490e:	d908      	bls.n	8004922 <_free_r+0x42>
 8004910:	6820      	ldr	r0, [r4, #0]
 8004912:	1821      	adds	r1, r4, r0
 8004914:	428b      	cmp	r3, r1
 8004916:	bf01      	itttt	eq
 8004918:	6819      	ldreq	r1, [r3, #0]
 800491a:	685b      	ldreq	r3, [r3, #4]
 800491c:	1809      	addeq	r1, r1, r0
 800491e:	6021      	streq	r1, [r4, #0]
 8004920:	e7ed      	b.n	80048fe <_free_r+0x1e>
 8004922:	461a      	mov	r2, r3
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	b10b      	cbz	r3, 800492c <_free_r+0x4c>
 8004928:	42a3      	cmp	r3, r4
 800492a:	d9fa      	bls.n	8004922 <_free_r+0x42>
 800492c:	6811      	ldr	r1, [r2, #0]
 800492e:	1850      	adds	r0, r2, r1
 8004930:	42a0      	cmp	r0, r4
 8004932:	d10b      	bne.n	800494c <_free_r+0x6c>
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	4401      	add	r1, r0
 8004938:	1850      	adds	r0, r2, r1
 800493a:	4283      	cmp	r3, r0
 800493c:	6011      	str	r1, [r2, #0]
 800493e:	d1e0      	bne.n	8004902 <_free_r+0x22>
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4408      	add	r0, r1
 8004946:	6010      	str	r0, [r2, #0]
 8004948:	6053      	str	r3, [r2, #4]
 800494a:	e7da      	b.n	8004902 <_free_r+0x22>
 800494c:	d902      	bls.n	8004954 <_free_r+0x74>
 800494e:	230c      	movs	r3, #12
 8004950:	602b      	str	r3, [r5, #0]
 8004952:	e7d6      	b.n	8004902 <_free_r+0x22>
 8004954:	6820      	ldr	r0, [r4, #0]
 8004956:	1821      	adds	r1, r4, r0
 8004958:	428b      	cmp	r3, r1
 800495a:	bf01      	itttt	eq
 800495c:	6819      	ldreq	r1, [r3, #0]
 800495e:	685b      	ldreq	r3, [r3, #4]
 8004960:	1809      	addeq	r1, r1, r0
 8004962:	6021      	streq	r1, [r4, #0]
 8004964:	6063      	str	r3, [r4, #4]
 8004966:	6054      	str	r4, [r2, #4]
 8004968:	e7cb      	b.n	8004902 <_free_r+0x22>
 800496a:	bd38      	pop	{r3, r4, r5, pc}
 800496c:	20000370 	.word	0x20000370

08004970 <malloc>:
 8004970:	4b02      	ldr	r3, [pc, #8]	@ (800497c <malloc+0xc>)
 8004972:	4601      	mov	r1, r0
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	f000 b825 	b.w	80049c4 <_malloc_r>
 800497a:	bf00      	nop
 800497c:	20000018 	.word	0x20000018

08004980 <sbrk_aligned>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	4e0f      	ldr	r6, [pc, #60]	@ (80049c0 <sbrk_aligned+0x40>)
 8004984:	460c      	mov	r4, r1
 8004986:	6831      	ldr	r1, [r6, #0]
 8004988:	4605      	mov	r5, r0
 800498a:	b911      	cbnz	r1, 8004992 <sbrk_aligned+0x12>
 800498c:	f000 fdfa 	bl	8005584 <_sbrk_r>
 8004990:	6030      	str	r0, [r6, #0]
 8004992:	4621      	mov	r1, r4
 8004994:	4628      	mov	r0, r5
 8004996:	f000 fdf5 	bl	8005584 <_sbrk_r>
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	d103      	bne.n	80049a6 <sbrk_aligned+0x26>
 800499e:	f04f 34ff 	mov.w	r4, #4294967295
 80049a2:	4620      	mov	r0, r4
 80049a4:	bd70      	pop	{r4, r5, r6, pc}
 80049a6:	1cc4      	adds	r4, r0, #3
 80049a8:	f024 0403 	bic.w	r4, r4, #3
 80049ac:	42a0      	cmp	r0, r4
 80049ae:	d0f8      	beq.n	80049a2 <sbrk_aligned+0x22>
 80049b0:	1a21      	subs	r1, r4, r0
 80049b2:	4628      	mov	r0, r5
 80049b4:	f000 fde6 	bl	8005584 <_sbrk_r>
 80049b8:	3001      	adds	r0, #1
 80049ba:	d1f2      	bne.n	80049a2 <sbrk_aligned+0x22>
 80049bc:	e7ef      	b.n	800499e <sbrk_aligned+0x1e>
 80049be:	bf00      	nop
 80049c0:	2000036c 	.word	0x2000036c

080049c4 <_malloc_r>:
 80049c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049c8:	1ccd      	adds	r5, r1, #3
 80049ca:	f025 0503 	bic.w	r5, r5, #3
 80049ce:	3508      	adds	r5, #8
 80049d0:	2d0c      	cmp	r5, #12
 80049d2:	bf38      	it	cc
 80049d4:	250c      	movcc	r5, #12
 80049d6:	2d00      	cmp	r5, #0
 80049d8:	4606      	mov	r6, r0
 80049da:	db01      	blt.n	80049e0 <_malloc_r+0x1c>
 80049dc:	42a9      	cmp	r1, r5
 80049de:	d904      	bls.n	80049ea <_malloc_r+0x26>
 80049e0:	230c      	movs	r3, #12
 80049e2:	6033      	str	r3, [r6, #0]
 80049e4:	2000      	movs	r0, #0
 80049e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ac0 <_malloc_r+0xfc>
 80049ee:	f000 f869 	bl	8004ac4 <__malloc_lock>
 80049f2:	f8d8 3000 	ldr.w	r3, [r8]
 80049f6:	461c      	mov	r4, r3
 80049f8:	bb44      	cbnz	r4, 8004a4c <_malloc_r+0x88>
 80049fa:	4629      	mov	r1, r5
 80049fc:	4630      	mov	r0, r6
 80049fe:	f7ff ffbf 	bl	8004980 <sbrk_aligned>
 8004a02:	1c43      	adds	r3, r0, #1
 8004a04:	4604      	mov	r4, r0
 8004a06:	d158      	bne.n	8004aba <_malloc_r+0xf6>
 8004a08:	f8d8 4000 	ldr.w	r4, [r8]
 8004a0c:	4627      	mov	r7, r4
 8004a0e:	2f00      	cmp	r7, #0
 8004a10:	d143      	bne.n	8004a9a <_malloc_r+0xd6>
 8004a12:	2c00      	cmp	r4, #0
 8004a14:	d04b      	beq.n	8004aae <_malloc_r+0xea>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	4639      	mov	r1, r7
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	eb04 0903 	add.w	r9, r4, r3
 8004a20:	f000 fdb0 	bl	8005584 <_sbrk_r>
 8004a24:	4581      	cmp	r9, r0
 8004a26:	d142      	bne.n	8004aae <_malloc_r+0xea>
 8004a28:	6821      	ldr	r1, [r4, #0]
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	1a6d      	subs	r5, r5, r1
 8004a2e:	4629      	mov	r1, r5
 8004a30:	f7ff ffa6 	bl	8004980 <sbrk_aligned>
 8004a34:	3001      	adds	r0, #1
 8004a36:	d03a      	beq.n	8004aae <_malloc_r+0xea>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	442b      	add	r3, r5
 8004a3c:	6023      	str	r3, [r4, #0]
 8004a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	bb62      	cbnz	r2, 8004aa0 <_malloc_r+0xdc>
 8004a46:	f8c8 7000 	str.w	r7, [r8]
 8004a4a:	e00f      	b.n	8004a6c <_malloc_r+0xa8>
 8004a4c:	6822      	ldr	r2, [r4, #0]
 8004a4e:	1b52      	subs	r2, r2, r5
 8004a50:	d420      	bmi.n	8004a94 <_malloc_r+0xd0>
 8004a52:	2a0b      	cmp	r2, #11
 8004a54:	d917      	bls.n	8004a86 <_malloc_r+0xc2>
 8004a56:	1961      	adds	r1, r4, r5
 8004a58:	42a3      	cmp	r3, r4
 8004a5a:	6025      	str	r5, [r4, #0]
 8004a5c:	bf18      	it	ne
 8004a5e:	6059      	strne	r1, [r3, #4]
 8004a60:	6863      	ldr	r3, [r4, #4]
 8004a62:	bf08      	it	eq
 8004a64:	f8c8 1000 	streq.w	r1, [r8]
 8004a68:	5162      	str	r2, [r4, r5]
 8004a6a:	604b      	str	r3, [r1, #4]
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f000 f82f 	bl	8004ad0 <__malloc_unlock>
 8004a72:	f104 000b 	add.w	r0, r4, #11
 8004a76:	1d23      	adds	r3, r4, #4
 8004a78:	f020 0007 	bic.w	r0, r0, #7
 8004a7c:	1ac2      	subs	r2, r0, r3
 8004a7e:	bf1c      	itt	ne
 8004a80:	1a1b      	subne	r3, r3, r0
 8004a82:	50a3      	strne	r3, [r4, r2]
 8004a84:	e7af      	b.n	80049e6 <_malloc_r+0x22>
 8004a86:	6862      	ldr	r2, [r4, #4]
 8004a88:	42a3      	cmp	r3, r4
 8004a8a:	bf0c      	ite	eq
 8004a8c:	f8c8 2000 	streq.w	r2, [r8]
 8004a90:	605a      	strne	r2, [r3, #4]
 8004a92:	e7eb      	b.n	8004a6c <_malloc_r+0xa8>
 8004a94:	4623      	mov	r3, r4
 8004a96:	6864      	ldr	r4, [r4, #4]
 8004a98:	e7ae      	b.n	80049f8 <_malloc_r+0x34>
 8004a9a:	463c      	mov	r4, r7
 8004a9c:	687f      	ldr	r7, [r7, #4]
 8004a9e:	e7b6      	b.n	8004a0e <_malloc_r+0x4a>
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	42a3      	cmp	r3, r4
 8004aa6:	d1fb      	bne.n	8004aa0 <_malloc_r+0xdc>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	6053      	str	r3, [r2, #4]
 8004aac:	e7de      	b.n	8004a6c <_malloc_r+0xa8>
 8004aae:	230c      	movs	r3, #12
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	6033      	str	r3, [r6, #0]
 8004ab4:	f000 f80c 	bl	8004ad0 <__malloc_unlock>
 8004ab8:	e794      	b.n	80049e4 <_malloc_r+0x20>
 8004aba:	6005      	str	r5, [r0, #0]
 8004abc:	e7d6      	b.n	8004a6c <_malloc_r+0xa8>
 8004abe:	bf00      	nop
 8004ac0:	20000370 	.word	0x20000370

08004ac4 <__malloc_lock>:
 8004ac4:	4801      	ldr	r0, [pc, #4]	@ (8004acc <__malloc_lock+0x8>)
 8004ac6:	f7ff b8a8 	b.w	8003c1a <__retarget_lock_acquire_recursive>
 8004aca:	bf00      	nop
 8004acc:	20000368 	.word	0x20000368

08004ad0 <__malloc_unlock>:
 8004ad0:	4801      	ldr	r0, [pc, #4]	@ (8004ad8 <__malloc_unlock+0x8>)
 8004ad2:	f7ff b8a3 	b.w	8003c1c <__retarget_lock_release_recursive>
 8004ad6:	bf00      	nop
 8004ad8:	20000368 	.word	0x20000368

08004adc <_Balloc>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	69c6      	ldr	r6, [r0, #28]
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	460d      	mov	r5, r1
 8004ae4:	b976      	cbnz	r6, 8004b04 <_Balloc+0x28>
 8004ae6:	2010      	movs	r0, #16
 8004ae8:	f7ff ff42 	bl	8004970 <malloc>
 8004aec:	4602      	mov	r2, r0
 8004aee:	61e0      	str	r0, [r4, #28]
 8004af0:	b920      	cbnz	r0, 8004afc <_Balloc+0x20>
 8004af2:	216b      	movs	r1, #107	@ 0x6b
 8004af4:	4b17      	ldr	r3, [pc, #92]	@ (8004b54 <_Balloc+0x78>)
 8004af6:	4818      	ldr	r0, [pc, #96]	@ (8004b58 <_Balloc+0x7c>)
 8004af8:	f000 fd62 	bl	80055c0 <__assert_func>
 8004afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b00:	6006      	str	r6, [r0, #0]
 8004b02:	60c6      	str	r6, [r0, #12]
 8004b04:	69e6      	ldr	r6, [r4, #28]
 8004b06:	68f3      	ldr	r3, [r6, #12]
 8004b08:	b183      	cbz	r3, 8004b2c <_Balloc+0x50>
 8004b0a:	69e3      	ldr	r3, [r4, #28]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004b12:	b9b8      	cbnz	r0, 8004b44 <_Balloc+0x68>
 8004b14:	2101      	movs	r1, #1
 8004b16:	fa01 f605 	lsl.w	r6, r1, r5
 8004b1a:	1d72      	adds	r2, r6, #5
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	0092      	lsls	r2, r2, #2
 8004b20:	f000 fd6c 	bl	80055fc <_calloc_r>
 8004b24:	b160      	cbz	r0, 8004b40 <_Balloc+0x64>
 8004b26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004b2a:	e00e      	b.n	8004b4a <_Balloc+0x6e>
 8004b2c:	2221      	movs	r2, #33	@ 0x21
 8004b2e:	2104      	movs	r1, #4
 8004b30:	4620      	mov	r0, r4
 8004b32:	f000 fd63 	bl	80055fc <_calloc_r>
 8004b36:	69e3      	ldr	r3, [r4, #28]
 8004b38:	60f0      	str	r0, [r6, #12]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e4      	bne.n	8004b0a <_Balloc+0x2e>
 8004b40:	2000      	movs	r0, #0
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
 8004b44:	6802      	ldr	r2, [r0, #0]
 8004b46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b50:	e7f7      	b.n	8004b42 <_Balloc+0x66>
 8004b52:	bf00      	nop
 8004b54:	080058d3 	.word	0x080058d3
 8004b58:	08005953 	.word	0x08005953

08004b5c <_Bfree>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	69c6      	ldr	r6, [r0, #28]
 8004b60:	4605      	mov	r5, r0
 8004b62:	460c      	mov	r4, r1
 8004b64:	b976      	cbnz	r6, 8004b84 <_Bfree+0x28>
 8004b66:	2010      	movs	r0, #16
 8004b68:	f7ff ff02 	bl	8004970 <malloc>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	61e8      	str	r0, [r5, #28]
 8004b70:	b920      	cbnz	r0, 8004b7c <_Bfree+0x20>
 8004b72:	218f      	movs	r1, #143	@ 0x8f
 8004b74:	4b08      	ldr	r3, [pc, #32]	@ (8004b98 <_Bfree+0x3c>)
 8004b76:	4809      	ldr	r0, [pc, #36]	@ (8004b9c <_Bfree+0x40>)
 8004b78:	f000 fd22 	bl	80055c0 <__assert_func>
 8004b7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b80:	6006      	str	r6, [r0, #0]
 8004b82:	60c6      	str	r6, [r0, #12]
 8004b84:	b13c      	cbz	r4, 8004b96 <_Bfree+0x3a>
 8004b86:	69eb      	ldr	r3, [r5, #28]
 8004b88:	6862      	ldr	r2, [r4, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b90:	6021      	str	r1, [r4, #0]
 8004b92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	080058d3 	.word	0x080058d3
 8004b9c:	08005953 	.word	0x08005953

08004ba0 <__multadd>:
 8004ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba4:	4607      	mov	r7, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	461e      	mov	r6, r3
 8004baa:	2000      	movs	r0, #0
 8004bac:	690d      	ldr	r5, [r1, #16]
 8004bae:	f101 0c14 	add.w	ip, r1, #20
 8004bb2:	f8dc 3000 	ldr.w	r3, [ip]
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	b299      	uxth	r1, r3
 8004bba:	fb02 6101 	mla	r1, r2, r1, r6
 8004bbe:	0c1e      	lsrs	r6, r3, #16
 8004bc0:	0c0b      	lsrs	r3, r1, #16
 8004bc2:	fb02 3306 	mla	r3, r2, r6, r3
 8004bc6:	b289      	uxth	r1, r1
 8004bc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004bcc:	4285      	cmp	r5, r0
 8004bce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004bd2:	f84c 1b04 	str.w	r1, [ip], #4
 8004bd6:	dcec      	bgt.n	8004bb2 <__multadd+0x12>
 8004bd8:	b30e      	cbz	r6, 8004c1e <__multadd+0x7e>
 8004bda:	68a3      	ldr	r3, [r4, #8]
 8004bdc:	42ab      	cmp	r3, r5
 8004bde:	dc19      	bgt.n	8004c14 <__multadd+0x74>
 8004be0:	6861      	ldr	r1, [r4, #4]
 8004be2:	4638      	mov	r0, r7
 8004be4:	3101      	adds	r1, #1
 8004be6:	f7ff ff79 	bl	8004adc <_Balloc>
 8004bea:	4680      	mov	r8, r0
 8004bec:	b928      	cbnz	r0, 8004bfa <__multadd+0x5a>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	21ba      	movs	r1, #186	@ 0xba
 8004bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8004c24 <__multadd+0x84>)
 8004bf4:	480c      	ldr	r0, [pc, #48]	@ (8004c28 <__multadd+0x88>)
 8004bf6:	f000 fce3 	bl	80055c0 <__assert_func>
 8004bfa:	6922      	ldr	r2, [r4, #16]
 8004bfc:	f104 010c 	add.w	r1, r4, #12
 8004c00:	3202      	adds	r2, #2
 8004c02:	0092      	lsls	r2, r2, #2
 8004c04:	300c      	adds	r0, #12
 8004c06:	f000 fccd 	bl	80055a4 <memcpy>
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	f7ff ffa5 	bl	8004b5c <_Bfree>
 8004c12:	4644      	mov	r4, r8
 8004c14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c18:	3501      	adds	r5, #1
 8004c1a:	615e      	str	r6, [r3, #20]
 8004c1c:	6125      	str	r5, [r4, #16]
 8004c1e:	4620      	mov	r0, r4
 8004c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c24:	08005942 	.word	0x08005942
 8004c28:	08005953 	.word	0x08005953

08004c2c <__hi0bits>:
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004c32:	bf3a      	itte	cc
 8004c34:	0403      	lslcc	r3, r0, #16
 8004c36:	2010      	movcc	r0, #16
 8004c38:	2000      	movcs	r0, #0
 8004c3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c3e:	bf3c      	itt	cc
 8004c40:	021b      	lslcc	r3, r3, #8
 8004c42:	3008      	addcc	r0, #8
 8004c44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c48:	bf3c      	itt	cc
 8004c4a:	011b      	lslcc	r3, r3, #4
 8004c4c:	3004      	addcc	r0, #4
 8004c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c52:	bf3c      	itt	cc
 8004c54:	009b      	lslcc	r3, r3, #2
 8004c56:	3002      	addcc	r0, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	db05      	blt.n	8004c68 <__hi0bits+0x3c>
 8004c5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004c60:	f100 0001 	add.w	r0, r0, #1
 8004c64:	bf08      	it	eq
 8004c66:	2020      	moveq	r0, #32
 8004c68:	4770      	bx	lr

08004c6a <__lo0bits>:
 8004c6a:	6803      	ldr	r3, [r0, #0]
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	f013 0007 	ands.w	r0, r3, #7
 8004c72:	d00b      	beq.n	8004c8c <__lo0bits+0x22>
 8004c74:	07d9      	lsls	r1, r3, #31
 8004c76:	d421      	bmi.n	8004cbc <__lo0bits+0x52>
 8004c78:	0798      	lsls	r0, r3, #30
 8004c7a:	bf49      	itett	mi
 8004c7c:	085b      	lsrmi	r3, r3, #1
 8004c7e:	089b      	lsrpl	r3, r3, #2
 8004c80:	2001      	movmi	r0, #1
 8004c82:	6013      	strmi	r3, [r2, #0]
 8004c84:	bf5c      	itt	pl
 8004c86:	2002      	movpl	r0, #2
 8004c88:	6013      	strpl	r3, [r2, #0]
 8004c8a:	4770      	bx	lr
 8004c8c:	b299      	uxth	r1, r3
 8004c8e:	b909      	cbnz	r1, 8004c94 <__lo0bits+0x2a>
 8004c90:	2010      	movs	r0, #16
 8004c92:	0c1b      	lsrs	r3, r3, #16
 8004c94:	b2d9      	uxtb	r1, r3
 8004c96:	b909      	cbnz	r1, 8004c9c <__lo0bits+0x32>
 8004c98:	3008      	adds	r0, #8
 8004c9a:	0a1b      	lsrs	r3, r3, #8
 8004c9c:	0719      	lsls	r1, r3, #28
 8004c9e:	bf04      	itt	eq
 8004ca0:	091b      	lsreq	r3, r3, #4
 8004ca2:	3004      	addeq	r0, #4
 8004ca4:	0799      	lsls	r1, r3, #30
 8004ca6:	bf04      	itt	eq
 8004ca8:	089b      	lsreq	r3, r3, #2
 8004caa:	3002      	addeq	r0, #2
 8004cac:	07d9      	lsls	r1, r3, #31
 8004cae:	d403      	bmi.n	8004cb8 <__lo0bits+0x4e>
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	f100 0001 	add.w	r0, r0, #1
 8004cb6:	d003      	beq.n	8004cc0 <__lo0bits+0x56>
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4770      	bx	lr
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	4770      	bx	lr
 8004cc0:	2020      	movs	r0, #32
 8004cc2:	4770      	bx	lr

08004cc4 <__i2b>:
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	2101      	movs	r1, #1
 8004cca:	f7ff ff07 	bl	8004adc <_Balloc>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	b928      	cbnz	r0, 8004cde <__i2b+0x1a>
 8004cd2:	f240 1145 	movw	r1, #325	@ 0x145
 8004cd6:	4b04      	ldr	r3, [pc, #16]	@ (8004ce8 <__i2b+0x24>)
 8004cd8:	4804      	ldr	r0, [pc, #16]	@ (8004cec <__i2b+0x28>)
 8004cda:	f000 fc71 	bl	80055c0 <__assert_func>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	6144      	str	r4, [r0, #20]
 8004ce2:	6103      	str	r3, [r0, #16]
 8004ce4:	bd10      	pop	{r4, pc}
 8004ce6:	bf00      	nop
 8004ce8:	08005942 	.word	0x08005942
 8004cec:	08005953 	.word	0x08005953

08004cf0 <__multiply>:
 8004cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	690a      	ldr	r2, [r1, #16]
 8004cf8:	6923      	ldr	r3, [r4, #16]
 8004cfa:	460f      	mov	r7, r1
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	bfa2      	ittt	ge
 8004d00:	4623      	movge	r3, r4
 8004d02:	460c      	movge	r4, r1
 8004d04:	461f      	movge	r7, r3
 8004d06:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004d0a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004d0e:	68a3      	ldr	r3, [r4, #8]
 8004d10:	6861      	ldr	r1, [r4, #4]
 8004d12:	eb0a 0609 	add.w	r6, sl, r9
 8004d16:	42b3      	cmp	r3, r6
 8004d18:	b085      	sub	sp, #20
 8004d1a:	bfb8      	it	lt
 8004d1c:	3101      	addlt	r1, #1
 8004d1e:	f7ff fedd 	bl	8004adc <_Balloc>
 8004d22:	b930      	cbnz	r0, 8004d32 <__multiply+0x42>
 8004d24:	4602      	mov	r2, r0
 8004d26:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004d2a:	4b43      	ldr	r3, [pc, #268]	@ (8004e38 <__multiply+0x148>)
 8004d2c:	4843      	ldr	r0, [pc, #268]	@ (8004e3c <__multiply+0x14c>)
 8004d2e:	f000 fc47 	bl	80055c0 <__assert_func>
 8004d32:	f100 0514 	add.w	r5, r0, #20
 8004d36:	462b      	mov	r3, r5
 8004d38:	2200      	movs	r2, #0
 8004d3a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004d3e:	4543      	cmp	r3, r8
 8004d40:	d321      	bcc.n	8004d86 <__multiply+0x96>
 8004d42:	f107 0114 	add.w	r1, r7, #20
 8004d46:	f104 0214 	add.w	r2, r4, #20
 8004d4a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004d4e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004d52:	9302      	str	r3, [sp, #8]
 8004d54:	1b13      	subs	r3, r2, r4
 8004d56:	3b15      	subs	r3, #21
 8004d58:	f023 0303 	bic.w	r3, r3, #3
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	f104 0715 	add.w	r7, r4, #21
 8004d62:	42ba      	cmp	r2, r7
 8004d64:	bf38      	it	cc
 8004d66:	2304      	movcc	r3, #4
 8004d68:	9301      	str	r3, [sp, #4]
 8004d6a:	9b02      	ldr	r3, [sp, #8]
 8004d6c:	9103      	str	r1, [sp, #12]
 8004d6e:	428b      	cmp	r3, r1
 8004d70:	d80c      	bhi.n	8004d8c <__multiply+0x9c>
 8004d72:	2e00      	cmp	r6, #0
 8004d74:	dd03      	ble.n	8004d7e <__multiply+0x8e>
 8004d76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d05a      	beq.n	8004e34 <__multiply+0x144>
 8004d7e:	6106      	str	r6, [r0, #16]
 8004d80:	b005      	add	sp, #20
 8004d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d86:	f843 2b04 	str.w	r2, [r3], #4
 8004d8a:	e7d8      	b.n	8004d3e <__multiply+0x4e>
 8004d8c:	f8b1 a000 	ldrh.w	sl, [r1]
 8004d90:	f1ba 0f00 	cmp.w	sl, #0
 8004d94:	d023      	beq.n	8004dde <__multiply+0xee>
 8004d96:	46a9      	mov	r9, r5
 8004d98:	f04f 0c00 	mov.w	ip, #0
 8004d9c:	f104 0e14 	add.w	lr, r4, #20
 8004da0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004da4:	f8d9 3000 	ldr.w	r3, [r9]
 8004da8:	fa1f fb87 	uxth.w	fp, r7
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	fb0a 330b 	mla	r3, sl, fp, r3
 8004db2:	4463      	add	r3, ip
 8004db4:	f8d9 c000 	ldr.w	ip, [r9]
 8004db8:	0c3f      	lsrs	r7, r7, #16
 8004dba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004dbe:	fb0a c707 	mla	r7, sl, r7, ip
 8004dc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004dcc:	4572      	cmp	r2, lr
 8004dce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004dd2:	f849 3b04 	str.w	r3, [r9], #4
 8004dd6:	d8e3      	bhi.n	8004da0 <__multiply+0xb0>
 8004dd8:	9b01      	ldr	r3, [sp, #4]
 8004dda:	f845 c003 	str.w	ip, [r5, r3]
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	3104      	adds	r1, #4
 8004de2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004de6:	f1b9 0f00 	cmp.w	r9, #0
 8004dea:	d021      	beq.n	8004e30 <__multiply+0x140>
 8004dec:	46ae      	mov	lr, r5
 8004dee:	f04f 0a00 	mov.w	sl, #0
 8004df2:	682b      	ldr	r3, [r5, #0]
 8004df4:	f104 0c14 	add.w	ip, r4, #20
 8004df8:	f8bc b000 	ldrh.w	fp, [ip]
 8004dfc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	fb09 770b 	mla	r7, r9, fp, r7
 8004e06:	4457      	add	r7, sl
 8004e08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004e0c:	f84e 3b04 	str.w	r3, [lr], #4
 8004e10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004e14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e18:	f8be 3000 	ldrh.w	r3, [lr]
 8004e1c:	4562      	cmp	r2, ip
 8004e1e:	fb09 330a 	mla	r3, r9, sl, r3
 8004e22:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004e26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e2a:	d8e5      	bhi.n	8004df8 <__multiply+0x108>
 8004e2c:	9f01      	ldr	r7, [sp, #4]
 8004e2e:	51eb      	str	r3, [r5, r7]
 8004e30:	3504      	adds	r5, #4
 8004e32:	e79a      	b.n	8004d6a <__multiply+0x7a>
 8004e34:	3e01      	subs	r6, #1
 8004e36:	e79c      	b.n	8004d72 <__multiply+0x82>
 8004e38:	08005942 	.word	0x08005942
 8004e3c:	08005953 	.word	0x08005953

08004e40 <__pow5mult>:
 8004e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e44:	4615      	mov	r5, r2
 8004e46:	f012 0203 	ands.w	r2, r2, #3
 8004e4a:	4607      	mov	r7, r0
 8004e4c:	460e      	mov	r6, r1
 8004e4e:	d007      	beq.n	8004e60 <__pow5mult+0x20>
 8004e50:	4c25      	ldr	r4, [pc, #148]	@ (8004ee8 <__pow5mult+0xa8>)
 8004e52:	3a01      	subs	r2, #1
 8004e54:	2300      	movs	r3, #0
 8004e56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e5a:	f7ff fea1 	bl	8004ba0 <__multadd>
 8004e5e:	4606      	mov	r6, r0
 8004e60:	10ad      	asrs	r5, r5, #2
 8004e62:	d03d      	beq.n	8004ee0 <__pow5mult+0xa0>
 8004e64:	69fc      	ldr	r4, [r7, #28]
 8004e66:	b97c      	cbnz	r4, 8004e88 <__pow5mult+0x48>
 8004e68:	2010      	movs	r0, #16
 8004e6a:	f7ff fd81 	bl	8004970 <malloc>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	61f8      	str	r0, [r7, #28]
 8004e72:	b928      	cbnz	r0, 8004e80 <__pow5mult+0x40>
 8004e74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004e78:	4b1c      	ldr	r3, [pc, #112]	@ (8004eec <__pow5mult+0xac>)
 8004e7a:	481d      	ldr	r0, [pc, #116]	@ (8004ef0 <__pow5mult+0xb0>)
 8004e7c:	f000 fba0 	bl	80055c0 <__assert_func>
 8004e80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e84:	6004      	str	r4, [r0, #0]
 8004e86:	60c4      	str	r4, [r0, #12]
 8004e88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004e8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e90:	b94c      	cbnz	r4, 8004ea6 <__pow5mult+0x66>
 8004e92:	f240 2171 	movw	r1, #625	@ 0x271
 8004e96:	4638      	mov	r0, r7
 8004e98:	f7ff ff14 	bl	8004cc4 <__i2b>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ea4:	6003      	str	r3, [r0, #0]
 8004ea6:	f04f 0900 	mov.w	r9, #0
 8004eaa:	07eb      	lsls	r3, r5, #31
 8004eac:	d50a      	bpl.n	8004ec4 <__pow5mult+0x84>
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4622      	mov	r2, r4
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	f7ff ff1c 	bl	8004cf0 <__multiply>
 8004eb8:	4680      	mov	r8, r0
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	f7ff fe4d 	bl	8004b5c <_Bfree>
 8004ec2:	4646      	mov	r6, r8
 8004ec4:	106d      	asrs	r5, r5, #1
 8004ec6:	d00b      	beq.n	8004ee0 <__pow5mult+0xa0>
 8004ec8:	6820      	ldr	r0, [r4, #0]
 8004eca:	b938      	cbnz	r0, 8004edc <__pow5mult+0x9c>
 8004ecc:	4622      	mov	r2, r4
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	f7ff ff0d 	bl	8004cf0 <__multiply>
 8004ed6:	6020      	str	r0, [r4, #0]
 8004ed8:	f8c0 9000 	str.w	r9, [r0]
 8004edc:	4604      	mov	r4, r0
 8004ede:	e7e4      	b.n	8004eaa <__pow5mult+0x6a>
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ee6:	bf00      	nop
 8004ee8:	080059ac 	.word	0x080059ac
 8004eec:	080058d3 	.word	0x080058d3
 8004ef0:	08005953 	.word	0x08005953

08004ef4 <__lshift>:
 8004ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef8:	460c      	mov	r4, r1
 8004efa:	4607      	mov	r7, r0
 8004efc:	4691      	mov	r9, r2
 8004efe:	6923      	ldr	r3, [r4, #16]
 8004f00:	6849      	ldr	r1, [r1, #4]
 8004f02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004f06:	68a3      	ldr	r3, [r4, #8]
 8004f08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004f0c:	f108 0601 	add.w	r6, r8, #1
 8004f10:	42b3      	cmp	r3, r6
 8004f12:	db0b      	blt.n	8004f2c <__lshift+0x38>
 8004f14:	4638      	mov	r0, r7
 8004f16:	f7ff fde1 	bl	8004adc <_Balloc>
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	b948      	cbnz	r0, 8004f32 <__lshift+0x3e>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004f24:	4b27      	ldr	r3, [pc, #156]	@ (8004fc4 <__lshift+0xd0>)
 8004f26:	4828      	ldr	r0, [pc, #160]	@ (8004fc8 <__lshift+0xd4>)
 8004f28:	f000 fb4a 	bl	80055c0 <__assert_func>
 8004f2c:	3101      	adds	r1, #1
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	e7ee      	b.n	8004f10 <__lshift+0x1c>
 8004f32:	2300      	movs	r3, #0
 8004f34:	f100 0114 	add.w	r1, r0, #20
 8004f38:	f100 0210 	add.w	r2, r0, #16
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	4553      	cmp	r3, sl
 8004f40:	db33      	blt.n	8004faa <__lshift+0xb6>
 8004f42:	6920      	ldr	r0, [r4, #16]
 8004f44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f48:	f104 0314 	add.w	r3, r4, #20
 8004f4c:	f019 091f 	ands.w	r9, r9, #31
 8004f50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004f58:	d02b      	beq.n	8004fb2 <__lshift+0xbe>
 8004f5a:	468a      	mov	sl, r1
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f1c9 0e20 	rsb	lr, r9, #32
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	fa00 f009 	lsl.w	r0, r0, r9
 8004f68:	4310      	orrs	r0, r2
 8004f6a:	f84a 0b04 	str.w	r0, [sl], #4
 8004f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f72:	459c      	cmp	ip, r3
 8004f74:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f78:	d8f3      	bhi.n	8004f62 <__lshift+0x6e>
 8004f7a:	ebac 0304 	sub.w	r3, ip, r4
 8004f7e:	3b15      	subs	r3, #21
 8004f80:	f023 0303 	bic.w	r3, r3, #3
 8004f84:	3304      	adds	r3, #4
 8004f86:	f104 0015 	add.w	r0, r4, #21
 8004f8a:	4584      	cmp	ip, r0
 8004f8c:	bf38      	it	cc
 8004f8e:	2304      	movcc	r3, #4
 8004f90:	50ca      	str	r2, [r1, r3]
 8004f92:	b10a      	cbz	r2, 8004f98 <__lshift+0xa4>
 8004f94:	f108 0602 	add.w	r6, r8, #2
 8004f98:	3e01      	subs	r6, #1
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	612e      	str	r6, [r5, #16]
 8004fa0:	f7ff fddc 	bl	8004b5c <_Bfree>
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004faa:	f842 0f04 	str.w	r0, [r2, #4]!
 8004fae:	3301      	adds	r3, #1
 8004fb0:	e7c5      	b.n	8004f3e <__lshift+0x4a>
 8004fb2:	3904      	subs	r1, #4
 8004fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fb8:	459c      	cmp	ip, r3
 8004fba:	f841 2f04 	str.w	r2, [r1, #4]!
 8004fbe:	d8f9      	bhi.n	8004fb4 <__lshift+0xc0>
 8004fc0:	e7ea      	b.n	8004f98 <__lshift+0xa4>
 8004fc2:	bf00      	nop
 8004fc4:	08005942 	.word	0x08005942
 8004fc8:	08005953 	.word	0x08005953

08004fcc <__mcmp>:
 8004fcc:	4603      	mov	r3, r0
 8004fce:	690a      	ldr	r2, [r1, #16]
 8004fd0:	6900      	ldr	r0, [r0, #16]
 8004fd2:	b530      	push	{r4, r5, lr}
 8004fd4:	1a80      	subs	r0, r0, r2
 8004fd6:	d10e      	bne.n	8004ff6 <__mcmp+0x2a>
 8004fd8:	3314      	adds	r3, #20
 8004fda:	3114      	adds	r1, #20
 8004fdc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004fe0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004fe4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004fe8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004fec:	4295      	cmp	r5, r2
 8004fee:	d003      	beq.n	8004ff8 <__mcmp+0x2c>
 8004ff0:	d205      	bcs.n	8004ffe <__mcmp+0x32>
 8004ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff6:	bd30      	pop	{r4, r5, pc}
 8004ff8:	42a3      	cmp	r3, r4
 8004ffa:	d3f3      	bcc.n	8004fe4 <__mcmp+0x18>
 8004ffc:	e7fb      	b.n	8004ff6 <__mcmp+0x2a>
 8004ffe:	2001      	movs	r0, #1
 8005000:	e7f9      	b.n	8004ff6 <__mcmp+0x2a>
	...

08005004 <__mdiff>:
 8005004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005008:	4689      	mov	r9, r1
 800500a:	4606      	mov	r6, r0
 800500c:	4611      	mov	r1, r2
 800500e:	4648      	mov	r0, r9
 8005010:	4614      	mov	r4, r2
 8005012:	f7ff ffdb 	bl	8004fcc <__mcmp>
 8005016:	1e05      	subs	r5, r0, #0
 8005018:	d112      	bne.n	8005040 <__mdiff+0x3c>
 800501a:	4629      	mov	r1, r5
 800501c:	4630      	mov	r0, r6
 800501e:	f7ff fd5d 	bl	8004adc <_Balloc>
 8005022:	4602      	mov	r2, r0
 8005024:	b928      	cbnz	r0, 8005032 <__mdiff+0x2e>
 8005026:	f240 2137 	movw	r1, #567	@ 0x237
 800502a:	4b3e      	ldr	r3, [pc, #248]	@ (8005124 <__mdiff+0x120>)
 800502c:	483e      	ldr	r0, [pc, #248]	@ (8005128 <__mdiff+0x124>)
 800502e:	f000 fac7 	bl	80055c0 <__assert_func>
 8005032:	2301      	movs	r3, #1
 8005034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005038:	4610      	mov	r0, r2
 800503a:	b003      	add	sp, #12
 800503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005040:	bfbc      	itt	lt
 8005042:	464b      	movlt	r3, r9
 8005044:	46a1      	movlt	r9, r4
 8005046:	4630      	mov	r0, r6
 8005048:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800504c:	bfba      	itte	lt
 800504e:	461c      	movlt	r4, r3
 8005050:	2501      	movlt	r5, #1
 8005052:	2500      	movge	r5, #0
 8005054:	f7ff fd42 	bl	8004adc <_Balloc>
 8005058:	4602      	mov	r2, r0
 800505a:	b918      	cbnz	r0, 8005064 <__mdiff+0x60>
 800505c:	f240 2145 	movw	r1, #581	@ 0x245
 8005060:	4b30      	ldr	r3, [pc, #192]	@ (8005124 <__mdiff+0x120>)
 8005062:	e7e3      	b.n	800502c <__mdiff+0x28>
 8005064:	f100 0b14 	add.w	fp, r0, #20
 8005068:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800506c:	f109 0310 	add.w	r3, r9, #16
 8005070:	60c5      	str	r5, [r0, #12]
 8005072:	f04f 0c00 	mov.w	ip, #0
 8005076:	f109 0514 	add.w	r5, r9, #20
 800507a:	46d9      	mov	r9, fp
 800507c:	6926      	ldr	r6, [r4, #16]
 800507e:	f104 0e14 	add.w	lr, r4, #20
 8005082:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005086:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	9b01      	ldr	r3, [sp, #4]
 800508e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005092:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005096:	b281      	uxth	r1, r0
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	fa1f f38a 	uxth.w	r3, sl
 800509e:	1a5b      	subs	r3, r3, r1
 80050a0:	0c00      	lsrs	r0, r0, #16
 80050a2:	4463      	add	r3, ip
 80050a4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80050a8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80050b2:	4576      	cmp	r6, lr
 80050b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80050b8:	f849 3b04 	str.w	r3, [r9], #4
 80050bc:	d8e6      	bhi.n	800508c <__mdiff+0x88>
 80050be:	1b33      	subs	r3, r6, r4
 80050c0:	3b15      	subs	r3, #21
 80050c2:	f023 0303 	bic.w	r3, r3, #3
 80050c6:	3415      	adds	r4, #21
 80050c8:	3304      	adds	r3, #4
 80050ca:	42a6      	cmp	r6, r4
 80050cc:	bf38      	it	cc
 80050ce:	2304      	movcc	r3, #4
 80050d0:	441d      	add	r5, r3
 80050d2:	445b      	add	r3, fp
 80050d4:	461e      	mov	r6, r3
 80050d6:	462c      	mov	r4, r5
 80050d8:	4544      	cmp	r4, r8
 80050da:	d30e      	bcc.n	80050fa <__mdiff+0xf6>
 80050dc:	f108 0103 	add.w	r1, r8, #3
 80050e0:	1b49      	subs	r1, r1, r5
 80050e2:	f021 0103 	bic.w	r1, r1, #3
 80050e6:	3d03      	subs	r5, #3
 80050e8:	45a8      	cmp	r8, r5
 80050ea:	bf38      	it	cc
 80050ec:	2100      	movcc	r1, #0
 80050ee:	440b      	add	r3, r1
 80050f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80050f4:	b199      	cbz	r1, 800511e <__mdiff+0x11a>
 80050f6:	6117      	str	r7, [r2, #16]
 80050f8:	e79e      	b.n	8005038 <__mdiff+0x34>
 80050fa:	46e6      	mov	lr, ip
 80050fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8005100:	fa1f fc81 	uxth.w	ip, r1
 8005104:	44f4      	add	ip, lr
 8005106:	0c08      	lsrs	r0, r1, #16
 8005108:	4471      	add	r1, lr
 800510a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800510e:	b289      	uxth	r1, r1
 8005110:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005114:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005118:	f846 1b04 	str.w	r1, [r6], #4
 800511c:	e7dc      	b.n	80050d8 <__mdiff+0xd4>
 800511e:	3f01      	subs	r7, #1
 8005120:	e7e6      	b.n	80050f0 <__mdiff+0xec>
 8005122:	bf00      	nop
 8005124:	08005942 	.word	0x08005942
 8005128:	08005953 	.word	0x08005953

0800512c <__d2b>:
 800512c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005130:	2101      	movs	r1, #1
 8005132:	4690      	mov	r8, r2
 8005134:	4699      	mov	r9, r3
 8005136:	9e08      	ldr	r6, [sp, #32]
 8005138:	f7ff fcd0 	bl	8004adc <_Balloc>
 800513c:	4604      	mov	r4, r0
 800513e:	b930      	cbnz	r0, 800514e <__d2b+0x22>
 8005140:	4602      	mov	r2, r0
 8005142:	f240 310f 	movw	r1, #783	@ 0x30f
 8005146:	4b23      	ldr	r3, [pc, #140]	@ (80051d4 <__d2b+0xa8>)
 8005148:	4823      	ldr	r0, [pc, #140]	@ (80051d8 <__d2b+0xac>)
 800514a:	f000 fa39 	bl	80055c0 <__assert_func>
 800514e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005152:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005156:	b10d      	cbz	r5, 800515c <__d2b+0x30>
 8005158:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	f1b8 0300 	subs.w	r3, r8, #0
 8005162:	d024      	beq.n	80051ae <__d2b+0x82>
 8005164:	4668      	mov	r0, sp
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	f7ff fd7f 	bl	8004c6a <__lo0bits>
 800516c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005170:	b1d8      	cbz	r0, 80051aa <__d2b+0x7e>
 8005172:	f1c0 0320 	rsb	r3, r0, #32
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	430b      	orrs	r3, r1
 800517c:	40c2      	lsrs	r2, r0
 800517e:	6163      	str	r3, [r4, #20]
 8005180:	9201      	str	r2, [sp, #4]
 8005182:	9b01      	ldr	r3, [sp, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf0c      	ite	eq
 8005188:	2201      	moveq	r2, #1
 800518a:	2202      	movne	r2, #2
 800518c:	61a3      	str	r3, [r4, #24]
 800518e:	6122      	str	r2, [r4, #16]
 8005190:	b1ad      	cbz	r5, 80051be <__d2b+0x92>
 8005192:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005196:	4405      	add	r5, r0
 8005198:	6035      	str	r5, [r6, #0]
 800519a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800519e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a0:	6018      	str	r0, [r3, #0]
 80051a2:	4620      	mov	r0, r4
 80051a4:	b002      	add	sp, #8
 80051a6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80051aa:	6161      	str	r1, [r4, #20]
 80051ac:	e7e9      	b.n	8005182 <__d2b+0x56>
 80051ae:	a801      	add	r0, sp, #4
 80051b0:	f7ff fd5b 	bl	8004c6a <__lo0bits>
 80051b4:	9b01      	ldr	r3, [sp, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	6163      	str	r3, [r4, #20]
 80051ba:	3020      	adds	r0, #32
 80051bc:	e7e7      	b.n	800518e <__d2b+0x62>
 80051be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80051c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80051c6:	6030      	str	r0, [r6, #0]
 80051c8:	6918      	ldr	r0, [r3, #16]
 80051ca:	f7ff fd2f 	bl	8004c2c <__hi0bits>
 80051ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80051d2:	e7e4      	b.n	800519e <__d2b+0x72>
 80051d4:	08005942 	.word	0x08005942
 80051d8:	08005953 	.word	0x08005953

080051dc <__sfputc_r>:
 80051dc:	6893      	ldr	r3, [r2, #8]
 80051de:	b410      	push	{r4}
 80051e0:	3b01      	subs	r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	6093      	str	r3, [r2, #8]
 80051e6:	da07      	bge.n	80051f8 <__sfputc_r+0x1c>
 80051e8:	6994      	ldr	r4, [r2, #24]
 80051ea:	42a3      	cmp	r3, r4
 80051ec:	db01      	blt.n	80051f2 <__sfputc_r+0x16>
 80051ee:	290a      	cmp	r1, #10
 80051f0:	d102      	bne.n	80051f8 <__sfputc_r+0x1c>
 80051f2:	bc10      	pop	{r4}
 80051f4:	f000 b932 	b.w	800545c <__swbuf_r>
 80051f8:	6813      	ldr	r3, [r2, #0]
 80051fa:	1c58      	adds	r0, r3, #1
 80051fc:	6010      	str	r0, [r2, #0]
 80051fe:	7019      	strb	r1, [r3, #0]
 8005200:	4608      	mov	r0, r1
 8005202:	bc10      	pop	{r4}
 8005204:	4770      	bx	lr

08005206 <__sfputs_r>:
 8005206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005208:	4606      	mov	r6, r0
 800520a:	460f      	mov	r7, r1
 800520c:	4614      	mov	r4, r2
 800520e:	18d5      	adds	r5, r2, r3
 8005210:	42ac      	cmp	r4, r5
 8005212:	d101      	bne.n	8005218 <__sfputs_r+0x12>
 8005214:	2000      	movs	r0, #0
 8005216:	e007      	b.n	8005228 <__sfputs_r+0x22>
 8005218:	463a      	mov	r2, r7
 800521a:	4630      	mov	r0, r6
 800521c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005220:	f7ff ffdc 	bl	80051dc <__sfputc_r>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d1f3      	bne.n	8005210 <__sfputs_r+0xa>
 8005228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800522c <_vfiprintf_r>:
 800522c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005230:	460d      	mov	r5, r1
 8005232:	4614      	mov	r4, r2
 8005234:	4698      	mov	r8, r3
 8005236:	4606      	mov	r6, r0
 8005238:	b09d      	sub	sp, #116	@ 0x74
 800523a:	b118      	cbz	r0, 8005244 <_vfiprintf_r+0x18>
 800523c:	6a03      	ldr	r3, [r0, #32]
 800523e:	b90b      	cbnz	r3, 8005244 <_vfiprintf_r+0x18>
 8005240:	f7fe fbe2 	bl	8003a08 <__sinit>
 8005244:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005246:	07d9      	lsls	r1, r3, #31
 8005248:	d405      	bmi.n	8005256 <_vfiprintf_r+0x2a>
 800524a:	89ab      	ldrh	r3, [r5, #12]
 800524c:	059a      	lsls	r2, r3, #22
 800524e:	d402      	bmi.n	8005256 <_vfiprintf_r+0x2a>
 8005250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005252:	f7fe fce2 	bl	8003c1a <__retarget_lock_acquire_recursive>
 8005256:	89ab      	ldrh	r3, [r5, #12]
 8005258:	071b      	lsls	r3, r3, #28
 800525a:	d501      	bpl.n	8005260 <_vfiprintf_r+0x34>
 800525c:	692b      	ldr	r3, [r5, #16]
 800525e:	b99b      	cbnz	r3, 8005288 <_vfiprintf_r+0x5c>
 8005260:	4629      	mov	r1, r5
 8005262:	4630      	mov	r0, r6
 8005264:	f000 f938 	bl	80054d8 <__swsetup_r>
 8005268:	b170      	cbz	r0, 8005288 <_vfiprintf_r+0x5c>
 800526a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800526c:	07dc      	lsls	r4, r3, #31
 800526e:	d504      	bpl.n	800527a <_vfiprintf_r+0x4e>
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	b01d      	add	sp, #116	@ 0x74
 8005276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527a:	89ab      	ldrh	r3, [r5, #12]
 800527c:	0598      	lsls	r0, r3, #22
 800527e:	d4f7      	bmi.n	8005270 <_vfiprintf_r+0x44>
 8005280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005282:	f7fe fccb 	bl	8003c1c <__retarget_lock_release_recursive>
 8005286:	e7f3      	b.n	8005270 <_vfiprintf_r+0x44>
 8005288:	2300      	movs	r3, #0
 800528a:	9309      	str	r3, [sp, #36]	@ 0x24
 800528c:	2320      	movs	r3, #32
 800528e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005292:	2330      	movs	r3, #48	@ 0x30
 8005294:	f04f 0901 	mov.w	r9, #1
 8005298:	f8cd 800c 	str.w	r8, [sp, #12]
 800529c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005448 <_vfiprintf_r+0x21c>
 80052a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052a4:	4623      	mov	r3, r4
 80052a6:	469a      	mov	sl, r3
 80052a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052ac:	b10a      	cbz	r2, 80052b2 <_vfiprintf_r+0x86>
 80052ae:	2a25      	cmp	r2, #37	@ 0x25
 80052b0:	d1f9      	bne.n	80052a6 <_vfiprintf_r+0x7a>
 80052b2:	ebba 0b04 	subs.w	fp, sl, r4
 80052b6:	d00b      	beq.n	80052d0 <_vfiprintf_r+0xa4>
 80052b8:	465b      	mov	r3, fp
 80052ba:	4622      	mov	r2, r4
 80052bc:	4629      	mov	r1, r5
 80052be:	4630      	mov	r0, r6
 80052c0:	f7ff ffa1 	bl	8005206 <__sfputs_r>
 80052c4:	3001      	adds	r0, #1
 80052c6:	f000 80a7 	beq.w	8005418 <_vfiprintf_r+0x1ec>
 80052ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052cc:	445a      	add	r2, fp
 80052ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80052d0:	f89a 3000 	ldrb.w	r3, [sl]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 809f 	beq.w	8005418 <_vfiprintf_r+0x1ec>
 80052da:	2300      	movs	r3, #0
 80052dc:	f04f 32ff 	mov.w	r2, #4294967295
 80052e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052e4:	f10a 0a01 	add.w	sl, sl, #1
 80052e8:	9304      	str	r3, [sp, #16]
 80052ea:	9307      	str	r3, [sp, #28]
 80052ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80052f2:	4654      	mov	r4, sl
 80052f4:	2205      	movs	r2, #5
 80052f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052fa:	4853      	ldr	r0, [pc, #332]	@ (8005448 <_vfiprintf_r+0x21c>)
 80052fc:	f7fe fc8f 	bl	8003c1e <memchr>
 8005300:	9a04      	ldr	r2, [sp, #16]
 8005302:	b9d8      	cbnz	r0, 800533c <_vfiprintf_r+0x110>
 8005304:	06d1      	lsls	r1, r2, #27
 8005306:	bf44      	itt	mi
 8005308:	2320      	movmi	r3, #32
 800530a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800530e:	0713      	lsls	r3, r2, #28
 8005310:	bf44      	itt	mi
 8005312:	232b      	movmi	r3, #43	@ 0x2b
 8005314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005318:	f89a 3000 	ldrb.w	r3, [sl]
 800531c:	2b2a      	cmp	r3, #42	@ 0x2a
 800531e:	d015      	beq.n	800534c <_vfiprintf_r+0x120>
 8005320:	4654      	mov	r4, sl
 8005322:	2000      	movs	r0, #0
 8005324:	f04f 0c0a 	mov.w	ip, #10
 8005328:	9a07      	ldr	r2, [sp, #28]
 800532a:	4621      	mov	r1, r4
 800532c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005330:	3b30      	subs	r3, #48	@ 0x30
 8005332:	2b09      	cmp	r3, #9
 8005334:	d94b      	bls.n	80053ce <_vfiprintf_r+0x1a2>
 8005336:	b1b0      	cbz	r0, 8005366 <_vfiprintf_r+0x13a>
 8005338:	9207      	str	r2, [sp, #28]
 800533a:	e014      	b.n	8005366 <_vfiprintf_r+0x13a>
 800533c:	eba0 0308 	sub.w	r3, r0, r8
 8005340:	fa09 f303 	lsl.w	r3, r9, r3
 8005344:	4313      	orrs	r3, r2
 8005346:	46a2      	mov	sl, r4
 8005348:	9304      	str	r3, [sp, #16]
 800534a:	e7d2      	b.n	80052f2 <_vfiprintf_r+0xc6>
 800534c:	9b03      	ldr	r3, [sp, #12]
 800534e:	1d19      	adds	r1, r3, #4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	9103      	str	r1, [sp, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	bfbb      	ittet	lt
 8005358:	425b      	neglt	r3, r3
 800535a:	f042 0202 	orrlt.w	r2, r2, #2
 800535e:	9307      	strge	r3, [sp, #28]
 8005360:	9307      	strlt	r3, [sp, #28]
 8005362:	bfb8      	it	lt
 8005364:	9204      	strlt	r2, [sp, #16]
 8005366:	7823      	ldrb	r3, [r4, #0]
 8005368:	2b2e      	cmp	r3, #46	@ 0x2e
 800536a:	d10a      	bne.n	8005382 <_vfiprintf_r+0x156>
 800536c:	7863      	ldrb	r3, [r4, #1]
 800536e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005370:	d132      	bne.n	80053d8 <_vfiprintf_r+0x1ac>
 8005372:	9b03      	ldr	r3, [sp, #12]
 8005374:	3402      	adds	r4, #2
 8005376:	1d1a      	adds	r2, r3, #4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	9203      	str	r2, [sp, #12]
 800537c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005380:	9305      	str	r3, [sp, #20]
 8005382:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800544c <_vfiprintf_r+0x220>
 8005386:	2203      	movs	r2, #3
 8005388:	4650      	mov	r0, sl
 800538a:	7821      	ldrb	r1, [r4, #0]
 800538c:	f7fe fc47 	bl	8003c1e <memchr>
 8005390:	b138      	cbz	r0, 80053a2 <_vfiprintf_r+0x176>
 8005392:	2240      	movs	r2, #64	@ 0x40
 8005394:	9b04      	ldr	r3, [sp, #16]
 8005396:	eba0 000a 	sub.w	r0, r0, sl
 800539a:	4082      	lsls	r2, r0
 800539c:	4313      	orrs	r3, r2
 800539e:	3401      	adds	r4, #1
 80053a0:	9304      	str	r3, [sp, #16]
 80053a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a6:	2206      	movs	r2, #6
 80053a8:	4829      	ldr	r0, [pc, #164]	@ (8005450 <_vfiprintf_r+0x224>)
 80053aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053ae:	f7fe fc36 	bl	8003c1e <memchr>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d03f      	beq.n	8005436 <_vfiprintf_r+0x20a>
 80053b6:	4b27      	ldr	r3, [pc, #156]	@ (8005454 <_vfiprintf_r+0x228>)
 80053b8:	bb1b      	cbnz	r3, 8005402 <_vfiprintf_r+0x1d6>
 80053ba:	9b03      	ldr	r3, [sp, #12]
 80053bc:	3307      	adds	r3, #7
 80053be:	f023 0307 	bic.w	r3, r3, #7
 80053c2:	3308      	adds	r3, #8
 80053c4:	9303      	str	r3, [sp, #12]
 80053c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053c8:	443b      	add	r3, r7
 80053ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80053cc:	e76a      	b.n	80052a4 <_vfiprintf_r+0x78>
 80053ce:	460c      	mov	r4, r1
 80053d0:	2001      	movs	r0, #1
 80053d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80053d6:	e7a8      	b.n	800532a <_vfiprintf_r+0xfe>
 80053d8:	2300      	movs	r3, #0
 80053da:	f04f 0c0a 	mov.w	ip, #10
 80053de:	4619      	mov	r1, r3
 80053e0:	3401      	adds	r4, #1
 80053e2:	9305      	str	r3, [sp, #20]
 80053e4:	4620      	mov	r0, r4
 80053e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ea:	3a30      	subs	r2, #48	@ 0x30
 80053ec:	2a09      	cmp	r2, #9
 80053ee:	d903      	bls.n	80053f8 <_vfiprintf_r+0x1cc>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0c6      	beq.n	8005382 <_vfiprintf_r+0x156>
 80053f4:	9105      	str	r1, [sp, #20]
 80053f6:	e7c4      	b.n	8005382 <_vfiprintf_r+0x156>
 80053f8:	4604      	mov	r4, r0
 80053fa:	2301      	movs	r3, #1
 80053fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005400:	e7f0      	b.n	80053e4 <_vfiprintf_r+0x1b8>
 8005402:	ab03      	add	r3, sp, #12
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	462a      	mov	r2, r5
 8005408:	4630      	mov	r0, r6
 800540a:	4b13      	ldr	r3, [pc, #76]	@ (8005458 <_vfiprintf_r+0x22c>)
 800540c:	a904      	add	r1, sp, #16
 800540e:	f7fd fdf5 	bl	8002ffc <_printf_float>
 8005412:	4607      	mov	r7, r0
 8005414:	1c78      	adds	r0, r7, #1
 8005416:	d1d6      	bne.n	80053c6 <_vfiprintf_r+0x19a>
 8005418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800541a:	07d9      	lsls	r1, r3, #31
 800541c:	d405      	bmi.n	800542a <_vfiprintf_r+0x1fe>
 800541e:	89ab      	ldrh	r3, [r5, #12]
 8005420:	059a      	lsls	r2, r3, #22
 8005422:	d402      	bmi.n	800542a <_vfiprintf_r+0x1fe>
 8005424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005426:	f7fe fbf9 	bl	8003c1c <__retarget_lock_release_recursive>
 800542a:	89ab      	ldrh	r3, [r5, #12]
 800542c:	065b      	lsls	r3, r3, #25
 800542e:	f53f af1f 	bmi.w	8005270 <_vfiprintf_r+0x44>
 8005432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005434:	e71e      	b.n	8005274 <_vfiprintf_r+0x48>
 8005436:	ab03      	add	r3, sp, #12
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	462a      	mov	r2, r5
 800543c:	4630      	mov	r0, r6
 800543e:	4b06      	ldr	r3, [pc, #24]	@ (8005458 <_vfiprintf_r+0x22c>)
 8005440:	a904      	add	r1, sp, #16
 8005442:	f7fe f879 	bl	8003538 <_printf_i>
 8005446:	e7e4      	b.n	8005412 <_vfiprintf_r+0x1e6>
 8005448:	08005aa8 	.word	0x08005aa8
 800544c:	08005aae 	.word	0x08005aae
 8005450:	08005ab2 	.word	0x08005ab2
 8005454:	08002ffd 	.word	0x08002ffd
 8005458:	08005207 	.word	0x08005207

0800545c <__swbuf_r>:
 800545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545e:	460e      	mov	r6, r1
 8005460:	4614      	mov	r4, r2
 8005462:	4605      	mov	r5, r0
 8005464:	b118      	cbz	r0, 800546e <__swbuf_r+0x12>
 8005466:	6a03      	ldr	r3, [r0, #32]
 8005468:	b90b      	cbnz	r3, 800546e <__swbuf_r+0x12>
 800546a:	f7fe facd 	bl	8003a08 <__sinit>
 800546e:	69a3      	ldr	r3, [r4, #24]
 8005470:	60a3      	str	r3, [r4, #8]
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	071a      	lsls	r2, r3, #28
 8005476:	d501      	bpl.n	800547c <__swbuf_r+0x20>
 8005478:	6923      	ldr	r3, [r4, #16]
 800547a:	b943      	cbnz	r3, 800548e <__swbuf_r+0x32>
 800547c:	4621      	mov	r1, r4
 800547e:	4628      	mov	r0, r5
 8005480:	f000 f82a 	bl	80054d8 <__swsetup_r>
 8005484:	b118      	cbz	r0, 800548e <__swbuf_r+0x32>
 8005486:	f04f 37ff 	mov.w	r7, #4294967295
 800548a:	4638      	mov	r0, r7
 800548c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	6922      	ldr	r2, [r4, #16]
 8005492:	b2f6      	uxtb	r6, r6
 8005494:	1a98      	subs	r0, r3, r2
 8005496:	6963      	ldr	r3, [r4, #20]
 8005498:	4637      	mov	r7, r6
 800549a:	4283      	cmp	r3, r0
 800549c:	dc05      	bgt.n	80054aa <__swbuf_r+0x4e>
 800549e:	4621      	mov	r1, r4
 80054a0:	4628      	mov	r0, r5
 80054a2:	f7fe f9e9 	bl	8003878 <_fflush_r>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d1ed      	bne.n	8005486 <__swbuf_r+0x2a>
 80054aa:	68a3      	ldr	r3, [r4, #8]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	60a3      	str	r3, [r4, #8]
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	6022      	str	r2, [r4, #0]
 80054b6:	701e      	strb	r6, [r3, #0]
 80054b8:	6962      	ldr	r2, [r4, #20]
 80054ba:	1c43      	adds	r3, r0, #1
 80054bc:	429a      	cmp	r2, r3
 80054be:	d004      	beq.n	80054ca <__swbuf_r+0x6e>
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	07db      	lsls	r3, r3, #31
 80054c4:	d5e1      	bpl.n	800548a <__swbuf_r+0x2e>
 80054c6:	2e0a      	cmp	r6, #10
 80054c8:	d1df      	bne.n	800548a <__swbuf_r+0x2e>
 80054ca:	4621      	mov	r1, r4
 80054cc:	4628      	mov	r0, r5
 80054ce:	f7fe f9d3 	bl	8003878 <_fflush_r>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d0d9      	beq.n	800548a <__swbuf_r+0x2e>
 80054d6:	e7d6      	b.n	8005486 <__swbuf_r+0x2a>

080054d8 <__swsetup_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4b29      	ldr	r3, [pc, #164]	@ (8005580 <__swsetup_r+0xa8>)
 80054dc:	4605      	mov	r5, r0
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	460c      	mov	r4, r1
 80054e2:	b118      	cbz	r0, 80054ec <__swsetup_r+0x14>
 80054e4:	6a03      	ldr	r3, [r0, #32]
 80054e6:	b90b      	cbnz	r3, 80054ec <__swsetup_r+0x14>
 80054e8:	f7fe fa8e 	bl	8003a08 <__sinit>
 80054ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054f0:	0719      	lsls	r1, r3, #28
 80054f2:	d422      	bmi.n	800553a <__swsetup_r+0x62>
 80054f4:	06da      	lsls	r2, r3, #27
 80054f6:	d407      	bmi.n	8005508 <__swsetup_r+0x30>
 80054f8:	2209      	movs	r2, #9
 80054fa:	602a      	str	r2, [r5, #0]
 80054fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005500:	f04f 30ff 	mov.w	r0, #4294967295
 8005504:	81a3      	strh	r3, [r4, #12]
 8005506:	e033      	b.n	8005570 <__swsetup_r+0x98>
 8005508:	0758      	lsls	r0, r3, #29
 800550a:	d512      	bpl.n	8005532 <__swsetup_r+0x5a>
 800550c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800550e:	b141      	cbz	r1, 8005522 <__swsetup_r+0x4a>
 8005510:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005514:	4299      	cmp	r1, r3
 8005516:	d002      	beq.n	800551e <__swsetup_r+0x46>
 8005518:	4628      	mov	r0, r5
 800551a:	f7ff f9e1 	bl	80048e0 <_free_r>
 800551e:	2300      	movs	r3, #0
 8005520:	6363      	str	r3, [r4, #52]	@ 0x34
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005528:	81a3      	strh	r3, [r4, #12]
 800552a:	2300      	movs	r3, #0
 800552c:	6063      	str	r3, [r4, #4]
 800552e:	6923      	ldr	r3, [r4, #16]
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	89a3      	ldrh	r3, [r4, #12]
 8005534:	f043 0308 	orr.w	r3, r3, #8
 8005538:	81a3      	strh	r3, [r4, #12]
 800553a:	6923      	ldr	r3, [r4, #16]
 800553c:	b94b      	cbnz	r3, 8005552 <__swsetup_r+0x7a>
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005548:	d003      	beq.n	8005552 <__swsetup_r+0x7a>
 800554a:	4621      	mov	r1, r4
 800554c:	4628      	mov	r0, r5
 800554e:	f000 f8c0 	bl	80056d2 <__smakebuf_r>
 8005552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005556:	f013 0201 	ands.w	r2, r3, #1
 800555a:	d00a      	beq.n	8005572 <__swsetup_r+0x9a>
 800555c:	2200      	movs	r2, #0
 800555e:	60a2      	str	r2, [r4, #8]
 8005560:	6962      	ldr	r2, [r4, #20]
 8005562:	4252      	negs	r2, r2
 8005564:	61a2      	str	r2, [r4, #24]
 8005566:	6922      	ldr	r2, [r4, #16]
 8005568:	b942      	cbnz	r2, 800557c <__swsetup_r+0xa4>
 800556a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800556e:	d1c5      	bne.n	80054fc <__swsetup_r+0x24>
 8005570:	bd38      	pop	{r3, r4, r5, pc}
 8005572:	0799      	lsls	r1, r3, #30
 8005574:	bf58      	it	pl
 8005576:	6962      	ldrpl	r2, [r4, #20]
 8005578:	60a2      	str	r2, [r4, #8]
 800557a:	e7f4      	b.n	8005566 <__swsetup_r+0x8e>
 800557c:	2000      	movs	r0, #0
 800557e:	e7f7      	b.n	8005570 <__swsetup_r+0x98>
 8005580:	20000018 	.word	0x20000018

08005584 <_sbrk_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	2300      	movs	r3, #0
 8005588:	4d05      	ldr	r5, [pc, #20]	@ (80055a0 <_sbrk_r+0x1c>)
 800558a:	4604      	mov	r4, r0
 800558c:	4608      	mov	r0, r1
 800558e:	602b      	str	r3, [r5, #0]
 8005590:	f7fb ff66 	bl	8001460 <_sbrk>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d102      	bne.n	800559e <_sbrk_r+0x1a>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	b103      	cbz	r3, 800559e <_sbrk_r+0x1a>
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	bd38      	pop	{r3, r4, r5, pc}
 80055a0:	20000364 	.word	0x20000364

080055a4 <memcpy>:
 80055a4:	440a      	add	r2, r1
 80055a6:	4291      	cmp	r1, r2
 80055a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055ac:	d100      	bne.n	80055b0 <memcpy+0xc>
 80055ae:	4770      	bx	lr
 80055b0:	b510      	push	{r4, lr}
 80055b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055b6:	4291      	cmp	r1, r2
 80055b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055bc:	d1f9      	bne.n	80055b2 <memcpy+0xe>
 80055be:	bd10      	pop	{r4, pc}

080055c0 <__assert_func>:
 80055c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055c2:	4614      	mov	r4, r2
 80055c4:	461a      	mov	r2, r3
 80055c6:	4b09      	ldr	r3, [pc, #36]	@ (80055ec <__assert_func+0x2c>)
 80055c8:	4605      	mov	r5, r0
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68d8      	ldr	r0, [r3, #12]
 80055ce:	b954      	cbnz	r4, 80055e6 <__assert_func+0x26>
 80055d0:	4b07      	ldr	r3, [pc, #28]	@ (80055f0 <__assert_func+0x30>)
 80055d2:	461c      	mov	r4, r3
 80055d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055d8:	9100      	str	r1, [sp, #0]
 80055da:	462b      	mov	r3, r5
 80055dc:	4905      	ldr	r1, [pc, #20]	@ (80055f4 <__assert_func+0x34>)
 80055de:	f000 f841 	bl	8005664 <fiprintf>
 80055e2:	f000 f8d5 	bl	8005790 <abort>
 80055e6:	4b04      	ldr	r3, [pc, #16]	@ (80055f8 <__assert_func+0x38>)
 80055e8:	e7f4      	b.n	80055d4 <__assert_func+0x14>
 80055ea:	bf00      	nop
 80055ec:	20000018 	.word	0x20000018
 80055f0:	08005afe 	.word	0x08005afe
 80055f4:	08005ad0 	.word	0x08005ad0
 80055f8:	08005ac3 	.word	0x08005ac3

080055fc <_calloc_r>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	fba1 5402 	umull	r5, r4, r1, r2
 8005602:	b93c      	cbnz	r4, 8005614 <_calloc_r+0x18>
 8005604:	4629      	mov	r1, r5
 8005606:	f7ff f9dd 	bl	80049c4 <_malloc_r>
 800560a:	4606      	mov	r6, r0
 800560c:	b928      	cbnz	r0, 800561a <_calloc_r+0x1e>
 800560e:	2600      	movs	r6, #0
 8005610:	4630      	mov	r0, r6
 8005612:	bd70      	pop	{r4, r5, r6, pc}
 8005614:	220c      	movs	r2, #12
 8005616:	6002      	str	r2, [r0, #0]
 8005618:	e7f9      	b.n	800560e <_calloc_r+0x12>
 800561a:	462a      	mov	r2, r5
 800561c:	4621      	mov	r1, r4
 800561e:	f7fe fa7e 	bl	8003b1e <memset>
 8005622:	e7f5      	b.n	8005610 <_calloc_r+0x14>

08005624 <__ascii_mbtowc>:
 8005624:	b082      	sub	sp, #8
 8005626:	b901      	cbnz	r1, 800562a <__ascii_mbtowc+0x6>
 8005628:	a901      	add	r1, sp, #4
 800562a:	b142      	cbz	r2, 800563e <__ascii_mbtowc+0x1a>
 800562c:	b14b      	cbz	r3, 8005642 <__ascii_mbtowc+0x1e>
 800562e:	7813      	ldrb	r3, [r2, #0]
 8005630:	600b      	str	r3, [r1, #0]
 8005632:	7812      	ldrb	r2, [r2, #0]
 8005634:	1e10      	subs	r0, r2, #0
 8005636:	bf18      	it	ne
 8005638:	2001      	movne	r0, #1
 800563a:	b002      	add	sp, #8
 800563c:	4770      	bx	lr
 800563e:	4610      	mov	r0, r2
 8005640:	e7fb      	b.n	800563a <__ascii_mbtowc+0x16>
 8005642:	f06f 0001 	mvn.w	r0, #1
 8005646:	e7f8      	b.n	800563a <__ascii_mbtowc+0x16>

08005648 <__ascii_wctomb>:
 8005648:	4603      	mov	r3, r0
 800564a:	4608      	mov	r0, r1
 800564c:	b141      	cbz	r1, 8005660 <__ascii_wctomb+0x18>
 800564e:	2aff      	cmp	r2, #255	@ 0xff
 8005650:	d904      	bls.n	800565c <__ascii_wctomb+0x14>
 8005652:	228a      	movs	r2, #138	@ 0x8a
 8005654:	f04f 30ff 	mov.w	r0, #4294967295
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	4770      	bx	lr
 800565c:	2001      	movs	r0, #1
 800565e:	700a      	strb	r2, [r1, #0]
 8005660:	4770      	bx	lr
	...

08005664 <fiprintf>:
 8005664:	b40e      	push	{r1, r2, r3}
 8005666:	b503      	push	{r0, r1, lr}
 8005668:	4601      	mov	r1, r0
 800566a:	ab03      	add	r3, sp, #12
 800566c:	4805      	ldr	r0, [pc, #20]	@ (8005684 <fiprintf+0x20>)
 800566e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005672:	6800      	ldr	r0, [r0, #0]
 8005674:	9301      	str	r3, [sp, #4]
 8005676:	f7ff fdd9 	bl	800522c <_vfiprintf_r>
 800567a:	b002      	add	sp, #8
 800567c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005680:	b003      	add	sp, #12
 8005682:	4770      	bx	lr
 8005684:	20000018 	.word	0x20000018

08005688 <__swhatbuf_r>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	460c      	mov	r4, r1
 800568c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005690:	4615      	mov	r5, r2
 8005692:	2900      	cmp	r1, #0
 8005694:	461e      	mov	r6, r3
 8005696:	b096      	sub	sp, #88	@ 0x58
 8005698:	da0c      	bge.n	80056b4 <__swhatbuf_r+0x2c>
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	2100      	movs	r1, #0
 800569e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80056a2:	bf14      	ite	ne
 80056a4:	2340      	movne	r3, #64	@ 0x40
 80056a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80056aa:	2000      	movs	r0, #0
 80056ac:	6031      	str	r1, [r6, #0]
 80056ae:	602b      	str	r3, [r5, #0]
 80056b0:	b016      	add	sp, #88	@ 0x58
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	466a      	mov	r2, sp
 80056b6:	f000 f849 	bl	800574c <_fstat_r>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	dbed      	blt.n	800569a <__swhatbuf_r+0x12>
 80056be:	9901      	ldr	r1, [sp, #4]
 80056c0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80056c4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80056c8:	4259      	negs	r1, r3
 80056ca:	4159      	adcs	r1, r3
 80056cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056d0:	e7eb      	b.n	80056aa <__swhatbuf_r+0x22>

080056d2 <__smakebuf_r>:
 80056d2:	898b      	ldrh	r3, [r1, #12]
 80056d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056d6:	079d      	lsls	r5, r3, #30
 80056d8:	4606      	mov	r6, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	d507      	bpl.n	80056ee <__smakebuf_r+0x1c>
 80056de:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80056e2:	6023      	str	r3, [r4, #0]
 80056e4:	6123      	str	r3, [r4, #16]
 80056e6:	2301      	movs	r3, #1
 80056e8:	6163      	str	r3, [r4, #20]
 80056ea:	b003      	add	sp, #12
 80056ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ee:	466a      	mov	r2, sp
 80056f0:	ab01      	add	r3, sp, #4
 80056f2:	f7ff ffc9 	bl	8005688 <__swhatbuf_r>
 80056f6:	9f00      	ldr	r7, [sp, #0]
 80056f8:	4605      	mov	r5, r0
 80056fa:	4639      	mov	r1, r7
 80056fc:	4630      	mov	r0, r6
 80056fe:	f7ff f961 	bl	80049c4 <_malloc_r>
 8005702:	b948      	cbnz	r0, 8005718 <__smakebuf_r+0x46>
 8005704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005708:	059a      	lsls	r2, r3, #22
 800570a:	d4ee      	bmi.n	80056ea <__smakebuf_r+0x18>
 800570c:	f023 0303 	bic.w	r3, r3, #3
 8005710:	f043 0302 	orr.w	r3, r3, #2
 8005714:	81a3      	strh	r3, [r4, #12]
 8005716:	e7e2      	b.n	80056de <__smakebuf_r+0xc>
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800571e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005722:	81a3      	strh	r3, [r4, #12]
 8005724:	9b01      	ldr	r3, [sp, #4]
 8005726:	6020      	str	r0, [r4, #0]
 8005728:	b15b      	cbz	r3, 8005742 <__smakebuf_r+0x70>
 800572a:	4630      	mov	r0, r6
 800572c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005730:	f000 f81e 	bl	8005770 <_isatty_r>
 8005734:	b128      	cbz	r0, 8005742 <__smakebuf_r+0x70>
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	f023 0303 	bic.w	r3, r3, #3
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	81a3      	strh	r3, [r4, #12]
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	431d      	orrs	r5, r3
 8005746:	81a5      	strh	r5, [r4, #12]
 8005748:	e7cf      	b.n	80056ea <__smakebuf_r+0x18>
	...

0800574c <_fstat_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	2300      	movs	r3, #0
 8005750:	4d06      	ldr	r5, [pc, #24]	@ (800576c <_fstat_r+0x20>)
 8005752:	4604      	mov	r4, r0
 8005754:	4608      	mov	r0, r1
 8005756:	4611      	mov	r1, r2
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	f7fb fe5b 	bl	8001414 <_fstat>
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	d102      	bne.n	8005768 <_fstat_r+0x1c>
 8005762:	682b      	ldr	r3, [r5, #0]
 8005764:	b103      	cbz	r3, 8005768 <_fstat_r+0x1c>
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	bd38      	pop	{r3, r4, r5, pc}
 800576a:	bf00      	nop
 800576c:	20000364 	.word	0x20000364

08005770 <_isatty_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	2300      	movs	r3, #0
 8005774:	4d05      	ldr	r5, [pc, #20]	@ (800578c <_isatty_r+0x1c>)
 8005776:	4604      	mov	r4, r0
 8005778:	4608      	mov	r0, r1
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	f7fb fe59 	bl	8001432 <_isatty>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_isatty_r+0x1a>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	b103      	cbz	r3, 800578a <_isatty_r+0x1a>
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	20000364 	.word	0x20000364

08005790 <abort>:
 8005790:	2006      	movs	r0, #6
 8005792:	b508      	push	{r3, lr}
 8005794:	f000 f82c 	bl	80057f0 <raise>
 8005798:	2001      	movs	r0, #1
 800579a:	f7fb fdec 	bl	8001376 <_exit>

0800579e <_raise_r>:
 800579e:	291f      	cmp	r1, #31
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4605      	mov	r5, r0
 80057a4:	460c      	mov	r4, r1
 80057a6:	d904      	bls.n	80057b2 <_raise_r+0x14>
 80057a8:	2316      	movs	r3, #22
 80057aa:	6003      	str	r3, [r0, #0]
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	bd38      	pop	{r3, r4, r5, pc}
 80057b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80057b4:	b112      	cbz	r2, 80057bc <_raise_r+0x1e>
 80057b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057ba:	b94b      	cbnz	r3, 80057d0 <_raise_r+0x32>
 80057bc:	4628      	mov	r0, r5
 80057be:	f000 f831 	bl	8005824 <_getpid_r>
 80057c2:	4622      	mov	r2, r4
 80057c4:	4601      	mov	r1, r0
 80057c6:	4628      	mov	r0, r5
 80057c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057cc:	f000 b818 	b.w	8005800 <_kill_r>
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d00a      	beq.n	80057ea <_raise_r+0x4c>
 80057d4:	1c59      	adds	r1, r3, #1
 80057d6:	d103      	bne.n	80057e0 <_raise_r+0x42>
 80057d8:	2316      	movs	r3, #22
 80057da:	6003      	str	r3, [r0, #0]
 80057dc:	2001      	movs	r0, #1
 80057de:	e7e7      	b.n	80057b0 <_raise_r+0x12>
 80057e0:	2100      	movs	r1, #0
 80057e2:	4620      	mov	r0, r4
 80057e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80057e8:	4798      	blx	r3
 80057ea:	2000      	movs	r0, #0
 80057ec:	e7e0      	b.n	80057b0 <_raise_r+0x12>
	...

080057f0 <raise>:
 80057f0:	4b02      	ldr	r3, [pc, #8]	@ (80057fc <raise+0xc>)
 80057f2:	4601      	mov	r1, r0
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	f7ff bfd2 	b.w	800579e <_raise_r>
 80057fa:	bf00      	nop
 80057fc:	20000018 	.word	0x20000018

08005800 <_kill_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	2300      	movs	r3, #0
 8005804:	4d06      	ldr	r5, [pc, #24]	@ (8005820 <_kill_r+0x20>)
 8005806:	4604      	mov	r4, r0
 8005808:	4608      	mov	r0, r1
 800580a:	4611      	mov	r1, r2
 800580c:	602b      	str	r3, [r5, #0]
 800580e:	f7fb fda2 	bl	8001356 <_kill>
 8005812:	1c43      	adds	r3, r0, #1
 8005814:	d102      	bne.n	800581c <_kill_r+0x1c>
 8005816:	682b      	ldr	r3, [r5, #0]
 8005818:	b103      	cbz	r3, 800581c <_kill_r+0x1c>
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	bd38      	pop	{r3, r4, r5, pc}
 800581e:	bf00      	nop
 8005820:	20000364 	.word	0x20000364

08005824 <_getpid_r>:
 8005824:	f7fb bd90 	b.w	8001348 <_getpid>

08005828 <_init>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr

08005834 <_fini>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	bf00      	nop
 8005838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583a:	bc08      	pop	{r3}
 800583c:	469e      	mov	lr, r3
 800583e:	4770      	bx	lr
